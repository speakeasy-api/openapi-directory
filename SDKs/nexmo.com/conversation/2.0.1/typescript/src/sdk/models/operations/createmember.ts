/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Create a Member in invite state
 */
export class CreateMemberRequestBody extends SpeakeasyBase {
  /**
   * Invite or join a member to a conversation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: shared.MemberActionEnum;

  /**
   * A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => shared.Channel)
  channel: shared.Channel;

  /**
   * Knocker ID. A knocker is a pre-member of a conversation who does not exist yet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "knocking_id" })
  knockingId?: string;

  /**
   * Media Object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "media" })
  media?: Record<string, any>;

  /**
   * Member ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "member_id" })
  memberId?: string;

  /**
   * Member ID of the member that sends the invitation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "member_id_inviting" })
  memberIdInviting?: string;

  /**
   * User ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId: string;
}

export class CreateMemberRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: CreateMemberRequestBody;

  /**
   * Conversation ID
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=conversation_id",
  })
  conversationId: string;
}

/**
 * Create or invite Member in invite state
 */
export class CreateMember201ApplicationJSON extends SpeakeasyBase {
  /**
   * A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => shared.Channel)
  channel?: shared.Channel;

  /**
   * A link towards a member included in Conversation API
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * Member ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "initiator" })
  @Type(() => shared.Initiator)
  initiator?: shared.Initiator;

  /**
   * The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: shared.MemberStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Type(() => shared.TimestampResMember)
  timestamp?: shared.TimestampResMember;

  /**
   * User ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}

export class CreateMemberResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Create or invite Member in invite state
   */
  @SpeakeasyMetadata()
  createMember201ApplicationJSONObject?: CreateMember201ApplicationJSON;
}
