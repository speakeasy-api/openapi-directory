"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import direction_enum as shared_direction_enum
from ..shared import issue as shared_issue
from datetime import datetime
from enum import Enum
from typing import Optional

class IssuesListForOrgFilterEnum(str, Enum):
    r"""Indicates which sorts of issues to return. Can be one of:
    \* `assigned`: Issues assigned to you  
    \* `created`: Issues created by you  
    \* `mentioned`: Issues mentioning you  
    \* `subscribed`: Issues you're subscribed to updates for  
    \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
    """
    ASSIGNED = 'assigned'
    CREATED = 'created'
    MENTIONED = 'mentioned'
    SUBSCRIBED = 'subscribed'
    REPOS = 'repos'
    ALL = 'all'

class IssuesListForOrgSortEnum(str, Enum):
    r"""What to sort results by. Can be either `created`, `updated`, `comments`."""
    CREATED = 'created'
    UPDATED = 'updated'
    COMMENTS = 'comments'

class IssuesListForOrgStateEnum(str, Enum):
    r"""Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`."""
    OPEN = 'open'
    CLOSED = 'closed'
    ALL = 'all'


@dataclasses.dataclass
class IssuesListForOrgRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})  
    direction: Optional[shared_direction_enum.DirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""One of `asc` (ascending) or `desc` (descending)."""  
    filter: Optional[IssuesListForOrgFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Indicates which sorts of issues to return. Can be one of:
    \* `assigned`: Issues assigned to you  
    \* `created`: Issues created by you  
    \* `mentioned`: Issues mentioning you  
    \* `subscribed`: Issues you're subscribed to updates for  
    \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
    """  
    labels: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'labels', 'style': 'form', 'explode': True }})
    r"""A list of comma separated label names. Example: `bug,ui,@high`"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    since: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'since', 'style': 'form', 'explode': True }})
    r"""Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    sort: Optional[IssuesListForOrgSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""What to sort results by. Can be either `created`, `updated`, `comments`."""  
    state: Optional[IssuesListForOrgStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`."""  
    

@dataclasses.dataclass
class IssuesListForOrgResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    issues: Optional[list[shared_issue.Issue]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    