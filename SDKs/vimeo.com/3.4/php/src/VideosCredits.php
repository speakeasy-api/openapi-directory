<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VideosCredits 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Credit a user in a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditResponse
     */
	public function addVideoCredit(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/credits', \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Credit', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Credit a user in a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditAlt1Response
     */
	public function addVideoCreditAlt1(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/videos/{video_id}/credits', \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoCreditAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Credit', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a credit for a user in a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditResponse
     */
	public function deleteVideoCredit(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/credits/{credit_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoCreditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a credit for a user in a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditResponse
     */
	public function editVideoCredit(
        \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/credits/{credit_id}', \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditVideoCreditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Credit', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific credited user in a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditResponse
     */
	public function getVideoCredit(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/credits/{credit_id}', \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Credit', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the credited users in a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsResponse
     */
	public function getVideoCredits(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/credits', \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credits = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Credit>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the credited users in a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsAlt1Response
     */
	public function getVideoCreditsAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/videos/{video_id}/credits', \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoCreditsAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.credit+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credits = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Credit>', 'json');
            }
        }

        return $response;
    }
}