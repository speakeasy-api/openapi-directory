<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Teamdrives 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deprecated use drives.delete instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteResponse
     */
	public function driveTeamdrivesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teamdrives/{teamDriveId}', \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deprecated use drives.get instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetResponse
     */
	public function driveTeamdrivesGet(
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teamdrives/{teamDriveId}', \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamDrive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeamDrive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deprecated use drives.insert instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertResponse
     */
	public function driveTeamdrivesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teamdrives');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "teamDrive", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamDrive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeamDrive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deprecated use drives.list instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListResponse
     */
	public function driveTeamdrivesList(
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teamdrives');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamDriveList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeamDriveList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deprecated use drives.update instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateResponse
     */
	public function driveTeamdrivesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teamdrives/{teamDriveId}', \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "teamDrive", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveTeamdrivesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamDrive = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeamDrive', 'json');
            }
        }

        return $response;
    }
}