// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HTTPRulePostRuleTypeEnum string

const (
	HTTPRulePostRuleTypeEnumHTTP HTTPRulePostRuleTypeEnum = "http"
)

func (e HTTPRulePostRuleTypeEnum) ToPointer() *HTTPRulePostRuleTypeEnum {
	return &e
}

func (e *HTTPRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = HTTPRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPRulePostRuleTypeEnum: %v", v)
	}
}

type HTTPRulePostTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type HTTPRulePostTarget struct {
	Enveloped    *bool                       `json:"enveloped,omitempty"`
	Format       string                      `json:"format"`
	Headers      []HTTPRulePostTargetHeaders `json:"headers,omitempty"`
	SigningKeyID *string                     `json:"signingKeyId,omitempty"`
	URL          string                      `json:"url"`
}

type HTTPRulePost struct {
	RequestMode string                   `json:"requestMode"`
	RuleType    HTTPRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource               `json:"source"`
	Status      *string                  `json:"status,omitempty"`
	Target      HTTPRulePostTarget       `json:"target"`
}
