"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import collectionprivacy_enum as shared_collectionprivacy_enum
from ..shared import collectiontype_enum as shared_collectiontype_enum
from ..shared import resourcecollaborator as shared_resourcecollaborator
from ..shared import resourcerights as shared_resourcerights
from ..shared import userpublicsummary as shared_userpublicsummary
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CollectionCapabilities:
    r"""Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take."""
    
    can_add_scores: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canAddScores'), 'exclude': lambda f: f is None }})
    r"""Whether the current user can add scores to the collection
    
    If this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score.
    """  
    can_delete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canDelete'), 'exclude': lambda f: f is None }})
    r"""Whether the current user can delete the collection"""  
    can_delete_scores: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canDeleteScores'), 'exclude': lambda f: f is None }})
    r"""Whether the current user can delete scores from the collection
    
    If this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score.
    """  
    can_edit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canEdit'), 'exclude': lambda f: f is None }})
    r"""Whether the current user can modify the metadata for the collection"""  
    can_share: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canShare'), 'exclude': lambda f: f is None }})
    r"""Whether the current user can modify the sharing settings for the collection"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Collection:
    r"""Collection of scores"""
    
    app: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app'), 'exclude': lambda f: f is None }})
    r"""If this directory is dedicated to an app, the unique idenfier of this app"""  
    capabilities: Optional[CollectionCapabilities] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    r"""Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take."""  
    collaborators: Optional[list[shared_resourcecollaborator.ResourceCollaborator]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborators'), 'exclude': lambda f: f is None }})
    r"""The list of the collaborators of the collection"""  
    collections: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections'), 'exclude': lambda f: f is None }})
    r"""The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them."""  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the collection was created"""  
    html_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlUrl'), 'exclude': lambda f: f is None }})
    r"""The url where the collection can be viewed in a web browser"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the collection"""  
    privacy: Optional[shared_collectionprivacy_enum.CollectionPrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})
    r"""The collection main privacy mode.
    - `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.
    """  
    rights: Optional[shared_resourcerights.ResourceRights] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rights'), 'exclude': lambda f: f is None }})
    r"""The rights of the current user on a score or collection"""  
    sharing_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharingKey'), 'exclude': lambda f: f is None }})
    r"""The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the collection"""  
    type: Optional[shared_collectiontype_enum.CollectionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the collection.
    The type will influence the capabilitied available on the collections and how this collection is/can be populated.
    """  
    user: Optional[shared_userpublicsummary.UserPublicSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Public User details summary"""  
    