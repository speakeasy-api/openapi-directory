<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Cards 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a card
     * 
     * Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveResponse
     */
	public function deleteCrmV3ExtensionsCardsAppIdCardIdArchive(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/v3/extensions/cards/{appId}/{cardId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get a card.
     * 
     * Returns the definition for a card with the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdResponse
     */
	public function getCrmV3ExtensionsCardsAppIdCardIdGetById(
        \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/v3/extensions/cards/{appId}/{cardId}', \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdCardIdGetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CardResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get all cards
     * 
     * Returns a list of cards for a given app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllResponse
     */
	public function getCrmV3ExtensionsCardsAppIdGetAll(
        \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/v3/extensions/cards/{appId}', \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCrmV3ExtensionsCardsAppIdGetAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cardListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CardListResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a card
     * 
     * Update a card definition with new details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateResponse
     */
	public function patchCrmV3ExtensionsCardsAppIdCardIdUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/v3/extensions/cards/{appId}/{cardId}', \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cardPatchRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchCrmV3ExtensionsCardsAppIdCardIdUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CardResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a new card
     * 
     * Defines a new card that will become active on an account when this app is installed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateResponse
     */
	public function postCrmV3ExtensionsCardsAppIdCreate(
        \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crm/v3/extensions/cards/{appId}', \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cardCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCrmV3ExtensionsCardsAppIdCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CardResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}