"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNetworkWirelessSsidResponse = exports.UpdateNetworkWirelessSsidRequest = exports.UpdateNetworkWirelessSsidRequestBody = exports.UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum = exports.UpdateNetworkWirelessSsidRequestBodySplashPageEnum = exports.UpdateNetworkWirelessSsidRequestBodySpeedBurst = exports.UpdateNetworkWirelessSsidRequestBodyRadiusServers = exports.UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum = exports.UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum = exports.UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum = exports.UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers = exports.UpdateNetworkWirelessSsidRequestBodyOauth = exports.UpdateNetworkWirelessSsidRequestBodyLocalRadius = exports.UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication = exports.UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication = exports.UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate = exports.UpdateNetworkWirelessSsidRequestBodyLdap = exports.UpdateNetworkWirelessSsidRequestBodyLdapServers = exports.UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate = exports.UpdateNetworkWirelessSsidRequestBodyLdapCredentials = exports.UpdateNetworkWirelessSsidRequestBodyGre = exports.UpdateNetworkWirelessSsidRequestBodyGreConcentrator = exports.UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum = exports.UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum = exports.UpdateNetworkWirelessSsidRequestBodyDot11w = exports.UpdateNetworkWirelessSsidRequestBodyDot11r = exports.UpdateNetworkWirelessSsidRequestBodyDnsRewrite = exports.UpdateNetworkWirelessSsidRequestBodyAuthModeEnum = exports.UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds = exports.UpdateNetworkWirelessSsidRequestBodyActiveDirectory = exports.UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers = exports.UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * (Optional) The credentials of the user account to be used by the AP to bind to your Active Directory server. The Active Directory account should have permissions on all your Active Directory servers. Only valid if the splashPage is 'Password-protected with Active Directory'.
 */
var UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials, _super);
    function UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "logonName" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials.prototype, "logonName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "password" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials.prototype, "password", void 0);
    return UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials = UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials;
var UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers, _super);
    function UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers.prototype, "port", void 0);
    return UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers = UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers;
/**
 * The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
 */
var UpdateNetworkWirelessSsidRequestBodyActiveDirectory = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyActiveDirectory, _super);
    function UpdateNetworkWirelessSsidRequestBodyActiveDirectory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "credentials" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyActiveDirectoryCredentials)
    ], UpdateNetworkWirelessSsidRequestBodyActiveDirectory.prototype, "credentials", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers,
        }),
        (0, class_transformer_1.Expose)({ name: "servers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyActiveDirectoryServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBodyActiveDirectory.prototype, "servers", void 0);
    return UpdateNetworkWirelessSsidRequestBodyActiveDirectory;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyActiveDirectory = UpdateNetworkWirelessSsidRequestBodyActiveDirectory;
var UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds, _super);
    function UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tags" }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds.prototype, "vlanId", void 0);
    return UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds = UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds;
/**
 * The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')
 */
var UpdateNetworkWirelessSsidRequestBodyAuthModeEnum;
(function (UpdateNetworkWirelessSsidRequestBodyAuthModeEnum) {
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexGoogle"] = "8021x-google";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexLocalradius"] = "8021x-localradius";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexMeraki"] = "8021x-meraki";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexNac"] = "8021x-nac";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexRadius"] = "8021x-radius";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["IpskWithRadius"] = "ipsk-with-radius";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["IpskWithoutRadius"] = "ipsk-without-radius";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["Open"] = "open";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["OpenEnhanced"] = "open-enhanced";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["OpenWithNac"] = "open-with-nac";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["OpenWithRadius"] = "open-with-radius";
    UpdateNetworkWirelessSsidRequestBodyAuthModeEnum["Psk"] = "psk";
})(UpdateNetworkWirelessSsidRequestBodyAuthModeEnum = exports.UpdateNetworkWirelessSsidRequestBodyAuthModeEnum || (exports.UpdateNetworkWirelessSsidRequestBodyAuthModeEnum = {}));
/**
 * DNS servers rewrite settings
 */
var UpdateNetworkWirelessSsidRequestBodyDnsRewrite = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyDnsRewrite, _super);
    function UpdateNetworkWirelessSsidRequestBodyDnsRewrite() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsCustomNameservers" }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBodyDnsRewrite.prototype, "dnsCustomNameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyDnsRewrite.prototype, "enabled", void 0);
    return UpdateNetworkWirelessSsidRequestBodyDnsRewrite;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyDnsRewrite = UpdateNetworkWirelessSsidRequestBodyDnsRewrite;
/**
 * The current setting for 802.11r
 */
var UpdateNetworkWirelessSsidRequestBodyDot11r = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyDot11r, _super);
    function UpdateNetworkWirelessSsidRequestBodyDot11r() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "adaptive" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyDot11r.prototype, "adaptive", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyDot11r.prototype, "enabled", void 0);
    return UpdateNetworkWirelessSsidRequestBodyDot11r;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyDot11r = UpdateNetworkWirelessSsidRequestBodyDot11r;
/**
 * The current setting for Protected Management Frames (802.11w).
 */
var UpdateNetworkWirelessSsidRequestBodyDot11w = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyDot11w, _super);
    function UpdateNetworkWirelessSsidRequestBodyDot11w() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyDot11w.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "required" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyDot11w.prototype, "required", void 0);
    return UpdateNetworkWirelessSsidRequestBodyDot11w;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyDot11w = UpdateNetworkWirelessSsidRequestBodyDot11w;
/**
 * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'
 */
var UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum;
(function (UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum) {
    UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum["Wep"] = "wep";
    UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum["Wpa"] = "wpa";
})(UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum = exports.UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum || (exports.UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum = {}));
/**
 * Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
 */
var UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum;
(function (UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum) {
    UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum["AccessDisabled"] = "access disabled";
    UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum["AccessEnabled"] = "access enabled";
})(UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum = exports.UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum || (exports.UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum = {}));
/**
 * The EoGRE concentrator's settings
 */
var UpdateNetworkWirelessSsidRequestBodyGreConcentrator = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyGreConcentrator, _super);
    function UpdateNetworkWirelessSsidRequestBodyGreConcentrator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyGreConcentrator.prototype, "host", void 0);
    return UpdateNetworkWirelessSsidRequestBodyGreConcentrator;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyGreConcentrator = UpdateNetworkWirelessSsidRequestBodyGreConcentrator;
/**
 * Ethernet over GRE settings
 */
var UpdateNetworkWirelessSsidRequestBodyGre = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyGre, _super);
    function UpdateNetworkWirelessSsidRequestBodyGre() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentrator" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyGreConcentrator; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyGreConcentrator)
    ], UpdateNetworkWirelessSsidRequestBodyGre.prototype, "concentrator", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "key" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyGre.prototype, "key", void 0);
    return UpdateNetworkWirelessSsidRequestBodyGre;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyGre = UpdateNetworkWirelessSsidRequestBodyGre;
/**
 * (Optional) The credentials of the user account to be used by the AP to bind to your LDAP server. The LDAP account should have permissions on all your LDAP servers.
 */
var UpdateNetworkWirelessSsidRequestBodyLdapCredentials = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLdapCredentials, _super);
    function UpdateNetworkWirelessSsidRequestBodyLdapCredentials() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "distinguishedName" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyLdapCredentials.prototype, "distinguishedName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "password" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyLdapCredentials.prototype, "password", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLdapCredentials;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLdapCredentials = UpdateNetworkWirelessSsidRequestBodyLdapCredentials;
/**
 * The CA certificate used to sign the LDAP server's key.
 */
var UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate, _super);
    function UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "contents" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate.prototype, "contents", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate = UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate;
var UpdateNetworkWirelessSsidRequestBodyLdapServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLdapServers, _super);
    function UpdateNetworkWirelessSsidRequestBodyLdapServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyLdapServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyLdapServers.prototype, "port", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLdapServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLdapServers = UpdateNetworkWirelessSsidRequestBodyLdapServers;
/**
 * The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
 */
var UpdateNetworkWirelessSsidRequestBodyLdap = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLdap, _super);
    function UpdateNetworkWirelessSsidRequestBodyLdap() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "baseDistinguishedName" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyLdap.prototype, "baseDistinguishedName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "credentials" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyLdapCredentials; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyLdapCredentials)
    ], UpdateNetworkWirelessSsidRequestBodyLdap.prototype, "credentials", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serverCaCertificate" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyLdapServerCaCertificate)
    ], UpdateNetworkWirelessSsidRequestBodyLdap.prototype, "serverCaCertificate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkWirelessSsidRequestBodyLdapServers,
        }),
        (0, class_transformer_1.Expose)({ name: "servers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyLdapServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBodyLdap.prototype, "servers", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLdap;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLdap = UpdateNetworkWirelessSsidRequestBodyLdap;
/**
 * The Client CA Certificate used to sign the client certificate.
 */
var UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate, _super);
    function UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "contents" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate.prototype, "contents", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate = UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate;
/**
 * The current setting for certificate verification.
 */
var UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication, _super);
    function UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clientRootCaCertificate" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate;
        }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthenticationClientRootCaCertificate)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication.prototype, "clientRootCaCertificate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ocspResponderUrl" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication.prototype, "ocspResponderUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useLdap" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication.prototype, "useLdap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useOcsp" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication.prototype, "useOcsp", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication = UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication;
/**
 * The current setting for password-based authentication.
 */
var UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication, _super);
    function UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication.prototype, "enabled", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication = UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication;
/**
 * The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
 */
var UpdateNetworkWirelessSsidRequestBodyLocalRadius = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyLocalRadius, _super);
    function UpdateNetworkWirelessSsidRequestBodyLocalRadius() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cacheTimeout" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadius.prototype, "cacheTimeout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "certificateAuthentication" }),
        (0, class_transformer_1.Type)(function () {
            return UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication;
        }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyLocalRadiusCertificateAuthentication)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadius.prototype, "certificateAuthentication", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordAuthentication" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyLocalRadiusPasswordAuthentication)
    ], UpdateNetworkWirelessSsidRequestBodyLocalRadius.prototype, "passwordAuthentication", void 0);
    return UpdateNetworkWirelessSsidRequestBodyLocalRadius;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyLocalRadius = UpdateNetworkWirelessSsidRequestBodyLocalRadius;
/**
 * The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
 */
var UpdateNetworkWirelessSsidRequestBodyOauth = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyOauth, _super);
    function UpdateNetworkWirelessSsidRequestBodyOauth() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allowedDomains" }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBodyOauth.prototype, "allowedDomains", void 0);
    return UpdateNetworkWirelessSsidRequestBodyOauth;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyOauth = UpdateNetworkWirelessSsidRequestBodyOauth;
var UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers, _super);
    function UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "caCertificate" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers.prototype, "caCertificate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radsecEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers.prototype, "radsecEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secret" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers.prototype, "secret", void 0);
    return UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers = UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers;
/**
 * Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message
 */
var UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum;
(function (UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum) {
    UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum["AirespaceACLName"] = "Airespace-ACL-Name";
    UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum["ArubaUserRole"] = "Aruba-User-Role";
    UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum["FilterId"] = "Filter-Id";
    UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum["ReplyMessage"] = "Reply-Message";
})(UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum = exports.UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum || (exports.UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum = {}));
/**
 * This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
 */
var UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum;
(function (UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum) {
    UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum["AllowAccess"] = "Allow access";
    UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum["DenyAccess"] = "Deny access";
})(UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum = exports.UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum || (exports.UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum = {}));
/**
 * This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')
 */
var UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum;
(function (UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum) {
    UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum["RoundRobin"] = "Round robin";
    UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum["StrictPriorityOrder"] = "Strict priority order";
})(UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum = exports.UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum || (exports.UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum = {}));
var UpdateNetworkWirelessSsidRequestBodyRadiusServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodyRadiusServers, _super);
    function UpdateNetworkWirelessSsidRequestBodyRadiusServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "caCertificate" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusServers.prototype, "caCertificate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "openRoamingCertificateId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusServers.prototype, "openRoamingCertificateId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusServers.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radsecEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusServers.prototype, "radsecEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secret" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBodyRadiusServers.prototype, "secret", void 0);
    return UpdateNetworkWirelessSsidRequestBodyRadiusServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodyRadiusServers = UpdateNetworkWirelessSsidRequestBodyRadiusServers;
/**
 * The SpeedBurst setting for this SSID'
 */
var UpdateNetworkWirelessSsidRequestBodySpeedBurst = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBodySpeedBurst, _super);
    function UpdateNetworkWirelessSsidRequestBodySpeedBurst() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBodySpeedBurst.prototype, "enabled", void 0);
    return UpdateNetworkWirelessSsidRequestBodySpeedBurst;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBodySpeedBurst = UpdateNetworkWirelessSsidRequestBodySpeedBurst;
/**
 * The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.
 */
var UpdateNetworkWirelessSsidRequestBodySplashPageEnum;
(function (UpdateNetworkWirelessSsidRequestBodySplashPageEnum) {
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["Billing"] = "Billing";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["CiscoISE"] = "Cisco ISE";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["ClickThroughSplashPage"] = "Click-through splash page";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["FacebookWiFi"] = "Facebook Wi-Fi";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["GoogleAppsDomain"] = "Google Apps domain";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["GoogleOAuth"] = "Google OAuth";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["None"] = "None";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["PasswordProtectedWithActiveDirectory"] = "Password-protected with Active Directory";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["PasswordProtectedWithLDAP"] = "Password-protected with LDAP";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["PasswordProtectedWithMerakiRADIUS"] = "Password-protected with Meraki RADIUS";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["PasswordProtectedWithCustomRADIUS"] = "Password-protected with custom RADIUS";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["SMSAuthentication"] = "SMS authentication";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["SponsoredGuest"] = "Sponsored guest";
    UpdateNetworkWirelessSsidRequestBodySplashPageEnum["SystemsManagerSentry"] = "Systems Manager Sentry";
})(UpdateNetworkWirelessSsidRequestBodySplashPageEnum = exports.UpdateNetworkWirelessSsidRequestBodySplashPageEnum || (exports.UpdateNetworkWirelessSsidRequestBodySplashPageEnum = {}));
/**
 * The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only')
 */
var UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum;
(function (UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum) {
    UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum["Wpa1AndWpa2"] = "WPA1 and WPA2";
    UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum["Wpa1Only"] = "WPA1 only";
    UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum["Wpa2Only"] = "WPA2 only";
    UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum["Wpa3TransitionMode"] = "WPA3 Transition Mode";
    UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum["Wpa3Only"] = "WPA3 only";
})(UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum = exports.UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum || (exports.UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum = {}));
var UpdateNetworkWirelessSsidRequestBody = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequestBody, _super);
    function UpdateNetworkWirelessSsidRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "activeDirectory" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyActiveDirectory; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyActiveDirectory)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "activeDirectory", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "adultContentFilteringEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "adultContentFilteringEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds,
        }),
        (0, class_transformer_1.Expose)({ name: "apTagsAndVlanIds" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds; }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "apTagsAndVlanIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "authMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availabilityTags" }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "availabilityTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availableOnAllAps" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "availableOnAllAps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bandSelection" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "bandSelection", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentratorNetworkId" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "concentratorNetworkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "defaultVlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "defaultVlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "disassociateClientsOnVpnFailover" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "disassociateClientsOnVpnFailover", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsRewrite" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyDnsRewrite; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyDnsRewrite)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "dnsRewrite", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dot11r" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyDot11r; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyDot11r)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "dot11r", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dot11w" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyDot11w; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyDot11w)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "dot11w", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "encryptionMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enterpriseAdminAccess" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "enterpriseAdminAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "gre" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyGre; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyGre)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "gre", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipAssignmentMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "ipAssignmentMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lanIsolationEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "lanIsolationEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ldap" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyLdap; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyLdap)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "ldap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "localRadius" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyLocalRadius; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyLocalRadius)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "localRadius", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mandatoryDhcpEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "mandatoryDhcpEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minBitrate" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "minBitrate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "oauth" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyOauth; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodyOauth)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "oauth", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "perClientBandwidthLimitDown" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "perClientBandwidthLimitDown", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "perClientBandwidthLimitUp" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "perClientBandwidthLimitUp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "perSsidBandwidthLimitDown" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "perSsidBandwidthLimitDown", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "perSsidBandwidthLimitUp" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "perSsidBandwidthLimitUp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "psk" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "psk", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusAccountingEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusAccountingEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusAccountingInterimInterval" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusAccountingInterimInterval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers,
        }),
        (0, class_transformer_1.Expose)({ name: "radiusAccountingServers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusAccountingServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusAttributeForGroupPolicies" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusAttributeForGroupPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusAuthenticationNasId" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusAuthenticationNasId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusCalledStationId" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusCalledStationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusCoaEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusCoaEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusFailoverPolicy" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusFailoverPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusFallbackEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusFallbackEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusGuestVlanEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusGuestVlanEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusGuestVlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusGuestVlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusLoadBalancingPolicy" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusLoadBalancingPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusOverride" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusOverride", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusProxyEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusProxyEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusServerAttemptsLimit" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusServerAttemptsLimit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusServerTimeout" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusServerTimeout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkWirelessSsidRequestBodyRadiusServers,
        }),
        (0, class_transformer_1.Expose)({ name: "radiusServers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodyRadiusServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusTestingEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "radiusTestingEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secondaryConcentratorNetworkId" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "secondaryConcentratorNetworkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "speedBurst" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkWirelessSsidRequestBodySpeedBurst; }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBodySpeedBurst)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "speedBurst", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "splashGuestSponsorDomains" }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "splashGuestSponsorDomains", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "splashPage" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "splashPage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useVlanTagging" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "useVlanTagging", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "visible" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "visible", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "vlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "walledGardenEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "walledGardenEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "walledGardenRanges" }),
        __metadata("design:type", Array)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "walledGardenRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "wpaEncryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequestBody.prototype, "wpaEncryptionMode", void 0);
    return UpdateNetworkWirelessSsidRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequestBody = UpdateNetworkWirelessSsidRequestBody;
var UpdateNetworkWirelessSsidRequest = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidRequest, _super);
    function UpdateNetworkWirelessSsidRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateNetworkWirelessSsidRequestBody)
    ], UpdateNetworkWirelessSsidRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequest.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=number",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidRequest.prototype, "number", void 0);
    return UpdateNetworkWirelessSsidRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidRequest = UpdateNetworkWirelessSsidRequest;
var UpdateNetworkWirelessSsidResponse = /** @class */ (function (_super) {
    __extends(UpdateNetworkWirelessSsidResponse, _super);
    function UpdateNetworkWirelessSsidResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateNetworkWirelessSsidResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateNetworkWirelessSsidResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkWirelessSsidResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkWirelessSsidResponse.prototype, "updateNetworkWirelessSsid200ApplicationJSONObject", void 0);
    return UpdateNetworkWirelessSsidResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkWirelessSsidResponse = UpdateNetworkWirelessSsidResponse;
