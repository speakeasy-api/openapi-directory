"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .get_devices import GetDevices
from .get_locations import GetLocations
from .get_os_browsers import GetOSBrowsers
from .get_profiles import GetProfiles
from .get_resolutions import GetResolutions
from .get_screenshots import GetScreenshots
from .get_zipped_screenshots import GetZippedScreenshots
from .start_screenshot_test import StartScreenshotTest
from .stop_screenshot_test import StopScreenshotTest

SERVERS = [
    "https://api.lambdatest.com/screenshots/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    get_devices: GetDevices
    get_locations: GetLocations
    get_os_browsers: GetOSBrowsers
    get_profiles: GetProfiles
    get_resolutions: GetResolutions
    get_screenshots: GetScreenshots
    get_zipped_screenshots: GetZippedScreenshots
    start_screenshot_test: StartScreenshotTest
    stop_screenshot_test: StopScreenshotTest

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.get_devices = GetDevices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.get_locations = GetLocations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.get_os_browsers = GetOSBrowsers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.get_profiles = GetProfiles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.get_resolutions = GetResolutions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.get_screenshots = GetScreenshots(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.get_zipped_screenshots = GetZippedScreenshots(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.start_screenshot_test = StartScreenshotTest(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.stop_screenshot_test = StopScreenshotTest(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    