// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// EmployeeCompensationsFlsaStatusEnum - The FLSA status for this compensation.
type EmployeeCompensationsFlsaStatusEnum string

const (
	EmployeeCompensationsFlsaStatusEnumExempt            EmployeeCompensationsFlsaStatusEnum = "exempt"
	EmployeeCompensationsFlsaStatusEnumSalariedNonexempt EmployeeCompensationsFlsaStatusEnum = "salaried-nonexempt"
	EmployeeCompensationsFlsaStatusEnumNonexempt         EmployeeCompensationsFlsaStatusEnum = "nonexempt"
	EmployeeCompensationsFlsaStatusEnumOwner             EmployeeCompensationsFlsaStatusEnum = "owner"
)

func (e *EmployeeCompensationsFlsaStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "exempt":
		fallthrough
	case "salaried-nonexempt":
		fallthrough
	case "nonexempt":
		fallthrough
	case "owner":
		*e = EmployeeCompensationsFlsaStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeCompensationsFlsaStatusEnum: %s", s)
	}
}

type EmployeeCompensations struct {
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// The date on which a change to an employee's compensation takes effect.
	EffectiveDate *string `json:"effective_date,omitempty"`
	// The FLSA status for this compensation.
	FlsaStatus *EmployeeCompensationsFlsaStatusEnum `json:"flsa_status,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The ID of the job to which the compensation belongs.
	JobID *string `json:"job_id,omitempty"`
	// Unit of measurement for employee compensation.
	PaymentUnit *PaymentUnitEnum `json:"payment_unit,omitempty"`
	// The amount paid per payment unit.
	Rate *float64 `json:"rate,omitempty"`
}

// EmployeeEmploymentRoleEmploymentSubTypeEnum - The work schedule of the employee.
type EmployeeEmploymentRoleEmploymentSubTypeEnum string

const (
	EmployeeEmploymentRoleEmploymentSubTypeEnumFullTime EmployeeEmploymentRoleEmploymentSubTypeEnum = "full_time"
	EmployeeEmploymentRoleEmploymentSubTypeEnumPartTime EmployeeEmploymentRoleEmploymentSubTypeEnum = "part_time"
	EmployeeEmploymentRoleEmploymentSubTypeEnumHourly   EmployeeEmploymentRoleEmploymentSubTypeEnum = "hourly"
)

func (e *EmployeeEmploymentRoleEmploymentSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full_time":
		fallthrough
	case "part_time":
		fallthrough
	case "hourly":
		*e = EmployeeEmploymentRoleEmploymentSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmploymentRoleEmploymentSubTypeEnum: %s", s)
	}
}

// EmployeeEmploymentRoleEmploymentTypeEnum - The type of employment relationship the employee has with the organization.
type EmployeeEmploymentRoleEmploymentTypeEnum string

const (
	EmployeeEmploymentRoleEmploymentTypeEnumContractor EmployeeEmploymentRoleEmploymentTypeEnum = "contractor"
	EmployeeEmploymentRoleEmploymentTypeEnumEmployee   EmployeeEmploymentRoleEmploymentTypeEnum = "employee"
	EmployeeEmploymentRoleEmploymentTypeEnumFreelance  EmployeeEmploymentRoleEmploymentTypeEnum = "freelance"
	EmployeeEmploymentRoleEmploymentTypeEnumTemp       EmployeeEmploymentRoleEmploymentTypeEnum = "temp"
	EmployeeEmploymentRoleEmploymentTypeEnumInternship EmployeeEmploymentRoleEmploymentTypeEnum = "internship"
	EmployeeEmploymentRoleEmploymentTypeEnumOther      EmployeeEmploymentRoleEmploymentTypeEnum = "other"
)

func (e *EmployeeEmploymentRoleEmploymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "contractor":
		fallthrough
	case "employee":
		fallthrough
	case "freelance":
		fallthrough
	case "temp":
		fallthrough
	case "internship":
		fallthrough
	case "other":
		*e = EmployeeEmploymentRoleEmploymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeEmploymentRoleEmploymentTypeEnum: %s", s)
	}
}

type EmployeeEmploymentRole struct {
	// The work schedule of the employee.
	SubType *EmployeeEmploymentRoleEmploymentSubTypeEnum `json:"sub_type,omitempty"`
	// The type of employment relationship the employee has with the organization.
	Type *EmployeeEmploymentRoleEmploymentTypeEnum `json:"type,omitempty"`
}

type EmployeeJobs struct {
	// The rate of pay for the employee in their current job role.
	CompensationRate *float64 `json:"compensation_rate,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// A unique identifier for an object.
	EmployeeID *string `json:"employee_id,omitempty"`
	// The date on which the employee leaves or is expected to leave their current job role.
	EndDate *types.Date `json:"end_date,omitempty"`
	// The date on which the employee was hired by the organization
	HiredAt *types.Date `json:"hired_at,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Indicates whether this the employee's primary job.
	IsPrimary *bool    `json:"is_primary,omitempty"`
	Location  *Address `json:"location,omitempty"`
	// Unit of measurement for employee compensation.
	PaymentUnit *PaymentUnitEnum `json:"payment_unit,omitempty"`
	// The position and responsibilities of the person within the organization.
	Role *string `json:"role,omitempty"`
	// The date on which the employee starts working in their current job role.
	StartDate *types.Date `json:"start_date,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
}

// EmployeeLeavingReasonEnum - The reason because the employment ended.
type EmployeeLeavingReasonEnum string

const (
	EmployeeLeavingReasonEnumDismissed  EmployeeLeavingReasonEnum = "dismissed"
	EmployeeLeavingReasonEnumResigned   EmployeeLeavingReasonEnum = "resigned"
	EmployeeLeavingReasonEnumRedundancy EmployeeLeavingReasonEnum = "redundancy"
	EmployeeLeavingReasonEnumOther      EmployeeLeavingReasonEnum = "other"
)

func (e *EmployeeLeavingReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dismissed":
		fallthrough
	case "resigned":
		fallthrough
	case "redundancy":
		fallthrough
	case "other":
		*e = EmployeeLeavingReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeLeavingReasonEnum: %s", s)
	}
}

type EmployeeManager struct {
	// The email address of the manager.
	Email *string `json:"email,omitempty"`
	// The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
	EmploymentStatus *EmploymentStatusEnum `json:"employment_status,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// The name of the manager, often a combination of their first and last names.
	Name *string `json:"name,omitempty"`
}

type EmployeePerson struct {
	Birthday   *types.Date `json:"birthday,omitempty"`
	DeceasedOn *types.Date `json:"deceased_on,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The gender represents the gender identity of a person.
	Gender *GenderEnum `json:"gender,omitempty"`
	// A unique identifier for an object.
	ID       *string `json:"id,omitempty"`
	Initials *string `json:"initials,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// Middle name of the person.
	MiddleName *string `json:"middle_name,omitempty"`
}

type EmployeeSocialLinks struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	URL  string  `json:"url"`
}

// EmployeeTeam - The team the person is currently in.
type EmployeeTeam struct {
	// The unique identifier of the team.
	ID *string `json:"id,omitempty"`
	// The name of the team.
	Name *string `json:"name,omitempty"`
}

type Employee struct {
	Addresses []Address `json:"addresses,omitempty"`
	// The date of birth of the person.
	Birthday *types.Date `json:"birthday,omitempty"`
	// The unique identifier of the company.
	CompanyID *string `json:"company_id,omitempty"`
	// The name of the company.
	CompanyName   *string                 `json:"company_name,omitempty"`
	Compensations []EmployeeCompensations `json:"compensations,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	CountryOfBirth *string `json:"country_of_birth,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy    *string       `json:"created_by,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// The date the person deceased.
	DeceasedOn *types.Date `json:"deceased_on,omitempty"`
	Deleted    *bool       `json:"deleted,omitempty"`
	// The department the person is currently in.
	Department *string `json:"department,omitempty"`
	// Unique identifier of the department ID this employee belongs to.
	DepartmentID *string `json:"department_id,omitempty"`
	// A description of the object.
	Description *string `json:"description,omitempty"`
	// Indicate the employee's dietary preference.
	DietaryPreference *string `json:"dietary_preference,omitempty"`
	// The direct reports refer to the individuals who report directly to a person in the organizational hierarchy.
	DirectReports []string `json:"direct_reports,omitempty"`
	// The name used to display the employee, often a combination of their first and last names.
	DisplayName *string `json:"display_name,omitempty"`
	// The division the person is currently in. Usually a collection of departments or teams or regions.
	Division *string `json:"division,omitempty"`
	// Unique identifier of the division this employee belongs to.
	DivisionID *string `json:"division_id,omitempty"`
	Emails     []Email `json:"emails,omitempty"`
	// An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
	EmployeeNumber *string `json:"employee_number,omitempty"`
	// An End Date is the date that the employee ended working at the company
	EmploymentEndDate *string                 `json:"employment_end_date,omitempty"`
	EmploymentRole    *EmployeeEmploymentRole `json:"employment_role,omitempty"`
	// A Start Date is the date that the employee started working at the company
	EmploymentStartDate *string `json:"employment_start_date,omitempty"`
	// The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
	EmploymentStatus *EmploymentStatusEnum `json:"employment_status,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// Indicate the employee's food allergies.
	FoodAllergies []string `json:"food_allergies,omitempty"`
	// The gender represents the gender identity of a person.
	Gender *GenderEnum `json:"gender,omitempty"`
	// A unique identifier for an object.
	ID string `json:"id"`
	// The initials of the person, usually derived from their first, middle, and last names.
	Initials  *string        `json:"initials,omitempty"`
	Jobs      []EmployeeJobs `json:"jobs,omitempty"`
	Languages []string       `json:"languages,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// The reason because the employment ended.
	LeavingReason *EmployeeLeavingReasonEnum `json:"leaving_reason,omitempty"`
	Manager       *EmployeeManager           `json:"manager,omitempty"`
	// The marital status of the employee.
	MaritalStatus *string `json:"marital_status,omitempty"`
	// Middle name of the person.
	MiddleName    *string         `json:"middle_name,omitempty"`
	Nationalities []string        `json:"nationalities,omitempty"`
	Partner       *EmployeePerson `json:"partner,omitempty"`
	PhoneNumbers  []PhoneNumber   `json:"phone_numbers,omitempty"`
	// The URL of the photo of a person.
	PhotoURL *string `json:"photo_url,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	PreferredLanguage *string `json:"preferred_language,omitempty"`
	// The name the employee prefers to be addressed by, which may be different from their legal name.
	PreferredName *string `json:"preferred_name,omitempty"`
	// The preferred pronouns of the person.
	Pronouns  *string `json:"pronouns,omitempty"`
	RecordURL *string `json:"record_url,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// A formal salutation for the person. For example, 'Mr', 'Mrs'
	Salutation  *string               `json:"salutation,omitempty"`
	SocialLinks []EmployeeSocialLinks `json:"social_links,omitempty"`
	// A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
	SocialSecurityNumber *string `json:"social_security_number,omitempty"`
	// When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
	Source *string `json:"source,omitempty"`
	// Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
	SourceID *string  `json:"source_id,omitempty"`
	Tags     []string `json:"tags,omitempty"`
	TaxCode  *string  `json:"tax_code,omitempty"`
	TaxID    *string  `json:"tax_id,omitempty"`
	// The team the person is currently in.
	Team *EmployeeTeam `json:"team,omitempty"`
	// The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
	Timezone *string `json:"timezone,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// Indicates if the employee works from a remote location.
	WorksRemote *bool `json:"works_remote,omitempty"`
}

type EmployeeCompensationsInput struct {
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// The date on which a change to an employee's compensation takes effect.
	EffectiveDate *string `json:"effective_date,omitempty"`
	// The FLSA status for this compensation.
	FlsaStatus *EmployeeCompensationsFlsaStatusEnum `json:"flsa_status,omitempty"`
	// Unit of measurement for employee compensation.
	PaymentUnit *PaymentUnitEnum `json:"payment_unit,omitempty"`
	// The amount paid per payment unit.
	Rate *float64 `json:"rate,omitempty"`
}

type EmployeeJobsInput struct {
	// The rate of pay for the employee in their current job role.
	CompensationRate *float64 `json:"compensation_rate,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// The date on which the employee leaves or is expected to leave their current job role.
	EndDate *types.Date `json:"end_date,omitempty"`
	// The date on which the employee was hired by the organization
	HiredAt *types.Date `json:"hired_at,omitempty"`
	// Indicates whether this the employee's primary job.
	IsPrimary *bool    `json:"is_primary,omitempty"`
	Location  *Address `json:"location,omitempty"`
	// Unit of measurement for employee compensation.
	PaymentUnit *PaymentUnitEnum `json:"payment_unit,omitempty"`
	// The position and responsibilities of the person within the organization.
	Role *string `json:"role,omitempty"`
	// The date on which the employee starts working in their current job role.
	StartDate *types.Date `json:"start_date,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
}

type EmployeeManagerInput struct {
	// The email address of the manager.
	Email *string `json:"email,omitempty"`
	// The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
	EmploymentStatus *EmploymentStatusEnum `json:"employment_status,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// The name of the manager, often a combination of their first and last names.
	Name *string `json:"name,omitempty"`
}

type EmployeePersonInput struct {
	Birthday   *types.Date `json:"birthday,omitempty"`
	DeceasedOn *types.Date `json:"deceased_on,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The gender represents the gender identity of a person.
	Gender   *GenderEnum `json:"gender,omitempty"`
	Initials *string     `json:"initials,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// Middle name of the person.
	MiddleName *string `json:"middle_name,omitempty"`
}

type EmployeeInput struct {
	Addresses []Address `json:"addresses,omitempty"`
	// The date of birth of the person.
	Birthday *types.Date `json:"birthday,omitempty"`
	// The unique identifier of the company.
	CompanyID *string `json:"company_id,omitempty"`
	// The name of the company.
	CompanyName   *string                      `json:"company_name,omitempty"`
	Compensations []EmployeeCompensationsInput `json:"compensations,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	CountryOfBirth *string       `json:"country_of_birth,omitempty"`
	CustomFields   []CustomField `json:"custom_fields,omitempty"`
	// The date the person deceased.
	DeceasedOn *types.Date `json:"deceased_on,omitempty"`
	Deleted    *bool       `json:"deleted,omitempty"`
	// The department the person is currently in.
	Department *string `json:"department,omitempty"`
	// Unique identifier of the department ID this employee belongs to.
	DepartmentID *string `json:"department_id,omitempty"`
	// A description of the object.
	Description *string `json:"description,omitempty"`
	// Indicate the employee's dietary preference.
	DietaryPreference *string `json:"dietary_preference,omitempty"`
	// The direct reports refer to the individuals who report directly to a person in the organizational hierarchy.
	DirectReports []string `json:"direct_reports,omitempty"`
	// The name used to display the employee, often a combination of their first and last names.
	DisplayName *string `json:"display_name,omitempty"`
	// The division the person is currently in. Usually a collection of departments or teams or regions.
	Division *string `json:"division,omitempty"`
	// Unique identifier of the division this employee belongs to.
	DivisionID *string `json:"division_id,omitempty"`
	Emails     []Email `json:"emails,omitempty"`
	// An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
	EmployeeNumber *string `json:"employee_number,omitempty"`
	// An End Date is the date that the employee ended working at the company
	EmploymentEndDate *string                 `json:"employment_end_date,omitempty"`
	EmploymentRole    *EmployeeEmploymentRole `json:"employment_role,omitempty"`
	// A Start Date is the date that the employee started working at the company
	EmploymentStartDate *string `json:"employment_start_date,omitempty"`
	// The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
	EmploymentStatus *EmploymentStatusEnum `json:"employment_status,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// Indicate the employee's food allergies.
	FoodAllergies []string `json:"food_allergies,omitempty"`
	// The gender represents the gender identity of a person.
	Gender *GenderEnum `json:"gender,omitempty"`
	// The initials of the person, usually derived from their first, middle, and last names.
	Initials  *string             `json:"initials,omitempty"`
	Jobs      []EmployeeJobsInput `json:"jobs,omitempty"`
	Languages []string            `json:"languages,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// The reason because the employment ended.
	LeavingReason *EmployeeLeavingReasonEnum `json:"leaving_reason,omitempty"`
	Manager       *EmployeeManagerInput      `json:"manager,omitempty"`
	// The marital status of the employee.
	MaritalStatus *string `json:"marital_status,omitempty"`
	// Middle name of the person.
	MiddleName    *string              `json:"middle_name,omitempty"`
	Nationalities []string             `json:"nationalities,omitempty"`
	Partner       *EmployeePersonInput `json:"partner,omitempty"`
	PhoneNumbers  []PhoneNumber        `json:"phone_numbers,omitempty"`
	// The URL of the photo of a person.
	PhotoURL *string `json:"photo_url,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	PreferredLanguage *string `json:"preferred_language,omitempty"`
	// The name the employee prefers to be addressed by, which may be different from their legal name.
	PreferredName *string `json:"preferred_name,omitempty"`
	// The preferred pronouns of the person.
	Pronouns  *string `json:"pronouns,omitempty"`
	RecordURL *string `json:"record_url,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// A formal salutation for the person. For example, 'Mr', 'Mrs'
	Salutation  *string               `json:"salutation,omitempty"`
	SocialLinks []EmployeeSocialLinks `json:"social_links,omitempty"`
	// A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
	SocialSecurityNumber *string `json:"social_security_number,omitempty"`
	// When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
	Source *string `json:"source,omitempty"`
	// Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
	SourceID *string  `json:"source_id,omitempty"`
	Tags     []string `json:"tags,omitempty"`
	TaxCode  *string  `json:"tax_code,omitempty"`
	TaxID    *string  `json:"tax_id,omitempty"`
	// The team the person is currently in.
	Team *EmployeeTeam `json:"team,omitempty"`
	// The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
	Timezone *string `json:"timezone,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// Indicates if the employee works from a remote location.
	WorksRemote *bool `json:"works_remote,omitempty"`
}
