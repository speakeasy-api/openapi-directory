"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConnectionProtocolEnum(str, Enum):
    r"""IANA Internet Protocol Number such as TCP(6) and UDP(17)."""
    PROTOCOL_UNSPECIFIED = 'PROTOCOL_UNSPECIFIED'
    ICMP = 'ICMP'
    TCP = 'TCP'
    UDP = 'UDP'
    GRE = 'GRE'
    ESP = 'ESP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Connection:
    r"""Contains information about the IP connection associated with the finding."""
    
    destination_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationIp'), 'exclude': lambda f: f is None }})
    r"""Destination IP address. Not present for sockets that are listening and not connected."""  
    destination_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationPort'), 'exclude': lambda f: f is None }})
    r"""Destination port. Not present for sockets that are listening and not connected."""  
    protocol: Optional[ConnectionProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""IANA Internet Protocol Number such as TCP(6) and UDP(17)."""  
    source_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceIp'), 'exclude': lambda f: f is None }})
    r"""Source IP address."""  
    source_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourcePort'), 'exclude': lambda f: f is None }})
    r"""Source port."""  
    