"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationAddress:
    r"""The corporation's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address. This is usually the street number and street."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the address. This might be the floor or room number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress:
    r"""The individual's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address. This is usually the street number and street."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the address. This might be the floor or room number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense:
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""
    
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The driver's license's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the driver's license."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state that issued the provided driver's license."""  
    
class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther:
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The two-character ISO 3166-1 code representing the country that issued the document."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of the document submitted."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the document."""  
    expiration_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The document's expiration date in YYYY-MM-DD format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport:
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The country that issued the passport."""  
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The passport's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the passport."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification:
    r"""A means of verifying the person's identity."""
    
    method: CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""An identification number that can be used to verify the individual's identity, such as a social security number."""  
    drivers_license: Optional[CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationDriversLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivers_license'), 'exclude': lambda f: f is None }})
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""  
    other: Optional[CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationOther] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other'), 'exclude': lambda f: f is None }})
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""  
    passport: Optional[CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentificationPassport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passport'), 'exclude': lambda f: f is None }})
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationBeneficialOwnersIndividual:
    r"""Personal details for the beneficial owner."""
    
    address: CreateAnEntityParametersCorporationBeneficialOwnersIndividualAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The individual's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: CreateAnEntityParametersCorporationBeneficialOwnersIndividualIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    confirmed_no_us_tax_id: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed_no_us_tax_id'), 'exclude': lambda f: f is None }})
    r"""The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number)."""  
    
class CreateAnEntityParametersCorporationBeneficialOwnersProngEnum(str, Enum):
    r"""Why this person is considered a beneficial owner of the entity."""
    OWNERSHIP = 'ownership'
    CONTROL = 'control'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporationBeneficialOwners:
    
    individual: CreateAnEntityParametersCorporationBeneficialOwnersIndividual = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual') }})
    r"""Personal details for the beneficial owner."""  
    prong: CreateAnEntityParametersCorporationBeneficialOwnersProngEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prong') }})
    r"""Why this person is considered a beneficial owner of the entity."""  
    company_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_title'), 'exclude': lambda f: f is None }})
    r"""This person's role or title within the entity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersCorporation:
    r"""Details of the corporation entity to create. Required if `structure` is equal to `corporation`."""
    
    address: CreateAnEntityParametersCorporationAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The corporation's address."""  
    beneficial_owners: list[CreateAnEntityParametersCorporationBeneficialOwners] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beneficial_owners') }})
    r"""The identifying details of anyone controlling or owning 25% or more of the corporation."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The legal name of the corporation."""  
    tax_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_identifier') }})
    r"""The Employer Identification Number (EIN) for the corporation."""  
    incorporation_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incorporation_state'), 'exclude': lambda f: f is None }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation."""  
    website: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website'), 'exclude': lambda f: f is None }})
    r"""The website of the corporation."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersJointIndividualsAddress:
    r"""The individual's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address. This is usually the street number and street."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the address. This might be the floor or room number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersJointIndividualsIdentificationDriversLicense:
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""
    
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The driver's license's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the driver's license."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state that issued the provided driver's license."""  
    
class CreateAnEntityParametersJointIndividualsIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersJointIndividualsIdentificationOther:
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The two-character ISO 3166-1 code representing the country that issued the document."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of the document submitted."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the document."""  
    expiration_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The document's expiration date in YYYY-MM-DD format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersJointIndividualsIdentificationPassport:
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The country that issued the passport."""  
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The passport's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the passport."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersJointIndividualsIdentification:
    r"""A means of verifying the person's identity."""
    
    method: CreateAnEntityParametersJointIndividualsIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""An identification number that can be used to verify the individual's identity, such as a social security number."""  
    drivers_license: Optional[CreateAnEntityParametersJointIndividualsIdentificationDriversLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivers_license'), 'exclude': lambda f: f is None }})
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""  
    other: Optional[CreateAnEntityParametersJointIndividualsIdentificationOther] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other'), 'exclude': lambda f: f is None }})
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""  
    passport: Optional[CreateAnEntityParametersJointIndividualsIdentificationPassport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passport'), 'exclude': lambda f: f is None }})
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersJointIndividuals:
    
    address: CreateAnEntityParametersJointIndividualsAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The individual's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: CreateAnEntityParametersJointIndividualsIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    confirmed_no_us_tax_id: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed_no_us_tax_id'), 'exclude': lambda f: f is None }})
    r"""The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersJoint:
    r"""Details of the joint entity to create. Required if `structure` is equal to `joint`."""
    
    individuals: list[CreateAnEntityParametersJointIndividuals] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individuals') }})
    r"""The two individuals that share control of the entity."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the joint entity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersNaturalPersonAddress:
    r"""The individual's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address. This is usually the street number and street."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the address. This might be the floor or room number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersNaturalPersonIdentificationDriversLicense:
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""
    
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The driver's license's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the driver's license."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state that issued the provided driver's license."""  
    
class CreateAnEntityParametersNaturalPersonIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersNaturalPersonIdentificationOther:
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The two-character ISO 3166-1 code representing the country that issued the document."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of the document submitted."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the document."""  
    expiration_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The document's expiration date in YYYY-MM-DD format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersNaturalPersonIdentificationPassport:
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The country that issued the passport."""  
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The passport's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the passport."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersNaturalPersonIdentification:
    r"""A means of verifying the person's identity."""
    
    method: CreateAnEntityParametersNaturalPersonIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""An identification number that can be used to verify the individual's identity, such as a social security number."""  
    drivers_license: Optional[CreateAnEntityParametersNaturalPersonIdentificationDriversLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivers_license'), 'exclude': lambda f: f is None }})
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""  
    other: Optional[CreateAnEntityParametersNaturalPersonIdentificationOther] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other'), 'exclude': lambda f: f is None }})
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""  
    passport: Optional[CreateAnEntityParametersNaturalPersonIdentificationPassport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passport'), 'exclude': lambda f: f is None }})
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersNaturalPerson:
    r"""Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods."""
    
    address: CreateAnEntityParametersNaturalPersonAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The individual's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: CreateAnEntityParametersNaturalPersonIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    confirmed_no_us_tax_id: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed_no_us_tax_id'), 'exclude': lambda f: f is None }})
    r"""The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number)."""  
    
class CreateAnEntityParametersRelationshipEnum(str, Enum):
    r"""The relationship between your group and the entity."""
    AFFILIATED = 'affiliated'
    INFORMATIONAL = 'informational'
    UNAFFILIATED = 'unaffiliated'

class CreateAnEntityParametersStructureEnum(str, Enum):
    r"""The type of Entity to create."""
    CORPORATION = 'corporation'
    NATURAL_PERSON = 'natural_person'
    JOINT = 'joint'
    TRUST = 'trust'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersSupplementalDocuments:
    
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the document."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustAddress:
    r"""The trust's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address. This is usually the street number and street."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the address. This might be the floor or room number."""  
    
class CreateAnEntityParametersTrustCategoryEnum(str, Enum):
    r"""Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust."""
    REVOCABLE = 'revocable'
    IRREVOCABLE = 'irrevocable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustGrantorAddress:
    r"""The individual's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address. This is usually the street number and street."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the address. This might be the floor or room number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustGrantorIdentificationDriversLicense:
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""
    
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The driver's license's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the driver's license."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state that issued the provided driver's license."""  
    
class CreateAnEntityParametersTrustGrantorIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustGrantorIdentificationOther:
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The two-character ISO 3166-1 code representing the country that issued the document."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of the document submitted."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the document."""  
    expiration_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The document's expiration date in YYYY-MM-DD format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustGrantorIdentificationPassport:
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The country that issued the passport."""  
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The passport's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the passport."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustGrantorIdentification:
    r"""A means of verifying the person's identity."""
    
    method: CreateAnEntityParametersTrustGrantorIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""An identification number that can be used to verify the individual's identity, such as a social security number."""  
    drivers_license: Optional[CreateAnEntityParametersTrustGrantorIdentificationDriversLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivers_license'), 'exclude': lambda f: f is None }})
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""  
    other: Optional[CreateAnEntityParametersTrustGrantorIdentificationOther] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other'), 'exclude': lambda f: f is None }})
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""  
    passport: Optional[CreateAnEntityParametersTrustGrantorIdentificationPassport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passport'), 'exclude': lambda f: f is None }})
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustGrantor:
    r"""The grantor of the trust. Required if `category` is equal to `revocable`."""
    
    address: CreateAnEntityParametersTrustGrantorAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The individual's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: CreateAnEntityParametersTrustGrantorIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    confirmed_no_us_tax_id: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed_no_us_tax_id'), 'exclude': lambda f: f is None }})
    r"""The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustTrusteesIndividualAddress:
    r"""The individual's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address. This is usually the street number and street."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the address. This might be the floor or room number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense:
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""
    
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The driver's license's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the driver's license."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state that issued the provided driver's license."""  
    
class CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther:
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The two-character ISO 3166-1 code representing the country that issued the document."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of the document submitted."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the document."""  
    expiration_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The document's expiration date in YYYY-MM-DD format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport:
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The country that issued the passport."""  
    expiration_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The passport's expiration date in YYYY-MM-DD format."""  
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The identifier of the File containing the passport."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustTrusteesIndividualIdentification:
    r"""A means of verifying the person's identity."""
    
    method: CreateAnEntityParametersTrustTrusteesIndividualIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""An identification number that can be used to verify the individual's identity, such as a social security number."""  
    drivers_license: Optional[CreateAnEntityParametersTrustTrusteesIndividualIdentificationDriversLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivers_license'), 'exclude': lambda f: f is None }})
    r"""Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`."""  
    other: Optional[CreateAnEntityParametersTrustTrusteesIndividualIdentificationOther] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other'), 'exclude': lambda f: f is None }})
    r"""Information about the identification document provided. Required if `method` is equal to `other`."""  
    passport: Optional[CreateAnEntityParametersTrustTrusteesIndividualIdentificationPassport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passport'), 'exclude': lambda f: f is None }})
    r"""Information about the passport used for identification. Required if `method` is equal to `passport`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustTrusteesIndividual:
    r"""Details of the individual trustee. Required when the trustee `structure` is equal to `individual`."""
    
    address: CreateAnEntityParametersTrustTrusteesIndividualAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The individual's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: CreateAnEntityParametersTrustTrusteesIndividualIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    confirmed_no_us_tax_id: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed_no_us_tax_id'), 'exclude': lambda f: f is None }})
    r"""The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number)."""  
    
class CreateAnEntityParametersTrustTrusteesStructureEnum(str, Enum):
    r"""The structure of the trustee."""
    INDIVIDUAL = 'individual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrustTrustees:
    
    structure: CreateAnEntityParametersTrustTrusteesStructureEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structure') }})
    r"""The structure of the trustee."""  
    individual: Optional[CreateAnEntityParametersTrustTrusteesIndividual] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual'), 'exclude': lambda f: f is None }})
    r"""Details of the individual trustee. Required when the trustee `structure` is equal to `individual`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParametersTrust:
    r"""Details of the trust entity to create. Required if `structure` is equal to `trust`."""
    
    address: CreateAnEntityParametersTrustAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The trust's address."""  
    category: CreateAnEntityParametersTrustCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The legal name of the trust."""  
    trustees: list[CreateAnEntityParametersTrustTrustees] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustees') }})
    r"""The trustees of the trust."""  
    formation_document_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formation_document_file_id'), 'exclude': lambda f: f is None }})
    r"""The identifier of the File containing the formation document of the trust."""  
    formation_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formation_state'), 'exclude': lambda f: f is None }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed."""  
    grantor: Optional[CreateAnEntityParametersTrustGrantor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grantor'), 'exclude': lambda f: f is None }})
    r"""The grantor of the trust. Required if `category` is equal to `revocable`."""  
    tax_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_identifier'), 'exclude': lambda f: f is None }})
    r"""The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnEntityParameters:
    
    relationship: CreateAnEntityParametersRelationshipEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship') }})
    r"""The relationship between your group and the entity."""  
    structure: CreateAnEntityParametersStructureEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structure') }})
    r"""The type of Entity to create."""  
    corporation: Optional[CreateAnEntityParametersCorporation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporation'), 'exclude': lambda f: f is None }})
    r"""Details of the corporation entity to create. Required if `structure` is equal to `corporation`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description you choose to give the entity."""  
    joint: Optional[CreateAnEntityParametersJoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joint'), 'exclude': lambda f: f is None }})
    r"""Details of the joint entity to create. Required if `structure` is equal to `joint`."""  
    natural_person: Optional[CreateAnEntityParametersNaturalPerson] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('natural_person'), 'exclude': lambda f: f is None }})
    r"""Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods."""  
    supplemental_documents: Optional[list[CreateAnEntityParametersSupplementalDocuments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supplemental_documents'), 'exclude': lambda f: f is None }})
    r"""Additional documentation associated with the entity."""  
    trust: Optional[CreateAnEntityParametersTrust] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust'), 'exclude': lambda f: f is None }})
    r"""Details of the trust entity to create. Required if `structure` is equal to `trust`."""  
    