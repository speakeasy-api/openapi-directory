// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutCertificatesIDUpdateCertificateRequest struct {
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// New Certificate name
	Name *string `json:"name,omitempty"`
}

type PutCertificatesIDRequest struct {
	RequestBody *PutCertificatesIDUpdateCertificateRequest `request:"mediaType=application/json"`
	// ID of the resource
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PutCertificatesIDCertificateResponseCertificateStatusError - If issuance or renewal reports `failed`, this property contains information about what happened
type PutCertificatesIDCertificateResponseCertificateStatusError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum - Status of the issuance process of the Certificate
type PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum string

const (
	PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnumPending   PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum = "pending"
	PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnumCompleted PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum = "completed"
	PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnumFailed    PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum = "failed"
)

func (e PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum) ToPointer() *PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum {
	return &e
}

func (e *PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum: %v", v)
	}
}

// PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum - Status of the renewal process of the Certificate.
type PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum string

const (
	PutCertificatesIDCertificateResponseCertificateStatusRenewalEnumScheduled   PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "scheduled"
	PutCertificatesIDCertificateResponseCertificateStatusRenewalEnumPending     PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "pending"
	PutCertificatesIDCertificateResponseCertificateStatusRenewalEnumFailed      PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "failed"
	PutCertificatesIDCertificateResponseCertificateStatusRenewalEnumUnavailable PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "unavailable"
)

func (e PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum) ToPointer() *PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum {
	return &e
}

func (e *PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduled":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		fallthrough
	case "unavailable":
		*e = PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum: %v", v)
	}
}

// PutCertificatesIDCertificateResponseCertificateStatus - Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
type PutCertificatesIDCertificateResponseCertificateStatus struct {
	// If issuance or renewal reports `failed`, this property contains information about what happened
	Error *PutCertificatesIDCertificateResponseCertificateStatusError `json:"error,omitempty"`
	// Status of the issuance process of the Certificate
	Issuance *PutCertificatesIDCertificateResponseCertificateStatusIssuanceEnum `json:"issuance,omitempty"`
	// Status of the renewal process of the Certificate.
	Renewal *PutCertificatesIDCertificateResponseCertificateStatusRenewalEnum `json:"renewal,omitempty"`
}

// PutCertificatesIDCertificateResponseCertificateTypeEnum - Type of the Certificate
type PutCertificatesIDCertificateResponseCertificateTypeEnum string

const (
	PutCertificatesIDCertificateResponseCertificateTypeEnumUploaded PutCertificatesIDCertificateResponseCertificateTypeEnum = "uploaded"
	PutCertificatesIDCertificateResponseCertificateTypeEnumManaged  PutCertificatesIDCertificateResponseCertificateTypeEnum = "managed"
)

func (e PutCertificatesIDCertificateResponseCertificateTypeEnum) ToPointer() *PutCertificatesIDCertificateResponseCertificateTypeEnum {
	return &e
}

func (e *PutCertificatesIDCertificateResponseCertificateTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "uploaded":
		fallthrough
	case "managed":
		*e = PutCertificatesIDCertificateResponseCertificateTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutCertificatesIDCertificateResponseCertificateTypeEnum: %v", v)
	}
}

type PutCertificatesIDCertificateResponseCertificateUsedBy struct {
	// ID of resource referenced
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

type PutCertificatesIDCertificateResponseCertificate struct {
	// Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
	Certificate string `json:"certificate"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Domains and subdomains covered by the Certificate
	DomainNames []string `json:"domain_names"`
	// SHA256 fingerprint of the Certificate
	Fingerprint string `json:"fingerprint"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Point in time when the Certificate stops being valid (in ISO-8601 format)
	NotValidAfter string `json:"not_valid_after"`
	// Point in time when the Certificate becomes valid (in ISO-8601 format)
	NotValidBefore string `json:"not_valid_before"`
	// Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
	Status *PutCertificatesIDCertificateResponseCertificateStatus `json:"status,omitempty"`
	// Type of the Certificate
	Type *PutCertificatesIDCertificateResponseCertificateTypeEnum `json:"type,omitempty"`
	// Resources currently using the Certificate
	UsedBy []PutCertificatesIDCertificateResponseCertificateUsedBy `json:"used_by"`
}

// PutCertificatesIDCertificateResponse - The `certificate` key contains the Certificate that was just updated
type PutCertificatesIDCertificateResponse struct {
	Certificate PutCertificatesIDCertificateResponseCertificate `json:"certificate"`
}

type PutCertificatesIDResponse struct {
	// The `certificate` key contains the Certificate that was just updated
	CertificateResponse *PutCertificatesIDCertificateResponse
	ContentType         string
	StatusCode          int
	RawResponse         *http.Response
}
