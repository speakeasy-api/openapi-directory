// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// QuoteV1BindStatusEnum - Describes whether bind is supported for the quote. Policies can only be created from quotes with bind_status of "ready".
type QuoteV1BindStatusEnum string

const (
	QuoteV1BindStatusEnumReady       QuoteV1BindStatusEnum = "ready"
	QuoteV1BindStatusEnumUnavailable QuoteV1BindStatusEnum = "unavailable"
	QuoteV1BindStatusEnumRequested   QuoteV1BindStatusEnum = "requested"
)

func (e *QuoteV1BindStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ready":
		fallthrough
	case "unavailable":
		fallthrough
	case "requested":
		*e = QuoteV1BindStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for QuoteV1BindStatusEnum: %s", s)
	}
}

// QuoteV1StatusEnum - Indicates the status of a quote. See [full list of quote statuses](https://www.heraldapi.com/docs/quotes) for more detail.
type QuoteV1StatusEnum string

const (
	QuoteV1StatusEnumPending      QuoteV1StatusEnum = "pending"
	QuoteV1StatusEnumReferral     QuoteV1StatusEnum = "referral"
	QuoteV1StatusEnumReferred     QuoteV1StatusEnum = "referred"
	QuoteV1StatusEnumDeclined     QuoteV1StatusEnum = "declined"
	QuoteV1StatusEnumActive       QuoteV1StatusEnum = "active"
	QuoteV1StatusEnumExpired      QuoteV1StatusEnum = "expired"
	QuoteV1StatusEnumUnresponsive QuoteV1StatusEnum = "unresponsive"
)

func (e *QuoteV1StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "referral":
		fallthrough
	case "referred":
		fallthrough
	case "declined":
		fallthrough
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "unresponsive":
		*e = QuoteV1StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for QuoteV1StatusEnum: %s", s)
	}
}

// QuoteV1 - A quote declares an institution's willingness to sell an insurance policy to a customer. Active quotes contain details about a policy the customer can purchase and related prices.
//
// Read more about [quotes](https://www.heraldapi.com/docs/quotes).
type QuoteV1 struct {
	// Describes whether bind is supported for the quote. Policies can only be created from quotes with bind_status of "ready".
	BindStatus     QuoteV1BindStatusEnum  `json:"bind_status"`
	CoverageValues []CoverageValueWriteV1 `json:"coverage_values,omitempty"`
	// An array of relevant files, which can be retrieved using [`/files/{file_id}/get_temporary_link`](../reference/HeraldAPI.v1.yaml/paths/~1files~1{file_id}~1get_temporary_link/post). This array is empty if there are no relevant files.
	Files []FileMiniV1 `json:"files,omitempty"`
	// id for a specific quote.
	ID string `json:"id"`
	// Identifies the National Association of Insurance Commissioners (NAIC) code associated with the quoted policy. The field is NULL if this information is not available.
	NaicCode *string `json:"naic_code,omitempty"`
	// A hyperlink to a corresponding record in the institutionâ€™s portal. This field is NULL if not available.
	PortalLink *string `json:"portal_link,omitempty"`
	// These prices describe the costs associated with a quote.
	Prices    *QuotePriceV1 `json:"prices,omitempty"`
	ProductID string        `json:"product_id"`
	// Indicates the status of a quote. See [full list of quote statuses](https://www.heraldapi.com/docs/quotes) for more detail.
	Status QuoteV1StatusEnum `json:"status"`
	// This will be returned when the status is declined, referred, or unsupported. When the source is "Carrier" the status reason is from the integrated carrier. When the source is "API", the reason has been cleaned by Herald.
	StatusReasons *StatusReason `json:"status_reasons,omitempty"`
	// id of the submission that created the quote.
	SubmissionID string `json:"submission_id"`
}
