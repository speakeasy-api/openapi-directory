/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Member } from "./member";
import { Expose, Type } from "class-transformer";

export class MemberInvitedEventLinksSelf extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class MemberInvitedEventLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => MemberInvitedEventLinksSelf)
  self?: MemberInvitedEventLinksSelf;
}

/**
 * Member Invited
 */
export class MemberInvitedEvent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => MemberInvitedEventLinks)
  links?: MemberInvitedEventLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  @Type(() => Member)
  body?: Member;

  /**
   * The member ID of the sender
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from?: string;

  /**
   * The ID of the event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The time that the event happened
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: string;

  /**
   * The event type (`member:invited`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
