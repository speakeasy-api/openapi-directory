/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Money } from "./money";
import { Expose, Type } from "class-transformer";

/**
 * Price change mode specifies how the subscription item price is changing.
 */
export enum SubscriptionItemPriceChangeDetailsPriceChangeModeEnum {
  PriceChangeModeUnspecified = "PRICE_CHANGE_MODE_UNSPECIFIED",
  PriceDecrease = "PRICE_DECREASE",
  PriceIncrease = "PRICE_INCREASE",
}

/**
 * State the price change is currently in.
 */
export enum SubscriptionItemPriceChangeDetailsPriceChangeStateEnum {
  PriceChangeStateUnspecified = "PRICE_CHANGE_STATE_UNSPECIFIED",
  Outstanding = "OUTSTANDING",
  Confirmed = "CONFIRMED",
  Applied = "APPLIED",
}

/**
 * Price change related information of a subscription item.
 */
export class SubscriptionItemPriceChangeDetails extends SpeakeasyBase {
  /**
   * The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expectedNewPriceChargeTime" })
  expectedNewPriceChargeTime?: string;

  /**
   * Represents an amount of money with its currency type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newPrice" })
  @Type(() => Money)
  newPrice?: Money;

  /**
   * Price change mode specifies how the subscription item price is changing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceChangeMode" })
  priceChangeMode?: SubscriptionItemPriceChangeDetailsPriceChangeModeEnum;

  /**
   * State the price change is currently in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceChangeState" })
  priceChangeState?: SubscriptionItemPriceChangeDetailsPriceChangeStateEnum;
}
