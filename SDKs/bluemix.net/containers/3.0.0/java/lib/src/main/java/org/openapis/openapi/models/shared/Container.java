/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Container {
    /**
     * The command and arguments that were passed to the container during container creation. This command is executed when the container is started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Command")
    public String command;
    public Container withCommand(String command) {
        this.command = command;
        return this;
    }
    
    /**
     * The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContainerState")
    public String containerState;
    public Container withContainerState(String containerState) {
        this.containerState = containerState;
        return this;
    }
    
    /**
     * The time when the container was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Created")
    public Float created;
    public Container withCreated(Float created) {
        this.created = created;
        return this;
    }
    
    /**
     * A list of all the environment variables of the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Env")
    public String[] env;
    public Container withEnv(String[] env) {
        this.env = env;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Group")
    public Group group;
    public Container withGroup(Group group) {
        this.group = group;
        return this;
    }
    
    /**
     * Unique identifier representing a container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public Container withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Full path to the container image in your private Bluemix registry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    public String image;
    public Container withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * Unique identifier representing a container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ImageId")
    public String imageId;
    public Container withImageId(String imageId) {
        this.imageId = imageId;
        return this;
    }
    
    /**
     * List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Labels")
    public java.util.Map<String, Object> labels;
    public Container withLabels(java.util.Map<String, Object> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The amount of container memory in Megabyte that was assigned to your container. The memory is counted towards the quota that is allocated for the space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Memory")
    public Integer memory;
    public Container withMemory(Integer memory) {
        this.memory = memory;
        return this;
    }
    
    /**
     * The name of the container. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public Container withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The name of the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Names")
    public String[] names;
    public Container withNames(String[] names) {
        this.names = names;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NetworkSettings")
    public NetworkSetting networkSettings;
    public Container withNetworkSettings(NetworkSetting networkSettings) {
        this.networkSettings = networkSettings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Ports")
    public Port ports;
    public Container withPorts(Port ports) {
        this.ports = ports;
        return this;
    }
    
    /**
     * Total size of all the files in the container, in bytes. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SizeRootFs")
    public Long sizeRootFs;
    public Container withSizeRootFs(Long sizeRootFs) {
        this.sizeRootFs = sizeRootFs;
        return this;
    }
    
    /**
     * The size of the files which have been created or changed, if you compare the container to its base image. Just after creation, this should be zero. Ass you modify (or create) files, this size will increase.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SizeRw")
    public Long sizeRw;
    public Container withSizeRw(Long sizeRw) {
        this.sizeRw = sizeRw;
        return this;
    }
    
    /**
     * Time when the container was started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Started")
    public Float started;
    public Container withStarted(Float started) {
        this.started = started;
        return this;
    }
    
    /**
     * The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public Container withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Number of virtual CPUs that are assigned to the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VCPU")
    public Long vcpu;
    public Container withVcpu(Long vcpu) {
        this.vcpu = vcpu;
        return this;
    }
    
}
