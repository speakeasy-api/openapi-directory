/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * #### Hourly forecast values for the following flight-impacting weather elements:
 * * Cloud Ceiling (CIG)
 * * Dewpoint Temperature (DEWPT)
 * * Cloud Cover (SKY)
 * * Air Temperature (TEMP)
 * * Visibility (VIS)
 * * Wind Direction (WINDDIR)
 * * Wind Speed (WINDSPEED)
 * * Wind Gust Speed (WINDGUST)
 */
public class Weather {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Weather(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Retrieve forecast values within given distance of location for all requested weather elements and time periods.
     * Retrieve forecast values for selected weather elements and time period. Request body parameters are:
     * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
     * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
     * * distance:  distance in meters (max allowed value is 25000)
     * * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
     * * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
     * 
     * 
     * The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
     * properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
     * * CIG: meters AGL
     * * DEWPT: degrees Celsius
     * * SKY: % cloud cover
     * * TEMP: degrees Celsius
     * * VIS: meters
     * * WINDDIR: degrees true
     * * WINDGUST: meters/sec
     * * WINDSPEED: meters/sec
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WxByDistanceUsV1WxForecastDistanceQueryPostResponse wxByDistanceUsV1WxForecastDistanceQueryPost(org.openapis.openapi.models.operations.WxByDistanceUsV1WxForecastDistanceQueryPostRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us/v1/wx-forecast/distance-query");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "wxByDistance", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WxByDistanceUsV1WxForecastDistanceQueryPostResponse res = new org.openapis.openapi.models.operations.WxByDistanceUsV1WxForecastDistanceQueryPostResponse(contentType, httpRes.statusCode()) {{
            wxDistanceResponse = null;
            httpValidationError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WxDistanceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WxDistanceResponse.class);
                res.wxDistanceResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HTTPValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.HTTPValidationError.class);
                res.httpValidationError = out;
            }
        }

        return res;
    }

    /**
     * Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods.
     * Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are:
     * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
     * * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
     * 
     * 
     * The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
     * properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
     * * CIG: meters AGL
     * * DEWPT: degrees Celsius
     * * SKY: % cloud cover
     * * TEMP: degrees Celsius
     * * VIS: meters
     * * WINDDIR: degrees true
     * * WINDGUST: meters/sec
     * * WINDSPEED: meters/sec
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WxByPolyUsV1WxForecastPolygonQueryPostResponse wxByPolyUsV1WxForecastPolygonQueryPost(org.openapis.openapi.models.operations.WxByPolyUsV1WxForecastPolygonQueryPostRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us/v1/wx-forecast/polygon-query");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "wxByPolygon", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WxByPolyUsV1WxForecastPolygonQueryPostResponse res = new org.openapis.openapi.models.operations.WxByPolyUsV1WxForecastPolygonQueryPostResponse(contentType, httpRes.statusCode()) {{
            wxPolyResponse = null;
            httpValidationError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WxPolyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WxPolyResponse.class);
                res.wxPolyResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HTTPValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.HTTPValidationError.class);
                res.httpValidationError = out;
            }
        }

        return res;
    }

    /**
     * Retrieve forecast values along a route for all requested weather elements and time periods.
     * Retrieve forecast values along route for requested weather elements and time period. Request body parameters are:
     * * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
     * * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
     * 
     * 
     * The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
     * properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
     * * CIG: meters AGL
     * * DEWPT: degrees Celsius
     * * SKY: % cloud cover
     * * TEMP: degrees Celsius
     * * VIS: meters
     * * WINDDIR: degrees true
     * * WINDGUST: meters/sec
     * * WINDSPEED: meters/sec
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WxByRouteUsV1WxForecastRouteQueryPostResponse wxByRouteUsV1WxForecastRouteQueryPost(org.openapis.openapi.models.operations.WxByRouteUsV1WxForecastRouteQueryPostRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us/v1/wx-forecast/route-query");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "wxByRoute", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WxByRouteUsV1WxForecastRouteQueryPostResponse res = new org.openapis.openapi.models.operations.WxByRouteUsV1WxForecastRouteQueryPostResponse(contentType, httpRes.statusCode()) {{
            wxRouteResponse = null;
            httpValidationError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WxRouteResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WxRouteResponse.class);
                res.wxRouteResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HTTPValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.HTTPValidationError.class);
                res.httpValidationError = out;
            }
        }

        return res;
    }
}