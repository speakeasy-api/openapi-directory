// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ShareAttributesExpiredEnum - True if the share has expired.
type ShareAttributesExpiredEnum string

const (
	ShareAttributesExpiredEnumTrue  ShareAttributesExpiredEnum = "true"
	ShareAttributesExpiredEnumFalse ShareAttributesExpiredEnum = "false"
)

func (e *ShareAttributesExpiredEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = ShareAttributesExpiredEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesExpiredEnum: %s", s)
	}
}

// ShareAttributesFileDropCreateFoldersEnum - Flag to show if separate folders should be created for each file upload to receive folder.
type ShareAttributesFileDropCreateFoldersEnum string

const (
	ShareAttributesFileDropCreateFoldersEnumTrue  ShareAttributesFileDropCreateFoldersEnum = "true"
	ShareAttributesFileDropCreateFoldersEnumFalse ShareAttributesFileDropCreateFoldersEnum = "false"
)

func (e *ShareAttributesFileDropCreateFoldersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = ShareAttributesFileDropCreateFoldersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesFileDropCreateFoldersEnum: %s", s)
	}
}

// ShareAttributesHasNotificationEnum - True if share has notification.
type ShareAttributesHasNotificationEnum string

const (
	ShareAttributesHasNotificationEnumTrue  ShareAttributesHasNotificationEnum = "true"
	ShareAttributesHasNotificationEnumFalse ShareAttributesHasNotificationEnum = "false"
)

func (e *ShareAttributesHasNotificationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = ShareAttributesHasNotificationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesHasNotificationEnum: %s", s)
	}
}

// ShareAttributesHasPasswordEnum - True if the share has password.
type ShareAttributesHasPasswordEnum string

const (
	ShareAttributesHasPasswordEnumTrue  ShareAttributesHasPasswordEnum = "true"
	ShareAttributesHasPasswordEnumFalse ShareAttributesHasPasswordEnum = "false"
)

func (e *ShareAttributesHasPasswordEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = ShareAttributesHasPasswordEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesHasPasswordEnum: %s", s)
	}
}

// ShareAttributesInheritedEnum - True if share inherited from parent folder.
type ShareAttributesInheritedEnum string

const (
	ShareAttributesInheritedEnumTrue  ShareAttributesInheritedEnum = "true"
	ShareAttributesInheritedEnumFalse ShareAttributesInheritedEnum = "false"
)

func (e *ShareAttributesInheritedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = ShareAttributesInheritedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesInheritedEnum: %s", s)
	}
}

// ShareAttributesPublicEnum - True if the share has a public url.
type ShareAttributesPublicEnum string

const (
	ShareAttributesPublicEnumTrue  ShareAttributesPublicEnum = "true"
	ShareAttributesPublicEnumFalse ShareAttributesPublicEnum = "false"
)

func (e *ShareAttributesPublicEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = ShareAttributesPublicEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesPublicEnum: %s", s)
	}
}

// ShareAttributesStatusEnum - Share activity status. Can be active (1) or deactivated (0).
type ShareAttributesStatusEnum string

const (
	ShareAttributesStatusEnumZero ShareAttributesStatusEnum = "0"
	ShareAttributesStatusEnumOne  ShareAttributesStatusEnum = "1"
)

func (e *ShareAttributesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = ShareAttributesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesStatusEnum: %s", s)
	}
}

// ShareAttributesTrackingStatusEnum - Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)
type ShareAttributesTrackingStatusEnum string

const (
	ShareAttributesTrackingStatusEnumComplete   ShareAttributesTrackingStatusEnum = "complete"
	ShareAttributesTrackingStatusEnumIncomplete ShareAttributesTrackingStatusEnum = "incomplete"
	ShareAttributesTrackingStatusEnumPending    ShareAttributesTrackingStatusEnum = "pending"
)

func (e *ShareAttributesTrackingStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "complete":
		fallthrough
	case "incomplete":
		fallthrough
	case "pending":
		*e = ShareAttributesTrackingStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesTrackingStatusEnum: %s", s)
	}
}

// ShareAttributesTypeEnum - Type of share.
type ShareAttributesTypeEnum string

const (
	ShareAttributesTypeEnumSharedFolder ShareAttributesTypeEnum = "shared_folder"
	ShareAttributesTypeEnumSend         ShareAttributesTypeEnum = "send"
	ShareAttributesTypeEnumReceive      ShareAttributesTypeEnum = "receive"
)

func (e *ShareAttributesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shared_folder":
		fallthrough
	case "send":
		fallthrough
	case "receive":
		*e = ShareAttributesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesTypeEnum: %s", s)
	}
}

// ShareAttributes - Attributes of the share including the name, path and share recipients.
type ShareAttributes struct {
	// Description of the share access rights.
	AccessDescription *string `json:"accessDescription,omitempty"`
	// An object defining what a not-logged-in visitor can do with the share contents
	AccessMode *AccessMode `json:"accessMode,omitempty"`
	// Timestamp of share creation.
	Created *time.Time `json:"created,omitempty"`
	// True if share can be embedded.
	Embed *bool `json:"embed,omitempty"`
	// Expiration date of the share.
	Expiration *string `json:"expiration,omitempty"`
	// True if the share has expired.
	Expired *ShareAttributesExpiredEnum `json:"expired,omitempty"`
	// Flag to show if separate folders should be created for each file upload to receive folder.
	FileDropCreateFolders *ShareAttributesFileDropCreateFoldersEnum `json:"fileDropCreateFolders,omitempty"`
	// ID of the form.
	FormID *int64 `json:"formId,omitempty"`
	// True if share has notification.
	HasNotification *ShareAttributesHasNotificationEnum `json:"hasNotification,omitempty"`
	// True if the share has password.
	HasPassword *ShareAttributesHasPasswordEnum `json:"hasPassword,omitempty"`
	// Share hash.
	Hash *string `json:"hash,omitempty"`
	// True if share inherited from parent folder.
	Inherited *ShareAttributesInheritedEnum `json:"inherited,omitempty"`
	// Array of invitation messages.
	Messages []ShareMessage `json:"messages,omitempty"`
	// Timestamp of share modification. Can be `null` if it wasn't modified.
	Modified *time.Time `json:"modified,omitempty"`
	// Share name.
	Name *string `json:"name,omitempty"`
	// Share owner's hash.
	OwnerHash *string `json:"ownerHash,omitempty"`
	// Path to the shared resource in your account.
	Paths []string `json:"paths,omitempty"`
	// True if the share has a public url.
	Public *ShareAttributesPublicEnum `json:"public,omitempty"`
	// Array of recipients.
	Recipients []ShareRecipient `json:"recipients,omitempty"`
	// True if share requires email to access.
	RequireEmail *bool `json:"requireEmail,omitempty"`
	// Invitations resent date. Can be `null` if resent never happened.
	Resent *time.Time `json:"resent,omitempty"`
	// Share activity status. Can be active (1) or deactivated (0).
	Status *ShareAttributesStatusEnum `json:"status,omitempty"`
	// Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)
	TrackingStatus *ShareAttributesTrackingStatusEnum `json:"trackingStatus,omitempty"`
	// Type of share.
	Type *ShareAttributesTypeEnum `json:"type,omitempty"`
}
