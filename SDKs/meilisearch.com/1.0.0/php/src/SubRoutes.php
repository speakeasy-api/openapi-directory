<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SubRoutes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get displayed attributes
     * 
     * Get displayed attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDisplayedAttributesResponse
     */
	public function getDisplayedAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\GetDisplayedAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/displayed-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDisplayedAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distinct attribute
     * 
     * Get distinct attribute
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistinctAttributeResponse
     */
	public function getDistinctAttribute(
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistinctAttributeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/distinct-attribute');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistinctAttributeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get faceting
     * 
     * Get faceting
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFacetingResponse
     */
	public function getFaceting(
    ): \OpenAPI\OpenAPI\Models\Operations\GetFacetingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/faceting');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFacetingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get filterable attributes
     * 
     * Get filterable attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFilterableAttributesResponse
     */
	public function getFilterableAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\GetFilterableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/filterable-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFilterableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get pagination
     * 
     * Get pagination
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaginationResponse
     */
	public function getPagination(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaginationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/pagination');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaginationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get ranking rules
     * 
     * Get ranking rules
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRankingRulesResponse
     */
	public function getRankingRules(
    ): \OpenAPI\OpenAPI\Models\Operations\GetRankingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/ranking-rules');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRankingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get searchable attributes
     * 
     * Get searchable attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchableAttributesResponse
     */
	public function getSearchableAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/searchable-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get sortable attributes
     * 
     * Get sortable attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSortableAttributesResponse
     */
	public function getSortableAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSortableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/sortable-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSortableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get stop-words
     * 
     * Get stop-words
     * 
     * @param array<string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStopWordsResponse
     */
	public function getStopWords(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStopWordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/stop-words');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStopWordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get synonyms
     * 
     * Get synonyms
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSynonymsResponse
     */
	public function getSynonyms(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSynonymsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/synonyms');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSynonymsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get typo-tolerance
     * 
     * Get typo-tolerance
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTypoToleranceResponse
     */
	public function getTypoTolerance(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTypoToleranceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/typo-tolerance');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTypoToleranceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset displayed attributes
     * 
     * Reset displayed attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetDisplayedAttributesResponse
     */
	public function resetDisplayedAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetDisplayedAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/displayed-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetDisplayedAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset distinct attribute
     * 
     * Reset distinct attribute
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetDistinctAttributeResponse
     */
	public function resetDistinctAttribute(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetDistinctAttributeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/distinct-attribute');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetDistinctAttributeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset faceting
     * 
     * Reset faceting
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetFacetingResponse
     */
	public function resetFaceting(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetFacetingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/faceting');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetFacetingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset filterable attributes
     * 
     * Reset filterable attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetFilterableAttributesResponse
     */
	public function resetFilterableAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetFilterableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/filterable-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetFilterableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset pagination
     * 
     * Reset pagination
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetPaginationResponse
     */
	public function resetPagination(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetPaginationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/pagination');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetPaginationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset ranking rules
     * 
     * Reset ranking rules
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetRankingRulesResponse
     */
	public function resetRankingRules(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetRankingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/ranking-rules');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetRankingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset searchable attributes
     * 
     * Reset searchable attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetSearchableAttributesResponse
     */
	public function resetSearchableAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetSearchableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/searchable-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetSearchableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset sortable attributes
     * 
     * Reset sortable attributes
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetSortableAttributesResponse
     */
	public function resetSortableAttributes(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetSortableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/sortable-attributes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetSortableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset stop-words
     * 
     * Reset stop-words
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetStopWordsResponse
     */
	public function resetStopWords(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetStopWordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/stop-words');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetStopWordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset synonyms
     * 
     * Reset synonyms
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetSynonymsResponse
     */
	public function resetSynonyms(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetSynonymsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/synonyms');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetSynonymsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset typo-tolerance
     * 
     * Reset typo-tolerance
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetTypoToleranceResponse
     */
	public function resetTypoTolerance(
    ): \OpenAPI\OpenAPI\Models\Operations\ResetTypoToleranceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/typo-tolerance');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetTypoToleranceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update displayed attributes
     * 
     * Update displayed attributes
     * 
     * @param array<string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDisplayedAttributesResponse
     */
	public function updateDisplayedAttributes(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDisplayedAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/displayed-attributes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDisplayedAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update distinct attribute
     * 
     * Update distinct attribute
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDistinctAttributeResponse
     */
	public function updateDistinctAttribute(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDistinctAttributeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/distinct-attribute');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDistinctAttributeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update faceting
     * 
     * Update faceting
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFacetingRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFacetingResponse
     */
	public function updateFaceting(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFacetingRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFacetingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/faceting');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFacetingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update filterable attributes
     * 
     * Update filterable attributes
     * 
     * @param array<string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFilterableAttributesResponse
     */
	public function updateFilterableAttributes(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFilterableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/filterable-attributes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFilterableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update pagination
     * 
     * Update pagination
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaginationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePaginationResponse
     */
	public function updatePagination(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaginationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePaginationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/pagination');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePaginationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update ranking rules
     * 
     * Update ranking rules
     * 
     * @param array<string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRankingRulesResponse
     */
	public function updateRankingRules(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRankingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/ranking-rules');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRankingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update searchable attributes
     * 
     * Update searchable attributes
     * 
     * @param array<string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSearchableAttributesResponse
     */
	public function updateSearchableAttributes(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSearchableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/searchable-attributes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSearchableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update sortable attributes
     * 
     * Update sortable attributes
     * 
     * @param array<string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSortableAttributesResponse
     */
	public function updateSortableAttributes(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSortableAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/sortable-attributes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSortableAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update stop-words
     * 
     * Update stop-words
     * 
     * @param array<string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateStopWordsResponse
     */
	public function updateStopWords(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateStopWordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/stop-words');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateStopWordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update synonyms
     * 
     * Update synonyms
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSynonymsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSynonymsResponse
     */
	public function updateSynonyms(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSynonymsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSynonymsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/synonyms');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSynonymsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update typo-tolerance
     * 
     * Update typo-tolerance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTypoToleranceRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTypoToleranceResponse
     */
	public function updateTypoTolerance(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTypoToleranceRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTypoToleranceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/indexes/books/settings/typo-tolerance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTypoToleranceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}