/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Optional details to be included in the response
 */
export enum ListIncludesEnum {
  Addons = "addons",
  Relations = "relations",
}

/**
 * Property name that will be used to sort results. "-" indicates descending
 */
export enum ListSortEnum {
  ExpiresAt = "expiresAt",
  MinusExpiresAt = "-expiresAt",
}

export class ListRequest extends SpeakeasyBase {
  /**
   * The market that the response should be formatted for
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Market-Id",
  })
  xMarketId?: string;

  /**
   * Shopper ID to return subscriptions for when not using JWT
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Shopper-Id",
  })
  xShopperId?: string;

  /**
   * Optional details to be included in the response
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=includes",
  })
  includes?: ListIncludesEnum;

  /**
   * Number of Subscriptions to retrieve in this page, starting after offset
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Only return Subscriptions with the specified product groups
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=productGroupKeys",
  })
  productGroupKeys?: string[];

  /**
   * Property name that will be used to sort results. "-" indicates descending
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: ListSortEnum;
}

export class ListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Request was malformed
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Too many requests received within interval
   */
  @SpeakeasyMetadata()
  errorLimit?: shared.ErrorLimit;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Request was successful
   */
  @SpeakeasyMetadata()
  subscriptionList?: shared.SubscriptionList;
}
