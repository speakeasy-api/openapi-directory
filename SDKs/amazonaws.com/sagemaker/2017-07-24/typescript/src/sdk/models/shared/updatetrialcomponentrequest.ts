/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { TrialComponentArtifact } from "./trialcomponentartifact";
import { TrialComponentParameterValue } from "./trialcomponentparametervalue";
import { TrialComponentStatus } from "./trialcomponentstatus";
import { Expose, Transform, Type } from "class-transformer";

export class UpdateTrialComponentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DisplayName" })
  displayName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata({ elemType: TrialComponentArtifact })
  @Expose({ name: "InputArtifacts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TrialComponentArtifact> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TrialComponentArtifact);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  inputArtifacts?: Record<string, TrialComponentArtifact>;

  @SpeakeasyMetadata()
  @Expose({ name: "InputArtifactsToRemove" })
  inputArtifactsToRemove?: string[];

  @SpeakeasyMetadata({ elemType: TrialComponentArtifact })
  @Expose({ name: "OutputArtifacts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TrialComponentArtifact> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TrialComponentArtifact);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  outputArtifacts?: Record<string, TrialComponentArtifact>;

  @SpeakeasyMetadata()
  @Expose({ name: "OutputArtifactsToRemove" })
  outputArtifactsToRemove?: string[];

  @SpeakeasyMetadata({ elemType: TrialComponentParameterValue })
  @Expose({ name: "Parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TrialComponentParameterValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TrialComponentParameterValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, TrialComponentParameterValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "ParametersToRemove" })
  parametersToRemove?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  @Type(() => TrialComponentStatus)
  status?: TrialComponentStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "TrialComponentName" })
  trialComponentName: string;
}
