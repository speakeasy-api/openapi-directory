/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * UsageSnapshotEntity - List Usage Snapshots
 */
public class UsageSnapshotEntity {
    /**
     * Transfer Usage for period - Outbound GB from Files Native Storage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bytes_sent")
    public Double bytesSent;
    public UsageSnapshotEntity withBytesSent(Double bytesSent) {
        this.bytesSent = bytesSent;
        return this;
    }
    
    /**
     * Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_storage")
    public Double currentStorage;
    public UsageSnapshotEntity withCurrentStorage(Double currentStorage) {
        this.currentStorage = currentStorage;
        return this;
    }
    
    /**
     * Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_files_counted_in_minimum")
    public Double deletedFilesCountedInMinimum;
    public UsageSnapshotEntity withDeletedFilesCountedInMinimum(Double deletedFilesCountedInMinimum) {
        this.deletedFilesCountedInMinimum = deletedFilesCountedInMinimum;
        return this;
    }
    
    /**
     * Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_files_storage")
    public Double deletedFilesStorage;
    public UsageSnapshotEntity withDeletedFilesStorage(Double deletedFilesStorage) {
        this.deletedFilesStorage = deletedFilesStorage;
        return this;
    }
    
    /**
     * Usage snapshot end date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_at")
    public OffsetDateTime endAt;
    public UsageSnapshotEntity withEndAt(OffsetDateTime endAt) {
        this.endAt = endAt;
        return this;
    }
    
    /**
     * Highest Storage Usage GB recorded in time period (used for billing)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("high_water_storage")
    public Double highWaterStorage;
    public UsageSnapshotEntity withHighWaterStorage(Double highWaterStorage) {
        this.highWaterStorage = highWaterStorage;
        return this;
    }
    
    /**
     * Highest user count number in time period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("high_water_user_count")
    public Double highWaterUserCount;
    public UsageSnapshotEntity withHighWaterUserCount(Double highWaterUserCount) {
        this.highWaterUserCount = highWaterUserCount;
        return this;
    }
    
    /**
     * Usage snapshot ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public UsageSnapshotEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("root_storage")
    public Double rootStorage;
    public UsageSnapshotEntity withRootStorage(Double rootStorage) {
        this.rootStorage = rootStorage;
        return this;
    }
    
    /**
     * Usage snapshot start date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_at")
    public OffsetDateTime startAt;
    public UsageSnapshotEntity withStartAt(OffsetDateTime startAt) {
        this.startAt = startAt;
        return this;
    }
    
    /**
     * Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sync_bytes_received")
    public Double syncBytesReceived;
    public UsageSnapshotEntity withSyncBytesReceived(Double syncBytesReceived) {
        this.syncBytesReceived = syncBytesReceived;
        return this;
    }
    
    /**
     * Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sync_bytes_sent")
    public Double syncBytesSent;
    public UsageSnapshotEntity withSyncBytesSent(Double syncBytesSent) {
        this.syncBytesSent = syncBytesSent;
        return this;
    }
    
    /**
     * Transfer usage for period - Total Billable amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_billable_transfer_usage")
    public Double totalBillableTransferUsage;
    public UsageSnapshotEntity withTotalBillableTransferUsage(Double totalBillableTransferUsage) {
        this.totalBillableTransferUsage = totalBillableTransferUsage;
        return this;
    }
    
    /**
     * Storage + Transfer Usage - Total Billable amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_billable_usage")
    public Double totalBillableUsage;
    public UsageSnapshotEntity withTotalBillableUsage(Double totalBillableUsage) {
        this.totalBillableUsage = totalBillableUsage;
        return this;
    }
    
    /**
     * Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage_by_top_level_dir")
    public java.util.Map<String, Object> usageByTopLevelDir;
    public UsageSnapshotEntity withUsageByTopLevelDir(java.util.Map<String, Object> usageByTopLevelDir) {
        this.usageByTopLevelDir = usageByTopLevelDir;
        return this;
    }
    
}
