"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PUTPublicEmailTemplateRequest = exports.PUTPublicEmailTemplateRequestToEmailTypeEnum = exports.PUTPublicEmailTemplateRequestReplyToEmailTypeEnum = exports.PUTPublicEmailTemplateRequestFromEmailTypeEnum = exports.PUTPublicEmailTemplateRequestEncodingTypeEnum = exports.PUTPublicEmailTemplateRequestCcEmailTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Email cc type.
 *
 * @remarks
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 */
var PUTPublicEmailTemplateRequestCcEmailTypeEnum;
(function (PUTPublicEmailTemplateRequestCcEmailTypeEnum) {
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["BillToContact"] = "BillToContact";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["SoldToContact"] = "SoldToContact";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["SpecificEmails"] = "SpecificEmails";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["TenantAdmin"] = "TenantAdmin";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["BillToAndSoldToContacts"] = "BillToAndSoldToContacts";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["RunOwner"] = "RunOwner";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["AllContacts"] = "AllContacts";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["InvoiceOwnerBillToContact"] = "InvoiceOwnerBillToContact";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["InvoiceOwnerSoldToContact"] = "InvoiceOwnerSoldToContact";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["InvoiceOwnerBillToAndSoldToContacts"] = "InvoiceOwnerBillToAndSoldToContacts";
    PUTPublicEmailTemplateRequestCcEmailTypeEnum["InvoiceOwnerAllContacts"] = "InvoiceOwnerAllContacts";
})(PUTPublicEmailTemplateRequestCcEmailTypeEnum = exports.PUTPublicEmailTemplateRequestCcEmailTypeEnum || (exports.PUTPublicEmailTemplateRequestCcEmailTypeEnum = {}));
/**
 * The endcode type of the email body.
 */
var PUTPublicEmailTemplateRequestEncodingTypeEnum;
(function (PUTPublicEmailTemplateRequestEncodingTypeEnum) {
    PUTPublicEmailTemplateRequestEncodingTypeEnum["Utf8"] = "UTF8";
    PUTPublicEmailTemplateRequestEncodingTypeEnum["ShiftJIS"] = "Shift_JIS";
    PUTPublicEmailTemplateRequestEncodingTypeEnum["Iso2022Jp"] = "ISO_2022_JP";
    PUTPublicEmailTemplateRequestEncodingTypeEnum["EucJp"] = "EUC_JP";
    PUTPublicEmailTemplateRequestEncodingTypeEnum["XSjis0213"] = "X_SJIS_0213";
})(PUTPublicEmailTemplateRequestEncodingTypeEnum = exports.PUTPublicEmailTemplateRequestEncodingTypeEnum || (exports.PUTPublicEmailTemplateRequestEncodingTypeEnum = {}));
/**
 * The type of fromEmail.
 */
var PUTPublicEmailTemplateRequestFromEmailTypeEnum;
(function (PUTPublicEmailTemplateRequestFromEmailTypeEnum) {
    PUTPublicEmailTemplateRequestFromEmailTypeEnum["TenantEmail"] = "TenantEmail";
    PUTPublicEmailTemplateRequestFromEmailTypeEnum["SpecificEmail"] = "SpecificEmail";
})(PUTPublicEmailTemplateRequestFromEmailTypeEnum = exports.PUTPublicEmailTemplateRequestFromEmailTypeEnum || (exports.PUTPublicEmailTemplateRequestFromEmailTypeEnum = {}));
/**
 * The type of the reply email.
 */
var PUTPublicEmailTemplateRequestReplyToEmailTypeEnum;
(function (PUTPublicEmailTemplateRequestReplyToEmailTypeEnum) {
    PUTPublicEmailTemplateRequestReplyToEmailTypeEnum["TenantEmail"] = "TenantEmail";
    PUTPublicEmailTemplateRequestReplyToEmailTypeEnum["SpecificEmail"] = "SpecificEmail";
})(PUTPublicEmailTemplateRequestReplyToEmailTypeEnum = exports.PUTPublicEmailTemplateRequestReplyToEmailTypeEnum || (exports.PUTPublicEmailTemplateRequestReplyToEmailTypeEnum = {}));
/**
 * Email receive type.
 *
 * @remarks
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 */
var PUTPublicEmailTemplateRequestToEmailTypeEnum;
(function (PUTPublicEmailTemplateRequestToEmailTypeEnum) {
    PUTPublicEmailTemplateRequestToEmailTypeEnum["BillToContact"] = "BillToContact";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["SoldToContact"] = "SoldToContact";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["SpecificEmails"] = "SpecificEmails";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["TenantAdmin"] = "TenantAdmin";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["BillToAndSoldToContacts"] = "BillToAndSoldToContacts";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["RunOwner"] = "RunOwner";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["AllContacts"] = "AllContacts";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["InvoiceOwnerBillToContact"] = "InvoiceOwnerBillToContact";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["InvoiceOwnerSoldToContact"] = "InvoiceOwnerSoldToContact";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["InvoiceOwnerBillToAndSoldToContacts"] = "InvoiceOwnerBillToAndSoldToContacts";
    PUTPublicEmailTemplateRequestToEmailTypeEnum["InvoiceOwnerAllContacts"] = "InvoiceOwnerAllContacts";
})(PUTPublicEmailTemplateRequestToEmailTypeEnum = exports.PUTPublicEmailTemplateRequestToEmailTypeEnum || (exports.PUTPublicEmailTemplateRequestToEmailTypeEnum = {}));
/**
 * The request body to update an email template.
 */
var PUTPublicEmailTemplateRequest = /** @class */ (function (_super) {
    __extends(PUTPublicEmailTemplateRequest, _super);
    function PUTPublicEmailTemplateRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "active" }),
        __metadata("design:type", Boolean)
    ], PUTPublicEmailTemplateRequest.prototype, "active", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bccEmailAddress" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "bccEmailAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ccEmailAddress" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "ccEmailAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ccEmailType" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "ccEmailType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emailBody" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "emailBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emailSubject" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "emailSubject", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encodingType" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "encodingType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fromEmailAddress" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "fromEmailAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fromEmailType" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "fromEmailType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fromName" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "fromName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isHtml" }),
        __metadata("design:type", Boolean)
    ], PUTPublicEmailTemplateRequest.prototype, "isHtml", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "replyToEmailAddress" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "replyToEmailAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "replyToEmailType" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "replyToEmailType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "toEmailAddress" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "toEmailAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "toEmailType" }),
        __metadata("design:type", String)
    ], PUTPublicEmailTemplateRequest.prototype, "toEmailType", void 0);
    return PUTPublicEmailTemplateRequest;
}(utils_1.SpeakeasyBase));
exports.PUTPublicEmailTemplateRequest = PUTPublicEmailTemplateRequest;
