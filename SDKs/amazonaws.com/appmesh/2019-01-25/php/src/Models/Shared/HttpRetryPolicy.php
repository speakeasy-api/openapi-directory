<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * HttpRetryPolicy - An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on">Envoy documentation</a>.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class HttpRetryPolicy
{
    /**
     * $httpRetryEvents
     * 
     * @var ?array<string> $httpRetryEvents
     */
	#[\JMS\Serializer\Annotation\SerializedName('httpRetryEvents')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $httpRetryEvents = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('maxRetries')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $maxRetries;
    
	#[\JMS\Serializer\Annotation\SerializedName('perRetryTimeout')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Duration')]
    public Duration $perRetryTimeout;
    
    /**
     * $tcpRetryEvents
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\TcpRetryPolicyEventEnum> $tcpRetryEvents
     */
	#[\JMS\Serializer\Annotation\SerializedName('tcpRetryEvents')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\TcpRetryPolicyEventEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tcpRetryEvents = null;
    
	public function __construct()
	{
		$this->httpRetryEvents = null;
		$this->maxRetries = 0;
		$this->perRetryTimeout = new \OpenAPI\OpenAPI\Models\Shared\Duration();
		$this->tcpRetryEvents = null;
	}
}
