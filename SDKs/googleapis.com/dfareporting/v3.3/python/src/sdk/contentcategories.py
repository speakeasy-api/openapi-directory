"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ContentCategories:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_content_categories_delete(self, request: operations.DfareportingContentCategoriesDeleteRequest, security: operations.DfareportingContentCategoriesDeleteSecurity) -> operations.DfareportingContentCategoriesDeleteResponse:
        r"""Deletes an existing content category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingContentCategoriesDeleteRequest, base_url, '/userprofiles/{profileId}/contentCategories/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingContentCategoriesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingContentCategoriesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_content_categories_get(self, request: operations.DfareportingContentCategoriesGetRequest, security: operations.DfareportingContentCategoriesGetSecurity) -> operations.DfareportingContentCategoriesGetResponse:
        r"""Gets one content category by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingContentCategoriesGetRequest, base_url, '/userprofiles/{profileId}/contentCategories/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingContentCategoriesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingContentCategoriesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentCategory])
                res.content_category = out

        return res

    def dfareporting_content_categories_insert(self, request: operations.DfareportingContentCategoriesInsertRequest, security: operations.DfareportingContentCategoriesInsertSecurity) -> operations.DfareportingContentCategoriesInsertResponse:
        r"""Inserts a new content category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingContentCategoriesInsertRequest, base_url, '/userprofiles/{profileId}/contentCategories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "content_category", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingContentCategoriesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingContentCategoriesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentCategory])
                res.content_category = out

        return res

    def dfareporting_content_categories_list(self, request: operations.DfareportingContentCategoriesListRequest, security: operations.DfareportingContentCategoriesListSecurity) -> operations.DfareportingContentCategoriesListResponse:
        r"""Retrieves a list of content categories, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingContentCategoriesListRequest, base_url, '/userprofiles/{profileId}/contentCategories', request)
        
        query_params = utils.get_query_params(operations.DfareportingContentCategoriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingContentCategoriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentCategoriesListResponse])
                res.content_categories_list_response = out

        return res

    def dfareporting_content_categories_patch(self, request: operations.DfareportingContentCategoriesPatchRequest, security: operations.DfareportingContentCategoriesPatchSecurity) -> operations.DfareportingContentCategoriesPatchResponse:
        r"""Updates an existing content category. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingContentCategoriesPatchRequest, base_url, '/userprofiles/{profileId}/contentCategories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "content_category", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingContentCategoriesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingContentCategoriesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentCategory])
                res.content_category = out

        return res

    def dfareporting_content_categories_update(self, request: operations.DfareportingContentCategoriesUpdateRequest, security: operations.DfareportingContentCategoriesUpdateSecurity) -> operations.DfareportingContentCategoriesUpdateResponse:
        r"""Updates an existing content category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingContentCategoriesUpdateRequest, base_url, '/userprofiles/{profileId}/contentCategories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "content_category", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingContentCategoriesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingContentCategoriesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentCategory])
                res.content_category = out

        return res

    