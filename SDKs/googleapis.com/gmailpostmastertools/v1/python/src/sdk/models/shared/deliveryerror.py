"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DeliveryErrorErrorClassEnum(str, Enum):
    r"""The class of delivery error."""
    DELIVERY_ERROR_CLASS_UNSPECIFIED = 'DELIVERY_ERROR_CLASS_UNSPECIFIED'
    PERMANENT_ERROR = 'PERMANENT_ERROR'
    TEMPORARY_ERROR = 'TEMPORARY_ERROR'

class DeliveryErrorErrorTypeEnum(str, Enum):
    r"""The type of delivery error."""
    DELIVERY_ERROR_TYPE_UNSPECIFIED = 'DELIVERY_ERROR_TYPE_UNSPECIFIED'
    RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED'
    SUSPECTED_SPAM = 'SUSPECTED_SPAM'
    CONTENT_SPAMMY = 'CONTENT_SPAMMY'
    BAD_ATTACHMENT = 'BAD_ATTACHMENT'
    BAD_DMARC_POLICY = 'BAD_DMARC_POLICY'
    LOW_IP_REPUTATION = 'LOW_IP_REPUTATION'
    LOW_DOMAIN_REPUTATION = 'LOW_DOMAIN_REPUTATION'
    IP_IN_RBL = 'IP_IN_RBL'
    DOMAIN_IN_RBL = 'DOMAIN_IN_RBL'
    BAD_PTR_RECORD = 'BAD_PTR_RECORD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeliveryError:
    r"""Metric on a particular delivery error type."""
    
    error_class: Optional[DeliveryErrorErrorClassEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorClass'), 'exclude': lambda f: f is None }})
    r"""The class of delivery error."""  
    error_ratio: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorRatio'), 'exclude': lambda f: f is None }})
    r"""The ratio of messages where the error occurred vs all authenticated traffic."""  
    error_type: Optional[DeliveryErrorErrorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""The type of delivery error."""  
    