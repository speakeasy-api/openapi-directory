/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Brand - Brand-level icon and display name configuration. Once approved, the icon and display name appear in the search results for properties that the partner has assigned to this brand.
 */
public class Brand {
    /**
     * Output only. The brand's active display names in all provided languages, only present if the display name is approved for all provided languages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeDisplayNames")
    public LocalizedText[] activeDisplayNames;
    public Brand withActiveDisplayNames(LocalizedText[] activeDisplayNames) {
        this.activeDisplayNames = activeDisplayNames;
        return this;
    }
    
    /**
     * Output only. The brand's active [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. An active icon is one that has been approved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeIcon")
    public String activeIcon;
    public Brand withActiveIcon(String activeIcon) {
        this.activeIcon = activeIcon;
        return this;
    }
    
    /**
     * Output only. URL of the active icon, only present when the icon has been approved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeIconUri")
    public String activeIconUri;
    public Brand withActiveIconUri(String activeIconUri) {
        this.activeIconUri = activeIconUri;
        return this;
    }
    
    /**
     * Output only. Display name's disapproval reason. Only applies to display names with the review state 'REJECTED'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayNameDisapprovalReason")
    public DisplayNameDisapprovalReason[] displayNameDisapprovalReason;
    public Brand withDisplayNameDisapprovalReason(DisplayNameDisapprovalReason[] displayNameDisapprovalReason) {
        this.displayNameDisapprovalReason = displayNameDisapprovalReason;
        return this;
    }
    
    /**
     * Output only. The brand's display names review state, which applies to all display name language entries. If there are both submitted and active display names, this refers to the submitted display names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayNameState")
    public BrandDisplayNameStateEnum displayNameState;
    public Brand withDisplayNameState(BrandDisplayNameStateEnum displayNameState) {
        this.displayNameState = displayNameState;
        return this;
    }
    
    /**
     * Input only. The name Google displays for the brand's properties. Setting the display names is only necessary if you want to override the landing page display name or account-level display name for the brand. Google reviews the display names for appropriate content. When there are multiple languages, Google will only show the display names once Google approves all the languages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayNames")
    public LocalizedText[] displayNames;
    public Brand withDisplayNames(LocalizedText[] displayNames) {
        this.displayNames = displayNames;
        return this;
    }
    
    /**
     * Input only. The brand's [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource) identifying the brand's icon. The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    public String icon;
    public Brand withIcon(String icon) {
        this.icon = icon;
        return this;
    }
    
    /**
     * Output only. The icon's disapproval reason(s). Only applies to submitted icons with `REJECTED` state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconDisapprovalReasons")
    public BrandIconDisapprovalReasonsEnum[] iconDisapprovalReasons;
    public Brand withIconDisapprovalReasons(BrandIconDisapprovalReasonsEnum[] iconDisapprovalReasons) {
        this.iconDisapprovalReasons = iconDisapprovalReasons;
        return this;
    }
    
    /**
     * Output only. The brand's icon's review state. If there are both submitted and active icons, this refers to the submitted icon.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconState")
    public BrandIconStateEnum iconState;
    public Brand withIconState(BrandIconStateEnum iconState) {
        this.iconState = iconState;
        return this;
    }
    
    /**
     * Output only. The resource name for the brand in the format `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds to the partner's brand identifier used for landing page matching and the property-level brand identifier. A default brand is applied to properties that do not have a brand. The `brand_id` of the default brand is `NO_BRAND_ID`. It can be fetched and updated like any configured brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Brand withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The number of properties with the corresponding brand ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyCount")
    public String propertyCount;
    public Brand withPropertyCount(String propertyCount) {
        this.propertyCount = propertyCount;
        return this;
    }
    
    /**
     * Output only. The brand's submitted display names in all provided languages, only present if the display name is new or rejected for any language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("submittedDisplayNames")
    public LocalizedText[] submittedDisplayNames;
    public Brand withSubmittedDisplayNames(LocalizedText[] submittedDisplayNames) {
        this.submittedDisplayNames = submittedDisplayNames;
        return this;
    }
    
    /**
     * Output only. The brand's submitted [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. A submitted icon is one that is new or rejected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("submittedIcon")
    public String submittedIcon;
    public Brand withSubmittedIcon(String submittedIcon) {
        this.submittedIcon = submittedIcon;
        return this;
    }
    
}
