// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesIDPersonsPersonIDPortfoliosSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum string

const (
	PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnumConfidential PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum = "confidential"
	PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnumRegular      PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum = "regular"
	PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnumPublic       PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum = "public"
)

func (e *PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum: %s", s)
	}
}

// PostSpacesIDPersonsPersonIDPortfoliosRequestBody - Portfolio to add (except Class and Name)
type PostSpacesIDPersonsPersonIDPortfoliosRequestBody struct {
	About        *string                                                    `json:"About,omitempty"`
	ArchivalDate *string                                                    `json:"ArchivalDate,omitempty"`
	Designation  *string                                                    `json:"Designation,omitempty"`
	Home         *bool                                                      `json:"Home,omitempty"`
	Keywords     []string                                                   `json:"Keywords,omitempty"`
	Level        *PostSpacesIDPersonsPersonIDPortfoliosRequestBodyLevelEnum `json:"Level,omitempty"`
	Name         *string                                                    `json:"Name,omitempty"`
}

type PostSpacesIDPersonsPersonIDPortfoliosRequest struct {
	// Portfolio to add (except Class and Name)
	RequestBody *PostSpacesIDPersonsPersonIDPortfoliosRequestBody `request:"mediaType=application/json"`
	// Id of the space
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the person who will be the owner of the portfolio
	PersonID string `pathParam:"style=simple,explode=false,name=personId"`
}

// PostSpacesIDPersonsPersonIDPortfolios201ApplicationJSON - Id of the portfolio created
type PostSpacesIDPersonsPersonIDPortfolios201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesIDPersonsPersonIDPortfoliosResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of the portfolio created
	PostSpacesIDPersonsPersonIDPortfolios201ApplicationJSONObject *PostSpacesIDPersonsPersonIDPortfolios201ApplicationJSON
}
