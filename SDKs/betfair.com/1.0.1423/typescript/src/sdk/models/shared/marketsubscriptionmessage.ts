/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MarketDataFilter } from "./marketdatafilter";
import { MarketFilter } from "./marketfilter";
import { Expose, Type } from "class-transformer";

export class MarketSubscriptionMessage extends SpeakeasyBase {
  /**
   * Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clk" })
  clk?: string;

  /**
   * Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conflateMs" })
  conflateMs?: number;

  /**
   * Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "heartbeatMs" })
  heartbeatMs?: number;

  /**
   * Client generated unique id to link request with response (like json rpc)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
   */
  @SpeakeasyMetadata()
  @Expose({ name: "initialClk" })
  initialClk?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "marketDataFilter" })
  @Type(() => MarketDataFilter)
  marketDataFilter?: MarketDataFilter;

  @SpeakeasyMetadata()
  @Expose({ name: "marketFilter" })
  @Type(() => MarketFilter)
  marketFilter?: MarketFilter;

  /**
   * The operation type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "op" })
  op?: string;

  /**
   * Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
   */
  @SpeakeasyMetadata()
  @Expose({ name: "segmentationEnabled" })
  segmentationEnabled?: boolean;
}
