/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NameFound } from "./namefound";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Person gender
 */
export enum SummaryGenderEnum {
  Male = "male",
  Female = "female",
}

/**
 * Indicates whether a person was found, found as dead or not found at all
 */
export enum SummaryIdentityStatusEnum {
  Found = "found",
  NotFound = "not_found",
  Dead = "dead",
}

/**
 * Represents a background check summary
 */
export class Summary extends SpeakeasyBase {
  /**
   * Person date of birth in RFC3339 format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth?: Date;

  /**
   * Person date of death
   */
  @SpeakeasyMetadata()
  @Expose({ name: "death_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deathDate?: Date;

  /**
   * Person driver's license
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drivers_license" })
  driversLicense?: string;

  /**
   * Person gender
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: SummaryGenderEnum;

  /**
   * Indicates whether a person was found, found as dead or not found at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identity_status" })
  identityStatus?: SummaryIdentityStatusEnum;

  /**
   * Names found during the background check process
   */
  @SpeakeasyMetadata({ elemType: NameFound })
  @Expose({ name: "names_found" })
  @Type(() => NameFound)
  namesFound: NameFound[];

  /**
   * Social security number of the person (Mexico)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nss" })
  nss?: string;

  /**
   * Federal taxpayer registration number of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rfc" })
  rfc?: string;
}
