// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationLicensesPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

// GetOrganizationLicensesStateEnum - Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
type GetOrganizationLicensesStateEnum string

const (
	GetOrganizationLicensesStateEnumActive         GetOrganizationLicensesStateEnum = "active"
	GetOrganizationLicensesStateEnumExpired        GetOrganizationLicensesStateEnum = "expired"
	GetOrganizationLicensesStateEnumExpiring       GetOrganizationLicensesStateEnum = "expiring"
	GetOrganizationLicensesStateEnumRecentlyQueued GetOrganizationLicensesStateEnum = "recentlyQueued"
	GetOrganizationLicensesStateEnumUnused         GetOrganizationLicensesStateEnum = "unused"
	GetOrganizationLicensesStateEnumUnusedActive   GetOrganizationLicensesStateEnum = "unusedActive"
)

func (e *GetOrganizationLicensesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "expiring":
		fallthrough
	case "recentlyQueued":
		fallthrough
	case "unused":
		fallthrough
	case "unusedActive":
		*e = GetOrganizationLicensesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationLicensesStateEnum: %s", s)
	}
}

type GetOrganizationLicensesQueryParams struct {
	// Filter the licenses to those assigned to a particular device
	DeviceSerial *string `queryParam:"style=form,explode=true,name=deviceSerial"`
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Filter the licenses to those assigned in a particular network
	NetworkID *string `queryParam:"style=form,explode=true,name=networkId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
	State *GetOrganizationLicensesStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type GetOrganizationLicensesRequest struct {
	PathParams  GetOrganizationLicensesPathParams
	QueryParams GetOrganizationLicensesQueryParams
}

type GetOrganizationLicensesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationLicenses200ApplicationJSONObjects []map[string]interface{}
}
