"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MyAPICredential:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_me_allowed_origins_origin_id(self, request: operations.DeleteMeAllowedOriginsOriginIDRequest, security: operations.DeleteMeAllowedOriginsOriginIDSecurity) -> operations.DeleteMeAllowedOriginsOriginIDResponse:
        r"""Remove allowed origin
        Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.
        The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).
        
        You can make this request with any of the Management API roles.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMeAllowedOriginsOriginIDRequest, base_url, '/me/allowedOrigins/{originId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMeAllowedOriginsOriginIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_me(self) -> operations.GetMeResponse:
        r"""Get API credential details
        Returns your [API credential](https://docs.adyen.com/development-resources/api-credentials) details based on the API Key you used in the request.
        
        You can make this request with any of the Management API roles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MeAPICredential])
                res.me_api_credential = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_me_allowed_origins(self) -> operations.GetMeAllowedOriginsResponse:
        r"""Get allowed origins
        Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your [API credential](https://docs.adyen.com/development-resources/api-credentials) based on the API key you used in the request.
        
        You can make this request with any of the Management API roles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/allowedOrigins'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeAllowedOriginsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AllowedOriginsResponse])
                res.allowed_origins_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_me_allowed_origins_origin_id(self, request: operations.GetMeAllowedOriginsOriginIDRequest, security: operations.GetMeAllowedOriginsOriginIDSecurity) -> operations.GetMeAllowedOriginsOriginIDResponse:
        r"""Get allowed origin details
        Returns the details of the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.
        The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).
        
        You can make this request with any of the Management API roles.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMeAllowedOriginsOriginIDRequest, base_url, '/me/allowedOrigins/{originId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeAllowedOriginsOriginIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AllowedOrigin])
                res.allowed_origin = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_me_allowed_origins(self, request: shared.CreateAllowedOriginRequest, security: operations.PostMeAllowedOriginsSecurity) -> operations.PostMeAllowedOriginsResponse:
        r"""Add allowed origin
        Adds an allowed origin to the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your API credential.
        The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).
        
        You can make this request with any of the Management API roles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/allowedOrigins'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMeAllowedOriginsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AllowedOrigin])
                res.allowed_origin = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    