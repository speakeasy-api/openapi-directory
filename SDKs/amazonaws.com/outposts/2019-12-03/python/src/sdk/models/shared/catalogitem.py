"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import catalogitemstatus_enum as shared_catalogitemstatus_enum
from ..shared import ec2capacity as shared_ec2capacity
from ..shared import supportedstorageenum_enum as shared_supportedstorageenum_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogItem:
    r"""Information about a catalog item."""
    
    catalog_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogItemId'), 'exclude': lambda f: f is None }})  
    ec2_capacities: Optional[list[shared_ec2capacity.Ec2Capacity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EC2Capacities'), 'exclude': lambda f: f is None }})  
    item_status: Optional[shared_catalogitemstatus_enum.CatalogItemStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ItemStatus'), 'exclude': lambda f: f is None }})  
    power_kva: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerKva'), 'exclude': lambda f: f is None }})  
    supported_storage: Optional[list[shared_supportedstorageenum_enum.SupportedStorageEnumEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedStorage'), 'exclude': lambda f: f is None }})  
    supported_uplink_gbps: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedUplinkGbps'), 'exclude': lambda f: f is None }})  
    weight_lbs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WeightLbs'), 'exclude': lambda f: f is None }})  
    