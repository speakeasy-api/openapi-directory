"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateFundingAccountRequestV2TypeEnum(str, Enum):
    FBO = 'FBO'
    WUBS_DECOUPLED = 'WUBS_DECOUPLED'
    PRIVATE = 'PRIVATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFundingAccountRequestV2:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    payor_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorId') }})  
    type: CreateFundingAccountRequestV2TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountName'), 'exclude': lambda f: f is None }})
    r"""Required if type is either FBO or PRIVATE"""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""Required if type is either FBO or PRIVATE"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""ISO 4217 currency code, Required if type is either WUBS_DECOUPLED or PRIVATE"""  
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingNumber'), 'exclude': lambda f: f is None }})
    r"""Required if type is either FBO or PRIVATE"""  
    