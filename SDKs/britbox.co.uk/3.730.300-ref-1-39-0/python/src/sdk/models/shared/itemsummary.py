"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import classificationsummary as shared_classificationsummary
from ..shared import offer as shared_offer
from ..shared import theme as shared_theme
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ItemSummaryTypeEnum(str, Enum):
    r"""The type of item"""
    MOVIE = 'movie'
    SHOW = 'show'
    SEASON = 'season'
    EPISODE = 'episode'
    PROGRAM = 'program'
    LINK = 'link'
    TRAILER = 'trailer'
    CHANNEL = 'channel'
    CUSTOM_ASSET = 'customAsset'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemSummary:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier for an Item"""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The display title of the item."""  
    type: ItemSummaryTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of item"""  
    advisory_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advisoryText'), 'exclude': lambda f: f is None }})
    r"""Advisory text about this item, related to the classification"""  
    available_episode_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableEpisodeCount'), 'exclude': lambda f: f is None }})
    r"""The number of available episodes in the season, if the item is a season."""  
    available_season_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableSeasonCount'), 'exclude': lambda f: f is None }})
    r"""The number of available seasons in the show, if the item is a show."""  
    average_user_rating: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageUserRating'), 'exclude': lambda f: f is None }})
    r"""The average user rating.
    When based on user ratings from our system this will be out of 10.
    """  
    badge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge'), 'exclude': lambda f: f is None }})
    r"""The badge this item has."""  
    channel_short_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelShortCode'), 'exclude': lambda f: f is None }})
    r"""The channel short code, if the item is a channel."""  
    classification: Optional[shared_classificationsummary.ClassificationSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})  
    contextual_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contextualTitle'), 'exclude': lambda f: f is None }})
    r"""A contextually relative title to display after a parent title.
    Mostly applicable to Season, Episode and Trailer.
    """  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""A map of custom fields defined by a curator for an item."""  
    custom_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customId'), 'exclude': lambda f: f is None }})
    r"""A custom identifier for this item.
    For example the id for this item under a different content system.
    """  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The duration of the media in seconds."""  
    episode_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episodeCount'), 'exclude': lambda f: f is None }})
    r"""The number of episodes in the season, if the item is a season."""  
    episode_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episodeName'), 'exclude': lambda f: f is None }})
    r"""The full name of an episode."""  
    episode_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episodeNumber'), 'exclude': lambda f: f is None }})
    r"""The number of an episode, if the item is an episode."""  
    genres: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genres'), 'exclude': lambda f: f is None }})
    r"""The array of genres this item belongs to."""  
    has_closed_captions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasClosedCaptions'), 'exclude': lambda f: f is None }})
    r"""Whether closed captioning is available."""  
    images: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})  
    offers: Optional[list[shared_offer.Offer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offers'), 'exclude': lambda f: f is None }})
    r"""The array of available offers for this item."""  
    release_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseYear'), 'exclude': lambda f: f is None }})
    r"""The year this item was released"""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""The scopes for this item"""  
    season_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seasonId'), 'exclude': lambda f: f is None }})
    r"""The identifier of the season this item belongs to, if the item is an episode."""  
    season_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seasonNumber'), 'exclude': lambda f: f is None }})
    r"""The number of a season, if the item is a season."""  
    short_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortDescription'), 'exclude': lambda f: f is None }})
    r"""A truncated description of the item"""  
    show_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showId'), 'exclude': lambda f: f is None }})
    r"""The identifier of the show this item belongs to, if the item is a season or episode."""  
    show_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showTitle'), 'exclude': lambda f: f is None }})  
    subtype: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtype'), 'exclude': lambda f: f is None }})
    r"""Subtype of the item. Mainly used to identify different types when `type`
    is `customAsset`
    """  
    tagline: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagline'), 'exclude': lambda f: f is None }})
    r"""The tagline of the item"""  
    themes: Optional[list[shared_theme.Theme]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('themes'), 'exclude': lambda f: f is None }})
    r"""Gets themes associated with the item"""  
    watch_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchPath'), 'exclude': lambda f: f is None }})
    r"""The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`."""  
    