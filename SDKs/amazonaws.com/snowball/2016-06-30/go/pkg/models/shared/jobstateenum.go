// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type JobStateEnum string

const (
	JobStateEnumNew                    JobStateEnum = "New"
	JobStateEnumPreparingAppliance     JobStateEnum = "PreparingAppliance"
	JobStateEnumPreparingShipment      JobStateEnum = "PreparingShipment"
	JobStateEnumInTransitToCustomer    JobStateEnum = "InTransitToCustomer"
	JobStateEnumWithCustomer           JobStateEnum = "WithCustomer"
	JobStateEnumInTransitToAws         JobStateEnum = "InTransitToAWS"
	JobStateEnumWithAwsSortingFacility JobStateEnum = "WithAWSSortingFacility"
	JobStateEnumWithAws                JobStateEnum = "WithAWS"
	JobStateEnumInProgress             JobStateEnum = "InProgress"
	JobStateEnumComplete               JobStateEnum = "Complete"
	JobStateEnumCancelled              JobStateEnum = "Cancelled"
	JobStateEnumListing                JobStateEnum = "Listing"
	JobStateEnumPending                JobStateEnum = "Pending"
)

func (e JobStateEnum) ToPointer() *JobStateEnum {
	return &e
}

func (e *JobStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "New":
		fallthrough
	case "PreparingAppliance":
		fallthrough
	case "PreparingShipment":
		fallthrough
	case "InTransitToCustomer":
		fallthrough
	case "WithCustomer":
		fallthrough
	case "InTransitToAWS":
		fallthrough
	case "WithAWSSortingFacility":
		fallthrough
	case "WithAWS":
		fallthrough
	case "InProgress":
		fallthrough
	case "Complete":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Listing":
		fallthrough
	case "Pending":
		*e = JobStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStateEnum: %v", v)
	}
}
