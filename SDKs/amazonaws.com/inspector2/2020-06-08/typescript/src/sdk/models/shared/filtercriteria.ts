/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DateFilter } from "./datefilter";
import { MapFilter } from "./mapfilter";
import { NumberFilter } from "./numberfilter";
import { PackageFilter } from "./packagefilter";
import { PortRangeFilter } from "./portrangefilter";
import { StringFilter } from "./stringfilter";
import { Expose, Type } from "class-transformer";

/**
 * Details on the criteria used to define the filter.
 */
export class FilterCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "awsAccountId" })
  @Type(() => StringFilter)
  awsAccountId?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "componentId" })
  @Type(() => StringFilter)
  componentId?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "componentType" })
  @Type(() => StringFilter)
  componentType?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ec2InstanceImageId" })
  @Type(() => StringFilter)
  ec2InstanceImageId?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ec2InstanceSubnetId" })
  @Type(() => StringFilter)
  ec2InstanceSubnetId?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ec2InstanceVpcId" })
  @Type(() => StringFilter)
  ec2InstanceVpcId?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ecrImageArchitecture" })
  @Type(() => StringFilter)
  ecrImageArchitecture?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ecrImageHash" })
  @Type(() => StringFilter)
  ecrImageHash?: StringFilter[];

  @SpeakeasyMetadata({ elemType: DateFilter })
  @Expose({ name: "ecrImagePushedAt" })
  @Type(() => DateFilter)
  ecrImagePushedAt?: DateFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ecrImageRegistry" })
  @Type(() => StringFilter)
  ecrImageRegistry?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ecrImageRepositoryName" })
  @Type(() => StringFilter)
  ecrImageRepositoryName?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "ecrImageTags" })
  @Type(() => StringFilter)
  ecrImageTags?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "exploitAvailable" })
  @Type(() => StringFilter)
  exploitAvailable?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "findingArn" })
  @Type(() => StringFilter)
  findingArn?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "findingStatus" })
  @Type(() => StringFilter)
  findingStatus?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "findingType" })
  @Type(() => StringFilter)
  findingType?: StringFilter[];

  @SpeakeasyMetadata({ elemType: DateFilter })
  @Expose({ name: "firstObservedAt" })
  @Type(() => DateFilter)
  firstObservedAt?: DateFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "fixAvailable" })
  @Type(() => StringFilter)
  fixAvailable?: StringFilter[];

  @SpeakeasyMetadata({ elemType: NumberFilter })
  @Expose({ name: "inspectorScore" })
  @Type(() => NumberFilter)
  inspectorScore?: NumberFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "lambdaFunctionExecutionRoleArn" })
  @Type(() => StringFilter)
  lambdaFunctionExecutionRoleArn?: StringFilter[];

  @SpeakeasyMetadata({ elemType: DateFilter })
  @Expose({ name: "lambdaFunctionLastModifiedAt" })
  @Type(() => DateFilter)
  lambdaFunctionLastModifiedAt?: DateFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "lambdaFunctionLayers" })
  @Type(() => StringFilter)
  lambdaFunctionLayers?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "lambdaFunctionName" })
  @Type(() => StringFilter)
  lambdaFunctionName?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "lambdaFunctionRuntime" })
  @Type(() => StringFilter)
  lambdaFunctionRuntime?: StringFilter[];

  @SpeakeasyMetadata({ elemType: DateFilter })
  @Expose({ name: "lastObservedAt" })
  @Type(() => DateFilter)
  lastObservedAt?: DateFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "networkProtocol" })
  @Type(() => StringFilter)
  networkProtocol?: StringFilter[];

  @SpeakeasyMetadata({ elemType: PortRangeFilter })
  @Expose({ name: "portRange" })
  @Type(() => PortRangeFilter)
  portRange?: PortRangeFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "relatedVulnerabilities" })
  @Type(() => StringFilter)
  relatedVulnerabilities?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "resourceId" })
  @Type(() => StringFilter)
  resourceId?: StringFilter[];

  @SpeakeasyMetadata({ elemType: MapFilter })
  @Expose({ name: "resourceTags" })
  @Type(() => MapFilter)
  resourceTags?: MapFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "resourceType" })
  @Type(() => StringFilter)
  resourceType?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "severity" })
  @Type(() => StringFilter)
  severity?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "title" })
  @Type(() => StringFilter)
  title?: StringFilter[];

  @SpeakeasyMetadata({ elemType: DateFilter })
  @Expose({ name: "updatedAt" })
  @Type(() => DateFilter)
  updatedAt?: DateFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "vendorSeverity" })
  @Type(() => StringFilter)
  vendorSeverity?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "vulnerabilityId" })
  @Type(() => StringFilter)
  vulnerabilityId?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "vulnerabilitySource" })
  @Type(() => StringFilter)
  vulnerabilitySource?: StringFilter[];

  @SpeakeasyMetadata({ elemType: PackageFilter })
  @Expose({ name: "vulnerablePackages" })
  @Type(() => PackageFilter)
  vulnerablePackages?: PackageFilter[];
}
