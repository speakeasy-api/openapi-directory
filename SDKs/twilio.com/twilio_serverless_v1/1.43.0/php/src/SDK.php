<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const CREATE_ASSET_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const CREATE_BUILD_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const CREATE_DEPLOYMENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const CREATE_ENVIRONMENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const CREATE_FUNCTION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const CREATE_VARIABLE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const DELETE_ASSET_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const DELETE_BUILD_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const DELETE_ENVIRONMENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const DELETE_FUNCTION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const DELETE_VARIABLE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_ASSET_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_ASSET_VERSION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_BUILD_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_BUILD_STATUS_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_DEPLOYMENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_ENVIRONMENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_FUNCTION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_FUNCTION_VERSION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_FUNCTION_VERSION_CONTENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_LOG_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const FETCH_VARIABLE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_ASSET_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_ASSET_VERSION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_BUILD_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_DEPLOYMENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_ENVIRONMENT_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_FUNCTION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_FUNCTION_VERSION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_LOG_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const LIST_VARIABLE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const UPDATE_ASSET_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const UPDATE_FUNCTION_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const UPDATE_SERVICE_SERVERS = [
		'https://serverless.twilio.com',
	];
	
	public const UPDATE_VARIABLE_SERVERS = [
		'https://serverless.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new Asset resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAssetResponse
     */
	public function createAsset(
        \OpenAPI\OpenAPI\Models\Operations\CreateAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAssetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAssetResponse
    {
        $baseUrl = SDK::CREATE_ASSET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Assets', \OpenAPI\OpenAPI\Models\Operations\CreateAssetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceAsset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceAsset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Build resource. At least one function version or asset version is required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBuildResponse
     */
	public function createBuild(
        \OpenAPI\OpenAPI\Models\Operations\CreateBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBuildResponse
    {
        $baseUrl = SDK::CREATE_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Builds', \OpenAPI\OpenAPI\Models\Operations\CreateBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentResponse
     */
	public function createDeployment(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentResponse
    {
        $baseUrl = SDK::CREATE_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments', \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironmentDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironmentDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentResponse
     */
	public function createEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentResponse
    {
        $baseUrl = SDK::CREATE_ENVIRONMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments', \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Function resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFunctionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFunctionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFunctionResponse
     */
	public function createFunction(
        \OpenAPI\OpenAPI\Models\Operations\CreateFunctionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFunctionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFunctionResponse
    {
        $baseUrl = SDK::CREATE_FUNCTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions', \OpenAPI\OpenAPI\Models\Operations\CreateFunctionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFunctionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceFunction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceFunction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Service resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVariableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVariableSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVariableResponse
     */
	public function createVariable(
        \OpenAPI\OpenAPI\Models\Operations\CreateVariableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateVariableSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVariableResponse
    {
        $baseUrl = SDK::CREATE_VARIABLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables', \OpenAPI\OpenAPI\Models\Operations\CreateVariableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVariableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironmentVariable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironmentVariable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an Asset resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAssetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAssetResponse
     */
	public function deleteAsset(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAssetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAssetResponse
    {
        $baseUrl = SDK::DELETE_ASSET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Assets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteAssetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Build resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBuildResponse
     */
	public function deleteBuild(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBuildResponse
    {
        $baseUrl = SDK::DELETE_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Builds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentResponse
     */
	public function deleteEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentResponse
    {
        $baseUrl = SDK::DELETE_ENVIRONMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Function resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionResponse
     */
	public function deleteFunction(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionResponse
    {
        $baseUrl = SDK::DELETE_FUNCTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFunctionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Service resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVariableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVariableSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVariableResponse
     */
	public function deleteVariable(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVariableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVariableSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVariableResponse
    {
        $baseUrl = SDK::DELETE_VARIABLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteVariableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVariableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Asset resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAssetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAssetResponse
     */
	public function fetchAsset(
        \OpenAPI\OpenAPI\Models\Operations\FetchAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAssetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAssetResponse
    {
        $baseUrl = SDK::FETCH_ASSET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Assets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchAssetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceAsset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceAsset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Asset Version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionResponse
     */
	public function fetchAssetVersion(
        \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionResponse
    {
        $baseUrl = SDK::FETCH_ASSET_VERSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAssetVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceAssetAssetVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceAssetAssetVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Build resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBuildResponse
     */
	public function fetchBuild(
        \OpenAPI\OpenAPI\Models\Operations\FetchBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBuildResponse
    {
        $baseUrl = SDK::FETCH_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Builds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Build resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusResponse
     */
	public function fetchBuildStatus(
        \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusResponse
    {
        $baseUrl = SDK::FETCH_BUILD_STATUS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Builds/{Sid}/Status', \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBuildStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceBuildBuildStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceBuildBuildStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentResponse
     */
	public function fetchDeployment(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentResponse
    {
        $baseUrl = SDK::FETCH_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironmentDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironmentDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentResponse
     */
	public function fetchEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentResponse
    {
        $baseUrl = SDK::FETCH_ENVIRONMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Function resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFunctionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFunctionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFunctionResponse
     */
	public function fetchFunction(
        \OpenAPI\OpenAPI\Models\Operations\FetchFunctionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFunctionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFunctionResponse
    {
        $baseUrl = SDK::FETCH_FUNCTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFunctionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFunctionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceFunction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceFunction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Function Version resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionResponse
     */
	public function fetchFunctionVersion(
        \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionResponse
    {
        $baseUrl = SDK::FETCH_FUNCTION_VERSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceFunctionFunctionVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceFunctionFunctionVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a the content of a specific Function Version resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentResponse
     */
	public function fetchFunctionVersionContent(
        \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentResponse
    {
        $baseUrl = SDK::FETCH_FUNCTION_VERSION_CONTENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}/Content', \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFunctionVersionContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceFunctionFunctionVersionFunctionVersionContent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific log.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchLogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchLogSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchLogResponse
     */
	public function fetchLog(
        \OpenAPI\OpenAPI\Models\Operations\FetchLogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchLogSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchLogResponse
    {
        $baseUrl = SDK::FETCH_LOG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchLogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironmentLog = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironmentLog', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Service resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVariableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVariableSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVariableResponse
     */
	public function fetchVariable(
        \OpenAPI\OpenAPI\Models\Operations\FetchVariableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVariableSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVariableResponse
    {
        $baseUrl = SDK::FETCH_VARIABLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchVariableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVariableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironmentVariable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironmentVariable', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Assets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAssetResponse
     */
	public function listAsset(
        \OpenAPI\OpenAPI\Models\Operations\ListAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAssetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAssetResponse
    {
        $baseUrl = SDK::LIST_ASSET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Assets', \OpenAPI\OpenAPI\Models\Operations\ListAssetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAssetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAssetListAssetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Asset Versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionResponse
     */
	public function listAssetVersion(
        \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionResponse
    {
        $baseUrl = SDK::LIST_ASSET_VERSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions', \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAssetVersionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAssetVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssetVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAssetVersionListAssetVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Builds.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBuildResponse
     */
	public function listBuild(
        \OpenAPI\OpenAPI\Models\Operations\ListBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBuildResponse
    {
        $baseUrl = SDK::LIST_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Builds', \OpenAPI\OpenAPI\Models\Operations\ListBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBuildRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBuildResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBuildListBuildResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Deployments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeploymentResponse
     */
	public function listDeployment(
        \OpenAPI\OpenAPI\Models\Operations\ListDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeploymentResponse
    {
        $baseUrl = SDK::LIST_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments', \OpenAPI\OpenAPI\Models\Operations\ListDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeploymentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeploymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeploymentListDeploymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all environments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentResponse
     */
	public function listEnvironment(
        \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentResponse
    {
        $baseUrl = SDK::LIST_ENVIRONMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments', \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEnvironmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEnvironmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnvironmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEnvironmentListEnvironmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Functions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFunctionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFunctionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFunctionResponse
     */
	public function listFunction(
        \OpenAPI\OpenAPI\Models\Operations\ListFunctionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFunctionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFunctionResponse
    {
        $baseUrl = SDK::LIST_FUNCTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions', \OpenAPI\OpenAPI\Models\Operations\ListFunctionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFunctionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFunctionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFunctionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFunctionListFunctionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Function Version resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionResponse
     */
	public function listFunctionVersion(
        \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionResponse
    {
        $baseUrl = SDK::LIST_FUNCTION_VERSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions', \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFunctionVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFunctionVersionListFunctionVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all logs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLogSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLogResponse
     */
	public function listLog(
        \OpenAPI\OpenAPI\Models\Operations\ListLogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListLogSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLogResponse
    {
        $baseUrl = SDK::LIST_LOG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs', \OpenAPI\OpenAPI\Models\Operations\ListLogRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLogRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLogResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListLogListLogResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Services.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Variables.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVariableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVariableSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVariableResponse
     */
	public function listVariable(
        \OpenAPI\OpenAPI\Models\Operations\ListVariableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVariableSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVariableResponse
    {
        $baseUrl = SDK::LIST_VARIABLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables', \OpenAPI\OpenAPI\Models\Operations\ListVariableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVariableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVariableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVariableResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListVariableListVariableResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Asset resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAssetResponse
     */
	public function updateAsset(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAssetResponse
    {
        $baseUrl = SDK::UPDATE_ASSET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Assets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateAssetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceAsset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceAsset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Function resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionResponse
     */
	public function updateFunction(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionResponse
    {
        $baseUrl = SDK::UPDATE_FUNCTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Functions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFunctionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceFunction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceFunction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Service resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Variable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVariableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVariableSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVariableResponse
     */
	public function updateVariable(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVariableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateVariableSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVariableResponse
    {
        $baseUrl = SDK::UPDATE_VARIABLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateVariableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVariableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serverlessV1ServiceEnvironmentVariable = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServerlessV1ServiceEnvironmentVariable', 'json');
            }
        }

        return $response;
    }
}