"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class InvoiceItemAdjustments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def object_delete_invoice_item_adjustment(self, request: operations.ObjectDELETEInvoiceItemAdjustmentRequest) -> operations.ObjectDELETEInvoiceItemAdjustmentResponse:
        r"""CRUD: Delete an invoice item adjustment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectDELETEInvoiceItemAdjustmentRequest, base_url, '/v1/object/invoice-item-adjustment/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectDELETEInvoiceItemAdjustmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyDeleteResponse])
                res.proxy_delete_response = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out

        return res

    def object_get_invoice_item_adjustment(self, request: operations.ObjectGETInvoiceItemAdjustmentRequest) -> operations.ObjectGETInvoiceItemAdjustmentResponse:
        r"""CRUD: Retrieve an invoice item adjustment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectGETInvoiceItemAdjustmentRequest, base_url, '/v1/object/invoice-item-adjustment/{id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ObjectGETInvoiceItemAdjustmentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectGETInvoiceItemAdjustmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyGetInvoiceItemAdjustment])
                res.proxy_get_invoice_item_adjustment = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out
        elif http_res.status_code == 404:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyNoDataResponse])
                res.proxy_no_data_response = out

        return res

    