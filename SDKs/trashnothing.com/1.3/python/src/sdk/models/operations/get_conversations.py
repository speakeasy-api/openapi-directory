"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import conversation as shared_conversation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetConversationsRequest:
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category', 'style': 'form', 'explode': True }})
    r"""Used to filter messases by category.  Must be set to one of the following three categories: inbox, archived, blocked"""  
    device_pixel_ratio: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'device_pixel_ratio', 'style': 'form', 'explode': True }})
    r"""Client device pixel ratio used to determine thumbnail size (default 1.0)."""  
    include_num_unread: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_num_unread', 'style': 'form', 'explode': True }})
    r"""If set to 1, the num_unread field in the response will be set to the count of the total number of conversations that have unread messages. <br /><br /> This is useful for showing users the total number of unread messages that they have in their inbox. Calculating the count will slow the request down a bit so setting this should be avoided for requests where it's not needed (eg. requesting archived or blocked conversations or requests that are just paging through older conversations)."""  
    num_messages: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'num_messages', 'style': 'form', 'explode': True }})
    r"""The number of recent messages to return with each conversation. Additional messages can be retrieved using get conversation messages endpoint."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page of conversations to return."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of conversations to return per page (must be >= 1 and <= 30)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetConversations200ApplicationJSON:
    r"""The conversations and paging data."""
    
    conversations: Optional[list[shared_conversation.Conversation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversations'), 'exclude': lambda f: f is None }})  
    num_unread: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_unread'), 'exclude': lambda f: f is None }})
    r"""If the include_num_unread parameter is set to 1, this will be set to the total number of conversations that have unread messages matching the query parameters of the request.  If the include_num_unread parameter is set to 0, this will be null."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetConversationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_conversations_200_application_json_object: Optional[GetConversations200ApplicationJSON] = dataclasses.field(default=None)
    r"""The conversations and paging data."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    