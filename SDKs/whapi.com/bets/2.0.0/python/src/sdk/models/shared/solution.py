"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Solution:
    
    bet_num: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('betNum'), 'exclude': lambda f: f is None }})
    r"""The bet number"""  
    event_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventId'), 'exclude': lambda f: f is None }})
    r"""The identifier of the event"""  
    handicap: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('handicap'), 'exclude': lambda f: f is None }})
    r"""The updated handicap"""  
    handicap_precision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('handicapPrecision'), 'exclude': lambda f: f is None }})
    r"""The handicap precision"""  
    price_den: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDen'), 'exclude': lambda f: f is None }})
    r"""When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2"""  
    price_num: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceNum'), 'exclude': lambda f: f is None }})
    r"""When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2"""  
    selection_handicap: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectionHandicap'), 'exclude': lambda f: f is None }})
    r"""The selection handicap"""  
    selection_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectionId'), 'exclude': lambda f: f is None }})
    r"""The identifier of the selection"""  
    