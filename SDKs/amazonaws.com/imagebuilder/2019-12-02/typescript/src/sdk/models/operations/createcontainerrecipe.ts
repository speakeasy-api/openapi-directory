/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The type of container to create.
 */
export enum CreateContainerRecipeRequestBodyContainerTypeEnum {
  Docker = "DOCKER",
}

/**
 * Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
 */
export class CreateContainerRecipeRequestBodyInstanceConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.InstanceBlockDeviceMapping })
  @Expose({ name: "blockDeviceMappings" })
  @Type(() => shared.InstanceBlockDeviceMapping)
  blockDeviceMappings?: shared.InstanceBlockDeviceMapping[];

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  image?: string;
}

/**
 * Specifies the operating system platform when you use a custom base image.
 */
export enum CreateContainerRecipeRequestBodyPlatformOverrideEnum {
  Windows = "Windows",
  Linux = "Linux",
}

/**
 * The container repository where the output container image is stored.
 */
export class CreateContainerRecipeRequestBodyTargetRepository extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "repositoryName" })
  repositoryName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "service" })
  service?: shared.ContainerRepositoryServiceEnum;
}

export class CreateContainerRecipeRequestBody extends SpeakeasyBase {
  /**
   * The client token used to make this request idempotent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
   */
  @SpeakeasyMetadata({ elemType: shared.ComponentConfiguration })
  @Expose({ name: "components" })
  @Type(() => shared.ComponentConfiguration)
  components: shared.ComponentConfiguration[];

  /**
   * The type of container to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "containerType" })
  containerType: CreateContainerRecipeRequestBodyContainerTypeEnum;

  /**
   * The description of the container recipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The Dockerfile template used to build your image as an inline data blob.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dockerfileTemplateData" })
  dockerfileTemplateData?: string;

  /**
   * The Amazon S3 URI for the Dockerfile that will be used to build your container image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dockerfileTemplateUri" })
  dockerfileTemplateUri?: string;

  /**
   * Specifies the operating system version for the base image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "imageOsVersionOverride" })
  imageOsVersionOverride?: string;

  /**
   * Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instanceConfiguration" })
  @Type(() => CreateContainerRecipeRequestBodyInstanceConfiguration)
  instanceConfiguration?: CreateContainerRecipeRequestBodyInstanceConfiguration;

  /**
   * Identifies which KMS key is used to encrypt the container image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyId" })
  kmsKeyId?: string;

  /**
   * The name of the container recipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The base image for the container recipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentImage" })
  parentImage: string;

  /**
   * Specifies the operating system platform when you use a custom base image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platformOverride" })
  platformOverride?: CreateContainerRecipeRequestBodyPlatformOverrideEnum;

  /**
   * <p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "semanticVersion" })
  semanticVersion: string;

  /**
   * Tags that are attached to the container recipe.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * The container repository where the output container image is stored.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetRepository" })
  @Type(() => CreateContainerRecipeRequestBodyTargetRepository)
  targetRepository: CreateContainerRecipeRequestBodyTargetRepository;

  /**
   * The working directory for use during build and test workflows.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workingDirectory" })
  workingDirectory?: string;
}

export class CreateContainerRecipeRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateContainerRecipeRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateContainerRecipeResponse extends SpeakeasyBase {
  /**
   * CallRateLimitExceededException
   */
  @SpeakeasyMetadata()
  callRateLimitExceededException?: any;

  /**
   * ClientException
   */
  @SpeakeasyMetadata()
  clientException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createContainerRecipeResponse?: shared.CreateContainerRecipeResponse;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * IdempotentParameterMismatchException
   */
  @SpeakeasyMetadata()
  idempotentParameterMismatchException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * InvalidVersionNumberException
   */
  @SpeakeasyMetadata()
  invalidVersionNumberException?: any;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  /**
   * ServiceException
   */
  @SpeakeasyMetadata()
  serviceException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;
}
