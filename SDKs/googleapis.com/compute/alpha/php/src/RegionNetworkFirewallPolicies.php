<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionNetworkFirewallPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Inserts an association for the specified network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationResponse
     */
	public function computeRegionNetworkFirewallPoliciesAddAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyAssociation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a rule into a network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleResponse
     */
	public function computeRegionNetworkFirewallPoliciesAddRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesAddRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copies rules to the specified network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesResponse
     */
	public function computeRegionNetworkFirewallPoliciesCloneRules(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesCloneRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteResponse
     */
	public function computeRegionNetworkFirewallPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetResponse
     */
	public function computeRegionNetworkFirewallPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an association with the specified name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationResponse
     */
	public function computeRegionNetworkFirewallPoliciesGetAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyAssociation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyAssociation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the effective firewalls on a given network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
     */
	public function computeRegionNetworkFirewallPoliciesGetEffectiveFirewalls(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionNetworkFirewallPoliciesGetEffectiveFirewallsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicyResponse
     */
	public function computeRegionNetworkFirewallPoliciesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleResponse
     */
	public function computeRegionNetworkFirewallPoliciesGetRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesGetRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new network firewall policy in the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertResponse
     */
	public function computeRegionNetworkFirewallPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the network firewall policies that have been configured for the specified project in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListResponse
     */
	public function computeRegionNetworkFirewallPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchResponse
     */
	public function computeRegionNetworkFirewallPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleResponse
     */
	public function computeRegionNetworkFirewallPoliciesPatchRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesPatchRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an association for the specified network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationResponse
     */
	public function computeRegionNetworkFirewallPoliciesRemoveAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleResponse
     */
	public function computeRegionNetworkFirewallPoliciesRemoveRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesRemoveRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicyResponse
     */
	public function computeRegionNetworkFirewallPoliciesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsResponse
     */
	public function computeRegionNetworkFirewallPoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionNetworkFirewallPoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}