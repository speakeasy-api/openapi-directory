// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type RoadDisruptionPathParams struct {
	// Comma-separated list of road identifiers e.g. "A406, A2" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)
	Ids []string `pathParam:"style=simple,explode=false,name=ids"`
}

type RoadDisruptionQueryParams struct {
	// an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)
	Categories []string `queryParam:"style=form,explode=true,name=categories"`
	// Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.
	Closures *bool `queryParam:"style=form,explode=true,name=closures"`
	// an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)
	Severities []string `queryParam:"style=form,explode=true,name=severities"`
	// Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets
	StripContent *bool `queryParam:"style=form,explode=true,name=stripContent"`
}

type RoadDisruptionRequest struct {
	PathParams  RoadDisruptionPathParams
	QueryParams RoadDisruptionQueryParams
}

type RoadDisruptionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesRoadDisruptions []shared.TflAPIPresentationEntitiesRoadDisruption
}
