// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReactionsListForIssueContentEnum - Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
type ReactionsListForIssueContentEnum string

const (
	ReactionsListForIssueContentEnumPlus1    ReactionsListForIssueContentEnum = "+1"
	ReactionsListForIssueContentEnumMinus1   ReactionsListForIssueContentEnum = "-1"
	ReactionsListForIssueContentEnumLaugh    ReactionsListForIssueContentEnum = "laugh"
	ReactionsListForIssueContentEnumConfused ReactionsListForIssueContentEnum = "confused"
	ReactionsListForIssueContentEnumHeart    ReactionsListForIssueContentEnum = "heart"
	ReactionsListForIssueContentEnumHooray   ReactionsListForIssueContentEnum = "hooray"
	ReactionsListForIssueContentEnumRocket   ReactionsListForIssueContentEnum = "rocket"
	ReactionsListForIssueContentEnumEyes     ReactionsListForIssueContentEnum = "eyes"
)

func (e ReactionsListForIssueContentEnum) ToPointer() *ReactionsListForIssueContentEnum {
	return &e
}

func (e *ReactionsListForIssueContentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "+1":
		fallthrough
	case "-1":
		fallthrough
	case "laugh":
		fallthrough
	case "confused":
		fallthrough
	case "heart":
		fallthrough
	case "hooray":
		fallthrough
	case "rocket":
		fallthrough
	case "eyes":
		*e = ReactionsListForIssueContentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReactionsListForIssueContentEnum: %v", v)
	}
}

type ReactionsListForIssueRequest struct {
	// Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
	Content *ReactionsListForIssueContentEnum `queryParam:"style=form,explode=true,name=content"`
	// issue_number parameter
	IssueNumber int64  `pathParam:"style=simple,explode=false,name=issue_number"`
	Owner       string `pathParam:"style=simple,explode=false,name=owner"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Results per page (max 100)
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	Repo    string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReactionsListForIssueResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	Reactions []shared.Reaction
}
