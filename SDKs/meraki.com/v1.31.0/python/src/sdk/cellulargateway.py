"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class CellularGateway:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_device_cellular_gateway_lan(self, request: operations.GetDeviceCellularGatewayLanRequest) -> operations.GetDeviceCellularGatewayLanResponse:
        r"""Show the LAN Settings of a MG
        Show the LAN Settings of a MG
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceCellularGatewayLanRequest, base_url, '/devices/{serial}/cellularGateway/lan', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceCellularGatewayLanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_device_cellular_gateway_lan_200_application_json_object = out

        return res

    def get_device_cellular_gateway_port_forwarding_rules(self, request: operations.GetDeviceCellularGatewayPortForwardingRulesRequest) -> operations.GetDeviceCellularGatewayPortForwardingRulesResponse:
        r"""Returns the port forwarding rules for a single MG.
        Returns the port forwarding rules for a single MG.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceCellularGatewayPortForwardingRulesRequest, base_url, '/devices/{serial}/cellularGateway/portForwardingRules', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceCellularGatewayPortForwardingRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_device_cellular_gateway_port_forwarding_rules_200_application_json_object = out

        return res

    def get_network_cellular_gateway_connectivity_monitoring_destinations(self, request: operations.GetNetworkCellularGatewayConnectivityMonitoringDestinationsRequest) -> operations.GetNetworkCellularGatewayConnectivityMonitoringDestinationsResponse:
        r"""Return the connectivity testing destinations for an MG network
        Return the connectivity testing destinations for an MG network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, base_url, '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkCellularGatewayConnectivityMonitoringDestinationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_cellular_gateway_connectivity_monitoring_destinations_200_application_json_object = out

        return res

    def get_network_cellular_gateway_dhcp(self, request: operations.GetNetworkCellularGatewayDhcpRequest) -> operations.GetNetworkCellularGatewayDhcpResponse:
        r"""List common DHCP settings of MGs
        List common DHCP settings of MGs
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkCellularGatewayDhcpRequest, base_url, '/networks/{networkId}/cellularGateway/dhcp', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkCellularGatewayDhcpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkCellularGatewayDhcp200ApplicationJSON])
                res.get_network_cellular_gateway_dhcp_200_application_json_object = out

        return res

    def get_network_cellular_gateway_subnet_pool(self, request: operations.GetNetworkCellularGatewaySubnetPoolRequest) -> operations.GetNetworkCellularGatewaySubnetPoolResponse:
        r"""Return the subnet pool and mask configured for MGs in the network.
        Return the subnet pool and mask configured for MGs in the network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkCellularGatewaySubnetPoolRequest, base_url, '/networks/{networkId}/cellularGateway/subnetPool', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkCellularGatewaySubnetPoolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_cellular_gateway_subnet_pool_200_application_json_object = out

        return res

    def get_network_cellular_gateway_uplink(self, request: operations.GetNetworkCellularGatewayUplinkRequest) -> operations.GetNetworkCellularGatewayUplinkResponse:
        r"""Returns the uplink settings for your MG network.
        Returns the uplink settings for your MG network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkCellularGatewayUplinkRequest, base_url, '/networks/{networkId}/cellularGateway/uplink', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkCellularGatewayUplinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_cellular_gateway_uplink_200_application_json_object = out

        return res

    def get_organization_cellular_gateway_uplink_statuses(self, request: operations.GetOrganizationCellularGatewayUplinkStatusesRequest) -> operations.GetOrganizationCellularGatewayUplinkStatusesResponse:
        r"""List the uplink status of every Meraki MG cellular gateway in the organization
        List the uplink status of every Meraki MG cellular gateway in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationCellularGatewayUplinkStatusesRequest, base_url, '/organizations/{organizationId}/cellularGateway/uplink/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationCellularGatewayUplinkStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationCellularGatewayUplinkStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationCellularGatewayUplinkStatuses200ApplicationJSON]])
                res.get_organization_cellular_gateway_uplink_statuses_200_application_json_objects = out

        return res

    def update_device_cellular_gateway_lan(self, request: operations.UpdateDeviceCellularGatewayLanRequest) -> operations.UpdateDeviceCellularGatewayLanResponse:
        r"""Update the LAN Settings for a single MG.
        Update the LAN Settings for a single MG.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceCellularGatewayLanRequest, base_url, '/devices/{serial}/cellularGateway/lan', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceCellularGatewayLanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_device_cellular_gateway_lan_200_application_json_object = out

        return res

    def update_device_cellular_gateway_port_forwarding_rules(self, request: operations.UpdateDeviceCellularGatewayPortForwardingRulesRequest) -> operations.UpdateDeviceCellularGatewayPortForwardingRulesResponse:
        r"""Updates the port forwarding rules for a single MG.
        Updates the port forwarding rules for a single MG.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceCellularGatewayPortForwardingRulesRequest, base_url, '/devices/{serial}/cellularGateway/portForwardingRules', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceCellularGatewayPortForwardingRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_device_cellular_gateway_port_forwarding_rules_200_application_json_object = out

        return res

    def update_network_cellular_gateway_connectivity_monitoring_destinations(self, request: operations.UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest) -> operations.UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsResponse:
        r"""Update the connectivity testing destinations for an MG network
        Update the connectivity testing destinations for an MG network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest, base_url, '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_cellular_gateway_connectivity_monitoring_destinations_200_application_json_object = out

        return res

    def update_network_cellular_gateway_dhcp(self, request: operations.UpdateNetworkCellularGatewayDhcpRequest) -> operations.UpdateNetworkCellularGatewayDhcpResponse:
        r"""Update common DHCP settings of MGs
        Update common DHCP settings of MGs
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkCellularGatewayDhcpRequest, base_url, '/networks/{networkId}/cellularGateway/dhcp', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkCellularGatewayDhcpResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkCellularGatewayDhcp200ApplicationJSON])
                res.update_network_cellular_gateway_dhcp_200_application_json_object = out

        return res

    def update_network_cellular_gateway_subnet_pool(self, request: operations.UpdateNetworkCellularGatewaySubnetPoolRequest) -> operations.UpdateNetworkCellularGatewaySubnetPoolResponse:
        r"""Update the subnet pool and mask configuration for MGs in the network.
        Update the subnet pool and mask configuration for MGs in the network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkCellularGatewaySubnetPoolRequest, base_url, '/networks/{networkId}/cellularGateway/subnetPool', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkCellularGatewaySubnetPoolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_cellular_gateway_subnet_pool_200_application_json_object = out

        return res

    def update_network_cellular_gateway_uplink(self, request: operations.UpdateNetworkCellularGatewayUplinkRequest) -> operations.UpdateNetworkCellularGatewayUplinkResponse:
        r"""Updates the uplink settings for your MG network.
        Updates the uplink settings for your MG network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkCellularGatewayUplinkRequest, base_url, '/networks/{networkId}/cellularGateway/uplink', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkCellularGatewayUplinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_cellular_gateway_uplink_200_application_json_object = out

        return res

    