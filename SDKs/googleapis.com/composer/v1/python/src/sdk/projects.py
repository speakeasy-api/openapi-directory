"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def composer_projects_locations_environments_create(self, request: operations.ComposerProjectsLocationsEnvironmentsCreateRequest, security: operations.ComposerProjectsLocationsEnvironmentsCreateSecurity) -> operations.ComposerProjectsLocationsEnvironmentsCreateResponse:
        r"""Create a new environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsEnvironmentsCreateRequest, base_url, '/v1/{parent}/environments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "environment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsEnvironmentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsEnvironmentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def composer_projects_locations_environments_list(self, request: operations.ComposerProjectsLocationsEnvironmentsListRequest, security: operations.ComposerProjectsLocationsEnvironmentsListSecurity) -> operations.ComposerProjectsLocationsEnvironmentsListResponse:
        r"""List environments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsEnvironmentsListRequest, base_url, '/v1/{parent}/environments', request)
        
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsEnvironmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsEnvironmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListEnvironmentsResponse])
                res.list_environments_response = out

        return res

    def composer_projects_locations_environments_load_snapshot(self, request: operations.ComposerProjectsLocationsEnvironmentsLoadSnapshotRequest, security: operations.ComposerProjectsLocationsEnvironmentsLoadSnapshotSecurity) -> operations.ComposerProjectsLocationsEnvironmentsLoadSnapshotResponse:
        r"""Loads a snapshot of a Cloud Composer environment. As a result of this operation, a snapshot of environment's specified in LoadSnapshotRequest is loaded into the environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsEnvironmentsLoadSnapshotRequest, base_url, '/v1/{environment}:loadSnapshot', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "load_snapshot_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsEnvironmentsLoadSnapshotRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsEnvironmentsLoadSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def composer_projects_locations_environments_patch(self, request: operations.ComposerProjectsLocationsEnvironmentsPatchRequest, security: operations.ComposerProjectsLocationsEnvironmentsPatchSecurity) -> operations.ComposerProjectsLocationsEnvironmentsPatchResponse:
        r"""Update an environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsEnvironmentsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "environment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsEnvironmentsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsEnvironmentsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def composer_projects_locations_environments_save_snapshot(self, request: operations.ComposerProjectsLocationsEnvironmentsSaveSnapshotRequest, security: operations.ComposerProjectsLocationsEnvironmentsSaveSnapshotSecurity) -> operations.ComposerProjectsLocationsEnvironmentsSaveSnapshotResponse:
        r"""Creates a snapshots of a Cloud Composer environment. As a result of this operation, snapshot of environment's state is stored in a location specified in the SaveSnapshotRequest."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsEnvironmentsSaveSnapshotRequest, base_url, '/v1/{environment}:saveSnapshot', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "save_snapshot_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsEnvironmentsSaveSnapshotRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsEnvironmentsSaveSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def composer_projects_locations_image_versions_list(self, request: operations.ComposerProjectsLocationsImageVersionsListRequest, security: operations.ComposerProjectsLocationsImageVersionsListSecurity) -> operations.ComposerProjectsLocationsImageVersionsListResponse:
        r"""List ImageVersions for provided location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsImageVersionsListRequest, base_url, '/v1/{parent}/imageVersions', request)
        
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsImageVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsImageVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListImageVersionsResponse])
                res.list_image_versions_response = out

        return res

    def composer_projects_locations_operations_delete(self, request: operations.ComposerProjectsLocationsOperationsDeleteRequest, security: operations.ComposerProjectsLocationsOperationsDeleteSecurity) -> operations.ComposerProjectsLocationsOperationsDeleteResponse:
        r"""Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsOperationsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsOperationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsOperationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def composer_projects_locations_operations_get(self, request: operations.ComposerProjectsLocationsOperationsGetRequest, security: operations.ComposerProjectsLocationsOperationsGetSecurity) -> operations.ComposerProjectsLocationsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsOperationsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def composer_projects_locations_operations_list(self, request: operations.ComposerProjectsLocationsOperationsListRequest, security: operations.ComposerProjectsLocationsOperationsListSecurity) -> operations.ComposerProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ComposerProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.ComposerProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ComposerProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    