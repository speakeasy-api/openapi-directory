<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Collections 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * All Collections
     * 
     * The `/collections` endpoint returns a list of all [collections](https://www.getpostman.com/docs/collections) that are accessible by you. The list includes your own collections and the collections that you have subscribed to.
     * 
     * The response contains an array of collection information containing the `name`, `id`, `owner` and `uid` of each collection.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AllCollectionsResponse
     */
	public function allCollections(
    ): \OpenAPI\OpenAPI\Models\Operations\AllCollectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllCollectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allCollections200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AllCollections200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Fork
     * 
     * This endpoint allows you to create a fork from an existing collection.
     * 
     * On successful creation of the collection, the response returns the collection `name`, `id`, `uid` along with `fork` information.
     * 
     * You can also specify the context of a workspace to fork a collection in by passing the `workspace` as a query param.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAForkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAForkResponse
     */
	public function createAFork(
        \OpenAPI\OpenAPI\Models\Operations\CreateAForkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAForkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/fork/{collection_uid}', \OpenAPI\OpenAPI\Models\Operations\CreateAForkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateAForkRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAForkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create Collection
     * 
     * This endpoint allows you to create collections using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).
     * 
     * On successful creation of the collection, the response returns the collection `name`, `id` and the `uid`.
     * 
     * You can also specify the context of a workspace to create a collection in directly by passing the `workspace` as a query param.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCollectionRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
     */
	public function createCollection(
        \OpenAPI\OpenAPI\Models\Operations\CreateCollectionRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCollection200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateCollection200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCollection400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateCollection400ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Collection
     * 
     * This endpoint allows you to delete an existing collection.
     * 
     * On successful deletion of the collection, the response returns the `id` and `uid`.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
     */
	public function deleteCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_uid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCollection200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteCollection200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCollection404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteCollection404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Merge a Fork
     * 
     * This endpoint allows you to merge a forked collection back to its destination collection.
     * 
     * On successful creation of the collection, the response returns the collection `name`, `id` and `uid`.
     * 
     * You need to specify the fork UID (as `source`) and destination collection UID (as `destination`) in the request body.
     * 
     * Optionally, you can also specify the merge strategy as either `deleteSource` or `updateSourceWithDestination`. Following is an explanation of the merge strategies
     * 
     * | Merge Strategy | Behaviour |
     * | --- | --- |
     * | deleteSource | Forked collection is deleted after merging |
     * | updateSourceWithDestination | Forked collection is up to date with changes in destination collection |
     * 
     * If the collections cannot be merged (due to conflicts), appropriate error messages will be returned.
     * 
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MergeAForkRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MergeAForkResponse
     */
	public function mergeAFork(
        \OpenAPI\OpenAPI\Models\Operations\MergeAForkRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MergeAForkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/merge');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MergeAForkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Single Collection 
     * 
     * Access the contents of a collection that is accessible to you using its unique id (`uid`).
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SingleCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SingleCollectionResponse
     */
	public function singleCollection(
        \OpenAPI\OpenAPI\Models\Operations\SingleCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SingleCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_uid}', \OpenAPI\OpenAPI\Models\Operations\SingleCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SingleCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->singleCollection200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SingleCollection200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Collection
     * 
     * This endpoint allows you to update an existing collection using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).
     * 
     * On successful updation of the collection, the response returns the collection `name`, `id` and `uid`.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * Note: Please be careful when trying to update the collection, as the existing collection will be replaced by the request body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionResponse
     */
	public function updateCollection(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_uid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCollection200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateCollection200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCollection400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateCollection400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCollection403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateCollection403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCollection404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateCollection404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}