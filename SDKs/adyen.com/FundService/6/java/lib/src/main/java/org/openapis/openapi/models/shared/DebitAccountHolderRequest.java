/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class DebitAccountHolderRequest {
    /**
     * The code of the account holder.
     */
    @JsonProperty("accountHolderCode")
    public String accountHolderCode;

    public DebitAccountHolderRequest withAccountHolderCode(String accountHolderCode) {
        this.accountHolderCode = accountHolderCode;
        return this;
    }
    
    @JsonProperty("amount")
    public Amount amount;

    public DebitAccountHolderRequest withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The Adyen-generated unique alphanumeric identifier (UUID) of the account holder's bank account.
     */
    @JsonProperty("bankAccountUUID")
    public String bankAccountUUID;

    public DebitAccountHolderRequest withBankAccountUUID(String bankAccountUUID) {
        this.bankAccountUUID = bankAccountUUID;
        return this;
    }
    
    /**
     * A description of the direct debit. Maximum length: 35 characters.
     * 
     * Allowed characters: **a-z**, **A-Z**, **0-9**, and special characters ** /?:().,'+ ";**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public DebitAccountHolderRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Your merchant account.
     */
    @JsonProperty("merchantAccount")
    public String merchantAccount;

    public DebitAccountHolderRequest withMerchantAccount(String merchantAccount) {
        this.merchantAccount = merchantAccount;
        return this;
    }
    
    /**
     * Contains instructions on how to split the funds between the accounts in your platform. The request must have at least one split item.
     */
    @JsonProperty("splits")
    public Split[] splits;

    public DebitAccountHolderRequest withSplits(Split[] splits) {
        this.splits = splits;
        return this;
    }
    
    public DebitAccountHolderRequest(@JsonProperty("accountHolderCode") String accountHolderCode, @JsonProperty("amount") Amount amount, @JsonProperty("bankAccountUUID") String bankAccountUUID, @JsonProperty("merchantAccount") String merchantAccount, @JsonProperty("splits") Split[] splits) {
        this.accountHolderCode = accountHolderCode;
        this.amount = amount;
        this.bankAccountUUID = bankAccountUUID;
        this.merchantAccount = merchantAccount;
        this.splits = splits;
  }
}
