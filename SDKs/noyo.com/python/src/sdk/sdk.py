"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .agents import Agents
from .application_documents import ApplicationDocuments
from .applications import Applications
from .bank_accounts import BankAccounts
from .coverage_plans import CoveragePlans
from .dependents import Dependents
from .employees import Employees
from .group_configuration_contacts_ import GroupConfigurationContacts
from .group_configuration_locations_ import GroupConfigurationLocations
from .group_coverages import GroupCoverages
from .groups import Groups
from .member_elections import MemberElections
from sdk.models import operations

SERVERS = [
    "https://group-installation.noyo.com",
    r"""Noyo Group Installation API - Live"""
    "https://group-installation-sandbox.noyo.com",
    r"""Noyo Group Installation API - Sandbox"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Noyo Group Installation API."""
    agents: Agents
    application_documents: ApplicationDocuments
    applications: Applications
    bank_accounts: BankAccounts
    coverage_plans: CoveragePlans
    dependents: Dependents
    employees: Employees
    group_configuration_contacts: GroupConfigurationContacts
    group_configuration_locations: GroupConfigurationLocations
    group_coverages: GroupCoverages
    groups: Groups
    member_elections: MemberElections

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.agents = Agents(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.application_documents = ApplicationDocuments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.applications = Applications(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bank_accounts = BankAccounts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.coverage_plans = CoveragePlans(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.dependents = Dependents(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.employees = Employees(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.group_configuration_contacts = GroupConfigurationContacts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.group_configuration_locations = GroupConfigurationLocations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.group_coverages = GroupCoverages(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.groups = Groups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.member_elections = MemberElections(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def ping(self) -> operations.PingResponse:
        r"""Ping Endpoint
        Returns a simple OK message with a 200 status code
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ping'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    