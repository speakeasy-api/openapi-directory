"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccessTokens:
    r"""The Personal Access Token endpoints lets you manage personal access tokens. For more
    information, see [Access Tokens](https://docs.docker.com/docker-hub/access-tokens/).
    
    You can use a personal access token instead of a password in the [Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/) 
    or in the [Create an authentication token](#operation/PostUsersLogin) route to obtain a bearer 
    token.
    
    ### Scopes
    
    For each scope grouping (in this case \"repo\"), you only need to define 1 scope as any lower 
    scopes are assumed. For example: If you define `repo:write`, the API assumes the scope of both 
    `repo:read` *and* `repo:public_read` as well. If you were to define both `repo:write` *and* 
    `repo:read`, then `repo:read` is assumed by `repo:write` and ignored.
    
    ***Treat your personal access token like your password and keep it secret. You cannot retrieve 
    your token after it is generated.***
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_v2_access_tokens_uuid_(self, request: operations.DeleteV2AccessTokensUUIDRequest) -> operations.DeleteV2AccessTokensUUIDResponse:
        r"""Delete a personal access token
        Deletes a personal access token permanently. This cannot be undone.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteV2AccessTokensUUIDRequest, base_url, '/v2/access-tokens/{uuid}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteV2AccessTokensUUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v2_access_tokens(self, request: operations.GetV2AccessTokensRequest) -> operations.GetV2AccessTokensResponse:
        r"""Get a list of personal access tokens
        Returns a paginated list of personal access tokens.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/access-tokens'
        
        query_params = utils.get_query_params(operations.GetV2AccessTokensRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2AccessTokensResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAccessTokensResponse])
                res.get_access_tokens_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueError])
                res.value_error = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v2_access_tokens_uuid_(self, request: operations.GetV2AccessTokensUUIDRequest) -> operations.GetV2AccessTokensUUIDResponse:
        r"""Get a personal access token
        Returns a personal access token by UUID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2AccessTokensUUIDRequest, base_url, '/v2/access-tokens/{uuid}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2AccessTokensUUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetV2AccessTokensUUID200ApplicationJSON])
                res.get_v2_access_tokens_uuid_200_application_json_object = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_v2_access_tokens_uuid_(self, request: operations.PatchV2AccessTokensUUIDRequest) -> operations.PatchV2AccessTokensUUIDResponse:
        r"""Update a personal access token
        Updates a personal access token partially. You can either update the
        token's label or enable/disable it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchV2AccessTokensUUIDRequest, base_url, '/v2/access-tokens/{uuid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_access_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchV2AccessTokensUUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchAccessTokenResponse])
                res.patch_access_token_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueError])
                res.value_error = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_v2_access_tokens(self, request: shared.CreateAccessTokenRequest) -> operations.PostV2AccessTokensResponse:
        r"""Create a personal access token
        Creates and returns a personal access token.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/access-tokens'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2AccessTokensResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateAccessTokensResponse])
                res.create_access_tokens_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValueError])
                res.value_error = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    