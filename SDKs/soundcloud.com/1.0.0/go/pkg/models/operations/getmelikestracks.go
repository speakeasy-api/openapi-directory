// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetMeLikesTracksSecurity struct {
	AuthHeader shared.SchemeAuthHeader `security:"scheme,type=apiKey,subtype=header"`
}

type GetMeLikesTracksQueryParams struct {
	// Number of results to return in the collection.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
	LinkedPartitioning *bool `queryParam:"style=form,explode=true,name=linked_partitioning"`
}

type GetMeLikesTracksRequest struct {
	QueryParams GetMeLikesTracksQueryParams
	Security    GetMeLikesTracksSecurity
}

type GetMeLikesTracks200ApplicationJSONType string

const (
	GetMeLikesTracks200ApplicationJSONTypeTracks       GetMeLikesTracks200ApplicationJSONType = "Tracks"
	GetMeLikesTracks200ApplicationJSONTypeArrayOfTrack GetMeLikesTracks200ApplicationJSONType = "arrayOfTrack"
)

type GetMeLikesTracks200ApplicationJSON struct {
	Tracks       *shared.Tracks
	ArrayOfTrack []shared.Track

	Type GetMeLikesTracks200ApplicationJSONType
}

func CreateGetMeLikesTracks200ApplicationJSONTracks(tracks shared.Tracks) GetMeLikesTracks200ApplicationJSON {
	typ := GetMeLikesTracks200ApplicationJSONTypeTracks

	return GetMeLikesTracks200ApplicationJSON{
		Tracks: &tracks,
		Type:   typ,
	}
}

func CreateGetMeLikesTracks200ApplicationJSONArrayOfTrack(arrayOfTrack []shared.Track) GetMeLikesTracks200ApplicationJSON {
	typ := GetMeLikesTracks200ApplicationJSONTypeArrayOfTrack

	return GetMeLikesTracks200ApplicationJSON{
		ArrayOfTrack: arrayOfTrack,
		Type:         typ,
	}
}

func (u *GetMeLikesTracks200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	tracks := new(shared.Tracks)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&tracks); err == nil {
		u.Tracks = tracks
		u.Type = GetMeLikesTracks200ApplicationJSONTypeTracks
		return nil
	}

	arrayOfTrack := []shared.Track{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfTrack); err == nil {
		u.ArrayOfTrack = arrayOfTrack
		u.Type = GetMeLikesTracks200ApplicationJSONTypeArrayOfTrack
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetMeLikesTracks200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Tracks != nil {
		return json.Marshal(u.Tracks)
	}

	if u.ArrayOfTrack != nil {
		return json.Marshal(u.ArrayOfTrack)
	}

	return nil, nil
}

type GetMeLikesTracksResponse struct {
	ContentType string
	// Unauthorized
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetMeLikesTracks200ApplicationJSONOneOf *GetMeLikesTracks200ApplicationJSON
}
