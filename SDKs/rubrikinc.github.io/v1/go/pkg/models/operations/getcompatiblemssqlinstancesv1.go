// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// GetCompatibleMssqlInstancesV1RecoveryTypeEnum - Recovery type.
type GetCompatibleMssqlInstancesV1RecoveryTypeEnum string

const (
	GetCompatibleMssqlInstancesV1RecoveryTypeEnumMount   GetCompatibleMssqlInstancesV1RecoveryTypeEnum = "Mount"
	GetCompatibleMssqlInstancesV1RecoveryTypeEnumExport  GetCompatibleMssqlInstancesV1RecoveryTypeEnum = "Export"
	GetCompatibleMssqlInstancesV1RecoveryTypeEnumRestore GetCompatibleMssqlInstancesV1RecoveryTypeEnum = "Restore"
)

func (e GetCompatibleMssqlInstancesV1RecoveryTypeEnum) ToPointer() *GetCompatibleMssqlInstancesV1RecoveryTypeEnum {
	return &e
}

func (e *GetCompatibleMssqlInstancesV1RecoveryTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mount":
		fallthrough
	case "Export":
		fallthrough
	case "Restore":
		*e = GetCompatibleMssqlInstancesV1RecoveryTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCompatibleMssqlInstancesV1RecoveryTypeEnum: %v", v)
	}
}

type GetCompatibleMssqlInstancesV1Request struct {
	// ID of the Microsoft SQL database.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Time, in ISO8601 format, to recover to. For example "2016-01-01T01:23:45.678Z". If this is not specified, the latest recoverable time is used.
	RecoveryTime *time.Time `queryParam:"style=form,explode=true,name=recovery_time"`
	// Recovery type.
	RecoveryType GetCompatibleMssqlInstancesV1RecoveryTypeEnum `queryParam:"style=form,explode=true,name=recovery_type"`
}

type GetCompatibleMssqlInstancesV1Response struct {
	ContentType string
	// Returns summary information for all compatible Microsoft SQL instances for export.
	MssqlInstanceSummaryListResponse *shared.MssqlInstanceSummaryListResponse
	StatusCode                       int
	RawResponse                      *http.Response
}
