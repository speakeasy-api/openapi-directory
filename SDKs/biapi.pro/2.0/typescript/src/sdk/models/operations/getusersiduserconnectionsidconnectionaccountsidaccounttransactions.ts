/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetUsersIdUserConnectionsIdConnectionAccountsIdAccountTransactionsRequest extends SpeakeasyBase {
  /**
   * display all transactions, including deleted ones
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=all" })
  all?: boolean;

  /**
   * display only deleted transactions
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=deleted",
  })
  deleted?: boolean;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=expand",
  })
  expand?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=id_account",
  })
  idAccount: number;

  /**
   * filter on given category id(s) (comma separated) or "null"
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=id_category",
  })
  idCategory?: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=id_connection",
  })
  idConnection: number;

  /**
   * Hint: you can use 'me' or 'all'
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=id_user",
  })
  idUser: string;

  /**
   * filter on income or expenditures
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=income",
  })
  income?: boolean;

  /**
   * get only transactions updated after the specified datetime
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=last_update;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  lastUpdate?: Date;

  /**
   * limit number of results
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * maximum (inclusive) date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxDate?: Date;

  /**
   * maximum (inclusive) value
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_value",
  })
  maxValue?: number;

  /**
   * minimal (inclusive) date
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_date;dateTimeFormat=YYYY-MM-DD",
  })
  minDate?: Date;

  /**
   * minimal (inclusive) value
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_value",
  })
  minValue?: number;

  /**
   * offset of first result
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * search in labels, dates, values and categories
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search",
  })
  search?: string;

  /**
   * "XX|-XX" or "Â±XX"
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=value" })
  value?: string;

  /**
   * filter transactions containing the given string
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=wording",
  })
  wording?: string;
}

/**
 * transactions
 */
export class GetUsersIdUserConnectionsIdConnectionAccountsIdAccountTransactions200ApplicationJSON extends SpeakeasyBase {
  /**
   * total number of results
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;

  @SpeakeasyMetadata({ elemType: shared.Transaction })
  @Expose({ name: "transactions" })
  @Type(() => shared.Transaction)
  transactions: shared.Transaction[];
}

export class GetUsersIdUserConnectionsIdConnectionAccountsIdAccountTransactionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * transactions
   */
  @SpeakeasyMetadata()
  getUsersIdUserConnectionsIdConnectionAccountsIdAccountTransactions200ApplicationJSONObject?: GetUsersIdUserConnectionsIdConnectionAccountsIdAccountTransactions200ApplicationJSON;
}
