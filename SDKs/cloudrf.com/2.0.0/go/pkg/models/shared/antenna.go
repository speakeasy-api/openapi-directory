// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AntennaPolEnum - Antenna polarization as either h or v
type AntennaPolEnum string

const (
	AntennaPolEnumH AntennaPolEnum = "h"
	AntennaPolEnumV AntennaPolEnum = "v"
)

func (e *AntennaPolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "h":
		fallthrough
	case "v":
		*e = AntennaPolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AntennaPolEnum: %s", s)
	}
}

type Antenna struct {
	// Antenna pattern code. 1=Vertical dipole (Omni-directional)
	Ant *int `json:"ant,omitempty"`
	// Antenna azimuth in degrees north
	Azi *int `json:"azi,omitempty"`
	// Custom antenna horizontal beamwidth in degrees. For use only with ant=0
	Hbw *int `json:"hbw,omitempty"`
	// Antenna polarization as either h or v
	Pol *AntennaPolEnum `json:"pol,omitempty"`
	// Antenna tilt in degrees below the horizon (inverted)
	Tlt *float32 `json:"tlt,omitempty"`
	// Transmitter antenna gain in dBi
	Txg *float32 `json:"txg,omitempty"`
	// Feeder loss in dB
	Txl *float32 `json:"txl,omitempty"`
	// Custom antenna vertical beamwidth in degrees. For use only with ant=0
	Vbw *int `json:"vbw,omitempty"`
}
