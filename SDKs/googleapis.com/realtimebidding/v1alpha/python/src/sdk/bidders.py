"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Bidders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def realtimebidding_bidders_bidding_functions_activate(self, request: operations.RealtimebiddingBiddersBiddingFunctionsActivateRequest, security: operations.RealtimebiddingBiddersBiddingFunctionsActivateSecurity) -> operations.RealtimebiddingBiddersBiddingFunctionsActivateResponse:
        r"""Activates an existing bidding function. An activated function is available for invocation for the server-side TURTLEDOVE simulations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RealtimebiddingBiddersBiddingFunctionsActivateRequest, base_url, '/v1alpha/{name}:activate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RealtimebiddingBiddersBiddingFunctionsActivateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RealtimebiddingBiddersBiddingFunctionsActivateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BiddingFunction])
                res.bidding_function = out

        return res

    def realtimebidding_bidders_bidding_functions_archive(self, request: operations.RealtimebiddingBiddersBiddingFunctionsArchiveRequest, security: operations.RealtimebiddingBiddersBiddingFunctionsArchiveSecurity) -> operations.RealtimebiddingBiddersBiddingFunctionsArchiveResponse:
        r"""Archives an existing bidding function. An archived function will not be available for function invocation for the server-side TURTLEDOVE simulations unless it is activated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RealtimebiddingBiddersBiddingFunctionsArchiveRequest, base_url, '/v1alpha/{name}:archive', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RealtimebiddingBiddersBiddingFunctionsArchiveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RealtimebiddingBiddersBiddingFunctionsArchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BiddingFunction])
                res.bidding_function = out

        return res

    def realtimebidding_bidders_bidding_functions_create(self, request: operations.RealtimebiddingBiddersBiddingFunctionsCreateRequest, security: operations.RealtimebiddingBiddersBiddingFunctionsCreateSecurity) -> operations.RealtimebiddingBiddersBiddingFunctionsCreateResponse:
        r"""Creates a new bidding function."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RealtimebiddingBiddersBiddingFunctionsCreateRequest, base_url, '/v1alpha/{parent}/biddingFunctions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bidding_function_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RealtimebiddingBiddersBiddingFunctionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RealtimebiddingBiddersBiddingFunctionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BiddingFunction])
                res.bidding_function = out

        return res

    def realtimebidding_bidders_bidding_functions_list(self, request: operations.RealtimebiddingBiddersBiddingFunctionsListRequest, security: operations.RealtimebiddingBiddersBiddingFunctionsListSecurity) -> operations.RealtimebiddingBiddersBiddingFunctionsListResponse:
        r"""Lists the bidding functions that a bidder currently has registered."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RealtimebiddingBiddersBiddingFunctionsListRequest, base_url, '/v1alpha/{parent}/biddingFunctions', request)
        
        query_params = utils.get_query_params(operations.RealtimebiddingBiddersBiddingFunctionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RealtimebiddingBiddersBiddingFunctionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBiddingFunctionsResponse])
                res.list_bidding_functions_response = out

        return res

    