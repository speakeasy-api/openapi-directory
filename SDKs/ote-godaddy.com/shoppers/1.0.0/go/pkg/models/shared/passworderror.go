// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PasswordErrorCodeEnum - Short identifier for the error, suitable for indicating the specific error within client code
type PasswordErrorCodeEnum string

const (
	PasswordErrorCodeEnumPwBlackList    PasswordErrorCodeEnum = "PW_BLACK_LIST"
	PasswordErrorCodeEnumPwTooShort     PasswordErrorCodeEnum = "PW_TOO_SHORT"
	PasswordErrorCodeEnumPwTooLong      PasswordErrorCodeEnum = "PW_TOO_LONG"
	PasswordErrorCodeEnumPwMissingUc    PasswordErrorCodeEnum = "PW_MISSING_UC"
	PasswordErrorCodeEnumPwMissingNum   PasswordErrorCodeEnum = "PW_MISSING_NUM"
	PasswordErrorCodeEnumPwRecentlyUsed PasswordErrorCodeEnum = "PW_RECENTLY_USED"
	PasswordErrorCodeEnumPwNotUnique    PasswordErrorCodeEnum = "PW_NOT_UNIQUE"
)

func (e *PasswordErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PW_BLACK_LIST":
		fallthrough
	case "PW_TOO_SHORT":
		fallthrough
	case "PW_TOO_LONG":
		fallthrough
	case "PW_MISSING_UC":
		fallthrough
	case "PW_MISSING_NUM":
		fallthrough
	case "PW_RECENTLY_USED":
		fallthrough
	case "PW_NOT_UNIQUE":
		*e = PasswordErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordErrorCodeEnum: %s", s)
	}
}

// PasswordError - Request was not successful
type PasswordError struct {
	// Short identifier for the error, suitable for indicating the specific error within client code
	Code *PasswordErrorCodeEnum `json:"code,omitempty"`
	// Human-readable, English description of the error
	Message *string `json:"message,omitempty"`
	// Response type, always 'error'
	Type *string `json:"type,omitempty"`
}
