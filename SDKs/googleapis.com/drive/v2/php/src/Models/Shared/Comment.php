<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Comment - A comment on a file in Google Drive.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Comment
{
    /**
     * A region of the document represented as a JSON string. For details on defining anchor properties, refer to  Add comments and replies.
     * 
     * @var ?string $anchor
     */
	#[\JMS\Serializer\Annotation\SerializedName('anchor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $anchor = null;
    
    /**
     * Information about a Drive user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\User $author
     */
	#[\JMS\Serializer\Annotation\SerializedName('author')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\User')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?User $author = null;
    
    /**
     * The ID of the comment.
     * 
     * @var ?string $commentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('commentId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $commentId = null;
    
    /**
     * The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.
     * 
     * @var ?string $content
     */
	#[\JMS\Serializer\Annotation\SerializedName('content')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $content = null;
    
    /**
     * The context of the file which is being commented on.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CommentContext $context
     */
	#[\JMS\Serializer\Annotation\SerializedName('context')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CommentContext')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CommentContext $context = null;
    
    /**
     * The date when this comment was first created.
     * 
     * @var ?\DateTime $createdDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('createdDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $createdDate = null;
    
    /**
     * Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.
     * 
     * @var ?bool $deleted
     */
	#[\JMS\Serializer\Annotation\SerializedName('deleted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $deleted = null;
    
    /**
     * The file which this comment is addressing.
     * 
     * @var ?string $fileId
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fileId = null;
    
    /**
     * The title of the file which this comment is addressing.
     * 
     * @var ?string $fileTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileTitle')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fileTitle = null;
    
    /**
     * HTML formatted content for this comment.
     * 
     * @var ?string $htmlContent
     */
	#[\JMS\Serializer\Annotation\SerializedName('htmlContent')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $htmlContent = null;
    
    /**
     * This is always drive#comment.
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * The date when this comment or any of its replies were last modified.
     * 
     * @var ?\DateTime $modifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiedDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $modifiedDate = null;
    
    /**
     * Replies to this post.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\CommentReply> $replies
     */
	#[\JMS\Serializer\Annotation\SerializedName('replies')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\CommentReply>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $replies = null;
    
    /**
     * A link back to this comment.
     * 
     * @var ?string $selfLink
     */
	#[\JMS\Serializer\Annotation\SerializedName('selfLink')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $selfLink = null;
    
    /**
     * The status of this comment. Status can be changed by posting a reply to a comment with the desired status.  
     * 
     * - "open" - The comment is still open. 
     * - "resolved" - The comment has been resolved by one of its replies.
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
	public function __construct()
	{
		$this->anchor = null;
		$this->author = null;
		$this->commentId = null;
		$this->content = null;
		$this->context = null;
		$this->createdDate = null;
		$this->deleted = null;
		$this->fileId = null;
		$this->fileTitle = null;
		$this->htmlContent = null;
		$this->kind = null;
		$this->modifiedDate = null;
		$this->replies = null;
		$this->selfLink = null;
		$this->status = null;
	}
}
