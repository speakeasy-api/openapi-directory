"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MySQLReplicaConfiguration:
    r"""Read-replica configuration specific to MySQL databases."""
    
    ca_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caCertificate'), 'exclude': lambda f: f is None }})
    r"""PEM representation of the trusted CA's x509 certificate."""  
    client_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertificate'), 'exclude': lambda f: f is None }})
    r"""PEM representation of the replica's x509 certificate."""  
    client_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientKey'), 'exclude': lambda f: f is None }})
    r"""PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate."""  
    connect_retry_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectRetryInterval'), 'exclude': lambda f: f is None }})
    r"""Seconds to wait between connect retries. MySQL's default is 60 seconds."""  
    dump_file_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dumpFilePath'), 'exclude': lambda f: f is None }})
    r"""Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always `sql#mysqlReplicaConfiguration`."""  
    master_heartbeat_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('masterHeartbeatPeriod'), 'exclude': lambda f: f is None }})
    r"""Interval in milliseconds between replication heartbeats."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The password for the replication connection."""  
    ssl_cipher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslCipher'), 'exclude': lambda f: f is None }})
    r"""A list of permissible ciphers to use for SSL encryption."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""The username for the replication connection."""  
    verify_server_certificate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyServerCertificate'), 'exclude': lambda f: f is None }})
    r"""Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake."""  
    