"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum(str, Enum):
    r"""IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'."""
    ANY = 'any'
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'

class UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum(str, Enum):
    r"""'allow' or 'deny' traffic specified by this rule."""
    ALLOW = 'allow'
    DENY = 'deny'

class UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum(str, Enum):
    r"""The type of protocol (must be 'tcp', 'udp', or 'any')."""
    ANY = 'any'
    TCP = 'tcp'
    UDP = 'udp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchAccessControlListsRequestBodyRules:
    
    dst_cidr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstCidr') }})
    r"""Destination IP address (in IP or CIDR notation) or 'any'."""  
    policy: UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy') }})
    r"""'allow' or 'deny' traffic specified by this rule."""  
    protocol: UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""The type of protocol (must be 'tcp', 'udp', or 'any')."""  
    src_cidr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcCidr') }})
    r"""Source IP address (in IP or CIDR notation) or 'any'."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Description of the rule (optional)."""  
    dst_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstPort'), 'exclude': lambda f: f is None }})
    r"""Destination port. Must be in the range of 1-65535 or 'any'. Default is 'any'."""  
    ip_version: Optional[UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipVersion'), 'exclude': lambda f: f is None }})
    r"""IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'."""  
    src_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPort'), 'exclude': lambda f: f is None }})
    r"""Source port. Must be in the range  of 1-65535 or 'any'. Default is 'any'."""  
    vlan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""Incoming traffic VLAN. Must be in the range of 1-4095 or 'any'. Default is 'any'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchAccessControlListsRequestBody:
    
    rules: list[UpdateNetworkSwitchAccessControlListsRequestBodyRules] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules') }})
    r"""An ordered array of the access control list rules (not including the default rule). An empty array will clear the rules."""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchAccessControlListsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateNetworkSwitchAccessControlListsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    
class UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum(str, Enum):
    r"""IP address version"""
    ANY = 'any'
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'

class UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum(str, Enum):
    r"""'allow' or 'deny' traffic specified by this rule"""
    ALLOW = 'allow'
    DENY = 'deny'

class UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum(str, Enum):
    r"""The type of protocol"""
    ANY = 'any'
    TCP = 'tcp'
    UDP = 'udp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchAccessControlLists200ApplicationJSONRules:
    
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Description of the rule (optional)"""  
    dst_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstCidr'), 'exclude': lambda f: f is None }})
    r"""Destination IP address (in IP or CIDR notation)"""  
    dst_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstPort'), 'exclude': lambda f: f is None }})
    r"""Destination port"""  
    ip_version: Optional[UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipVersion'), 'exclude': lambda f: f is None }})
    r"""IP address version"""  
    policy: Optional[UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""'allow' or 'deny' traffic specified by this rule"""  
    protocol: Optional[UpdateNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""The type of protocol"""  
    src_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcCidr'), 'exclude': lambda f: f is None }})
    r"""Source IP address (in IP or CIDR notation)"""  
    src_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPort'), 'exclude': lambda f: f is None }})
    r"""Source port"""  
    vlan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""ncoming traffic VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchAccessControlLists200ApplicationJSON:
    r"""Successful operation"""
    
    rules: Optional[list[UpdateNetworkSwitchAccessControlLists200ApplicationJSONRules]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""An ordered array of the access control list rules"""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchAccessControlListsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_access_control_lists_200_application_json_object: Optional[UpdateNetworkSwitchAccessControlLists200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    