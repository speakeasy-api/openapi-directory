// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetMetadataOfAllChannelsByEnum - optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)
type GetMetadataOfAllChannelsByEnum string

const (
	GetMetadataOfAllChannelsByEnumValue GetMetadataOfAllChannelsByEnum = "value"
	GetMetadataOfAllChannelsByEnumID    GetMetadataOfAllChannelsByEnum = "id"
)

func (e GetMetadataOfAllChannelsByEnum) ToPointer() *GetMetadataOfAllChannelsByEnum {
	return &e
}

func (e *GetMetadataOfAllChannelsByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "value":
		fallthrough
	case "id":
		*e = GetMetadataOfAllChannelsByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMetadataOfAllChannelsByEnum: %v", v)
	}
}

type GetMetadataOfAllChannelsRequest struct {
	// The version of the API you wish to use.
	XAblyVersion *string `header:"style=simple,explode=false,name=X-Ably-Version"`
	// optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)
	By *GetMetadataOfAllChannelsByEnum `queryParam:"style=form,explode=true,name=by"`
	// The response format you would like
	Format *shared.ResponseFormatEnum `queryParam:"style=form,explode=true,name=format"`
	Limit  *int64                     `queryParam:"style=form,explode=true,name=limit"`
	// Optionally limits the query to only those channels whose name starts with the given prefix
	Prefix *string `queryParam:"style=form,explode=true,name=prefix"`
}

type GetMetadataOfAllChannels2XXApplicationXMsgpackType string

const (
	GetMetadataOfAllChannels2XXApplicationXMsgpackTypeArrayOfChannelDetails GetMetadataOfAllChannels2XXApplicationXMsgpackType = "arrayOfChannelDetails"
	GetMetadataOfAllChannels2XXApplicationXMsgpackTypeArrayOfstr            GetMetadataOfAllChannels2XXApplicationXMsgpackType = "arrayOfstr"
)

type GetMetadataOfAllChannels2XXApplicationXMsgpack struct {
	ArrayOfChannelDetails []shared.ChannelDetails
	ArrayOfstr            []string

	Type GetMetadataOfAllChannels2XXApplicationXMsgpackType
}

func CreateGetMetadataOfAllChannels2XXApplicationXMsgpackArrayOfChannelDetails(arrayOfChannelDetails []shared.ChannelDetails) GetMetadataOfAllChannels2XXApplicationXMsgpack {
	typ := GetMetadataOfAllChannels2XXApplicationXMsgpackTypeArrayOfChannelDetails

	return GetMetadataOfAllChannels2XXApplicationXMsgpack{
		ArrayOfChannelDetails: arrayOfChannelDetails,
		Type:                  typ,
	}
}

func CreateGetMetadataOfAllChannels2XXApplicationXMsgpackArrayOfstr(arrayOfstr []string) GetMetadataOfAllChannels2XXApplicationXMsgpack {
	typ := GetMetadataOfAllChannels2XXApplicationXMsgpackTypeArrayOfstr

	return GetMetadataOfAllChannels2XXApplicationXMsgpack{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetMetadataOfAllChannels2XXApplicationXMsgpack) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfChannelDetails := []shared.ChannelDetails{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfChannelDetails); err == nil {
		u.ArrayOfChannelDetails = arrayOfChannelDetails
		u.Type = GetMetadataOfAllChannels2XXApplicationXMsgpackTypeArrayOfChannelDetails
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetMetadataOfAllChannels2XXApplicationXMsgpackTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetMetadataOfAllChannels2XXApplicationXMsgpack) MarshalJSON() ([]byte, error) {
	if u.ArrayOfChannelDetails != nil {
		return json.Marshal(u.ArrayOfChannelDetails)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetMetadataOfAllChannels2XXApplicationJSONType string

const (
	GetMetadataOfAllChannels2XXApplicationJSONTypeArrayOfChannelDetails GetMetadataOfAllChannels2XXApplicationJSONType = "arrayOfChannelDetails"
	GetMetadataOfAllChannels2XXApplicationJSONTypeArrayOfstr            GetMetadataOfAllChannels2XXApplicationJSONType = "arrayOfstr"
)

type GetMetadataOfAllChannels2XXApplicationJSON struct {
	ArrayOfChannelDetails []shared.ChannelDetails
	ArrayOfstr            []string

	Type GetMetadataOfAllChannels2XXApplicationJSONType
}

func CreateGetMetadataOfAllChannels2XXApplicationJSONArrayOfChannelDetails(arrayOfChannelDetails []shared.ChannelDetails) GetMetadataOfAllChannels2XXApplicationJSON {
	typ := GetMetadataOfAllChannels2XXApplicationJSONTypeArrayOfChannelDetails

	return GetMetadataOfAllChannels2XXApplicationJSON{
		ArrayOfChannelDetails: arrayOfChannelDetails,
		Type:                  typ,
	}
}

func CreateGetMetadataOfAllChannels2XXApplicationJSONArrayOfstr(arrayOfstr []string) GetMetadataOfAllChannels2XXApplicationJSON {
	typ := GetMetadataOfAllChannels2XXApplicationJSONTypeArrayOfstr

	return GetMetadataOfAllChannels2XXApplicationJSON{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetMetadataOfAllChannels2XXApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfChannelDetails := []shared.ChannelDetails{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfChannelDetails); err == nil {
		u.ArrayOfChannelDetails = arrayOfChannelDetails
		u.Type = GetMetadataOfAllChannels2XXApplicationJSONTypeArrayOfChannelDetails
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetMetadataOfAllChannels2XXApplicationJSONTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetMetadataOfAllChannels2XXApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ArrayOfChannelDetails != nil {
		return json.Marshal(u.ArrayOfChannelDetails)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetMetadataOfAllChannelsResponse struct {
	Body        []byte
	ContentType string
	// Error
	Error       *shared.Error
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// OK
	GetMetadataOfAllChannels2XXApplicationJSONOneOf *GetMetadataOfAllChannels2XXApplicationJSON
	// OK
	GetMetadataOfAllChannels2XXTextHTMLString *string
}
