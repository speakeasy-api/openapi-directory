"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import partlistelement as shared_partlistelement
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPartsOutput:
    r"""Contains the Amazon S3 Glacier response to your request."""
    
    archive_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchiveDescription'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'exclude': lambda f: f is None }})  
    marker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Marker'), 'exclude': lambda f: f is None }})  
    multipart_upload_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultipartUploadId'), 'exclude': lambda f: f is None }})  
    parts: Optional[list[shared_partlistelement.PartListElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parts'), 'exclude': lambda f: f is None }})  
    part_size_in_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartSizeInBytes'), 'exclude': lambda f: f is None }})  
    vault_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VaultARN'), 'exclude': lambda f: f is None }})  
    