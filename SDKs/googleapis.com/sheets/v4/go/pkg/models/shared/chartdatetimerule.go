// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChartDateTimeRuleTypeEnum - The type of date-time grouping to apply.
type ChartDateTimeRuleTypeEnum string

const (
	ChartDateTimeRuleTypeEnumChartDateTimeRuleTypeUnspecified ChartDateTimeRuleTypeEnum = "CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED"
	ChartDateTimeRuleTypeEnumSecond                           ChartDateTimeRuleTypeEnum = "SECOND"
	ChartDateTimeRuleTypeEnumMinute                           ChartDateTimeRuleTypeEnum = "MINUTE"
	ChartDateTimeRuleTypeEnumHour                             ChartDateTimeRuleTypeEnum = "HOUR"
	ChartDateTimeRuleTypeEnumHourMinute                       ChartDateTimeRuleTypeEnum = "HOUR_MINUTE"
	ChartDateTimeRuleTypeEnumHourMinuteAmpm                   ChartDateTimeRuleTypeEnum = "HOUR_MINUTE_AMPM"
	ChartDateTimeRuleTypeEnumDayOfWeek                        ChartDateTimeRuleTypeEnum = "DAY_OF_WEEK"
	ChartDateTimeRuleTypeEnumDayOfYear                        ChartDateTimeRuleTypeEnum = "DAY_OF_YEAR"
	ChartDateTimeRuleTypeEnumDayOfMonth                       ChartDateTimeRuleTypeEnum = "DAY_OF_MONTH"
	ChartDateTimeRuleTypeEnumDayMonth                         ChartDateTimeRuleTypeEnum = "DAY_MONTH"
	ChartDateTimeRuleTypeEnumMonth                            ChartDateTimeRuleTypeEnum = "MONTH"
	ChartDateTimeRuleTypeEnumQuarter                          ChartDateTimeRuleTypeEnum = "QUARTER"
	ChartDateTimeRuleTypeEnumYear                             ChartDateTimeRuleTypeEnum = "YEAR"
	ChartDateTimeRuleTypeEnumYearMonth                        ChartDateTimeRuleTypeEnum = "YEAR_MONTH"
	ChartDateTimeRuleTypeEnumYearQuarter                      ChartDateTimeRuleTypeEnum = "YEAR_QUARTER"
	ChartDateTimeRuleTypeEnumYearMonthDay                     ChartDateTimeRuleTypeEnum = "YEAR_MONTH_DAY"
)

func (e *ChartDateTimeRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED":
		fallthrough
	case "SECOND":
		fallthrough
	case "MINUTE":
		fallthrough
	case "HOUR":
		fallthrough
	case "HOUR_MINUTE":
		fallthrough
	case "HOUR_MINUTE_AMPM":
		fallthrough
	case "DAY_OF_WEEK":
		fallthrough
	case "DAY_OF_YEAR":
		fallthrough
	case "DAY_OF_MONTH":
		fallthrough
	case "DAY_MONTH":
		fallthrough
	case "MONTH":
		fallthrough
	case "QUARTER":
		fallthrough
	case "YEAR":
		fallthrough
	case "YEAR_MONTH":
		fallthrough
	case "YEAR_QUARTER":
		fallthrough
	case "YEAR_MONTH_DAY":
		*e = ChartDateTimeRuleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChartDateTimeRuleTypeEnum: %s", s)
	}
}

// ChartDateTimeRule - Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values.
type ChartDateTimeRule struct {
	// The type of date-time grouping to apply.
	Type *ChartDateTimeRuleTypeEnum `json:"type,omitempty"`
}
