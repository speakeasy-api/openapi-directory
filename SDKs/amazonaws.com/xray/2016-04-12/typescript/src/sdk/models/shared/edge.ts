/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Alias } from "./alias";
import { EdgeStatistics } from "./edgestatistics";
import { HistogramEntry } from "./histogramentry";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about a connection between two services. An edge can be a synchronous connection, such as typical call between client and service, or an asynchronous link, such as a Lambda function which retrieves an event from an SNS queue.
 */
export class Edge extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Alias })
  @Expose({ name: "Aliases" })
  @Type(() => Alias)
  aliases?: Alias[];

  @SpeakeasyMetadata()
  @Expose({ name: "EdgeType" })
  edgeType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata({ elemType: HistogramEntry })
  @Expose({ name: "ReceivedEventAgeHistogram" })
  @Type(() => HistogramEntry)
  receivedEventAgeHistogram?: HistogramEntry[];

  @SpeakeasyMetadata()
  @Expose({ name: "ReferenceId" })
  referenceId?: number;

  @SpeakeasyMetadata({ elemType: HistogramEntry })
  @Expose({ name: "ResponseTimeHistogram" })
  @Type(() => HistogramEntry)
  responseTimeHistogram?: HistogramEntry[];

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "SummaryStatistics" })
  @Type(() => EdgeStatistics)
  summaryStatistics?: EdgeStatistics;
}
