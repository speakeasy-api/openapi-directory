// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetScoreRevisionDataSecurity struct {
	OAuth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetScoreRevisionDataFormatEnum - The format of the file you will retrieve
type GetScoreRevisionDataFormatEnum string

const (
	GetScoreRevisionDataFormatEnumJSON                  GetScoreRevisionDataFormatEnum = "json"
	GetScoreRevisionDataFormatEnumMxl                   GetScoreRevisionDataFormatEnum = "mxl"
	GetScoreRevisionDataFormatEnumXML                   GetScoreRevisionDataFormatEnum = "xml"
	GetScoreRevisionDataFormatEnumMp3                   GetScoreRevisionDataFormatEnum = "mp3"
	GetScoreRevisionDataFormatEnumWav                   GetScoreRevisionDataFormatEnum = "wav"
	GetScoreRevisionDataFormatEnumMidi                  GetScoreRevisionDataFormatEnum = "midi"
	GetScoreRevisionDataFormatEnumThumbnailPng          GetScoreRevisionDataFormatEnum = "thumbnail.png"
	GetScoreRevisionDataFormatEnumSynchronizationPoints GetScoreRevisionDataFormatEnum = "synchronizationPoints"
)

func (e GetScoreRevisionDataFormatEnum) ToPointer() *GetScoreRevisionDataFormatEnum {
	return &e
}

func (e *GetScoreRevisionDataFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "mxl":
		fallthrough
	case "xml":
		fallthrough
	case "mp3":
		fallthrough
	case "wav":
		fallthrough
	case "midi":
		fallthrough
	case "thumbnail.png":
		fallthrough
	case "synchronizationPoints":
		*e = GetScoreRevisionDataFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScoreRevisionDataFormatEnum: %v", v)
	}
}

type GetScoreRevisionDataRequest struct {
	// The format of the file you will retrieve
	Format GetScoreRevisionDataFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// Only return files already generated and cached in Flat's production
	// cache. If the file is not availabe, a 404 will be returned
	//
	OnlyCached *bool `queryParam:"style=form,explode=true,name=onlyCached"`
	// An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids
	// separated by commas. For example "59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87".
	//
	Parts *string `queryParam:"style=form,explode=true,name=parts"`
	// Unique identifier of a score revision. You can use `last` to fetch the information related to the last version created.
	//
	Revision string `pathParam:"style=simple,explode=false,name=revision"`
	// Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`).
	//
	Score string `pathParam:"style=simple,explode=false,name=score"`
	// This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
	//
	SharingKey *string `queryParam:"style=form,explode=true,name=sharingKey"`
	// Returns a json with the `url` in it instead of redirecting
	//
	URL *bool `queryParam:"style=form,explode=true,name=url"`
}

type GetScoreRevisionDataResponse struct {
	ContentType string
	// Account overquota
	FlatErrorResponse *shared.FlatErrorResponse
	StatusCode        int
	RawResponse       *http.Response
	// Revision data
	GetScoreRevisionData200ApplicationJSONBinaryString []byte
	// Revision data
	GetScoreRevisionData200ApplicationVndRecordareMusicxmlPlusXMLBinaryString []byte
	// Revision data
	GetScoreRevisionData200ApplicationVndRecordareMusicxmlBinaryString []byte
	// Revision data
	GetScoreRevisionData200AudioMidiBinaryString []byte
	// Revision data
	GetScoreRevisionData200AudioMp3BinaryString []byte
	// Revision data
	GetScoreRevisionData200AudioWavBinaryString []byte
	// Revision data
	GetScoreRevisionData200ImagePngBinaryString []byte
}
