<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AnalyticsRules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Rule creation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRuleResponse
     */
	public function createRule(
        \OpenAPI\OpenAPI\Models\Operations\CreateRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules', \OpenAPI\OpenAPI\Models\Operations\CreateRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createRuleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRuleResponse
     */
	public function deleteRule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableRuleResponse
     */
	public function disableRule(
        \OpenAPI\OpenAPI\Models\Operations\DisableRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableRuleResponse
     */
	public function enableRule(
        \OpenAPI\OpenAPI\Models\Operations\EnableRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRuleResponse
     */
	public function getRule(
        \OpenAPI\OpenAPI\Models\Operations\GetRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\GetRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Rule', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the list of rules for a given store
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRulesResponse
     */
	public function getRules(
        \OpenAPI\OpenAPI\Models\Operations\GetRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules', \OpenAPI\OpenAPI\Models\Operations\GetRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RuleList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the rules execution history
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRulesExecutionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRulesExecutionsResponse
     */
	public function getRulesExecutions(
        \OpenAPI\OpenAPI\Models\Operations\GetRulesExecutionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRulesExecutionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/executions', \OpenAPI\OpenAPI\Models\Operations\GetRulesExecutionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRulesExecutionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRulesExecutionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleExecutionReportings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RuleExecutionReportings', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move the rule down
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveDownRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveDownRuleResponse
     */
	public function moveDownRule(
        \OpenAPI\OpenAPI\Models\Operations\MoveDownRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveDownRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}/movedown', \OpenAPI\OpenAPI\Models\Operations\MoveDownRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveDownRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move the rule up
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveUpRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveUpRuleResponse
     */
	public function moveUpRule(
        \OpenAPI\OpenAPI\Models\Operations\MoveUpRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveUpRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}/moveup', \OpenAPI\OpenAPI\Models\Operations\MoveUpRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveUpRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RunRuleResponse
     */
	public function runRule(
        \OpenAPI\OpenAPI\Models\Operations\RunRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RunRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}/run', \OpenAPI\OpenAPI\Models\Operations\RunRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run all rules for this store
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RunRulesResponse
     */
	public function runRules(
        \OpenAPI\OpenAPI\Models\Operations\RunRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RunRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/run', \OpenAPI\OpenAPI\Models\Operations\RunRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRuleResponse
     */
	public function updateRule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/rules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateRuleRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}