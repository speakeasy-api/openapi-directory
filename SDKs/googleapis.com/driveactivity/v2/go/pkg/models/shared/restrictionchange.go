// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RestrictionChangeFeatureEnum - The feature which had a change in restriction policy.
type RestrictionChangeFeatureEnum string

const (
	RestrictionChangeFeatureEnumFeatureUnspecified           RestrictionChangeFeatureEnum = "FEATURE_UNSPECIFIED"
	RestrictionChangeFeatureEnumSharingOutsideDomain         RestrictionChangeFeatureEnum = "SHARING_OUTSIDE_DOMAIN"
	RestrictionChangeFeatureEnumDirectSharing                RestrictionChangeFeatureEnum = "DIRECT_SHARING"
	RestrictionChangeFeatureEnumItemDuplication              RestrictionChangeFeatureEnum = "ITEM_DUPLICATION"
	RestrictionChangeFeatureEnumDriveFileStream              RestrictionChangeFeatureEnum = "DRIVE_FILE_STREAM"
	RestrictionChangeFeatureEnumFileOrganizerCanShareFolders RestrictionChangeFeatureEnum = "FILE_ORGANIZER_CAN_SHARE_FOLDERS"
)

func (e *RestrictionChangeFeatureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FEATURE_UNSPECIFIED":
		fallthrough
	case "SHARING_OUTSIDE_DOMAIN":
		fallthrough
	case "DIRECT_SHARING":
		fallthrough
	case "ITEM_DUPLICATION":
		fallthrough
	case "DRIVE_FILE_STREAM":
		fallthrough
	case "FILE_ORGANIZER_CAN_SHARE_FOLDERS":
		*e = RestrictionChangeFeatureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestrictionChangeFeatureEnum: %s", s)
	}
}

// RestrictionChangeNewRestrictionEnum - The restriction in place after the change.
type RestrictionChangeNewRestrictionEnum string

const (
	RestrictionChangeNewRestrictionEnumRestrictionUnspecified RestrictionChangeNewRestrictionEnum = "RESTRICTION_UNSPECIFIED"
	RestrictionChangeNewRestrictionEnumUnrestricted           RestrictionChangeNewRestrictionEnum = "UNRESTRICTED"
	RestrictionChangeNewRestrictionEnumFullyRestricted        RestrictionChangeNewRestrictionEnum = "FULLY_RESTRICTED"
)

func (e *RestrictionChangeNewRestrictionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESTRICTION_UNSPECIFIED":
		fallthrough
	case "UNRESTRICTED":
		fallthrough
	case "FULLY_RESTRICTED":
		*e = RestrictionChangeNewRestrictionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestrictionChangeNewRestrictionEnum: %s", s)
	}
}

// RestrictionChange - Information about restriction policy changes to a feature.
type RestrictionChange struct {
	// The feature which had a change in restriction policy.
	Feature *RestrictionChangeFeatureEnum `json:"feature,omitempty"`
	// The restriction in place after the change.
	NewRestriction *RestrictionChangeNewRestrictionEnum `json:"newRestriction,omitempty"`
}
