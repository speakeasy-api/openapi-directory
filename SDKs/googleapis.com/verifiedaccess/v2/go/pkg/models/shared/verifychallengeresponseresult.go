// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VerifyChallengeResponseResultKeyTrustLevelEnum - Device attested key trust level.
type VerifyChallengeResponseResultKeyTrustLevelEnum string

const (
	VerifyChallengeResponseResultKeyTrustLevelEnumKeyTrustLevelUnspecified VerifyChallengeResponseResultKeyTrustLevelEnum = "KEY_TRUST_LEVEL_UNSPECIFIED"
	VerifyChallengeResponseResultKeyTrustLevelEnumChromeOsVerifiedMode     VerifyChallengeResponseResultKeyTrustLevelEnum = "CHROME_OS_VERIFIED_MODE"
	VerifyChallengeResponseResultKeyTrustLevelEnumChromeOsDeveloperMode    VerifyChallengeResponseResultKeyTrustLevelEnum = "CHROME_OS_DEVELOPER_MODE"
	VerifyChallengeResponseResultKeyTrustLevelEnumChromeBrowserHwKey       VerifyChallengeResponseResultKeyTrustLevelEnum = "CHROME_BROWSER_HW_KEY"
	VerifyChallengeResponseResultKeyTrustLevelEnumChromeBrowserOsKey       VerifyChallengeResponseResultKeyTrustLevelEnum = "CHROME_BROWSER_OS_KEY"
)

func (e VerifyChallengeResponseResultKeyTrustLevelEnum) ToPointer() *VerifyChallengeResponseResultKeyTrustLevelEnum {
	return &e
}

func (e *VerifyChallengeResponseResultKeyTrustLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KEY_TRUST_LEVEL_UNSPECIFIED":
		fallthrough
	case "CHROME_OS_VERIFIED_MODE":
		fallthrough
	case "CHROME_OS_DEVELOPER_MODE":
		fallthrough
	case "CHROME_BROWSER_HW_KEY":
		fallthrough
	case "CHROME_BROWSER_OS_KEY":
		*e = VerifyChallengeResponseResultKeyTrustLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyChallengeResponseResultKeyTrustLevelEnum: %v", v)
	}
}

// VerifyChallengeResponseResult - Result message for VerifiedAccess.VerifyChallengeResponse.
type VerifyChallengeResponseResult struct {
	// Unique customer id that this device belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers
	CustomerID *string `json:"customerId,omitempty"`
	// Device permanent id is returned in this field (for the machine response only).
	DevicePermanentID *string `json:"devicePermanentId,omitempty"`
	// Deprecated. Device signal in json string representation. Prefer using `device_signals` instead.
	DeviceSignal *string `json:"deviceSignal,omitempty"`
	// The device signals as reported by Chrome.
	DeviceSignals *DeviceSignals `json:"deviceSignals,omitempty"`
	// Device attested key trust level.
	KeyTrustLevel *VerifyChallengeResponseResultKeyTrustLevelEnum `json:"keyTrustLevel,omitempty"`
	// Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)
	SignedPublicKeyAndChallenge *string `json:"signedPublicKeyAndChallenge,omitempty"`
	// Virtual device id of the device. The definition of virtual device id is platform-specific.
	VirtualDeviceID *string `json:"virtualDeviceId,omitempty"`
}
