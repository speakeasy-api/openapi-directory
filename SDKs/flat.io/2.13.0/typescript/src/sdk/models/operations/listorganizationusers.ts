/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ListOrganizationUsersSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth2: string;
}

export class ListOrganizationUsersRequest extends SpeakeasyBase {
  /**
   * Sort direction
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: shared.SortDirectionEnum;

  /**
   * Filter users by group
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=group" })
  group?: string[];

  /**
   * Filter users by license expiration date or `active` / `notActive`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=licenseExpirationDate",
  })
  licenseExpirationDate?: string[];

  /**
   * This is the maximum number of objects that may be returned
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * An opaque string cursor to fetch the next page of data.
   *
   * @remarks
   * The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=next" })
  next?: string;

  /**
   * Filter users who don't have an active license
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=noActiveLicense",
  })
  noActiveLicense?: boolean;

  /**
   * Return only user ids
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=onlyIds",
  })
  onlyIds?: boolean;

  /**
   * An opaque string cursor to fetch the previous page of data.
   *
   * @remarks
   * The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=previous",
  })
  previous?: string;

  /**
   * The query to search
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;

  /**
   * Filter users by role
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=role" })
  role?: shared.RoleEnum[];

  /**
   * The order to sort the user list
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;
}

export class ListOrganizationUsersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  flatErrorResponse?: shared.FlatErrorResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * List of users
   */
  @SpeakeasyMetadata({ elemType: shared.UserDetailsAdmin })
  userDetailsAdmins?: shared.UserDetailsAdmin[];
}
