/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Snapshot - Create a new snapshot of a repository's dependencies.
 */
public class Snapshot {
    /**
     * A description of the detector used.
     */
    @JsonProperty("detector")
    public SnapshotDetector detector;
    public Snapshot withDetector(SnapshotDetector detector) {
        this.detector = detector;
        return this;
    }
    
    @JsonProperty("job")
    public SnapshotJob job;
    public Snapshot withJob(SnapshotJob job) {
        this.job = job;
        return this;
    }
    
    /**
     * A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manifests")
    public java.util.Map<String, Manifest> manifests;
    public Snapshot withManifests(java.util.Map<String, Manifest> manifests) {
        this.manifests = manifests;
        return this;
    }
    
    /**
     * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;
    public Snapshot withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The repository branch that triggered this snapshot.
     */
    @JsonProperty("ref")
    public String ref;
    public Snapshot withRef(String ref) {
        this.ref = ref;
        return this;
    }
    
    /**
     * The time at which the snapshot was scanned.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("scanned")
    public OffsetDateTime scanned;
    public Snapshot withScanned(OffsetDateTime scanned) {
        this.scanned = scanned;
        return this;
    }
    
    /**
     * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
     */
    @JsonProperty("sha")
    public String sha;
    public Snapshot withSha(String sha) {
        this.sha = sha;
        return this;
    }
    
    /**
     * The version of the repository snapshot submission.
     */
    @JsonProperty("version")
    public Long version;
    public Snapshot withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
