"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import perandroidversioninfo as shared_perandroidversioninfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AndroidModelFormEnum(str, Enum):
    r"""Whether this device is virtual or physical."""
    DEVICE_FORM_UNSPECIFIED = 'DEVICE_FORM_UNSPECIFIED'
    VIRTUAL = 'VIRTUAL'
    PHYSICAL = 'PHYSICAL'
    EMULATOR = 'EMULATOR'

class AndroidModelFormFactorEnum(str, Enum):
    r"""Whether this device is a phone, tablet, wearable, etc."""
    DEVICE_FORM_FACTOR_UNSPECIFIED = 'DEVICE_FORM_FACTOR_UNSPECIFIED'
    PHONE = 'PHONE'
    TABLET = 'TABLET'
    WEARABLE = 'WEARABLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AndroidModel:
    r"""A description of an Android device tests may be run on."""
    
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""The company that this device is branded with. Example: \\"Google\\", \\"Samsung\\"."""  
    codename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codename'), 'exclude': lambda f: f is None }})
    r"""The name of the industrial design. This corresponds to android.os.Build.DEVICE."""  
    form: Optional[AndroidModelFormEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form'), 'exclude': lambda f: f is None }})
    r"""Whether this device is virtual or physical."""  
    form_factor: Optional[AndroidModelFormFactorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFactor'), 'exclude': lambda f: f is None }})
    r"""Whether this device is a phone, tablet, wearable, etc."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique opaque id for this model. Use this for invoking the TestExecutionService."""  
    low_fps_video_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lowFpsVideoRecording'), 'exclude': lambda f: f is None }})
    r"""True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config."""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""The manufacturer of this device."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The human-readable marketing name for this device model. Examples: \\"Nexus 5\\", \\"Galaxy S5\\"."""  
    per_version_info: Optional[list[shared_perandroidversioninfo.PerAndroidVersionInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perVersionInfo'), 'exclude': lambda f: f is None }})
    r"""Version-specific information of an Android model."""  
    screen_density: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screenDensity'), 'exclude': lambda f: f is None }})
    r"""Screen density in DPI. This corresponds to ro.sf.lcd_density"""  
    screen_x: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screenX'), 'exclude': lambda f: f is None }})
    r"""Screen size in the horizontal (X) dimension measured in pixels."""  
    screen_y: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screenY'), 'exclude': lambda f: f is None }})
    r"""Screen size in the vertical (Y) dimension measured in pixels."""  
    supported_abis: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedAbis'), 'exclude': lambda f: f is None }})
    r"""The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first element in the list. Elements are optionally prefixed by \\"version_id:\\" (where version_id is the id of an AndroidVersion), denoting an ABI that is supported only on a particular version."""  
    supported_version_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedVersionIds'), 'exclude': lambda f: f is None }})
    r"""The set of Android versions this device supports."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Tags for this dimension. Examples: \\"default\\", \\"preview\\", \\"deprecated\\"."""  
    thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailUrl'), 'exclude': lambda f: f is None }})
    r"""URL of a thumbnail image (photo) of the device."""  
    