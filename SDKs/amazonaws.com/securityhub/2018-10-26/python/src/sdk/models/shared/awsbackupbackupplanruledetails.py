"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsbackupbackupplanlifecycledetails as shared_awsbackupbackupplanlifecycledetails
from ..shared import awsbackupbackupplanrulecopyactionsdetails as shared_awsbackupbackupplanrulecopyactionsdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsBackupBackupPlanRuleDetails:
    r"""Provides details about an array of <code>BackupRule</code> objects, each of which specifies a scheduled task that is used to back up a selection of resources."""
    
    completion_window_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionWindowMinutes'), 'exclude': lambda f: f is None }})  
    copy_actions: Optional[list[shared_awsbackupbackupplanrulecopyactionsdetails.AwsBackupBackupPlanRuleCopyActionsDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyActions'), 'exclude': lambda f: f is None }})  
    enable_continuous_backup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableContinuousBackup'), 'exclude': lambda f: f is None }})  
    lifecycle: Optional[shared_awsbackupbackupplanlifecycledetails.AwsBackupBackupPlanLifecycleDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lifecycle'), 'exclude': lambda f: f is None }})  
    rule_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleId'), 'exclude': lambda f: f is None }})  
    rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleName'), 'exclude': lambda f: f is None }})  
    schedule_expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScheduleExpression'), 'exclude': lambda f: f is None }})  
    start_window_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartWindowMinutes'), 'exclude': lambda f: f is None }})  
    target_backup_vault: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetBackupVault'), 'exclude': lambda f: f is None }})  
    