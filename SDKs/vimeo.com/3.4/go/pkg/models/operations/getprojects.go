// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetProjectsSecurity struct {
	Oauth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetProjectsDirectionEnum - The sort direction of the results.
type GetProjectsDirectionEnum string

const (
	GetProjectsDirectionEnumAsc  GetProjectsDirectionEnum = "asc"
	GetProjectsDirectionEnumDesc GetProjectsDirectionEnum = "desc"
)

func (e *GetProjectsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetProjectsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsDirectionEnum: %s", s)
	}
}

// GetProjectsSortEnum - The way to sort the results.
type GetProjectsSortEnum string

const (
	GetProjectsSortEnumDate         GetProjectsSortEnum = "date"
	GetProjectsSortEnumDefault      GetProjectsSortEnum = "default"
	GetProjectsSortEnumModifiedTime GetProjectsSortEnum = "modified_time"
	GetProjectsSortEnumName         GetProjectsSortEnum = "name"
)

func (e *GetProjectsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "date":
		fallthrough
	case "default":
		fallthrough
	case "modified_time":
		fallthrough
	case "name":
		*e = GetProjectsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsSortEnum: %s", s)
	}
}

type GetProjectsRequest struct {
	// The sort direction of the results.
	Direction *GetProjectsDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// The way to sort the results.
	Sort *GetProjectsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
}

type GetProjectsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error code 8000: The user credentials are invalid.
	Error *shared.Error
	// The projects were returned.
	Projects []shared.Project
}
