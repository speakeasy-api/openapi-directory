// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCommentReactionsXAmzTargetEnum
type GetCommentReactionsXAmzTargetEnum string

const (
	GetCommentReactionsXAmzTargetEnumCodeCommit20150413GetCommentReactions GetCommentReactionsXAmzTargetEnum = "CodeCommit_20150413.GetCommentReactions"
)

func (e GetCommentReactionsXAmzTargetEnum) ToPointer() *GetCommentReactionsXAmzTargetEnum {
	return &e
}

func (e *GetCommentReactionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.GetCommentReactions":
		*e = GetCommentReactionsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommentReactionsXAmzTargetEnum: %v", v)
	}
}

type GetCommentReactionsRequest struct {
	GetCommentReactionsInput shared.GetCommentReactionsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               GetCommentReactionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type GetCommentReactionsResponse struct {
	// CommentDeletedException
	CommentDeletedException interface{}
	// CommentDoesNotExistException
	CommentDoesNotExistException interface{}
	// CommentIdRequiredException
	CommentIDRequiredException interface{}
	ContentType                string
	// Success
	GetCommentReactionsOutput *shared.GetCommentReactionsOutput
	// InvalidCommentIdException
	InvalidCommentIDException interface{}
	// InvalidContinuationTokenException
	InvalidContinuationTokenException interface{}
	// InvalidMaxResultsException
	InvalidMaxResultsException interface{}
	// InvalidReactionUserArnException
	InvalidReactionUserArnException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
