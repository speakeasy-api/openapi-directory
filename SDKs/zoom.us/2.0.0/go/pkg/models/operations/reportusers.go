// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
)

type ReportUsersSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// ReportUsersTypeEnum - Active or inactive hosts.<br>`active` - Active hosts. <br>`inactive` - Inactive hosts.
type ReportUsersTypeEnum string

const (
	ReportUsersTypeEnumActive   ReportUsersTypeEnum = "active"
	ReportUsersTypeEnumInactive ReportUsersTypeEnum = "inactive"
)

func (e *ReportUsersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = ReportUsersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportUsersTypeEnum: %s", s)
	}
}

type ReportUsersRequest struct {
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The page number of the current page in the returned records.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page_number"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
	// Active or inactive hosts.<br>`active` - Active hosts. <br>`inactive` - Inactive hosts.
	Type *ReportUsersTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

// ReportUsers200ApplicationXMLUsersCustomAttributes - Custom attribute(s) that have been assigned to the user.
type ReportUsers200ApplicationXMLUsersCustomAttributes struct {
	// Identifier for the custom attribute.
	Key *string
	// Name of the custom attribute.
	Name *string
	// Value of the custom attribute.
	Value *string
}

type ReportUsers200ApplicationXMLUsers struct {
	// Custom attribute(s) that have been assigned to the user.
	CustomAttributes *ReportUsers200ApplicationXMLUsersCustomAttributes
	// User department.
	Dept *string
	// User email.
	Email *string
	// User ID.
	ID *string
	// Number of meeting minutes for user.
	MeetingMinutes *int64
	// Number of meetings for user.
	Meetings *int64
	// Number of participants in meetings for user.
	Participants *int64
	// User type.
	Type *int64
	// User display name.
	UserName *string
}

// ReportUsers200ApplicationXML - **HTTP Status Code:** `200`<br>
// Active or inactive hosts report returned.<br>
// This is only available for paid account: {accountId}.
type ReportUsers200ApplicationXML struct {
	// Start date for this report.
	From          *types.Date
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// The page number of the current results.
	PageNumber *int64
	// The number of records returned with a single API call.
	PageSize *int64
	// End date for this report.
	To *types.Date
	// Number of meeting minutes for this range.
	TotalMeetingMinutes *int64
	// Number of meetings for this range.
	TotalMeetings *int64
	// Number of participants for this range.
	TotalParticipants *int64
	// The total number of all the records available across pages.
	TotalRecords *int64
	// Array of user objects.
	Users []ReportUsers200ApplicationXMLUsers
}

// ReportUsers200ApplicationJSONUsersCustomAttributes - Custom attribute(s) that have been assigned to the user.
type ReportUsers200ApplicationJSONUsersCustomAttributes struct {
	// Identifier for the custom attribute.
	Key *string `json:"key,omitempty"`
	// Name of the custom attribute.
	Name *string `json:"name,omitempty"`
	// Value of the custom attribute.
	Value *string `json:"value,omitempty"`
}

type ReportUsers200ApplicationJSONUsers struct {
	// Custom attribute(s) that have been assigned to the user.
	CustomAttributes *ReportUsers200ApplicationJSONUsersCustomAttributes `json:"custom_attributes,omitempty"`
	// User department.
	Dept *string `json:"dept,omitempty"`
	// User email.
	Email *string `json:"email,omitempty"`
	// User ID.
	ID *string `json:"id,omitempty"`
	// Number of meeting minutes for user.
	MeetingMinutes *int64 `json:"meeting_minutes,omitempty"`
	// Number of meetings for user.
	Meetings *int64 `json:"meetings,omitempty"`
	// Number of participants in meetings for user.
	Participants *int64 `json:"participants,omitempty"`
	// User type.
	Type *int64 `json:"type,omitempty"`
	// User display name.
	UserName *string `json:"user_name,omitempty"`
}

// ReportUsers200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Active or inactive hosts report returned.<br>
// This is only available for paid account: {accountId}.
type ReportUsers200ApplicationJSON struct {
	// Start date for this report.
	From          *types.Date `json:"from,omitempty"`
	NextPageToken *string     `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The page number of the current results.
	PageNumber *int64 `json:"page_number,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// End date for this report.
	To *types.Date `json:"to,omitempty"`
	// Number of meeting minutes for this range.
	TotalMeetingMinutes *int64 `json:"total_meeting_minutes,omitempty"`
	// Number of meetings for this range.
	TotalMeetings *int64 `json:"total_meetings,omitempty"`
	// Number of participants for this range.
	TotalParticipants *int64 `json:"total_participants,omitempty"`
	// The total number of all the records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
	// Array of user objects.
	Users []ReportUsers200ApplicationJSONUsers `json:"users,omitempty"`
}

type ReportUsersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Active or inactive hosts report returned.<br>
	// This is only available for paid account: {accountId}.
	ReportUsers200ApplicationJSONObject *ReportUsers200ApplicationJSON
}
