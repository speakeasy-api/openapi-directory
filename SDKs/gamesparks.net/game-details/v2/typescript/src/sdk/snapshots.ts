/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Snapshots {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * copySnapshotToExistingGame
   */
  copySnapshotToExistingGameUsingPOST1(
    req: operations.CopySnapshotToExistingGameUsingPost1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.CopySnapshotToExistingGameUsingPost1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CopySnapshotToExistingGameUsingPost1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy/to/{targetApiKey}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CopySnapshotToExistingGameUsingPost1Response =
        new operations.CopySnapshotToExistingGameUsingPost1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.snapshotCreationSuccessModel = utils.objectToClass(
              httpRes?.data,
              shared.SnapshotCreationSuccessModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * copySnapshotToNewGame
   */
  copySnapshotToNewGameUsingPOST(
    req: operations.CopySnapshotToNewGameUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CopySnapshotToNewGameUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CopySnapshotToNewGameUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CopySnapshotToNewGameUsingPOSTResponse =
        new operations.CopySnapshotToNewGameUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.snapshotCreationSuccessModel = utils.objectToClass(
              httpRes?.data,
              shared.SnapshotCreationSuccessModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * createSnapshots
   */
  createSnapshotsUsingPOST(
    req: operations.CreateSnapshotsUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSnapshotsUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateSnapshotsUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "snapshotCreationModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSnapshotsUsingPOSTResponse =
        new operations.CreateSnapshotsUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.snapshotModel = utils.objectToClass(
              httpRes?.data,
              shared.SnapshotModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * deleteSnapshot
   */
  deleteSnapshotUsingDELETE1(
    req: operations.DELETESnapshotUsingDelete1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETESnapshotUsingDelete1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETESnapshotUsingDelete1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETESnapshotUsingDelete1Response =
        new operations.DELETESnapshotUsingDelete1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getLiveSnapshotId
   */
  getLiveSnapshotIdUsingGET(
    req: operations.GETLiveSnapshotIdUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETLiveSnapshotIdUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETLiveSnapshotIdUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/liveSnapshotId",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETLiveSnapshotIdUsingGETResponse =
        new operations.GETLiveSnapshotIdUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getSnapshot
   */
  getSnapshotUsingGET(
    req: operations.GETSnapshotUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETSnapshotUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETSnapshotUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETSnapshotUsingGETResponse =
        new operations.GETSnapshotUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.snapshotModel = utils.objectToClass(
              httpRes?.data,
              shared.SnapshotModel
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getSnapshots
   */
  getSnapshotsUsingGET(
    req: operations.GETSnapshotsUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETSnapshotsUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETSnapshotsUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/page/{page}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETSnapshotsUsingGETResponse =
        new operations.GETSnapshotsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.snapshotModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.snapshotModels = utils.objectToClass(
              httpRes?.data,
              shared.SnapshotModel,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getSnapshots
   */
  getSnapshotsUsingGET1(
    req: operations.GETSnapshotsUsingGet1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GETSnapshotsUsingGet1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETSnapshotsUsingGet1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETSnapshotsUsingGet1Response =
        new operations.GETSnapshotsUsingGet1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.snapshotModels = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.snapshotModels = utils.objectToClass(
              httpRes?.data,
              shared.SnapshotModel,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * publishSnapshot
   */
  publishSnapshotUsingPOST1(
    req: operations.PublishSnapshotUsingPost1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PublishSnapshotUsingPost1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PublishSnapshotUsingPost1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/publish",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PublishSnapshotUsingPost1Response =
        new operations.PublishSnapshotUsingPost1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 403, 404].includes(httpRes?.status):
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * revertToSnapshot
   */
  revertToSnapshotUsingPOST(
    req: operations.RevertToSnapshotUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RevertToSnapshotUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RevertToSnapshotUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/revert/to/{snapshotId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RevertToSnapshotUsingPOSTResponse =
        new operations.RevertToSnapshotUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * unpublishSnapshot
   */
  unpublishSnapshotUsingPOST(
    req: operations.UnpublishSnapshotUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UnpublishSnapshotUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnpublishSnapshotUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/unpublish",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnpublishSnapshotUsingPOSTResponse =
        new operations.UnpublishSnapshotUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json;charset=UTF-8`
            )
          ) {
            res.messageModel = utils.objectToClass(
              httpRes?.data,
              shared.MessageModel
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
