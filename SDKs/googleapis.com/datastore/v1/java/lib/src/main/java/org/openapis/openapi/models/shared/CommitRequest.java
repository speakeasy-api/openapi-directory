/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CommitRequest - The request for Datastore.Commit.
 */
public class CommitRequest {
    /**
     * The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseId")
    public String databaseId;

    public CommitRequest withDatabaseId(String databaseId) {
        this.databaseId = databaseId;
        return this;
    }
    
    /**
     * The type of commit to perform. Defaults to `TRANSACTIONAL`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    public CommitRequestModeEnum mode;

    public CommitRequest withMode(CommitRequestModeEnum mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mutations")
    public Mutation[] mutations;

    public CommitRequest withMutations(Mutation[] mutations) {
        this.mutations = mutations;
        return this;
    }
    
    /**
     * Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleUseTransaction")
    public TransactionOptions singleUseTransaction;

    public CommitRequest withSingleUseTransaction(TransactionOptions singleUseTransaction) {
        this.singleUseTransaction = singleUseTransaction;
        return this;
    }
    
    /**
     * The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction")
    public String transaction;

    public CommitRequest withTransaction(String transaction) {
        this.transaction = transaction;
        return this;
    }
    
    public CommitRequest(){}
}
