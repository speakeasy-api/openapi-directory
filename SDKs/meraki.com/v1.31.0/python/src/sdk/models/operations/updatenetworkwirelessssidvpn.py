"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessSsidVpnRequestBodyConcentrator:
    r"""The VPN concentrator settings for this SSID."""
    
    network_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkId'), 'exclude': lambda f: f is None }})
    r"""The NAT ID of the concentrator that should be set."""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""The VLAN that should be tagged for the concentrator."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessSsidVpnRequestBodyFailover:
    r"""Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID."""
    
    heartbeat_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heartbeatInterval'), 'exclude': lambda f: f is None }})
    r"""Idle timer interval in seconds."""  
    idle_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleTimeout'), 'exclude': lambda f: f is None }})
    r"""Idle timer timeout in seconds."""  
    request_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestIp'), 'exclude': lambda f: f is None }})
    r"""IP addressed reserved on DHCP server where SSID will terminate."""  
    
class UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum(str, Enum):
    r"""Protocol for this split tunnel rule."""
    ANY = 'Any'
    TCP = 'TCP'
    UDP = 'UDP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules:
    
    dest_cidr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destCidr') }})
    r"""Destination for this split tunnel rule. IP address, fully-qualified domain names (FQDN) or 'any'."""  
    policy: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy') }})
    r"""Traffic policy specified for this split tunnel rule, 'allow' or 'deny'."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Description for this split tunnel rule (optional)."""  
    dest_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destPort'), 'exclude': lambda f: f is None }})
    r"""Destination port for this split tunnel rule, (integer in the range 1-65535), or 'any'."""  
    protocol: Optional[UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""Protocol for this split tunnel rule."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel:
    r"""The VPN split tunnel settings for this SSID."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""If true, VPN split tunnel is enabled."""  
    rules: Optional[list[UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""List of VPN split tunnel rules."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessSsidVpnRequestBody:
    
    concentrator: Optional[UpdateNetworkWirelessSsidVpnRequestBodyConcentrator] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentrator'), 'exclude': lambda f: f is None }})
    r"""The VPN concentrator settings for this SSID."""  
    failover: Optional[UpdateNetworkWirelessSsidVpnRequestBodyFailover] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failover'), 'exclude': lambda f: f is None }})
    r"""Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID."""  
    split_tunnel: Optional[UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splitTunnel'), 'exclude': lambda f: f is None }})
    r"""The VPN split tunnel settings for this SSID."""  
    

@dataclasses.dataclass
class UpdateNetworkWirelessSsidVpnRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'number', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkWirelessSsidVpnRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkWirelessSsidVpnResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_wireless_ssid_vpn_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    