// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAssetPropertiesFilterEnum - <p> Filters the requested list of asset properties. You can choose one of the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all asset properties for a given asset model ID. </p> </li> <li> <p> <code>BASE</code> – The list includes only base asset properties for a given asset model ID. </p> </li> </ul> <p>Default: <code>BASE</code> </p>
type ListAssetPropertiesFilterEnum string

const (
	ListAssetPropertiesFilterEnumAll  ListAssetPropertiesFilterEnum = "ALL"
	ListAssetPropertiesFilterEnumBase ListAssetPropertiesFilterEnum = "BASE"
)

func (e ListAssetPropertiesFilterEnum) ToPointer() *ListAssetPropertiesFilterEnum {
	return &e
}

func (e *ListAssetPropertiesFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "BASE":
		*e = ListAssetPropertiesFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAssetPropertiesFilterEnum: %v", v)
	}
}

type ListAssetPropertiesRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ID of the asset.
	AssetID string `pathParam:"style=simple,explode=false,name=assetId"`
	// <p> Filters the requested list of asset properties. You can choose one of the following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all asset properties for a given asset model ID. </p> </li> <li> <p> <code>BASE</code> – The list includes only base asset properties for a given asset model ID. </p> </li> </ul> <p>Default: <code>BASE</code> </p>
	Filter *ListAssetPropertiesFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// The maximum number of results to return for each paginated request. If not specified, the default value is 50.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token to be used for the next set of paginated results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListAssetPropertiesResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListAssetPropertiesResponse *shared.ListAssetPropertiesResponse
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
