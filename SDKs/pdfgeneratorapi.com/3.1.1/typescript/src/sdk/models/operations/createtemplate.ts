/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Internal Server Error
 */
export class CreateTemplate500ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum CreateTemplate422ApplicationJSONErrorEnum {
  UnableToParseJSONPleaseCheckFormatting = "Unable to parse JSON, please check formatting",
  RequiredParameterMissing = "Required parameter missing",
  RequiredParameterMissingTemplateDefinitionNotDefined = "Required parameter missing: template definition not defined",
  RequiredParameterMissingTemplateNotDefined = "Required parameter missing: template not defined",
}

/**
 * Unprocessable Entity
 */
export class CreateTemplate422ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: CreateTemplate422ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum CreateTemplate404ApplicationJSONErrorEnum {
  EntityNotFound = "Entity not found",
  ResourceNotFound = "Resource not found",
  NoneOfTheTemplatesIsAvailableForTheWorkspace = "None of the templates is available for the workspace.",
}

/**
 * Not Found
 */
export class CreateTemplate404ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: CreateTemplate404ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum CreateTemplate403ApplicationJSONErrorEnum {
  YourAccountHasExceededTheMonthlyDocumentGenerationLimit = "Your account has exceeded the monthly document generation limit.",
}

/**
 * Forbidden
 */
export class CreateTemplate403ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: CreateTemplate403ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum CreateTemplate401ApplicationJSONErrorEnum {
  AuthenticationFailedRequestExpired = "Authentication failed: request expired",
  AuthenticationFailedSignatureOrSecretMissing = "Authentication failed: signature or secret missing",
  AuthenticationFailedWorkspaceMissing = "Authentication failed: workspace missing",
  AuthenticationFailedKeyMissing = "Authentication failed: key missing",
  AuthenticationFailedPropertyIssIssuerMissingInJWT = "Authentication failed: property 'iss' (issuer) missing in JWT",
  AuthenticationFailedPropertySubSubjectMissingInJWT = "Authentication failed: property 'sub' (subject) missing in JWT",
  AuthenticationFailedPropertyExpExpirationTimeMissingInJWT = "Authentication failed: property 'exp' (expiration time) missing in JWT",
  AuthenticationFailedInvalidIssIssuer = "Authentication failed: invalid 'iss' (issuer)",
  AuthenticationFailedIncorrectSignature = "Authentication failed: incorrect signature",
  AuthenticationFailed = "Authentication failed",
}

/**
 * Unauthorized
 */
export class CreateTemplate401ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: CreateTemplate401ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Template configuration as JSON object
 */
export class CreateTemplate200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  @Type(() => shared.TemplateDefinition)
  response?: shared.TemplateDefinition;
}

export class CreateTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Template configuration as JSON object
   */
  @SpeakeasyMetadata()
  createTemplate200ApplicationJSONObject?: CreateTemplate200ApplicationJSON;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  createTemplate401ApplicationJSONObject?: CreateTemplate401ApplicationJSON;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  createTemplate403ApplicationJSONObject?: CreateTemplate403ApplicationJSON;

  /**
   * Not Found
   */
  @SpeakeasyMetadata()
  createTemplate404ApplicationJSONObject?: CreateTemplate404ApplicationJSON;

  /**
   * Unprocessable Entity
   */
  @SpeakeasyMetadata()
  createTemplate422ApplicationJSONObject?: CreateTemplate422ApplicationJSON;

  /**
   * Internal Server Error
   */
  @SpeakeasyMetadata()
  createTemplate500ApplicationJSONObject?: CreateTemplate500ApplicationJSON;
}
