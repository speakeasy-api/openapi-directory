// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PagespeedonlinePagespeedapiRunpagespeedSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type PagespeedonlinePagespeedapiRunpagespeedCategoryEnum string

const (
	PagespeedonlinePagespeedapiRunpagespeedCategoryEnumCategoryUnspecified PagespeedonlinePagespeedapiRunpagespeedCategoryEnum = "CATEGORY_UNSPECIFIED"
	PagespeedonlinePagespeedapiRunpagespeedCategoryEnumAccessibility       PagespeedonlinePagespeedapiRunpagespeedCategoryEnum = "ACCESSIBILITY"
	PagespeedonlinePagespeedapiRunpagespeedCategoryEnumBestPractices       PagespeedonlinePagespeedapiRunpagespeedCategoryEnum = "BEST_PRACTICES"
	PagespeedonlinePagespeedapiRunpagespeedCategoryEnumPerformance         PagespeedonlinePagespeedapiRunpagespeedCategoryEnum = "PERFORMANCE"
	PagespeedonlinePagespeedapiRunpagespeedCategoryEnumPwa                 PagespeedonlinePagespeedapiRunpagespeedCategoryEnum = "PWA"
	PagespeedonlinePagespeedapiRunpagespeedCategoryEnumSeo                 PagespeedonlinePagespeedapiRunpagespeedCategoryEnum = "SEO"
)

func (e *PagespeedonlinePagespeedapiRunpagespeedCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CATEGORY_UNSPECIFIED":
		fallthrough
	case "ACCESSIBILITY":
		fallthrough
	case "BEST_PRACTICES":
		fallthrough
	case "PERFORMANCE":
		fallthrough
	case "PWA":
		fallthrough
	case "SEO":
		*e = PagespeedonlinePagespeedapiRunpagespeedCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PagespeedonlinePagespeedapiRunpagespeedCategoryEnum: %s", s)
	}
}

// PagespeedonlinePagespeedapiRunpagespeedStrategyEnum - The analysis strategy (desktop or mobile) to use, and desktop is the default
type PagespeedonlinePagespeedapiRunpagespeedStrategyEnum string

const (
	PagespeedonlinePagespeedapiRunpagespeedStrategyEnumStrategyUnspecified PagespeedonlinePagespeedapiRunpagespeedStrategyEnum = "STRATEGY_UNSPECIFIED"
	PagespeedonlinePagespeedapiRunpagespeedStrategyEnumDesktop             PagespeedonlinePagespeedapiRunpagespeedStrategyEnum = "DESKTOP"
	PagespeedonlinePagespeedapiRunpagespeedStrategyEnumMobile              PagespeedonlinePagespeedapiRunpagespeedStrategyEnum = "MOBILE"
)

func (e *PagespeedonlinePagespeedapiRunpagespeedStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STRATEGY_UNSPECIFIED":
		fallthrough
	case "DESKTOP":
		fallthrough
	case "MOBILE":
		*e = PagespeedonlinePagespeedapiRunpagespeedStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PagespeedonlinePagespeedapiRunpagespeedStrategyEnum: %s", s)
	}
}

type PagespeedonlinePagespeedapiRunpagespeedRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// The captcha token passed when filling out a captcha.
	CaptchaToken *string `queryParam:"style=form,explode=true,name=captchaToken"`
	// A Lighthouse category to run; if none are given, only Performance category will be run
	Category []PagespeedonlinePagespeedapiRunpagespeedCategoryEnum `queryParam:"style=form,explode=true,name=category"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The locale used to localize formatted results
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The analysis strategy (desktop or mobile) to use, and desktop is the default
	Strategy *PagespeedonlinePagespeedapiRunpagespeedStrategyEnum `queryParam:"style=form,explode=true,name=strategy"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Required. The URL to fetch and analyze
	URL string `queryParam:"style=form,explode=true,name=url"`
	// Campaign name for analytics.
	UtmCampaign *string `queryParam:"style=form,explode=true,name=utm_campaign"`
	// Campaign source for analytics.
	UtmSource *string `queryParam:"style=form,explode=true,name=utm_source"`
}

type PagespeedonlinePagespeedapiRunpagespeedResponse struct {
	ContentType string
	// Successful response
	PagespeedAPIPagespeedResponseV5 *shared.PagespeedAPIPagespeedResponseV5
	StatusCode                      int
	RawResponse                     *http.Response
}
