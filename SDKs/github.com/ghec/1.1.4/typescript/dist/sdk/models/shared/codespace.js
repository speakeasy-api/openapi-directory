"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Codespace = exports.CodespaceStateEnum = exports.CodespaceRuntimeConstraints = exports.CodespaceLocationEnum = exports.CodespaceGitStatus = void 0;
var utils_1 = require("../../../internal/utils");
var minimalrepository_1 = require("./minimalrepository");
var nullablecodespacemachine_1 = require("./nullablecodespacemachine");
var simpleuser_1 = require("./simpleuser");
var class_transformer_1 = require("class-transformer");
/**
 * Details about the codespace's git repository.
 */
var CodespaceGitStatus = /** @class */ (function (_super) {
    __extends(CodespaceGitStatus, _super);
    function CodespaceGitStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ahead" }),
        __metadata("design:type", Number)
    ], CodespaceGitStatus.prototype, "ahead", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "behind" }),
        __metadata("design:type", Number)
    ], CodespaceGitStatus.prototype, "behind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "has_uncommitted_changes" }),
        __metadata("design:type", Boolean)
    ], CodespaceGitStatus.prototype, "hasUncommittedChanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "has_unpushed_changes" }),
        __metadata("design:type", Boolean)
    ], CodespaceGitStatus.prototype, "hasUnpushedChanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ref" }),
        __metadata("design:type", String)
    ], CodespaceGitStatus.prototype, "ref", void 0);
    return CodespaceGitStatus;
}(utils_1.SpeakeasyBase));
exports.CodespaceGitStatus = CodespaceGitStatus;
/**
 * The Azure region where this codespace is located.
 */
var CodespaceLocationEnum;
(function (CodespaceLocationEnum) {
    CodespaceLocationEnum["EastUs"] = "EastUs";
    CodespaceLocationEnum["SouthEastAsia"] = "SouthEastAsia";
    CodespaceLocationEnum["WestEurope"] = "WestEurope";
    CodespaceLocationEnum["WestUs2"] = "WestUs2";
})(CodespaceLocationEnum = exports.CodespaceLocationEnum || (exports.CodespaceLocationEnum = {}));
var CodespaceRuntimeConstraints = /** @class */ (function (_super) {
    __extends(CodespaceRuntimeConstraints, _super);
    function CodespaceRuntimeConstraints() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allowed_port_privacy_settings" }),
        __metadata("design:type", Array)
    ], CodespaceRuntimeConstraints.prototype, "allowedPortPrivacySettings", void 0);
    return CodespaceRuntimeConstraints;
}(utils_1.SpeakeasyBase));
exports.CodespaceRuntimeConstraints = CodespaceRuntimeConstraints;
/**
 * State of this codespace.
 */
var CodespaceStateEnum;
(function (CodespaceStateEnum) {
    CodespaceStateEnum["Unknown"] = "Unknown";
    CodespaceStateEnum["Created"] = "Created";
    CodespaceStateEnum["Queued"] = "Queued";
    CodespaceStateEnum["Provisioning"] = "Provisioning";
    CodespaceStateEnum["Available"] = "Available";
    CodespaceStateEnum["Awaiting"] = "Awaiting";
    CodespaceStateEnum["Unavailable"] = "Unavailable";
    CodespaceStateEnum["Deleted"] = "Deleted";
    CodespaceStateEnum["Moved"] = "Moved";
    CodespaceStateEnum["Shutdown"] = "Shutdown";
    CodespaceStateEnum["Archived"] = "Archived";
    CodespaceStateEnum["Starting"] = "Starting";
    CodespaceStateEnum["ShuttingDown"] = "ShuttingDown";
    CodespaceStateEnum["Failed"] = "Failed";
    CodespaceStateEnum["Exporting"] = "Exporting";
    CodespaceStateEnum["Updating"] = "Updating";
    CodespaceStateEnum["Rebuilding"] = "Rebuilding";
})(CodespaceStateEnum = exports.CodespaceStateEnum || (exports.CodespaceStateEnum = {}));
/**
 * A codespace.
 */
var Codespace = /** @class */ (function (_super) {
    __extends(Codespace, _super);
    function Codespace() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "billable_owner" }),
        (0, class_transformer_1.Type)(function () { return simpleuser_1.SimpleUser; }),
        __metadata("design:type", simpleuser_1.SimpleUser)
    ], Codespace.prototype, "billableOwner", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "created_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Codespace.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "devcontainer_path" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "devcontainerPath", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "display_name" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "displayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "environment_id" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "environmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "git_status" }),
        (0, class_transformer_1.Type)(function () { return CodespaceGitStatus; }),
        __metadata("design:type", CodespaceGitStatus)
    ], Codespace.prototype, "gitStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], Codespace.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "idle_timeout_minutes" }),
        __metadata("design:type", Number)
    ], Codespace.prototype, "idleTimeoutMinutes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "idle_timeout_notice" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "idleTimeoutNotice", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "last_known_stop_notice" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "lastKnownStopNotice", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "last_used_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Codespace.prototype, "lastUsedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "location" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "location", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machine" }),
        (0, class_transformer_1.Type)(function () { return nullablecodespacemachine_1.NullableCodespaceMachine; }),
        __metadata("design:type", nullablecodespacemachine_1.NullableCodespaceMachine)
    ], Codespace.prototype, "machine", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machines_url" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "machinesUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "owner" }),
        (0, class_transformer_1.Type)(function () { return simpleuser_1.SimpleUser; }),
        __metadata("design:type", simpleuser_1.SimpleUser)
    ], Codespace.prototype, "owner", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pending_operation" }),
        __metadata("design:type", Boolean)
    ], Codespace.prototype, "pendingOperation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pending_operation_disabled_reason" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "pendingOperationDisabledReason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prebuild" }),
        __metadata("design:type", Boolean)
    ], Codespace.prototype, "prebuild", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "publish_url" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "publishUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pulls_url" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "pullsUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recent_folders" }),
        __metadata("design:type", Array)
    ], Codespace.prototype, "recentFolders", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "repository" }),
        (0, class_transformer_1.Type)(function () { return minimalrepository_1.MinimalRepository; }),
        __metadata("design:type", minimalrepository_1.MinimalRepository)
    ], Codespace.prototype, "repository", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "retention_expires_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Codespace.prototype, "retentionExpiresAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "retention_period_minutes" }),
        __metadata("design:type", Number)
    ], Codespace.prototype, "retentionPeriodMinutes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runtime_constraints" }),
        (0, class_transformer_1.Type)(function () { return CodespaceRuntimeConstraints; }),
        __metadata("design:type", CodespaceRuntimeConstraints)
    ], Codespace.prototype, "runtimeConstraints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start_url" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "startUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stop_url" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "stopUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updated_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Codespace.prototype, "updatedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "web_url" }),
        __metadata("design:type", String)
    ], Codespace.prototype, "webUrl", void 0);
    return Codespace;
}(utils_1.SpeakeasyBase));
exports.Codespace = Codespace;
