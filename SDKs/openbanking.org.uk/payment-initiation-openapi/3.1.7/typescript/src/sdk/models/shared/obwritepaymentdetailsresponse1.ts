/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Links } from "./links";
import { Meta } from "./meta";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Status of a transfe, as assigned by the transaction administrator.
 */
export enum OBWritePaymentDetailsResponse1DataPaymentStatusStatusEnum {
  Accepted = "Accepted",
  AcceptedCancellationRequest = "AcceptedCancellationRequest",
  AcceptedCreditSettlementCompleted = "AcceptedCreditSettlementCompleted",
  AcceptedCustomerProfile = "AcceptedCustomerProfile",
  AcceptedFundsChecked = "AcceptedFundsChecked",
  AcceptedSettlementCompleted = "AcceptedSettlementCompleted",
  AcceptedSettlementInProcess = "AcceptedSettlementInProcess",
  AcceptedTechnicalValidation = "AcceptedTechnicalValidation",
  AcceptedWithChange = "AcceptedWithChange",
  AcceptedWithoutPosting = "AcceptedWithoutPosting",
  Cancelled = "Cancelled",
  NoCancellationProcess = "NoCancellationProcess",
  PartiallyAcceptedCancellationRequest = "PartiallyAcceptedCancellationRequest",
  PartiallyAcceptedTechnicalCorrect = "PartiallyAcceptedTechnicalCorrect",
  PaymentCancelled = "PaymentCancelled",
  Pending = "Pending",
  PendingCancellationRequest = "PendingCancellationRequest",
  Received = "Received",
  Rejected = "Rejected",
  RejectedCancellationRequest = "RejectedCancellationRequest",
}

/**
 * Reason Code provided for the status of a transfer.
 */
export enum OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetailStatusReasonEnum {
  Cancelled = "Cancelled",
  PendingFailingSettlement = "PendingFailingSettlement",
  PendingSettlement = "PendingSettlement",
  Proprietary = "Proprietary",
  ProprietaryRejection = "ProprietaryRejection",
  Suspended = "Suspended",
  Unmatched = "Unmatched",
}

/**
 * Payment status details as per underlying Payment Rail.
 */
export class OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetail extends SpeakeasyBase {
  /**
   * User community specific instrument.
   *
   * @remarks
   * Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LocalInstrument" })
  localInstrument?: string;

  /**
   * Status of a transfer, as assigned by the transaction administrator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status: string;

  /**
   * Reason Code provided for the status of a transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatusReason" })
  statusReason?: OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetailStatusReasonEnum;

  /**
   * Reason provided for the status of a transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatusReasonDescription" })
  statusReasonDescription?: string;
}

/**
 * Payment status details.
 */
export class OBWritePaymentDetailsResponse1DataPaymentStatus extends SpeakeasyBase {
  /**
   * Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentTransactionId" })
  paymentTransactionId: string;

  /**
   * Status of a transfe, as assigned by the transaction administrator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status: OBWritePaymentDetailsResponse1DataPaymentStatusStatusEnum;

  /**
   * Payment status details as per underlying Payment Rail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatusDetail" })
  @Type(() => OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetail)
  statusDetail?: OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetail;

  /**
   * Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatusUpdateDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  statusUpdateDateTime: Date;
}

export class OBWritePaymentDetailsResponse1Data extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: OBWritePaymentDetailsResponse1DataPaymentStatus,
  })
  @Expose({ name: "PaymentStatus" })
  @Type(() => OBWritePaymentDetailsResponse1DataPaymentStatus)
  paymentStatus?: OBWritePaymentDetailsResponse1DataPaymentStatus[];
}

/**
 * Payment Details Read
 */
export class OBWritePaymentDetailsResponse1 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Data" })
  @Type(() => OBWritePaymentDetailsResponse1Data)
  data: OBWritePaymentDetailsResponse1Data;

  /**
   * Links relevant to the payload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Links" })
  @Type(() => Links)
  links?: Links;

  /**
   * Meta Data relevant to the payload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Meta" })
  @Type(() => Meta)
  meta?: Meta;
}
