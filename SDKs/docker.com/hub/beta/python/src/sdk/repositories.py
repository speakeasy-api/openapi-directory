"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Repositories:
    r"""The repository endpoints allow you to manage your repository's
    configuration like description.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_namespaces_namespace_repositories_repository_tags(self, request: operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsRequest) -> operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsResponse:
        r"""List repository tags"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsRequest, base_url, '/v2/namespaces/{namespace}/repositories/{repository}/tags', request)
        
        query_params = utils.get_query_params(operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedTags])
                res.paginated_tags = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v2_namespaces_namespace_repositories_repository_tags_tag_(self, request: operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest) -> operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse:
        r"""Read repository tag"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest, base_url, '/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def head_v2_namespaces_namespace_repositories_repository_tags(self, request: operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsRequest) -> operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsResponse:
        r"""Check repository tags"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsRequest, base_url, '/v2/namespaces/{namespace}/repositories/{repository}/tags', request)
        
        
        client = self._client
        
        http_res = client.request('HEAD', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def head_v2_namespaces_namespace_repositories_repository_tags_tag_(self, request: operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest) -> operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse:
        r"""Check repository tag"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest, base_url, '/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}', request)
        
        
        client = self._client
        
        http_res = client.request('HEAD', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    