/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListTaskServerList = ["https://taskrouter.twilio.com"] as const;

export class ListTaskSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListTaskRequest extends SpeakeasyBase {
  /**
   * The `assignment_status` of the Tasks you want to read. Can be: `pending`, `reserved`, `assigned`, `canceled`, `wrapping`, or `completed`. Returns all Tasks in the Workspace with the specified `assignment_status`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AssignmentStatus",
  })
  assignmentStatus?: string[];

  /**
   * The attributes of the Tasks to read. Returns the Tasks that match the attributes specified in this parameter.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EvaluateTaskAttributes",
  })
  evaluateTaskAttributes?: string;

  /**
   * Whether to read Tasks with addons. If `true`, returns only Tasks with addons. If `false`, returns only Tasks without addons.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=HasAddons",
  })
  hasAddons?: boolean;

  /**
   * How to order the returned Task resources. y default, Tasks are sorted by ascending DateCreated. This value is specified as: `Attribute:Order`, where `Attribute` can be either `Priority` or `DateCreated` and `Order` can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered in descending order of their Priority. Multiple sort orders can be specified in a comma-separated list such as `Priority:desc,DateCreated:asc`, which returns the Tasks in descending Priority order and ascending DateCreated Order.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Ordering",
  })
  ordering?: string;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;

  /**
   * The priority value of the Tasks to read. Returns the list of all Tasks in the Workspace with the specified priority.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Priority",
  })
  priority?: number;

  /**
   * The `friendly_name` of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this friendly name.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TaskQueueName",
  })
  taskQueueName?: string;

  /**
   * The SID of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this SID.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TaskQueueSid",
  })
  taskQueueSid?: string;

  /**
   * The friendly name of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this friendly name.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=WorkflowName",
  })
  workflowName?: string;

  /**
   * The SID of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this SID.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=WorkflowSid",
  })
  workflowSid?: string;

  /**
   * The SID of the Workspace with the Tasks to read.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkspaceSid",
  })
  workspaceSid: string;
}

export class ListTaskListTaskResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "first_page_url" })
  firstPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_url" })
  nextPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_url" })
  previousPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * OK
 */
export class ListTaskListTaskResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ListTaskListTaskResponseMeta)
  meta?: ListTaskListTaskResponseMeta;

  @SpeakeasyMetadata({ elemType: shared.TaskrouterV1WorkspaceTask })
  @Expose({ name: "tasks" })
  @Type(() => shared.TaskrouterV1WorkspaceTask)
  tasks?: shared.TaskrouterV1WorkspaceTask[];
}

export class ListTaskResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listTaskResponse?: ListTaskListTaskResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
