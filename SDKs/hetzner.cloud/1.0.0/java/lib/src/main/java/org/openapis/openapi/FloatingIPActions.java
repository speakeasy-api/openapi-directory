/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class FloatingIPActions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public FloatingIPActions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get all Actions for a Floating IP
     * Returns all Action objects for a Floating IP. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFloatingIpsIdActionsResponse getFloatingIpsIdActions(org.openapis.openapi.models.operations.GetFloatingIpsIdActionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetFloatingIpsIdActionsRequest.class, baseUrl, "/floating_ips/{id}/actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetFloatingIpsIdActionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFloatingIpsIdActionsResponse res = new org.openapis.openapi.models.operations.GetFloatingIpsIdActionsResponse(contentType, httpRes.statusCode()) {{
            getFloatingIpsIdActions200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetFloatingIpsIdActions200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetFloatingIpsIdActions200ApplicationJSON.class);
                res.getFloatingIpsIdActions200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get an Action for a Floating IP
     * Returns a specific Action object for a Floating IP.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFloatingIpsIdActionsActionIdResponse getFloatingIpsIdActionsActionId(org.openapis.openapi.models.operations.GetFloatingIpsIdActionsActionIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetFloatingIpsIdActionsActionIdRequest.class, baseUrl, "/floating_ips/{id}/actions/{action_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFloatingIpsIdActionsActionIdResponse res = new org.openapis.openapi.models.operations.GetFloatingIpsIdActionsActionIdResponse(contentType, httpRes.statusCode()) {{
            actionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetFloatingIpsIdActionsActionIdActionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetFloatingIpsIdActionsActionIdActionResponse.class);
                res.actionResponse = out;
            }
        }

        return res;
    }

    /**
     * Assign a Floating IP to a Server
     * Assigns a Floating IP to a Server.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostFloatingIpsIdActionsAssignResponse postFloatingIpsIdActionsAssign(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsAssignRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsAssignRequest.class, baseUrl, "/floating_ips/{id}/actions/assign", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostFloatingIpsIdActionsAssignResponse res = new org.openapis.openapi.models.operations.PostFloatingIpsIdActionsAssignResponse(contentType, httpRes.statusCode()) {{
            actionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostFloatingIpsIdActionsAssignActionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostFloatingIpsIdActionsAssignActionResponse.class);
                res.actionResponse = out;
            }
        }

        return res;
    }

    /**
     * Change reverse DNS entry for a Floating IP
     * Changes the hostname that will appear when getting the hostname belonging to this Floating IP.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeDnsPtrResponse postFloatingIpsIdActionsChangeDnsPtr(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeDnsPtrRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeDnsPtrRequest.class, baseUrl, "/floating_ips/{id}/actions/change_dns_ptr", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeDnsPtrResponse res = new org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeDnsPtrResponse(contentType, httpRes.statusCode()) {{
            actionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeDnsPtrActionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeDnsPtrActionResponse.class);
                res.actionResponse = out;
            }
        }

        return res;
    }

    /**
     * Change Floating IP Protection
     * Changes the protection configuration of the Floating IP.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeProtectionResponse postFloatingIpsIdActionsChangeProtection(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeProtectionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeProtectionRequest.class, baseUrl, "/floating_ips/{id}/actions/change_protection", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeProtectionResponse res = new org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeProtectionResponse(contentType, httpRes.statusCode()) {{
            actionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeProtectionActionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostFloatingIpsIdActionsChangeProtectionActionResponse.class);
                res.actionResponse = out;
            }
        }

        return res;
    }

    /**
     * Unassign a Floating IP
     * Unassigns a Floating IP, resulting in it being unreachable. You may assign it to a Server again at a later time.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostFloatingIpsIdActionsUnassignResponse postFloatingIpsIdActionsUnassign(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsUnassignRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostFloatingIpsIdActionsUnassignRequest.class, baseUrl, "/floating_ips/{id}/actions/unassign", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostFloatingIpsIdActionsUnassignResponse res = new org.openapis.openapi.models.operations.PostFloatingIpsIdActionsUnassignResponse(contentType, httpRes.statusCode()) {{
            actionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostFloatingIpsIdActionsUnassignActionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostFloatingIpsIdActionsUnassignActionResponse.class);
                res.actionResponse = out;
            }
        }

        return res;
    }
}