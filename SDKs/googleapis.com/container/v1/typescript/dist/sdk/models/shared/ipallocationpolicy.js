"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPAllocationPolicyInput = exports.IPAllocationPolicy = exports.IPAllocationPolicyStackTypeEnum = exports.IPAllocationPolicyIpv6AccessTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The ipv6 access type (internal or external) when create_subnetwork is true
 */
var IPAllocationPolicyIpv6AccessTypeEnum;
(function (IPAllocationPolicyIpv6AccessTypeEnum) {
    IPAllocationPolicyIpv6AccessTypeEnum["Ipv6AccessTypeUnspecified"] = "IPV6_ACCESS_TYPE_UNSPECIFIED";
    IPAllocationPolicyIpv6AccessTypeEnum["Internal"] = "INTERNAL";
    IPAllocationPolicyIpv6AccessTypeEnum["External"] = "EXTERNAL";
})(IPAllocationPolicyIpv6AccessTypeEnum = exports.IPAllocationPolicyIpv6AccessTypeEnum || (exports.IPAllocationPolicyIpv6AccessTypeEnum = {}));
/**
 * The IP stack type of the cluster
 */
var IPAllocationPolicyStackTypeEnum;
(function (IPAllocationPolicyStackTypeEnum) {
    IPAllocationPolicyStackTypeEnum["StackTypeUnspecified"] = "STACK_TYPE_UNSPECIFIED";
    IPAllocationPolicyStackTypeEnum["Ipv4"] = "IPV4";
    IPAllocationPolicyStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
})(IPAllocationPolicyStackTypeEnum = exports.IPAllocationPolicyStackTypeEnum || (exports.IPAllocationPolicyStackTypeEnum = {}));
/**
 * Configuration for controlling how IPs are allocated in the cluster.
 */
var IPAllocationPolicy = /** @class */ (function (_super) {
    __extends(IPAllocationPolicy, _super);
    function IPAllocationPolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clusterIpv4Cidr" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "clusterIpv4Cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clusterIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "clusterIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clusterSecondaryRangeName" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "clusterSecondaryRangeName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createSubnetwork" }),
        __metadata("design:type", Boolean)
    ], IPAllocationPolicy.prototype, "createSubnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6AccessType" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "ipv6AccessType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nodeIpv4Cidr" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "nodeIpv4Cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nodeIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "nodeIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "servicesIpv4Cidr" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "servicesIpv4Cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "servicesIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "servicesIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "servicesIpv6CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "servicesIpv6CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "servicesSecondaryRangeName" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "servicesSecondaryRangeName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetIpv6CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "subnetIpv6CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetworkName" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "subnetworkName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tpuIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicy.prototype, "tpuIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useIpAliases" }),
        __metadata("design:type", Boolean)
    ], IPAllocationPolicy.prototype, "useIpAliases", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useRoutes" }),
        __metadata("design:type", Boolean)
    ], IPAllocationPolicy.prototype, "useRoutes", void 0);
    return IPAllocationPolicy;
}(utils_1.SpeakeasyBase));
exports.IPAllocationPolicy = IPAllocationPolicy;
/**
 * Configuration for controlling how IPs are allocated in the cluster.
 */
var IPAllocationPolicyInput = /** @class */ (function (_super) {
    __extends(IPAllocationPolicyInput, _super);
    function IPAllocationPolicyInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clusterIpv4Cidr" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "clusterIpv4Cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clusterIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "clusterIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clusterSecondaryRangeName" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "clusterSecondaryRangeName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createSubnetwork" }),
        __metadata("design:type", Boolean)
    ], IPAllocationPolicyInput.prototype, "createSubnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6AccessType" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "ipv6AccessType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nodeIpv4Cidr" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "nodeIpv4Cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nodeIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "nodeIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "servicesIpv4Cidr" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "servicesIpv4Cidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "servicesIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "servicesIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "servicesSecondaryRangeName" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "servicesSecondaryRangeName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetworkName" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "subnetworkName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tpuIpv4CidrBlock" }),
        __metadata("design:type", String)
    ], IPAllocationPolicyInput.prototype, "tpuIpv4CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useIpAliases" }),
        __metadata("design:type", Boolean)
    ], IPAllocationPolicyInput.prototype, "useIpAliases", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useRoutes" }),
        __metadata("design:type", Boolean)
    ], IPAllocationPolicyInput.prototype, "useRoutes", void 0);
    return IPAllocationPolicyInput;
}(utils_1.SpeakeasyBase));
exports.IPAllocationPolicyInput = IPAllocationPolicyInput;
