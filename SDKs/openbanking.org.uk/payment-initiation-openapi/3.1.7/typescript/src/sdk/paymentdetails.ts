/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PaymentDetails {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Payment Details
   */
  getDomesticPaymentsDomesticPaymentIdPaymentDetails(
    req: operations.GetDomesticPaymentsDomesticPaymentIdPaymentDetailsRequest,
    security: operations.GetDomesticPaymentsDomesticPaymentIdPaymentDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDomesticPaymentsDomesticPaymentIdPaymentDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetDomesticPaymentsDomesticPaymentIdPaymentDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/domestic-payments/{DomesticPaymentId}/payment-details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetDomesticPaymentsDomesticPaymentIdPaymentDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDomesticPaymentsDomesticPaymentIdPaymentDetailsResponse =
        new operations.GetDomesticPaymentsDomesticPaymentIdPaymentDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Payment Details
   */
  getDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetails(
    req: operations.GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsRequest,
    security: operations.GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsResponse =
        new operations.GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Payment Details
   */
  getDomesticStandingOrdersDomesticStandingOrderIdPaymentDetails(
    req: operations.GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsRequest,
    security: operations.GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/domestic-standing-orders/{DomesticStandingOrderId}/payment-details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsResponse =
        new operations.GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Payment Details
   */
  getFilePaymentsFilePaymentIdPaymentDetails(
    req: operations.GetFilePaymentsFilePaymentIdPaymentDetailsRequest,
    security: operations.GetFilePaymentsFilePaymentIdPaymentDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFilePaymentsFilePaymentIdPaymentDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFilePaymentsFilePaymentIdPaymentDetailsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-payments/{FilePaymentId}/payment-details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetFilePaymentsFilePaymentIdPaymentDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFilePaymentsFilePaymentIdPaymentDetailsResponse =
        new operations.GetFilePaymentsFilePaymentIdPaymentDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Payment Details
   */
  getInternationalPaymentsInternationalPaymentIdPaymentDetails(
    req: operations.GetInternationalPaymentsInternationalPaymentIdPaymentDetailsRequest,
    security: operations.GetInternationalPaymentsInternationalPaymentIdPaymentDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInternationalPaymentsInternationalPaymentIdPaymentDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetInternationalPaymentsInternationalPaymentIdPaymentDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/international-payments/{InternationalPaymentId}/payment-details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetInternationalPaymentsInternationalPaymentIdPaymentDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInternationalPaymentsInternationalPaymentIdPaymentDetailsResponse =
        new operations.GetInternationalPaymentsInternationalPaymentIdPaymentDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Payment Details
   */
  getInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetails(
    req: operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsRequest,
    security: operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsResponse =
        new operations.GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Payment Details
   */
  getInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetails(
    req: operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsRequest,
    security: operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsResponse =
        new operations.GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWritePaymentDetailsResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBWritePaymentDetailsResponse1
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }
}
