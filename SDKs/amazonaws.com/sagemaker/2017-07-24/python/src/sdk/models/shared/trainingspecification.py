"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channelspecification as shared_channelspecification
from ..shared import hyperparameterspecification as shared_hyperparameterspecification
from ..shared import hyperparametertuningjobobjective as shared_hyperparametertuningjobobjective
from ..shared import metricdefinition as shared_metricdefinition
from ..shared import traininginstancetype_enum as shared_traininginstancetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrainingSpecification:
    r"""Defines how the algorithm is used for a training job."""
    
    supported_training_instance_types: list[shared_traininginstancetype_enum.TrainingInstanceTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedTrainingInstanceTypes') }})  
    training_channels: list[shared_channelspecification.ChannelSpecification] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingChannels') }})  
    training_image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingImage') }})  
    metric_definitions: Optional[list[shared_metricdefinition.MetricDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricDefinitions'), 'exclude': lambda f: f is None }})  
    supported_hyper_parameters: Optional[list[shared_hyperparameterspecification.HyperParameterSpecification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedHyperParameters'), 'exclude': lambda f: f is None }})  
    supported_tuning_job_objective_metrics: Optional[list[shared_hyperparametertuningjobobjective.HyperParameterTuningJobObjective]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedTuningJobObjectiveMetrics'), 'exclude': lambda f: f is None }})  
    supports_distributed_training: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportsDistributedTraining'), 'exclude': lambda f: f is None }})  
    training_image_digest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingImageDigest'), 'exclude': lambda f: f is None }})  
    