/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HookResponse } from "./hookresponse";
import { Expose, Transform, Type } from "class-transformer";

export class HookConfig extends SpeakeasyBase {
  /**
   * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_type" })
  contentType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "digest" })
  digest?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insecure_ssl" })
  insecureSsl?: any;

  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "room" })
  room?: string;

  /**
   * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads/#delivery-headers).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subdomain" })
  subdomain?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "token" })
  token?: string;

  /**
   * The URL to which the payloads will be delivered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * Webhooks for repositories.
 */
export class Hook extends SpeakeasyBase {
  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  @Type(() => HookConfig)
  config: HookConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "deliveries_url" })
  deliveriesUrl?: string;

  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "events" })
  events: string[];

  /**
   * Unique identifier of the webhook.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "last_response" })
  @Type(() => HookResponse)
  lastResponse: HookResponse;

  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ping_url" })
  pingUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "test_url" })
  testUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
