<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a model in Firebase ML. The longrunning operation will eventually return a Model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateResponse
     */
	public function firebasemlProjectsModelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/models', \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a model
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteResponse
     */
	public function firebasemlProjectsModelsDelete(
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets Download information for a model. This is meant for downloading model resources onto devices. It gives very limited information about the model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDownloadResponse
     */
	public function firebasemlProjectsModelsDownload(
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}:download', \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDownloadRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->downloadModelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DownloadModelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the models
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListResponse
     */
	public function firebasemlProjectsModelsList(
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/models', \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a model. The longrunning operation will eventually return a Model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchResponse
     */
	public function firebasemlProjectsModelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsModelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetResponse
     */
	public function firebasemlProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasemlProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}