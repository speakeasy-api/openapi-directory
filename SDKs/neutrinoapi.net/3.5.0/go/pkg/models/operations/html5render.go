// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type Html5RenderRequestBody struct {
	// The HTML content. This can be either a URL to load from, a file upload or an HTML content string
	Content string `form:"name=content"`
	// Inject custom CSS into the HTML. e.g. 'body { background-color: red;}'
	CSS *string `form:"name=css"`
	// Set the footer font. Fonts available: Times, Courier, Helvetica, Arial
	FooterFont *string `form:"name=footer-font"`
	// Set the footer font size (in pt)
	FooterFontSize *int `form:"name=footer-font-size"`
	// Draw a full page width horizontal line above your footer
	FooterLine *bool `form:"name=footer-line"`
	// The height of your footer (in mm)
	FooterSize *int `form:"name=footer-size"`
	// Text to print to the center header of each page
	FooterTextCenter *string `form:"name=footer-text-center"`
	// Text to print to the left-hand side footer of each page. e.g. 'My footer - Page {page_number} of {total_pages}'
	FooterTextLeft *string `form:"name=footer-text-left"`
	// Text to print to the right-hand side header of each page
	FooterTextRight *string `form:"name=footer-text-right"`
	// Which format to output, available options are: PDF, PNG, JPG
	Format *string `form:"name=format"`
	// Generate real (fillable) PDF forms from HTML forms
	Forms *bool `form:"name=forms"`
	// Render the final document in grayscale
	Grayscale *bool `form:"name=grayscale"`
	// Set the header font. Fonts available: Times, Courier, Helvetica, Arial
	HeaderFont *string `form:"name=header-font"`
	// Set the header font size (in pt)
	HeaderFontSize *int `form:"name=header-font-size"`
	// Draw a full page width horizontal line under your header
	HeaderLine *bool `form:"name=header-line"`
	// The height of your header (in mm)
	HeaderSize *int `form:"name=header-size"`
	// Text to print to the center header of each page
	HeaderTextCenter *string `form:"name=header-text-center"`
	// Text to print to the left-hand side header of each page. e.g. 'My header - Page {page_number} of {total_pages}'
	HeaderTextLeft *string `form:"name=header-text-left"`
	// Text to print to the right-hand side header of each page
	HeaderTextRight *string `form:"name=header-text-right"`
	// If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content
	ImageHeight *int `form:"name=image-height"`
	// If rendering to an image format (PNG or JPG) use this image width (in pixels)
	ImageWidth *int `form:"name=image-width"`
	// Set the document to landscape orientation
	Landscape *bool `form:"name=landscape"`
	// The document margin (in mm)
	Margin *int `form:"name=margin"`
	// The document bottom margin (in mm)
	MarginBottom *int `form:"name=margin-bottom"`
	// The document left margin (in mm)
	MarginLeft *int `form:"name=margin-left"`
	// The document right margin (in mm)
	MarginRight *int `form:"name=margin-right"`
	// The document top margin (in mm)
	MarginTop *int `form:"name=margin-top"`
	// Use @media print CSS styles to render the document
	MediaPrint *bool `form:"name=media-print"`
	// Activate all @media queries before rendering. This can be useful if you wan't to render the mobile version of a responsive website
	MediaQueries *bool `form:"name=media-queries"`
	// Set the PDF page height explicitly (in mm)
	PageHeight *int `form:"name=page-height"`
	// Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter
	PageSize *string `form:"name=page-size"`
	// Set the PDF page width explicitly (in mm)
	PageWidth *int `form:"name=page-width"`
	// Number of milliseconds to wait before rendering the page (can be useful for pages with animations etc)
	RenderDelay *int `form:"name=render-delay"`
	// The document title
	Title *string `form:"name=title"`
	// Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size)
	Zoom *float64 `form:"name=zoom"`
}

type Html5RenderRequest struct {
	Request Html5RenderRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
}

type Html5RenderResponse struct {
	// Your API request has been rejected. Check error code for details
	APIError                                  *shared.APIError
	ContentType                               string
	Html5Render200ApplicationJSONBinaryString []byte
	StatusCode                                int
	RawResponse                               *http.Response
}
