/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ResourceStatistics - Statistics related to resource consumption by compute nodes in a pool.
 */
public class ResourceStatistics {
    /**
     * The average CPU usage across all nodes in the pool (percentage per node).
     */
    @JsonProperty("avgCPUPercentage")
    public Double avgCPUPercentage;

    public ResourceStatistics withAvgCPUPercentage(Double avgCPUPercentage) {
        this.avgCPUPercentage = avgCPUPercentage;
        return this;
    }
    
    /**
     * The average used disk space in GiB across all nodes in the pool.
     */
    @JsonProperty("avgDiskGiB")
    public Double avgDiskGiB;

    public ResourceStatistics withAvgDiskGiB(Double avgDiskGiB) {
        this.avgDiskGiB = avgDiskGiB;
        return this;
    }
    
    /**
     * The average memory usage in GiB across all nodes in the pool.
     */
    @JsonProperty("avgMemoryGiB")
    public Double avgMemoryGiB;

    public ResourceStatistics withAvgMemoryGiB(Double avgMemoryGiB) {
        this.avgMemoryGiB = avgMemoryGiB;
        return this;
    }
    
    /**
     * The total amount of data in GiB of disk reads across all nodes in the pool.
     */
    @JsonProperty("diskReadGiB")
    public Double diskReadGiB;

    public ResourceStatistics withDiskReadGiB(Double diskReadGiB) {
        this.diskReadGiB = diskReadGiB;
        return this;
    }
    
    /**
     * The total number of disk read operations across all nodes in the pool.
     */
    @JsonProperty("diskReadIOps")
    public Long diskReadIOps;

    public ResourceStatistics withDiskReadIOps(Long diskReadIOps) {
        this.diskReadIOps = diskReadIOps;
        return this;
    }
    
    /**
     * The total amount of data in GiB of disk writes across all nodes in the pool.
     */
    @JsonProperty("diskWriteGiB")
    public Double diskWriteGiB;

    public ResourceStatistics withDiskWriteGiB(Double diskWriteGiB) {
        this.diskWriteGiB = diskWriteGiB;
        return this;
    }
    
    /**
     * The total number of disk write operations across all nodes in the pool.
     */
    @JsonProperty("diskWriteIOps")
    public Long diskWriteIOps;

    public ResourceStatistics withDiskWriteIOps(Long diskWriteIOps) {
        this.diskWriteIOps = diskWriteIOps;
        return this;
    }
    
    /**
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateTime")
    public OffsetDateTime lastUpdateTime;

    public ResourceStatistics withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * The total amount of data in GiB of network reads across all nodes in the pool.
     */
    @JsonProperty("networkReadGiB")
    public Double networkReadGiB;

    public ResourceStatistics withNetworkReadGiB(Double networkReadGiB) {
        this.networkReadGiB = networkReadGiB;
        return this;
    }
    
    /**
     * The total amount of data in GiB of network writes across all nodes in the pool.
     */
    @JsonProperty("networkWriteGiB")
    public Double networkWriteGiB;

    public ResourceStatistics withNetworkWriteGiB(Double networkWriteGiB) {
        this.networkWriteGiB = networkWriteGiB;
        return this;
    }
    
    /**
     * The peak used disk space in GiB across all nodes in the pool.
     */
    @JsonProperty("peakDiskGiB")
    public Double peakDiskGiB;

    public ResourceStatistics withPeakDiskGiB(Double peakDiskGiB) {
        this.peakDiskGiB = peakDiskGiB;
        return this;
    }
    
    /**
     * The peak memory usage in GiB across all nodes in the pool.
     */
    @JsonProperty("peakMemoryGiB")
    public Double peakMemoryGiB;

    public ResourceStatistics withPeakMemoryGiB(Double peakMemoryGiB) {
        this.peakMemoryGiB = peakMemoryGiB;
        return this;
    }
    
    /**
     * The start time of the time range covered by the statistics.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public ResourceStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    public ResourceStatistics(@JsonProperty("avgCPUPercentage") Double avgCPUPercentage, @JsonProperty("avgDiskGiB") Double avgDiskGiB, @JsonProperty("avgMemoryGiB") Double avgMemoryGiB, @JsonProperty("diskReadGiB") Double diskReadGiB, @JsonProperty("diskReadIOps") Long diskReadIOps, @JsonProperty("diskWriteGiB") Double diskWriteGiB, @JsonProperty("diskWriteIOps") Long diskWriteIOps, @JsonProperty("lastUpdateTime") OffsetDateTime lastUpdateTime, @JsonProperty("networkReadGiB") Double networkReadGiB, @JsonProperty("networkWriteGiB") Double networkWriteGiB, @JsonProperty("peakDiskGiB") Double peakDiskGiB, @JsonProperty("peakMemoryGiB") Double peakMemoryGiB, @JsonProperty("startTime") OffsetDateTime startTime) {
        this.avgCPUPercentage = avgCPUPercentage;
        this.avgDiskGiB = avgDiskGiB;
        this.avgMemoryGiB = avgMemoryGiB;
        this.diskReadGiB = diskReadGiB;
        this.diskReadIOps = diskReadIOps;
        this.diskWriteGiB = diskWriteGiB;
        this.diskWriteIOps = diskWriteIOps;
        this.lastUpdateTime = lastUpdateTime;
        this.networkReadGiB = networkReadGiB;
        this.networkWriteGiB = networkWriteGiB;
        this.peakDiskGiB = peakDiskGiB;
        this.peakMemoryGiB = peakMemoryGiB;
        this.startTime = startTime;
  }
}
