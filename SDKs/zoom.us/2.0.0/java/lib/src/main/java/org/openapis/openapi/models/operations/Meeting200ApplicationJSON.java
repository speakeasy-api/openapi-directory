/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Meeting200ApplicationJSON - Meeting object.
 */
public class Meeting200ApplicationJSON {
    /**
     * Meeting description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agenda")
    public String agenda;
    public Meeting200ApplicationJSON withAgenda(String agenda) {
        this.agenda = agenda;
        return this;
    }
    
    /**
     * Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assistant_id")
    public String assistantId;
    public Meeting200ApplicationJSON withAssistantId(String assistantId) {
        this.assistantId = assistantId;
        return this;
    }
    
    /**
     * Time of creation. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Meeting200ApplicationJSON withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Meeting duration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public Meeting200ApplicationJSON withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Encrypted passcode for third party endpoints (H323/SIP).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encrypted_password")
    public String encryptedPassword;
    public Meeting200ApplicationJSON withEncryptedPassword(String encryptedPassword) {
        this.encryptedPassword = encryptedPassword;
        return this;
    }
    
    /**
     * H.323/SIP room system passcode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("h323_password")
    public String h323Password;
    public Meeting200ApplicationJSON withH323Password(String h323Password) {
        this.h323Password = h323Password;
        return this;
    }
    
    /**
     * Email address of the meeting host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_email")
    public String hostEmail;
    public Meeting200ApplicationJSON withHostEmail(String hostEmail) {
        this.hostEmail = hostEmail;
        return this;
    }
    
    /**
     * ID of the user who is set as host of meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_id")
    public String hostId;
    public Meeting200ApplicationJSON withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Meeting200ApplicationJSON withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * URL for participants to join the meeting. This URL should only be shared with users that you would like to invite for the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_url")
    public String joinUrl;
    public Meeting200ApplicationJSON withJoinUrl(String joinUrl) {
        this.joinUrl = joinUrl;
        return this;
    }
    
    /**
     * Array of occurrence objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("occurrences")
    public Meeting200ApplicationJSONOccurrences[] occurrences;
    public Meeting200ApplicationJSON withOccurrences(Meeting200ApplicationJSONOccurrences[] occurrences) {
        this.occurrences = occurrences;
        return this;
    }
    
    /**
     * Meeting passcode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public Meeting200ApplicationJSON withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Personal Meeting Id. Only used for scheduled meetings and recurring meetings with no fixed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pmi")
    public Long pmi;
    public Meeting200ApplicationJSON withPmi(Long pmi) {
        this.pmi = pmi;
        return this;
    }
    
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurrence")
    public Meeting200ApplicationJSONRecurrence recurrence;
    public Meeting200ApplicationJSON withRecurrence(Meeting200ApplicationJSONRecurrence recurrence) {
        this.recurrence = recurrence;
        return this;
    }
    
    /**
     * Meeting settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    public Meeting200ApplicationJSONSettings settings;
    public Meeting200ApplicationJSON withSettings(Meeting200ApplicationJSONSettings settings) {
        this.settings = settings;
        return this;
    }
    
    /**
     * Meeting start time in GMT/UTC. Start time will not be returned if the meeting is an **instant** meeting. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public Meeting200ApplicationJSON withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * &lt;br&gt;&lt;aside&gt;The &lt;code&gt;start_url&lt;/code&gt; of a Meeting is a URL using which a host or an alternative host can start the Meeting. 
     * 
     * The expiration time for the &lt;code&gt;start_url&lt;/code&gt; field listed in the response of [Create a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate) is two hours for all regular users. 
     * 	
     * For users created using the &lt;code&gt;custCreate&lt;/code&gt; option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the &lt;code&gt;start_url&lt;/code&gt; field is 90 days.
     * 	
     * For security reasons, to retrieve the updated value for the &lt;code&gt;start_url&lt;/code&gt; field programmatically (after the expiry time), you must call the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and refer to the value of the &lt;code&gt;start_url&lt;/code&gt; field in the response.&lt;/aside&gt;&lt;br&gt;This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting as anyone with this URL will be able to login to the Zoom Client as the host of the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_url")
    public String startUrl;
    public Meeting200ApplicationJSON withStartUrl(String startUrl) {
        this.startUrl = startUrl;
        return this;
    }
    
    /**
     * Meeting status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Meeting200ApplicationJSONStatusEnum status;
    public Meeting200ApplicationJSON withStatus(Meeting200ApplicationJSONStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Timezone to format the meeting start time on the .
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public Meeting200ApplicationJSON withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public Meeting200ApplicationJSON withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Tracking fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_fields")
    public Meeting200ApplicationJSONTrackingFields[] trackingFields;
    public Meeting200ApplicationJSON withTrackingFields(Meeting200ApplicationJSONTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * Meeting Types:&lt;br&gt;`1` - Instant meeting.&lt;br&gt;`2` - Scheduled meeting.&lt;br&gt;`3` - Recurring meeting with no fixed time.&lt;br&gt;`4` - PMI Meeting&lt;br&gt;
     * `8` - Recurring meeting with a fixed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public Meeting200ApplicationJSONTypeEnum type;
    public Meeting200ApplicationJSON withType(Meeting200ApplicationJSONTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Unique meeting ID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). You can retrieve a list of UUIDs from past meeting instances using [this API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/pastmeetings) . Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public Meeting200ApplicationJSON withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
