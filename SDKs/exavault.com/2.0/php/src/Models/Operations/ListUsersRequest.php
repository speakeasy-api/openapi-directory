<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class ListUsersRequest
{
    /**
     * Email to search for. Ignored if `username` is provided. Supports wildcard searches
     * 
     * @var ?string $email
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=email')]
    public ?string $email = null;
    
    /**
     * Access token required to make the API call.
     * 
     * @var string $evAccessToken
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=ev-access-token')]
    public string $evAccessToken;
    
    /**
     * API key required to make the API call.
     * 
     * @var string $evApiKey
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=ev-api-key')]
    public string $evApiKey;
    
    /**
     * Resource identifier for user's home directory. Does not support wildcard searches.
     * 
     * @var ?string $homeResource
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=homeResource')]
    public ?string $homeResource = null;
    
    /**
     * Comma separated list of relationships to include in response. Valid options are **homeResource** and **ownerAccount**.
     * 
     * @var ?string $include
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include')]
    public ?string $include = null;
    
    /**
     * Number of users to return. Can be used for pagination.
     * 
     * @var ?int $limit
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=limit')]
    public ?int $limit = null;
    
    /**
     * Nickname to search for. Ignored if `username` is provided. Supports wildcard searches.
     * 
     * @var ?string $nickname
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=nickname')]
    public ?string $nickname = null;
    
    /**
     * Starting user record in the result set. Can be used for pagination.
     * 
     * @var ?int $offset
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=offset')]
    public ?int $offset = null;
    
    /**
     * Types of users to include the list. Ignored if `username` is provided. Valid options are **admin**, **master** and **user**
     * 
     * @var ?string $role
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=role')]
    public ?string $role = null;
    
    /**
     * Searches the nickname, email, role and homeDir fields for the provided value. Ignored if `username` is provided. Supports wildcard searches.
     * 
     * @var ?string $search
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=search')]
    public ?string $search = null;
    
    /**
     * Sort order or matching users. You can sort by multiple columns by separating sort options with a comma; the sort will be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.
     * 
     * 
     * Valid sort fields are: **nickname**, **username**, **email**, **homeDir** and **modified**
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * Whether a user is locked. Ignored if `username` is provided. **0** means user is locked, **1** means user is not locked. 
     * 
     * @var ?int $status
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=status')]
    public ?int $status = null;
    
    /**
     * The username of the user you are looking for. Only entries with the same username as this will be in the list of results. Does not support wildcard searches.
     * 
     * @var ?string $username
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=username')]
    public ?string $username = null;
    
	public function __construct()
	{
		$this->email = null;
		$this->evAccessToken = "";
		$this->evApiKey = "";
		$this->homeResource = null;
		$this->include = null;
		$this->limit = null;
		$this->nickname = null;
		$this->offset = null;
		$this->role = null;
		$this->search = null;
		$this->sort = null;
		$this->status = null;
		$this->username = null;
	}
}
