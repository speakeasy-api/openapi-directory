/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { AttackDetection } from "./attackdetection";
import { AuthenticationManagement } from "./authenticationmanagement";
import { ClientAttributeCertificate } from "./clientattributecertificate";
import { ClientInitialAccess } from "./clientinitialaccess";
import { ClientRegistrationPolicy } from "./clientregistrationpolicy";
import { ClientRoleMappings } from "./clientrolemappings";
import { Clients } from "./clients";
import { ClientScopes } from "./clientscopes";
import { Component } from "./component";
import { Groups } from "./groups";
import { IdentityProviders } from "./identityproviders";
import { Key } from "./key";
import * as shared from "./models/shared";
import { ProtocolMappers } from "./protocolmappers";
import { RealmsAdmin } from "./realmsadmin";
import { RoleMapper } from "./rolemapper";
import { Roles } from "./roles";
import { RolesByID } from "./rolesbyid";
import { Root } from "./root";
import { ScopeMappings } from "./scopemappings";
import { Users } from "./users";
import { UserStorageProvider } from "./userstorageprovider";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://keycloak.local"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is a REST API reference for the Keycloak Admin
 *
 * @see {@link https://github.com/keycloak/keycloak/tree/6.0.1/core/src/main/java/org/keycloak/representations} - Schema source code
 */
export class SDK {
  public attackDetection: AttackDetection;
  public authenticationManagement: AuthenticationManagement;
  public clientAttributeCertificate: ClientAttributeCertificate;
  public clientInitialAccess: ClientInitialAccess;
  public clientRegistrationPolicy: ClientRegistrationPolicy;
  public clientRoleMappings: ClientRoleMappings;
  public clientScopes: ClientScopes;
  public clients: Clients;
  public component: Component;
  public groups: Groups;
  public identityProviders: IdentityProviders;
  public key: Key;
  public protocolMappers: ProtocolMappers;
  public realmsAdmin: RealmsAdmin;
  public roleMapper: RoleMapper;
  public roles: Roles;
  public rolesByID: RolesByID;
  public root: Root;
  public scopeMappings: ScopeMappings;
  public userStorageProvider: UserStorageProvider;
  public users: Users;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.attackDetection = new AttackDetection(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.authenticationManagement = new AuthenticationManagement(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clientAttributeCertificate = new ClientAttributeCertificate(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clientInitialAccess = new ClientInitialAccess(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clientRegistrationPolicy = new ClientRegistrationPolicy(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clientRoleMappings = new ClientRoleMappings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clientScopes = new ClientScopes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clients = new Clients(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.component = new Component(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.groups = new Groups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.identityProviders = new IdentityProviders(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.key = new Key(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.protocolMappers = new ProtocolMappers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.realmsAdmin = new RealmsAdmin(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.roleMapper = new RoleMapper(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.roles = new Roles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rolesByID = new RolesByID(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.root = new Root(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.scopeMappings = new ScopeMappings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.userStorageProvider = new UserStorageProvider(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.users = new Users(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
