/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateOrUpdateCalculatorConfiguration200ApplicationJSON - OK
 */
public class CreateOrUpdateCalculatorConfiguration200ApplicationJSON {
    /**
     * Maximum shipping value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("absoluteShippingDiscountValue")
    public Double absoluteShippingDiscountValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withAbsoluteShippingDiscountValue(Double absoluteShippingDiscountValue) {
        this.absoluteShippingDiscountValue = absoluteShippingDiscountValue;
        return this;
    }
    
    /**
     * Allows the promotion to apply to products whose prices have been manually added by a call-center operator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accumulateWithManualPrice")
    public Boolean accumulateWithManualPrice;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withAccumulateWithManualPrice(Boolean accumulateWithManualPrice) {
        this.accumulateWithManualPrice = accumulateWithManualPrice;
        return this;
    }
    
    /**
     * If set as `true`, it activates gifts Multiplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activateGiftsMultiplier")
    public Boolean activateGiftsMultiplier;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withActivateGiftsMultiplier(Boolean activateGiftsMultiplier) {
        this.activateGiftsMultiplier = activateGiftsMultiplier;
        return this;
    }
    
    /**
     * Defines which days of the week the promotion will applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeDaysOfWeek")
    public String[] activeDaysOfWeek;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withActiveDaysOfWeek(String[] activeDaysOfWeek) {
        this.activeDaysOfWeek = activeDaysOfWeek;
        return this;
    }
    
    /**
     * Marketplace order identifier. The discount will apply to selected affiliates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("affiliates")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates[] affiliates;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withAffiliates(CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates[] affiliates) {
        this.affiliates = affiliates;
        return this;
    }
    
    /**
     * Promotion will be applied to all kind of shipping.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyToAllShippings")
    public Boolean applyToAllShippings;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withApplyToAllShippings(Boolean applyToAllShippings) {
        this.applyToAllShippings = applyToAllShippings;
        return this;
    }
    
    /**
     * If set to `false`, this promotion will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("areSalesChannelIdsExclusive")
    public Boolean areSalesChannelIdsExclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withAreSalesChannelIdsExclusive(Boolean areSalesChannelIdsExclusive) {
        this.areSalesChannelIdsExclusive = areSalesChannelIdsExclusive;
        return this;
    }
    
    /**
     * Promotion Begin Date (UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beginDateUtc")
    public String beginDateUtc;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withBeginDateUtc(String beginDateUtc) {
        this.beginDateUtc = beginDateUtc;
        return this;
    }
    
    /**
     * Object composed by the brands that will activate or deactivate the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brands")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands[] brands;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withBrands(CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands[] brands) {
        this.brands = brands;
        return this;
    }
    
    /**
     * If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brandsAreInclusive")
    public Boolean brandsAreInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withBrandsAreInclusive(Boolean brandsAreInclusive) {
        this.brandsAreInclusive = brandsAreInclusive;
        return this;
    }
    
    /**
     * Campaign Audiences that activate this promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaigns")
    public Object[] campaigns;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCampaigns(Object[] campaigns) {
        this.campaigns = campaigns;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardIssuers")
    public Object[] cardIssuers;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCardIssuers(Object[] cardIssuers) {
        this.cardIssuers = cardIssuers;
        return this;
    }
    
    /**
     * Object composed by the categories that will activate or deactivate the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories[] categories;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCategories(CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoriesAreInclusive")
    public Boolean categoriesAreInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCategoriesAreInclusive(Boolean categoriesAreInclusive) {
        this.categoriesAreInclusive = categoriesAreInclusive;
        return this;
    }
    
    /**
     * An expression to use with clusters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterExpressions")
    public String[] clusterExpressions;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withClusterExpressions(String[] clusterExpressions) {
        this.clusterExpressions = clusterExpressions;
        return this;
    }
    
    /**
     * Object composed by the collections that will activate or deactivate the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections[] collections;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCollections(CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections[] collections) {
        this.collections = collections;
        return this;
    }
    
    /**
     * Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections1BuyTogether")
    public String[] collections1BuyTogether;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCollections1BuyTogether(String[] collections1BuyTogether) {
        this.collections1BuyTogether = collections1BuyTogether;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections2BuyTogether")
    public Object[] collections2BuyTogether;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCollections2BuyTogether(Object[] collections2BuyTogether) {
        this.collections2BuyTogether = collections2BuyTogether;
        return this;
    }
    
    /**
     * If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectionsIsInclusive")
    public Boolean collectionsIsInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCollectionsIsInclusive(Boolean collectionsIsInclusive) {
        this.collectionsIsInclusive = collectionsIsInclusive;
        return this;
    }
    
    /**
     * If the **List Price** and **Price** are the same.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compareListPriceAndPrice")
    public Boolean compareListPriceAndPrice;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCompareListPriceAndPrice(Boolean compareListPriceAndPrice) {
        this.compareListPriceAndPrice = compareListPriceAndPrice;
        return this;
    }
    
    /**
     * Array with conditions IDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conditionsIds")
    public String[] conditionsIds;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withConditionsIds(String[] conditionsIds) {
        this.conditionsIds = conditionsIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon")
    public Object[] coupon;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCoupon(Object[] coupon) {
        this.coupon = coupon;
        return this;
    }
    
    /**
     * Defines if a promotion can accumulate with another one. (`true`) or not (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative")
    public Boolean cumulative;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withCumulative(Boolean cumulative) {
        this.cumulative = cumulative;
        return this;
    }
    
    /**
     * Number of days that are considered to add the purchase history.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daysAgoOfPurchases")
    public Long daysAgoOfPurchases;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withDaysAgoOfPurchases(Long daysAgoOfPurchases) {
        this.daysAgoOfPurchases = daysAgoOfPurchases;
        return this;
    }
    
    /**
     * Promotion internal description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableDeal")
    public Boolean disableDeal;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withDisableDeal(Boolean disableDeal) {
        this.disableDeal = disableDeal;
        return this;
    }
    
    /**
     * The type of discount that will apply to the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountType")
    public String discountType;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withDiscountType(String discountType) {
        this.discountType = discountType;
        return this;
    }
    
    /**
     * Enable **Buy Together** per SKU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableBuyTogetherPerSku")
    public Boolean enableBuyTogetherPerSku;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withEnableBuyTogetherPerSku(Boolean enableBuyTogetherPerSku) {
        this.enableBuyTogetherPerSku = enableBuyTogetherPerSku;
        return this;
    }
    
    /**
     * Promotion End Date (UTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDateUtc")
    public String endDateUtc;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withEndDateUtc(String endDateUtc) {
        this.endDateUtc = endDateUtc;
        return this;
    }
    
    /**
     * Applies the discount even if the user is not logged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstBuyIsProfileOptimistic")
    public Boolean firstBuyIsProfileOptimistic;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withFirstBuyIsProfileOptimistic(Boolean firstBuyIsProfileOptimistic) {
        this.firstBuyIsProfileOptimistic = firstBuyIsProfileOptimistic;
        return this;
    }
    
    /**
     * Gifts List Type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("giftListTypes")
    public String[] giftListTypes;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withGiftListTypes(String[] giftListTypes) {
        this.giftListTypes = giftListTypes;
        return this;
    }
    
    /**
     * Promotion ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idCalculatorConfiguration")
    public String idCalculatorConfiguration;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIdCalculatorConfiguration(String idCalculatorConfiguration) {
        this.idCalculatorConfiguration = idCalculatorConfiguration;
        return this;
    }
    
    /**
     * Seller Name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idSeller")
    public String idSeller;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIdSeller(String idSeller) {
        this.idSeller = idSeller;
        return this;
    }
    
    /**
     * If set to `true`, this promotion will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idSellerIsInclusive")
    public Boolean idSellerIsInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIdSellerIsInclusive(Boolean idSellerIsInclusive) {
        this.idSellerIsInclusive = idSellerIsInclusive;
        return this;
    }
    
    /**
     * List of Trade Policies that activate this promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idsSalesChannel")
    public String[] idsSalesChannel;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIdsSalesChannel(String[] idsSalesChannel) {
        this.idsSalesChannel = idsSalesChannel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installment")
    public Long installment;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withInstallment(Long installment) {
        this.installment = installment;
        return this;
    }
    
    /**
     * If set as `true` the Promotion is activated. If set as `false` the Promotion is deactivated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isActive")
    public Boolean isActive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    /**
     * If set as `true` the Promotion is archived. If set as `false` the Promotion is not archived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isArchived")
    public Boolean isArchived;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIsArchived(Boolean isArchived) {
        this.isArchived = isArchived;
        return this;
    }
    
    /**
     * Applies the promotion only if the list price and price is different.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDifferentListPriceAndPrice")
    public Boolean isDifferentListPriceAndPrice;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIsDifferentListPriceAndPrice(Boolean isDifferentListPriceAndPrice) {
        this.isDifferentListPriceAndPrice = isDifferentListPriceAndPrice;
        return this;
    }
    
    /**
     * Insert a flag with the promotion name used in the product's window display and page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFeatured")
    public Boolean isFeatured;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIsFeatured(Boolean isFeatured) {
        this.isFeatured = isFeatured;
        return this;
    }
    
    /**
     * Applies the discount only if it's a first buy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstBuy")
    public Boolean isFirstBuy;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIsFirstBuy(Boolean isFirstBuy) {
        this.isFirstBuy = isFirstBuy;
        return this;
    }
    
    /**
     * Set if the promotion will be applied considering a minimum and maximum values for installments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isMinMaxInstallments")
    public Boolean isMinMaxInstallments;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIsMinMaxInstallments(Boolean isMinMaxInstallments) {
        this.isMinMaxInstallments = isMinMaxInstallments;
        return this;
    }
    
    /**
     * Applies selected discount only when one of the defined shipping method is selected by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSlaSelected")
    public Boolean isSlaSelected;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withIsSlaSelected(Boolean isSlaSelected) {
        this.isSlaSelected = isSlaSelected;
        return this;
    }
    
    /**
     * Maximum price of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemMaxPrice")
    public Double itemMaxPrice;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withItemMaxPrice(Double itemMaxPrice) {
        this.itemMaxPrice = itemMaxPrice;
        return this;
    }
    
    /**
     * Minimum price of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemMinPrice")
    public Double itemMinPrice;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withItemMinPrice(Double itemMinPrice) {
        this.itemMinPrice = itemMinPrice;
        return this;
    }
    
    /**
     * When the Promotion was last modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModified")
    public String lastModified;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withLastModified(String lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    /**
     * SKU first list for the promotion **Buy Together**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listSku1BuyTogether")
    public Object[] listSku1BuyTogether;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withListSku1BuyTogether(Object[] listSku1BuyTogether) {
        this.listSku1BuyTogether = listSku1BuyTogether;
        return this;
    }
    
    /**
     * SKU second list for the promotion **Buy Together**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listSku2BuyTogether")
    public Object[] listSku2BuyTogether;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withListSku2BuyTogether(Object[] listSku2BuyTogether) {
        this.listSku2BuyTogether = listSku2BuyTogether;
        return this;
    }
    
    /**
     * Promotion Marketing tags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketingTags")
    public String[] marketingTags;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMarketingTags(String[] marketingTags) {
        this.marketingTags = marketingTags;
        return this;
    }
    
    /**
     * If set to `false`, this promotion will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketingTagsAreNotInclusive")
    public Boolean marketingTagsAreNotInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMarketingTagsAreNotInclusive(Boolean marketingTagsAreNotInclusive) {
        this.marketingTagsAreNotInclusive = marketingTagsAreNotInclusive;
        return this;
    }
    
    /**
     * Maximum value for installment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxInstallment")
    public Long maxInstallment;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMaxInstallment(Long maxInstallment) {
        this.maxInstallment = maxInstallment;
        return this;
    }
    
    /**
     * The maximum number of affected items for a promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxNumberOfAffectedItems")
    public Long maxNumberOfAffectedItems;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMaxNumberOfAffectedItems(Long maxNumberOfAffectedItems) {
        this.maxNumberOfAffectedItems = maxNumberOfAffectedItems;
        return this;
    }
    
    /**
     * The maximum number of affected items by group key for a promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxNumberOfAffectedItemsGroupKey")
    public String maxNumberOfAffectedItemsGroupKey;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMaxNumberOfAffectedItemsGroupKey(String maxNumberOfAffectedItemsGroupKey) {
        this.maxNumberOfAffectedItemsGroupKey = maxNumberOfAffectedItemsGroupKey;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxPricesPerItems")
    public Object[] maxPricesPerItems;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMaxPricesPerItems(Object[] maxPricesPerItems) {
        this.maxPricesPerItems = maxPricesPerItems;
        return this;
    }
    
    /**
     * Defines how many times the promotion can be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxUsage")
    public Long maxUsage;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMaxUsage(Long maxUsage) {
        this.maxUsage = maxUsage;
        return this;
    }
    
    /**
     * Defines if the promotion can be used multiple times per client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxUsagePerClient")
    public Long maxUsagePerClient;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMaxUsagePerClient(Long maxUsagePerClient) {
        this.maxUsagePerClient = maxUsagePerClient;
        return this;
    }
    
    /**
     * The maximum price for each item of the purchase will be the price set up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumUnitPriceDiscount")
    public Double maximumUnitPriceDiscount;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMaximumUnitPriceDiscount(Double maximumUnitPriceDiscount) {
        this.maximumUnitPriceDiscount = maximumUnitPriceDiscount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchants")
    public Object[] merchants;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMerchants(Object[] merchants) {
        this.merchants = merchants;
        return this;
    }
    
    /**
     * Minimum value for installment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minInstallment")
    public Long minInstallment;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMinInstallment(Long minInstallment) {
        this.minInstallment = minInstallment;
        return this;
    }
    
    /**
     * Minimum quantity for **Buy Together** promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumQuantityBuyTogether")
    public Long minimumQuantityBuyTogether;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMinimumQuantityBuyTogether(Long minimumQuantityBuyTogether) {
        this.minimumQuantityBuyTogether = minimumQuantityBuyTogether;
        return this;
    }
    
    /**
     * Defines if the promotion can be used multiple times per client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multipleUsePerClient")
    public Boolean multipleUsePerClient;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withMultipleUsePerClient(Boolean multipleUsePerClient) {
        this.multipleUsePerClient = multipleUsePerClient;
        return this;
    }
    
    /**
     * Promotion Name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * New time offset from UTC in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newOffset")
    public Double newOffset;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withNewOffset(Double newOffset) {
        this.newOffset = newOffset;
        return this;
    }
    
    /**
     * Exact discount to be applied for the total purchase value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominalDiscountValue")
    public Double nominalDiscountValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withNominalDiscountValue(Double nominalDiscountValue) {
        this.nominalDiscountValue = nominalDiscountValue;
        return this;
    }
    
    /**
     * Nominal value for rewards program.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominalRewardValue")
    public Double nominalRewardValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withNominalRewardValue(Double nominalRewardValue) {
        this.nominalRewardValue = nominalRewardValue;
        return this;
    }
    
    /**
     * Exact discount to be applied for the shipping value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominalShippingDiscountValue")
    public Double nominalShippingDiscountValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withNominalShippingDiscountValue(Double nominalShippingDiscountValue) {
        this.nominalShippingDiscountValue = nominalShippingDiscountValue;
        return this;
    }
    
    /**
     * Nominal Tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominalTax")
    public Double nominalTax;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withNominalTax(Double nominalTax) {
        this.nominalTax = nominalTax;
        return this;
    }
    
    /**
     * Time offset from UTC in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Long offset;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Order status reward value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderStatusRewardValue")
    public String orderStatusRewardValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withOrderStatusRewardValue(String orderStatusRewardValue) {
        this.orderStatusRewardValue = orderStatusRewardValue;
        return this;
    }
    
    /**
     * Origin of the promotion, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    public String origin;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withOrigin(String origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * Array composed by all the Payments Methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsMethods")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods[] paymentsMethods;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPaymentsMethods(CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods[] paymentsMethods) {
        this.paymentsMethods = paymentsMethods;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsRules")
    public Object[] paymentsRules;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPaymentsRules(Object[] paymentsRules) {
        this.paymentsRules = paymentsRules;
        return this;
    }
    
    /**
     * Percentage discount to be applied for total purchase value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualDiscountValue")
    public Double percentualDiscountValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPercentualDiscountValue(Double percentualDiscountValue) {
        this.percentualDiscountValue = percentualDiscountValue;
        return this;
    }
    
    /**
     * Percentual discount value list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualDiscountValueList")
    public Double[] percentualDiscountValueList;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPercentualDiscountValueList(Double[] percentualDiscountValueList) {
        this.percentualDiscountValueList = percentualDiscountValueList;
        return this;
    }
    
    /**
     * Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualDiscountValueList1")
    public Double percentualDiscountValueList1;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPercentualDiscountValueList1(Double percentualDiscountValueList1) {
        this.percentualDiscountValueList1 = percentualDiscountValueList1;
        return this;
    }
    
    /**
     * Equivalent to `percentualDiscountValueList1`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualDiscountValueList2")
    public Double percentualDiscountValueList2;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPercentualDiscountValueList2(Double percentualDiscountValueList2) {
        this.percentualDiscountValueList2 = percentualDiscountValueList2;
        return this;
    }
    
    /**
     * Percentage value for rewards program.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualRewardValue")
    public Double percentualRewardValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPercentualRewardValue(Double percentualRewardValue) {
        this.percentualRewardValue = percentualRewardValue;
        return this;
    }
    
    /**
     * Percentage discount to be applied for shipping value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualShippingDiscountValue")
    public Double percentualShippingDiscountValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPercentualShippingDiscountValue(Double percentualShippingDiscountValue) {
        this.percentualShippingDiscountValue = percentualShippingDiscountValue;
        return this;
    }
    
    /**
     * Percentual Tax over purchase total value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualTax")
    public Double percentualTax;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withPercentualTax(Double percentualTax) {
        this.percentualTax = percentualTax;
        return this;
    }
    
    /**
     * Object composed by the products that will activate or deactivate the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts[] products;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withProducts(CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts[] products) {
        this.products = products;
        return this;
    }
    
    /**
     * If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productsAreInclusive")
    public Boolean productsAreInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withProductsAreInclusive(Boolean productsAreInclusive) {
        this.productsAreInclusive = productsAreInclusive;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productsSpecifications")
    public Object[] productsSpecifications;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withProductsSpecifications(Object[] productsSpecifications) {
        this.productsSpecifications = productsSpecifications;
        return this;
    }
    
    /**
     * Quantity to affect **Buy Together** promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityToAffectBuyTogether")
    public Long quantityToAffectBuyTogether;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withQuantityToAffectBuyTogether(Long quantityToAffectBuyTogether) {
        this.quantityToAffectBuyTogether = quantityToAffectBuyTogether;
        return this;
    }
    
    /**
     * Percentual Shipping Discount Value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rebatePercentualDiscountValue")
    public Double rebatePercentualDiscountValue;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withRebatePercentualDiscountValue(Double rebatePercentualDiscountValue) {
        this.rebatePercentualDiscountValue = rebatePercentualDiscountValue;
        return this;
    }
    
    /**
     * The discount will be granted if the card's BIN is given.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restrictionsBins")
    public String[] restrictionsBins;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withRestrictionsBins(String[] restrictionsBins) {
        this.restrictionsBins = restrictionsBins;
        return this;
    }
    
    /**
     * Shipping Percentual Tax over purchase total value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingPercentualTax")
    public Double shippingPercentualTax;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withShippingPercentualTax(Double shippingPercentualTax) {
        this.shippingPercentualTax = shippingPercentualTax;
        return this;
    }
    
    /**
     * Should distribute discount among matched items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shouldDistributeDiscountAmongMatchedItems")
    public Boolean shouldDistributeDiscountAmongMatchedItems;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withShouldDistributeDiscountAmongMatchedItems(Boolean shouldDistributeDiscountAmongMatchedItems) {
        this.shouldDistributeDiscountAmongMatchedItems = shouldDistributeDiscountAmongMatchedItems;
        return this;
    }
    
    /**
     * Object composed by the SKUs that will activate or deactivate the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skus")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus[] skus;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withSkus(CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus[] skus) {
        this.skus = skus;
        return this;
    }
    
    /**
     * If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skusAreInclusive")
    public Boolean skusAreInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withSkusAreInclusive(Boolean skusAreInclusive) {
        this.skusAreInclusive = skusAreInclusive;
        return this;
    }
    
    /**
     * SKU Gift Object. Total discount on the product value set as a gift.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skusGift")
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift skusGift;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withSkusGift(CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift skusGift) {
        this.skusGift = skusGift;
        return this;
    }
    
    /**
     * The discount will be granted if the shipping method is the same as the one given.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slasIds")
    public String[] slasIds;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withSlasIds(String[] slasIds) {
        this.slasIds = slasIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stores")
    public Object[] stores;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withStores(Object[] stores) {
        this.stores = stores;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storesAreInclusive")
    public Boolean storesAreInclusive;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withStoresAreInclusive(Boolean storesAreInclusive) {
        this.storesAreInclusive = storesAreInclusive;
        return this;
    }
    
    /**
     * Maximum chart value to activate the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueCeling")
    public Double totalValueCeling;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withTotalValueCeling(Double totalValueCeling) {
        this.totalValueCeling = totalValueCeling;
        return this;
    }
    
    /**
     * Minimum chart value to activate the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueFloor")
    public Double totalValueFloor;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withTotalValueFloor(Double totalValueFloor) {
        this.totalValueFloor = totalValueFloor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueIncludeAllItems")
    public Boolean totalValueIncludeAllItems;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withTotalValueIncludeAllItems(Boolean totalValueIncludeAllItems) {
        this.totalValueIncludeAllItems = totalValueIncludeAllItems;
        return this;
    }
    
    /**
     * Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueMode")
    public String totalValueMode;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withTotalValueMode(String totalValueMode) {
        this.totalValueMode = totalValueMode;
        return this;
    }
    
    /**
     * Total value a client must have in past orders to active the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValuePurchase")
    public Double totalValuePurchase;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withTotalValuePurchase(Double totalValuePurchase) {
        this.totalValuePurchase = totalValuePurchase;
        return this;
    }
    
    /**
     * Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Use new progressive algorithm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useNewProgressiveAlgorithm")
    public Boolean useNewProgressiveAlgorithm;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withUseNewProgressiveAlgorithm(Boolean useNewProgressiveAlgorithm) {
        this.useNewProgressiveAlgorithm = useNewProgressiveAlgorithm;
        return this;
    }
    
    /**
     * Coupon utmCampaign code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("utmCampaign")
    public String utmCampaign;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withUtmCampaign(String utmCampaign) {
        this.utmCampaign = utmCampaign;
        return this;
    }
    
    /**
     * Coupon utmSource code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("utmSource")
    public String utmSource;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withUtmSource(String utmSource) {
        this.utmSource = utmSource;
        return this;
    }
    
    /**
     * Range of the zip code that applies the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipCodeRanges")
    public Object[] zipCodeRanges;

    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON withZipCodeRanges(Object[] zipCodeRanges) {
        this.zipCodeRanges = zipCodeRanges;
        return this;
    }
    
    public CreateOrUpdateCalculatorConfiguration200ApplicationJSON(){}
}
