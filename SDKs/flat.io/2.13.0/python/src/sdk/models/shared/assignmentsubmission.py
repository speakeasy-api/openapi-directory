"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import assignmentsubmissionstate_enum as shared_assignmentsubmissionstate_enum
from ..shared import googleclassroomsubmission as shared_googleclassroomsubmission
from ..shared import mediaattachment as shared_mediaattachment
from ..shared import microsoftgraphsubmission as shared_microsoftgraphsubmission
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentSubmission:
    r"""Assignment Submission"""
    
    assignment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignment'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the assignment"""  
    attachments: Optional[list[shared_mediaattachment.MediaAttachment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments'), 'exclude': lambda f: f is None }})  
    classroom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classroom'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the classroom where the assignment was posted"""  
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'exclude': lambda f: f is None }})
    r"""The date when the submission was created"""  
    creator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creator'), 'exclude': lambda f: f is None }})
    r"""The User identifier of the student who created the submission"""  
    draft_grade: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draftGrade'), 'exclude': lambda f: f is None }})
    r"""Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission"""  
    google_classroom: Optional[shared_googleclassroomsubmission.GoogleClassroomSubmission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleClassroom'), 'exclude': lambda f: f is None }})
    r"""A coursework submission on Google Classroom"""  
    grade: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grade'), 'exclude': lambda f: f is None }})
    r"""Optional grade. If unset, no grade was set."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the submission"""  
    max_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPoints'), 'exclude': lambda f: f is None }})
    r"""Optional max points for the grade. If set, a corresponding `draftGrade` or `grade` will be set."""  
    microsoft_graph: Optional[shared_microsoftgraphsubmission.MicrosoftGraphSubmission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microsoftGraph'), 'exclude': lambda f: f is None }})
    r"""A Microsoft Teams submission"""  
    return_creator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnCreator'), 'exclude': lambda f: f is None }})
    r"""The User unique identifier of the teacher who returned the submission"""  
    return_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnDate'), 'exclude': lambda f: f is None }})
    r"""The date when the teacher returned the work"""  
    state: Optional[shared_assignmentsubmissionstate_enum.AssignmentSubmissionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the submission"""  
    submission_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submissionDate'), 'exclude': lambda f: f is None }})
    r"""The date when the student submitted his work"""  
    