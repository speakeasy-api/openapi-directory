// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum - The current status of the payout.
type GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum string

const (
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumAccepted   GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "ACCEPTED"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumRejected   GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "REJECTED"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumSubmitted  GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "SUBMITTED"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumQuoted     GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "QUOTED"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumInstructed GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "INSTRUCTED"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumCompleted  GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "COMPLETED"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumIncomplete GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "INCOMPLETE"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumConfirmed  GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "CONFIRMED"
	GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnumWithdrawn  GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum = "WITHDRAWN"
)

func (e *GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCEPTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "SUBMITTED":
		fallthrough
	case "QUOTED":
		fallthrough
	case "INSTRUCTED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "INCOMPLETE":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "WITHDRAWN":
		*e = GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum: %s", s)
	}
}

type GetPaymentsForPayoutResponseV3Summary struct {
	// The count of payments within the payout which have been confirmed.
	ConfirmedPayments *int64 `json:"confirmedPayments,omitempty"`
	// The count of payments within the payout which have failed or been returned.
	FailedPayments *int64 `json:"failedPayments,omitempty"`
	// The count of payments within the payout which are incomplete.
	IncompletePayments *int64 `json:"incompletePayments,omitempty"`
	// The date/time at which the payout was instructed.
	InstructedDateTime *time.Time `json:"instructedDateTime,omitempty"`
	// The memo attached to the payout.
	PayoutMemo *string `json:"payoutMemo,omitempty"`
	// The current status of the payout.
	PayoutStatus *GetPaymentsForPayoutResponseV3SummaryPayoutStatusEnum `json:"payoutStatus,omitempty"`
	// The count of payments within the payout which have been released.
	ReleasedPayments *int64 `json:"releasedPayments,omitempty"`
	// The date/time at which the payout was submitted.
	SubmittedDateTime *time.Time `json:"submittedDateTime,omitempty"`
	// The count of payments within the payout.
	TotalPayments *int64 `json:"totalPayments,omitempty"`
	// The date/time at which the payout was withdrawn.
	WithdrawnDateTime *time.Time `json:"withdrawnDateTime,omitempty"`
}
