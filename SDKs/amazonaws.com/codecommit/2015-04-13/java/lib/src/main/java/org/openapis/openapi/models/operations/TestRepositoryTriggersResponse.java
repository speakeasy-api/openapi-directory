/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class TestRepositoryTriggersResponse {
    
    public String contentType;

    public TestRepositoryTriggersResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * EncryptionIntegrityChecksFailedException
     */
    
    public Object encryptionIntegrityChecksFailedException;

    public TestRepositoryTriggersResponse withEncryptionIntegrityChecksFailedException(Object encryptionIntegrityChecksFailedException) {
        this.encryptionIntegrityChecksFailedException = encryptionIntegrityChecksFailedException;
        return this;
    }
    
    /**
     * EncryptionKeyAccessDeniedException
     */
    
    public Object encryptionKeyAccessDeniedException;

    public TestRepositoryTriggersResponse withEncryptionKeyAccessDeniedException(Object encryptionKeyAccessDeniedException) {
        this.encryptionKeyAccessDeniedException = encryptionKeyAccessDeniedException;
        return this;
    }
    
    /**
     * EncryptionKeyDisabledException
     */
    
    public Object encryptionKeyDisabledException;

    public TestRepositoryTriggersResponse withEncryptionKeyDisabledException(Object encryptionKeyDisabledException) {
        this.encryptionKeyDisabledException = encryptionKeyDisabledException;
        return this;
    }
    
    /**
     * EncryptionKeyNotFoundException
     */
    
    public Object encryptionKeyNotFoundException;

    public TestRepositoryTriggersResponse withEncryptionKeyNotFoundException(Object encryptionKeyNotFoundException) {
        this.encryptionKeyNotFoundException = encryptionKeyNotFoundException;
        return this;
    }
    
    /**
     * EncryptionKeyUnavailableException
     */
    
    public Object encryptionKeyUnavailableException;

    public TestRepositoryTriggersResponse withEncryptionKeyUnavailableException(Object encryptionKeyUnavailableException) {
        this.encryptionKeyUnavailableException = encryptionKeyUnavailableException;
        return this;
    }
    
    /**
     * InvalidRepositoryNameException
     */
    
    public Object invalidRepositoryNameException;

    public TestRepositoryTriggersResponse withInvalidRepositoryNameException(Object invalidRepositoryNameException) {
        this.invalidRepositoryNameException = invalidRepositoryNameException;
        return this;
    }
    
    /**
     * InvalidRepositoryTriggerBranchNameException
     */
    
    public Object invalidRepositoryTriggerBranchNameException;

    public TestRepositoryTriggersResponse withInvalidRepositoryTriggerBranchNameException(Object invalidRepositoryTriggerBranchNameException) {
        this.invalidRepositoryTriggerBranchNameException = invalidRepositoryTriggerBranchNameException;
        return this;
    }
    
    /**
     * InvalidRepositoryTriggerCustomDataException
     */
    
    public Object invalidRepositoryTriggerCustomDataException;

    public TestRepositoryTriggersResponse withInvalidRepositoryTriggerCustomDataException(Object invalidRepositoryTriggerCustomDataException) {
        this.invalidRepositoryTriggerCustomDataException = invalidRepositoryTriggerCustomDataException;
        return this;
    }
    
    /**
     * InvalidRepositoryTriggerDestinationArnException
     */
    
    public Object invalidRepositoryTriggerDestinationArnException;

    public TestRepositoryTriggersResponse withInvalidRepositoryTriggerDestinationArnException(Object invalidRepositoryTriggerDestinationArnException) {
        this.invalidRepositoryTriggerDestinationArnException = invalidRepositoryTriggerDestinationArnException;
        return this;
    }
    
    /**
     * InvalidRepositoryTriggerEventsException
     */
    
    public Object invalidRepositoryTriggerEventsException;

    public TestRepositoryTriggersResponse withInvalidRepositoryTriggerEventsException(Object invalidRepositoryTriggerEventsException) {
        this.invalidRepositoryTriggerEventsException = invalidRepositoryTriggerEventsException;
        return this;
    }
    
    /**
     * InvalidRepositoryTriggerNameException
     */
    
    public Object invalidRepositoryTriggerNameException;

    public TestRepositoryTriggersResponse withInvalidRepositoryTriggerNameException(Object invalidRepositoryTriggerNameException) {
        this.invalidRepositoryTriggerNameException = invalidRepositoryTriggerNameException;
        return this;
    }
    
    /**
     * InvalidRepositoryTriggerRegionException
     */
    
    public Object invalidRepositoryTriggerRegionException;

    public TestRepositoryTriggersResponse withInvalidRepositoryTriggerRegionException(Object invalidRepositoryTriggerRegionException) {
        this.invalidRepositoryTriggerRegionException = invalidRepositoryTriggerRegionException;
        return this;
    }
    
    /**
     * MaximumBranchesExceededException
     */
    
    public Object maximumBranchesExceededException;

    public TestRepositoryTriggersResponse withMaximumBranchesExceededException(Object maximumBranchesExceededException) {
        this.maximumBranchesExceededException = maximumBranchesExceededException;
        return this;
    }
    
    /**
     * MaximumRepositoryTriggersExceededException
     */
    
    public Object maximumRepositoryTriggersExceededException;

    public TestRepositoryTriggersResponse withMaximumRepositoryTriggersExceededException(Object maximumRepositoryTriggersExceededException) {
        this.maximumRepositoryTriggersExceededException = maximumRepositoryTriggersExceededException;
        return this;
    }
    
    
    public Integer statusCode;

    public TestRepositoryTriggersResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public TestRepositoryTriggersResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * RepositoryDoesNotExistException
     */
    
    public Object repositoryDoesNotExistException;

    public TestRepositoryTriggersResponse withRepositoryDoesNotExistException(Object repositoryDoesNotExistException) {
        this.repositoryDoesNotExistException = repositoryDoesNotExistException;
        return this;
    }
    
    /**
     * RepositoryNameRequiredException
     */
    
    public Object repositoryNameRequiredException;

    public TestRepositoryTriggersResponse withRepositoryNameRequiredException(Object repositoryNameRequiredException) {
        this.repositoryNameRequiredException = repositoryNameRequiredException;
        return this;
    }
    
    /**
     * RepositoryTriggerBranchNameListRequiredException
     */
    
    public Object repositoryTriggerBranchNameListRequiredException;

    public TestRepositoryTriggersResponse withRepositoryTriggerBranchNameListRequiredException(Object repositoryTriggerBranchNameListRequiredException) {
        this.repositoryTriggerBranchNameListRequiredException = repositoryTriggerBranchNameListRequiredException;
        return this;
    }
    
    /**
     * RepositoryTriggerDestinationArnRequiredException
     */
    
    public Object repositoryTriggerDestinationArnRequiredException;

    public TestRepositoryTriggersResponse withRepositoryTriggerDestinationArnRequiredException(Object repositoryTriggerDestinationArnRequiredException) {
        this.repositoryTriggerDestinationArnRequiredException = repositoryTriggerDestinationArnRequiredException;
        return this;
    }
    
    /**
     * RepositoryTriggerEventsListRequiredException
     */
    
    public Object repositoryTriggerEventsListRequiredException;

    public TestRepositoryTriggersResponse withRepositoryTriggerEventsListRequiredException(Object repositoryTriggerEventsListRequiredException) {
        this.repositoryTriggerEventsListRequiredException = repositoryTriggerEventsListRequiredException;
        return this;
    }
    
    /**
     * RepositoryTriggerNameRequiredException
     */
    
    public Object repositoryTriggerNameRequiredException;

    public TestRepositoryTriggersResponse withRepositoryTriggerNameRequiredException(Object repositoryTriggerNameRequiredException) {
        this.repositoryTriggerNameRequiredException = repositoryTriggerNameRequiredException;
        return this;
    }
    
    /**
     * RepositoryTriggersListRequiredException
     */
    
    public Object repositoryTriggersListRequiredException;

    public TestRepositoryTriggersResponse withRepositoryTriggersListRequiredException(Object repositoryTriggersListRequiredException) {
        this.repositoryTriggersListRequiredException = repositoryTriggersListRequiredException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.TestRepositoryTriggersOutput testRepositoryTriggersOutput;

    public TestRepositoryTriggersResponse withTestRepositoryTriggersOutput(org.openapis.openapi.models.shared.TestRepositoryTriggersOutput testRepositoryTriggersOutput) {
        this.testRepositoryTriggersOutput = testRepositoryTriggersOutput;
        return this;
    }
    
    public TestRepositoryTriggersResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
