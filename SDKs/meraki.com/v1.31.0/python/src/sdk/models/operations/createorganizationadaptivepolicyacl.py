"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum(str, Enum):
    r"""IP version of adpative policy ACL. One of: 'any', 'ipv4' or 'ipv6'"""
    ANY = 'any'
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'

class CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum(str, Enum):
    r"""'allow' or 'deny' traffic specified by this rule."""
    ALLOW = 'allow'
    DENY = 'deny'

class CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum(str, Enum):
    r"""The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any')."""
    ANY = 'any'
    ICMP = 'icmp'
    TCP = 'tcp'
    UDP = 'udp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrganizationAdaptivePolicyACLRequestBodyRules:
    
    policy: CreateOrganizationAdaptivePolicyACLRequestBodyRulesPolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy') }})
    r"""'allow' or 'deny' traffic specified by this rule."""  
    protocol: CreateOrganizationAdaptivePolicyACLRequestBodyRulesProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any')."""  
    dst_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dstPort'), 'exclude': lambda f: f is None }})
    r"""Destination port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'."""  
    src_port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPort'), 'exclude': lambda f: f is None }})
    r"""Source port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrganizationAdaptivePolicyACLRequestBody:
    
    ip_version: CreateOrganizationAdaptivePolicyACLRequestBodyIPVersionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipVersion') }})
    r"""IP version of adpative policy ACL. One of: 'any', 'ipv4' or 'ipv6'"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the adaptive policy ACL"""  
    rules: list[CreateOrganizationAdaptivePolicyACLRequestBodyRules] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules') }})
    r"""An ordered array of the adaptive policy ACL rules."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the adaptive policy ACL"""  
    

@dataclasses.dataclass
class CreateOrganizationAdaptivePolicyACLRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: CreateOrganizationAdaptivePolicyACLRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateOrganizationAdaptivePolicyACLResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_organization_adaptive_policy_acl_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    