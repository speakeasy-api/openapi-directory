/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The version to be updated to
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * The pending firmware upgrade if it exists
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade extends SpeakeasyBase {
  /**
   * The time of the last successful upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: string;

  /**
   * The version to be updated to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance extends SpeakeasyBase {
  /**
   * The pending firmware upgrade if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () => UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgradesRequestBodyProductsApplianceNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

/**
 * The version to be updated to
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * The pending firmware upgrade if it exists
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade extends SpeakeasyBase {
  /**
   * The time of the last successful upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: string;

  /**
   * The version to be updated to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera extends SpeakeasyBase {
  /**
   * The pending firmware upgrade if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade)
  nextUpgrade?: UpdateNetworkFirmwareUpgradesRequestBodyProductsCameraNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

/**
 * The version to be updated to
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * The pending firmware upgrade if it exists
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade extends SpeakeasyBase {
  /**
   * The time of the last successful upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: string;

  /**
   * The version to be updated to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway extends SpeakeasyBase {
  /**
   * The pending firmware upgrade if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGatewayNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

/**
 * The version to be updated to
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * The pending firmware upgrade if it exists
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade extends SpeakeasyBase {
  /**
   * The time of the last successful upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: string;

  /**
   * The version to be updated to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor extends SpeakeasyBase {
  /**
   * The pending firmware upgrade if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade)
  nextUpgrade?: UpdateNetworkFirmwareUpgradesRequestBodyProductsSensorNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

/**
 * The version to be updated to
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * The pending firmware upgrade if it exists
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade extends SpeakeasyBase {
  /**
   * The time of the last successful upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: string;

  /**
   * The version to be updated to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch extends SpeakeasyBase {
  /**
   * The pending firmware upgrade if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade)
  nextUpgrade?: UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitchNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

/**
 * The version to be updated to
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * The pending firmware upgrade if it exists
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade extends SpeakeasyBase {
  /**
   * The time of the last successful upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time?: string;

  /**
   * The version to be updated to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless extends SpeakeasyBase {
  /**
   * The pending firmware upgrade if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () => UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgradesRequestBodyProductsWirelessNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

/**
 * Contains information about the network to update
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyProducts extends SpeakeasyBase {
  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appliance" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance)
  appliance?: UpdateNetworkFirmwareUpgradesRequestBodyProductsAppliance;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "camera" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera)
  camera?: UpdateNetworkFirmwareUpgradesRequestBodyProductsCamera;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cellularGateway" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway)
  cellularGateway?: UpdateNetworkFirmwareUpgradesRequestBodyProductsCellularGateway;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sensor" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor)
  sensor?: UpdateNetworkFirmwareUpgradesRequestBodyProductsSensor;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "switch" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch)
  switch?: UpdateNetworkFirmwareUpgradesRequestBodyProductsSwitch;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wireless" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless)
  wireless?: UpdateNetworkFirmwareUpgradesRequestBodyProductsWireless;
}

/**
 * Day of the week
 */
export enum UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum {
  Fri = "fri",
  Friday = "friday",
  Mon = "mon",
  Monday = "monday",
  Sat = "sat",
  Saturday = "saturday",
  Sun = "sun",
  Sunday = "sunday",
  Thu = "thu",
  Thursday = "thursday",
  Tue = "tue",
  Tuesday = "tuesday",
  Wed = "wed",
  Wednesday = "wednesday",
}

/**
 * Hour of the day
 */
export enum UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum {
  Zero00 = "0:00",
  Ten00 = "10:00",
  Eleven00 = "11:00",
  Twelve00 = "12:00",
  Thirteen00 = "13:00",
  Fourteen00 = "14:00",
  Fifteen00 = "15:00",
  Sixteen00 = "16:00",
  Seventeen00 = "17:00",
  Eighteen00 = "18:00",
  Nineteen00 = "19:00",
  One00 = "1:00",
  Twenty00 = "20:00",
  TwentyOne00 = "21:00",
  TwentyTwo00 = "22:00",
  TwentyThree00 = "23:00",
  Two00 = "2:00",
  Three00 = "3:00",
  Four00 = "4:00",
  Five00 = "5:00",
  Six00 = "6:00",
  Seven00 = "7:00",
  Eight00 = "8:00",
  Nine00 = "9:00",
}

/**
 * Upgrade window for devices in network
 */
export class UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow extends SpeakeasyBase {
  /**
   * Day of the week
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dayOfWeek" })
  dayOfWeek?: UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowDayOfWeekEnum;

  /**
   * Hour of the day
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hourOfDay" })
  hourOfDay?: UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindowHourOfDayEnum;
}

export class UpdateNetworkFirmwareUpgradesRequestBody extends SpeakeasyBase {
  /**
   * Contains information about the network to update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "products" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyProducts)
  products?: UpdateNetworkFirmwareUpgradesRequestBodyProducts;

  /**
   * The timezone for the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  /**
   * Upgrade window for devices in network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upgradeWindow" })
  @Type(() => UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow)
  upgradeWindow?: UpdateNetworkFirmwareUpgradesRequestBodyUpgradeWindow;
}

export class UpdateNetworkFirmwareUpgradesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkFirmwareUpgradesRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the current version on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded from
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded to
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the last firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade extends SpeakeasyBase {
  /**
   * Details of the version the device upgraded from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion
  )
  fromVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion;

  /**
   * Timestamp of the last successful firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device upgraded to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion;
}

/**
 * Details of the version the device will upgrade to if it exists
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the next firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade extends SpeakeasyBase {
  /**
   * Timestamp of the next scheduled firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device will upgrade to if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance extends SpeakeasyBase {
  /**
   * Firmware versions available for upgrade
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions,
  })
  @Expose({ name: "availableVersions" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions
  )
  availableVersions?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions[];

  /**
   * Details of the current version on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion
  )
  currentVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion;

  /**
   * Details of the last firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade
  )
  lastUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade;

  /**
   * Details of the next firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the current version on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded from
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded to
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the last firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade extends SpeakeasyBase {
  /**
   * Details of the version the device upgraded from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion
  )
  fromVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion;

  /**
   * Timestamp of the last successful firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device upgraded to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion;
}

/**
 * Details of the version the device will upgrade to if it exists
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the next firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade extends SpeakeasyBase {
  /**
   * Timestamp of the next scheduled firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device will upgrade to if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera extends SpeakeasyBase {
  /**
   * Firmware versions available for upgrade
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions,
  })
  @Expose({ name: "availableVersions" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions
  )
  availableVersions?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions[];

  /**
   * Details of the current version on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion
  )
  currentVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion;

  /**
   * Details of the last firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade
  )
  lastUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade;

  /**
   * Details of the next firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the current version on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded from
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded to
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the last firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade extends SpeakeasyBase {
  /**
   * Details of the version the device upgraded from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion
  )
  fromVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion;

  /**
   * Timestamp of the last successful firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device upgraded to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion;
}

/**
 * Details of the version the device will upgrade to if it exists
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the next firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade extends SpeakeasyBase {
  /**
   * Timestamp of the next scheduled firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device will upgrade to if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway extends SpeakeasyBase {
  /**
   * Firmware versions available for upgrade
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions,
  })
  @Expose({ name: "availableVersions" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions
  )
  availableVersions?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions[];

  /**
   * Details of the current version on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion
  )
  currentVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion;

  /**
   * Details of the last firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade
  )
  lastUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade;

  /**
   * Details of the next firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the current version on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded from
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded to
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the last firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade extends SpeakeasyBase {
  /**
   * Details of the version the device upgraded from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion
  )
  fromVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion;

  /**
   * Timestamp of the last successful firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device upgraded to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion;
}

/**
 * Details of the version the device will upgrade to if it exists
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the next firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade extends SpeakeasyBase {
  /**
   * Timestamp of the next scheduled firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device will upgrade to if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor extends SpeakeasyBase {
  /**
   * Firmware versions available for upgrade
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions,
  })
  @Expose({ name: "availableVersions" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions
  )
  availableVersions?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions[];

  /**
   * Details of the current version on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion
  )
  currentVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion;

  /**
   * Details of the last firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade
  )
  lastUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade;

  /**
   * Details of the next firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the current version on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded from
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded to
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the last firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade extends SpeakeasyBase {
  /**
   * Details of the version the device upgraded from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion
  )
  fromVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion;

  /**
   * Timestamp of the last successful firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device upgraded to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion;
}

/**
 * Details of the version the device will upgrade to if it exists
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the next firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade extends SpeakeasyBase {
  /**
   * Timestamp of the next scheduled firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device will upgrade to if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch extends SpeakeasyBase {
  /**
   * Firmware versions available for upgrade
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions,
  })
  @Expose({ name: "availableVersions" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions
  )
  availableVersions?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions[];

  /**
   * Details of the current version on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion
  )
  currentVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion;

  /**
   * Details of the last firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade
  )
  lastUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade;

  /**
   * Details of the next firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the current version on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded from
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the version the device upgraded to
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the last firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade extends SpeakeasyBase {
  /**
   * Details of the version the device upgraded from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion
  )
  fromVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion;

  /**
   * Timestamp of the last successful firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device upgraded to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion;
}

/**
 * Details of the version the device will upgrade to if it exists
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * Name of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: string;

  /**
   * Firmware version identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Release date of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseDate?: Date;

  /**
   * Release type of the firmware version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseType" })
  releaseType?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the next firmware upgrade on the device
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade extends SpeakeasyBase {
  /**
   * Timestamp of the next scheduled firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  /**
   * Details of the version the device will upgrade to if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion
  )
  toVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless extends SpeakeasyBase {
  /**
   * Firmware versions available for upgrade
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions,
  })
  @Expose({ name: "availableVersions" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions
  )
  availableVersions?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions[];

  /**
   * Details of the current version on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentVersion" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion
  )
  currentVersion?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion;

  /**
   * Details of the last firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade
  )
  lastUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade;

  /**
   * Details of the next firmware upgrade on the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade
  )
  nextUpgrade?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade;

  /**
   * Whether or not the network wants beta firmware
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participateInNextBetaRelease" })
  participateInNextBetaRelease?: boolean;
}

/**
 * The network devices to be updated
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts extends SpeakeasyBase {
  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appliance" })
  @Type(() => UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance)
  appliance?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "camera" })
  @Type(() => UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera)
  camera?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCamera;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cellularGateway" })
  @Type(
    () => UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway
  )
  cellularGateway?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sensor" })
  @Type(() => UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor)
  sensor?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSensor;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "switch" })
  @Type(() => UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch)
  switch?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch;

  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wireless" })
  @Type(() => UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless)
  wireless?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProductsWireless;
}

/**
 * Day of the week
 */
export enum UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum {
  Fri = "fri",
  Friday = "friday",
  Mon = "mon",
  Monday = "monday",
  Sat = "sat",
  Saturday = "saturday",
  Sun = "sun",
  Sunday = "sunday",
  Thu = "thu",
  Thursday = "thursday",
  Tue = "tue",
  Tuesday = "tuesday",
  Wed = "wed",
  Wednesday = "wednesday",
}

/**
 * Hour of the day
 */
export enum UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum {
  Zero00 = "0:00",
  Ten00 = "10:00",
  Eleven00 = "11:00",
  Twelve00 = "12:00",
  Thirteen00 = "13:00",
  Fourteen00 = "14:00",
  Fifteen00 = "15:00",
  Sixteen00 = "16:00",
  Seventeen00 = "17:00",
  Eighteen00 = "18:00",
  Nineteen00 = "19:00",
  One00 = "1:00",
  Twenty00 = "20:00",
  TwentyOne00 = "21:00",
  TwentyTwo00 = "22:00",
  TwentyThree00 = "23:00",
  Two00 = "2:00",
  Three00 = "3:00",
  Four00 = "4:00",
  Five00 = "5:00",
  Six00 = "6:00",
  Seven00 = "7:00",
  Eight00 = "8:00",
  Nine00 = "9:00",
}

/**
 * Upgrade window for devices in network
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow extends SpeakeasyBase {
  /**
   * Day of the week
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dayOfWeek" })
  dayOfWeek?: UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum;

  /**
   * Hour of the day
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hourOfDay" })
  hourOfDay?: UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum;
}

/**
 * Successful operation
 */
export class UpdateNetworkFirmwareUpgrades200ApplicationJSON extends SpeakeasyBase {
  /**
   * The network devices to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "products" })
  @Type(() => UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts)
  products?: UpdateNetworkFirmwareUpgrades200ApplicationJSONProducts;

  /**
   * The timezone for the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  /**
   * Upgrade window for devices in network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upgradeWindow" })
  @Type(() => UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow)
  upgradeWindow?: UpdateNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow;
}

export class UpdateNetworkFirmwareUpgradesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkFirmwareUpgrades200ApplicationJSONObject?: UpdateNetworkFirmwareUpgrades200ApplicationJSON;
}
