// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RelevantLocationRelationTypeEnum - Required. The type of the relationship.
type RelevantLocationRelationTypeEnum string

const (
	RelevantLocationRelationTypeEnumRelationTypeUnspecified    RelevantLocationRelationTypeEnum = "RELATION_TYPE_UNSPECIFIED"
	RelevantLocationRelationTypeEnumDepartmentOf               RelevantLocationRelationTypeEnum = "DEPARTMENT_OF"
	RelevantLocationRelationTypeEnumIndependentEstablishmentIn RelevantLocationRelationTypeEnum = "INDEPENDENT_ESTABLISHMENT_IN"
)

func (e RelevantLocationRelationTypeEnum) ToPointer() *RelevantLocationRelationTypeEnum {
	return &e
}

func (e *RelevantLocationRelationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RELATION_TYPE_UNSPECIFIED":
		fallthrough
	case "DEPARTMENT_OF":
		fallthrough
	case "INDEPENDENT_ESTABLISHMENT_IN":
		*e = RelevantLocationRelationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelevantLocationRelationTypeEnum: %v", v)
	}
}

// RelevantLocation - Information about another location that is related to current one. The relation can be any one of DEPARTMENT_OF or INDEPENDENT_ESTABLISHMENT_OF, and the location specified here can be on either side (parent/child) of the location.
type RelevantLocation struct {
	// Required. Specify the location that is on the other side of the relation by its placeID.
	PlaceID *string `json:"placeId,omitempty"`
	// Required. The type of the relationship.
	RelationType *RelevantLocationRelationTypeEnum `json:"relationType,omitempty"`
}
