// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.up.com.au/api/v1",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// SDK - The Up API gives you programmatic access to your balances and
// transaction data. You can request past transactions or set up
// webhooks to receive real-time events when new transactions hit your
// account. It’s new, it’s exciting and it’s just the beginning.
type SDK struct {
	// Accounts - Accounts represent the underlying store used to track balances
	// and the transactions that have occurred to modify those balances
	// over time. Up currently has two types of account: `SAVER`—used to
	// earn interest and to hit savings goals, and `TRANSACTIONAL`—used
	// for everyday spending.
	//
	Accounts *accounts
	// Categories - Categories enable understanding where your money goes by driving
	// powerful insights in Up. All categories in Up are pre-defined
	// and are automatically assigned to new purchases in most cases. A
	// parent-child relationship is used to represent categories,
	// however parent categories cannot be directly assigned to
	// transactions.
	//
	Categories *categories
	// Tags - Tags are custom labels that can be associated with transactions
	// on Up. Within the Up application, tags provide additional insight
	// into spending. For example, you could have a "Take Away" tag that
	// you apply to purchases from food delivery services. The Up API
	// allows you to manage the tags associated with transactions. Each
	// transaction may have up to 6 tags.
	//
	// Tags are identified by their labels, which are unique strings,
	// so the tag "Holiday" has also the `id` `"Holiday"`.
	//
	Tags *tags
	// Transactions - Transactions represent the movement of money into and out of an
	// account. They have many characteristics that vary depending on
	// the kind of transaction. Transactions may be temporarily `HELD`
	// (pending) or `SETTLED`, typically depending on which payment
	// method was used at the point of sale.
	//
	Transactions *transactions
	// UtilityEndpoints - Some endpoints exist not to expose data, but to test the API
	// itself. Currently there is only one endpoint in this group: ping!
	//
	UtilityEndpoints *utilityEndpoints
	// Webhooks - Webhooks provide a mechanism for a configured URL to receive
	// events when transaction activity occurs on Up. You can think of
	// webhooks as being like push notifications for your server-side
	// application.
	//
	Webhooks *webhooks

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *SDK) {
		sdk._security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Accounts = newAccounts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Categories = newCategories(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Tags = newTags(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Transactions = newTransactions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UtilityEndpoints = newUtilityEndpoints(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Webhooks = newWebhooks(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
