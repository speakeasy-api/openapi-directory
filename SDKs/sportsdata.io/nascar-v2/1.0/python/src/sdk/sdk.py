"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://azure-api.sportsdata.io/nascar/v2",
    "https://azure-api.sportsdata.io/nascar/v2",
]
"""Contains the list of servers available to the SDK"""

class SDK:

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def driver_details(self, request: operations.DriverDetailsRequest) -> operations.DriverDetailsResponse:
        r"""Driver Details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriverDetailsRequest, base_url, '/{format}/driver/{driverid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriverDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Driver])
                res.driver = out

        return res

    def driver_race_projections_entry_list(self, request: operations.DriverRaceProjectionsEntryListRequest) -> operations.DriverRaceProjectionsEntryListResponse:
        r"""Driver Race Projections (Entry List)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriverRaceProjectionsEntryListRequest, base_url, '/{format}/DriverRaceProjections/{raceid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriverRaceProjectionsEntryListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DriverRaceProjection]])
                res.driver_race_projections = out

        return res

    def drivers(self, request: operations.DriversRequest) -> operations.DriversResponse:
        r"""Drivers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriversRequest, base_url, '/{format}/drivers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriversResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Driver]])
                res.drivers = out

        return res

    def race_results(self, request: operations.RaceResultsRequest) -> operations.RaceResultsResponse:
        r"""Race Results"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RaceResultsRequest, base_url, '/{format}/raceresult/{raceid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RaceResultsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RaceResult])
                res.race_result = out

        return res

    def races_schedule(self, request: operations.RacesScheduleRequest) -> operations.RacesScheduleResponse:
        r"""Races / Schedule"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RacesScheduleRequest, base_url, '/{format}/races/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RacesScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Race]])
                res.races = out

        return res

    def series(self, request: operations.SeriesRequest) -> operations.SeriesResponse:
        r"""Series"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SeriesRequest, base_url, '/{format}/series', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Series]])
                res.series = out

        return res

    