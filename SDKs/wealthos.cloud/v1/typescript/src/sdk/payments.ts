/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Payments endpoint allows you to put cash into a specific pot in your account by sending a payment intent. This intent must capture the following information regarding the payment:
 *
 * @remarks
 *
 * * Details regarding payment such as the `amount` to collect and the `currency`
 * * Supported `payment_type` (card payments, electronic fund transfers etc.).
 * * Associated key information to track a payment (e.g. `pot_id`).
 * * Intention of payment:
 *     * Cash into the pot only, do not invest (`purpose: "cash"`)
 *     * Invest based on the portfolio attached to the investor (`purpose: "invest"` and `investment_instructions` not populated)
 *     * Invest based on attached instructions (`purpose: "invest"` and `investment_instructions` populated). If the pot has a portfolio attached, then the priority will be given to investment instructions. If the investment instructions apply only for a propotion of money coming in, then the rest will be added as cash.
 *
 * <!-- If you have additional parameters to associate with a payment, you can define a custom object and include it under a top-level field of the request body with the value you used for `payment_type` as its field name. (e.g. `"stripe": {.....}`). -->
 * Additionaly, if the `service_provider` is given as `"truelayer"` extra accept an extra object `service_provider_params` where you have to provide the `bank_account_id`as a key-value pair and you will recieve this object in response including the fields, `bank_account_id`, `payment_intent_id` and `hpp_url`. (e.g `"service_provider_params: {"bank_account_id": "ba-82faf049...", "payment_intent_id: 91aa9de...", "hpp_url":"https://..."}"`).
 *
 * For `"stripe"`, in the response, you will receive the  `payment_intent_id`, `client_secret` and `publishable_key` inside that additional object with the value you used for `payment_type` as its field name. (e.g. `"service_provider_params": {"payment_intent_id: 91aa9de...", "client_secret": "pi_XXXXX", "publishable_key": "pk_test_XXXXX", .....}`).
 *
 * These values will be used with the client library for each payment call for the following purposes.
 *
 * * `payment_intent_id` - to uniquely identify your payment intent
 * * `client_secret` - The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
 * * `publishable_key` - to uniquely identify your payment service account
 * * `hpp_url` - The redirect URL for proceed with bank payment (only for Truelayer)
 */
export class Payments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Single Payment Intent
   *
   * @remarks
   * Create a new Single Payment Intent for the given `amount` and `currency`. If successful, a new Payment Intent will be created with `pending_confirmation` status and the API will return the `client_secret` and `publishable_key` as response.
   */
  createSinglePaymentIntent(
    req: operations.CreateSinglePaymentIntentRequest,
    security: operations.CreateSinglePaymentIntentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSinglePaymentIntentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateSinglePaymentIntentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/payments/v1/single-payment-intent";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateSinglePaymentIntentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSinglePaymentIntentResponse =
        new operations.CreateSinglePaymentIntentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSinglePaymentIntent201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSinglePaymentIntent201ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSinglePaymentIntent400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSinglePaymentIntent400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSinglePaymentIntent401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSinglePaymentIntent401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSinglePaymentIntent403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSinglePaymentIntent403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSinglePaymentIntent409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSinglePaymentIntent409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSinglePaymentIntent429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSinglePaymentIntent429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSinglePaymentIntent500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSinglePaymentIntent500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get All Payments
   *
   * @remarks
   * Returns all the Payments setup for the tenant in an array
   */
  getAllPayments(
    req: operations.GetAllPaymentsRequest,
    security: operations.GetAllPaymentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllPaymentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllPaymentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tenant/payments/v1/";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAllPaymentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllPaymentsResponse =
        new operations.GetAllPaymentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllPayments200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllPayments200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllPayments400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllPayments400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllPayments401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllPayments401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllPayments403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllPayments403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllPayments404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllPayments404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllPayments429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllPayments429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllPayments500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAllPayments500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Payment by Transaction Id
   *
   * @remarks
   * Get Payment by transaction ID
   */
  getPayment(
    req: operations.GetPaymentRequest,
    security: operations.GetPaymentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/payments/v1/{transaction_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetPaymentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPaymentResponse =
        new operations.GetPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rootTypeForPayments = utils.objectToClass(
              httpRes?.data,
              operations.GetPaymentRootTypeForPayments
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPayment400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPayment400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPayment401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPayment401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPayment403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPayment403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPayment404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPayment404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPayment429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPayment429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPayment500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPayment500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Payments by Pot Id
   *
   * @remarks
   *  Only last 1000 records will be recieved if the result contain more that 1000 payments. In that case, the pagination should be used.
   */
  getPotPayments(
    req: operations.GetPotPaymentsRequest,
    security: operations.GetPotPaymentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPotPaymentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPotPaymentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/payments/v1/getPotPayments/{pot_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetPotPaymentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPotPaymentsResponse =
        new operations.GetPotPaymentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPotPayments200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPotPayments200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPotPayments401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPotPayments401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPotPayments403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPotPayments403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPotPayments404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPotPayments404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPotPayments429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPotPayments429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPotPayments500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetPotPayments500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
