/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { StatusEvent } from "./statusevent";
import { TaskGroupStatus } from "./taskgroupstatus";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Job state
 */
export enum JobStatusStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Queued = "QUEUED",
  Scheduled = "SCHEDULED",
  Running = "RUNNING",
  Succeeded = "SUCCEEDED",
  Failed = "FAILED",
  DeletionInProgress = "DELETION_IN_PROGRESS",
}

/**
 * Job status.
 */
export class JobStatus extends SpeakeasyBase {
  /**
   * The duration of time that the Job spent in status RUNNING.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runDuration" })
  runDuration?: string;

  /**
   * Job state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: JobStatusStateEnum;

  /**
   * Job status events
   */
  @SpeakeasyMetadata({ elemType: StatusEvent })
  @Expose({ name: "statusEvents" })
  @Type(() => StatusEvent)
  statusEvents?: StatusEvent[];

  /**
   * Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.
   */
  @SpeakeasyMetadata({ elemType: TaskGroupStatus })
  @Expose({ name: "taskGroups" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TaskGroupStatus> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TaskGroupStatus);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  taskGroups?: Record<string, TaskGroupStatus>;
}
