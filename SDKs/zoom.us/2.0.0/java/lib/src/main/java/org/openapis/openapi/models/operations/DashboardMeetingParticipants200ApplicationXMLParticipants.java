/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

public class DashboardMeetingParticipants200ApplicationXMLParticipants {
    /**
     * Audio quality of the participant.
     */
    
    public DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum audioQuality;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withAudioQuality(DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum audioQuality) {
        this.audioQuality = audioQuality;
        return this;
    }
    
    /**
     * The type of camera used by participant during the meeting.
     */
    
    public String camera;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withCamera(String camera) {
        this.camera = camera;
        return this;
    }
    
    /**
     * Participant connection type.
     */
    
    public String connectionType;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withConnectionType(String connectionType) {
        this.connectionType = connectionType;
        return this;
    }
    
    /**
     * Another identifier for the participant. Can be a number or characters, maximum length of 15 characters. 
     */
    
    public String customerKey;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withCustomerKey(String customerKey) {
        this.customerKey = customerKey;
        return this;
    }
    
    /**
     * Data Center where participant's meeting data is stored.
     */
    
    public String dataCenter;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withDataCenter(String dataCenter) {
        this.dataCenter = dataCenter;
        return this;
    }
    
    /**
     * The type of device using which the participant joined the meeting. The possible values for this field are:
     * * `Phone`: Participant joined via PSTN.
     * * `H.323/SIP`: Participant joined via an H.323 or SIP device.
     * * `Windows`: Participant joined via VoIP using a Windows device.
     * * `Mac`: Participant joined via VoIP using a Mac device.
     * * `iOS`: Participant joined via VoIP using an iOS device.
     * * `Android`: Participant joined via VoIP using an Android device.
     */
    
    public String device;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withDevice(String device) {
        this.device = device;
        return this;
    }
    
    /**
     * Participant's PC domain.
     */
    
    public String domain;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Email address of the participant.
     */
    
    public String email;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Participant's hard disk ID.
     */
    
    public String harddiskId;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withHarddiskId(String harddiskId) {
        this.harddiskId = harddiskId;
        return this;
    }
    
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    
    public String id;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The number of participants who joined via Zoom Room.
     */
    
    public Long inRoomParticipants;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withInRoomParticipants(Long inRoomParticipants) {
        this.inRoomParticipants = inRoomParticipants;
        return this;
    }
    
    /**
     * Participant's IP address.
     */
    
    public String ipAddress;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * The time at which participant joined the meeting.
     */
    
    public OffsetDateTime joinTime;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withJoinTime(OffsetDateTime joinTime) {
        this.joinTime = joinTime;
        return this;
    }
    
    /**
     * Possible reasons for why participant left the meeting.
     */
    
    public String leaveReason;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withLeaveReason(String leaveReason) {
        this.leaveReason = leaveReason;
        return this;
    }
    
    /**
     * The time at which a participant left the meeting. For live meetings, this field will only be returned if a participant has left the ongoing meeting.
     */
    
    public OffsetDateTime leaveTime;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withLeaveTime(OffsetDateTime leaveTime) {
        this.leaveTime = leaveTime;
        return this;
    }
    
    /**
     * Participant's location.
     */
    
    public String location;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Participant's MAC address.
     */
    
    public String macAddr;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withMacAddr(String macAddr) {
        this.macAddr = macAddr;
        return this;
    }
    
    /**
     * The type of Microphone that participant used during the meeting.
     */
    
    public String microphone;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withMicrophone(String microphone) {
        this.microphone = microphone;
        return this;
    }
    
    /**
     * Participant's network type.
     */
    
    public DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum networkType;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withNetworkType(DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum networkType) {
        this.networkType = networkType;
        return this;
    }
    
    /**
     * Name of Participant's PC.
     */
    
    public String pcName;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withPcName(String pcName) {
        this.pcName = pcName;
        return this;
    }
    
    /**
     * Indicates whether or not recording was used during the meeting.
     */
    
    public Boolean recording;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withRecording(Boolean recording) {
        this.recording = recording;
        return this;
    }
    
    /**
     * Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter. This is not supported for `live` meeting types.
     */
    
    public String registrantId;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withRegistrantId(String registrantId) {
        this.registrantId = registrantId;
        return this;
    }
    
    /**
     * Screen share quality of the participant.
     */
    
    public DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum screenShareQuality;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withScreenShareQuality(DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum screenShareQuality) {
        this.screenShareQuality = screenShareQuality;
        return this;
    }
    
    /**
     * Indicates whether or not a user selected to share an iPhone/iPad app during the screenshare. 
     */
    
    public Boolean shareApplication;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withShareApplication(Boolean shareApplication) {
        this.shareApplication = shareApplication;
        return this;
    }
    
    /**
     * Indicates whether or not a user selected to share their desktop during the screenshare. 
     */
    
    public Boolean shareDesktop;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withShareDesktop(Boolean shareDesktop) {
        this.shareDesktop = shareDesktop;
        return this;
    }
    
    /**
     * Indicates whether or not a user selected to share their whiteboard during the screenshare. 
     */
    
    public Boolean shareWhiteboard;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withShareWhiteboard(Boolean shareWhiteboard) {
        this.shareWhiteboard = shareWhiteboard;
        return this;
    }
    
    /**
     * The type of speaker participant used during the meeting.
     */
    
    public String speaker;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withSpeaker(String speaker) {
        this.speaker = speaker;
        return this;
    }
    
    /**
     * Indicates whether the participant is in the waiting room or in the meeting. 
     * 
     * The value of this field can be `in_meeting` or `in_waiting_room`.
     */
    
    public DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum status;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withStatus(DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     */
    
    public String userId;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Participant display name.
     */
    
    public String userName;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * Participant's Zoom Client version.
     */
    
    public String version;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * Video quality of the participant.
     */
    
    public DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum videoQuality;
    public DashboardMeetingParticipants200ApplicationXMLParticipants withVideoQuality(DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum videoQuality) {
        this.videoQuality = videoQuality;
        return this;
    }
    
}
