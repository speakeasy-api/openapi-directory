"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googledatastoreadminv1indexedproperty as shared_googledatastoreadminv1indexedproperty
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleDatastoreAdminV1IndexAncestorEnum(str, Enum):
    r"""Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED."""
    ANCESTOR_MODE_UNSPECIFIED = 'ANCESTOR_MODE_UNSPECIFIED'
    NONE = 'NONE'
    ALL_ANCESTORS = 'ALL_ANCESTORS'

class GoogleDatastoreAdminV1IndexStateEnum(str, Enum):
    r"""Output only. The state of the index."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    READY = 'READY'
    DELETING = 'DELETING'
    ERROR = 'ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleDatastoreAdminV1Index:
    r"""Datastore composite index definition."""
    
    ancestor: Optional[GoogleDatastoreAdminV1IndexAncestorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ancestor'), 'exclude': lambda f: f is None }})
    r"""Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED."""  
    index_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indexId'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource ID of the index."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Required. The entity kind to which this index applies."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""Output only. Project ID."""  
    properties: Optional[list[shared_googledatastoreadminv1indexedproperty.GoogleDatastoreAdminV1IndexedProperty]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties."""  
    state: Optional[GoogleDatastoreAdminV1IndexStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the index."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleDatastoreAdminV1IndexInput:
    r"""Datastore composite index definition."""
    
    ancestor: Optional[GoogleDatastoreAdminV1IndexAncestorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ancestor'), 'exclude': lambda f: f is None }})
    r"""Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Required. The entity kind to which this index applies."""  
    properties: Optional[list[shared_googledatastoreadminv1indexedproperty.GoogleDatastoreAdminV1IndexedProperty]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties."""  
    