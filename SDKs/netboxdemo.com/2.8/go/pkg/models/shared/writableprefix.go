// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WritablePrefixStatusEnum - Operational status of this prefix
type WritablePrefixStatusEnum string

const (
	WritablePrefixStatusEnumContainer  WritablePrefixStatusEnum = "container"
	WritablePrefixStatusEnumActive     WritablePrefixStatusEnum = "active"
	WritablePrefixStatusEnumReserved   WritablePrefixStatusEnum = "reserved"
	WritablePrefixStatusEnumDeprecated WritablePrefixStatusEnum = "deprecated"
)

func (e *WritablePrefixStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "container":
		fallthrough
	case "active":
		fallthrough
	case "reserved":
		fallthrough
	case "deprecated":
		*e = WritablePrefixStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePrefixStatusEnum: %s", s)
	}
}

type WritablePrefixInput struct {
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                `json:"description,omitempty"`
	// All IP addresses within this prefix are considered usable
	IsPool *bool `json:"is_pool,omitempty"`
	// IPv4 or IPv6 network with mask
	Prefix string `json:"prefix"`
	// The primary function of this prefix
	Role *int64 `json:"role,omitempty"`
	Site *int64 `json:"site,omitempty"`
	// Operational status of this prefix
	Status *WritablePrefixStatusEnum `json:"status,omitempty"`
	Tags   []string                  `json:"tags,omitempty"`
	Tenant *int64                    `json:"tenant,omitempty"`
	Vlan   *int64                    `json:"vlan,omitempty"`
	Vrf    *int64                    `json:"vrf,omitempty"`
}
