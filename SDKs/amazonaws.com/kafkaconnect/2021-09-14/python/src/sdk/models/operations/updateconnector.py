"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import autoscalingupdate as shared_autoscalingupdate
from ..shared import provisionedcapacityupdate as shared_provisionedcapacityupdate
from ..shared import updateconnectorresponse as shared_updateconnectorresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConnectorRequestBodyCapacity:
    r"""The target capacity for the connector. The capacity can be auto scaled or provisioned."""
    
    auto_scaling: Optional[shared_autoscalingupdate.AutoScalingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoScaling'), 'exclude': lambda f: f is None }})  
    provisioned_capacity: Optional[shared_provisionedcapacityupdate.ProvisionedCapacityUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisionedCapacity'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConnectorRequestBody:
    
    capacity: UpdateConnectorRequestBodyCapacity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacity') }})
    r"""The target capacity for the connector. The capacity can be auto scaled or provisioned."""  
    

@dataclasses.dataclass
class UpdateConnectorRequest:
    
    connector_arn: str = dataclasses.field(metadata={'path_param': { 'field_name': 'connectorArn', 'style': 'simple', 'explode': False }})
    r"""The Amazon Resource Name (ARN) of the connector that you want to update."""  
    current_version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'currentVersion', 'style': 'form', 'explode': True }})
    r"""The current version of the connector that you want to update."""  
    request_body: UpdateConnectorRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateConnectorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    update_connector_response: Optional[shared_updateconnectorresponse.UpdateConnectorResponse] = dataclasses.field(default=None)
    r"""Success"""  
    