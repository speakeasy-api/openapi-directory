/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
 */
export enum SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum {
  Initial = "initial",
  InProgress = "in_progress",
  Approved = "approved",
  PendingModeration = "pending_moderation",
}

/**
 * The properties of the Schema Response.
 */
export class SchemaResponsePatchSchemaResponsesAttributesInput extends SpeakeasyBase {
  /**
   * The date the Schema Response was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_created" })
  dateCreated?: number;

  /**
   * The date the Schema Response was most recently changed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_modified" })
  dateModified?: number;

  /**
   * The date the Schema Response was submitted for approval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_submitted" })
  dateSubmitted?: number;

  /**
   * A bool that represents whether the Schema Response is the original one that was made when the registration was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_original_response" })
  isOriginalResponse?: boolean;

  /**
   * A bool that represents whether the Schema Response needs the current user to approve the state transition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_pending_current_user_approval" })
  isPendingCurrentUserApproval?: boolean;

  /**
   * A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reviews_state" })
  reviewsState?: SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum;

  /**
   * A user provided string representing the reason a new Schema Response was needed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revision_justification" })
  revisionJustification?: string;

  /**
   * A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{"q1": "Answer 1"}` the block key is `q1`..
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revision_responses" })
  revisionResponses?: Record<string, any>;
}

/**
 * URLs to alternative representations of the Schema Response entity.
 */
export class SchemaResponsePatchSchemaResponsesLinks extends SpeakeasyBase {
  /**
   * A link to the detail page for a Schema Response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  self?: string;
}

/**
 * Links to other entities or entity collections that have a relationship to the file entity.
 */
export class SchemaResponsePatchSchemaResponsesRelationships extends SpeakeasyBase {
  /**
   * A link to the Registration Schema Actions endpoint for this Schema Response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actions" })
  actions?: string;

  /**
   * A link to the User who initiated the creation of the Schema Response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "initiated_by" })
  initiatedBy?: string;

  /**
   * A link to the Registration for this Schema Response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registration" })
  registration?: string;

  /**
   * A link to the Registration Schema for this Schema Response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registration_schema" })
  registrationSchema?: string;
}

export class SchemaResponsePatchSchemaResponsesInput extends SpeakeasyBase {
  /**
   * The properties of the Schema Response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => SchemaResponsePatchSchemaResponsesAttributesInput)
  attributes: SchemaResponsePatchSchemaResponsesAttributesInput;

  /**
   * URLs to alternative representations of the Schema Response entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => SchemaResponsePatchSchemaResponsesLinks)
  links?: SchemaResponsePatchSchemaResponsesLinks;

  /**
   * Links to other entities or entity collections that have a relationship to the file entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => SchemaResponsePatchSchemaResponsesRelationships)
  relationships?: SchemaResponsePatchSchemaResponsesRelationships;

  /**
   * The type identifier of the Schema Response (`schema-response`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class SchemaResponsePatchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SchemaResponsePatchSchemaResponsesInput;

  /**
   * The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=schema_response_id",
  })
  schemaResponseId: string;
}

/**
 * The properties of the Schema Response.
 */
export class SchemaResponsePatchSchemaResponsesAttributes extends SpeakeasyBase {
  /**
   * The date the Schema Response was created
   */
  @SpeakeasyMetadata()
  dateCreated?: number;

  /**
   * The date the Schema Response was most recently changed.
   */
  @SpeakeasyMetadata()
  dateModified?: number;

  /**
   * The date the Schema Response was submitted for approval.
   */
  @SpeakeasyMetadata()
  dateSubmitted?: number;

  /**
   * A bool that represents whether the Schema Response is the original one that was made when the registration was created.
   */
  @SpeakeasyMetadata()
  isOriginalResponse?: boolean;

  /**
   * A bool that represents whether the Schema Response needs the current user to approve the state transition.
   */
  @SpeakeasyMetadata()
  isPendingCurrentUserApproval?: boolean;

  /**
   * A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
   */
  @SpeakeasyMetadata()
  reviewsState?: SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum;

  /**
   * A user provided string representing the reason a new Schema Response was needed.
   */
  @SpeakeasyMetadata()
  revisionJustification?: string;

  /**
   * A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{"q1": "Answer 1"}` the block key is `q1`..
   */
  @SpeakeasyMetadata()
  revisionResponses?: Record<string, any>;

  /**
   * A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema.
   */
  @SpeakeasyMetadata()
  updatedResponseKeys?: any[];
}

/**
 * OK
 */
export class SchemaResponsePatchSchemaResponses extends SpeakeasyBase {
  /**
   * The properties of the Schema Response.
   */
  @SpeakeasyMetadata()
  attributes: SchemaResponsePatchSchemaResponsesAttributes;

  /**
   * The unique identifier of the Schema Response.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * URLs to alternative representations of the Schema Response entity.
   */
  @SpeakeasyMetadata()
  links?: SchemaResponsePatchSchemaResponsesLinks;

  /**
   * Links to other entities or entity collections that have a relationship to the file entity.
   */
  @SpeakeasyMetadata()
  relationships?: SchemaResponsePatchSchemaResponsesRelationships;

  /**
   * The type identifier of the Schema Response (`schema-response`).
   */
  @SpeakeasyMetadata()
  type: string;
}

export class SchemaResponsePatchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
