// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetDeparturesByCRSRequest struct {
	// The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross.
	Crs string `pathParam:"style=simple,explode=false,name=CRS"`
	// The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information.
	APIKey string `queryParam:"style=form,explode=true,name=apiKey"`
	// The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services departing from Paddington that stop at Reading.
	FilterStation *string `queryParam:"style=form,explode=true,name=filterStation"`
	// The number of departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running from the selected station within the time window specified.
	NumServices *int64 `queryParam:"style=form,explode=true,name=numServices"`
	// Should the response contain information on the calling points for each service? If set to false, calling points will not be returned.
	ServiceDetails *bool `queryParam:"style=form,explode=true,name=serviceDetails"`
	// The time window in minutes to offset the departure information by. For example, a value of 20 will not show services departing within the next 20 minutes.
	TimeOffset *int64 `queryParam:"style=form,explode=true,name=timeOffset"`
	// The time window to show services for in minutes. For example, a value of 60 will show services departing the station in the next 60 minutes.
	TimeWindow *int64 `queryParam:"style=form,explode=true,name=timeWindow"`
}

type GetDeparturesByCRSResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
