/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * Get from a single dictionary
 */
export enum GetTextPronunciationsSourceDictionaryEnum {
  Ahd5 = "ahd-5",
  Century = "century",
  Cmu = "cmu",
  Macmillan = "macmillan",
  Wiktionary = "wiktionary",
  Webster = "webster",
  Wordnet = "wordnet",
}

/**
 * Text pronunciation type
 */
export enum GetTextPronunciationsTypeFormatEnum {
  Ahd5 = "ahd-5",
  Arpabet = "arpabet",
  GcideDiacritical = "gcide-diacritical",
  Ipa = "IPA",
}

/**
 * If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
 */
export enum GetTextPronunciationsUseCanonicalEnum {
  False = "false",
  True = "true",
}

export class GetTextPronunciationsRequest extends SpeakeasyBase {
  /**
   * Maximum number of results to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Get from a single dictionary
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sourceDictionary",
  })
  sourceDictionary?: GetTextPronunciationsSourceDictionaryEnum;

  /**
   * Text pronunciation type
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=typeFormat",
  })
  typeFormat?: GetTextPronunciationsTypeFormatEnum;

  /**
   * If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=useCanonical",
  })
  useCanonical?: GetTextPronunciationsUseCanonicalEnum;

  /**
   * Word to get pronunciations for
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=word",
  })
  word: string;
}

export class GetTextPronunciationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
