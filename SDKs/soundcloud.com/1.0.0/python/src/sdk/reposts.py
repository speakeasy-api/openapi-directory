"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Reposts:
    r"""Reposting Tracks & Playlists."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_reposts_playlists_playlist_id_(self, request: operations.DeleteRepostsPlaylistsPlaylistIDRequest, security: operations.DeleteRepostsPlaylistsPlaylistIDSecurity) -> operations.DeleteRepostsPlaylistsPlaylistIDResponse:
        r"""Removes a repost on a playlist as the authenticated user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepostsPlaylistsPlaylistIDRequest, base_url, '/reposts/playlists/{playlist_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepostsPlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_reposts_tracks_track_id_(self, request: operations.DeleteRepostsTracksTrackIDRequest, security: operations.DeleteRepostsTracksTrackIDSecurity) -> operations.DeleteRepostsTracksTrackIDResponse:
        r"""Removes a repost on a track as the authenticated user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepostsTracksTrackIDRequest, base_url, '/reposts/tracks/{track_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepostsTracksTrackIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_reposts_playlists_playlist_id_(self, request: operations.PostRepostsPlaylistsPlaylistIDRequest, security: operations.PostRepostsPlaylistsPlaylistIDSecurity) -> operations.PostRepostsPlaylistsPlaylistIDResponse:
        r"""Reposts a playlist as the authenticated user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepostsPlaylistsPlaylistIDRequest, base_url, '/reposts/playlists/{playlist_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepostsPlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_reposts_tracks_track_id_(self, request: operations.PostRepostsTracksTrackIDRequest, security: operations.PostRepostsTracksTrackIDSecurity) -> operations.PostRepostsTracksTrackIDResponse:
        r"""Reposts a track as the authenticated user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepostsTracksTrackIDRequest, base_url, '/reposts/tracks/{track_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepostsTracksTrackIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    