<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Estimation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return all estimation for the account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiAllResponse
     */
	public function estimationApiAll(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/all');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EstimationApiAllRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listResultEstimationDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListResultEstimationDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listResultEstimationDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListResultEstimationDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Change estimation status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusFormResponse
     */
	public function estimationApiChangeStatusForm(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/changestatus');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationChangeStatusApiModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiChangeStatusForm200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiChangeStatusForm200TextJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change estimation status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusJsonResponse
     */
	public function estimationApiChangeStatusJson(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/changestatus');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationChangeStatusApiModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiChangeStatusJSON200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiChangeStatusJSON200TextJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change estimation status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusRawResponse
     */
	public function estimationApiChangeStatusRaw(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/changestatus');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiChangeStatusRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiChangeStatusRaw200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiChangeStatusRaw200TextJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteFormResponse
     */
	public function estimationApiDeleteForm(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationDeleteApiModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiDeleteForm200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiDeleteForm200TextJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteJsonResponse
     */
	public function estimationApiDeleteJson(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationDeleteApiModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiDeleteJSON200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiDeleteJSON200TextJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteRawResponse
     */
	public function estimationApiDeleteRaw(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/delete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiDeleteRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiDeleteRaw200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiDeleteRaw200TextJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return estimation data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiDetailsResponse
     */
	public function estimationApiDetails(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/details');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EstimationApiDetailsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create an estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewFormResponse
     */
	public function estimationApiNewForm(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/new');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationCreateApiModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create an estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewJsonResponse
     */
	public function estimationApiNewJson(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/new');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationCreateApiModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create an estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewRawResponse
     */
	public function estimationApiNewRaw(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/new');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiNewRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Send the provided estimation to the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientFormResponse
     */
	public function estimationApiSendToClientForm(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/sendtoclient');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendEstimationToClientApiModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiSendToClientForm200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiSendToClientForm200TextJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send the provided estimation to the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientJsonResponse
     */
	public function estimationApiSendToClientJson(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/sendtoclient');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendEstimationToClientApiModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiSendToClientJSON200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiSendToClientJSON200TextJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send the provided estimation to the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientRawResponse
     */
	public function estimationApiSendToClientRaw(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/sendtoclient');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiSendToClientRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiSendToClientRaw200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiSendToClientRaw200TextJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the status of the estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiStatusResponse
     */
	public function estimationApiStatus(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/status');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EstimationApiStatusRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiStatus200ApplicationJSONStringEnum = $serializer->deserialize((string)$httpResponse->getBody(), 'enum<OpenAPI\OpenAPI\Models\Operations\EstimationApiStatus200ApplicationJSONEnum>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationApiStatus200TextJSONStringEnum = $serializer->deserialize((string)$httpResponse->getBody(), 'enum<OpenAPI\OpenAPI\Models\Operations\EstimationApiStatus200TextJSONEnum>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateFormResponse
     */
	public function estimationApiUpdateForm(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/update');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationUpdateApiModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an existing estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateJsonResponse
     */
	public function estimationApiUpdateJson(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/update');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "estimationUpdateApiModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an existing estimation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateRawResponse
     */
	public function estimationApiUpdateRaw(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/update');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiUpdateRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationFullDetailsApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationFullDetailsApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Return the unique url to the client's invoice
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EstimationApiUriRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EstimationApiUriResponse
     */
	public function estimationApiUri(
        \OpenAPI\OpenAPI\Models\Operations\EstimationApiUriRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EstimationApiUriResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/estimation/uri');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EstimationApiUriRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EstimationApiUriResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationUriApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationUriApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->estimationUriApiModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EstimationUriApiModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}