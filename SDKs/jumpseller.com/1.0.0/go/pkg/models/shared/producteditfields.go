// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProductEditFieldsPackageFormatEnum - Format the product package
type ProductEditFieldsPackageFormatEnum string

const (
	ProductEditFieldsPackageFormatEnumBox      ProductEditFieldsPackageFormatEnum = "box"
	ProductEditFieldsPackageFormatEnumCylinder ProductEditFieldsPackageFormatEnum = "cylinder"
)

func (e ProductEditFieldsPackageFormatEnum) ToPointer() *ProductEditFieldsPackageFormatEnum {
	return &e
}

func (e *ProductEditFieldsPackageFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "box":
		fallthrough
	case "cylinder":
		*e = ProductEditFieldsPackageFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductEditFieldsPackageFormatEnum: %v", v)
	}
}

// ProductEditFieldsStatusEnum - Status of the product
type ProductEditFieldsStatusEnum string

const (
	ProductEditFieldsStatusEnumAvailable    ProductEditFieldsStatusEnum = "available"
	ProductEditFieldsStatusEnumNotAvailable ProductEditFieldsStatusEnum = "not-available"
	ProductEditFieldsStatusEnumDisabled     ProductEditFieldsStatusEnum = "disabled"
)

func (e ProductEditFieldsStatusEnum) ToPointer() *ProductEditFieldsStatusEnum {
	return &e
}

func (e *ProductEditFieldsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "not-available":
		fallthrough
	case "disabled":
		*e = ProductEditFieldsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductEditFieldsStatusEnum: %v", v)
	}
}

type ProductEditFields struct {
	// Barcode of the product
	Barcode    *string          `json:"barcode,omitempty"`
	Categories []CategoryFields `json:"categories,omitempty"`
	// Description of the product
	Description *string `json:"description,omitempty"`
	// Diameter of the product
	Diameter *float32 `json:"diameter,omitempty"`
	// True if the product is featured
	Featured *bool `json:"featured,omitempty"`
	// Category of a Product based on the Google product taxonomy
	GoogleProductCategory *string `json:"google_product_category,omitempty"`
	// Height of the product
	Height *float32 `json:"height,omitempty"`
	// Length of the product
	Length *float32 `json:"length,omitempty"`
	// SEO meta description of the product
	MetaDescription *string `json:"meta_description,omitempty"`
	// Name of the product
	Name string `json:"name"`
	// Format the product package
	PackageFormat *ProductEditFieldsPackageFormatEnum `json:"package_format,omitempty"`
	// SEO title of the product
	PageTitle *string `json:"page_title,omitempty"`
	// Product unique URL path
	Permalink *string `json:"permalink,omitempty"`
	// Price of the product
	Price float32 `json:"price"`
	// False if the product is digital
	ShippingRequired *bool `json:"shipping_required,omitempty"`
	// Stock Keeping Unit of the product
	Sku *string `json:"sku,omitempty"`
	// Status of the product
	Status *ProductEditFieldsStatusEnum `json:"status,omitempty"`
	// Quantity in stock for the product
	Stock *int `json:"stock,omitempty"`
	// True if the Product has unlimited stock
	StockUnlimited *bool `json:"stock_unlimited,omitempty"`
	// Weight of the product
	Weight *float32 `json:"weight,omitempty"`
	// Width of the product
	Width *float32 `json:"width,omitempty"`
}
