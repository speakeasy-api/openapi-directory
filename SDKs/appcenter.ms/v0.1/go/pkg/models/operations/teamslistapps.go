// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TeamsListAppsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type TeamsListAppsPathParams struct {
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
	// The team's name
	TeamName string `pathParam:"style=simple,explode=false,name=team_name"`
}

type TeamsListAppsRequest struct {
	PathParams TeamsListAppsPathParams
	Security   TeamsListAppsSecurity
}

type TeamsListAppsDefaultApplicationJSONErrorCodeEnum string

const (
	TeamsListAppsDefaultApplicationJSONErrorCodeEnumBadRequest          TeamsListAppsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	TeamsListAppsDefaultApplicationJSONErrorCodeEnumConflict            TeamsListAppsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	TeamsListAppsDefaultApplicationJSONErrorCodeEnumNotAcceptable       TeamsListAppsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	TeamsListAppsDefaultApplicationJSONErrorCodeEnumNotFound            TeamsListAppsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	TeamsListAppsDefaultApplicationJSONErrorCodeEnumInternalServerError TeamsListAppsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	TeamsListAppsDefaultApplicationJSONErrorCodeEnumUnauthorized        TeamsListAppsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	TeamsListAppsDefaultApplicationJSONErrorCodeEnumTooManyRequests     TeamsListAppsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *TeamsListAppsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = TeamsListAppsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListAppsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type TeamsListAppsDefaultApplicationJSONError struct {
	Code    TeamsListAppsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

// TeamsListAppsDefaultApplicationJSON - Error
type TeamsListAppsDefaultApplicationJSON struct {
	Error TeamsListAppsDefaultApplicationJSONError `json:"error"`
}

type TeamsListApps200ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type TeamsListApps200ApplicationJSONMemberPermissionsEnum string

const (
	TeamsListApps200ApplicationJSONMemberPermissionsEnumManager   TeamsListApps200ApplicationJSONMemberPermissionsEnum = "manager"
	TeamsListApps200ApplicationJSONMemberPermissionsEnumDeveloper TeamsListApps200ApplicationJSONMemberPermissionsEnum = "developer"
	TeamsListApps200ApplicationJSONMemberPermissionsEnumViewer    TeamsListApps200ApplicationJSONMemberPermissionsEnum = "viewer"
	TeamsListApps200ApplicationJSONMemberPermissionsEnumTester    TeamsListApps200ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e *TeamsListApps200ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = TeamsListApps200ApplicationJSONMemberPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListApps200ApplicationJSONMemberPermissionsEnum: %s", s)
	}
}

// TeamsListApps200ApplicationJSONOriginEnum - The creation origin of this app
type TeamsListApps200ApplicationJSONOriginEnum string

const (
	TeamsListApps200ApplicationJSONOriginEnumAppcenter TeamsListApps200ApplicationJSONOriginEnum = "appcenter"
	TeamsListApps200ApplicationJSONOriginEnumHockeyapp TeamsListApps200ApplicationJSONOriginEnum = "hockeyapp"
	TeamsListApps200ApplicationJSONOriginEnumCodepush  TeamsListApps200ApplicationJSONOriginEnum = "codepush"
)

func (e *TeamsListApps200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = TeamsListApps200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListApps200ApplicationJSONOriginEnum: %s", s)
	}
}

// TeamsListApps200ApplicationJSONOsEnum - The OS the app will be running on
type TeamsListApps200ApplicationJSONOsEnum string

const (
	TeamsListApps200ApplicationJSONOsEnumAndroid TeamsListApps200ApplicationJSONOsEnum = "Android"
	TeamsListApps200ApplicationJSONOsEnumIOs     TeamsListApps200ApplicationJSONOsEnum = "iOS"
	TeamsListApps200ApplicationJSONOsEnumMacOs   TeamsListApps200ApplicationJSONOsEnum = "macOS"
	TeamsListApps200ApplicationJSONOsEnumTizen   TeamsListApps200ApplicationJSONOsEnum = "Tizen"
	TeamsListApps200ApplicationJSONOsEnumTvOs    TeamsListApps200ApplicationJSONOsEnum = "tvOS"
	TeamsListApps200ApplicationJSONOsEnumWindows TeamsListApps200ApplicationJSONOsEnum = "Windows"
	TeamsListApps200ApplicationJSONOsEnumLinux   TeamsListApps200ApplicationJSONOsEnum = "Linux"
	TeamsListApps200ApplicationJSONOsEnumCustom  TeamsListApps200ApplicationJSONOsEnum = "Custom"
)

func (e *TeamsListApps200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = TeamsListApps200ApplicationJSONOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListApps200ApplicationJSONOsEnum: %s", s)
	}
}

// TeamsListApps200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type TeamsListApps200ApplicationJSONOwnerTypeEnum string

const (
	TeamsListApps200ApplicationJSONOwnerTypeEnumOrg  TeamsListApps200ApplicationJSONOwnerTypeEnum = "org"
	TeamsListApps200ApplicationJSONOwnerTypeEnumUser TeamsListApps200ApplicationJSONOwnerTypeEnum = "user"
)

func (e *TeamsListApps200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = TeamsListApps200ApplicationJSONOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListApps200ApplicationJSONOwnerTypeEnum: %s", s)
	}
}

// TeamsListApps200ApplicationJSONOwner - The information about the app's owner
type TeamsListApps200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type TeamsListApps200ApplicationJSONOwnerTypeEnum `json:"type"`
}

// TeamsListApps200ApplicationJSONPlatformEnum - The platform of the app
type TeamsListApps200ApplicationJSONPlatformEnum string

const (
	TeamsListApps200ApplicationJSONPlatformEnumJava            TeamsListApps200ApplicationJSONPlatformEnum = "Java"
	TeamsListApps200ApplicationJSONPlatformEnumObjectiveCSwift TeamsListApps200ApplicationJSONPlatformEnum = "Objective-C-Swift"
	TeamsListApps200ApplicationJSONPlatformEnumUwp             TeamsListApps200ApplicationJSONPlatformEnum = "UWP"
	TeamsListApps200ApplicationJSONPlatformEnumCordova         TeamsListApps200ApplicationJSONPlatformEnum = "Cordova"
	TeamsListApps200ApplicationJSONPlatformEnumReactNative     TeamsListApps200ApplicationJSONPlatformEnum = "React-Native"
	TeamsListApps200ApplicationJSONPlatformEnumUnity           TeamsListApps200ApplicationJSONPlatformEnum = "Unity"
	TeamsListApps200ApplicationJSONPlatformEnumElectron        TeamsListApps200ApplicationJSONPlatformEnum = "Electron"
	TeamsListApps200ApplicationJSONPlatformEnumXamarin         TeamsListApps200ApplicationJSONPlatformEnum = "Xamarin"
	TeamsListApps200ApplicationJSONPlatformEnumWpf             TeamsListApps200ApplicationJSONPlatformEnum = "WPF"
	TeamsListApps200ApplicationJSONPlatformEnumWinForms        TeamsListApps200ApplicationJSONPlatformEnum = "WinForms"
	TeamsListApps200ApplicationJSONPlatformEnumUnknown         TeamsListApps200ApplicationJSONPlatformEnum = "Unknown"
	TeamsListApps200ApplicationJSONPlatformEnumCustom          TeamsListApps200ApplicationJSONPlatformEnum = "Custom"
)

func (e *TeamsListApps200ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = TeamsListApps200ApplicationJSONPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListApps200ApplicationJSONPlatformEnum: %s", s)
	}
}

type TeamsListApps200ApplicationJSONTeamPermissionsEnum string

const (
	TeamsListApps200ApplicationJSONTeamPermissionsEnumManager   TeamsListApps200ApplicationJSONTeamPermissionsEnum = "manager"
	TeamsListApps200ApplicationJSONTeamPermissionsEnumDeveloper TeamsListApps200ApplicationJSONTeamPermissionsEnum = "developer"
	TeamsListApps200ApplicationJSONTeamPermissionsEnumViewer    TeamsListApps200ApplicationJSONTeamPermissionsEnum = "viewer"
)

func (e *TeamsListApps200ApplicationJSONTeamPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		*e = TeamsListApps200ApplicationJSONTeamPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListApps200ApplicationJSONTeamPermissionsEnum: %s", s)
	}
}

type TeamsListApps200ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                            `json:"app_secret"`
	AzureSubscription *TeamsListApps200ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []TeamsListApps200ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin TeamsListApps200ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os TeamsListApps200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner TeamsListApps200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform TeamsListApps200ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The permissions the team has for the app
	TeamPermissions []TeamsListApps200ApplicationJSONTeamPermissionsEnum `json:"team_permissions,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type TeamsListAppsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	TeamsListApps200ApplicationJSONAnies []TeamsListApps200ApplicationJSON
	// Error
	TeamsListAppsDefaultApplicationJSONObject *TeamsListAppsDefaultApplicationJSON
}
