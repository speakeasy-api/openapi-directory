"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import voice_v1_byoc_trunk as shared_voice_v1_byoc_trunk
from enum import Enum
from typing import Optional

CREATE_BYOC_TRUNK_SERVERS = [
	"https://voice.twilio.com",
]


@dataclasses.dataclass
class CreateByocTrunkSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateByocTrunkCreateByocTrunkRequestStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateByocTrunkCreateByocTrunkRequestVoiceFallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateByocTrunkCreateByocTrunkRequestVoiceMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateByocTrunkCreateByocTrunkRequest:
    
    cnam_lookup_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CnamLookupEnabled' }})
    r"""Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information."""  
    connection_policy_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConnectionPolicySid' }})
    r"""The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long."""  
    from_domain_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FromDomainSid' }})
    r"""The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\"call back\\" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\"sip.twilio.com\\"."""  
    status_callback_method: Optional[CreateByocTrunkCreateByocTrunkRequestStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackMethod' }})
    r"""The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`."""  
    status_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackUrl' }})
    r"""The URL that we should call to pass status parameters (such as call ended) to your application."""  
    voice_fallback_method: Optional[CreateByocTrunkCreateByocTrunkRequestVoiceFallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceFallbackMethod' }})
    r"""The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`."""  
    voice_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceFallbackUrl' }})
    r"""The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`."""  
    voice_method: Optional[CreateByocTrunkCreateByocTrunkRequestVoiceMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceMethod' }})
    r"""The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`."""  
    voice_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceUrl' }})
    r"""The URL we should call when the BYOC Trunk receives a call."""  
    

@dataclasses.dataclass
class CreateByocTrunkResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    voice_v1_byoc_trunk: Optional[shared_voice_v1_byoc_trunk.VoiceV1ByocTrunk] = dataclasses.field(default=None)
    r"""Created"""  
    