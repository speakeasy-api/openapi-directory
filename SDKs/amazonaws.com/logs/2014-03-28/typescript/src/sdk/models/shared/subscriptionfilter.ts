/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DistributionEnum } from "./distributionenum";
import { Expose } from "class-transformer";

/**
 * Represents a subscription filter.
 */
export class SubscriptionFilter extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  creationTime?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationArn" })
  destinationArn?: string;

  /**
   * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distribution" })
  distribution?: DistributionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "filterName" })
  filterName?: string;

  /**
   * A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filterPattern" })
  filterPattern?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logGroupName" })
  logGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;
}
