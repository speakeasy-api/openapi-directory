"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def memcache_projects_locations_instances_apply_parameters(self, request: operations.MemcacheProjectsLocationsInstancesApplyParametersRequest, security: operations.MemcacheProjectsLocationsInstancesApplyParametersSecurity) -> operations.MemcacheProjectsLocationsInstancesApplyParametersResponse:
        r"""`ApplyParameters` restarts the set of specified nodes in order to update them to the current set of parameters for the Memcached Instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsInstancesApplyParametersRequest, base_url, '/v1/{name}:applyParameters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apply_parameters_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsInstancesApplyParametersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsInstancesApplyParametersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def memcache_projects_locations_instances_create(self, request: operations.MemcacheProjectsLocationsInstancesCreateRequest, security: operations.MemcacheProjectsLocationsInstancesCreateSecurity) -> operations.MemcacheProjectsLocationsInstancesCreateResponse:
        r"""Creates a new Instance in a given location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsInstancesCreateRequest, base_url, '/v1/{parent}/instances', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instance_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsInstancesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsInstancesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def memcache_projects_locations_instances_list(self, request: operations.MemcacheProjectsLocationsInstancesListRequest, security: operations.MemcacheProjectsLocationsInstancesListSecurity) -> operations.MemcacheProjectsLocationsInstancesListResponse:
        r"""Lists Instances in a given location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsInstancesListRequest, base_url, '/v1/{parent}/instances', request)
        
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsInstancesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsInstancesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListInstancesResponse])
                res.list_instances_response = out

        return res

    def memcache_projects_locations_instances_patch(self, request: operations.MemcacheProjectsLocationsInstancesPatchRequest, security: operations.MemcacheProjectsLocationsInstancesPatchSecurity) -> operations.MemcacheProjectsLocationsInstancesPatchResponse:
        r"""Updates an existing Instance in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsInstancesPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instance_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsInstancesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsInstancesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def memcache_projects_locations_instances_reschedule_maintenance(self, request: operations.MemcacheProjectsLocationsInstancesRescheduleMaintenanceRequest, security: operations.MemcacheProjectsLocationsInstancesRescheduleMaintenanceSecurity) -> operations.MemcacheProjectsLocationsInstancesRescheduleMaintenanceResponse:
        r"""Reschedules upcoming maintenance event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsInstancesRescheduleMaintenanceRequest, base_url, '/v1/{instance}:rescheduleMaintenance', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "reschedule_maintenance_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsInstancesRescheduleMaintenanceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsInstancesRescheduleMaintenanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def memcache_projects_locations_instances_update_parameters(self, request: operations.MemcacheProjectsLocationsInstancesUpdateParametersRequest, security: operations.MemcacheProjectsLocationsInstancesUpdateParametersSecurity) -> operations.MemcacheProjectsLocationsInstancesUpdateParametersResponse:
        r"""Updates the defined Memcached parameters for an existing instance. This method only stages the parameters, it must be followed by `ApplyParameters` to apply the parameters to nodes of the Memcached instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsInstancesUpdateParametersRequest, base_url, '/v1/{name}:updateParameters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_parameters_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsInstancesUpdateParametersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsInstancesUpdateParametersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def memcache_projects_locations_list(self, request: operations.MemcacheProjectsLocationsListRequest, security: operations.MemcacheProjectsLocationsListSecurity) -> operations.MemcacheProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def memcache_projects_locations_operations_cancel(self, request: operations.MemcacheProjectsLocationsOperationsCancelRequest, security: operations.MemcacheProjectsLocationsOperationsCancelSecurity) -> operations.MemcacheProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def memcache_projects_locations_operations_delete(self, request: operations.MemcacheProjectsLocationsOperationsDeleteRequest, security: operations.MemcacheProjectsLocationsOperationsDeleteSecurity) -> operations.MemcacheProjectsLocationsOperationsDeleteResponse:
        r"""Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsOperationsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsOperationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsOperationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def memcache_projects_locations_operations_get(self, request: operations.MemcacheProjectsLocationsOperationsGetRequest, security: operations.MemcacheProjectsLocationsOperationsGetSecurity) -> operations.MemcacheProjectsLocationsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsOperationsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def memcache_projects_locations_operations_list(self, request: operations.MemcacheProjectsLocationsOperationsListRequest, security: operations.MemcacheProjectsLocationsOperationsListSecurity) -> operations.MemcacheProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\\"/v1/{name=users/*}/operations\\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MemcacheProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.MemcacheProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MemcacheProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    