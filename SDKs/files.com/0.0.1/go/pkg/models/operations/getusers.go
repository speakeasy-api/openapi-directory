// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetUsersQueryParams struct {
	// Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// If set, return records where the specified field is equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
	Filter map[string]interface{} `queryParam:"style=form,explode=true,name=filter"`
	// If set, return records where the specified field is greater than the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
	FilterGt map[string]interface{} `queryParam:"style=form,explode=true,name=filter_gt"`
	// If set, return records where the specified field is greater than or equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
	FilterGteq map[string]interface{} `queryParam:"style=form,explode=true,name=filter_gteq"`
	// If set, return records where the specified field is equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
	FilterLike map[string]interface{} `queryParam:"style=form,explode=true,name=filter_like"`
	// If set, return records where the specified field is less than the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
	FilterLt map[string]interface{} `queryParam:"style=form,explode=true,name=filter_lt"`
	// If set, return records where the specified field is less than or equal to the supplied value. Valid fields are `username`, `email`, `company`, `site_admin`, `password_validity_days`, `ssl_required`, `last_login_at`, `authenticate_until` or `not_site_admin`. Valid field combinations are `[ not_site_admin, username ]`.
	FilterLteq map[string]interface{} `queryParam:"style=form,explode=true,name=filter_lteq"`
	// comma-separated list of User IDs
	Ids *string `queryParam:"style=form,explode=true,name=ids"`
	// Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// If `true`, list only admin users.
	QAdmin *string `queryParam:"style=form,explode=true,name=q[admin]"`
	// If set, list only users with overridden allowed IP setting.
	QAllowedIps *string `queryParam:"style=form,explode=true,name=q[allowed_ips]"`
	// List users matching email.
	QEmail *string `queryParam:"style=form,explode=true,name=q[email]"`
	// List users matching notes field.
	QNotes *string `queryParam:"style=form,explode=true,name=q[notes]"`
	// If set, list only users with overridden password validity days setting.
	QPasswordValidityDays *string `queryParam:"style=form,explode=true,name=q[password_validity_days]"`
	// If set, list only users with overridden SSL required setting.
	QSslRequired *string `queryParam:"style=form,explode=true,name=q[ssl_required]"`
	// List users matching username.
	QUsername *string `queryParam:"style=form,explode=true,name=q[username]"`
	// Searches for partial matches of name, username, or email.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[authenticate_until]=desc`). Valid fields are `authenticate_until`, `active`, `email`, `last_desktop_login_at`, `last_login_at`, `username`, `company`, `name`, `site_admin`, `receive_admin_alerts`, `password_validity_days`, `ssl_required` or `not_site_admin`.
	SortBy map[string]interface{} `queryParam:"style=form,explode=true,name=sort_by"`
}

type GetUsersRequest struct {
	QueryParams GetUsersQueryParams
}

type GetUsersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of Users objects.
	UserEntities []shared.UserEntity
}
