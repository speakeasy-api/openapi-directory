"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AddressToValidateAddressResidentialIndicatorEnum(str, Enum):
    r"""Indicates whether an address is residential."""
    UNKNOWN = 'unknown'
    YES = 'yes'
    NO = 'no'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddressToValidate:
    r"""A complete or partial mailing address."""
    
    address_line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line1') }})
    r"""The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines."""  
    city_locality: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_locality') }})
    r"""The name of the city or locality"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_code') }})
    r"""The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)"""  
    state_province: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_province') }})
    r"""The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation."""  
    address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the street address.  For some addresses, this line may not be needed."""  
    address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line3'), 'exclude': lambda f: f is None }})
    r"""The third line of the street address.  For some addresses, this line may not be needed."""  
    address_residential_indicator: Optional[AddressToValidateAddressResidentialIndicatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_residential_indicator'), 'exclude': lambda f: f is None }})
    r"""Indicates whether this is a residential address."""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_name'), 'exclude': lambda f: f is None }})
    r"""If this is a business address, then the company name should be specified here."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email for the address owner."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field."""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""The phone number of a contact person at this address.  The format of this phone number varies depending on the country."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal_code'), 'exclude': lambda f: f is None }})  
    