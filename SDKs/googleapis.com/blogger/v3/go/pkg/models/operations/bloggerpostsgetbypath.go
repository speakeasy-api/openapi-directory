// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BloggerPostsGetByPathSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BloggerPostsGetByPathSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BloggerPostsGetByPathSecurity struct {
	Option1 *BloggerPostsGetByPathSecurityOption1 `security:"option"`
	Option2 *BloggerPostsGetByPathSecurityOption2 `security:"option"`
}

type BloggerPostsGetByPathPathParams struct {
	BlogID string `pathParam:"style=simple,explode=false,name=blogId"`
}

// BloggerPostsGetByPathViewEnum
type BloggerPostsGetByPathViewEnum string

const (
	BloggerPostsGetByPathViewEnumViewTypeUnspecified BloggerPostsGetByPathViewEnum = "VIEW_TYPE_UNSPECIFIED"
	BloggerPostsGetByPathViewEnumReader              BloggerPostsGetByPathViewEnum = "READER"
	BloggerPostsGetByPathViewEnumAuthor              BloggerPostsGetByPathViewEnum = "AUTHOR"
	BloggerPostsGetByPathViewEnumAdmin               BloggerPostsGetByPathViewEnum = "ADMIN"
)

func (e *BloggerPostsGetByPathViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VIEW_TYPE_UNSPECIFIED":
		fallthrough
	case "READER":
		fallthrough
	case "AUTHOR":
		fallthrough
	case "ADMIN":
		*e = BloggerPostsGetByPathViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BloggerPostsGetByPathViewEnum: %s", s)
	}
}

type BloggerPostsGetByPathQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key         *string `queryParam:"style=form,explode=true,name=key"`
	MaxComments *int64  `queryParam:"style=form,explode=true,name=maxComments"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	Path       string  `queryParam:"style=form,explode=true,name=path"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string                        `queryParam:"style=form,explode=true,name=upload_protocol"`
	View           *BloggerPostsGetByPathViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type BloggerPostsGetByPathRequest struct {
	PathParams  BloggerPostsGetByPathPathParams
	QueryParams BloggerPostsGetByPathQueryParams
	Security    BloggerPostsGetByPathSecurity
}

type BloggerPostsGetByPathResponse struct {
	ContentType string
	// Successful response
	Post        *shared.Post
	StatusCode  int
	RawResponse *http.Response
}
