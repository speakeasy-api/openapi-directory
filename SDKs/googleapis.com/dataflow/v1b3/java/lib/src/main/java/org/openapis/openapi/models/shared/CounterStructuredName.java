/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CounterStructuredName - Identifies a counter within a per-job namespace. Counters whose structured names are the same get merged into a single value for the job.
 */
public class CounterStructuredName {
    /**
     * Name of the optimized step being executed by the workers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("componentStepName")
    public String componentStepName;
    public CounterStructuredName withComponentStepName(String componentStepName) {
        this.componentStepName = componentStepName;
        return this;
    }
    
    /**
     * Name of the stage. An execution step contains multiple component steps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionStepName")
    public String executionStepName;
    public CounterStructuredName withExecutionStepName(String executionStepName) {
        this.executionStepName = executionStepName;
        return this;
    }
    
    /**
     * Index of an input collection that's being read from/written to as a side input. The index identifies a step's side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputIndex")
    public Integer inputIndex;
    public CounterStructuredName withInputIndex(Integer inputIndex) {
        this.inputIndex = inputIndex;
        return this;
    }
    
    /**
     * Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CounterStructuredName withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * One of the standard Origins defined above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    public CounterStructuredNameOriginEnum origin;
    public CounterStructuredName withOrigin(CounterStructuredNameOriginEnum origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * A string containing a more specific namespace of the counter's origin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originNamespace")
    public String originNamespace;
    public CounterStructuredName withOriginNamespace(String originNamespace) {
        this.originNamespace = originNamespace;
        return this;
    }
    
    /**
     * The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalRequestingStepName")
    public String originalRequestingStepName;
    public CounterStructuredName withOriginalRequestingStepName(String originalRequestingStepName) {
        this.originalRequestingStepName = originalRequestingStepName;
        return this;
    }
    
    /**
     * System generated name of the original step in the user's graph, before optimization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalStepName")
    public String originalStepName;
    public CounterStructuredName withOriginalStepName(String originalStepName) {
        this.originalStepName = originalStepName;
        return this;
    }
    
    /**
     * Portion of this counter, either key or value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portion")
    public CounterStructuredNamePortionEnum portion;
    public CounterStructuredName withPortion(CounterStructuredNamePortionEnum portion) {
        this.portion = portion;
        return this;
    }
    
    /**
     * ID of a particular worker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerId")
    public String workerId;
    public CounterStructuredName withWorkerId(String workerId) {
        this.workerId = workerId;
        return this;
    }
    
}
