"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def monitoring_projects_dashboards_create(self, request: operations.MonitoringProjectsDashboardsCreateRequest, security: operations.MonitoringProjectsDashboardsCreateSecurity) -> operations.MonitoringProjectsDashboardsCreateResponse:
        r"""Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see Managing dashboards by API (https://cloud.google.com/monitoring/dashboards/api-dashboard). This method requires the monitoring.dashboards.create permission on the specified project. For more information about permissions, see Cloud Identity and Access Management (https://cloud.google.com/iam)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsDashboardsCreateRequest, base_url, '/v1/{parent}/dashboards', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dashboard", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringProjectsDashboardsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsDashboardsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dashboard])
                res.dashboard = out

        return res

    def monitoring_projects_dashboards_delete(self, request: operations.MonitoringProjectsDashboardsDeleteRequest, security: operations.MonitoringProjectsDashboardsDeleteSecurity) -> operations.MonitoringProjectsDashboardsDeleteResponse:
        r"""Deletes an existing custom dashboard.This method requires the monitoring.dashboards.delete permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsDashboardsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.MonitoringProjectsDashboardsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsDashboardsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def monitoring_projects_dashboards_get(self, request: operations.MonitoringProjectsDashboardsGetRequest, security: operations.MonitoringProjectsDashboardsGetSecurity) -> operations.MonitoringProjectsDashboardsGetResponse:
        r"""Fetches a specific dashboard.This method requires the monitoring.dashboards.get permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsDashboardsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.MonitoringProjectsDashboardsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsDashboardsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dashboard])
                res.dashboard = out

        return res

    def monitoring_projects_dashboards_list(self, request: operations.MonitoringProjectsDashboardsListRequest, security: operations.MonitoringProjectsDashboardsListSecurity) -> operations.MonitoringProjectsDashboardsListResponse:
        r"""Lists the existing dashboards.This method requires the monitoring.dashboards.list permission on the specified project. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsDashboardsListRequest, base_url, '/v1/{parent}/dashboards', request)
        
        query_params = utils.get_query_params(operations.MonitoringProjectsDashboardsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsDashboardsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDashboardsResponse])
                res.list_dashboards_response = out

        return res

    def monitoring_projects_dashboards_patch(self, request: operations.MonitoringProjectsDashboardsPatchRequest, security: operations.MonitoringProjectsDashboardsPatchSecurity) -> operations.MonitoringProjectsDashboardsPatchResponse:
        r"""Replaces an existing custom dashboard with a new definition.This method requires the monitoring.dashboards.update permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsDashboardsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dashboard", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringProjectsDashboardsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsDashboardsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dashboard])
                res.dashboard = out

        return res

    def monitoring_projects_location_prometheus_api_v1_label_values(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1LabelValuesRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1LabelValuesSecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1LabelValuesResponse:
        r"""Lists possible values for a given label name."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1LabelValuesRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/label/{label}/values', request)
        
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1LabelValuesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1LabelValuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    def monitoring_projects_location_prometheus_api_v1_labels(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1LabelsRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1LabelsSecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1LabelsResponse:
        r"""Lists labels for metrics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1LabelsRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "list_labels_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1LabelsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1LabelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    def monitoring_projects_location_prometheus_api_v1_labels_list(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1LabelsListRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1LabelsListSecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1LabelsListResponse:
        r"""Lists labels for metrics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1LabelsListRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/labels', request)
        
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1LabelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1LabelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    def monitoring_projects_location_prometheus_api_v1_metadata_list(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1MetadataListRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1MetadataListSecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1MetadataListResponse:
        r"""Lists metadata for metrics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1MetadataListRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/metadata', request)
        
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1MetadataListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1MetadataListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    def monitoring_projects_location_prometheus_api_v1_query(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1QueryRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1QuerySecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1QueryResponse:
        r"""Evaluate a PromQL query at a single point in time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1QueryRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/query', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "query_instant_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1QueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1QueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    def monitoring_projects_location_prometheus_api_v1_query_exemplars(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1QueryExemplarsRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1QueryExemplarsSecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1QueryExemplarsResponse:
        r"""Lists exemplars relevant to a given PromQL query,"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1QueryExemplarsRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/query_exemplars', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "query_exemplars_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1QueryExemplarsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1QueryExemplarsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    def monitoring_projects_location_prometheus_api_v1_query_range(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1QueryRangeRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1QueryRangeSecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1QueryRangeResponse:
        r"""Evaluate a PromQL query with start, end time range."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1QueryRangeRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/query_range', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "query_range_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1QueryRangeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1QueryRangeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    def monitoring_projects_location_prometheus_api_v1_series(self, request: operations.MonitoringProjectsLocationPrometheusAPIV1SeriesRequest, security: operations.MonitoringProjectsLocationPrometheusAPIV1SeriesSecurity) -> operations.MonitoringProjectsLocationPrometheusAPIV1SeriesResponse:
        r"""Lists metadata for metrics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MonitoringProjectsLocationPrometheusAPIV1SeriesRequest, base_url, '/v1/{name}/location/{location}/prometheus/api/v1/series', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "query_series_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MonitoringProjectsLocationPrometheusAPIV1SeriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MonitoringProjectsLocationPrometheusAPIV1SeriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPBody])
                res.http_body = out

        return res

    