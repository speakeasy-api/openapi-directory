/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class MssqlLogShippingSummary {
    /**
     * ID assigned to the log shipping configuration object.
     */
    @JsonProperty("id")
    public String id;

    public MssqlLogShippingSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lagTime")
    public Long lagTime;

    public MssqlLogShippingSummary withLagTime(Long lagTime) {
        this.lagTime = lagTime;
        return this;
    }
    
    /**
     * Timestamp of the last transaction applied using the specified log shipping configuration object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastAppliedPoint")
    public OffsetDateTime lastAppliedPoint;

    public MssqlLogShippingSummary withLastAppliedPoint(OffsetDateTime lastAppliedPoint) {
        this.lastAppliedPoint = lastAppliedPoint;
        return this;
    }
    
    /**
     * Location of a specified secondary database. Location uses this format: "host/instance".
     */
    @JsonProperty("location")
    public String location;

    public MssqlLogShippingSummary withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * ID of the primary database.
     */
    @JsonProperty("primaryDatabaseId")
    public String primaryDatabaseId;

    public MssqlLogShippingSummary withPrimaryDatabaseId(String primaryDatabaseId) {
        this.primaryDatabaseId = primaryDatabaseId;
        return this;
    }
    
    /**
     * Log backup frequency, in seconds, of the primary database.
     */
    @JsonProperty("primaryDatabaseLogBackupFrequency")
    public Long primaryDatabaseLogBackupFrequency;

    public MssqlLogShippingSummary withPrimaryDatabaseLogBackupFrequency(Long primaryDatabaseLogBackupFrequency) {
        this.primaryDatabaseLogBackupFrequency = primaryDatabaseLogBackupFrequency;
        return this;
    }
    
    /**
     * Name of the primary database.
     */
    @JsonProperty("primaryDatabaseName")
    public String primaryDatabaseName;

    public MssqlLogShippingSummary withPrimaryDatabaseName(String primaryDatabaseName) {
        this.primaryDatabaseName = primaryDatabaseName;
        return this;
    }
    
    /**
     * ID of the secondary database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryDatabaseId")
    public String secondaryDatabaseId;

    public MssqlLogShippingSummary withSecondaryDatabaseId(String secondaryDatabaseId) {
        this.secondaryDatabaseId = secondaryDatabaseId;
        return this;
    }
    
    /**
     * Name of the secondary database.
     */
    @JsonProperty("secondaryDatabaseName")
    public String secondaryDatabaseName;

    public MssqlLogShippingSummary withSecondaryDatabaseName(String secondaryDatabaseName) {
        this.secondaryDatabaseName = secondaryDatabaseName;
        return this;
    }
    
    /**
     * The current state of the secondary database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public MssqlLogShippingSummary withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonProperty("status")
    public MssqlLogShippingStatusInfo status;

    public MssqlLogShippingSummary withStatus(MssqlLogShippingStatusInfo status) {
        this.status = status;
        return this;
    }
    
    public MssqlLogShippingSummary(@JsonProperty("id") String id, @JsonProperty("location") String location, @JsonProperty("primaryDatabaseId") String primaryDatabaseId, @JsonProperty("primaryDatabaseLogBackupFrequency") Long primaryDatabaseLogBackupFrequency, @JsonProperty("primaryDatabaseName") String primaryDatabaseName, @JsonProperty("secondaryDatabaseName") String secondaryDatabaseName, @JsonProperty("status") MssqlLogShippingStatusInfo status) {
        this.id = id;
        this.location = location;
        this.primaryDatabaseId = primaryDatabaseId;
        this.primaryDatabaseLogBackupFrequency = primaryDatabaseLogBackupFrequency;
        this.primaryDatabaseName = primaryDatabaseName;
        this.secondaryDatabaseName = secondaryDatabaseName;
        this.status = status;
  }
}
