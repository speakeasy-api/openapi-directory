// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeClusterSecurityGroupsActionEnum
type POSTDescribeClusterSecurityGroupsActionEnum string

const (
	POSTDescribeClusterSecurityGroupsActionEnumDescribeClusterSecurityGroups POSTDescribeClusterSecurityGroupsActionEnum = "DescribeClusterSecurityGroups"
)

func (e *POSTDescribeClusterSecurityGroupsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeClusterSecurityGroups":
		*e = POSTDescribeClusterSecurityGroupsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeClusterSecurityGroupsActionEnum: %s", s)
	}
}

// POSTDescribeClusterSecurityGroupsVersionEnum
type POSTDescribeClusterSecurityGroupsVersionEnum string

const (
	POSTDescribeClusterSecurityGroupsVersionEnumTwoThousandAndTwelve1201 POSTDescribeClusterSecurityGroupsVersionEnum = "2012-12-01"
)

func (e *POSTDescribeClusterSecurityGroupsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = POSTDescribeClusterSecurityGroupsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeClusterSecurityGroupsVersionEnum: %s", s)
	}
}

type POSTDescribeClusterSecurityGroupsQueryParams struct {
	Action POSTDescribeClusterSecurityGroupsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords *string                                      `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version    POSTDescribeClusterSecurityGroupsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeClusterSecurityGroupsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeClusterSecurityGroupsRequest struct {
	QueryParams POSTDescribeClusterSecurityGroupsQueryParams
	Headers     POSTDescribeClusterSecurityGroupsHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeClusterSecurityGroupsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
