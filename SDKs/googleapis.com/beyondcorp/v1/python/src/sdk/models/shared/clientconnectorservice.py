"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import egress as shared_egress
from ..shared import ingress as shared_ingress
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientConnectorServiceInput:
    r"""Message describing ClientConnectorService object."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. User-provided name. The display name should follow certain format. * Must be 6 to 30 characters in length. * Can only contain lowercase letters, numbers, and hyphens. * Must start with a letter."""  
    egress: Optional[shared_egress.Egress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('egress'), 'exclude': lambda f: f is None }})
    r"""The details of the egress info. One of the following options should be set."""  
    ingress: Optional[shared_ingress.Ingress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingress'), 'exclude': lambda f: f is None }})
    r"""Settings of how to connect to the ClientGateway. One of the following options should be set."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. Name of resource. The name is ignored during creation."""  
    
class ClientConnectorServiceStateEnum(str, Enum):
    r"""Output only. The operational state of the ClientConnectorService."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    RUNNING = 'RUNNING'
    DOWN = 'DOWN'
    ERROR = 'ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientConnectorService:
    r"""Message describing ClientConnectorService object."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. [Output only] Create time stamp."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. User-provided name. The display name should follow certain format. * Must be 6 to 30 characters in length. * Can only contain lowercase letters, numbers, and hyphens. * Must start with a letter."""  
    egress: Optional[shared_egress.Egress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('egress'), 'exclude': lambda f: f is None }})
    r"""The details of the egress info. One of the following options should be set."""  
    ingress: Optional[shared_ingress.Ingress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingress'), 'exclude': lambda f: f is None }})
    r"""Settings of how to connect to the ClientGateway. One of the following options should be set."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. Name of resource. The name is ignored during creation."""  
    state: Optional[ClientConnectorServiceStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The operational state of the ClientConnectorService."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. [Output only] Update time stamp."""  
    