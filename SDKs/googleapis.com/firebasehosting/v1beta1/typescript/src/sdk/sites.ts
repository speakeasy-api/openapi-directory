/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Sites {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new channel in the specified site.
   */
  firebasehostingSitesChannelsCreate(
    req: operations.FirebasehostingSitesChannelsCreateRequest,
    security: operations.FirebasehostingSitesChannelsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesChannelsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesChannelsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/channels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "channelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesChannelsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesChannelsCreateResponse =
        new operations.FirebasehostingSitesChannelsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channel = utils.objectToClass(httpRes?.data, shared.Channel);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the channels for the specified site. All sites have a default `live` channel.
   */
  firebasehostingSitesChannelsList(
    req: operations.FirebasehostingSitesChannelsListRequest,
    security: operations.FirebasehostingSitesChannelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesChannelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesChannelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/channels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesChannelsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesChannelsListResponse =
        new operations.FirebasehostingSitesChannelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listChannelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListChannelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a domain mapping on the specified site.
   */
  firebasehostingSitesDomainsCreate(
    req: operations.FirebasehostingSitesDomainsCreateRequest,
    security: operations.FirebasehostingSitesDomainsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesDomainsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesDomainsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/domains",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "domain",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesDomainsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesDomainsCreateResponse =
        new operations.FirebasehostingSitesDomainsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.domain = utils.objectToClass(httpRes?.data, shared.Domain);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the domains for the specified site.
   */
  firebasehostingSitesDomainsList(
    req: operations.FirebasehostingSitesDomainsListRequest,
    security: operations.FirebasehostingSitesDomainsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesDomainsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesDomainsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/domains",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesDomainsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesDomainsListResponse =
        new operations.FirebasehostingSitesDomainsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDomainsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDomainsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the specified domain mapping, creating the mapping as if it does not exist.
   */
  firebasehostingSitesDomainsUpdate(
    req: operations.FirebasehostingSitesDomainsUpdateRequest,
    security: operations.FirebasehostingSitesDomainsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesDomainsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesDomainsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "domain",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesDomainsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesDomainsUpdateResponse =
        new operations.FirebasehostingSitesDomainsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.domain = utils.objectToClass(httpRes?.data, shared.Domain);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).
   */
  firebasehostingSitesReleasesCreate(
    req: operations.FirebasehostingSitesReleasesCreateRequest,
    security: operations.FirebasehostingSitesReleasesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesReleasesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesReleasesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/releases",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "release",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesReleasesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesReleasesCreateResponse =
        new operations.FirebasehostingSitesReleasesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.release = utils.objectToClass(httpRes?.data, shared.Release);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.
   */
  firebasehostingSitesReleasesList(
    req: operations.FirebasehostingSitesReleasesListRequest,
    security: operations.FirebasehostingSitesReleasesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesReleasesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesReleasesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/releases",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesReleasesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesReleasesListResponse =
        new operations.FirebasehostingSitesReleasesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReleasesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListReleasesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new version on the specified target site using the content of the specified version.
   */
  firebasehostingSitesVersionsClone(
    req: operations.FirebasehostingSitesVersionsCloneRequest,
    security: operations.FirebasehostingSitesVersionsCloneSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsCloneResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsCloneRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/versions:clone",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cloneVersionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesVersionsCloneSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsCloneResponse =
        new operations.FirebasehostingSitesVersionsCloneResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new version for the specified site.
   */
  firebasehostingSitesVersionsCreate(
    req: operations.FirebasehostingSitesVersionsCreateRequest,
    security: operations.FirebasehostingSitesVersionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/versions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "version",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesVersionsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsCreateResponse =
        new operations.FirebasehostingSitesVersionsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.version = utils.objectToClass(httpRes?.data, shared.Version);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified version.
   */
  firebasehostingSitesVersionsDelete(
    req: operations.FirebasehostingSitesVersionsDeleteRequest,
    security: operations.FirebasehostingSitesVersionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesVersionsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsDeleteResponse =
        new operations.FirebasehostingSitesVersionsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the remaining files to be uploaded for the specified version.
   */
  firebasehostingSitesVersionsFilesList(
    req: operations.FirebasehostingSitesVersionsFilesListRequest,
    security: operations.FirebasehostingSitesVersionsFilesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsFilesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsFilesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/files",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesVersionsFilesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsFilesListResponse =
        new operations.FirebasehostingSitesVersionsFilesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVersionFilesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVersionFilesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the specified version that has been created for the specified site. This can include versions that were created for the default `live` channel or for any active preview channels for the specified site.
   */
  firebasehostingSitesVersionsGet(
    req: operations.FirebasehostingSitesVersionsGetRequest,
    security: operations.FirebasehostingSitesVersionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesVersionsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsGetResponse =
        new operations.FirebasehostingSitesVersionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.version = utils.objectToClass(httpRes?.data, shared.Version);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site.
   */
  firebasehostingSitesVersionsList(
    req: operations.FirebasehostingSitesVersionsListRequest,
    security: operations.FirebasehostingSitesVersionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/versions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesVersionsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsListResponse =
        new operations.FirebasehostingSitesVersionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVersionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVersionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
   */
  firebasehostingSitesVersionsPatch(
    req: operations.FirebasehostingSitesVersionsPatchRequest,
    security: operations.FirebasehostingSitesVersionsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "version",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FirebasehostingSitesVersionsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsPatchResponse =
        new operations.FirebasehostingSitesVersionsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.version = utils.objectToClass(httpRes?.data, shared.Version);
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Adds content files to the specified version. Each file must be under 2 GB.
   */
  firebasehostingSitesVersionsPopulateFiles(
    req: operations.FirebasehostingSitesVersionsPopulateFilesRequest,
    security: operations.FirebasehostingSitesVersionsPopulateFilesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FirebasehostingSitesVersionsPopulateFilesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FirebasehostingSitesVersionsPopulateFilesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}:populateFiles",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "populateVersionFilesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.FirebasehostingSitesVersionsPopulateFilesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FirebasehostingSitesVersionsPopulateFilesResponse =
        new operations.FirebasehostingSitesVersionsPopulateFilesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.populateVersionFilesResponse = utils.objectToClass(
              httpRes?.data,
              shared.PopulateVersionFilesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
