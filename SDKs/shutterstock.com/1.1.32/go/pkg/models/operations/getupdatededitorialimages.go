// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
	"time"
)

type GetUpdatedEditorialImagesSecurity struct {
	Basic              *shared.SchemeBasic              `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *shared.SchemeCustomerAccessCode `security:"scheme,type=oauth2"`
}

// GetUpdatedEditorialImagesSortEnum - Sort by
type GetUpdatedEditorialImagesSortEnum string

const (
	GetUpdatedEditorialImagesSortEnumNewest GetUpdatedEditorialImagesSortEnum = "newest"
	GetUpdatedEditorialImagesSortEnumOldest GetUpdatedEditorialImagesSortEnum = "oldest"
)

func (e *GetUpdatedEditorialImagesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newest":
		fallthrough
	case "oldest":
		*e = GetUpdatedEditorialImagesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUpdatedEditorialImagesSortEnum: %s", s)
	}
}

// GetUpdatedEditorialImagesTypeEnum - Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
type GetUpdatedEditorialImagesTypeEnum string

const (
	GetUpdatedEditorialImagesTypeEnumEdit     GetUpdatedEditorialImagesTypeEnum = "edit"
	GetUpdatedEditorialImagesTypeEnumAddition GetUpdatedEditorialImagesTypeEnum = "addition"
)

func (e *GetUpdatedEditorialImagesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "edit":
		fallthrough
	case "addition":
		*e = GetUpdatedEditorialImagesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUpdatedEditorialImagesTypeEnum: %s", s)
	}
}

type GetUpdatedEditorialImagesQueryParams struct {
	// Show only editorial content that is available for distribution in a certain country
	Country string `queryParam:"style=form,explode=true,name=country"`
	// The cursor of the page with which to start fetching results; this cursor is returned from previous requests
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Show images that were taken before the specified date
	DateTakenEnd *types.Date `queryParam:"style=form,explode=true,name=date_taken_end"`
	// Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
	DateTakenStart *types.Date `queryParam:"style=form,explode=true,name=date_taken_start"`
	// Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
	DateUpdatedEnd time.Time `queryParam:"style=form,explode=true,name=date_updated_end"`
	// Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
	DateUpdatedStart time.Time `queryParam:"style=form,explode=true,name=date_updated_start"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Sort by
	Sort *GetUpdatedEditorialImagesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Show only editorial content from certain suppliers
	SupplierCode []string `queryParam:"style=form,explode=true,name=supplier_code"`
	// Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
	Type GetUpdatedEditorialImagesTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetUpdatedEditorialImagesRequest struct {
	QueryParams GetUpdatedEditorialImagesQueryParams
	Security    GetUpdatedEditorialImagesSecurity
}

type GetUpdatedEditorialImagesResponse struct {
	ContentType string
	// OK
	EditorialUpdatedResults *shared.EditorialUpdatedResults
	StatusCode              int
	RawResponse             *http.Response
}
