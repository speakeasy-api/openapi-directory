// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ImageAttributesBucketTypeEnum - This will be replaced by the relationship `bucket` in a future update.<br/>
// The type of the owning entity
type ImageAttributesBucketTypeEnum string

const (
	ImageAttributesBucketTypeEnumAdRepAccount ImageAttributesBucketTypeEnum = "AdRepAccount"
	ImageAttributesBucketTypeEnumAgency       ImageAttributesBucketTypeEnum = "Agency"
	ImageAttributesBucketTypeEnumNetwork      ImageAttributesBucketTypeEnum = "Network"
	ImageAttributesBucketTypeEnumSeries       ImageAttributesBucketTypeEnum = "Series"
	ImageAttributesBucketTypeEnumUser         ImageAttributesBucketTypeEnum = "User"
)

func (e *ImageAttributesBucketTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AdRepAccount":
		fallthrough
	case "Agency":
		fallthrough
	case "Network":
		fallthrough
	case "Series":
		fallthrough
	case "User":
		*e = ImageAttributesBucketTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageAttributesBucketTypeEnum: %s", s)
	}
}

type ImageAttributesTheCropAreaWithinTheOriginalMediaAsset struct {
	// The height of the crop area
	Height *float32 `json:"height,omitempty"`
	// The left coordinate of the crop area
	Left *float32 `json:"left,omitempty"`
	// The top coordinate of the crop area
	Top *float32 `json:"top,omitempty"`
	// The width of the crop area
	Width *float32 `json:"width,omitempty"`
}

// ImageAttributesStatusEnum - The current value of the image state machine. It starts with `uploaded` and
// transitions to `processing` once a worker has picked it up. If all variations and
// styles of an image have been successfully created, the status becomes `valid`. In
// case of a problem during the processing it changes to `invalid`.
type ImageAttributesStatusEnum string

const (
	ImageAttributesStatusEnumInvalid    ImageAttributesStatusEnum = "invalid"
	ImageAttributesStatusEnumProcessing ImageAttributesStatusEnum = "processing"
	ImageAttributesStatusEnumUploaded   ImageAttributesStatusEnum = "uploaded"
	ImageAttributesStatusEnumValid      ImageAttributesStatusEnum = "valid"
)

func (e *ImageAttributesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid":
		fallthrough
	case "processing":
		fallthrough
	case "uploaded":
		fallthrough
	case "valid":
		*e = ImageAttributesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageAttributesStatusEnum: %s", s)
	}
}

type ImageAttributes struct {
	// This will be replaced by the relationship `bucket` in a future update.<br/>
	// The ID of the owning entity
	//
	BucketID *string `json:"bucket_id,omitempty"`
	// This will be replaced by the relationship `bucket` in a future update.<br/>
	// The type of the owning entity
	//
	BucketType *ImageAttributesBucketTypeEnum                         `json:"bucket_type,omitempty"`
	CreatedAt  *time.Time                                             `json:"created_at,omitempty"`
	CropData   *ImageAttributesTheCropAreaWithinTheOriginalMediaAsset `json:"crop_data,omitempty"`
	// The current value of the image state machine. It starts with `uploaded` and
	// transitions to `processing` once a worker has picked it up. If all variations and
	// styles of an image have been successfully created, the status becomes `valid`. In
	// case of a problem during the processing it changes to `invalid`.
	//
	Status    *ImageAttributesStatusEnum `json:"status,omitempty"`
	UpdatedAt *time.Time                 `json:"updated_at,omitempty"`
}

type ImageRelationshipsAllMediaAssetsAvailableForThisImage struct {
	Data []ResourceIdentifier `json:"data,omitempty"`
}

type ImageRelationships struct {
	MediaAssets *ImageRelationshipsAllMediaAssetsAvailableForThisImage `json:"media_assets,omitempty"`
}

type Image struct {
	Attributes    *ImageAttributes    `json:"attributes,omitempty"`
	ID            *string             `json:"id,omitempty"`
	Relationships *ImageRelationships `json:"relationships,omitempty"`
	// The type of resource. This is always `images`
	Type *string `json:"type,omitempty"`
}
