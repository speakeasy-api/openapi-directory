<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootSaml 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Configure and generate Rubrik SAML metadata
     * 
     * Configure and generate the SAML metadata for this Rubrik cluster. The call returns the download URL for the metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RubrikSamlMetadataInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigRubrikSamlMetadataResponse
     */
	public function configRubrikSamlMetadata(
        \OpenAPI\OpenAPI\Models\Shared\RubrikSamlMetadataInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigRubrikSamlMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/saml/rubrik_metadata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigRubrikSamlMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rubrikSamlMetadataSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RubrikSamlMetadataSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check SAML SSO Status
     * 
     * An object that contains two values. A Boolean value that determines whether or not SSO is enabled and an optional String value that indicates the name of the default IdP authentication domain for SSO login. When the boolean value is 'true,' SAML SSO is enabled. When the Boolean value is 'false,' SAML SSO is disabled.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSamlSsoStatusResponse
     */
	public function getSamlSsoStatus(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSamlSsoStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/saml/sso_status');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSamlSsoStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->samlSsoStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SamlSsoStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Make SAML authentication request
     * 
     * Make a SAML authentication request for a specified IdP Authentication Domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MakeSamlAuthnRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MakeSamlAuthnRequestResponse
     */
	public function makeSamlAuthnRequest(
        \OpenAPI\OpenAPI\Models\Operations\MakeSamlAuthnRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MakeSamlAuthnRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/saml/authn_request/{idp_name}', \OpenAPI\OpenAPI\Models\Operations\MakeSamlAuthnRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "samlSsoAuthnRequestInfo", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MakeSamlAuthnRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->samlSsoAuthnRequestDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SamlSsoAuthnRequestDetail', 'json');
            }
        }

        return $response;
    }
}