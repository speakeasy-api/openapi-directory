// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CdnSettingsFrameRateEnum - The frame rate of the inbound video data.
type CdnSettingsFrameRateEnum string

const (
	CdnSettingsFrameRateEnumThirtyfps CdnSettingsFrameRateEnum = "30fps"
	CdnSettingsFrameRateEnumSixtyfps  CdnSettingsFrameRateEnum = "60fps"
	CdnSettingsFrameRateEnumVariable  CdnSettingsFrameRateEnum = "variable"
)

func (e CdnSettingsFrameRateEnum) ToPointer() *CdnSettingsFrameRateEnum {
	return &e
}

func (e *CdnSettingsFrameRateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "30fps":
		fallthrough
	case "60fps":
		fallthrough
	case "variable":
		*e = CdnSettingsFrameRateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CdnSettingsFrameRateEnum: %v", v)
	}
}

// CdnSettingsIngestionTypeEnum -  The method or protocol used to transmit the video stream.
type CdnSettingsIngestionTypeEnum string

const (
	CdnSettingsIngestionTypeEnumRtmp   CdnSettingsIngestionTypeEnum = "rtmp"
	CdnSettingsIngestionTypeEnumDash   CdnSettingsIngestionTypeEnum = "dash"
	CdnSettingsIngestionTypeEnumWebrtc CdnSettingsIngestionTypeEnum = "webrtc"
	CdnSettingsIngestionTypeEnumHls    CdnSettingsIngestionTypeEnum = "hls"
)

func (e CdnSettingsIngestionTypeEnum) ToPointer() *CdnSettingsIngestionTypeEnum {
	return &e
}

func (e *CdnSettingsIngestionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rtmp":
		fallthrough
	case "dash":
		fallthrough
	case "webrtc":
		fallthrough
	case "hls":
		*e = CdnSettingsIngestionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CdnSettingsIngestionTypeEnum: %v", v)
	}
}

// CdnSettingsResolutionEnum - The resolution of the inbound video data.
type CdnSettingsResolutionEnum string

const (
	CdnSettingsResolutionEnumTwoHundredAndFortyp             CdnSettingsResolutionEnum = "240p"
	CdnSettingsResolutionEnumThreeHundredAndSixtyp           CdnSettingsResolutionEnum = "360p"
	CdnSettingsResolutionEnumFourHundredAndEightyp           CdnSettingsResolutionEnum = "480p"
	CdnSettingsResolutionEnumSevenHundredAndTwentyp          CdnSettingsResolutionEnum = "720p"
	CdnSettingsResolutionEnumOneThousandAndEightyp           CdnSettingsResolutionEnum = "1080p"
	CdnSettingsResolutionEnumOneThousandFourHundredAndFortyp CdnSettingsResolutionEnum = "1440p"
	CdnSettingsResolutionEnumTwoThousandOneHundredAndSixtyp  CdnSettingsResolutionEnum = "2160p"
	CdnSettingsResolutionEnumVariable                        CdnSettingsResolutionEnum = "variable"
)

func (e CdnSettingsResolutionEnum) ToPointer() *CdnSettingsResolutionEnum {
	return &e
}

func (e *CdnSettingsResolutionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "240p":
		fallthrough
	case "360p":
		fallthrough
	case "480p":
		fallthrough
	case "720p":
		fallthrough
	case "1080p":
		fallthrough
	case "1440p":
		fallthrough
	case "2160p":
		fallthrough
	case "variable":
		*e = CdnSettingsResolutionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CdnSettingsResolutionEnum: %v", v)
	}
}

// CdnSettings - Brief description of the live stream cdn settings.
type CdnSettings struct {
	// The format of the video stream that you are sending to Youtube.
	Format *string `json:"format,omitempty"`
	// The frame rate of the inbound video data.
	FrameRate *CdnSettingsFrameRateEnum `json:"frameRate,omitempty"`
	// Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
	IngestionInfo *IngestionInfo `json:"ingestionInfo,omitempty"`
	//  The method or protocol used to transmit the video stream.
	IngestionType *CdnSettingsIngestionTypeEnum `json:"ingestionType,omitempty"`
	// The resolution of the inbound video data.
	Resolution *CdnSettingsResolutionEnum `json:"resolution,omitempty"`
}
