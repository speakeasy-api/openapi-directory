"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rate = exports.RateRetailRate = exports.RateRetailRateTaxesAndFees = void 0;
var utils_1 = require("../../../internal/utils");
var cancellationpolicy_1 = require("./cancellationpolicy");
var hotelagreementstub_1 = require("./hotelagreementstub");
var money_1 = require("./money");
var ratecomponent_1 = require("./ratecomponent");
var taxorfee_1 = require("./taxorfee");
var class_transformer_1 = require("class-transformer");
/**
 * Breakdown of taxes (e.g. VAT, city tax) and fees (e.g. cleaning or resort fees).
 */
var RateRetailRateTaxesAndFees = /** @class */ (function (_super) {
    __extends(RateRetailRateTaxesAndFees, _super);
    function RateRetailRateTaxesAndFees() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: taxorfee_1.TaxOrFee }),
        (0, class_transformer_1.Expose)({ name: "includedInRate" }),
        (0, class_transformer_1.Type)(function () { return taxorfee_1.TaxOrFee; }),
        __metadata("design:type", Array)
    ], RateRetailRateTaxesAndFees.prototype, "includedInRate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: taxorfee_1.TaxOrFee }),
        (0, class_transformer_1.Expose)({ name: "payAtHotel" }),
        (0, class_transformer_1.Type)(function () { return taxorfee_1.TaxOrFee; }),
        __metadata("design:type", Array)
    ], RateRetailRateTaxesAndFees.prototype, "payAtHotel", void 0);
    return RateRetailRateTaxesAndFees;
}(utils_1.SpeakeasyBase));
exports.RateRetailRateTaxesAndFees = RateRetailRateTaxesAndFees;
/**
 * The public retail rate you should quote and charge your guest. You're not allowed to quote or charge an amount lower than this if your website or app is publicly accessible.
 */
var RateRetailRate = /** @class */ (function (_super) {
    __extends(RateRetailRate, _super);
    function RateRetailRate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "taxesAndFees" }),
        (0, class_transformer_1.Type)(function () { return RateRetailRateTaxesAndFees; }),
        __metadata("design:type", RateRetailRateTaxesAndFees)
    ], RateRetailRate.prototype, "taxesAndFees", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "total" }),
        (0, class_transformer_1.Type)(function () { return money_1.Money; }),
        __metadata("design:type", money_1.Money)
    ], RateRetailRate.prototype, "total", void 0);
    return RateRetailRate;
}(utils_1.SpeakeasyBase));
exports.RateRetailRate = RateRetailRate;
/**
 * Information on the price of the room, other components of the room (such as breakfast, lunch or a welcome drink) and the cancellation policies that apply.
 */
var Rate = /** @class */ (function (_super) {
    __extends(Rate, _super);
    function Rate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: cancellationpolicy_1.CancellationPolicy }),
        (0, class_transformer_1.Expose)({ name: "cancellationPolicies" }),
        (0, class_transformer_1.Type)(function () { return cancellationpolicy_1.CancellationPolicy; }),
        __metadata("design:type", Array)
    ], Rate.prototype, "cancellationPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ratecomponent_1.RateComponent }),
        (0, class_transformer_1.Expose)({ name: "components" }),
        (0, class_transformer_1.Type)(function () { return ratecomponent_1.RateComponent; }),
        __metadata("design:type", Array)
    ], Rate.prototype, "components", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Rate.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hotelAgreement" }),
        (0, class_transformer_1.Type)(function () { return hotelagreementstub_1.HotelAgreementStub; }),
        __metadata("design:type", hotelagreementstub_1.HotelAgreementStub)
    ], Rate.prototype, "hotelAgreement", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxOccupancy" }),
        __metadata("design:type", Number)
    ], Rate.prototype, "maxOccupancy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rateId" }),
        __metadata("design:type", String)
    ], Rate.prototype, "rateId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ratePlanId" }),
        __metadata("design:type", Number)
    ], Rate.prototype, "ratePlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "retailRate" }),
        (0, class_transformer_1.Type)(function () { return RateRetailRate; }),
        __metadata("design:type", RateRetailRate)
    ], Rate.prototype, "retailRate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "roomsSellable" }),
        __metadata("design:type", Number)
    ], Rate.prototype, "roomsSellable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sellerCommissionPercentage" }),
        __metadata("design:type", Number)
    ], Rate.prototype, "sellerCommissionPercentage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sellerToImpalaPayment" }),
        (0, class_transformer_1.Type)(function () { return money_1.Money; }),
        __metadata("design:type", money_1.Money)
    ], Rate.prototype, "sellerToImpalaPayment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Rate.prototype, "start", void 0);
    return Rate;
}(utils_1.SpeakeasyBase));
exports.Rate = Rate;
