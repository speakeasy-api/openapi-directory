"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Ipmi:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def protocol_ipmi_get_args(self, request: operations.ProtocolIpmiGetArgsRequest) -> operations.ProtocolIpmiGetArgsResponse:
        r"""Show the agent's IPMI argument structure
        Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiGetArgsRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/args', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiGetArgsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.protocol_ipmi_get_args_200_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_get_attr(self, request: operations.ProtocolIpmiGetAttrRequest) -> operations.ProtocolIpmiGetAttrResponse:
        r"""Show the outgoing message's attributes
        Attribute can be working_authtype ,session_id, outbound_seq, inbound_seq , field_N
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiGetAttrRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/{attr}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiGetAttrResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.protocol_ipmi_get_attr_200_application_json_string = http_res.content
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_get_config(self, request: operations.ProtocolIpmiGetConfigRequest) -> operations.ProtocolIpmiGetConfigResponse:
        r"""Show the agent's IPMI configuration
        Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiGetConfigRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/config', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiGetConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigIPMI])
                res.config_ipmi = out
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_get_statistics(self, request: operations.ProtocolIpmiGetStatisticsRequest) -> operations.ProtocolIpmiGetStatisticsResponse:
        r"""Show the agent's IPMI statistics
        Statistics of fields indicated in the headers
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiGetStatisticsRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/statistics', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiGetStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.protocol_ipmi_get_statistics_200_application_json_int32_integers = out
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_get_stats_hdr(self) -> operations.ProtocolIpmiGetStatsHdrResponse:
        r"""Show the IPMI statistics headers
        The headers of statistics fields
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mimic/protocol/msg/ipmi/get/stats_hdr'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiGetStatsHdrResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.protocol_ipmi_get_stats_hdr_200_application_json_strings = out
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_get_trace(self, request: operations.ProtocolIpmiGetTraceRequest) -> operations.ProtocolIpmiGetTraceResponse:
        r"""Show the agent's IPMI traffic tracing
        Trace 1 means enabled, 0 means not
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiGetTraceRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/trace', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiGetTraceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConfigIPMI])
                res.config_ipmi = out
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_set_attr(self, request: operations.ProtocolIpmiSetAttrRequest) -> operations.ProtocolIpmiSetAttrResponse:
        r"""Set the outgoing message's attributes
        Attribute can be working_authtype ,session_id, outbound_seq, inbound_seq , field_N
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiSetAttrRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/set/{attr}/{value}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiSetAttrResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.protocol_ipmi_set_attr_200_application_json_string = http_res.content
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_set_config(self, request: operations.ProtocolIpmiSetConfigRequest) -> operations.ProtocolIpmiSetConfigResponse:
        r"""Set the agent's IPMI configuration
        Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiSetConfigRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/set/config/{argument}/{value}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiSetConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.protocol_ipmi_set_config_200_application_json_string = http_res.content
        elif http_res.status_code == 400:
            pass

        return res

    def protocol_ipmi_set_trace(self, request: operations.ProtocolIpmiSetTraceRequest) -> operations.ProtocolIpmiSetTraceResponse:
        r"""Set the agent's IPMI traffic tracing
        1 to enable, 0 to disable
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProtocolIpmiSetTraceRequest, base_url, '/mimic/agent/{agentNum}/protocol/msg/ipmi/set/trace/{enableOrNot}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProtocolIpmiSetTraceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.protocol_ipmi_set_trace_200_application_json_string = http_res.content
        elif http_res.status_code == 400:
            pass

        return res

    