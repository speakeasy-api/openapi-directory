<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Routers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of routers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListResponse
     */
	public function computeRoutersAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/routers', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routerAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RouterAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified Router resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteResponse
     */
	public function computeRoutersDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers/{router}', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified Router resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetResponse
     */
	public function computeRoutersGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers/{router}', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->router = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Router', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves runtime Nat mapping information of VM endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoResponse
     */
	public function computeRoutersGetNatMappingInfo(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetNatMappingInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vmEndpointNatMappingsList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VmEndpointNatMappingsList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves runtime information of the specified router.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusResponse
     */
	public function computeRoutersGetRouterStatus(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers/{router}/getRouterStatus', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersGetRouterStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routerStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RouterStatusResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Router resource in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertResponse
     */
	public function computeRoutersInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "router", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of Router resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListResponse
     */
	public function computeRoutersList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routerList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RouterList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchResponse
     */
	public function computeRoutersPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers/{router}', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "router1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewResponse
     */
	public function computeRoutersPreview(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers/{router}/preview', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "router1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersPreviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routersPreviewResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoutersPreviewResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateResponse
     */
	public function computeRoutersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/routers/{router}', \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "router1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRoutersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}