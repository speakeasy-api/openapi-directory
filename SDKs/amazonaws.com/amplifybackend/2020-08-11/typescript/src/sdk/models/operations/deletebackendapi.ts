/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The strategy for conflict resolution.
 */
export enum DeleteBackendAPIRequestBodyResourceConfigConflictResolutionResolutionStrategyEnum {
  OptimisticConcurrency = "OPTIMISTIC_CONCURRENCY",
  Lambda = "LAMBDA",
  Automerge = "AUTOMERGE",
  None = "NONE",
}

/**
 * The conflict resolution strategy for your data stored in the data models.
 */
export class DeleteBackendAPIRequestBodyResourceConfigConflictResolution extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ResolutionStrategy" })
  resolutionStrategy?: DeleteBackendAPIRequestBodyResourceConfigConflictResolutionResolutionStrategyEnum;
}

/**
 * Describes the authentication mode.
 */
export enum DeleteBackendAPIRequestBodyResourceConfigDefaultAuthTypeModeEnum {
  ApiKey = "API_KEY",
  AwsIam = "AWS_IAM",
  AmazonCognitoUserPools = "AMAZON_COGNITO_USER_POOLS",
  OpenidConnect = "OPENID_CONNECT",
}

/**
 * Describes settings for the authentication mode.
 */
export class DeleteBackendAPIRequestBodyResourceConfigDefaultAuthTypeSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CognitoUserPoolId" })
  cognitoUserPoolId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExpirationTime" })
  expirationTime?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "OpenIDAuthTTL" })
  openIDAuthTTL?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OpenIDClientId" })
  openIDClientID?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OpenIDIatTTL" })
  openIDIatTTL?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OpenIDIssueURL" })
  openIDIssueURL?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OpenIDProviderName" })
  openIDProviderName?: string;
}

/**
 * The default authentication type for interacting with the configured data models in your Amplify project.
 */
export class DeleteBackendAPIRequestBodyResourceConfigDefaultAuthType extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Mode" })
  mode?: DeleteBackendAPIRequestBodyResourceConfigDefaultAuthTypeModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Settings" })
  @Type(() => DeleteBackendAPIRequestBodyResourceConfigDefaultAuthTypeSettings)
  settings?: DeleteBackendAPIRequestBodyResourceConfigDefaultAuthTypeSettings;
}

/**
 * The resource config for the data model, configured as a part of the Amplify project.
 */
export class DeleteBackendAPIRequestBodyResourceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.BackendAPIAuthType })
  @Expose({ name: "AdditionalAuthTypes" })
  @Type(() => shared.BackendAPIAuthType)
  additionalAuthTypes?: shared.BackendAPIAuthType[];

  @SpeakeasyMetadata()
  @Expose({ name: "ApiName" })
  apiName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ConflictResolution" })
  @Type(() => DeleteBackendAPIRequestBodyResourceConfigConflictResolution)
  conflictResolution?: DeleteBackendAPIRequestBodyResourceConfigConflictResolution;

  @SpeakeasyMetadata()
  @Expose({ name: "DefaultAuthType" })
  @Type(() => DeleteBackendAPIRequestBodyResourceConfigDefaultAuthType)
  defaultAuthType?: DeleteBackendAPIRequestBodyResourceConfigDefaultAuthType;

  @SpeakeasyMetadata()
  @Expose({ name: "Service" })
  service?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TransformSchema" })
  transformSchema?: string;
}

export class DeleteBackendAPIRequestBody extends SpeakeasyBase {
  /**
   * The resource config for the data model, configured as a part of the Amplify project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceConfig" })
  @Type(() => DeleteBackendAPIRequestBodyResourceConfig)
  resourceConfig?: DeleteBackendAPIRequestBodyResourceConfig;

  /**
   * The name of this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceName" })
  resourceName: string;
}

export class DeleteBackendAPIRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: DeleteBackendAPIRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The app ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=appId",
  })
  appId: string;

  /**
   * The name of the backend environment.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=backendEnvironmentName",
  })
  backendEnvironmentName: string;
}

export class DeleteBackendAPIResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  deleteBackendAPIResponse?: shared.DeleteBackendAPIResponse;

  /**
   * GatewayTimeoutException
   */
  @SpeakeasyMetadata()
  gatewayTimeoutException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
