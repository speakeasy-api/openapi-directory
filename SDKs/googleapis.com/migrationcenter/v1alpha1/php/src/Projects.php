<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Aggregates the requested fields based on provided function.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesResponse
     */
	public function migrationcenterProjectsLocationsAssetsAggregateValues(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/assets:aggregateValues', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "aggregateAssetsValuesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsAggregateValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aggregateAssetsValuesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AggregateAssetsValuesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes list of Assets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteResponse
     */
	public function migrationcenterProjectsLocationsAssetsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/assets:batchDelete', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeleteAssetsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a list of assets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateResponse
     */
	public function migrationcenterProjectsLocationsAssetsBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/assets:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchUpdateAssetsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchUpdateAssetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchUpdateAssetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the assets in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListResponse
     */
	public function migrationcenterProjectsLocationsAssetsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/assets', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAssetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reports a set of frames.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesResponse
     */
	public function migrationcenterProjectsLocationsAssetsReportAssetFrames(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/assets:reportAssetFrames', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "frames", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsAssetsReportAssetFramesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportAssetFramesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds assets to a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsResponse
     */
	public function migrationcenterProjectsLocationsGroupsAddAssets(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{group}:addAssets', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addAssetsToGroupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsAddAssetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new group in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateResponse
     */
	public function migrationcenterProjectsLocationsGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/groups', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all groups in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListResponse
     */
	public function migrationcenterProjectsLocationsGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/groups', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes assets from a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsResponse
     */
	public function migrationcenterProjectsLocationsGroupsRemoveAssets(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{group}:removeAssets', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeAssetsFromGroupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsGroupsRemoveAssetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an import job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateResponse
     */
	public function migrationcenterProjectsLocationsImportJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/importJobs', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importJobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an import data file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateResponse
     */
	public function migrationcenterProjectsLocationsImportJobsImportDataFilesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/importDataFiles', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importDataFileInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List import data files.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListResponse
     */
	public function migrationcenterProjectsLocationsImportJobsImportDataFilesList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/importDataFiles', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsImportDataFilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listImportDataFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListImportDataFilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all import jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListResponse
     */
	public function migrationcenterProjectsLocationsImportJobsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/importJobs', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listImportJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListImportJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs an import job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunResponse
     */
	public function migrationcenterProjectsLocationsImportJobsRun(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:run', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runImportJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates an import job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateResponse
     */
	public function migrationcenterProjectsLocationsImportJobsValidate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:validate', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "validateImportJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsImportJobsValidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListResponse
     */
	public function migrationcenterProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelResponse
     */
	public function migrationcenterProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListResponse
     */
	public function migrationcenterProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new preference set in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateResponse
     */
	public function migrationcenterProjectsLocationsPreferenceSetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/preferenceSets', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "preferenceSetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the preference sets in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListResponse
     */
	public function migrationcenterProjectsLocationsPreferenceSetsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/preferenceSets', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsPreferenceSetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPreferenceSetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPreferenceSetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a report configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateResponse
     */
	public function migrationcenterProjectsLocationsReportConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/reportConfigs', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ReportConfigs in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListResponse
     */
	public function migrationcenterProjectsLocationsReportConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/reportConfigs', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReportConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReportConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateResponse
     */
	public function migrationcenterProjectsLocationsReportConfigsReportsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/reports', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Reports in a given ReportConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListResponse
     */
	public function migrationcenterProjectsLocationsReportConfigsReportsList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/reports', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsReportConfigsReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new source in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateResponse
     */
	public function migrationcenterProjectsLocationsSourcesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/sources', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sourceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteResponse
     */
	public function migrationcenterProjectsLocationsSourcesDelete(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the details of an error frame.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetResponse
     */
	public function migrationcenterProjectsLocationsSourcesErrorFramesGet(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorFrame = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorFrame', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all error frames in a given source and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListResponse
     */
	public function migrationcenterProjectsLocationsSourcesErrorFramesList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/errorFrames', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesErrorFramesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listErrorFramesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListErrorFramesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the sources in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListResponse
     */
	public function migrationcenterProjectsLocationsSourcesList(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/sources', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchResponse
     */
	public function migrationcenterProjectsLocationsSourcesPatch(
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sourceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationcenterProjectsLocationsSourcesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}