// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationSensorReadingsHistoryPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

type GetOrganizationSensorReadingsHistoryQueryParams struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metrics []string `queryParam:"style=form,explode=false,name=metrics"`
	// Optional parameter to filter readings by network.
	NetworkIds []string `queryParam:"style=form,explode=false,name=networkIds"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Optional parameter to filter readings by sensor.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today.
	T0 *string `queryParam:"style=form,explode=true,name=t0"`
	// The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
	T1 *string `queryParam:"style=form,explode=true,name=t1"`
	// The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
	Timespan *float32 `queryParam:"style=form,explode=true,name=timespan"`
}

type GetOrganizationSensorReadingsHistoryRequest struct {
	PathParams  GetOrganizationSensorReadingsHistoryPathParams
	QueryParams GetOrganizationSensorReadingsHistoryQueryParams
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONBattery - Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONBattery struct {
	// Remaining battery life.
	Percentage *int64 `json:"percentage,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum - Type of button press that occurred.
type GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum string

const (
	GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnumLong  GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum = "long"
	GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnumShort GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum = "short"
)

func (e *GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "long":
		fallthrough
	case "short":
		*e = GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum: %s", s)
	}
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONButton - Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONButton struct {
	// Type of button press that occurred.
	PressType *GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum `json:"pressType,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONDoor - Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONDoor struct {
	// True if the door is open.
	Open *bool `json:"open,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONHumidity - Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONHumidity struct {
	// Humidity reading in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONIndoorAirQuality - Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONIndoorAirQuality struct {
	// Indoor air quality score between 0 and 100.
	Score *int64 `json:"score,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum - Type of sensor reading.
type GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum string

const (
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumBattery          GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "battery"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumButton           GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "button"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumDoor             GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "door"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumHumidity         GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "humidity"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumIndoorAirQuality GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "indoorAirQuality"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumNoise            GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "noise"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumPm25             GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "pm25"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumTemperature      GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "temperature"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumTvoc             GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "tvoc"
	GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnumWater            GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum = "water"
)

func (e *GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "battery":
		fallthrough
	case "button":
		fallthrough
	case "door":
		fallthrough
	case "humidity":
		fallthrough
	case "indoorAirQuality":
		fallthrough
	case "noise":
		fallthrough
	case "pm25":
		fallthrough
	case "temperature":
		fallthrough
	case "tvoc":
		fallthrough
	case "water":
		*e = GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum: %s", s)
	}
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONNetwork - Network to which the sensor belongs.
type GetOrganizationSensorReadingsHistory200ApplicationJSONNetwork struct {
	// ID of the network.
	ID *string `json:"id,omitempty"`
	// Name of the network.
	Name *string `json:"name,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONNoiseAmbient - Ambient noise reading.
type GetOrganizationSensorReadingsHistory200ApplicationJSONNoiseAmbient struct {
	// Ambient noise reading in adjusted decibels.
	Level *int64 `json:"level,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONNoise - Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONNoise struct {
	// Ambient noise reading.
	Ambient *GetOrganizationSensorReadingsHistory200ApplicationJSONNoiseAmbient `json:"ambient,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONPm25 - Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONPm25 struct {
	// PM2.5 reading in micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONTemperature - Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONTemperature struct {
	// Temperature reading in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Temperature reading in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONTvoc - Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONTvoc struct {
	// TVOC reading in micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
}

// GetOrganizationSensorReadingsHistory200ApplicationJSONWater - Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
type GetOrganizationSensorReadingsHistory200ApplicationJSONWater struct {
	// True if water is detected.
	Present *bool `json:"present,omitempty"`
}

type GetOrganizationSensorReadingsHistory200ApplicationJSON struct {
	// Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
	Battery *GetOrganizationSensorReadingsHistory200ApplicationJSONBattery `json:"battery,omitempty"`
	// Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
	Button *GetOrganizationSensorReadingsHistory200ApplicationJSONButton `json:"button,omitempty"`
	// Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
	Door *GetOrganizationSensorReadingsHistory200ApplicationJSONDoor `json:"door,omitempty"`
	// Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
	Humidity *GetOrganizationSensorReadingsHistory200ApplicationJSONHumidity `json:"humidity,omitempty"`
	// Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
	IndoorAirQuality *GetOrganizationSensorReadingsHistory200ApplicationJSONIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Type of sensor reading.
	Metric *GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum `json:"metric,omitempty"`
	// Network to which the sensor belongs.
	Network *GetOrganizationSensorReadingsHistory200ApplicationJSONNetwork `json:"network,omitempty"`
	// Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
	Noise *GetOrganizationSensorReadingsHistory200ApplicationJSONNoise `json:"noise,omitempty"`
	// Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
	Pm25 *GetOrganizationSensorReadingsHistory200ApplicationJSONPm25 `json:"pm25,omitempty"`
	// Serial number of the sensor that took the reading.
	Serial *string `json:"serial,omitempty"`
	// Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
	Temperature *GetOrganizationSensorReadingsHistory200ApplicationJSONTemperature `json:"temperature,omitempty"`
	// Time at which the reading occurred, in ISO8601 format.
	Ts *string `json:"ts,omitempty"`
	// Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
	Tvoc *GetOrganizationSensorReadingsHistory200ApplicationJSONTvoc `json:"tvoc,omitempty"`
	// Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
	Water *GetOrganizationSensorReadingsHistory200ApplicationJSONWater `json:"water,omitempty"`
}

type GetOrganizationSensorReadingsHistoryResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationSensorReadingsHistory200ApplicationJSONObjects []GetOrganizationSensorReadingsHistory200ApplicationJSON
}
