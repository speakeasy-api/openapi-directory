"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import baselinevalueformat as shared_baselinevalueformat
from ..shared import chartcustomnumberformatoptions as shared_chartcustomnumberformatoptions
from ..shared import chartdata as shared_chartdata
from ..shared import keyvalueformat as shared_keyvalueformat
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ScorecardChartSpecAggregateTypeEnum(str, Enum):
    r"""The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional."""
    CHART_AGGREGATE_TYPE_UNSPECIFIED = 'CHART_AGGREGATE_TYPE_UNSPECIFIED'
    AVERAGE = 'AVERAGE'
    COUNT = 'COUNT'
    MAX = 'MAX'
    MEDIAN = 'MEDIAN'
    MIN = 'MIN'
    SUM = 'SUM'

class ScorecardChartSpecNumberFormatSourceEnum(str, Enum):
    r"""The number format source used in the scorecard chart. This field is optional."""
    CHART_NUMBER_FORMAT_SOURCE_UNDEFINED = 'CHART_NUMBER_FORMAT_SOURCE_UNDEFINED'
    FROM_DATA = 'FROM_DATA'
    CUSTOM = 'CUSTOM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScorecardChartSpec:
    r"""A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time."""
    
    aggregate_type: Optional[ScorecardChartSpecAggregateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregateType'), 'exclude': lambda f: f is None }})
    r"""The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional."""  
    baseline_value_data: Optional[shared_chartdata.ChartData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baselineValueData'), 'exclude': lambda f: f is None }})
    r"""The data included in a domain or series."""  
    baseline_value_format: Optional[shared_baselinevalueformat.BaselineValueFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baselineValueFormat'), 'exclude': lambda f: f is None }})
    r"""Formatting options for baseline value."""  
    custom_format_options: Optional[shared_chartcustomnumberformatoptions.ChartCustomNumberFormatOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFormatOptions'), 'exclude': lambda f: f is None }})
    r"""Custom number formatting options for chart attributes."""  
    key_value_data: Optional[shared_chartdata.ChartData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyValueData'), 'exclude': lambda f: f is None }})
    r"""The data included in a domain or series."""  
    key_value_format: Optional[shared_keyvalueformat.KeyValueFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyValueFormat'), 'exclude': lambda f: f is None }})
    r"""Formatting options for key value."""  
    number_format_source: Optional[ScorecardChartSpecNumberFormatSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberFormatSource'), 'exclude': lambda f: f is None }})
    r"""The number format source used in the scorecard chart. This field is optional."""  
    scale_factor: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaleFactor'), 'exclude': lambda f: f is None }})
    r"""Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional."""  
    