"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .fraud_management import FraudManagement
from .requests import Requests
from sdk.models import operations
from typing import Any, Optional

SERVERS = [
    "https://api.nexmo.com/verify",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Verify API helps you to implement 2FA (two-factor authentication) in your applications. This is useful for:
    
    * Protecting against spam, by preventing spammers from creating multiple accounts
    * Monitoring suspicious activity, by forcing an account user to verify ownership of a number
    * Ensuring that you can reach your users at any time because you have their correct phone number
    More information is available at <https://developer.nexmo.com/verify>
    https://developer.nexmo.com/verify - More information on the Verify product on our Developer Portal
    """
    fraud_management: FraudManagement
    r"""Fraud Management"""
    requests: Requests
    r"""Verify Requests"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.fraud_management = FraudManagement(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.requests = Requests(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def verify_check(self, request: operations.VerifyCheckRequest) -> operations.VerifyCheckResponse:
        r"""Verify Check
        Use Verify check to confirm that the PIN you received from your user matches the one sent by Vonage in your Verify request.
        
        1. Send the verification `code` that your user supplied, with the corresponding `request_id` from the Verify request.
        2. Check the `status` of the response to determine if the code the user supplied matches the one sent by Vonage.
        
        *Note that this endpoint is available by `GET` request as well as `POST`.*
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VerifyCheckRequest, base_url, '/check/{format}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "check_request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VerifyCheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.verify_check_200_application_json_one_of = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def verify_control(self, request: operations.VerifyControlRequest) -> operations.VerifyControlResponse:
        r"""Verify Control
        Control the progress of your Verify requests. To cancel an existing Verify request, or to trigger the next verification event:
        
        
        1. Send a Verify control request with the appropriate command (`cmd`) for what you want to achieve.
        
        2. Check the `status` in the response.
        
        
        *Note that this endpoint is available by `GET` request as well as `POST`.*
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VerifyControlRequest, base_url, '/control/{format}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "control_request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VerifyControlResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.verify_control_200_application_json_one_of = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def verify_request_with_psd2(self, request: operations.VerifyRequestWithPsd2Request) -> operations.VerifyRequestWithPsd2Response:
        r"""PSD2 (Payment Services Directive 2) Request
        Use Verify request to generate and send a PIN to your user to authorize a payment:
        1. Create a request to send a verification code to your user.
        2. Check the `status` field in the response to ensure that your request was successful (zero is success).
        3. Use the `request_id` field in the response for the Verify check.
        (Please note that XML format is not supported for the Payment Services Directive endpoint at this time.)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VerifyRequestWithPsd2Request, base_url, '/psd2/{format}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "psd2_request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VerifyRequestWithPsd2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.verify_request_with_psd2_200_application_json_one_of = out

        return res

    def verify_search(self, request: operations.VerifySearchRequest) -> operations.VerifySearchResponse:
        r"""Verify Search
        Use Verify search to check the status of past or current verification requests:
        
        1. Send a Verify search request containing the `request_id`s of the verification requests you are interested in.
        2. Use the `status` of each verification request in the `checks` array of the response object to determine the outcome.
        
        *Note that this endpoint is available by `POST` request as well as `GET`.*
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VerifySearchRequest, base_url, '/search/{format}', request)
        
        query_params = utils.get_query_params(operations.VerifySearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VerifySearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.verify_search_200_application_json_one_of = out
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    