/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VideoContentDetails - Details about the content of a YouTube Video.
 */
public class VideoContentDetails {
    /**
     * The value of captions indicates whether the video has captions or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caption")
    public VideoContentDetailsCaptionEnum caption;

    public VideoContentDetails withCaption(VideoContentDetailsCaptionEnum caption) {
        this.caption = caption;
        return this;
    }
    
    /**
     * Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRating")
    public ContentRating contentRating;

    public VideoContentDetails withContentRating(ContentRating contentRating) {
        this.contentRating = contentRating;
        return this;
    }
    
    /**
     * Rights management policy for YouTube resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryRestriction")
    public AccessPolicy countryRestriction;

    public VideoContentDetails withCountryRestriction(AccessPolicy countryRestriction) {
        this.countryRestriction = countryRestriction;
        return this;
    }
    
    /**
     * The value of definition indicates whether the video is available in high definition or only in standard definition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("definition")
    public VideoContentDetailsDefinitionEnum definition;

    public VideoContentDetails withDefinition(VideoContentDetailsDefinitionEnum definition) {
        this.definition = definition;
        return this;
    }
    
    /**
     * The value of dimension indicates whether the video is available in 3D or in 2D.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimension")
    public String dimension;

    public VideoContentDetails withDimension(String dimension) {
        this.dimension = dimension;
        return this;
    }
    
    /**
     * The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;

    public VideoContentDetails withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasCustomThumbnail")
    public Boolean hasCustomThumbnail;

    public VideoContentDetails withHasCustomThumbnail(Boolean hasCustomThumbnail) {
        this.hasCustomThumbnail = hasCustomThumbnail;
        return this;
    }
    
    /**
     * The value of is_license_content indicates whether the video is licensed content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licensedContent")
    public Boolean licensedContent;

    public VideoContentDetails withLicensedContent(Boolean licensedContent) {
        this.licensedContent = licensedContent;
        return this;
    }
    
    /**
     * Specifies the projection format of the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projection")
    public VideoContentDetailsProjectionEnum projection;

    public VideoContentDetails withProjection(VideoContentDetailsProjectionEnum projection) {
        this.projection = projection;
        return this;
    }
    
    /**
     * DEPRECATED Region restriction of the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regionRestriction")
    public VideoContentDetailsRegionRestriction regionRestriction;

    public VideoContentDetails withRegionRestriction(VideoContentDetailsRegionRestriction regionRestriction) {
        this.regionRestriction = regionRestriction;
        return this;
    }
    
    public VideoContentDetails(){}
}
