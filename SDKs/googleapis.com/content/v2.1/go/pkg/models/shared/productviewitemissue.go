// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProductViewItemIssueResolutionEnum - Item issue resolution.
type ProductViewItemIssueResolutionEnum string

const (
	ProductViewItemIssueResolutionEnumUnknown           ProductViewItemIssueResolutionEnum = "UNKNOWN"
	ProductViewItemIssueResolutionEnumMerchantAction    ProductViewItemIssueResolutionEnum = "MERCHANT_ACTION"
	ProductViewItemIssueResolutionEnumPendingProcessing ProductViewItemIssueResolutionEnum = "PENDING_PROCESSING"
)

func (e ProductViewItemIssueResolutionEnum) ToPointer() *ProductViewItemIssueResolutionEnum {
	return &e
}

func (e *ProductViewItemIssueResolutionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "MERCHANT_ACTION":
		fallthrough
	case "PENDING_PROCESSING":
		*e = ProductViewItemIssueResolutionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductViewItemIssueResolutionEnum: %v", v)
	}
}

// ProductViewItemIssue - Item issue associated with the product.
type ProductViewItemIssue struct {
	// Type of the item issue.
	IssueType *ProductViewItemIssueItemIssueType `json:"issueType,omitempty"`
	// Item issue resolution.
	Resolution *ProductViewItemIssueResolutionEnum `json:"resolution,omitempty"`
	// Severity of an issue per destination in a region, and aggregated severity.
	Severity *ProductViewItemIssueItemIssueSeverity `json:"severity,omitempty"`
}
