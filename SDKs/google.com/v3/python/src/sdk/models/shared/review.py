"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rating as shared_rating
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReviewTypeEnum(str, Enum):
    r"""The type of the review."""
    UNKNOWN = 'UNKNOWN'
    EDITORIAL = 'EDITORIAL'
    USER = 'USER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Review:
    r"""A single review in a VR Listing. NEXT ID: 10"""
    
    author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author'), 'exclude': lambda f: f is None }})
    r"""The author of the review."""  
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})
    r"""The body of the review."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""Language of the review, such as \\"en\\", \\"de\\", etc."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The url of the review."""  
    rating: Optional[list[shared_rating.Rating]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rating'), 'exclude': lambda f: f is None }})
    r"""Any ratings associated with this review. This is repeated because reviews can include ratings on different aspects of a listing, e.g. location, cleanliness, etc."""  
    review_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewTime'), 'exclude': lambda f: f is None }})
    r"""Unix timestamp (in seconds) of the review, in UTC+0."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the review, for example: Great three bedrooms."""  
    type: Optional[ReviewTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the review."""  
    visit_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visitTime'), 'exclude': lambda f: f is None }})
    r"""Unix timestamp (in seconds) of when the stay was, in UTC+0."""  
    