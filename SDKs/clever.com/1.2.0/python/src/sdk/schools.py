"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Schools:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_district_for_school(self, request: operations.GetDistrictForSchoolRequest) -> operations.GetDistrictForSchoolResponse:
        r"""Returns the district for a school"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictForSchoolRequest, base_url, '/schools/{id}/district', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictForSchoolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DistrictResponse])
                res.district_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_school(self, request: operations.GetSchoolRequest) -> operations.GetSchoolResponse:
        r"""Returns a specific school"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSchoolRequest, base_url, '/schools/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSchoolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SchoolResponse])
                res.school_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_schools(self, request: operations.GetSchoolsRequest) -> operations.GetSchoolsResponse:
        r"""Returns a list of schools"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/schools'
        
        query_params = utils.get_query_params(operations.GetSchoolsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSchoolsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SchoolsResponse])
                res.schools_response = out

        return res

    def get_sections_for_school(self, request: operations.GetSectionsForSchoolRequest) -> operations.GetSectionsForSchoolResponse:
        r"""Returns the sections for a school"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSectionsForSchoolRequest, base_url, '/schools/{id}/sections', request)
        
        query_params = utils.get_query_params(operations.GetSectionsForSchoolRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSectionsForSchoolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SectionsResponse])
                res.sections_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_students_for_school(self, request: operations.GetStudentsForSchoolRequest) -> operations.GetStudentsForSchoolResponse:
        r"""Returns the students for a school"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStudentsForSchoolRequest, base_url, '/schools/{id}/students', request)
        
        query_params = utils.get_query_params(operations.GetStudentsForSchoolRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStudentsForSchoolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StudentsResponse])
                res.students_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_teachers_for_school(self, request: operations.GetTeachersForSchoolRequest) -> operations.GetTeachersForSchoolResponse:
        r"""Returns the teachers for a school"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeachersForSchoolRequest, base_url, '/schools/{id}/teachers', request)
        
        query_params = utils.get_query_params(operations.GetTeachersForSchoolRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeachersForSchoolResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TeachersResponse])
                res.teachers_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    