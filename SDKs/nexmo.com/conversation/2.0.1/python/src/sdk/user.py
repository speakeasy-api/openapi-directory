"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class User:
    r"""The concept of a user exists in Vonage APIs, you can associate one with a user in your own application if you choose. A user can have multiple memberships to conversations and can communicate with other users through various different mediums."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_user(self, request: operations.CreateUserRequestBody) -> operations.CreateUserResponse:
        r"""Create a user
        Note: Users must be created with an admin JWT.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateUser200ApplicationJSON])
                res.create_user_200_application_json_object = out

        return res

    def delete_user(self, request: operations.DeleteUserRequest) -> operations.DeleteUserResponse:
        r"""Delete a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserRequest, base_url, '/users/{user_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_user_200_application_json_object = out

        return res

    def get_user(self, request: operations.GetUserRequest) -> operations.GetUserResponse:
        r"""Retrieve a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserRequest, base_url, '/users/{user_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUser200ApplicationJSON])
                res.get_user_200_application_json_object = out

        return res

    def get_users(self) -> operations.GetUsersResponse:
        r"""List users
        This endpoint is **DEPRECATED**. Please use [/v0.2/users](/api/conversation.v2#get-users).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetUsers200ApplicationJSON]])
                res.get_users_200_application_json_objects = out

        return res

    def getuser_conversations(self, request: operations.GetuserConversationsRequest) -> operations.GetuserConversationsResponse:
        r"""List user conversations"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetuserConversationsRequest, base_url, '/users/{user_id}/conversations', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetuserConversationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetuserConversations200ApplicationJSON]])
                res.getuser_conversations_200_application_json_objects = out

        return res

    def update_user(self, request: operations.UpdateUserRequest) -> operations.UpdateUserResponse:
        r"""Update a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUserRequest, base_url, '/users/{user_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateUser200ApplicationJSON])
                res.update_user_200_application_json_object = out

        return res

    