/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PUTPublicEmailTemplateRequest - The request body to update an email template.
 */
public class PUTPublicEmailTemplateRequest {
    /**
     * The status of the email template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public PUTPublicEmailTemplateRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Email bcc address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bccEmailAddress")
    public String bccEmailAddress;
    public PUTPublicEmailTemplateRequest withBccEmailAddress(String bccEmailAddress) {
        this.bccEmailAddress = bccEmailAddress;
        return this;
    }
    
    /**
     * Email cc address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ccEmailAddress")
    public String ccEmailAddress;
    public PUTPublicEmailTemplateRequest withCcEmailAddress(String ccEmailAddress) {
        this.ccEmailAddress = ccEmailAddress;
        return this;
    }
    
    /**
     * Email cc type.
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ccEmailType")
    public PUTPublicEmailTemplateRequestCcEmailTypeEnum ccEmailType;
    public PUTPublicEmailTemplateRequest withCcEmailType(PUTPublicEmailTemplateRequestCcEmailTypeEnum ccEmailType) {
        this.ccEmailType = ccEmailType;
        return this;
    }
    
    /**
     * The description of the email template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public PUTPublicEmailTemplateRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The email body. You can add merge fields in the email object using angle brackets. 
     * User can also embed html tags if 'isHtml' is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailBody")
    public String emailBody;
    public PUTPublicEmailTemplateRequest withEmailBody(String emailBody) {
        this.emailBody = emailBody;
        return this;
    }
    
    /**
     * The email subject. You can add merge fields in the email subject using angle brackets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailSubject")
    public String emailSubject;
    public PUTPublicEmailTemplateRequest withEmailSubject(String emailSubject) {
        this.emailSubject = emailSubject;
        return this;
    }
    
    /**
     * The endcode type of the email body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encodingType")
    public PUTPublicEmailTemplateRequestEncodingTypeEnum encodingType;
    public PUTPublicEmailTemplateRequest withEncodingType(PUTPublicEmailTemplateRequestEncodingTypeEnum encodingType) {
        this.encodingType = encodingType;
        return this;
    }
    
    /**
     * If fromEmailType is SpecificEmail, this field is required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromEmailAddress")
    public String fromEmailAddress;
    public PUTPublicEmailTemplateRequest withFromEmailAddress(String fromEmailAddress) {
        this.fromEmailAddress = fromEmailAddress;
        return this;
    }
    
    /**
     * The type of fromEmail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromEmailType")
    public PUTPublicEmailTemplateRequestFromEmailTypeEnum fromEmailType;
    public PUTPublicEmailTemplateRequest withFromEmailType(PUTPublicEmailTemplateRequestFromEmailTypeEnum fromEmailType) {
        this.fromEmailType = fromEmailType;
        return this;
    }
    
    /**
     * The name of email sender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromName")
    public String fromName;
    public PUTPublicEmailTemplateRequest withFromName(String fromName) {
        this.fromName = fromName;
        return this;
    }
    
    /**
     * Specifies whether the style of email body is HTML.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isHtml")
    public Boolean isHtml;
    public PUTPublicEmailTemplateRequest withIsHtml(Boolean isHtml) {
        this.isHtml = isHtml;
        return this;
    }
    
    /**
     * The name of the email template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PUTPublicEmailTemplateRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * If replyToEmailType is SpecificEmail, this field is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyToEmailAddress")
    public String replyToEmailAddress;
    public PUTPublicEmailTemplateRequest withReplyToEmailAddress(String replyToEmailAddress) {
        this.replyToEmailAddress = replyToEmailAddress;
        return this;
    }
    
    /**
     * The type of the reply email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyToEmailType")
    public PUTPublicEmailTemplateRequestReplyToEmailTypeEnum replyToEmailType;
    public PUTPublicEmailTemplateRequest withReplyToEmailType(PUTPublicEmailTemplateRequestReplyToEmailTypeEnum replyToEmailType) {
        this.replyToEmailType = replyToEmailType;
        return this;
    }
    
    /**
     * If toEmailType is SpecificEmail, this field is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toEmailAddress")
    public String toEmailAddress;
    public PUTPublicEmailTemplateRequest withToEmailAddress(String toEmailAddress) {
        this.toEmailAddress = toEmailAddress;
        return this;
    }
    
    /**
     * Email receive type.
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toEmailType")
    public PUTPublicEmailTemplateRequestToEmailTypeEnum toEmailType;
    public PUTPublicEmailTemplateRequest withToEmailType(PUTPublicEmailTemplateRequestToEmailTypeEnum toEmailType) {
        this.toEmailType = toEmailType;
        return this;
    }
    
}
