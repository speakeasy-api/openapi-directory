"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filter as shared_filter
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CompositeFilterOpEnum(str, Enum):
    r"""The operator for combining multiple filters."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    AND = 'AND'
    OR = 'OR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompositeFilter:
    r"""A filter that merges multiple other filters using the given operator."""
    
    filters: Optional[list[shared_filter.Filter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""The list of filters to combine. Requires: * At least one filter is present."""  
    op: Optional[CompositeFilterOpEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""The operator for combining multiple filters."""  
    