// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsLatestErrorDetailsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsLatestErrorDetailsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnumConflict            ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsLatestErrorDetailsDefaultApplicationJSONError struct {
	Code    ErrorsLatestErrorDetailsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                      `json:"message"`
}

// ErrorsLatestErrorDetailsDefaultApplicationJSON - Error code with reason
type ErrorsLatestErrorDetailsDefaultApplicationJSON struct {
	Error ErrorsLatestErrorDetailsDefaultApplicationJSONError `json:"error"`
}

// ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum - programming language of the frame
type ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum string

const (
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumJavaScript   ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "JavaScript"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumCSharp       ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "CSharp"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumObjectiveC   ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "Objective-C"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumObjectiveCpp ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "Objective-Cpp"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumCpp          ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "Cpp"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumC            ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "C"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumSwift        ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "Swift"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumJava         ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "Java"
	ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnumUnknown      ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum = "Unknown"
)

func (e ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum) ToPointer() *ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum {
	return &e
}

func (e *ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum: %v", v)
	}
}

type ErrorsLatestErrorDetails200ApplicationJSONReasonFrames struct {
	// this line isn't from any framework
	AppCode *bool `json:"appCode,omitempty"`
	// is a class method
	ClassMethod *bool `json:"classMethod,omitempty"`
	// name of the class
	ClassName *string `json:"className,omitempty"`
	// Formatted frame string
	CodeFormatted *string `json:"codeFormatted,omitempty"`
	// Unformatted Frame string
	CodeRaw *string `json:"codeRaw,omitempty"`
	// Exception type.
	ExceptionType *string `json:"exceptionType,omitempty"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"frameworkName,omitempty"`
	// programming language of the frame
	Language *ErrorsLatestErrorDetails200ApplicationJSONReasonFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"methodParams,omitempty"`
	// OS exception type. (aka. SIGNAL)
	OsExceptionType *string `json:"osExceptionType,omitempty"`
}

// ErrorsLatestErrorDetails200ApplicationJSON - Latest error details.
type ErrorsLatestErrorDetails200ApplicationJSON struct {
	// Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'.
	//
	AppLaunchTimestamp *time.Time `json:"appLaunchTimestamp,omitempty"`
	// Carrier name (for mobile devices).
	//
	CarrierName    *string `json:"carrierName,omitempty"`
	Country        *string `json:"country,omitempty"`
	DeviceName     *string `json:"deviceName,omitempty"`
	ErrorID        *string `json:"errorId,omitempty"`
	HasAttachments *bool   `json:"hasAttachments,omitempty"`
	HasBreadcrumbs *bool   `json:"hasBreadcrumbs,omitempty"`
	// Flag indicating if device is jailbroken
	//
	Jailbreak    *bool                                                    `json:"jailbreak,omitempty"`
	Language     *string                                                  `json:"language,omitempty"`
	Name         *string                                                  `json:"name,omitempty"`
	OsType       *string                                                  `json:"osType,omitempty"`
	OsVersion    *string                                                  `json:"osVersion,omitempty"`
	Properties   map[string]string                                        `json:"properties,omitempty"`
	ReasonFrames []ErrorsLatestErrorDetails200ApplicationJSONReasonFrames `json:"reasonFrames,omitempty"`
	Timestamp    *time.Time                                               `json:"timestamp,omitempty"`
	UserID       *string                                                  `json:"userId,omitempty"`
}

type ErrorsLatestErrorDetailsResponse struct {
	ContentType string
	// Latest error details.
	ErrorsLatestErrorDetails200ApplicationJSONObject *ErrorsLatestErrorDetails200ApplicationJSON
	// Error code with reason
	ErrorsLatestErrorDetailsDefaultApplicationJSONObject *ErrorsLatestErrorDetailsDefaultApplicationJSON
	StatusCode                                           int
	RawResponse                                          *http.Response
}
