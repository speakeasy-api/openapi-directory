"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Attachments:
    r"""An *attachment* object represents any file attached to a task in Asana, whether itâ€™s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_attachment_for_object(self, request: operations.CreateAttachmentForObjectRequest) -> operations.CreateAttachmentForObjectResponse:
        r"""Upload an attachment
        Upload an attachment.
        
        This method uploads an attachment on an object and returns the compact
        record for the created attachment object. This is possible by either:
        
        - Providing the URL of the external resource being attached, or
        - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach
        files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API
        
        The 100MB size limit on attachments in Asana is enforced on this endpoint.
        
        This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.
        
        Requests made should follow the HTTP/1.1 specification that line
        terminators are of the form `CRLF` or `\r\n` outlined
        [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/attachments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "attachment_request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateAttachmentForObjectRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAttachmentForObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAttachmentForObject200ApplicationJSON])
                res.create_attachment_for_object_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def delete_attachment(self, request: operations.DeleteAttachmentRequest) -> operations.DeleteAttachmentResponse:
        r"""Delete an attachment
        Deletes a specific, existing attachment.
        
        Returns an empty data record.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAttachmentRequest, base_url, '/attachments/{attachment_gid}', request)
        
        query_params = utils.get_query_params(operations.DeleteAttachmentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAttachmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteAttachment200ApplicationJSON])
                res.delete_attachment_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_attachment(self, request: operations.GetAttachmentRequest) -> operations.GetAttachmentResponse:
        r"""Get an attachment
        Get the full record for a single attachment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAttachmentRequest, base_url, '/attachments/{attachment_gid}', request)
        
        query_params = utils.get_query_params(operations.GetAttachmentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAttachmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAttachment200ApplicationJSON])
                res.get_attachment_200_application_json_object = out
        elif http_res.status_code in [400, 401, 402, 403, 404, 424, 500, 501, 503, 504]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_attachments_for_object(self, request: operations.GetAttachmentsForObjectRequest) -> operations.GetAttachmentsForObjectResponse:
        r"""Get attachments from an object
        Returns the compact records for all attachments on the object.
        
        There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the \"Key resources\" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/attachments'
        
        query_params = utils.get_query_params(operations.GetAttachmentsForObjectRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAttachmentsForObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAttachmentsForObject200ApplicationJSON])
                res.get_attachments_for_object_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    