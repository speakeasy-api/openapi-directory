/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetDefinitionsQueryParams {
    /**
     * Return related words with definitions
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeRelated")
    public String includeRelated;
    public GetDefinitionsQueryParams withIncludeRelated(String includeRelated) {
        this.includeRelated = includeRelated;
        return this;
    }
    
    /**
     * Return a closed set of XML tags in response
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeTags")
    public GetDefinitionsIncludeTagsEnum includeTags;
    public GetDefinitionsQueryParams withIncludeTags(GetDefinitionsIncludeTagsEnum includeTags) {
        this.includeTags = includeTags;
        return this;
    }
    
    /**
     * Maximum number of results to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;
    public GetDefinitionsQueryParams withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * CSV list of part-of-speech types
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=partOfSpeech")
    public GetDefinitionsPartOfSpeechEnum partOfSpeech;
    public GetDefinitionsQueryParams withPartOfSpeech(GetDefinitionsPartOfSpeechEnum partOfSpeech) {
        this.partOfSpeech = partOfSpeech;
        return this;
    }
    
    /**
     * Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=sourceDictionaries")
    public GetDefinitionsSourceDictionariesEnum sourceDictionaries;
    public GetDefinitionsQueryParams withSourceDictionaries(GetDefinitionsSourceDictionariesEnum sourceDictionaries) {
        this.sourceDictionaries = sourceDictionaries;
        return this;
    }
    
    /**
     * If true will try to return the correct word root ('cats' -&gt; 'cat'). If false returns exactly what was requested.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=useCanonical")
    public GetDefinitionsUseCanonicalEnum useCanonical;
    public GetDefinitionsQueryParams withUseCanonical(GetDefinitionsUseCanonicalEnum useCanonical) {
        this.useCanonical = useCanonical;
        return this;
    }
    
}
