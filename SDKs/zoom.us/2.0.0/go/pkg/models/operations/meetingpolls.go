// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type MeetingPollsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type MeetingPollsRequest struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

// MeetingPollsPollListPollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type MeetingPollsPollListPollQuestionsTypeEnum string

const (
	MeetingPollsPollListPollQuestionsTypeEnumSingle   MeetingPollsPollListPollQuestionsTypeEnum = "single"
	MeetingPollsPollListPollQuestionsTypeEnumMultiple MeetingPollsPollListPollQuestionsTypeEnum = "multiple"
)

func (e *MeetingPollsPollListPollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = MeetingPollsPollListPollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingPollsPollListPollQuestionsTypeEnum: %s", s)
	}
}

type MeetingPollsPollListPollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *MeetingPollsPollListPollQuestionsTypeEnum `json:"type,omitempty"`
}

// MeetingPollsPollListPollStatusEnum - Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type MeetingPollsPollListPollStatusEnum string

const (
	MeetingPollsPollListPollStatusEnumNotstart MeetingPollsPollListPollStatusEnum = "notstart"
	MeetingPollsPollListPollStatusEnumStarted  MeetingPollsPollListPollStatusEnum = "started"
	MeetingPollsPollListPollStatusEnumEnded    MeetingPollsPollListPollStatusEnum = "ended"
	MeetingPollsPollListPollStatusEnumSharing  MeetingPollsPollListPollStatusEnum = "sharing"
)

func (e *MeetingPollsPollListPollStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = MeetingPollsPollListPollStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingPollsPollListPollStatusEnum: %s", s)
	}
}

// MeetingPollsPollListPoll - Poll
type MeetingPollsPollListPoll struct {
	// ID of Poll
	ID *string `json:"id,omitempty"`
	// Array of Polls
	Questions []MeetingPollsPollListPollQuestions `json:"questions,omitempty"`
	// Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *MeetingPollsPollListPollStatusEnum `json:"status,omitempty"`
	// Title for the poll.
	Title *string `json:"title,omitempty"`
}

// MeetingPollsPollList - Poll List
type MeetingPollsPollList struct {
	// Array of Polls
	Polls []MeetingPollsPollListPoll `json:"polls,omitempty"`
	// The number of all records available across pages
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type MeetingPollsResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** <br>
	// List polls of a Meeting  returned
	PollList    *MeetingPollsPollList
	StatusCode  int
	RawResponse *http.Response
}
