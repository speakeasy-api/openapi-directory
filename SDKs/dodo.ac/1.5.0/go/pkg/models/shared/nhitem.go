// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NHItemAvailability struct {
	From *string `json:"from,omitempty"`
	Note *string `json:"note,omitempty"`
}

type NHItemBuy struct {
	Currency *string `json:"currency,omitempty"`
	Price    *int64  `json:"price,omitempty"`
}

// NHItemMaterialTypeEnum - (WIP)
type NHItemMaterialTypeEnum string

const (
	NHItemMaterialTypeEnumUnknown      NHItemMaterialTypeEnum = ""
	NHItemMaterialTypeEnumBamboo       NHItemMaterialTypeEnum = "Bamboo"
	NHItemMaterialTypeEnumMushroom     NHItemMaterialTypeEnum = "Mushroom"
	NHItemMaterialTypeEnumTrash        NHItemMaterialTypeEnum = "Trash"
	NHItemMaterialTypeEnumWood         NHItemMaterialTypeEnum = "Wood"
	NHItemMaterialTypeEnumOre          NHItemMaterialTypeEnum = "Ore"
	NHItemMaterialTypeEnumSnowflake    NHItemMaterialTypeEnum = "Snowflake"
	NHItemMaterialTypeEnumTree         NHItemMaterialTypeEnum = "Tree"
	NHItemMaterialTypeEnumOrnament     NHItemMaterialTypeEnum = "Ornament"
	NHItemMaterialTypeEnumFruit        NHItemMaterialTypeEnum = "Fruit"
	NHItemMaterialTypeEnumUnderwater   NHItemMaterialTypeEnum = "Underwater"
	NHItemMaterialTypeEnumOther        NHItemMaterialTypeEnum = "Other"
	NHItemMaterialTypeEnumLeaf         NHItemMaterialTypeEnum = "Leaf"
	NHItemMaterialTypeEnumShell        NHItemMaterialTypeEnum = "Shell"
	NHItemMaterialTypeEnumFlower       NHItemMaterialTypeEnum = "Flower"
	NHItemMaterialTypeEnumStarFragment NHItemMaterialTypeEnum = "Star Fragment"
	NHItemMaterialTypeEnumFeather      NHItemMaterialTypeEnum = "Feather"
	NHItemMaterialTypeEnumEgg          NHItemMaterialTypeEnum = "Egg"
	NHItemMaterialTypeEnumPlant        NHItemMaterialTypeEnum = "Plant"
)

func (e *NHItemMaterialTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "Bamboo":
		fallthrough
	case "Mushroom":
		fallthrough
	case "Trash":
		fallthrough
	case "Wood":
		fallthrough
	case "Ore":
		fallthrough
	case "Snowflake":
		fallthrough
	case "Tree":
		fallthrough
	case "Ornament":
		fallthrough
	case "Fruit":
		fallthrough
	case "Underwater":
		fallthrough
	case "Other":
		fallthrough
	case "Leaf":
		fallthrough
	case "Shell":
		fallthrough
	case "Flower":
		fallthrough
	case "Star Fragment":
		fallthrough
	case "Feather":
		fallthrough
	case "Egg":
		fallthrough
	case "Plant":
		*e = NHItemMaterialTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NHItemMaterialTypeEnum: %s", s)
	}
}

// NHItemPlantTypeEnum - (WIP)
type NHItemPlantTypeEnum string

const (
	NHItemPlantTypeEnumUnknown NHItemPlantTypeEnum = ""
	NHItemPlantTypeEnumPumpkin NHItemPlantTypeEnum = "Pumpkin"
	NHItemPlantTypeEnumFlower  NHItemPlantTypeEnum = "Flower"
	NHItemPlantTypeEnumBush    NHItemPlantTypeEnum = "Bush"
	NHItemPlantTypeEnumTree    NHItemPlantTypeEnum = "Tree"
)

func (e *NHItemPlantTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "Pumpkin":
		fallthrough
	case "Flower":
		fallthrough
	case "Bush":
		fallthrough
	case "Tree":
		*e = NHItemPlantTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NHItemPlantTypeEnum: %s", s)
	}
}

// NHItem - A JSON object describing the item.
type NHItem struct {
	// Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
	Availability []NHItemAvailability `json:"availability,omitempty"`
	// An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
	Buy []NHItemBuy `json:"buy,omitempty"`
	// Whether the item is edible or not.
	Edible *bool `json:"edible,omitempty"`
	// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
	HhaBase *int64 `json:"hha_base,omitempty"`
	// Image of the interior. dodo.ac is Nookipedia's CDN server.
	ImageURL *string `json:"image_url,omitempty"`
	// Whether or not the item is a fence or not.
	IsFence *bool `json:"is_fence,omitempty"`
	// (WIP)
	MaterialNameSort *int64 `json:"material_name_sort,omitempty"`
	// (WIP)
	MaterialSeasonality *string `json:"material_seasonality,omitempty"`
	// (WIP)
	MaterialSeasonalitySort *int64 `json:"material_seasonality_sort,omitempty"`
	// (WIP)
	MaterialSort *int64 `json:"material_sort,omitempty"`
	// (WIP)
	MaterialType *NHItemMaterialTypeEnum `json:"material_type,omitempty"`
	// The name of the item.
	Name *string `json:"name,omitempty"`
	// Any additional miscellaneous information about the item, such as a name change from a past update.
	Notes *string `json:"notes,omitempty"`
	// (WIP)
	PlantType *NHItemPlantTypeEnum `json:"plant_type,omitempty"`
	// The number of bells the item can be sold to Nook's store for.
	Sell *int64 `json:"sell,omitempty"`
	// How much the item can stack up to in a single inventory slot.
	Stack *int64 `json:"stack,omitempty"`
	// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
	Unlocked *bool `json:"unlocked,omitempty"`
	// Link to the respective Nookipedia article.
	URL *string `json:"url,omitempty"`
	// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
	VersionAdded *string `json:"version_added,omitempty"`
}
