<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Annotation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns annotation count for ontology accession ID and object type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndObjectTypeUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndObjectTypeUsingGETResponse
     */
	public function getAnnotationCountByAccIdAndObjectTypeUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndObjectTypeUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndObjectTypeUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}/{objectType}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndObjectTypeUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndObjectTypeUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns annotation count for ontology accession ID and speicies
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndSpeciesUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndSpeciesUsingGETResponse
     */
	public function getAnnotationCountByAccIdAndSpeciesUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndSpeciesUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndSpeciesUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/count/{accId}/{speciesTypeKey}/{includeChildren}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndSpeciesUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdAndSpeciesUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns annotation count for ontology accession ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdUsingGETResponse
     */
	public function getAnnotationCountByAccIdUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/count/{accId}/{includeChildren}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotationCountByAccIdUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list of annotations by RGD ID and ontology term accession ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByAccIdAndRgdIdUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByAccIdAndRgdIdUsingGETResponse
     */
	public function getAnnotationsByAccIdAndRgdIdUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByAccIdAndRgdIdUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByAccIdAndRgdIdUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/{accId}/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByAccIdAndRgdIdUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByAccIdAndRgdIdUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list of annotations by RGD ID and ontology prefix
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdAndOntologyUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdAndOntologyUsingGETResponse
     */
	public function getAnnotationsByRgdIdAndOntologyUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdAndOntologyUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdAndOntologyUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/rgdId/{rgdId}/{ontologyPrefix}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdAndOntologyUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdAndOntologyUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list of annotations by RGD ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdUsingGETResponse
     */
	public function getAnnotationsByRgdIdUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/rgdId/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsByRgdIdUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list annotations for an ontology term or a term and it's children
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsUsingGETResponse
     */
	public function getAnnotationsUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/{accId}/{speciesTypeKey}/{includeChildren}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotationsUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AnnotationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnnotationsUsingPOSTResponse
     */
	public function getAnnotationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\AnnotationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnnotationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnnotationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list of annotations for a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAnnotsByRefrerenceUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAnnotsByRefrerenceUsingGETResponse
     */
	public function getAnnotsByRefrerenceUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAnnotsByRefrerenceUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAnnotsByRefrerenceUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/reference/{refRgdId}', \OpenAPI\OpenAPI\Models\Operations\GETAnnotsByRefrerenceUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAnnotsByRefrerenceUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list ontology term accession IDs annotated to an rgd object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETTermAccIdsUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETTermAccIdsUsingGETResponse
     */
	public function getTermAccIdsUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETTermAccIdsUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETTermAccIdsUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/annotations/accId/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETTermAccIdsUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETTermAccIdsUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}