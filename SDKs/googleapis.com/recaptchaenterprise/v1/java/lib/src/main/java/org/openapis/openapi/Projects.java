/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsAnnotateResponse recaptchaenterpriseProjectsAssessmentsAnnotate(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsAnnotateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsAnnotatePathParams.class, baseUrl, "/v1/{name}:annotate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsAnnotateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsAnnotateResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsAnnotateResponse() {{
            googleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates an Assessment of the likelihood an event is legitimate.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsCreateResponse recaptchaenterpriseProjectsAssessmentsCreate(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsCreateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsCreatePathParams.class, baseUrl, "/v1/{parent}/assessments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsCreateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsCreateResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsAssessmentsCreateResponse() {{
            googleCloudRecaptchaenterpriseV1Assessment = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Assessment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Assessment.class);
                res.googleCloudRecaptchaenterpriseV1Assessment = out;
            }
        }

        return res;
    }

    /**
     * Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse recaptchaenterpriseProjectsFirewallpoliciesCreate(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesCreatePathParams.class, baseUrl, "/v1/{parent}/firewallpolicies", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse() {{
            googleCloudRecaptchaenterpriseV1FirewallPolicy = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1FirewallPolicy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1FirewallPolicy.class);
                res.googleCloudRecaptchaenterpriseV1FirewallPolicy = out;
            }
        }

        return res;
    }

    /**
     * Returns the list of all firewall policies that belong to a project.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesListResponse recaptchaenterpriseProjectsFirewallpoliciesList(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesListPathParams.class, baseUrl, "/v1/{parent}/firewallpolicies", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesListResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsFirewallpoliciesListResponse() {{
            googleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse.class);
                res.googleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a new reCAPTCHA Enterprise key.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysCreateResponse recaptchaenterpriseProjectsKeysCreate(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysCreateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysCreatePathParams.class, baseUrl, "/v1/{parent}/keys", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysCreateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysCreateResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysCreateResponse() {{
            googleCloudRecaptchaenterpriseV1Key = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Key out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Key.class);
                res.googleCloudRecaptchaenterpriseV1Key = out;
            }
        }

        return res;
    }

    /**
     * Deletes the specified key.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysDeleteResponse recaptchaenterpriseProjectsKeysDelete(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysDeleteRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysDeletePathParams.class, baseUrl, "/v1/{name}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysDeleteQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysDeleteResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysDeleteResponse() {{
            googleProtobufEmpty = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Get some aggregated metrics for a Key. This data can be used to build dashboards.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysGetMetricsResponse recaptchaenterpriseProjectsKeysGetMetrics(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysGetMetricsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysGetMetricsPathParams.class, baseUrl, "/v1/{name}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysGetMetricsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysGetMetricsResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysGetMetricsResponse() {{
            googleCloudRecaptchaenterpriseV1Metrics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Metrics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Metrics.class);
                res.googleCloudRecaptchaenterpriseV1Metrics = out;
            }
        }

        return res;
    }

    /**
     * Returns the list of all keys that belong to a project.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysListResponse recaptchaenterpriseProjectsKeysList(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysListPathParams.class, baseUrl, "/v1/{parent}/keys", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysListResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysListResponse() {{
            googleCloudRecaptchaenterpriseV1ListKeysResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListKeysResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListKeysResponse.class);
                res.googleCloudRecaptchaenterpriseV1ListKeysResponse = out;
            }
        }

        return res;
    }

    /**
     * Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysMigrateResponse recaptchaenterpriseProjectsKeysMigrate(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysMigrateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysMigratePathParams.class, baseUrl, "/v1/{name}:migrate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysMigrateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysMigrateResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysMigrateResponse() {{
            googleCloudRecaptchaenterpriseV1Key = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Key out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Key.class);
                res.googleCloudRecaptchaenterpriseV1Key = out;
            }
        }

        return res;
    }

    /**
     * Updates the specified key.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysPatchResponse recaptchaenterpriseProjectsKeysPatch(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysPatchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysPatchPathParams.class, baseUrl, "/v1/{name}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysPatchQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysPatchResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysPatchResponse() {{
            googleCloudRecaptchaenterpriseV1Key = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Key out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1Key.class);
                res.googleCloudRecaptchaenterpriseV1Key = out;
            }
        }

        return res;
    }

    /**
     * Returns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse recaptchaenterpriseProjectsKeysRetrieveLegacySecretKey(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyPathParams.class, baseUrl, "/v1/{key}:retrieveLegacySecretKey", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse() {{
            googleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse.class);
                res.googleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse = out;
            }
        }

        return res;
    }

    /**
     * Search group memberships related to a given account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse recaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearch(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchPathParams.class, baseUrl, "/v1/{project}/relatedaccountgroupmemberships:search", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse() {{
            googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse.class);
                res.googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse = out;
            }
        }

        return res;
    }

    /**
     * List groups of related accounts.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse recaptchaenterpriseProjectsRelatedaccountgroupsList(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListPathParams.class, baseUrl, "/v1/{parent}/relatedaccountgroups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse() {{
            googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse.class);
                res.googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse = out;
            }
        }

        return res;
    }

    /**
     * Get memberships in a group of related accounts.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse recaptchaenterpriseProjectsRelatedaccountgroupsMembershipsList(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListPathParams.class, baseUrl, "/v1/{parent}/memberships", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse res = new org.openapis.openapi.models.operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse() {{
            googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse.class);
                res.googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse = out;
            }
        }

        return res;
    }
}