<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class HttpsHealthChecks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified HttpsHealthCheck resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteResponse
     */
	public function computeHttpsHealthChecksDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified HttpsHealthCheck resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetResponse
     */
	public function computeHttpsHealthChecksGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpsHealthCheck = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpsHealthCheck1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a HttpsHealthCheck resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertResponse
     */
	public function computeHttpsHealthChecksInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpsHealthChecks', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "httpsHealthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of HttpsHealthCheck resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListResponse
     */
	public function computeHttpsHealthChecksList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpsHealthChecks', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpsHealthCheckList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpsHealthCheckList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchResponse
     */
	public function computeHttpsHealthChecksPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "httpsHealthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a HttpsHealthCheck resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateResponse
     */
	public function computeHttpsHealthChecksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "httpsHealthCheck1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeHttpsHealthChecksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}