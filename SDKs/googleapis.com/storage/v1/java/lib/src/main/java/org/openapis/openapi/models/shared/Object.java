/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Object - An object.
 */
public class Object {
    /**
     * Access controls on the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acl")
    public ObjectAccessControl[] acl;

    public Object withAcl(ObjectAccessControl[] acl) {
        this.acl = acl;
        return this;
    }
    
    /**
     * The name of the bucket containing this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucket")
    public String bucket;

    public Object withBucket(String bucket) {
        this.bucket = bucket;
        return this;
    }
    
    /**
     * Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheControl")
    public String cacheControl;

    public Object withCacheControl(String cacheControl) {
        this.cacheControl = cacheControl;
        return this;
    }
    
    /**
     * Number of underlying components that make up this object. Components are accumulated by compose operations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("componentCount")
    public Integer componentCount;

    public Object withComponentCount(Integer componentCount) {
        this.componentCount = componentCount;
        return this;
    }
    
    /**
     * Content-Disposition of the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentDisposition")
    public String contentDisposition;

    public Object withContentDisposition(String contentDisposition) {
        this.contentDisposition = contentDisposition;
        return this;
    }
    
    /**
     * Content-Encoding of the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentEncoding")
    public String contentEncoding;

    public Object withContentEncoding(String contentEncoding) {
        this.contentEncoding = contentEncoding;
        return this;
    }
    
    /**
     * Content-Language of the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentLanguage")
    public String contentLanguage;

    public Object withContentLanguage(String contentLanguage) {
        this.contentLanguage = contentLanguage;
        return this;
    }
    
    /**
     * Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentType")
    public String contentType;

    public Object withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crc32c")
    public String crc32c;

    public Object withCrc32c(String crc32c) {
        this.crc32c = crc32c;
        return this;
    }
    
    /**
     * A timestamp in RFC 3339 format specified by the user for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("customTime")
    public OffsetDateTime customTime;

    public Object withCustomTime(OffsetDateTime customTime) {
        this.customTime = customTime;
        return this;
    }
    
    /**
     * Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerEncryption")
    public ObjectCustomerEncryption customerEncryption;

    public Object withCustomerEncryption(ObjectCustomerEncryption customerEncryption) {
        this.customerEncryption = customerEncryption;
        return this;
    }
    
    /**
     * HTTP 1.1 Entity tag for the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Object withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventBasedHold")
    public Boolean eventBasedHold;

    public Object withEventBasedHold(Boolean eventBasedHold) {
        this.eventBasedHold = eventBasedHold;
        return this;
    }
    
    /**
     * The content generation of this object. Used for object versioning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generation")
    public String generation;

    public Object withGeneration(String generation) {
        this.generation = generation;
        return this;
    }
    
    /**
     * The ID of the object, including the bucket name, object name, and generation number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Object withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The kind of item this is. For objects, this is always storage#object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Object withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyName")
    public String kmsKeyName;

    public Object withKmsKeyName(String kmsKeyName) {
        this.kmsKeyName = kmsKeyName;
        return this;
    }
    
    /**
     * MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("md5Hash")
    public String md5Hash;

    public Object withMd5Hash(String md5Hash) {
        this.md5Hash = md5Hash;
        return this;
    }
    
    /**
     * Media download link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaLink")
    public String mediaLink;

    public Object withMediaLink(String mediaLink) {
        this.mediaLink = mediaLink;
        return this;
    }
    
    /**
     * User-provided metadata, in key/value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;

    public Object withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metageneration")
    public String metageneration;

    public Object withMetageneration(String metageneration) {
        this.metageneration = metageneration;
        return this;
    }
    
    /**
     * The name of the object. Required if not specified by URL parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Object withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The owner of the object. This will always be the uploader of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public ObjectOwner owner;

    public Object withOwner(ObjectOwner owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("retentionExpirationTime")
    public OffsetDateTime retentionExpirationTime;

    public Object withRetentionExpirationTime(OffsetDateTime retentionExpirationTime) {
        this.retentionExpirationTime = retentionExpirationTime;
        return this;
    }
    
    /**
     * The link to this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Object withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Content-Length of the data in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public String size;

    public Object withSize(String size) {
        this.size = size;
        return this;
    }
    
    /**
     * Storage class of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageClass")
    public String storageClass;

    public Object withStorageClass(String storageClass) {
        this.storageClass = storageClass;
        return this;
    }
    
    /**
     * Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temporaryHold")
    public Boolean temporaryHold;

    public Object withTemporaryHold(Boolean temporaryHold) {
        this.temporaryHold = temporaryHold;
        return this;
    }
    
    /**
     * The creation time of the object in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeCreated")
    public OffsetDateTime timeCreated;

    public Object withTimeCreated(OffsetDateTime timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }
    
    /**
     * The deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeDeleted")
    public OffsetDateTime timeDeleted;

    public Object withTimeDeleted(OffsetDateTime timeDeleted) {
        this.timeDeleted = timeDeleted;
        return this;
    }
    
    /**
     * The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeStorageClassUpdated")
    public OffsetDateTime timeStorageClassUpdated;

    public Object withTimeStorageClassUpdated(OffsetDateTime timeStorageClassUpdated) {
        this.timeStorageClassUpdated = timeStorageClassUpdated;
        return this;
    }
    
    /**
     * The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;

    public Object withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
    public Object(){}
}
