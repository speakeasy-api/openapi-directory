/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AssetsCovarianceMatrix {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Covariance Matrix
   *
   * @remarks
   * Compute the covariance matrix of assets from either:
   * * The asset correlation matrix and their volatilities (i.e., standard deviations)
   * * The asset correlation matrix and their variances
   * * The asset returns
   *
   * References
   * * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
   *
   */
  postAssetsCovarianceMatrix(
    req: any,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAssetsCovarianceMatrixResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/assets/covariance/matrix";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAssetsCovarianceMatrixResponse =
        new operations.PostAssetsCovarianceMatrixResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAssetsCovarianceMatrix200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostAssetsCovarianceMatrix200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Covariance Matrix Effective Rank
   *
   * @remarks
   * Compute the effective rank of an asset covariance matrix.
   *
   * References
   * * [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
   *
   */
  postAssetsCovarianceMatrixEffectiveRank(
    req: operations.PostAssetsCovarianceMatrixEffectiveRankRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAssetsCovarianceMatrixEffectiveRankResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAssetsCovarianceMatrixEffectiveRankRequestBody(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/assets/covariance/matrix/effective-rank";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAssetsCovarianceMatrixEffectiveRankResponse =
        new operations.PostAssetsCovarianceMatrixEffectiveRankResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAssetsCovarianceMatrixEffectiveRank200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostAssetsCovarianceMatrixEffectiveRank200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Exponentially Weighted Covariance Matrix
   *
   * @remarks
   * Compute an exponentially weighted covariance matrix of assets returns.
   *
   * References
   * * [RiskMetrics Group. Longerstaey, J. (1996). RiskMetrics technical document, Technical Report fourth edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)
   *
   */
  postAssetsCovarianceMatrixExponentiallyWeighted(
    req: operations.PostAssetsCovarianceMatrixExponentiallyWeightedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostAssetsCovarianceMatrixExponentiallyWeightedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/assets/covariance/matrix/exponentially-weighted";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse =
        new operations.PostAssetsCovarianceMatrixExponentiallyWeightedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Covariance Matrix Validation
   *
   * @remarks
   * Validate whether a matrix is a covariance matrix.
   *
   * References
   * * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
   *
   */
  postAssetsCovarianceMatrixValidation(
    req: operations.PostAssetsCovarianceMatrixValidationRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAssetsCovarianceMatrixValidationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAssetsCovarianceMatrixValidationRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/assets/covariance/matrix/validation";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAssetsCovarianceMatrixValidationResponse =
        new operations.PostAssetsCovarianceMatrixValidationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAssetsCovarianceMatrixValidation200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostAssetsCovarianceMatrixValidation200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
