<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Snapshots 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * copySnapshotToExistingGame
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToExistingGameUsingPOST1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToExistingGameUsingPOST1Response
     */
	public function copySnapshotToExistingGameUsingPOST1(
        \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToExistingGameUsingPOST1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToExistingGameUsingPOST1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy/to/{targetApiKey}', \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToExistingGameUsingPOST1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CopySnapshotToExistingGameUsingPOST1Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToExistingGameUsingPOST1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotCreationSuccessModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SnapshotCreationSuccessModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * copySnapshotToNewGame
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToNewGameUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToNewGameUsingPOSTResponse
     */
	public function copySnapshotToNewGameUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToNewGameUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToNewGameUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy', \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToNewGameUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CopySnapshotToNewGameUsingPOSTRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CopySnapshotToNewGameUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotCreationSuccessModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SnapshotCreationSuccessModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * createSnapshots
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSnapshotsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSnapshotsUsingPOSTResponse
     */
	public function createSnapshotsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\CreateSnapshotsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSnapshotsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots', \OpenAPI\OpenAPI\Models\Operations\CreateSnapshotsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshotCreationModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSnapshotsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SnapshotModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * deleteSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETESnapshotUsingDELETE1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETESnapshotUsingDELETE1Response
     */
	public function deleteSnapshotUsingDELETE1(
        \OpenAPI\OpenAPI\Models\Operations\DELETESnapshotUsingDELETE1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETESnapshotUsingDELETE1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}', \OpenAPI\OpenAPI\Models\Operations\DELETESnapshotUsingDELETE1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETESnapshotUsingDELETE1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getLiveSnapshotId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETLiveSnapshotIdUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETLiveSnapshotIdUsingGETResponse
     */
	public function getLiveSnapshotIdUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETLiveSnapshotIdUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETLiveSnapshotIdUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/liveSnapshotId', \OpenAPI\OpenAPI\Models\Operations\GETLiveSnapshotIdUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETLiveSnapshotIdUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETSnapshotUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETSnapshotUsingGETResponse
     */
	public function getSnapshotUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETSnapshotUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETSnapshotUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}', \OpenAPI\OpenAPI\Models\Operations\GETSnapshotUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETSnapshotUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SnapshotModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getSnapshots
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGETResponse
     */
	public function getSnapshotsUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/page/{page}', \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGETRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SnapshotModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getSnapshots
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGET1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGET1Response
     */
	public function getSnapshotsUsingGET1(
        \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGET1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGET1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots', \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGET1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGET1Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETSnapshotsUsingGET1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshotModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SnapshotModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * publishSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PublishSnapshotUsingPOST1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PublishSnapshotUsingPOST1Response
     */
	public function publishSnapshotUsingPOST1(
        \OpenAPI\OpenAPI\Models\Operations\PublishSnapshotUsingPOST1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PublishSnapshotUsingPOST1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/publish', \OpenAPI\OpenAPI\Models\Operations\PublishSnapshotUsingPOST1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PublishSnapshotUsingPOST1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * revertToSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RevertToSnapshotUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RevertToSnapshotUsingPOSTResponse
     */
	public function revertToSnapshotUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\RevertToSnapshotUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RevertToSnapshotUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/revert/to/{snapshotId}', \OpenAPI\OpenAPI\Models\Operations\RevertToSnapshotUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RevertToSnapshotUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * unpublishSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnpublishSnapshotUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnpublishSnapshotUsingPOSTResponse
     */
	public function unpublishSnapshotUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\UnpublishSnapshotUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnpublishSnapshotUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/unpublish', \OpenAPI\OpenAPI\Models\Operations\UnpublishSnapshotUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnpublishSnapshotUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}