// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ApmclSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ApmclRequestBodyCertificateParameters struct {
	// Document Number
	DocumentNumber string `json:"DocumentNumber"`
}

// ApmclRequestBodyFormatEnum - The format of the certificate in response.
type ApmclRequestBodyFormatEnum string

const (
	ApmclRequestBodyFormatEnumPdf ApmclRequestBodyFormatEnum = "pdf"
)

func (e *ApmclRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = ApmclRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ApmclRequestBodyFormatEnum: %s", s)
	}
}

// ApmclRequestBody - Request format
type ApmclRequestBody struct {
	CertificateParameters *ApmclRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ApmclRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Apmcl504ApplicationJSONErrorEnum string

const (
	Apmcl504ApplicationJSONErrorEnumGatewayTimeout Apmcl504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Apmcl504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Apmcl504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl504ApplicationJSONErrorEnum: %s", s)
	}
}

type Apmcl504ApplicationJSONErrorDescriptionEnum string

const (
	Apmcl504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Apmcl504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Apmcl504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Apmcl504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Apmcl504ApplicationJSON - Gateway timeout
type Apmcl504ApplicationJSON struct {
	Error            *Apmcl504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apmcl504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apmcl503ApplicationJSONErrorEnum string

const (
	Apmcl503ApplicationJSONErrorEnumServiceUnavailable Apmcl503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Apmcl503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Apmcl503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl503ApplicationJSONErrorEnum: %s", s)
	}
}

type Apmcl503ApplicationJSONErrorDescriptionEnum string

const (
	Apmcl503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Apmcl503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Apmcl503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Apmcl503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Apmcl503ApplicationJSON - Service unavailable
type Apmcl503ApplicationJSON struct {
	Error            *Apmcl503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apmcl503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apmcl502ApplicationJSONErrorEnum string

const (
	Apmcl502ApplicationJSONErrorEnumBadGatewy Apmcl502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Apmcl502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Apmcl502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl502ApplicationJSONErrorEnum: %s", s)
	}
}

type Apmcl502ApplicationJSONErrorDescriptionEnum string

const (
	Apmcl502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Apmcl502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Apmcl502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Apmcl502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Apmcl502ApplicationJSON - Bad gateway
type Apmcl502ApplicationJSON struct {
	Error            *Apmcl502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apmcl502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apmcl500ApplicationJSONErrorEnum string

const (
	Apmcl500ApplicationJSONErrorEnumInternalServerError Apmcl500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Apmcl500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Apmcl500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl500ApplicationJSONErrorEnum: %s", s)
	}
}

type Apmcl500ApplicationJSONErrorDescriptionEnum string

const (
	Apmcl500ApplicationJSONErrorDescriptionEnumInternalServerError Apmcl500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Apmcl500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Apmcl500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Apmcl500ApplicationJSON - Internal server error
type Apmcl500ApplicationJSON struct {
	Error            *Apmcl500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apmcl500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apmcl404ApplicationJSONErrorEnum string

const (
	Apmcl404ApplicationJSONErrorEnumRecordNotFound Apmcl404ApplicationJSONErrorEnum = "record_not_found"
	Apmcl404ApplicationJSONErrorEnumURLNotFound    Apmcl404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Apmcl404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Apmcl404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl404ApplicationJSONErrorEnum: %s", s)
	}
}

type Apmcl404ApplicationJSONErrorDescriptionEnum string

const (
	Apmcl404ApplicationJSONErrorDescriptionEnumNoRecordFound               Apmcl404ApplicationJSONErrorDescriptionEnum = "No record found"
	Apmcl404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Apmcl404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Apmcl404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Apmcl404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Apmcl404ApplicationJSON - No record found
type Apmcl404ApplicationJSON struct {
	Error            *Apmcl404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apmcl404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apmcl401ApplicationJSONErrorEnum string

const (
	Apmcl401ApplicationJSONErrorEnumInvalidAuthentication Apmcl401ApplicationJSONErrorEnum = "invalid_authentication"
	Apmcl401ApplicationJSONErrorEnumInvalidAuthorization  Apmcl401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Apmcl401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Apmcl401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl401ApplicationJSONErrorEnum: %s", s)
	}
}

type Apmcl401ApplicationJSONErrorDescriptionEnum string

const (
	Apmcl401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Apmcl401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Apmcl401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Apmcl401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Apmcl401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Apmcl401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Apmcl401ApplicationJSON - Unauthorized access
type Apmcl401ApplicationJSON struct {
	Error            *Apmcl401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apmcl401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Apmcl400ApplicationJSONErrorEnum string

const (
	Apmcl400ApplicationJSONErrorEnumMissingParameter Apmcl400ApplicationJSONErrorEnum = "missing_parameter"
	Apmcl400ApplicationJSONErrorEnumInvalidParameter Apmcl400ApplicationJSONErrorEnum = "invalid_parameter"
	Apmcl400ApplicationJSONErrorEnumInvalidFormat    Apmcl400ApplicationJSONErrorEnum = "invalid_format"
	Apmcl400ApplicationJSONErrorEnumInvalidTxnid     Apmcl400ApplicationJSONErrorEnum = "invalid_txnid"
	Apmcl400ApplicationJSONErrorEnumInvalidConsentid Apmcl400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Apmcl400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Apmcl400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl400ApplicationJSONErrorEnum: %s", s)
	}
}

type Apmcl400ApplicationJSONErrorDescriptionEnum string

const (
	Apmcl400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Apmcl400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Apmcl400ApplicationJSONErrorDescriptionEnumBadRequest                              Apmcl400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Apmcl400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Apmcl400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Apmcl400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Apmcl400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Apmcl400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Apmcl400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Apmcl400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Apmcl400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Apmcl400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Apmcl400ApplicationJSON - Bad request
type Apmcl400ApplicationJSON struct {
	Error            *Apmcl400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Apmcl400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ApmclResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Apmcl400ApplicationJSONObject *Apmcl400ApplicationJSON
	// Unauthorized access
	Apmcl401ApplicationJSONObject *Apmcl401ApplicationJSON
	// No record found
	Apmcl404ApplicationJSONObject *Apmcl404ApplicationJSON
	// Internal server error
	Apmcl500ApplicationJSONObject *Apmcl500ApplicationJSON
	// Bad gateway
	Apmcl502ApplicationJSONObject *Apmcl502ApplicationJSON
	// Service unavailable
	Apmcl503ApplicationJSONObject *Apmcl503ApplicationJSON
	// Gateway timeout
	Apmcl504ApplicationJSONObject *Apmcl504ApplicationJSON
}
