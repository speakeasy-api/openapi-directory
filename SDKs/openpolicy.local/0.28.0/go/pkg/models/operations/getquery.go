// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetQueryQueryParams struct {
	// If set to *full*, response will include query explanations in addition to the result.
	Explain *string `queryParam:"style=form,explode=true,name=explain"`
	// If true, compiler performance metrics will be returned in the response.
	Metrics *bool `queryParam:"style=form,explode=true,name=metrics"`
	// If true, response will be in a human-readable format.
	Pretty *bool `queryParam:"style=form,explode=true,name=pretty"`
	// The [URL-encoded](https://www.w3schools.com/tags/ref_urlencode.ASP) ad-hoc query to execute.
	Q string `queryParam:"style=form,explode=true,name=q"`
}

type GetQueryRequest struct {
	QueryParams GetQueryQueryParams
}

type GetQuery200ApplicationJSONExplanationLocalsKey struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type GetQuery200ApplicationJSONExplanationLocalsValue struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type GetQuery200ApplicationJSONExplanationLocals struct {
	Key   *GetQuery200ApplicationJSONExplanationLocalsKey   `json:"key,omitempty"`
	Value *GetQuery200ApplicationJSONExplanationLocalsValue `json:"value,omitempty"`
}

type GetQuery200ApplicationJSONExplanationNodeTerms struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// GetQuery200ApplicationJSONExplanationNode - The AST element associated with the evaluation step.
// https://godoc.org/github.com/open-policy-agent/opa/ast - AST
type GetQuery200ApplicationJSONExplanationNode struct {
	// Node number
	Index *float64                                         `json:"index,omitempty"`
	Terms []GetQuery200ApplicationJSONExplanationNodeTerms `json:"terms,omitempty"`
}

// GetQuery200ApplicationJSONExplanationOpEnum - The kind of *trace event*
//
// Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points:
// - enter - before a body or rule is evaluated
// - exit - after a body or rule has evaluated successfully
// - eval - before an expression is evaluated
// - fail - after an expression has evaluated to false.
// - redo - before evaluation restarts from a body, rule, or expression.
//
// By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
type GetQuery200ApplicationJSONExplanationOpEnum string

const (
	GetQuery200ApplicationJSONExplanationOpEnumEnter GetQuery200ApplicationJSONExplanationOpEnum = "enter"
	GetQuery200ApplicationJSONExplanationOpEnumExit  GetQuery200ApplicationJSONExplanationOpEnum = "exit"
	GetQuery200ApplicationJSONExplanationOpEnumEval  GetQuery200ApplicationJSONExplanationOpEnum = "eval"
	GetQuery200ApplicationJSONExplanationOpEnumFail  GetQuery200ApplicationJSONExplanationOpEnum = "fail"
	GetQuery200ApplicationJSONExplanationOpEnumRedo  GetQuery200ApplicationJSONExplanationOpEnum = "redo"
)

func (e *GetQuery200ApplicationJSONExplanationOpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enter":
		fallthrough
	case "exit":
		fallthrough
	case "eval":
		fallthrough
	case "fail":
		fallthrough
	case "redo":
		*e = GetQuery200ApplicationJSONExplanationOpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetQuery200ApplicationJSONExplanationOpEnum: %s", s)
	}
}

// GetQuery200ApplicationJSONExplanationTypeEnum - The type of the **node** field
type GetQuery200ApplicationJSONExplanationTypeEnum string

const (
	GetQuery200ApplicationJSONExplanationTypeEnumExpr GetQuery200ApplicationJSONExplanationTypeEnum = "expr"
	GetQuery200ApplicationJSONExplanationTypeEnumRule GetQuery200ApplicationJSONExplanationTypeEnum = "rule"
	GetQuery200ApplicationJSONExplanationTypeEnumBody GetQuery200ApplicationJSONExplanationTypeEnum = "body"
)

func (e *GetQuery200ApplicationJSONExplanationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "expr":
		fallthrough
	case "rule":
		fallthrough
	case "body":
		*e = GetQuery200ApplicationJSONExplanationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetQuery200ApplicationJSONExplanationTypeEnum: %s", s)
	}
}

type GetQuery200ApplicationJSONExplanation struct {
	// The query's term bindings at the point when the trace event was emitted.
	Locals []GetQuery200ApplicationJSONExplanationLocals `json:"locals,omitempty"`
	// The AST element associated with the evaluation step.
	Node *GetQuery200ApplicationJSONExplanationNode `json:"node,omitempty"`
	// The kind of *trace event*
	//
	// Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points:
	// - enter - before a body or rule is evaluated
	// - exit - after a body or rule has evaluated successfully
	// - eval - before an expression is evaluated
	// - fail - after an expression has evaluated to false.
	// - redo - before evaluation restarts from a body, rule, or expression.
	//
	// By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
	Op *GetQuery200ApplicationJSONExplanationOpEnum `json:"op,omitempty"`
	// The parent query. Use this field to identify trace events from related queries.
	//
	// For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query Aâ€™s *query_id*.
	ParentID *float64 `json:"parent_id,omitempty"`
	// The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.
	QueryID *float64 `json:"query_id,omitempty"`
	// The type of the **node** field
	Type *GetQuery200ApplicationJSONExplanationTypeEnum `json:"type,omitempty"`
}

type GetQuery200ApplicationJSONMetrics struct {
	// *Description is forthcoming*
	CounterServerQueryCacheHit *float64 `json:"counter_server_query_cache_hit,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageBuildComprehensionIndexNs *float64 `json:"timer_query_compile_stage_build_comprehension_index_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckSafetyNs *float64 `json:"timer_query_compile_stage_check_safety_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckTypesNs *float64 `json:"timer_query_compile_stage_check_types_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckUndefinedFuncsNs *float64 `json:"timer_query_compile_stage_check_undefined_funcs_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageCheckUnsafeBuiltinsNs *float64 `json:"timer_query_compile_stage_check_unsafe_builtins_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageResolveRefsNs *float64 `json:"timer_query_compile_stage_resolve_refs_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteComprehensionTermsNs *float64 `json:"timer_query_compile_stage_rewrite_comprehension_terms_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteDynamicTermsNs *float64 `json:"timer_query_compile_stage_rewrite_dynamic_terms_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteExprTermsNs *float64 `json:"timer_query_compile_stage_rewrite_expr_terms_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteLocalVarsNs *float64 `json:"timer_query_compile_stage_rewrite_local_vars_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteToCaptureValueNs *float64 `json:"timer_query_compile_stage_rewrite_to_capture_value_ns,omitempty"`
	// (Only returned if `instrument` is true.) *Description is forthcoming*
	TimerQueryCompileStageRewriteWithValuesNs *float64 `json:"timer_query_compile_stage_rewrite_with_values_ns,omitempty"`
	// Time taken (in nanonseconds) to parse the input
	TimerRegoInputParseNs *float64 `json:"timer_rego_input_parse_ns,omitempty"`
	// Time taken (in nanonseconds) to compile the loaded policy modules
	TimerRegoModuleCompileNs *float64 `json:"timer_rego_module_compile_ns,omitempty"`
	// Time taken (in nanoseconds) to parse the input policy module
	TimerRegoModuleParseNs *float64 `json:"timer_rego_module_parse_ns,omitempty"`
	// Time taken (in nanoseconds) to compile the query
	TimerRegoQueryCompileNs *float64 `json:"timer_rego_query_compile_ns,omitempty"`
	// Time taken (in nanonseconds) to evaluate the query
	TimerRegoQueryEvalNs *float64 `json:"timer_rego_query_eval_ns,omitempty"`
	// Time taken (in nanoseconds) to parse the query
	TimerRegoQueryParseNs *float64 `json:"timer_rego_query_parse_ns,omitempty"`
	// Time taken (in nanoseconds) to handle the API request
	TimerServerHandlerNs *float64 `json:"timer_server_handler_ns,omitempty"`
	// *Description is forthcoming*
	TimerServerReadBytesNs *float64 `json:"timer_server_read_bytes_ns,omitempty"`
}

// GetQuery200ApplicationJSONResultAstPackagePathTypeEnum - The type of the path operation
type GetQuery200ApplicationJSONResultAstPackagePathTypeEnum string

const (
	GetQuery200ApplicationJSONResultAstPackagePathTypeEnumImport  GetQuery200ApplicationJSONResultAstPackagePathTypeEnum = "import"
	GetQuery200ApplicationJSONResultAstPackagePathTypeEnumPackage GetQuery200ApplicationJSONResultAstPackagePathTypeEnum = "package"
)

func (e *GetQuery200ApplicationJSONResultAstPackagePathTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "import":
		fallthrough
	case "package":
		*e = GetQuery200ApplicationJSONResultAstPackagePathTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetQuery200ApplicationJSONResultAstPackagePathTypeEnum: %s", s)
	}
}

type GetQuery200ApplicationJSONResultAstPackagePath struct {
	// The type of the path operation
	Type *GetQuery200ApplicationJSONResultAstPackagePathTypeEnum `json:"type,omitempty"`
	// The path variable
	Value *string `json:"value,omitempty"`
}

type GetQuery200ApplicationJSONResultAstPackage struct {
	// The path to the package
	Path []GetQuery200ApplicationJSONResultAstPackagePath `json:"path,omitempty"`
}

type GetQuery200ApplicationJSONResultAstRulesBodyTermsValue struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type GetQuery200ApplicationJSONResultAstRulesBodyTerms struct {
	// The type of the term variable
	Type *string `json:"type,omitempty"`
	// The list of types and values for the term variable
	Value []GetQuery200ApplicationJSONResultAstRulesBodyTermsValue `json:"value,omitempty"`
}

type GetQuery200ApplicationJSONResultAstRulesBody struct {
	// The location of this term in the list (starts at 0)
	Index *float64 `json:"index,omitempty"`
	// The type/value pairing for this term
	Terms []GetQuery200ApplicationJSONResultAstRulesBodyTerms `json:"terms,omitempty"`
}

// GetQuery200ApplicationJSONResultAstRulesHeadKey - The type/value pairing for this rule's head
type GetQuery200ApplicationJSONResultAstRulesHeadKey struct {
	// The type of the head
	Type *string `json:"type,omitempty"`
	// The value of the head
	Value *string `json:"value,omitempty"`
}

type GetQuery200ApplicationJSONResultAstRulesHead struct {
	// The type/value pairing for this rule's head
	Key *GetQuery200ApplicationJSONResultAstRulesHeadKey `json:"key,omitempty"`
	// The head of the rule
	Name *string `json:"name,omitempty"`
}

type GetQuery200ApplicationJSONResultAstRules struct {
	// A list of the terms in this rule
	Body []GetQuery200ApplicationJSONResultAstRulesBody `json:"body,omitempty"`
	Head *GetQuery200ApplicationJSONResultAstRulesHead  `json:"head,omitempty"`
}

// GetQuery200ApplicationJSONResultAst - The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
// https://godoc.org/github.com/open-policy-agent/opa/ast - AST
type GetQuery200ApplicationJSONResultAst struct {
	Package *GetQuery200ApplicationJSONResultAstPackage `json:"package,omitempty"`
	// When OPA evaluates a rule, it generates the content of a [virtual documents](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)
	Rules []GetQuery200ApplicationJSONResultAstRules `json:"rules,omitempty"`
}

type GetQuery200ApplicationJSONResult struct {
	// The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
	Ast *GetQuery200ApplicationJSONResultAst `json:"ast,omitempty"`
	// The name of a policy module
	ID *string `json:"id,omitempty"`
	// A string representation of the full Rego policy
	Raw *string `json:"raw,omitempty"`
}

// GetQuery200ApplicationJSON - Success
type GetQuery200ApplicationJSON struct {
	Explanation []GetQuery200ApplicationJSONExplanation `json:"explanation,omitempty"`
	Metrics     *GetQuery200ApplicationJSONMetrics      `json:"metrics,omitempty"`
	Result      []GetQuery200ApplicationJSONResult      `json:"result,omitempty"`
}

type GetQueryResponse struct {
	// Bad request
	FourHundred *shared.FourHundred
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetQuery200ApplicationJSONObject *GetQuery200ApplicationJSON
}
