"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import buildstatusconfig as shared_buildstatusconfig
from ..shared import gitsubmodulesconfig as shared_gitsubmodulesconfig
from ..shared import sourceauth as shared_sourceauth
from ..shared import sourcetype_enum as shared_sourcetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectSource:
    r"""Information about the build input source code for the build project."""
    
    type: shared_sourcetype_enum.SourceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    auth: Optional[shared_sourceauth.SourceAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth'), 'exclude': lambda f: f is None }})  
    buildspec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildspec'), 'exclude': lambda f: f is None }})  
    build_status_config: Optional[shared_buildstatusconfig.BuildStatusConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildStatusConfig'), 'exclude': lambda f: f is None }})  
    git_clone_depth: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gitCloneDepth'), 'exclude': lambda f: f is None }})  
    git_submodules_config: Optional[shared_gitsubmodulesconfig.GitSubmodulesConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gitSubmodulesConfig'), 'exclude': lambda f: f is None }})  
    insecure_ssl: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insecureSsl'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    report_build_status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportBuildStatus'), 'exclude': lambda f: f is None }})  
    source_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceIdentifier'), 'exclude': lambda f: f is None }})  
    