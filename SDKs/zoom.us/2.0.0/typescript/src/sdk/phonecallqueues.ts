/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PhoneCallQueues {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add members to a call queue
   *
   * @remarks
   * Add phone users and/or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) as members to a specific Call Queue.<br><br>
   * **Prerequisites:**<br>
   * * Pro or higher account plan.
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   */
  addMembersToCallQueue(
    req: operations.AddMembersToCallQueueRequest,
    security: operations.AddMembersToCallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddMembersToCallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddMembersToCallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/members",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddMembersToCallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddMembersToCallQueueResponse =
        new operations.AddMembersToCallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addMembersToCallQueue201ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Assign numbers to a call queue
   *
   * @remarks
   * After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br><br>
   * **Prerequisites:**<br>
   * * Pro or higher account plan.
   * * Account owner or admin permissions
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  assignPhoneToCallQueue(
    req: operations.AssignPhoneToCallQueueRequest,
    security: operations.AssignPhoneToCallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssignPhoneToCallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AssignPhoneToCallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/phone_numbers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AssignPhoneToCallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssignPhoneToCallQueueResponse =
        new operations.AssignPhoneToCallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assignPhoneToCallQueue204ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change call queue manager
   *
   * @remarks
   * A call queue manager has the privileges to maanage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.<br><br> Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c).
   * **Prerequisites:**<br>
   * * Pro or higher account plan.
   * * Account owner or admin permissions
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  changeCallQueueManager(
    req: operations.ChangeCallQueueManagerRequest,
    security: operations.ChangeCallQueueManagerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChangeCallQueueManagerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChangeCallQueueManagerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/manager",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChangeCallQueueManagerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChangeCallQueueManagerResponse =
        new operations.ChangeCallQueueManagerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.changeCallQueueManager204ApplicationJSONAny = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a call queue
   *
   * @remarks
   * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to [create a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413).<br> You can add phone users or common area phones to call queues.
   *
   * **Prerequisites:**<br>
   * * Pro, Business, or Education account
   * * Account owner or admin permissions
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   */
  createCallQueue(
    req: operations.CreateCallQueueApplicationJSON,
    security: operations.CreateCallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateCallQueueApplicationJSON(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/phone/call_queues";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCallQueueResponse =
        new operations.CreateCallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createCallQueue201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateCallQueue201ApplicationJSON
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a call queue
   *
   * @remarks
   * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to delete a Call Queue.<br>
   * **Prerequisites:**<br>
   * * Pro, Business, or Education account
   * * Account owner or admin permissions
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  deleteACallQueue(
    req: operations.DeleteACallQueueRequest,
    security: operations.DeleteACallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteACallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteACallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteACallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteACallQueueResponse =
        new operations.DeleteACallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteACallQueue204ApplicationJSONAny = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Get call queue details
   *
   * @remarks
   * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to get information on a specific Call Queue.<br><br>
   * **Prerequisites:**<br>
   * * Pro, Business, or Education account
   * * Account owner or admin permissions
   * * Zoom Phone license<br>
   * **Scopes:** `phone:read:admin`<br>
   *
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   */
  getACallQueue(
    req: operations.GetACallQueueRequest,
    security: operations.GetACallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetACallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetACallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetACallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetACallQueueResponse =
        new operations.GetACallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getACallQueue200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetACallQueue200ApplicationJSON
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Get call queue recordings
   *
   * @remarks
   * Use this API to view [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091#h_cbc9f2a3-e06c-4daa-83d4-ddbceef9c77b) from the call queue.<br><br>
   * **Prerequisites:**<br>
   * * Pro or higher account with Zoom Phone license.
   * * [Automatic call recordings](https://support.zoom.us/hc/en-us/articles/360033511872#h_fcb297bb-14e8-4094-91ca-dc61e1a18734) must be enabled in the Policy Settings for call queues. <br> **Scope:** `phone:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   *
   *
   *
   *
   */
  getCallQueueRecordings(
    req: operations.GetCallQueueRecordingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCallQueueRecordingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCallQueueRecordingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/recordings",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCallQueueRecordingsResponse =
        new operations.GetCallQueueRecordingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCallQueueRecordings200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCallQueueRecordings200ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * List call queues
   *
   * @remarks
   * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to list Call queues.<br><br>
   * **Prerequisites:**<br>
   * * Pro, Business, or Education account
   * * Account owner or admin permissions
   * * Zoom Phone license<br>
   * **Scopes:** `phone:read:admin`<br>
   *
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   *
   */
  listCallQueues(
    req: operations.ListCallQueuesRequest,
    security: operations.ListCallQueuesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCallQueuesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCallQueuesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/phone/call_queues";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCallQueuesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCallQueuesResponse =
        new operations.ListCallQueuesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCallQueues200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListCallQueues200ApplicationJSON
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unassign a phone number
   *
   * @remarks
   * After assigning a phone number, you can unbind it if you don't want it to be assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues). Use this API to unbind a phone number from a Call Queue. After successful unbinding, the number will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br><br>
   * **Prerequisites:**
   * * Pro or higher account palan
   * * Account owner or admin permissions
   * * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  unAssignPhoneNumCallQueue(
    req: operations.UnAssignPhoneNumCallQueueRequest,
    security: operations.UnAssignPhoneNumCallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UnAssignPhoneNumCallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnAssignPhoneNumCallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/phone_numbers/{phoneNumberId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnAssignPhoneNumCallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnAssignPhoneNumCallQueueResponse =
        new operations.UnAssignPhoneNumCallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unAssignPhoneNumCallQueue204ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Unassign all phone numbers
   *
   * @remarks
   * Use this API to unbind all phone numbers that are assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues) After successful unbinding, the numbers will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br> If you only need to unassign a specific phone number, use the Unassign a Phone Number API instead. <br>
   * **Prerequisites:**
   * * Pro or higher account palan
   * * Account owner or admin permissions
   * * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  unassignAPhoneNumCallQueue(
    req: operations.UnassignAPhoneNumCallQueueRequest,
    security: operations.UnassignAPhoneNumCallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UnassignAPhoneNumCallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnassignAPhoneNumCallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/phone_numbers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnassignAPhoneNumCallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnassignAPhoneNumCallQueueResponse =
        new operations.UnassignAPhoneNumCallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unassignAPhoneNumCallQueue204ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Unassign all members
   *
   * @remarks
   * Use this API to remove all members from a Call Queue who were previously assigned to that Call Queue. The members could be phone users or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).
   * **Prerequisites:**<br>
   * * Pro or higher account plan.
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   */
  unassignAllMembers(
    req: operations.UnassignAllMembersRequest,
    security: operations.UnassignAllMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UnassignAllMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnassignAllMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/members",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnassignAllMembersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnassignAllMembersResponse =
        new operations.UnassignAllMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unassignAllMembers204ApplicationJSONAny = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Unassign a member
   *
   * @remarks
   * Use this API to remove a member from a Call Queue who was previously added to that Call Queue. The member could be a phone user or a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones). A member who is a Call Queue Manager cannot be unassigned from the Call Queue using this API.
   * **Prerequisites:**<br>
   * * Pro or higher account plan.
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  unassignMemberFromCallQueue(
    req: operations.UnassignMemberFromCallQueueRequest,
    security: operations.UnassignMemberFromCallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UnassignMemberFromCallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnassignMemberFromCallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}/members/{memberId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnassignMemberFromCallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnassignMemberFromCallQueueResponse =
        new operations.UnassignMemberFromCallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unassignMemberFromCallQueue204ApplicationJSONAny =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update call queue details
   *
   * @remarks
   * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to update information of a specific Call Queue.<br>
   * **Prerequisites:**<br>
   * * Pro, Business, or Education account
   * * Account owner or admin permissions
   * * Zoom Phone license<br>
   * **Scopes:** `phone:write:admin`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   */
  updateCallQueue(
    req: operations.UpdateCallQueueRequest,
    security: operations.UpdateCallQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCallQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCallQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/phone/call_queues/{callQueueId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateCallQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCallQueueResponse =
        new operations.UpdateCallQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateCallQueue204ApplicationJSONAny = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
