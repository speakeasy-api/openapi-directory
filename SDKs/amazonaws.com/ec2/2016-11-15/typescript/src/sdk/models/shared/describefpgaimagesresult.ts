/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Information about the PCI bus.
 */
export class DescribeFpgaImagesResultFpgaImagesPciId extends SpeakeasyBase {
  @SpeakeasyMetadata()
  deviceId?: string;

  @SpeakeasyMetadata()
  subsystemId?: string;

  @SpeakeasyMetadata()
  subsystemVendorId?: string;

  @SpeakeasyMetadata()
  vendorId?: string;
}

/**
 * The type of product code.
 */
export enum DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum {
  Devpay = "devpay",
  Marketplace = "marketplace",
}

/**
 * Describes a product code.
 */
export class DescribeFpgaImagesResultFpgaImagesProductCodes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  productCodeId?: string;

  @SpeakeasyMetadata()
  productCodeType?: DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum;
}

/**
 * <p>The state. The following are the possible values:</p> <ul> <li> <p> <code>pending</code> - AFI bitstream generation is in progress.</p> </li> <li> <p> <code>available</code> - The AFI is available for use.</p> </li> <li> <p> <code>failed</code> - AFI bitstream generation failed.</p> </li> <li> <p> <code>unavailable</code> - The AFI is no longer available for use.</p> </li> </ul>
 */
export enum DescribeFpgaImagesResultFpgaImagesStateCodeEnum {
  Pending = "pending",
  Failed = "failed",
  Available = "available",
  Unavailable = "unavailable",
}

/**
 * Information about the state of the AFI.
 */
export class DescribeFpgaImagesResultFpgaImagesState extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: DescribeFpgaImagesResultFpgaImagesStateCodeEnum;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * Describes a tag.
 */
export class DescribeFpgaImagesResultFpgaImagesTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes an Amazon FPGA image (AFI).
 */
export class DescribeFpgaImagesResultFpgaImages extends SpeakeasyBase {
  @SpeakeasyMetadata()
  createTime?: Date;

  @SpeakeasyMetadata()
  dataRetentionSupport?: boolean;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  fpgaImageGlobalId?: string;

  @SpeakeasyMetadata()
  fpgaImageId?: string;

  @SpeakeasyMetadata()
  instanceTypes?: string[];

  @SpeakeasyMetadata()
  name?: string;

  @SpeakeasyMetadata()
  ownerAlias?: string;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  pciId?: DescribeFpgaImagesResultFpgaImagesPciId;

  @SpeakeasyMetadata({
    elemType: DescribeFpgaImagesResultFpgaImagesProductCodes,
  })
  productCodes?: DescribeFpgaImagesResultFpgaImagesProductCodes[];

  @SpeakeasyMetadata()
  public?: boolean;

  @SpeakeasyMetadata()
  shellVersion?: string;

  @SpeakeasyMetadata()
  state?: DescribeFpgaImagesResultFpgaImagesState;

  @SpeakeasyMetadata({ elemType: DescribeFpgaImagesResultFpgaImagesTags })
  tags?: DescribeFpgaImagesResultFpgaImagesTags[];

  @SpeakeasyMetadata()
  updateTime?: Date;
}

/**
 * Success
 */
export class DescribeFpgaImagesResult extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: DescribeFpgaImagesResultFpgaImages })
  fpgaImages?: DescribeFpgaImagesResultFpgaImages[];

  @SpeakeasyMetadata()
  nextToken?: string;
}
