// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateTokenHeaders struct {
	// A custom identifier for tracing the API call. If you set a value for this header, Zuora returns the same value in the response headers. This header enables you to associate your system process identifiers with Zuora API calls, to assist with troubleshooting in the event of an issue.
	//
	// The value of this field must use the US-ASCII character set and must not include any of the following characters: colon (`:`), semicolon (`;`), double quote (`"`), and quote (`'`).
	//
	ZuoraTrackID *string `header:"style=simple,explode=false,name=Zuora-Track-Id"`
}

// CreateTokenRequestBodyGrantTypeEnum - The OAuth grant type that will be used to generate the token. The value of this parameter must be `client_credentials`.
type CreateTokenRequestBodyGrantTypeEnum string

const (
	CreateTokenRequestBodyGrantTypeEnumClientCredentials CreateTokenRequestBodyGrantTypeEnum = "client_credentials"
)

func (e *CreateTokenRequestBodyGrantTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "client_credentials":
		*e = CreateTokenRequestBodyGrantTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestBodyGrantTypeEnum: %s", s)
	}
}

type CreateTokenRequestBody struct {
	// The Client ID of the OAuth client.
	//
	ClientID string `form:"name=client_id"`
	// The Client Secret that was displayed when the OAuth client was created.
	//
	ClientSecret string `form:"name=client_secret"`
	// The OAuth grant type that will be used to generate the token. The value of this parameter must be `client_credentials`.
	//
	GrantType CreateTokenRequestBodyGrantTypeEnum `form:"name=grant_type"`
}

type CreateTokenRequest struct {
	Headers CreateTokenHeaders
	Request CreateTokenRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
}

type CreateTokenResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TokenResponse *shared.TokenResponse
}
