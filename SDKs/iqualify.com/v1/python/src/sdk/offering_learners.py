"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class OfferingLearners:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_offerings_offering_id_users_marker_email_marks(self, request: operations.DeleteOfferingsOfferingIDUsersMarkerEmailMarksRequest) -> operations.DeleteOfferingsOfferingIDUsersMarkerEmailMarksResponse:
        r"""Remove learners from coach's marking list
        Removes an array of learners from coach's marking list.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOfferingsOfferingIDUsersMarkerEmailMarksRequest, base_url, '/offerings/{offeringId}/users/{markerEmail}/marks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOfferingsOfferingIDUsersMarkerEmailMarksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingUser]])
                res.offering_users = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_offerings_offering_id_users_user_email_(self, request: operations.DeleteOfferingsOfferingIDUsersUserEmailRequest) -> operations.DeleteOfferingsOfferingIDUsersUserEmailResponse:
        r"""Removes user from the offering
        Removes a user from the offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOfferingsOfferingIDUsersUserEmailRequest, base_url, '/offerings/{offeringId}/users/{userEmail}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOfferingsOfferingIDUsersUserEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_users(self, request: operations.GetOfferingsOfferingIDUsersRequest) -> operations.GetOfferingsOfferingIDUsersResponse:
        r"""Find offering's users
        Responds with a list of users in the offering (facilitators, learners and markers.).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDUsersRequest, base_url, '/offerings/{offeringId}/users', request)
        
        query_params = utils.get_query_params(operations.GetOfferingsOfferingIDUsersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingUserResponse]])
                res.offering_user_responses = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_users_marker_email_marks(self, request: operations.GetOfferingsOfferingIDUsersMarkerEmailMarksRequest) -> operations.GetOfferingsOfferingIDUsersMarkerEmailMarksResponse:
        r"""Find Learners marked by a coach
        Responds with all learners marked by the specified coach.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDUsersMarkerEmailMarksRequest, base_url, '/offerings/{offeringId}/users/{markerEmail}/marks', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDUsersMarkerEmailMarksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingUser]])
                res.offering_users = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_users_user_email_transfer(self, request: operations.PatchUsersUserEmailTransferRequest) -> operations.PatchUsersUserEmailTransferResponse:
        r"""Transfer a user between offerings
        Moves the user's access and progress from one offering to another.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchUsersUserEmailTransferRequest, base_url, '/users/{userEmail}/transfer', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "transfer_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchUsersUserEmailTransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_offerings_offering_id_users(self, request: operations.PostOfferingsOfferingIDUsersRequest) -> operations.PostOfferingsOfferingIDUsersResponse:
        r"""Adds user to the offering
        Adds one or more users to the offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOfferingsOfferingIDUsersRequest, base_url, '/offerings/{offeringId}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOfferingsOfferingIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingUserAddResponse]])
                res.offering_user_add_responses = out
        elif http_res.status_code == 207:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.post_offerings_offering_id_users_207_application_json_oneoves = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_offerings_offering_id_users_marker_email_marks(self, request: operations.PostOfferingsOfferingIDUsersMarkerEmailMarksRequest) -> operations.PostOfferingsOfferingIDUsersMarkerEmailMarksResponse:
        r"""Add learners to be marked by a coach
        Adds an array of learners to be marked by the specified coach.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOfferingsOfferingIDUsersMarkerEmailMarksRequest, base_url, '/offerings/{offeringId}/users/{markerEmail}/marks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOfferingsOfferingIDUsersMarkerEmailMarksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OfferingUser]])
                res.offering_users = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    