<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GooglePrivacyDlpV2FieldTransformation - The transformation to apply to the field.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GooglePrivacyDlpV2FieldTransformation
{
    /**
     * A condition for determining whether a transformation should be applied to a field.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2RecordCondition $condition
     */
	#[\JMS\Serializer\Annotation\SerializedName('condition')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2RecordCondition')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GooglePrivacyDlpV2RecordCondition $condition = null;
    
    /**
     * Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2FieldId> $fields
     */
	#[\JMS\Serializer\Annotation\SerializedName('fields')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2FieldId>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $fields = null;
    
    /**
     * A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2InfoTypeTransformations $infoTypeTransformations
     */
	#[\JMS\Serializer\Annotation\SerializedName('infoTypeTransformations')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2InfoTypeTransformations')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GooglePrivacyDlpV2InfoTypeTransformations $infoTypeTransformations = null;
    
    /**
     * A rule for transforming a value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2PrimitiveTransformation $primitiveTransformation
     */
	#[\JMS\Serializer\Annotation\SerializedName('primitiveTransformation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GooglePrivacyDlpV2PrimitiveTransformation')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GooglePrivacyDlpV2PrimitiveTransformation $primitiveTransformation = null;
    
	public function __construct()
	{
		$this->condition = null;
		$this->fields = null;
		$this->infoTypeTransformations = null;
		$this->primitiveTransformation = null;
	}
}
