<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Call 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * /v0.1/BulkCall/
     * 
     * Initiates multiple concurrent outbound calls
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BulkCallParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01BulkCallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01BulkCallResponse
     */
	public function postV01BulkCall(
        \OpenAPI\OpenAPI\Models\Shared\BulkCallParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01BulkCallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01BulkCallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/BulkCall/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01BulkCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkCallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkCallResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/Call/
     * 
     * Initiates an outbound call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CallParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01CallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01CallResponse
     */
	public function postV01Call(
        \OpenAPI\OpenAPI\Models\Shared\CallParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01CallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01CallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/Call/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01CallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/CancelScheduledHangup/
     * 
     * Cancels a scheduled hangup for a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CancelScheduledHangupParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledHangupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledHangupResponse
     */
	public function postV01CancelScheduledHangup(
        \OpenAPI\OpenAPI\Models\Shared\CancelScheduledHangupParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledHangupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledHangupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/CancelScheduledHangup/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledHangupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelScheduledHangupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelScheduledHangupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/CancelScheduledPlay/
     * 
     * Cancels a scheduled playback request
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CancelScheduledPlayParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledPlaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledPlayResponse
     */
	public function postV01CancelScheduledPlay(
        \OpenAPI\OpenAPI\Models\Shared\CancelScheduledPlayParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledPlaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledPlayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/CancelScheduledPlay/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01CancelScheduledPlayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelScheduledPlayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelScheduledPlayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/GroupCall/
     * 
     * Initiate multiple racing outbound calls
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\GroupCallParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01GroupCallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01GroupCallResponse
     */
	public function postV01GroupCall(
        \OpenAPI\OpenAPI\Models\Shared\GroupCallParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01GroupCallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01GroupCallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/GroupCall/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01GroupCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupCallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupCallResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/HangupAllCalls/
     * 
     * Hangs up all established calls
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01HangupAllCallsResponse
     */
	public function postV01HangupAllCalls(
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01HangupAllCallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/HangupAllCalls/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01HangupAllCallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hangupAllCallsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HangupAllCallsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/HangupCall/
     * 
     * Hangs up a specific call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\HangupCallParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01HangupCallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01HangupCallResponse
     */
	public function postV01HangupCall(
        \OpenAPI\OpenAPI\Models\Shared\HangupCallParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01HangupCallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01HangupCallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/HangupCall/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01HangupCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hangupCallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HangupCallResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/Play/
     * 
     * Plays media into a live call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PlayParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01PlaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01PlayResponse
     */
	public function postV01Play(
        \OpenAPI\OpenAPI\Models\Shared\PlayParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01PlaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01PlayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/Play/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01PlayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/PlayStop/
     * 
     * Interrupts media playback on a given call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PlayStopParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01PlayStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01PlayStopResponse
     */
	public function postV01PlayStop(
        \OpenAPI\OpenAPI\Models\Shared\PlayStopParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01PlayStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01PlayStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/PlayStop/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01PlayStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playStopResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayStopResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/RecordStart/
     * 
     * Initiates recording of a given call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RecordStartParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStartResponse
     */
	public function postV01RecordStart(
        \OpenAPI\OpenAPI\Models\Shared\RecordStartParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/RecordStart/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recordStartResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RecordStartResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/RecordStop/
     * 
     * Stops the recording of a given call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RecordStopParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStopResponse
     */
	public function postV01RecordStop(
        \OpenAPI\OpenAPI\Models\Shared\RecordStopParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/RecordStop/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01RecordStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recordStopResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RecordStopResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ScheduleHangup/
     * 
     * Schedules a hangup for a specific call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ScheduleHangupParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ScheduleHangupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ScheduleHangupResponse
     */
	public function postV01ScheduleHangup(
        \OpenAPI\OpenAPI\Models\Shared\ScheduleHangupParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ScheduleHangupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ScheduleHangupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ScheduleHangup/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ScheduleHangupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduleHangupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScheduleHangupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/SchedulePlay/
     * 
     * Schedules media playback for a specific call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SchedulePlayParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01SchedulePlaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01SchedulePlayResponse
     */
	public function postV01SchedulePlay(
        \OpenAPI\OpenAPI\Models\Shared\SchedulePlayParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01SchedulePlaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01SchedulePlayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/SchedulePlay/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01SchedulePlayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schedulePlayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SchedulePlayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/SendDigits/
     * 
     * Emits DMTF tones to a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SendDigitsParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01SendDigitsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01SendDigitsResponse
     */
	public function postV01SendDigits(
        \OpenAPI\OpenAPI\Models\Shared\SendDigitsParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01SendDigitsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01SendDigitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/SendDigits/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01SendDigitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendDigitsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SendDigitsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/SoundTouch/
     * 
     * Applies SoundTouch effects to a live call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SoundTouchParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchResponse
     */
	public function postV01SoundTouch(
        \OpenAPI\OpenAPI\Models\Shared\SoundTouchParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/SoundTouch/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->soundTouchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SoundTouchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/SoundTouchStop/
     * 
     * Removes SoundTouch effects from a given call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SoundTouchStopParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchStopResponse
     */
	public function postV01SoundTouchStop(
        \OpenAPI\OpenAPI\Models\Shared\SoundTouchStopParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/SoundTouchStop/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01SoundTouchStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->soundTouchStopResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SoundTouchStopResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/TransferCall/
     * 
     * Replaces the RestXML flow of a live call
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TransferCallParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01TransferCallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01TransferCallResponse
     */
	public function postV01TransferCall(
        \OpenAPI\OpenAPI\Models\Shared\TransferCallParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01TransferCallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01TransferCallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/TransferCall/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01TransferCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferCallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransferCallResponse', 'json');
            }
        }

        return $response;
    }
}