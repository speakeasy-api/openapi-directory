"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KioskCustomization = exports.KioskCustomizationSystemNavigationEnum = exports.KioskCustomizationSystemErrorWarningsEnum = exports.KioskCustomizationStatusBarEnum = exports.KioskCustomizationPowerButtonActionsEnum = exports.KioskCustomizationDeviceSettingsEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies whether the Settings app is allowed in kiosk mode.
 */
var KioskCustomizationDeviceSettingsEnum;
(function (KioskCustomizationDeviceSettingsEnum) {
    KioskCustomizationDeviceSettingsEnum["DeviceSettingsUnspecified"] = "DEVICE_SETTINGS_UNSPECIFIED";
    KioskCustomizationDeviceSettingsEnum["SettingsAccessAllowed"] = "SETTINGS_ACCESS_ALLOWED";
    KioskCustomizationDeviceSettingsEnum["SettingsAccessBlocked"] = "SETTINGS_ACCESS_BLOCKED";
})(KioskCustomizationDeviceSettingsEnum = exports.KioskCustomizationDeviceSettingsEnum || (exports.KioskCustomizationDeviceSettingsEnum = {}));
/**
 * Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button.
 */
var KioskCustomizationPowerButtonActionsEnum;
(function (KioskCustomizationPowerButtonActionsEnum) {
    KioskCustomizationPowerButtonActionsEnum["PowerButtonActionsUnspecified"] = "POWER_BUTTON_ACTIONS_UNSPECIFIED";
    KioskCustomizationPowerButtonActionsEnum["PowerButtonAvailable"] = "POWER_BUTTON_AVAILABLE";
    KioskCustomizationPowerButtonActionsEnum["PowerButtonBlocked"] = "POWER_BUTTON_BLOCKED";
})(KioskCustomizationPowerButtonActionsEnum = exports.KioskCustomizationPowerButtonActionsEnum || (exports.KioskCustomizationPowerButtonActionsEnum = {}));
/**
 * Specifies whether system info and notifications are disabled in kiosk mode.
 */
var KioskCustomizationStatusBarEnum;
(function (KioskCustomizationStatusBarEnum) {
    KioskCustomizationStatusBarEnum["StatusBarUnspecified"] = "STATUS_BAR_UNSPECIFIED";
    KioskCustomizationStatusBarEnum["NotificationsAndSystemInfoEnabled"] = "NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED";
    KioskCustomizationStatusBarEnum["NotificationsAndSystemInfoDisabled"] = "NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED";
    KioskCustomizationStatusBarEnum["SystemInfoOnly"] = "SYSTEM_INFO_ONLY";
})(KioskCustomizationStatusBarEnum = exports.KioskCustomizationStatusBarEnum || (exports.KioskCustomizationStatusBarEnum = {}));
/**
 * Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the "close app" option on the UI.
 */
var KioskCustomizationSystemErrorWarningsEnum;
(function (KioskCustomizationSystemErrorWarningsEnum) {
    KioskCustomizationSystemErrorWarningsEnum["SystemErrorWarningsUnspecified"] = "SYSTEM_ERROR_WARNINGS_UNSPECIFIED";
    KioskCustomizationSystemErrorWarningsEnum["ErrorAndWarningsEnabled"] = "ERROR_AND_WARNINGS_ENABLED";
    KioskCustomizationSystemErrorWarningsEnum["ErrorAndWarningsMuted"] = "ERROR_AND_WARNINGS_MUTED";
})(KioskCustomizationSystemErrorWarningsEnum = exports.KioskCustomizationSystemErrorWarningsEnum || (exports.KioskCustomizationSystemErrorWarningsEnum = {}));
/**
 * Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.
 */
var KioskCustomizationSystemNavigationEnum;
(function (KioskCustomizationSystemNavigationEnum) {
    KioskCustomizationSystemNavigationEnum["SystemNavigationUnspecified"] = "SYSTEM_NAVIGATION_UNSPECIFIED";
    KioskCustomizationSystemNavigationEnum["NavigationEnabled"] = "NAVIGATION_ENABLED";
    KioskCustomizationSystemNavigationEnum["NavigationDisabled"] = "NAVIGATION_DISABLED";
    KioskCustomizationSystemNavigationEnum["HomeButtonOnly"] = "HOME_BUTTON_ONLY";
})(KioskCustomizationSystemNavigationEnum = exports.KioskCustomizationSystemNavigationEnum || (exports.KioskCustomizationSystemNavigationEnum = {}));
/**
 * Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.
 */
var KioskCustomization = /** @class */ (function (_super) {
    __extends(KioskCustomization, _super);
    function KioskCustomization() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deviceSettings" }),
        __metadata("design:type", String)
    ], KioskCustomization.prototype, "deviceSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "powerButtonActions" }),
        __metadata("design:type", String)
    ], KioskCustomization.prototype, "powerButtonActions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "statusBar" }),
        __metadata("design:type", String)
    ], KioskCustomization.prototype, "statusBar", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "systemErrorWarnings" }),
        __metadata("design:type", String)
    ], KioskCustomization.prototype, "systemErrorWarnings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "systemNavigation" }),
        __metadata("design:type", String)
    ], KioskCustomization.prototype, "systemNavigation", void 0);
    return KioskCustomization;
}(utils_1.SpeakeasyBase));
exports.KioskCustomization = KioskCustomization;
