<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - A simple API to get the current time based on a request with a timezone.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://worldtimeapi.org/api/',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIpResponse
     */
	public function getIp(
    ): \OpenAPI\OpenAPI\Models\Operations\GetIpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ip');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dateTimeJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DateTimeJsonResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorJsonResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIpTxtResponse
     */
	public function getIpTxt(
    ): \OpenAPI\OpenAPI\Models\Operations\GetIpTxtResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ip.txt');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIpTxtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->dateTimeTextResponse = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorTextResponse = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4Response
     */
	public function getIpIpv4(
        \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ip/{ipv4}', \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dateTimeJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DateTimeJsonResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorJsonResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * request the current time based on the ip of the request. note: this is a "best guess" obtained from open-source data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4TxtRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4TxtResponse
     */
	public function getIpIpv4Txt(
        \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4TxtRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4TxtResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ip/{ipv4}.txt', \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4TxtRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIpIpv4TxtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->dateTimeTextResponse = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorTextResponse = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * a listing of all timezones.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneResponse
     */
	public function getTimezone(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * a listing of all timezones.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneTxtResponse
     */
	public function getTimezoneTxt(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneTxtResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone.txt');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneTxtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->listTextResponse = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * a listing of all timezones available for that area.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaResponse
     */
	public function getTimezoneArea(
        \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone/{area}', \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorJsonResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * a listing of all timezones available for that area.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaTxtRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaTxtResponse
     */
	public function getTimezoneAreaTxt(
        \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaTxtRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaTxtResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone/{area}.txt', \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaTxtRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaTxtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->listTextResponse = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorTextResponse = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * request the current time for a timezone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationResponse
     */
	public function getTimezoneAreaLocation(
        \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone/{area}/{location}', \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dateTimeJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DateTimeJsonResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorJsonResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * request the current time for a timezone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationTxtRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationTxtResponse
     */
	public function getTimezoneAreaLocationTxt(
        \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationTxtRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationTxtResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone/{area}/{location}.txt', \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationTxtRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationTxtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->dateTimeTextResponse = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorTextResponse = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * request the current time for a timezone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionResponse
     */
	public function getTimezoneAreaLocationRegion(
        \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone/{area}/{location}/{region}', \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dateTimeJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DateTimeJsonResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorJsonResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * request the current time for a timezone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionTxtRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionTxtResponse
     */
	public function getTimezoneAreaLocationRegionTxt(
        \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionTxtRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionTxtResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/timezone/{area}/{location}/{region}.txt', \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionTxtRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimezoneAreaLocationRegionTxtResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->dateTimeTextResponse = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorTextResponse = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}