// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CyipcSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CyipcRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Policy Number
	PolicyNumber string `json:"policy_number"`
}

// CyipcRequestBodyFormatEnum - The format of the certificate in response.
type CyipcRequestBodyFormatEnum string

const (
	CyipcRequestBodyFormatEnumPdf CyipcRequestBodyFormatEnum = "pdf"
)

func (e *CyipcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = CyipcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CyipcRequestBodyFormatEnum: %s", s)
	}
}

// CyipcRequestBody - Request format
type CyipcRequestBody struct {
	CertificateParameters *CyipcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CyipcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cyipc504ApplicationJSONErrorEnum string

const (
	Cyipc504ApplicationJSONErrorEnumGatewayTimeout Cyipc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Cyipc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Cyipc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Cyipc504ApplicationJSONErrorDescriptionEnum string

const (
	Cyipc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cyipc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Cyipc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Cyipc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cyipc504ApplicationJSON - Gateway timeout
type Cyipc504ApplicationJSON struct {
	Error            *Cyipc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cyipc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cyipc503ApplicationJSONErrorEnum string

const (
	Cyipc503ApplicationJSONErrorEnumServiceUnavailable Cyipc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Cyipc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Cyipc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Cyipc503ApplicationJSONErrorDescriptionEnum string

const (
	Cyipc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cyipc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Cyipc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Cyipc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cyipc503ApplicationJSON - Service unavailable
type Cyipc503ApplicationJSON struct {
	Error            *Cyipc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cyipc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cyipc502ApplicationJSONErrorEnum string

const (
	Cyipc502ApplicationJSONErrorEnumBadGatewy Cyipc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Cyipc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Cyipc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Cyipc502ApplicationJSONErrorDescriptionEnum string

const (
	Cyipc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cyipc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Cyipc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Cyipc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cyipc502ApplicationJSON - Bad gateway
type Cyipc502ApplicationJSON struct {
	Error            *Cyipc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cyipc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cyipc500ApplicationJSONErrorEnum string

const (
	Cyipc500ApplicationJSONErrorEnumInternalServerError Cyipc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Cyipc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Cyipc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Cyipc500ApplicationJSONErrorDescriptionEnum string

const (
	Cyipc500ApplicationJSONErrorDescriptionEnumInternalServerError Cyipc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Cyipc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Cyipc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cyipc500ApplicationJSON - Internal server error
type Cyipc500ApplicationJSON struct {
	Error            *Cyipc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cyipc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cyipc404ApplicationJSONErrorEnum string

const (
	Cyipc404ApplicationJSONErrorEnumRecordNotFound Cyipc404ApplicationJSONErrorEnum = "record_not_found"
	Cyipc404ApplicationJSONErrorEnumURLNotFound    Cyipc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Cyipc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cyipc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Cyipc404ApplicationJSONErrorDescriptionEnum string

const (
	Cyipc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cyipc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cyipc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cyipc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Cyipc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cyipc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cyipc404ApplicationJSON - No record found
type Cyipc404ApplicationJSON struct {
	Error            *Cyipc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cyipc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cyipc401ApplicationJSONErrorEnum string

const (
	Cyipc401ApplicationJSONErrorEnumInvalidAuthentication Cyipc401ApplicationJSONErrorEnum = "invalid_authentication"
	Cyipc401ApplicationJSONErrorEnumInvalidAuthorization  Cyipc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Cyipc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cyipc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Cyipc401ApplicationJSONErrorDescriptionEnum string

const (
	Cyipc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cyipc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cyipc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cyipc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Cyipc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cyipc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cyipc401ApplicationJSON - Unauthorized access
type Cyipc401ApplicationJSON struct {
	Error            *Cyipc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cyipc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cyipc400ApplicationJSONErrorEnum string

const (
	Cyipc400ApplicationJSONErrorEnumMissingParameter Cyipc400ApplicationJSONErrorEnum = "missing_parameter"
	Cyipc400ApplicationJSONErrorEnumInvalidParameter Cyipc400ApplicationJSONErrorEnum = "invalid_parameter"
	Cyipc400ApplicationJSONErrorEnumInvalidFormat    Cyipc400ApplicationJSONErrorEnum = "invalid_format"
	Cyipc400ApplicationJSONErrorEnumInvalidTxnid     Cyipc400ApplicationJSONErrorEnum = "invalid_txnid"
	Cyipc400ApplicationJSONErrorEnumInvalidConsentid Cyipc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Cyipc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cyipc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Cyipc400ApplicationJSONErrorDescriptionEnum string

const (
	Cyipc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cyipc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cyipc400ApplicationJSONErrorDescriptionEnumBadRequest                              Cyipc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cyipc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cyipc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cyipc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cyipc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cyipc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cyipc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Cyipc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cyipc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cyipc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cyipc400ApplicationJSON - Bad request
type Cyipc400ApplicationJSON struct {
	Error            *Cyipc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cyipc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CyipcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cyipc400ApplicationJSONObject *Cyipc400ApplicationJSON
	// Unauthorized access
	Cyipc401ApplicationJSONObject *Cyipc401ApplicationJSON
	// No record found
	Cyipc404ApplicationJSONObject *Cyipc404ApplicationJSON
	// Internal server error
	Cyipc500ApplicationJSONObject *Cyipc500ApplicationJSON
	// Bad gateway
	Cyipc502ApplicationJSONObject *Cyipc502ApplicationJSON
	// Service unavailable
	Cyipc503ApplicationJSONObject *Cyipc503ApplicationJSON
	// Gateway timeout
	Cyipc504ApplicationJSONObject *Cyipc504ApplicationJSON
}
