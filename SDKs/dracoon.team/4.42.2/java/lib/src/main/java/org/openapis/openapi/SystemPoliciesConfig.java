/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * System settings (policies)
 */
public class SystemPoliciesConfig {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public SystemPoliciesConfig(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Change classification policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.30.0&lt;/h3&gt;
     * 
     * ### Description:
     * Change current classification policies:
     * * `shareClassificationPolicies`
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Classification policies are changed.
     * 
     * ### Further Information:
     * `classificationRequiresSharePassword`: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. `0` means no password will be enforced.
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangeClassificationPoliciesConfigResponse changeClassificationPoliciesConfig(org.openapis.openapi.models.operations.ChangeClassificationPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/classifications");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updateClassificationPoliciesConfig", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangeClassificationPoliciesConfigResponse res = new org.openapis.openapi.models.operations.ChangeClassificationPoliciesConfigResponse() {{
            classificationPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ClassificationPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ClassificationPoliciesConfig.class);
                res.classificationPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Change guest user policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.40.0&lt;/h3&gt;
     * 
     * ### Description:
     * Change current guest user policies.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Guest user policies are changed.  
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangeGuestUsersPoliciesConfigResponse changeGuestUsersPoliciesConfig(org.openapis.openapi.models.operations.ChangeGuestUsersPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/guest_users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updateGuestUsersPoliciesConfig", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangeGuestUsersPoliciesConfigResponse res = new org.openapis.openapi.models.operations.ChangeGuestUsersPoliciesConfigResponse() {{
            guestUsersPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GuestUsersPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GuestUsersPoliciesConfig.class);
                res.guestUsersPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Change MFA policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.37.0&lt;/h3&gt;
     * 
     * ### Description:
     * Change current multi-factor authentication policies.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Multi-factor authentication policies are changed.  
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangeMfaPoliciesConfigResponse changeMfaPoliciesConfig(org.openapis.openapi.models.operations.ChangeMfaPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/mfa");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updateMfaPoliciesConfig", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangeMfaPoliciesConfigResponse res = new org.openapis.openapi.models.operations.ChangeMfaPoliciesConfigResponse() {{
            mfaPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MfaPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MfaPoliciesConfig.class);
                res.mfaPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 402 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Change password policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.14.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Change current password policies for any password types:  
     * * `login`
     * * `shares`
     * * `encryption`
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Password policies get changed.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Available password policies:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Name | Description | Value | Recommended Value | Password Type |
     * | :--- | :--- | :--- | :--- | :--- |
     * | `mustContainCharacters` | Characters which a password must contain:&lt;br&gt;&lt;ul&gt;&lt;li&gt;`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`uppercase` - at least one uppercase character&lt;pre&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`lowercase` - at least one lowercase character&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`numeric` - at least one numeric character&lt;pre&gt;0 1 2 3 4 5 6 7 8 9&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`special` - at least one special character (letters and digits excluded)&lt;pre&gt;! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &amp;#124; } ~&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`none` - none of the above&lt;/li&gt;&lt;li&gt;`all` - combination of `uppercase`, `lowercase`, `numeric` and `special`&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`alpha`&lt;/li&gt;&lt;li&gt;`uppercase`&lt;/li&gt;&lt;li&gt;`lowercase`&lt;/li&gt;&lt;li&gt;`numeric`&lt;/li&gt;&lt;li&gt;`special`&lt;/li&gt;&lt;li&gt;`none`&lt;/li&gt;&lt;li&gt;`all`&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`uppercase`&lt;/li&gt;&lt;li&gt;`lowercase`&lt;/li&gt;&lt;li&gt;`numeric`&lt;/li&gt;&lt;/ul&gt;  | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.&lt;br&gt;e.g. from `["uppercase", "lowercase", "numeric", "special"]`&lt;br&gt;all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4`&lt;br&gt;&lt;br&gt;default:&lt;ul&gt;&lt;li&gt;`none` - `0`&lt;/li&gt;&lt;li&gt;`all` - `4`&lt;/li&gt;&lt;li&gt;otherwise - amount of distinct values&lt;br&gt;cf. `mustContainCharacters` matrix&lt;/li&gt;&lt;/ul&gt; | `3` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | &lt;ul&gt;&lt;li&gt;`login`: `12`&lt;/li&gt;&lt;li&gt;`shares`: `12`&lt;/li&gt;&lt;li&gt;`encryption`: `14`&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.&lt;br&gt;In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined&lt;br&gt;cf. `policies.passwords.dictionary.directory`.&lt;br&gt;&lt;br&gt;If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.&lt;br&gt;Otherwise, the rule will not have any effect on password validation process. | `true or false` | `true` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.&lt;br&gt;Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | `true` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.&lt;br&gt;e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | `true` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfArchivedPasswords` | Number of passwords to archive. | `Integer between 0 and 10`&lt;br&gt;Set `0` to disable password history. | `3` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `passwordExpiration.enabled` | Determines whether password expiration is enabled.&lt;br&gt;Password expiration policy can only be enabled in context with `enforceLoginPasswordChange`. | `true or false` | `false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` |  | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | `true` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | `5` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt&lt;br&gt;after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | `10` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * 
     * &lt;/details&gt;
     * 
     * ### Deprecated password policies:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Name | Description | Value | Recommended Value | Password Type |
     * | :--- | :--- | :--- | :--- | :--- |
     * | &lt;del&gt;`enforceLoginPasswordChange`&lt;/del&gt; | Determines whether a login password change should be enforced for all users.&lt;br&gt;Only takes effect, if login password policies get stricter.&lt;br&gt;Use `POST /system/config/policies/passwords/enforce_change` API to enforce a login password change. | `true or false`&lt;br&gt;default: `false` |  | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * 
     * &lt;/details&gt;
     * 
     * ### `mustContainCharacters` matrix:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * |  | `alpha` | `uppercase` | `lowercase` | `numeric` | `special` | `all` | `none` |
     * | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
     * | `alpha` | `alpha` | `uppercase` | `lowercase` | `alpha`&lt;br&gt;`numeric` | `alpha`&lt;br&gt;`special` | `all` | `none` |
     * | `uppercase` | `uppercase` | `uppercase` | `uppercase`&lt;br&gt;`lowercase` | `uppercase`&lt;br&gt;`numeric` | `uppercase`&lt;br&gt;`special` | `all` | `none` |
     * | `lowercase` | `lowercase` | `uppercase`&lt;br&gt;`lowercase` | `lowercase` | `lowercase`&lt;br&gt;`numeric` | `lowercase`&lt;br&gt;`special` | `all` | `none` |
     * | `numeric` | `alpha`&lt;br&gt;`numeric` | `uppercase`&lt;br&gt;`numeric` | `lowercase`&lt;br&gt;`numeric` | `numeric` | `numeric`&lt;br&gt;`special` | `all` | `none` |
     * | `special` | `alpha`&lt;br&gt;`special` | `uppercase`&lt;br&gt;`special` | `lowercase`&lt;br&gt;`special` | `numeric`&lt;br&gt;`special` | `special` | `all` | `none` |
     * | `all` | `all` | `all` | `all` | `all` | `all` | `all` | `none` |
     * | `none` | `none` | `none` |  `none` | `none` | `none` | `none` | `none` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangePasswordPoliciesConfigResponse changePasswordPoliciesConfig(org.openapis.openapi.models.operations.ChangePasswordPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/passwords");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updatePasswordPoliciesConfig", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangePasswordPoliciesConfigResponse res = new org.openapis.openapi.models.operations.ChangePasswordPoliciesConfigResponse() {{
            passwordPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PasswordPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PasswordPoliciesConfig.class);
                res.passwordPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Enforce login password change for all users
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Enforce login password change for all users.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Login password change is enforced.
     * Every user has to change their login password at next login.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.EnforceLoginPasswordChangeResponse enforceLoginPasswordChange(org.openapis.openapi.models.operations.EnforceLoginPasswordChangeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/passwords/enforce_change");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.EnforceLoginPasswordChangeResponse res = new org.openapis.openapi.models.operations.EnforceLoginPasswordChangeResponse() {{
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request classification policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.30.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieve a list of classification policies:
     * * `shareClassificationPolicies`
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * List of configured classification policies is returned.
     * 
     * ### Further Information:
     * `classificationRequiresSharePassword`: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. `0` means no password will be enforced.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigResponse requestClassificationPoliciesConfig(org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/classifications");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigResponse res = new org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigResponse() {{
            classificationPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ClassificationPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ClassificationPoliciesConfig.class);
                res.classificationPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request guest user policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.40.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieve guest user policies.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Guest user policies are returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigResponse requestGuestUsersPoliciesConfig(org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/guest_users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigResponse res = new org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigResponse() {{
            guestUsersPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GuestUsersPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GuestUsersPoliciesConfig.class);
                res.guestUsersPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request MFA policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.37.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieve a list of multi-factor authentication policies.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * List of configured multi-factor authentication policies is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestMfaPoliciesConfigResponse requestMfaPoliciesConfig(org.openapis.openapi.models.operations.RequestMfaPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/mfa");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestMfaPoliciesConfigResponse res = new org.openapis.openapi.models.operations.RequestMfaPoliciesConfigResponse() {{
            mfaPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MfaPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MfaPoliciesConfig.class);
                res.mfaPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 402 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request password policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.14.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieve a list of configured password policies for all password types:  
     * * `login`
     * * `shares`
     * * `encryption`
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * List of configured password policies is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Available password policies:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Name | Description | Value | Password Type |
     * | :--- | :--- | :--- | :--- |
     * | `mustContainCharacters` | Characters which a password must contain:&lt;br&gt;&lt;ul&gt;&lt;li&gt;`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`uppercase` - at least one uppercase character&lt;pre&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`lowercase` - at least one lowercase character&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`numeric` - at least one numeric character&lt;pre&gt;0 1 2 3 4 5 6 7 8 9&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`special` - at least one special character (letters and digits excluded)&lt;pre&gt;! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &amp;#124; } ~&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`none` - none of the above&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`alpha`&lt;/li&gt;&lt;li&gt;`uppercase`&lt;/li&gt;&lt;li&gt;`lowercase`&lt;/li&gt;&lt;li&gt;`numeric`&lt;/li&gt;&lt;li&gt;`special`&lt;/li&gt;&lt;li&gt;`none`&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.&lt;br&gt;e.g. from `["uppercase", "lowercase", "numeric", "special"]`&lt;br&gt;all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.&lt;br&gt;In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined&lt;br&gt;cf. `policies.passwords.dictionary.directory`.&lt;br&gt;&lt;br&gt;If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.&lt;br&gt;Otherwise, the rule will not have any effect on password validation process. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.&lt;br&gt;Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.&lt;br&gt;e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfArchivedPasswords` | Number of passwords to archive.&lt;br&gt;Value `0` means that password history is disabled. | `Integer between 0 and 10` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt&lt;br&gt;after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigResponse requestPasswordPoliciesConfig(org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/policies/passwords");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigResponse res = new org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigResponse() {{
            passwordPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PasswordPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PasswordPoliciesConfig.class);
                res.passwordPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request password policies for a certain password type
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.14.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieve a list of configured password policies for a certain password type:  
     * * `login`
     * * `shares`
     * * `encryption`
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * List of configured password policies is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Available password policies:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Name | Description | Value | Password Type |
     * | :--- | :--- | :--- | :--- |
     * | `mustContainCharacters` | Characters which a password must contain:&lt;br&gt;&lt;ul&gt;&lt;li&gt;`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`uppercase` - at least one uppercase character&lt;pre&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`lowercase` - at least one lowercase character&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`numeric` - at least one numeric character&lt;pre&gt;0 1 2 3 4 5 6 7 8 9&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`special` - at least one special character (letters and digits excluded)&lt;pre&gt;! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &amp;#124; } ~&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`none` - none of the above&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`alpha`&lt;/li&gt;&lt;li&gt;`uppercase`&lt;/li&gt;&lt;li&gt;`lowercase`&lt;/li&gt;&lt;li&gt;`numeric`&lt;/li&gt;&lt;li&gt;`special`&lt;/li&gt;&lt;li&gt;`none`&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.&lt;br&gt;e.g. from `["uppercase", "lowercase", "numeric", "special"]`&lt;br&gt;all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.&lt;br&gt;In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined&lt;br&gt;cf. `policies.passwords.dictionary.directory`.&lt;br&gt;&lt;br&gt;If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.&lt;br&gt;Otherwise, the rule will not have any effect on password validation process. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.&lt;br&gt;Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.&lt;br&gt;e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfArchivedPasswords` | Number of passwords to archive.&lt;br&gt;Value `0` means that password history is disabled. | `Integer between 0 and 10` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt&lt;br&gt;after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestPasswordPoliciesForPasswordTypeResponse requestPasswordPoliciesForPasswordType(org.openapis.openapi.models.operations.RequestPasswordPoliciesForPasswordTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestPasswordPoliciesForPasswordTypeRequest.class, baseUrl, "/v4/system/config/policies/passwords/{password_type}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestPasswordPoliciesForPasswordTypeResponse res = new org.openapis.openapi.models.operations.RequestPasswordPoliciesForPasswordTypeResponse() {{
            passwordPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PasswordPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PasswordPoliciesConfig.class);
                res.passwordPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }
}