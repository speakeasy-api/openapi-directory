"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tokens:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_tokens_delete(self, request: operations.DirectoryTokensDeleteRequest, security: operations.DirectoryTokensDeleteSecurity) -> operations.DirectoryTokensDeleteResponse:
        r"""Deletes all access tokens issued by a user for an application."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryTokensDeleteRequest, base_url, '/admin/directory/v1/users/{userKey}/tokens/{clientId}', request)
        
        query_params = utils.get_query_params(operations.DirectoryTokensDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryTokensDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_tokens_get(self, request: operations.DirectoryTokensGetRequest, security: operations.DirectoryTokensGetSecurity) -> operations.DirectoryTokensGetResponse:
        r"""Gets information about an access token issued by a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryTokensGetRequest, base_url, '/admin/directory/v1/users/{userKey}/tokens/{clientId}', request)
        
        query_params = utils.get_query_params(operations.DirectoryTokensGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryTokensGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Token])
                res.token = out

        return res

    def directory_tokens_list(self, request: operations.DirectoryTokensListRequest, security: operations.DirectoryTokensListSecurity) -> operations.DirectoryTokensListResponse:
        r"""Returns the set of tokens specified user has issued to 3rd party applications."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryTokensListRequest, base_url, '/admin/directory/v1/users/{userKey}/tokens', request)
        
        query_params = utils.get_query_params(operations.DirectoryTokensListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryTokensListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tokens])
                res.tokens = out

        return res

    