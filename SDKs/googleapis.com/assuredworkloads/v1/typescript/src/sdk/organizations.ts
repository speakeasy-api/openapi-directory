/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Organizations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  assuredworkloadsOrganizationsLocationsOperationsList(
    req: operations.AssuredworkloadsOrganizationsLocationsOperationsListRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsOperationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsOperationsListResponse =
        new operations.AssuredworkloadsOrganizationsLocationsOperationsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates Assured Workload.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsCreate(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/workloads",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudAssuredworkloadsV1WorkloadInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the workload. Make sure that workload's direct children are already in a deleted state, otherwise the request will fail with a FAILED_PRECONDITION error.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsDelete(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Assured Workloads under a CRM Node.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsList(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsListRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/workloads",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsListResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudAssuredworkloadsV1ListWorkloadsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudAssuredworkloadsV1ListWorkloadsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the permissions settings for an existing partner workload. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissions(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:mutatePartnerPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudAssuredworkloadsV1MutatePartnerPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudAssuredworkloadsV1Workload = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudAssuredworkloadsV1Workload
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing workload. Currently allows updating of workload display_name and labels. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsPatch(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudAssuredworkloadsV1WorkloadInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudAssuredworkloadsV1Workload = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudAssuredworkloadsV1Workload
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restrict the list of resources allowed in the Workload environment. The current list of allowed products can be found at https://cloud.google.com/assured-workloads/docs/supported-products In addition to assuredworkloads.workload.update permission, the user should also have orgpolicy.policy.set permission on the folder resource to use this functionality.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResources(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:restrictAllowedResources",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudAssuredworkloadsV1RestrictAllowedResourcesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudAssuredworkloadsV1RestrictAllowedResourcesResponse =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Acknowledges an existing violation. By acknowledging a violation, users acknowledge the existence of a compliance violation in their workload and decide to ignore it due to a valid business justification. Acknowledgement is a permanent operation and it cannot be reverted.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledge(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:acknowledge",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudAssuredworkloadsV1AcknowledgeViolationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudAssuredworkloadsV1AcknowledgeViolationResponse =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves Assured Workload Violation based on ID.
   */
  assuredworkloadsOrganizationsLocationsWorkloadsViolationsGet(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudAssuredworkloadsV1Violation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudAssuredworkloadsV1Violation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the Violations in the AssuredWorkload Environment. Callers may also choose to read across multiple Workloads as per [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash character) as a wildcard character instead of workload-id in the parent. Format `organizations/{org_id}/locations/{location}/workloads/-`
   */
  assuredworkloadsOrganizationsLocationsWorkloadsViolationsList(
    req: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest,
    security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/violations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse =
        new operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudAssuredworkloadsV1ListViolationsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudAssuredworkloadsV1ListViolationsResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
