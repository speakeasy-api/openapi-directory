"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ListingSettingsNamingEnum(str, Enum):
    LISTING = 'LISTING'
    LISTINGS = 'LISTINGS'
    INTEGRATIONS = 'INTEGRATIONS'
    APPS = 'APPS'
    CONNECTORS = 'CONNECTORS'
    DATASOURCES = 'DATASOURCES'
    ADDONS = 'ADDONS'
    PLUGINS = 'PLUGINS'
    PARTNERS = 'PARTNERS'
    CHANNELS = 'CHANNELS'
    CONNECTIONS = 'CONNECTIONS'
    EXTENSIONS = 'EXTENSIONS'

class ListingSettingsSidebarPositionEnum(str, Enum):
    TOP = 'TOP'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    HIDDEN = 'HIDDEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListingSettings:
    
    description_text_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_text_template'), 'exclude': lambda f: f is None }})  
    description_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_title'), 'exclude': lambda f: f is None }})  
    features_text_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features_text_template'), 'exclude': lambda f: f is None }})  
    features_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features_title'), 'exclude': lambda f: f is None }})  
    install_button_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('install_button_label'), 'exclude': lambda f: f is None }})  
    name_postfix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name_postfix'), 'exclude': lambda f: f is None }})  
    naming: Optional[ListingSettingsNamingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('naming'), 'exclude': lambda f: f is None }})  
    native_integration_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('native_integration_link'), 'exclude': lambda f: f is None }})  
    pricing_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing_disabled'), 'exclude': lambda f: f is None }})  
    pricing_text_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing_text_template'), 'exclude': lambda f: f is None }})  
    pricing_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing_title'), 'exclude': lambda f: f is None }})  
    sidebar_position: Optional[ListingSettingsSidebarPositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sidebar_position'), 'exclude': lambda f: f is None }})  
    