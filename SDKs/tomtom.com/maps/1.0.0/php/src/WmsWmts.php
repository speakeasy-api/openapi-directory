<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WmsWmts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * GetCapabilities
     * 
     * The GetCapabilities call is part of TomTom's implementation of version 1.1.1
     * the Web Map Service (WMS). It provides descriptions of the other calls
     * that are available in the implementation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCapabilitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCapabilitiesResponse
     */
	public function getCapabilities(
        \OpenAPI\OpenAPI\Models\Operations\GetCapabilitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCapabilitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/map/{versionNumber}/wms//', \OpenAPI\OpenAPI\Models\Operations\GetCapabilitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCapabilitiesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCapabilitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * GetMap
     * 
     * The GetMap call implements the Web Map Service 1.1.1 standard
     * to access TomTom raster map tiles. This service is described
     * in the response to the GetCapabilities API call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMapRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMapResponse
     */
	public function getMap(
        \OpenAPI\OpenAPI\Models\Operations\GetMapRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/map/{versionNumber}/wms/', \OpenAPI\OpenAPI\Models\Operations\GetMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMapRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * WMTS
     * 
     * The WMTS GetCapabilities call implements version 1.0.0 of
     * the <a href="http://www.opengeospatial.org/standards/wmts">Web Map Tile Service</a>
     * (WMTS) standard. It returns metadata that allows compatible calling systems to construct
     * calls to TomTom's raster map tile service. See the
     * <a href="/maps-api/maps-api-documentation-raster/wmts">documentation</a>
     * for more information on WMTS.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlResponse
     */
	public function getMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXml(
        \OpenAPI\OpenAPI\Models\Operations\GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/map/{versionNumber}/wmts/{key}/{wmtsVersion}/WMTSCapabilities.xml', \OpenAPI\OpenAPI\Models\Operations\GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMapVersionNumberWMTSKeyWMTSVersionWMTSCapabilitiesXmlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}