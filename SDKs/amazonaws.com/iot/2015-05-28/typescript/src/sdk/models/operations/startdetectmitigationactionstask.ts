/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 *  The target of a mitigation action task.
 */
export class StartDetectMitigationActionsTaskRequestBodyTarget extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "behaviorName" })
  behaviorName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "securityProfileName" })
  securityProfileName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "violationIds" })
  violationIds?: string[];
}

/**
 *  Specifies the time period of which violation events occurred between.
 */
export class StartDetectMitigationActionsTaskRequestBodyViolationEventOccurrenceRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;
}

export class StartDetectMitigationActionsTaskRequestBody extends SpeakeasyBase {
  /**
   *  The actions to be performed when a device has unexpected behavior.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actions" })
  actions: string[];

  /**
   *  Each mitigation action task must have a unique client request token. If you try to create a new task with the same token as a task that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientRequestToken" })
  clientRequestToken: string;

  /**
   *  Specifies to list only active violations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includeOnlyActiveViolations" })
  includeOnlyActiveViolations?: boolean;

  /**
   *  Specifies to include suppressed alerts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includeSuppressedAlerts" })
  includeSuppressedAlerts?: boolean;

  /**
   *  The target of a mitigation action task.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => StartDetectMitigationActionsTaskRequestBodyTarget)
  target: StartDetectMitigationActionsTaskRequestBodyTarget;

  /**
   *  Specifies the time period of which violation events occurred between.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "violationEventOccurrenceRange" })
  @Type(
    () =>
      StartDetectMitigationActionsTaskRequestBodyViolationEventOccurrenceRange
  )
  violationEventOccurrenceRange?: StartDetectMitigationActionsTaskRequestBodyViolationEventOccurrenceRange;
}

export class StartDetectMitigationActionsTaskRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartDetectMitigationActionsTaskRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   *  The unique identifier of the task.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=taskId",
  })
  taskId: string;
}

export class StartDetectMitigationActionsTaskResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startDetectMitigationActionsTaskResponse?: shared.StartDetectMitigationActionsTaskResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TaskAlreadyExistsException
   */
  @SpeakeasyMetadata()
  taskAlreadyExistsException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
