/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class BrowserBotResponse {
    /**
     * The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML
     */
    @JsonProperty("content")
    public String content;

    public BrowserBotResponse withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * Array containing all the elements matching the supplied selector. &lt;br&gt;Each element object will contain the text content, HTML content and all current element attributes
     */
    @JsonProperty("elements")
    public String[] elements;

    public BrowserBotResponse withElements(String[] elements) {
        this.elements = elements;
        return this;
    }
    
    /**
     * Contains the error message if an error has occurred ('is-error' will be true)
     */
    @JsonProperty("error-message")
    public String errorMessage;

    public BrowserBotResponse withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    /**
     * If you executed any JavaScript this array holds the results as objects
     */
    @JsonProperty("exec-results")
    public String[] execResults;

    public BrowserBotResponse withExecResults(String[] execResults) {
        this.execResults = execResults;
        return this;
    }
    
    /**
     * The redirected URL if the URL responded with an HTTP redirect
     */
    @JsonProperty("http-redirect-url")
    public String httpRedirectUrl;

    public BrowserBotResponse withHttpRedirectUrl(String httpRedirectUrl) {
        this.httpRedirectUrl = httpRedirectUrl;
        return this;
    }
    
    /**
     * The HTTP status code the URL returned
     */
    @JsonProperty("http-status-code")
    public Integer httpStatusCode;

    public BrowserBotResponse withHttpStatusCode(Integer httpStatusCode) {
        this.httpStatusCode = httpStatusCode;
        return this;
    }
    
    /**
     * The HTTP status message the URL returned
     */
    @JsonProperty("http-status-message")
    public String httpStatusMessage;

    public BrowserBotResponse withHttpStatusMessage(String httpStatusMessage) {
        this.httpStatusMessage = httpStatusMessage;
        return this;
    }
    
    /**
     * True if an error has occurred loading the page. Check the 'error-message' field for details
     */
    @JsonProperty("is-error")
    public Boolean isError;

    public BrowserBotResponse withIsError(Boolean isError) {
        this.isError = isError;
        return this;
    }
    
    /**
     * True if the HTTP status is OK (200)
     */
    @JsonProperty("is-http-ok")
    public Boolean isHttpOk;

    public BrowserBotResponse withIsHttpOk(Boolean isHttpOk) {
        this.isHttpOk = isHttpOk;
        return this;
    }
    
    /**
     * True if the URL responded with an HTTP redirect
     */
    @JsonProperty("is-http-redirect")
    public Boolean isHttpRedirect;

    public BrowserBotResponse withIsHttpRedirect(Boolean isHttpRedirect) {
        this.isHttpRedirect = isHttpRedirect;
        return this;
    }
    
    /**
     * True if the page is secured using TLS/SSL
     */
    @JsonProperty("is-secure")
    public Boolean isSecure;

    public BrowserBotResponse withIsSecure(Boolean isSecure) {
        this.isSecure = isSecure;
        return this;
    }
    
    /**
     * True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'
     */
    @JsonProperty("is-timeout")
    public Boolean isTimeout;

    public BrowserBotResponse withIsTimeout(Boolean isTimeout) {
        this.isTimeout = isTimeout;
        return this;
    }
    
    /**
     * The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
     */
    @JsonProperty("language-code")
    public String languageCode;

    public BrowserBotResponse withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The number of seconds taken to load the page (from initial request until DOM ready)
     */
    @JsonProperty("load-time")
    public Double loadTime;

    public BrowserBotResponse withLoadTime(Double loadTime) {
        this.loadTime = loadTime;
        return this;
    }
    
    /**
     * The document MIME type
     */
    @JsonProperty("mime-type")
    public String mimeType;

    public BrowserBotResponse withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * Map containing all the HTTP response headers the URL responded with
     */
    @JsonProperty("response-headers")
    public java.util.Map<String, String> responseHeaders;

    public BrowserBotResponse withResponseHeaders(java.util.Map<String, String> responseHeaders) {
        this.responseHeaders = responseHeaders;
        return this;
    }
    
    /**
     * Map containing details of the TLS/SSL setup
     */
    @JsonProperty("security-details")
    public java.util.Map<String, String> securityDetails;

    public BrowserBotResponse withSecurityDetails(java.util.Map<String, String> securityDetails) {
        this.securityDetails = securityDetails;
        return this;
    }
    
    /**
     * The HTTP servers IP address
     */
    @JsonProperty("server-ip")
    public String serverIp;

    public BrowserBotResponse withServerIp(String serverIp) {
        this.serverIp = serverIp;
        return this;
    }
    
    /**
     * The document title
     */
    @JsonProperty("title")
    public String title;

    public BrowserBotResponse withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The page URL
     */
    @JsonProperty("url")
    public String url;

    public BrowserBotResponse withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public BrowserBotResponse(@JsonProperty("content") String content, @JsonProperty("elements") String[] elements, @JsonProperty("error-message") String errorMessage, @JsonProperty("exec-results") String[] execResults, @JsonProperty("http-redirect-url") String httpRedirectUrl, @JsonProperty("http-status-code") Integer httpStatusCode, @JsonProperty("http-status-message") String httpStatusMessage, @JsonProperty("is-error") Boolean isError, @JsonProperty("is-http-ok") Boolean isHttpOk, @JsonProperty("is-http-redirect") Boolean isHttpRedirect, @JsonProperty("is-secure") Boolean isSecure, @JsonProperty("is-timeout") Boolean isTimeout, @JsonProperty("language-code") String languageCode, @JsonProperty("load-time") Double loadTime, @JsonProperty("mime-type") String mimeType, @JsonProperty("response-headers") java.util.Map<String, String> responseHeaders, @JsonProperty("security-details") java.util.Map<String, String> securityDetails, @JsonProperty("server-ip") String serverIp, @JsonProperty("title") String title, @JsonProperty("url") String url) {
        this.content = content;
        this.elements = elements;
        this.errorMessage = errorMessage;
        this.execResults = execResults;
        this.httpRedirectUrl = httpRedirectUrl;
        this.httpStatusCode = httpStatusCode;
        this.httpStatusMessage = httpStatusMessage;
        this.isError = isError;
        this.isHttpOk = isHttpOk;
        this.isHttpRedirect = isHttpRedirect;
        this.isSecure = isSecure;
        this.isTimeout = isTimeout;
        this.languageCode = languageCode;
        this.loadTime = loadTime;
        this.mimeType = mimeType;
        this.responseHeaders = responseHeaders;
        this.securityDetails = securityDetails;
        this.serverIp = serverIp;
        this.title = title;
        this.url = url;
  }
}
