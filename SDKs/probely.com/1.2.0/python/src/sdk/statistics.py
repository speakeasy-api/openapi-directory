"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Statistics:
    r"""Probely has several graphs and tables that it uses to
    display statistics of the current state of a target or account.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_targets_all_average_fix_time_(self) -> operations.GetTargetsAllAverageFixTimeResponse:
        r"""Average fix time graph data (all targets)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/targets/all/average_fix_time/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsAllAverageFixTimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsAllAverageFixTime200ApplicationJSON])
                res.get_targets_all_average_fix_time_200_application_json_object = out

        return res

    def get_targets_all_needs_attention_pie_(self) -> operations.GetTargetsAllNeedsAttentionPieResponse:
        r"""Targets with open vulnerabilities pie chart data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/targets/all/needs_attention_pie/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsAllNeedsAttentionPieResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsAllNeedsAttentionPie200ApplicationJSON])
                res.get_targets_all_needs_attention_pie_200_application_json_object = out

        return res

    def get_targets_all_needs_attention_top_(self) -> operations.GetTargetsAllNeedsAttentionTopResponse:
        r"""Targets with open vulnerabilities"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/targets/all/needs_attention_top/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsAllNeedsAttentionTopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetTargetsAllNeedsAttentionTop200ApplicationJSON]])
                res.get_targets_all_needs_attention_top_200_application_json_objects = out

        return res

    def get_targets_all_risk_trend_(self) -> operations.GetTargetsAllRiskTrendResponse:
        r"""Risk trend graph data (all targets)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/targets/all/risk_trend/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsAllRiskTrendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetTargetsAllRiskTrend200ApplicationJSON]])
                res.get_targets_all_risk_trend_200_application_json_objects = out

        return res

    def get_targets_all_severity_trend_(self) -> operations.GetTargetsAllSeverityTrendResponse:
        r"""Severity trend graph data (all targets)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/targets/all/severity_trend/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsAllSeverityTrendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsAllSeverityTrend200ApplicationJSON])
                res.get_targets_all_severity_trend_200_application_json_object = out

        return res

    def get_targets_all_top_vulns_(self) -> operations.GetTargetsAllTopVulnsResponse:
        r"""Top 5 vulnerabilities (all targets)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/targets/all/top_vulns/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsAllTopVulnsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetTargetsAllTopVulns200ApplicationJSON]])
                res.get_targets_all_top_vulns_200_application_json_objects = out

        return res

    def get_targets_target_id_average_fix_time_(self, request: operations.GetTargetsTargetIDAverageFixTimeRequest) -> operations.GetTargetsTargetIDAverageFixTimeResponse:
        r"""Average vulnerability trend graph data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetsTargetIDAverageFixTimeRequest, base_url, '/targets/{target_id}/average_fix_time/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsTargetIDAverageFixTimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDAverageFixTime200ApplicationJSON])
                res.get_targets_target_id_average_fix_time_200_application_json_object = out

        return res

    def get_targets_target_id_risk_trend_(self, request: operations.GetTargetsTargetIDRiskTrendRequest) -> operations.GetTargetsTargetIDRiskTrendResponse:
        r"""Risk trend graph data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetsTargetIDRiskTrendRequest, base_url, '/targets/{target_id}/risk_trend/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsTargetIDRiskTrendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetTargetsTargetIDRiskTrend200ApplicationJSON]])
                res.get_targets_target_id_risk_trend_200_application_json_objects = out

        return res

    def get_targets_target_id_severity_trend_(self, request: operations.GetTargetsTargetIDSeverityTrendRequest) -> operations.GetTargetsTargetIDSeverityTrendResponse:
        r"""Severity trend graph data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetsTargetIDSeverityTrendRequest, base_url, '/targets/{target_id}/severity_trend/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsTargetIDSeverityTrendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDSeverityTrend200ApplicationJSON])
                res.get_targets_target_id_severity_trend_200_application_json_object = out

        return res

    def get_targets_target_id_top_vulns_(self, request: operations.GetTargetsTargetIDTopVulnsRequest) -> operations.GetTargetsTargetIDTopVulnsResponse:
        r"""Top 5 vulnerabilities"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetsTargetIDTopVulnsRequest, base_url, '/targets/{target_id}/top_vulns/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsTargetIDTopVulnsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetTargetsTargetIDTopVulns200ApplicationJSON]])
                res.get_targets_target_id_top_vulns_200_application_json_objects = out

        return res

    