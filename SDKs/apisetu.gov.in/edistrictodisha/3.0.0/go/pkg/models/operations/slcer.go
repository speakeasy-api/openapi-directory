// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SlcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SlcerRequestBodyCertificateParameters struct {
	// Aadhaar number
	UID string `json:"UID"`
	// ApplicationReferenceNo
	Refno string `json:"refno"`
}

// SlcerRequestBodyFormatEnum - The format of the certificate in response.
type SlcerRequestBodyFormatEnum string

const (
	SlcerRequestBodyFormatEnumPdf SlcerRequestBodyFormatEnum = "pdf"
)

func (e SlcerRequestBodyFormatEnum) ToPointer() *SlcerRequestBodyFormatEnum {
	return &e
}

func (e *SlcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SlcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SlcerRequestBodyFormatEnum: %v", v)
	}
}

// SlcerRequestBody - Request format
type SlcerRequestBody struct {
	CertificateParameters *SlcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SlcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Slcer504ApplicationJSONErrorEnum string

const (
	Slcer504ApplicationJSONErrorEnumGatewayTimeout Slcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Slcer504ApplicationJSONErrorEnum) ToPointer() *Slcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Slcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Slcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Slcer504ApplicationJSONErrorDescriptionEnum string

const (
	Slcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Slcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Slcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Slcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Slcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Slcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Slcer504ApplicationJSON - Gateway timeout
type Slcer504ApplicationJSON struct {
	Error            *Slcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Slcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Slcer503ApplicationJSONErrorEnum string

const (
	Slcer503ApplicationJSONErrorEnumServiceUnavailable Slcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Slcer503ApplicationJSONErrorEnum) ToPointer() *Slcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Slcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Slcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Slcer503ApplicationJSONErrorDescriptionEnum string

const (
	Slcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Slcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Slcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Slcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Slcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Slcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Slcer503ApplicationJSON - Service unavailable
type Slcer503ApplicationJSON struct {
	Error            *Slcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Slcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Slcer502ApplicationJSONErrorEnum string

const (
	Slcer502ApplicationJSONErrorEnumBadGatewy Slcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Slcer502ApplicationJSONErrorEnum) ToPointer() *Slcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Slcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Slcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Slcer502ApplicationJSONErrorDescriptionEnum string

const (
	Slcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Slcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Slcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Slcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Slcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Slcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Slcer502ApplicationJSON - Bad gateway
type Slcer502ApplicationJSON struct {
	Error            *Slcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Slcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Slcer500ApplicationJSONErrorEnum string

const (
	Slcer500ApplicationJSONErrorEnumInternalServerError Slcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Slcer500ApplicationJSONErrorEnum) ToPointer() *Slcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Slcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Slcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Slcer500ApplicationJSONErrorDescriptionEnum string

const (
	Slcer500ApplicationJSONErrorDescriptionEnumInternalServerError Slcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Slcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Slcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Slcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Slcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Slcer500ApplicationJSON - Internal server error
type Slcer500ApplicationJSON struct {
	Error            *Slcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Slcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Slcer404ApplicationJSONErrorEnum string

const (
	Slcer404ApplicationJSONErrorEnumRecordNotFound Slcer404ApplicationJSONErrorEnum = "record_not_found"
	Slcer404ApplicationJSONErrorEnumURLNotFound    Slcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Slcer404ApplicationJSONErrorEnum) ToPointer() *Slcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Slcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Slcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Slcer404ApplicationJSONErrorDescriptionEnum string

const (
	Slcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Slcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Slcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Slcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Slcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Slcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Slcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Slcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Slcer404ApplicationJSON - No record found
type Slcer404ApplicationJSON struct {
	Error            *Slcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Slcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Slcer401ApplicationJSONErrorEnum string

const (
	Slcer401ApplicationJSONErrorEnumInvalidAuthentication Slcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Slcer401ApplicationJSONErrorEnumInvalidAuthorization  Slcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Slcer401ApplicationJSONErrorEnum) ToPointer() *Slcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Slcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Slcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Slcer401ApplicationJSONErrorDescriptionEnum string

const (
	Slcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Slcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Slcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Slcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Slcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Slcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Slcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Slcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Slcer401ApplicationJSON - Unauthorized access
type Slcer401ApplicationJSON struct {
	Error            *Slcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Slcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Slcer400ApplicationJSONErrorEnum string

const (
	Slcer400ApplicationJSONErrorEnumMissingParameter Slcer400ApplicationJSONErrorEnum = "missing_parameter"
	Slcer400ApplicationJSONErrorEnumInvalidParameter Slcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Slcer400ApplicationJSONErrorEnumInvalidFormat    Slcer400ApplicationJSONErrorEnum = "invalid_format"
	Slcer400ApplicationJSONErrorEnumInvalidTxnid     Slcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Slcer400ApplicationJSONErrorEnumInvalidConsentid Slcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Slcer400ApplicationJSONErrorEnum) ToPointer() *Slcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Slcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Slcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Slcer400ApplicationJSONErrorDescriptionEnum string

const (
	Slcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Slcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Slcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Slcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Slcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Slcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Slcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Slcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Slcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Slcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Slcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Slcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Slcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Slcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Slcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Slcer400ApplicationJSON - Bad request
type Slcer400ApplicationJSON struct {
	Error            *Slcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Slcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SlcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Slcer400ApplicationJSONObject *Slcer400ApplicationJSON
	// Unauthorized access
	Slcer401ApplicationJSONObject *Slcer401ApplicationJSON
	// No record found
	Slcer404ApplicationJSONObject *Slcer404ApplicationJSON
	// Internal server error
	Slcer500ApplicationJSONObject *Slcer500ApplicationJSON
	// Bad gateway
	Slcer502ApplicationJSONObject *Slcer502ApplicationJSON
	// Service unavailable
	Slcer503ApplicationJSONObject *Slcer503ApplicationJSON
	// Gateway timeout
	Slcer504ApplicationJSONObject *Slcer504ApplicationJSON
}
