// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUpdateUserActionEnum
type GETUpdateUserActionEnum string

const (
	GETUpdateUserActionEnumUpdateUser GETUpdateUserActionEnum = "UpdateUser"
)

func (e GETUpdateUserActionEnum) ToPointer() *GETUpdateUserActionEnum {
	return &e
}

func (e *GETUpdateUserActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UpdateUser":
		*e = GETUpdateUserActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateUserActionEnum: %v", v)
	}
}

// GETUpdateUserVersionEnum
type GETUpdateUserVersionEnum string

const (
	GETUpdateUserVersionEnumTwoThousandAndTen0508 GETUpdateUserVersionEnum = "2010-05-08"
)

func (e GETUpdateUserVersionEnum) ToPointer() *GETUpdateUserVersionEnum {
	return &e
}

func (e *GETUpdateUserVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETUpdateUserVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateUserVersionEnum: %v", v)
	}
}

type GETUpdateUserRequest struct {
	Action GETUpdateUserActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
	NewPath *string `queryParam:"style=form,explode=true,name=NewPath"`
	// <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
	NewUserName *string `queryParam:"style=form,explode=true,name=NewUserName"`
	// <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          string                   `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETUpdateUserVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUpdateUserResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
