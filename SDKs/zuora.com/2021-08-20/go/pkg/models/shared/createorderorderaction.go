// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateOrderOrderActionTypeEnum - Type of order action.
//
// Unless the type of order action is `RenewSubscription`, you must use the corresponding field to provide information about the order action. For example, if the type of order action is `AddProduct`, you must set the `addProduct` field.
//
// Zuora returns an error if you set a field that corresponds to a different type of order action. For example, if the type of order action is `AddProduct`, Zuora returns an error if you set the `updateProduct` field.
//
// A [pending order](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Pending_Order_and_Subscription) supports the following order actions:
//   - CreateSubscription
//   - AddProduct
//   - UpdateProduct
//   - RemoveProduct
//   - RenewSubscription
//   - TermsAndConditions
//
// However, pending orders created through all order actions except for "Create new subscription":
//   - Do not impact the subscription status.
//   - Are in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
//
// A pending order is created in either of the following conditions:
//   - [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the service activation date is not set in your "Create an order" call.
//   - [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the customer acceptance date is not set in your "Create an order" call.
//   - When a charge in the subscription has its `triggerEvent` field set as `SpecificDate` and the `specificTriggerDate` field is not set in your "Create an order" API call.
type CreateOrderOrderActionTypeEnum string

const (
	CreateOrderOrderActionTypeEnumCreateSubscription CreateOrderOrderActionTypeEnum = "CreateSubscription"
	CreateOrderOrderActionTypeEnumTermsAndConditions CreateOrderOrderActionTypeEnum = "TermsAndConditions"
	CreateOrderOrderActionTypeEnumAddProduct         CreateOrderOrderActionTypeEnum = "AddProduct"
	CreateOrderOrderActionTypeEnumUpdateProduct      CreateOrderOrderActionTypeEnum = "UpdateProduct"
	CreateOrderOrderActionTypeEnumRemoveProduct      CreateOrderOrderActionTypeEnum = "RemoveProduct"
	CreateOrderOrderActionTypeEnumRenewSubscription  CreateOrderOrderActionTypeEnum = "RenewSubscription"
	CreateOrderOrderActionTypeEnumCancelSubscription CreateOrderOrderActionTypeEnum = "CancelSubscription"
	CreateOrderOrderActionTypeEnumOwnerTransfer      CreateOrderOrderActionTypeEnum = "OwnerTransfer"
	CreateOrderOrderActionTypeEnumSuspend            CreateOrderOrderActionTypeEnum = "Suspend"
	CreateOrderOrderActionTypeEnumResume             CreateOrderOrderActionTypeEnum = "Resume"
)

func (e *CreateOrderOrderActionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateSubscription":
		fallthrough
	case "TermsAndConditions":
		fallthrough
	case "AddProduct":
		fallthrough
	case "UpdateProduct":
		fallthrough
	case "RemoveProduct":
		fallthrough
	case "RenewSubscription":
		fallthrough
	case "CancelSubscription":
		fallthrough
	case "OwnerTransfer":
		fallthrough
	case "Suspend":
		fallthrough
	case "Resume":
		*e = CreateOrderOrderActionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrderOrderActionTypeEnum: %s", s)
	}
}

type CreateOrderOrderAction struct {
	// Information about an order action of type `addProduct`.
	//
	// If you want to create a pending order through the "Add product" order action, and if the charge's trigger condition is `Specific Date`, you must set a charge number in the `chargeNumber` field for the "Add product" order action. In this case, if you do not set it, Zuora will not generate the charge number for you.
	//
	// See more information about pending orders in [Pending Order and Subscription](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Pending_Order_and_Subscription).
	//
	AddProduct *CreateOrderRatePlanOverride `json:"addProduct,omitempty"`
	// Information about an order action of type `CancelSubscription`.
	//
	CancelSubscription *CancelSubscription `json:"cancelSubscription,omitempty"`
	// Information about an order action of type `CreateSubscription`.
	//
	CreateSubscription *CreateOrderCreateSubscription `json:"createSubscription,omitempty"`
	// Container for custom fields of an Order Action object.
	//
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	// Information about an order action of type `OwnerTransfer`.
	//
	// **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
	//
	OwnerTransfer *OwnerTransfer `json:"ownerTransfer,omitempty"`
	// Information about an order action of type `RemoveProduct`.
	//
	RemoveProduct *RemoveProduct `json:"removeProduct,omitempty"`
	// Information about an order action of type `Resume`.
	//
	Resume *CreateOrderResume `json:"resume,omitempty"`
	// Information about an order action of type `Suspend`.
	//
	Suspend *CreateOrderSuspend `json:"suspend,omitempty"`
	// Information about an order action of type `TermsAndConditions`.
	//
	TermsAndConditions *CreateOrderTermsAndConditions `json:"termsAndConditions,omitempty"`
	// Container for the contract effective, service activation, and customer acceptance dates of the order action.
	//
	// If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.
	//
	// If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.
	//
	// If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
	//  * AddProduct
	//  * UpdateProduct
	//  * RemoveProduct
	//  * RenewSubscription
	//  * TermsAndConditions
	//
	// If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
	//  * AddProduct
	//  * UpdateProduct
	//  * RemoveProduct
	//  * RenewSubscription
	//  * TermsAndConditions
	//
	TriggerDates []TriggerDate `json:"triggerDates,omitempty"`
	// Type of order action.
	//
	// Unless the type of order action is `RenewSubscription`, you must use the corresponding field to provide information about the order action. For example, if the type of order action is `AddProduct`, you must set the `addProduct` field.
	//
	// Zuora returns an error if you set a field that corresponds to a different type of order action. For example, if the type of order action is `AddProduct`, Zuora returns an error if you set the `updateProduct` field.
	//
	// A [pending order](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Pending_Order_and_Subscription) supports the following order actions:
	//  * CreateSubscription
	//  * AddProduct
	//  * UpdateProduct
	//  * RemoveProduct
	//  * RenewSubscription
	//  * TermsAndConditions
	//
	// However, pending orders created through all order actions except for "Create new subscription":
	//  * Do not impact the subscription status.
	//  * Are in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
	//
	// A pending order is created in either of the following conditions:
	//  * [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the service activation date is not set in your "Create an order" call.
	//  * [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the customer acceptance date is not set in your "Create an order" call.
	//  * When a charge in the subscription has its `triggerEvent` field set as `SpecificDate` and the `specificTriggerDate` field is not set in your "Create an order" API call.
	//
	Type CreateOrderOrderActionTypeEnum `json:"type"`
	// Information about an order action of type `UpdateProduct`.
	//
	UpdateProduct *CreateOrderRatePlanUpdate `json:"updateProduct,omitempty"`
}
