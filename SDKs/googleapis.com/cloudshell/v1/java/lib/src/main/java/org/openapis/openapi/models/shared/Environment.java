/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Environment - A Cloud Shell environment, which is defined as the combination of a Docker image specifying what is installed on the environment and a home directory containing the user's data that will remain across sessions. Each user has at least an environment with the ID "default".
 */
public class Environment {
    /**
     * Required. Immutable. Full path to the Docker image used to run this environment, e.g. "gcr.io/dev-con/cloud-devshell:latest".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dockerImage")
    public String dockerImage;
    public Environment withDockerImage(String dockerImage) {
        this.dockerImage = dockerImage;
        return this;
    }
    
    /**
     * Output only. The environment's identifier, unique among the user's environments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Environment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Immutable. Full name of this resource, in the format `users/{owner_email}/environments/{environment_id}`. `{owner_email}` is the email address of the user to whom this environment belongs, and `{environment_id}` is the identifier of this environment. For example, `users/someone@example.com/environments/default`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Environment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicKeys")
    public String[] publicKeys;
    public Environment withPublicKeys(String[] publicKeys) {
        this.publicKeys = publicKeys;
        return this;
    }
    
    /**
     * Output only. Host to which clients can connect to initiate SSH sessions with the environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sshHost")
    public String sshHost;
    public Environment withSshHost(String sshHost) {
        this.sshHost = sshHost;
        return this;
    }
    
    /**
     * Output only. Port to which clients can connect to initiate SSH sessions with the environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sshPort")
    public Integer sshPort;
    public Environment withSshPort(Integer sshPort) {
        this.sshPort = sshPort;
        return this;
    }
    
    /**
     * Output only. Username that clients should use when initiating SSH sessions with the environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sshUsername")
    public String sshUsername;
    public Environment withSshUsername(String sshUsername) {
        this.sshUsername = sshUsername;
        return this;
    }
    
    /**
     * Output only. Current execution state of this environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public EnvironmentStateEnum state;
    public Environment withState(EnvironmentStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webHost")
    public String webHost;
    public Environment withWebHost(String webHost) {
        this.webHost = webHost;
        return this;
    }
    
}
