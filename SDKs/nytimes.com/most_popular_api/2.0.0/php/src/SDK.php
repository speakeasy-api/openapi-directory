<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Get lists of NYT Articles based on shares, emails, and views.
 * 
 * http://developer.nytimes.com/
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see http://developer.nytimes.com/
 */
class SDK
{
	public const SERVERS = [
		'http://api.nytimes.com/svc/mostpopular/v2',
		'https://api.nytimes.com/svc/mostpopular/v2',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Most Emailed by Section & Time Period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonResponse
     */
	public function getMostemailedSectionTimePeriodJson(
        \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mostemailed/{section}/{time-period}.json', \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMostemailedSectionTimePeriodJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJSON200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMostemailedSectionTimePeriodJSON400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETMostemailedSectionTimePeriodJSON400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMostemailedSectionTimePeriodJSON403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Most Shared by Section & Time Period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonResponse
     */
	public function getMostsharedSectionTimePeriodJson(
        \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mostshared/{section}/{time-period}.json', \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMostsharedSectionTimePeriodJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJSON200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMostsharedSectionTimePeriodJSON400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETMostsharedSectionTimePeriodJSON400ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Most Viewed by Section & Time Period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonResponse
     */
	public function getMostviewedSectionTimePeriodJson(
        \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mostviewed/{section}/{time-period}.json', \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMostviewedSectionTimePeriodJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETMostviewedSectionTimePeriodJSON200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}