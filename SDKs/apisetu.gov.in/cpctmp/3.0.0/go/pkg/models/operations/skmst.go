// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SkmstSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SkmstRequestBodyCertificateParameters struct {
	// 10thRollNumber
	Txt10thRollNo string `json:"txt10thRollNo"`
	// Registration Number
	TxtCandidateAppSeq string `json:"txtCandidateAppSeq"`
	// ExamDate
	TxtExamDate string `json:"txtExamDate"`
}

// SkmstRequestBodyFormatEnum - The format of the certificate in response.
type SkmstRequestBodyFormatEnum string

const (
	SkmstRequestBodyFormatEnumPdf SkmstRequestBodyFormatEnum = "pdf"
)

func (e *SkmstRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SkmstRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SkmstRequestBodyFormatEnum: %s", s)
	}
}

// SkmstRequestBody - Request format
type SkmstRequestBody struct {
	CertificateParameters *SkmstRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SkmstRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Skmst504ApplicationJSONErrorEnum string

const (
	Skmst504ApplicationJSONErrorEnumGatewayTimeout Skmst504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Skmst504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Skmst504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst504ApplicationJSONErrorEnum: %s", s)
	}
}

type Skmst504ApplicationJSONErrorDescriptionEnum string

const (
	Skmst504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Skmst504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Skmst504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Skmst504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Skmst504ApplicationJSON - Gateway timeout
type Skmst504ApplicationJSON struct {
	Error            *Skmst504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skmst504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skmst503ApplicationJSONErrorEnum string

const (
	Skmst503ApplicationJSONErrorEnumServiceUnavailable Skmst503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Skmst503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Skmst503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst503ApplicationJSONErrorEnum: %s", s)
	}
}

type Skmst503ApplicationJSONErrorDescriptionEnum string

const (
	Skmst503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Skmst503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Skmst503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Skmst503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Skmst503ApplicationJSON - Service unavailable
type Skmst503ApplicationJSON struct {
	Error            *Skmst503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skmst503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skmst502ApplicationJSONErrorEnum string

const (
	Skmst502ApplicationJSONErrorEnumBadGatewy Skmst502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Skmst502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Skmst502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst502ApplicationJSONErrorEnum: %s", s)
	}
}

type Skmst502ApplicationJSONErrorDescriptionEnum string

const (
	Skmst502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Skmst502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Skmst502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Skmst502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Skmst502ApplicationJSON - Bad gateway
type Skmst502ApplicationJSON struct {
	Error            *Skmst502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skmst502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skmst500ApplicationJSONErrorEnum string

const (
	Skmst500ApplicationJSONErrorEnumInternalServerError Skmst500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Skmst500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Skmst500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst500ApplicationJSONErrorEnum: %s", s)
	}
}

type Skmst500ApplicationJSONErrorDescriptionEnum string

const (
	Skmst500ApplicationJSONErrorDescriptionEnumInternalServerError Skmst500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Skmst500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Skmst500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Skmst500ApplicationJSON - Internal server error
type Skmst500ApplicationJSON struct {
	Error            *Skmst500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skmst500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skmst404ApplicationJSONErrorEnum string

const (
	Skmst404ApplicationJSONErrorEnumRecordNotFound Skmst404ApplicationJSONErrorEnum = "record_not_found"
	Skmst404ApplicationJSONErrorEnumURLNotFound    Skmst404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Skmst404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Skmst404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst404ApplicationJSONErrorEnum: %s", s)
	}
}

type Skmst404ApplicationJSONErrorDescriptionEnum string

const (
	Skmst404ApplicationJSONErrorDescriptionEnumNoRecordFound               Skmst404ApplicationJSONErrorDescriptionEnum = "No record found"
	Skmst404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Skmst404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Skmst404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Skmst404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Skmst404ApplicationJSON - No record found
type Skmst404ApplicationJSON struct {
	Error            *Skmst404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skmst404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skmst401ApplicationJSONErrorEnum string

const (
	Skmst401ApplicationJSONErrorEnumInvalidAuthentication Skmst401ApplicationJSONErrorEnum = "invalid_authentication"
	Skmst401ApplicationJSONErrorEnumInvalidAuthorization  Skmst401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Skmst401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Skmst401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst401ApplicationJSONErrorEnum: %s", s)
	}
}

type Skmst401ApplicationJSONErrorDescriptionEnum string

const (
	Skmst401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Skmst401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Skmst401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Skmst401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Skmst401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Skmst401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Skmst401ApplicationJSON - Unauthorized access
type Skmst401ApplicationJSON struct {
	Error            *Skmst401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skmst401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Skmst400ApplicationJSONErrorEnum string

const (
	Skmst400ApplicationJSONErrorEnumMissingParameter Skmst400ApplicationJSONErrorEnum = "missing_parameter"
	Skmst400ApplicationJSONErrorEnumInvalidParameter Skmst400ApplicationJSONErrorEnum = "invalid_parameter"
	Skmst400ApplicationJSONErrorEnumInvalidFormat    Skmst400ApplicationJSONErrorEnum = "invalid_format"
	Skmst400ApplicationJSONErrorEnumInvalidTxnid     Skmst400ApplicationJSONErrorEnum = "invalid_txnid"
	Skmst400ApplicationJSONErrorEnumInvalidConsentid Skmst400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Skmst400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Skmst400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst400ApplicationJSONErrorEnum: %s", s)
	}
}

type Skmst400ApplicationJSONErrorDescriptionEnum string

const (
	Skmst400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Skmst400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Skmst400ApplicationJSONErrorDescriptionEnumBadRequest                              Skmst400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Skmst400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Skmst400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Skmst400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Skmst400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Skmst400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Skmst400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Skmst400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Skmst400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Skmst400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Skmst400ApplicationJSON - Bad request
type Skmst400ApplicationJSON struct {
	Error            *Skmst400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Skmst400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SkmstResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Skmst400ApplicationJSONObject *Skmst400ApplicationJSON
	// Unauthorized access
	Skmst401ApplicationJSONObject *Skmst401ApplicationJSON
	// No record found
	Skmst404ApplicationJSONObject *Skmst404ApplicationJSON
	// Internal server error
	Skmst500ApplicationJSONObject *Skmst500ApplicationJSON
	// Bad gateway
	Skmst502ApplicationJSONObject *Skmst502ApplicationJSON
	// Service unavailable
	Skmst503ApplicationJSONObject *Skmst503ApplicationJSON
	// Gateway timeout
	Skmst504ApplicationJSONObject *Skmst504ApplicationJSON
}
