"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import searchresult as shared_searchresult
from typing import Optional


@dataclasses.dataclass
class GetSearchEntitiesRequest:
    
    term: str = dataclasses.field(metadata={'path_param': { 'field_name': 'term', 'style': 'simple', 'explode': False }})
    r"""search string, e.g. shh, parkinson, femur"""  
    boost_fx: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'boost_fx', 'style': 'form', 'explode': True }})
    r"""boost function e.g. pow(edges,0.334)"""  
    boost_q: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'boost_q', 'style': 'form', 'explode': True }})
    r"""boost query e.g. category:genotype^-10"""  
    category: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category', 'style': 'form', 'explode': True }})
    r"""e.g. gene, disease"""  
    exclude_groups: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_groups', 'style': 'form', 'explode': True }})
    r"""Exclude grouping classes (classes with subclasses)"""  
    fq: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fq', 'style': 'form', 'explode': True }})
    r"""fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior."""  
    highlight_class: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'highlight_class', 'style': 'form', 'explode': True }})
    r"""highlight class"""  
    include_eqs: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_eqs', 'style': 'form', 'explode': True }})
    r"""Include equivalent ids in prefix filter"""  
    min_match: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_match', 'style': 'form', 'explode': True }})
    r"""minimum should match parameter, see solr docs for details"""  
    minimal_tokenizer: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minimal_tokenizer', 'style': 'form', 'explode': True }})
    r"""set to true to use the minimal tokenizer, good for variants and genotypes"""  
    prefix: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prefix', 'style': 'form', 'explode': True }})
    r"""ontology prefix: HP, -MONDO"""  
    rows: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rows', 'style': 'form', 'explode': True }})
    r"""number of rows"""  
    start: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""row number to start from"""  
    taxon: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'taxon', 'style': 'form', 'explode': True }})
    r"""taxon filter, eg NCBITaxon:9606, includes inferred taxa"""  
    

@dataclasses.dataclass
class GetSearchEntitiesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_result: Optional[shared_searchresult.SearchResult] = dataclasses.field(default=None)
    r"""Success"""  
    