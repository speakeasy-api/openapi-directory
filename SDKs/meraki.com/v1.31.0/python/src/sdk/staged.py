"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Staged:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_firmware_upgrades_staged_event(self, request: operations.CreateNetworkFirmwareUpgradesStagedEventRequest) -> operations.CreateNetworkFirmwareUpgradesStagedEventResponse:
        r"""Create a Staged Upgrade Event for a network
        Create a Staged Upgrade Event for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkFirmwareUpgradesStagedEventRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkFirmwareUpgradesStagedEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON])
                res.create_network_firmware_upgrades_staged_event_200_application_json_object = out

        return res

    def create_network_firmware_upgrades_staged_group(self, request: operations.CreateNetworkFirmwareUpgradesStagedGroupRequest) -> operations.CreateNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Create a Staged Upgrade Group for a network
        Create a Staged Upgrade Group for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_network_firmware_upgrades_staged_group_200_application_json_object = out

        return res

    def defer_network_firmware_upgrades_staged_events(self, request: operations.DeferNetworkFirmwareUpgradesStagedEventsRequest) -> operations.DeferNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Postpone by 1 week all pending staged upgrade stages for a network
        Postpone by 1 week all pending staged upgrade stages for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeferNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events/defer', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeferNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeferNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.defer_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    def delete_network_firmware_upgrades_staged_group(self, request: operations.DeleteNetworkFirmwareUpgradesStagedGroupRequest) -> operations.DeleteNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Delete a Staged Upgrade Group
        Delete a Staged Upgrade Group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network_firmware_upgrades_staged_events(self, request: operations.GetNetworkFirmwareUpgradesStagedEventsRequest) -> operations.GetNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Get the Staged Upgrade Event from a network
        Get the Staged Upgrade Event from a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.get_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    def get_network_firmware_upgrades_staged_group(self, request: operations.GetNetworkFirmwareUpgradesStagedGroupRequest) -> operations.GetNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Get a Staged Upgrade Group from a network
        Get a Staged Upgrade Group from a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSON])
                res.get_network_firmware_upgrades_staged_group_200_application_json_object = out

        return res

    def get_network_firmware_upgrades_staged_groups(self, request: operations.GetNetworkFirmwareUpgradesStagedGroupsRequest) -> operations.GetNetworkFirmwareUpgradesStagedGroupsResponse:
        r"""List of Staged Upgrade Groups in a network
        List of Staged Upgrade Groups in a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFirmwareUpgradesStagedGroupsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFirmwareUpgradesStagedGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkFirmwareUpgradesStagedGroups200ApplicationJSON]])
                res.get_network_firmware_upgrades_staged_groups_200_application_json_objects = out

        return res

    def get_network_firmware_upgrades_staged_stages(self, request: operations.GetNetworkFirmwareUpgradesStagedStagesRequest) -> operations.GetNetworkFirmwareUpgradesStagedStagesResponse:
        r"""Order of Staged Upgrade Groups in a network
        Order of Staged Upgrade Groups in a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkFirmwareUpgradesStagedStagesRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/stages', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkFirmwareUpgradesStagedStagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkFirmwareUpgradesStagedStages200ApplicationJSON]])
                res.get_network_firmware_upgrades_staged_stages_200_application_json_objects = out

        return res

    def rollbacks_network_firmware_upgrades_staged_events(self, request: operations.RollbacksNetworkFirmwareUpgradesStagedEventsRequest) -> operations.RollbacksNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Rollback a Staged Upgrade Event for a network
        Rollback a Staged Upgrade Event for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RollbacksNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RollbacksNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.rollbacks_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    def update_network_firmware_upgrades_staged_events(self, request: operations.UpdateNetworkFirmwareUpgradesStagedEventsRequest) -> operations.UpdateNetworkFirmwareUpgradesStagedEventsResponse:
        r"""Update the Staged Upgrade Event for a network
        Update the Staged Upgrade Event for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkFirmwareUpgradesStagedEventsRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/events', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkFirmwareUpgradesStagedEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkFirmwareUpgradesStagedEvents200ApplicationJSON])
                res.update_network_firmware_upgrades_staged_events_200_application_json_object = out

        return res

    def update_network_firmware_upgrades_staged_group(self, request: operations.UpdateNetworkFirmwareUpgradesStagedGroupRequest) -> operations.UpdateNetworkFirmwareUpgradesStagedGroupResponse:
        r"""Update a Staged Upgrade Group for a network
        Update a Staged Upgrade Group for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkFirmwareUpgradesStagedGroupRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkFirmwareUpgradesStagedGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_firmware_upgrades_staged_group_200_application_json_object = out

        return res

    def update_network_firmware_upgrades_staged_stages(self, request: operations.UpdateNetworkFirmwareUpgradesStagedStagesRequest) -> operations.UpdateNetworkFirmwareUpgradesStagedStagesResponse:
        r"""Assign Staged Upgrade Group order in the sequence.
        Assign Staged Upgrade Group order in the sequence.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkFirmwareUpgradesStagedStagesRequest, base_url, '/networks/{networkId}/firmwareUpgrades/staged/stages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkFirmwareUpgradesStagedStagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.UpdateNetworkFirmwareUpgradesStagedStages200ApplicationJSON]])
                res.update_network_firmware_upgrades_staged_stages_200_application_json_objects = out

        return res

    