<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Placements 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Generates tags for a placement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsResponse
     */
	public function dfareportingPlacementsGeneratetags(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/placements/generatetags', \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGeneratetagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placementsGenerateTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlacementsGenerateTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets one placement by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetResponse
     */
	public function dfareportingPlacementsGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/placements/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Placement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new placement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertResponse
     */
	public function dfareportingPlacementsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/placements', \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "placement", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Placement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of placements, possibly filtered. This method supports paging.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListResponse
     */
	public function dfareportingPlacementsList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/placements', \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placementsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlacementsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing placement. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchResponse
     */
	public function dfareportingPlacementsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/placements', \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "placement", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Placement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing placement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateResponse
     */
	public function dfareportingPlacementsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/placements', \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "placement", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingPlacementsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Placement', 'json');
            }
        }

        return $response;
    }
}