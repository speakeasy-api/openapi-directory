<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ClientConfig - The configuration of the circuit breaker for a service descriptor
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ClientConfig
{
    /**
     * Specify the factor to multiply the delay for each retry
     * 
     * @var int $backoffFactor
     */
	#[\JMS\Serializer\Annotation\SerializedName('backoffFactor')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $backoffFactor;
    
    /**
     * Specify how long each call should last at most in milliseconds
     * 
     * @var int $callTimeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('callTimeout')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $callTimeout;
    
    /**
     * Specify how long the global call (with retries) should last at most in milliseconds
     * 
     * @var int $globalTimeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('globalTimeout')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $globalTimeout;
    
    /**
     * Specify how many errors can pass before opening the circuit breaker
     * 
     * @var int $maxErrors
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxErrors')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $maxErrors;
    
    /**
     * Specify how many times the client will try to fetch the result of the request after an error before giving up.
     * 
     * @var int $retries
     */
	#[\JMS\Serializer\Annotation\SerializedName('retries')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $retries;
    
    /**
     * Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor
     * 
     * @var int $retryInitialDelay
     */
	#[\JMS\Serializer\Annotation\SerializedName('retryInitialDelay')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $retryInitialDelay;
    
    /**
     * Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted
     * 
     * @var int $sampleInterval
     */
	#[\JMS\Serializer\Annotation\SerializedName('sampleInterval')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $sampleInterval;
    
    /**
     * Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !
     * 
     * @var bool $useCircuitBreaker
     */
	#[\JMS\Serializer\Annotation\SerializedName('useCircuitBreaker')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $useCircuitBreaker;
    
	public function __construct()
	{
		$this->backoffFactor = 0;
		$this->callTimeout = 0;
		$this->globalTimeout = 0;
		$this->maxErrors = 0;
		$this->retries = 0;
		$this->retryInitialDelay = 0;
		$this->sampleInterval = 0;
		$this->useCircuitBreaker = false;
	}
}
