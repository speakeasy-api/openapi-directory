/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * ApplicationSummary - Successful operation
 */
public class ApplicationSummary {
    /**
     * The currency in which all energy cost values are being expressed.
     */
    
    public String costUnit;

    public ApplicationSummary withCostUnit(String costUnit) {
        this.costUnit = costUnit;
        return this;
    }
    
    /**
     * The list of devices attached to the application.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;: when using the &lt;b&gt;Applications&lt;/b&gt; service, this list is always empty. It is populated only when using the &lt;b&gt;Application Details&lt;/b&gt; service.
     */
    
    public DeviceSummary[] deviceSummaries;

    public ApplicationSummary withDeviceSummaries(DeviceSummary[] deviceSummaries) {
        this.deviceSummaries = deviceSummaries;
        return this;
    }
    
    /**
     * The unit in which all CO&lt;sub&gt;2&lt;/sub&gt; emission values are being expressed.
     */
    
    public String emittedCo2Unit;

    public ApplicationSummary withEmittedCo2Unit(String emittedCo2Unit) {
        this.emittedCo2Unit = emittedCo2Unit;
        return this;
    }
    
    /**
     * The unit in which all energy consumption values are being expressed.
     */
    
    public String energyConsumptionUnit;

    public ApplicationSummary withEnergyConsumptionUnit(String energyConsumptionUnit) {
        this.energyConsumptionUnit = energyConsumptionUnit;
        return this;
    }
    
    /**
     * The lowest heating margin among the heating margins of the devices attached to the application.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public Double heatingMargin;

    public ApplicationSummary withHeatingMargin(Double heatingMargin) {
        this.heatingMargin = heatingMargin;
        return this;
    }
    
    /**
     * The percentage of devices attached to the application, whose heating margin could be found.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public Double heatingMarginCoverage;

    public ApplicationSummary withHeatingMarginCoverage(Double heatingMarginCoverage) {
        this.heatingMarginCoverage = heatingMarginCoverage;
        return this;
    }
    
    /**
     * The name of the device having the lowest heating margin.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String heatingMarginDeviceName;

    public ApplicationSummary withHeatingMarginDeviceName(String heatingMarginDeviceName) {
        this.heatingMarginDeviceName = heatingMarginDeviceName;
        return this;
    }
    
    /**
     * The link to the details of the device having the lowest heating margin.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String heatingMarginDeviceUrl;

    public ApplicationSummary withHeatingMarginDeviceUrl(String heatingMarginDeviceUrl) {
        this.heatingMarginDeviceUrl = heatingMarginDeviceUrl;
        return this;
    }
    
    /**
     * The unit in which the heating margin of the application is being expressed.
     */
    
    public String heatingMarginUnit;

    public ApplicationSummary withHeatingMarginUnit(String heatingMarginUnit) {
        this.heatingMarginUnit = heatingMarginUnit;
        return this;
    }
    
    /**
     * The name of the key used to identify the application in the history table.
     */
    
    public String historyParentIdKey;

    public ApplicationSummary withHistoryParentIdKey(String historyParentIdKey) {
        this.historyParentIdKey = historyParentIdKey;
        return this;
    }
    
    /**
     * The ID of the application.
     */
    
    public String id;

    public ApplicationSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The name of the application.
     */
    
    public String name;

    public ApplicationSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of devices attached to the application.
     */
    
    public Integer numberOfDevices;

    public ApplicationSummary withNumberOfDevices(Integer numberOfDevices) {
        this.numberOfDevices = numberOfDevices;
        return this;
    }
    
    /**
     * The confidence score (percentage) for the daily energy consumption, energy cost and CO&lt;sub&gt;2&lt;/sub&gt; emission values.&lt;br&gt;The lower the confidence score, the more extrapolated the values are.
     */
    
    public Double oneDayConfidence;

    public ApplicationSummary withOneDayConfidence(Double oneDayConfidence) {
        this.oneDayConfidence = oneDayConfidence;
        return this;
    }
    
    /**
     * The daily cost of the energy consumed by the devices attached to the application.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneDayCost;

    public ApplicationSummary withOneDayCost(Double oneDayCost) {
        this.oneDayCost = oneDayCost;
        return this;
    }
    
    /**
     * The quantity of CO&lt;sub&gt;2&lt;/sub&gt; emitted by the devices attached to the application during one day.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneDayEmittedCo2;

    public ApplicationSummary withOneDayEmittedCo2(Double oneDayEmittedCo2) {
        this.oneDayEmittedCo2 = oneDayEmittedCo2;
        return this;
    }
    
    /**
     * The quantity of energy consumed by the devices attached to the application during one day.
     */
    
    public Double oneDayEnergyConsumption;

    public ApplicationSummary withOneDayEnergyConsumption(Double oneDayEnergyConsumption) {
        this.oneDayEnergyConsumption = oneDayEnergyConsumption;
        return this;
    }
    
    /**
     * The confidence score (percentage) for the monthly energy consumption, energy cost and CO&lt;sub&gt;2&lt;/sub&gt; emission values.&lt;br&gt;The lower the confidence score, the more extrapolated the values are.
     */
    
    public Double oneMonthConfidence;

    public ApplicationSummary withOneMonthConfidence(Double oneMonthConfidence) {
        this.oneMonthConfidence = oneMonthConfidence;
        return this;
    }
    
    /**
     * The monthly cost of the energy consumed by the devices attached to the application.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneMonthCost;

    public ApplicationSummary withOneMonthCost(Double oneMonthCost) {
        this.oneMonthCost = oneMonthCost;
        return this;
    }
    
    /**
     * The quantity of CO&lt;sub&gt;2&lt;/sub&gt; emitted by the devices attached to the application during one month.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneMonthEmittedCo2;

    public ApplicationSummary withOneMonthEmittedCo2(Double oneMonthEmittedCo2) {
        this.oneMonthEmittedCo2 = oneMonthEmittedCo2;
        return this;
    }
    
    /**
     * The quantity of energy consumed by the devices attached to the application during one month.
     */
    
    public Double oneMonthEnergyConsumption;

    public ApplicationSummary withOneMonthEnergyConsumption(Double oneMonthEnergyConsumption) {
        this.oneMonthEnergyConsumption = oneMonthEnergyConsumption;
        return this;
    }
    
    /**
     * The confidence score (percentage) for the yearly energy consumption, energy cost and CO&lt;sub&gt;2&lt;/sub&gt; emission values.&lt;br&gt;The lower the confidence score, the more extrapolated the values are.
     */
    
    public Double oneYearConfidence;

    public ApplicationSummary withOneYearConfidence(Double oneYearConfidence) {
        this.oneYearConfidence = oneYearConfidence;
        return this;
    }
    
    /**
     * The yearly cost of the energy consumed by the devices attached to the application.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneYearCost;

    public ApplicationSummary withOneYearCost(Double oneYearCost) {
        this.oneYearCost = oneYearCost;
        return this;
    }
    
    /**
     * The quantity of CO&lt;sub&gt;2&lt;/sub&gt; emitted by the devices attached to the application in one year.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneYearEmittedCo2;

    public ApplicationSummary withOneYearEmittedCo2(Double oneYearEmittedCo2) {
        this.oneYearEmittedCo2 = oneYearEmittedCo2;
        return this;
    }
    
    /**
     * The quantity of energy consumed by the devices attached to the application during one year.
     */
    
    public Double oneYearEnergyConsumption;

    public ApplicationSummary withOneYearEnergyConsumption(Double oneYearEnergyConsumption) {
        this.oneYearEnergyConsumption = oneYearEnergyConsumption;
        return this;
    }
    
    /**
     * The total power consumption of the devices attached to the application.
     */
    
    public Double totalPowerConsumption;

    public ApplicationSummary withTotalPowerConsumption(Double totalPowerConsumption) {
        this.totalPowerConsumption = totalPowerConsumption;
        return this;
    }
    
    /**
     * The unit in which the total power consumption of the devices attached to the application is being expressed.
     */
    
    public String totalPowerConsumptionUnit;

    public ApplicationSummary withTotalPowerConsumptionUnit(String totalPowerConsumptionUnit) {
        this.totalPowerConsumptionUnit = totalPowerConsumptionUnit;
        return this;
    }
    
    /**
     * The data collection time (as an Epoch time, in seconds).
     */
    
    public Long updateTimestamp;

    public ApplicationSummary withUpdateTimestamp(Long updateTimestamp) {
        this.updateTimestamp = updateTimestamp;
        return this;
    }
    
    /**
     * The link to the application details.
     */
    
    public String url;

    public ApplicationSummary withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public ApplicationSummary(){}
}
