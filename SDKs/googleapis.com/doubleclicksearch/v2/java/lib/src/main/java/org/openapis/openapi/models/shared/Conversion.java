/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Conversion - A conversion containing data relevant to DoubleClick Search.
 */
public class Conversion {
    /**
     * DS ad group ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adGroupId")
    public String adGroupId;
    public Conversion withAdGroupId(String adGroupId) {
        this.adGroupId = adGroupId;
        return this;
    }
    
    /**
     * DS ad ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adId")
    public String adId;
    public Conversion withAdId(String adId) {
        this.adId = adId;
        return this;
    }
    
    /**
     * DS advertiser ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserId")
    public String advertiserId;
    public Conversion withAdvertiserId(String advertiserId) {
        this.advertiserId = advertiserId;
        return this;
    }
    
    /**
     * DS agency ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agencyId")
    public String agencyId;
    public Conversion withAgencyId(String agencyId) {
        this.agencyId = agencyId;
        return this;
    }
    
    /**
     * Available to advertisers only after contacting DoubleClick Search customer support.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributionModel")
    public String attributionModel;
    public Conversion withAttributionModel(String attributionModel) {
        this.attributionModel = attributionModel;
        return this;
    }
    
    /**
     * DS campaign ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaignId")
    public String campaignId;
    public Conversion withCampaignId(String campaignId) {
        this.campaignId = campaignId;
        return this;
    }
    
    /**
     * Sales channel for the product. Acceptable values are: - "`local`": a physical store - "`online`": an online store 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    public String channel;
    public Conversion withChannel(String channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * DS click ID for the conversion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickId")
    public String clickId;
    public Conversion withClickId(String clickId) {
        this.clickId = clickId;
        return this;
    }
    
    /**
     * For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the `dsConversionId` or `floodlightOrderId` into this property depending on the advertiser's Floodlight instructions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversionId")
    public String conversionId;
    public Conversion withConversionId(String conversionId) {
        this.conversionId = conversionId;
        return this;
    }
    
    /**
     * The time at which the conversion was last modified, in epoch millis UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversionModifiedTimestamp")
    public String conversionModifiedTimestamp;
    public Conversion withConversionModifiedTimestamp(String conversionModifiedTimestamp) {
        this.conversionModifiedTimestamp = conversionModifiedTimestamp;
        return this;
    }
    
    /**
     * The time at which the conversion took place, in epoch millis UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversionTimestamp")
    public String conversionTimestamp;
    public Conversion withConversionTimestamp(String conversionTimestamp) {
        this.conversionTimestamp = conversionTimestamp;
        return this;
    }
    
    /**
     * Available to advertisers only after contacting DoubleClick Search customer support.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countMillis")
    public String countMillis;
    public Conversion withCountMillis(String countMillis) {
        this.countMillis = countMillis;
        return this;
    }
    
    /**
     * DS criterion (keyword) ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("criterionId")
    public String criterionId;
    public Conversion withCriterionId(String criterionId) {
        this.criterionId = criterionId;
        return this;
    }
    
    /**
     * The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public Conversion withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * Custom dimensions for the conversion, which can be used to filter data in a report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customDimension")
    public CustomDimension[] customDimension;
    public Conversion withCustomDimension(CustomDimension[] customDimension) {
        this.customDimension = customDimension;
        return this;
    }
    
    /**
     * Custom metrics for the conversion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customMetric")
    public CustomMetric[] customMetric;
    public Conversion withCustomMetric(CustomMetric[] customMetric) {
        this.customMetric = customMetric;
        return this;
    }
    
    /**
     * Customer ID of a client account in the new Search Ads 360 experience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    public String customerId;
    public Conversion withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * The type of device on which the conversion occurred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceType")
    public String deviceType;
    public Conversion withDeviceType(String deviceType) {
        this.deviceType = deviceType;
        return this;
    }
    
    /**
     * ID that DoubleClick Search generates for each conversion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dsConversionId")
    public String dsConversionId;
    public Conversion withDsConversionId(String dsConversionId) {
        this.dsConversionId = dsConversionId;
        return this;
    }
    
    /**
     * DS engine account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("engineAccountId")
    public String engineAccountId;
    public Conversion withEngineAccountId(String engineAccountId) {
        this.engineAccountId = engineAccountId;
        return this;
    }
    
    /**
     * The Floodlight order ID provided by the advertiser for the conversion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightOrderId")
    public String floodlightOrderId;
    public Conversion withFloodlightOrderId(String floodlightOrderId) {
        this.floodlightOrderId = floodlightOrderId;
        return this;
    }
    
    /**
     * ID that DS generates and uses to uniquely identify the inventory account that contains the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventoryAccountId")
    public String inventoryAccountId;
    public Conversion withInventoryAccountId(String inventoryAccountId) {
        this.inventoryAccountId = inventoryAccountId;
        return this;
    }
    
    /**
     * The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productCountry")
    public String productCountry;
    public Conversion withProductCountry(String productCountry) {
        this.productCountry = productCountry;
        return this;
    }
    
    /**
     * DS product group ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productGroupId")
    public String productGroupId;
    public Conversion withProductGroupId(String productGroupId) {
        this.productGroupId = productGroupId;
        return this;
    }
    
    /**
     * The product ID (SKU).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productId")
    public String productId;
    public Conversion withProductId(String productId) {
        this.productId = productId;
        return this;
    }
    
    /**
     * The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productLanguage")
    public String productLanguage;
    public Conversion withProductLanguage(String productLanguage) {
        this.productLanguage = productLanguage;
        return this;
    }
    
    /**
     * The quantity of this conversion, in millis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityMillis")
    public String quantityMillis;
    public Conversion withQuantityMillis(String quantityMillis) {
        this.quantityMillis = quantityMillis;
        return this;
    }
    
    /**
     * The revenue amount of this `TRANSACTION` conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of "10" enter "10000000" (10 million) in your request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revenueMicros")
    public String revenueMicros;
    public Conversion withRevenueMicros(String revenueMicros) {
        this.revenueMicros = revenueMicros;
        return this;
    }
    
    /**
     * The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segmentationId")
    public String segmentationId;
    public Conversion withSegmentationId(String segmentationId) {
        this.segmentationId = segmentationId;
        return this;
    }
    
    /**
     * The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segmentationName")
    public String segmentationName;
    public Conversion withSegmentationName(String segmentationName) {
        this.segmentationName = segmentationName;
        return this;
    }
    
    /**
     * The segmentation type of this conversion (for example, `FLOODLIGHT`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segmentationType")
    public String segmentationType;
    public Conversion withSegmentationType(String segmentationType) {
        this.segmentationType = segmentationType;
        return this;
    }
    
    /**
     * The state of the conversion, that is, either `ACTIVE` or `REMOVED`. Note: state DELETED is deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public Conversion withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The ID of the local store for which the product was advertised. Applicable only when the channel is "`local`".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storeId")
    public String storeId;
    public Conversion withStoreId(String storeId) {
        this.storeId = storeId;
        return this;
    }
    
    /**
     * The type of the conversion, that is, either `ACTION` or `TRANSACTION`. An `ACTION` conversion is an action by the user that has no monetarily quantifiable value, while a `TRANSACTION` conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (`ACTION`) versus ecommerce purchases (`TRANSACTION`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public Conversion withType(String type) {
        this.type = type;
        return this;
    }
    
}
