"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasecurityconfig as shared_datasecurityconfig
from ..shared import modeltype_enum as shared_modeltype_enum
from ..shared import tag as shared_tag
from ..shared import taskconfig as shared_taskconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFlywheelRequest:
    
    data_access_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataAccessRoleArn') }})  
    data_lake_s3_uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataLakeS3Uri') }})  
    flywheel_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FlywheelName') }})  
    active_model_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActiveModelArn'), 'exclude': lambda f: f is None }})  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientRequestToken'), 'exclude': lambda f: f is None }})  
    data_security_config: Optional[shared_datasecurityconfig.DataSecurityConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSecurityConfig'), 'exclude': lambda f: f is None }})  
    model_type: Optional[shared_modeltype_enum.ModelTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelType'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    task_config: Optional[shared_taskconfig.TaskConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskConfig'), 'exclude': lambda f: f is None }})  
    