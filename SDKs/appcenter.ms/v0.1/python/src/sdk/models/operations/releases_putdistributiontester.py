"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesPutDistributionTesterSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesPutDistributionTesterRequestBody:
    
    mandatory_update: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory_update') }})
    r"""Whether a release is mandatory for the given destination"""  
    

@dataclasses.dataclass
class ReleasesPutDistributionTesterRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    release_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'release_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the release"""  
    tester_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'tester_id', 'style': 'simple', 'explode': False }})
    r"""The id of the tester"""  
    request_body: Optional[ReleasesPutDistributionTesterRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    
class ReleasesPutDistributionTester404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesPutDistributionTester404ApplicationJSON:
    r"""A destination can't be found."""
    
    code: ReleasesPutDistributionTester404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclasses.dataclass
class ReleasesPutDistributionTesterResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_put_distribution_tester_404_application_json_object: Optional[ReleasesPutDistributionTester404ApplicationJSON] = dataclasses.field(default=None)
    r"""A destination can't be found."""  
    