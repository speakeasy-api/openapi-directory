<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Mqtt 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's MQTT TCP connection state
     * 
     * 0 - stopped, 2 - disconnected, 3 - connecting, 4 - connected, 5 - waiting for CONNACK, 6 - waiting for SUBACK, 7 - CONNACK received, in steady state
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetProtstateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetProtstateResponse
     */
	public function protocolMqttClientGetProtstate(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetProtstateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetProtstateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/protstate', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetProtstateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetProtstateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientGetProtstate200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's MQTT state
     * 
     * 0 means stopped, 1 means running
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetStateResponse
     */
	public function protocolMqttClientGetState(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/state', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientGetStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientGetState200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's current messages' cardinality
     * 
     * 0 or more
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageCardResponse
     */
	public function protocolMqttClientMessageCard(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/card', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientMessageCard200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's message attributes
     * 
     * Attribute can be topic, interval, count, sent , pre, post, properties(list of PUBLISH properties), properties.i (i-th PUBLISH property), properties.PROP-NAME (PUBLISH property with name PROP-NAME)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageGetResponse
     */
	public function protocolMqttClientMessageGet(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/get/{msgNum}/{attr}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientMessageGet200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's message attributes
     * 
     * Attribute can not be sent or properties . Use set/{msgNum}/count/{value} together with get/{msgNum}/count to throttle the outgoing MQTT message to the broker.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageSetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageSetResponse
     */
	public function protocolMqttClientMessageSet(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageSetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/set/{msgNum}/{attr}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientMessageSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientMessageSet200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Restart receiving messages from a subcription of the agent
     * 
     * Restarts a subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientResubscribeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientResubscribeResponse
     */
	public function protocolMqttClientResubscribe(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientResubscribeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientResubscribeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/resubscribe/{subNum}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientResubscribeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientResubscribeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolMqttClientResubscribe200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Abort agent's MQTT TCP session without sending DISCONNECT command
     * 
     * Abort a connection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeAbortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeAbortResponse
     */
	public function protocolMqttClientRuntimeAbort(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeAbortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeAbortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/abort', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeAbortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeAbortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientRuntimeAbort200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Start agent's MQTT TCP session
     * 
     * Start a connection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeConnectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeConnectResponse
     */
	public function protocolMqttClientRuntimeConnect(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeConnectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeConnectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/connect', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeConnectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeConnectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientRuntimeConnect200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Disconnect agent's MQTT TCP session by sending DISCONNECT command
     * 
     * Graceful disconnect
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeDisconnectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeDisconnectResponse
     */
	public function protocolMqttClientRuntimeDisconnect(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeDisconnectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeDisconnectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/disconnect', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeDisconnectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientRuntimeDisconnectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientRuntimeDisconnect200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT TCP connection target broker
     * 
     * Broker IP address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetBrokerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetBrokerResponse
     */
	public function protocolMqttClientSetBroker(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetBrokerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetBrokerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/broker/{brokerAddr}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetBrokerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetBrokerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetBroker200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT session
     * 
     * 1 for clean session , 0 not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetCleansessionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetCleansessionResponse
     */
	public function protocolMqttClientSetCleansession(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetCleansessionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetCleansessionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/cleansession/{cleanOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetCleansessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetCleansessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetCleansession200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT client ID
     * 
     * MQTT client ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetClientidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetClientidResponse
     */
	public function protocolMqttClientSetClientid(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetClientidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetClientidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/clientid/{clientID}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetClientidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetClientidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetClientid200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT TCP keepalive
     * 
     * Keep alive the TCP connection
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetKeepaliveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetKeepaliveResponse
     */
	public function protocolMqttClientSetKeepalive(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetKeepaliveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetKeepaliveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/keepalive/{aliveTime}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetKeepaliveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetKeepaliveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetKeepalive200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT disconnection action
     * 
     * Action to take when MQTT session is disconnected
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetOnDisconnectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetOnDisconnectResponse
     */
	public function protocolMqttClientSetOnDisconnect(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetOnDisconnectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetOnDisconnectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/on_disconnect/{action}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetOnDisconnectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetOnDisconnectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetOnDisconnect200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT client password
     * 
     * Client password
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPasswordResponse
     */
	public function protocolMqttClientSetPassword(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/password/{password}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetPassword200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT TCP connection target port
     * 
     * target TCP port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPortResponse
     */
	public function protocolMqttClientSetPort(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/port/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetPortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetPort200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT client username
     * 
     * Client username
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetUsernameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetUsernameResponse
     */
	public function protocolMqttClientSetUsername(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetUsernameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetUsernameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/username/{username}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetUsernameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetUsernameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetUsername200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT client's will
     * 
     * Will message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillmsgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillmsgResponse
     */
	public function protocolMqttClientSetWillmsg(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillmsgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillmsgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willmsg/{msg}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillmsgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillmsgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetWillmsg200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT will message's QOS field
     * 
     * QOS field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillqosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillqosResponse
     */
	public function protocolMqttClientSetWillqos(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillqosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillqosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willqos/{qos}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillqosRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillqosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetWillqos200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT retained will
     * 
     * Retaining will
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillretainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillretainResponse
     */
	public function protocolMqttClientSetWillretain(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillretainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillretainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willretain/{retain}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillretainRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWillretainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetWillretain200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT client will's topic
     * 
     * Will topic for the will message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWilltopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWilltopicResponse
     */
	public function protocolMqttClientSetWilltopic(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWilltopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWilltopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willtopic/{topic}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWilltopicRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSetWilltopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSetWilltopic200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's current subscriptions' cardinality
     * 
     * 0 or more
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeCardResponse
     */
	public function protocolMqttClientSubscribeCard(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/card', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSubscribeCard200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's subscription attributes
     * 
     * Attribute can be topic, properties(list of SUBSCRIBE properties), properties.i (i-th SUBSCRIBE property), properties.PROP-NAME (SUBSCRIBE property with name PROP-NAME)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeGetResponse
     */
	public function protocolMqttClientSubscribeGet(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/get/{subNum}/{attr}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSubscribeGet200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's subscribe attributes
     * 
     * Attribute can not be properties .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeSetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeSetResponse
     */
	public function protocolMqttClientSubscribeSet(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeSetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/set/{subNum}/{attr}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientSubscribeSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttClientSubscribeSet200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Stops receiving messages from a subcription of the agent
     * 
     * Stops a subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientUnsubscribeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientUnsubscribeResponse
     */
	public function protocolMqttClientUnsubscribe(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientUnsubscribeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientUnsubscribeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/unsubscribe/{subNum}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientUnsubscribeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttClientUnsubscribeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolMqttClientUnsubscribe200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's MQTT argument structure
     * 
     * Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetArgsResponse
     */
	public function protocolMqttGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's MQTT configuration
     * 
     * Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetConfigResponse
     */
	public function protocolMqttGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configMQTT = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigMQTT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's MQTT statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatisticsResponse
     */
	public function protocolMqttGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the MQTT statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatsHdrResponse
     */
	public function protocolMqttGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/mqtt/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolMqttGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's MQTT traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetTraceResponse
     */
	public function protocolMqttGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configMQTT = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigMQTT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT configuration
     * 
     * Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetConfigResponse
     */
	public function protocolMqttSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolMqttSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's MQTT traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetTraceResponse
     */
	public function protocolMqttSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/mqtt/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolMqttSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolMqttSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}