"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmfrontendseventbusprotoeventparameters as shared_enterprisecrmfrontendseventbusprotoeventparameters
from ..shared import enterprisecrmfrontendseventbusprotoparameterentry as shared_enterprisecrmfrontendseventbusprotoparameterentry
from ..shared import googlecloudintegrationsv1alphavaluetype as shared_googlecloudintegrationsv1alphavaluetype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIntegrationsV1alphaExecuteIntegrationsRequest:
    r"""The request for executing an integration."""
    
    do_not_propagate_error: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doNotPropagateError'), 'exclude': lambda f: f is None }})
    r"""Optional. Flag to determine how to should propagate errors. If this flag is set to be true, it will not throw an exception. Instead, it will return a {@link ExecuteIntegrationsResponse} with an execution id and error messages as PostWithTriggerIdExecutionException in {@link EventParameters}. The flag is set to be false by default."""  
    execution_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionId'), 'exclude': lambda f: f is None }})
    r"""Optional. The id of the ON_HOLD execution to be resumed."""  
    input_parameters: Optional[dict[str, shared_googlecloudintegrationsv1alphavaluetype.GoogleCloudIntegrationsV1alphaValueType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputParameters'), 'exclude': lambda f: f is None }})
    r"""Optional. Input parameters used by integration execution."""  
    parameter_entries: Optional[list[shared_enterprisecrmfrontendseventbusprotoparameterentry.EnterpriseCrmFrontendsEventbusProtoParameterEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameterEntries'), 'exclude': lambda f: f is None }})
    r"""Optional. Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution."""  
    parameters: Optional[shared_enterprisecrmfrontendseventbusprotoeventparameters.EnterpriseCrmFrontendsEventbusProtoEventParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see"""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""Optional. This is used to de-dup incoming request: if the duplicate request was detected, the response from the previous execution is returned."""  
    trigger_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerId'), 'exclude': lambda f: f is None }})
    r"""Required. Matched against all {@link TriggerConfig}s across all integrations. i.e. TriggerConfig.trigger_id.equals(trigger_id). The trigger_id is in the format of `api_trigger/TRIGGER_NAME`."""  
    