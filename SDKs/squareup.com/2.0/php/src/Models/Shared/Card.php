<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Card - Represents the payment details of a card to be used for payments. These
 * 
 * details are determined by the payment token generated by Web Payments SDK.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Card
{
    /**
     * Represents a postal address in a country. The address format is based 
     * 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Address $billingAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('billing_address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $billingAddress = null;
    
    /**
     * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
     * 
     * returns this field.
     * 
     * @var ?string $bin
     */
	#[\JMS\Serializer\Annotation\SerializedName('bin')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bin = null;
    
    /**
     * The card's brand.
     * 
     * @var ?string $cardBrand
     */
	#[\JMS\Serializer\Annotation\SerializedName('card_brand')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cardBrand = null;
    
    /**
     * The type of the card.
     * 
     * The Card object includes this field only in response to Payments API calls.
     * 
     * @var ?string $cardType
     */
	#[\JMS\Serializer\Annotation\SerializedName('card_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cardType = null;
    
    /**
     * The name of the cardholder.
     * 
     * @var ?string $cardholderName
     */
	#[\JMS\Serializer\Annotation\SerializedName('cardholder_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cardholderName = null;
    
    /**
     * The ID of a customer created using the Customers API to be associated with the card.
     * 
     * @var ?string $customerId
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customerId = null;
    
    /**
     * Indicates whether or not a card can be used for payments.
     * 
     * @var ?bool $enabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enabled = null;
    
    /**
     * The expiration month of the associated card as an integer between 1 and 12.
     * 
     * @var ?int $expMonth
     */
	#[\JMS\Serializer\Annotation\SerializedName('exp_month')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $expMonth = null;
    
    /**
     * The four-digit year of the card's expiration date.
     * 
     * @var ?int $expYear
     */
	#[\JMS\Serializer\Annotation\SerializedName('exp_year')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $expYear = null;
    
    /**
     * __Not currently set.__ Intended as a Square-assigned identifier, based
     * 
     * on the card number, to identify the card across multiple locations within a
     * single application.
     * 
     * @var ?string $fingerprint
     */
	#[\JMS\Serializer\Annotation\SerializedName('fingerprint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fingerprint = null;
    
    /**
     * Unique ID for this card. Generated by Square.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The last 4 digits of the card number.
     * 
     * @var ?string $last4
     */
	#[\JMS\Serializer\Annotation\SerializedName('last_4')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $last4 = null;
    
    /**
     * Indicates whether the Card is prepaid or not.
     * 
     * The Card object includes this field only in response to Payments API calls.
     * 
     * @var ?string $prepaidType
     */
	#[\JMS\Serializer\Annotation\SerializedName('prepaid_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $prepaidType = null;
    
    /**
     * An optional user-defined reference ID that associates this card with
     * 
     * another entity in an external system. For example, a customer ID from an
     * external customer management system.
     * 
     * @var ?string $referenceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('reference_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referenceId = null;
    
    /**
     * Current version number of the card. Increments with each card update. Requests to update an
     * 
     * existing Card object will be rejected unless the version in the request matches the current
     * version for the Card.
     * 
     * @var ?int $version
     */
	#[\JMS\Serializer\Annotation\SerializedName('version')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $version = null;
    
	public function __construct()
	{
		$this->billingAddress = null;
		$this->bin = null;
		$this->cardBrand = null;
		$this->cardType = null;
		$this->cardholderName = null;
		$this->customerId = null;
		$this->enabled = null;
		$this->expMonth = null;
		$this->expYear = null;
		$this->fingerprint = null;
		$this->id = null;
		$this->last4 = null;
		$this->prepaidType = null;
		$this->referenceId = null;
		$this->version = null;
	}
}
