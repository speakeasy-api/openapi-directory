// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETAssociatedEnclaveCertificateIamRolesActionEnum
type GETGETAssociatedEnclaveCertificateIamRolesActionEnum string

const (
	GETGETAssociatedEnclaveCertificateIamRolesActionEnumGetAssociatedEnclaveCertificateIamRoles GETGETAssociatedEnclaveCertificateIamRolesActionEnum = "GetAssociatedEnclaveCertificateIamRoles"
)

func (e *GETGETAssociatedEnclaveCertificateIamRolesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetAssociatedEnclaveCertificateIamRoles":
		*e = GETGETAssociatedEnclaveCertificateIamRolesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETAssociatedEnclaveCertificateIamRolesActionEnum: %s", s)
	}
}

// GETGETAssociatedEnclaveCertificateIamRolesVersionEnum
type GETGETAssociatedEnclaveCertificateIamRolesVersionEnum string

const (
	GETGETAssociatedEnclaveCertificateIamRolesVersionEnumTwoThousandAndSixteen1115 GETGETAssociatedEnclaveCertificateIamRolesVersionEnum = "2016-11-15"
)

func (e *GETGETAssociatedEnclaveCertificateIamRolesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETGETAssociatedEnclaveCertificateIamRolesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETAssociatedEnclaveCertificateIamRolesVersionEnum: %s", s)
	}
}

type GETGETAssociatedEnclaveCertificateIamRolesRequest struct {
	Action GETGETAssociatedEnclaveCertificateIamRolesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ARN of the ACM certificate for which to view the associated IAM roles, encryption keys, and Amazon S3 object information.
	CertificateArn string `queryParam:"style=form,explode=true,name=CertificateArn"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                                                 `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETGETAssociatedEnclaveCertificateIamRolesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETAssociatedEnclaveCertificateIamRolesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
