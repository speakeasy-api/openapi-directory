// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ParticipantFeedbackPathParams struct {
	// The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

// ParticipantFeedbackTypeEnum - Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
//
// If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
type ParticipantFeedbackTypeEnum string

const (
	ParticipantFeedbackTypeEnumPast    ParticipantFeedbackTypeEnum = "past"
	ParticipantFeedbackTypeEnumPastOne ParticipantFeedbackTypeEnum = "pastOne"
	ParticipantFeedbackTypeEnumLive    ParticipantFeedbackTypeEnum = "live"
)

func (e *ParticipantFeedbackTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "pastOne":
		fallthrough
	case "live":
		*e = ParticipantFeedbackTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParticipantFeedbackTypeEnum: %s", s)
	}
}

type ParticipantFeedbackQueryParams struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
	//
	// If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
	Type *ParticipantFeedbackTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ParticipantFeedbackRequest struct {
	PathParams  ParticipantFeedbackPathParams
	QueryParams ParticipantFeedbackQueryParams
}

// ParticipantFeedback200ApplicationXMLParticipantsQualityEnum - Feedback submitted by the participant.
//
// * `GOOD`: Thumbs up.
// * `NOT GOOD`: Thumbs down.
type ParticipantFeedback200ApplicationXMLParticipantsQualityEnum string

const (
	ParticipantFeedback200ApplicationXMLParticipantsQualityEnumGood    ParticipantFeedback200ApplicationXMLParticipantsQualityEnum = "GOOD"
	ParticipantFeedback200ApplicationXMLParticipantsQualityEnumNotGood ParticipantFeedback200ApplicationXMLParticipantsQualityEnum = "NOT GOOD"
)

func (e *ParticipantFeedback200ApplicationXMLParticipantsQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GOOD":
		fallthrough
	case "NOT GOOD":
		*e = ParticipantFeedback200ApplicationXMLParticipantsQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParticipantFeedback200ApplicationXMLParticipantsQualityEnum: %s", s)
	}
}

type ParticipantFeedback200ApplicationXMLParticipants struct {
	// Date and time at which the feedback was submitted.
	DateTime *time.Time
	// Email address of the participant.
	Email *string
	// Feedback submitted by the participant.
	//
	// * `GOOD`: Thumbs up.
	// * `NOT GOOD`: Thumbs down.
	Quality *ParticipantFeedback200ApplicationXMLParticipantsQualityEnum
	// User ID of the participant.
	UserID *string
}

// ParticipantFeedback200ApplicationXML - **HTTP Status Code:** `200`<br>
type ParticipantFeedback200ApplicationXML struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of records returned within a single API call.
	PageSize     *int64
	Participants []ParticipantFeedback200ApplicationXMLParticipants
}

// ParticipantFeedback200ApplicationJSONParticipantsQualityEnum - Feedback submitted by the participant.
//
// * `GOOD`: Thumbs up.
// * `NOT GOOD`: Thumbs down.
type ParticipantFeedback200ApplicationJSONParticipantsQualityEnum string

const (
	ParticipantFeedback200ApplicationJSONParticipantsQualityEnumGood    ParticipantFeedback200ApplicationJSONParticipantsQualityEnum = "GOOD"
	ParticipantFeedback200ApplicationJSONParticipantsQualityEnumNotGood ParticipantFeedback200ApplicationJSONParticipantsQualityEnum = "NOT GOOD"
)

func (e *ParticipantFeedback200ApplicationJSONParticipantsQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GOOD":
		fallthrough
	case "NOT GOOD":
		*e = ParticipantFeedback200ApplicationJSONParticipantsQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParticipantFeedback200ApplicationJSONParticipantsQualityEnum: %s", s)
	}
}

type ParticipantFeedback200ApplicationJSONParticipants struct {
	// Date and time at which the feedback was submitted.
	DateTime *time.Time `json:"date_time,omitempty"`
	// Email address of the participant.
	Email *string `json:"email,omitempty"`
	// Feedback submitted by the participant.
	//
	// * `GOOD`: Thumbs up.
	// * `NOT GOOD`: Thumbs down.
	Quality *ParticipantFeedback200ApplicationJSONParticipantsQualityEnum `json:"quality,omitempty"`
	// User ID of the participant.
	UserID *string `json:"user_id,omitempty"`
}

// ParticipantFeedback200ApplicationJSON - **HTTP Status Code:** `200`<br>
type ParticipantFeedback200ApplicationJSON struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned within a single API call.
	PageSize     *int64                                              `json:"page_size,omitempty"`
	Participants []ParticipantFeedback200ApplicationJSONParticipants `json:"participants,omitempty"`
}

type ParticipantFeedbackResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	//
	//
	ParticipantFeedback200ApplicationJSONObject *ParticipantFeedback200ApplicationJSON
}
