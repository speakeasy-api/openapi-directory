"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Roles:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_list_roles(self, request: operations.GetListRolesRequest) -> operations.GetListRolesResponse:
        r"""Get List of Roles
        Returns a list of available roles. The response is divided in pages. The query parameter `numItems` defines the number of items in each page, and consequently the amount of pages for the whole list.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/license-manager/site/pvt/roles/list/paged'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetListRolesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetListRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRolesResponse])
                res.list_roles_response = out

        return res

    def get_rolesby_user(self, request: operations.GetRolesbyUserRequest) -> operations.GetRolesbyUserResponse:
        r"""Get Roles by User/appKey
        Gets roles of a particular user or application key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRolesbyUserRequest, base_url, '/api/license-manager/users/{userId}/roles', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRolesbyUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetRolesbyUser200ApplicationJSON]])
                res.get_rolesby_user_200_application_json_objects = out

        return res

    def put_rolesin_user(self, request: operations.PutRolesinUserRequest) -> operations.PutRolesinUserResponse:
        r"""Put Roles in User/appKey
        Allows you to add roles to a particular user or application key by specifying the list of roles' IDs on the request's body.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRolesinUserRequest, base_url, '/api/license-manager/users/{userId}/roles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRolesinUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutRolesinUser400ApplicationJSON])
                res.put_rolesin_user_400_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutRolesinUser500ApplicationJSON])
                res.put_rolesin_user_500_application_json_object = out

        return res

    def remove_rolefrom_user(self, request: operations.RemoveRolefromUserRequest) -> operations.RemoveRolefromUserResponse:
        r"""Remove Role from User/appKey
        Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role's ID must be specified on the request path, not on the request body.
        
        
        > Note that a successful response returns a `204` response with an empty body. A deletion on a role or user that does not exist will also return a `204`. Thus, this method should not be used to verify the existence of a specific user or role.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveRolefromUserRequest, base_url, '/api/license-manager/users/{userId}/roles/{roleId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveRolefromUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 405]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveRolefromUser400ApplicationJSON])
                res.remove_rolefrom_user_400_application_json_object = out

        return res

    