<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class IMGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve an IM directory group
     * 
     * Retrieve an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
     * Scopes: `imgroup:read:admin`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupResponse
     */
	public function imGroup(
        \OpenAPI\OpenAPI\Models\Operations\ImGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\ImGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImGroup200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create an IM directory group
     * 
     * Create an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
     * **Scopes**: `imgroup:write:admin`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupCreateApplicationJSON $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupCreateResponse
     */
	public function imGroupCreate(
        \OpenAPI\OpenAPI\Models\Operations\ImGroupCreateApplicationJSON $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }
        else if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imGroupCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImGroupCreate201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete an IM directory group
     * 
     * Delete an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
     * Scopes: `imgroup:write:admin`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupDeleteResponse
     */
	public function imGroupDelete(
        \OpenAPI\OpenAPI\Models\Operations\ImGroupDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\ImGroupDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List IM directory group members
     * 
     * List the members of an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>
     * **Scope:** `imgroup:read:admin`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersResponse
     */
	public function imGroupMembers(
        \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups/{groupId}/members', \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ImGroupMembersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupMemberList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImGroupMembersGroupMemberList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add IM directory group members
     * 
     * Add members to an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>
     * **Scope:** `imgroup:write:admin`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateResponse
     */
	public function imGroupMembersCreate(
        \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups/{groupId}/members', \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imGroupMembersCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImGroupMembersCreate201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete an IM directory group member
     * 
     * Delete a member from an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>
     * Scopes: `imgroup:write:admin`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteResponse
     */
	public function imGroupMembersDelete(
        \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups/{groupId}/members/{memberId}', \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupMembersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an IM directory group
     * 
     * Update an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
     * **Scopes**: `imgroup:write:admin`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImGroupUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupUpdateResponse
     */
	public function imGroupUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ImGroupUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\ImGroupUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List IM directory groups
     * 
     * List [IM directory groups](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>
     * **Scopes**: `imgroup:read:admin`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ImGroupsResponse
     */
	public function imGroups(
    ): \OpenAPI\OpenAPI\Models\Operations\ImGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/im/groups');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\IMGroupsIMGroupList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}