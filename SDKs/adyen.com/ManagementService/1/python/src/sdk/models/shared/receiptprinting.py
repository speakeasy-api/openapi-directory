"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReceiptPrinting:
    
    merchant_approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantApproved'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when the payment is approved."""  
    merchant_cancelled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantCancelled'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when the transaction is cancelled."""  
    merchant_capture_approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantCaptureApproved'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when capturing the payment is approved."""  
    merchant_capture_refused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantCaptureRefused'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when capturing the payment is refused."""  
    merchant_refund_approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantRefundApproved'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when the refund is approved."""  
    merchant_refund_refused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantRefundRefused'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when the refund is refused."""  
    merchant_refused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantRefused'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when the payment is refused."""  
    merchant_void: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantVoid'), 'exclude': lambda f: f is None }})
    r"""Print a merchant receipt when a previous transaction is voided."""  
    shopper_approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperApproved'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when the payment is approved."""  
    shopper_cancelled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperCancelled'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when the transaction is cancelled."""  
    shopper_capture_approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperCaptureApproved'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when capturing the payment is approved."""  
    shopper_capture_refused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperCaptureRefused'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when capturing the payment is refused."""  
    shopper_refund_approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperRefundApproved'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when the refund is approved."""  
    shopper_refund_refused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperRefundRefused'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when the refund is refused."""  
    shopper_refused: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperRefused'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when the payment is refused."""  
    shopper_void: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperVoid'), 'exclude': lambda f: f is None }})
    r"""Print a shopper receipt when a previous transaction is voided."""  
    