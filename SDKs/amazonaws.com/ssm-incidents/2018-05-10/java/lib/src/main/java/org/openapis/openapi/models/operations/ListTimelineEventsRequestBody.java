/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ListTimelineEventsRequestBody {
    /**
     * &lt;p&gt;Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;eventTime&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;eventType&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note the following when deciding how to use Filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don't specify a Filter, the response includes all timeline events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify more than one filter in a single request, the response returns timeline events that match all filters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filters")
    public org.openapis.openapi.models.shared.Filter[] filters;

    public ListTimelineEventsRequestBody withFilters(org.openapis.openapi.models.shared.Filter[] filters) {
        this.filters = filters;
        return this;
    }
    
    /**
     * The Amazon Resource Name (ARN) of the incident that includes the timeline event.
     */
    @JsonProperty("incidentRecordArn")
    public String incidentRecordArn;

    public ListTimelineEventsRequestBody withIncidentRecordArn(String incidentRecordArn) {
        this.incidentRecordArn = incidentRecordArn;
        return this;
    }
    
    /**
     * The maximum number of results per page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxResults")
    public Long maxResults;

    public ListTimelineEventsRequestBody withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * The pagination token to continue to the next page of results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextToken")
    public String nextToken;

    public ListTimelineEventsRequestBody withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * Sort timeline events by the specified key value pair.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortBy")
    public ListTimelineEventsRequestBodySortByEnum sortBy;

    public ListTimelineEventsRequestBody withSortBy(ListTimelineEventsRequestBodySortByEnum sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Sorts the order of timeline events by the value specified in the &lt;code&gt;sortBy&lt;/code&gt; field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public ListTimelineEventsRequestBodySortOrderEnum sortOrder;

    public ListTimelineEventsRequestBody withSortOrder(ListTimelineEventsRequestBodySortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    public ListTimelineEventsRequestBody(@JsonProperty("incidentRecordArn") String incidentRecordArn) {
        this.incidentRecordArn = incidentRecordArn;
  }
}
