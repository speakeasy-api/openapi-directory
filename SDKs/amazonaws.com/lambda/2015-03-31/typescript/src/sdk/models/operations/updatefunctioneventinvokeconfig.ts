/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A configuration object that specifies the destination of an event after Lambda processes it.
 */
export class UpdateFunctionEventInvokeConfigRequestBodyDestinationConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "OnFailure" })
  @Type(() => shared.OnFailure)
  onFailure?: shared.OnFailure;

  @SpeakeasyMetadata()
  @Expose({ name: "OnSuccess" })
  @Type(() => shared.OnSuccess)
  onSuccess?: shared.OnSuccess;
}

export class UpdateFunctionEventInvokeConfigRequestBody extends SpeakeasyBase {
  /**
   * A configuration object that specifies the destination of an event after Lambda processes it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DestinationConfig" })
  @Type(() => UpdateFunctionEventInvokeConfigRequestBodyDestinationConfig)
  destinationConfig?: UpdateFunctionEventInvokeConfigRequestBodyDestinationConfig;

  /**
   * The maximum age of a request that Lambda sends to a function for processing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumEventAgeInSeconds" })
  maximumEventAgeInSeconds?: number;

  /**
   * The maximum number of times to retry when the function returns an error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumRetryAttempts" })
  maximumRetryAttempts?: number;
}

export class UpdateFunctionEventInvokeConfigRequest extends SpeakeasyBase {
  /**
   * <p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=FunctionName",
  })
  functionName: string;

  /**
   * A version number or alias name.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Qualifier",
  })
  qualifier?: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateFunctionEventInvokeConfigRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateFunctionEventInvokeConfigResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  functionEventInvokeConfig?: shared.FunctionEventInvokeConfig;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceException
   */
  @SpeakeasyMetadata()
  serviceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
