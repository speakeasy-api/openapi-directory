"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import faileddata as shared_faileddata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class QueuedResourceStateStateEnum(str, Enum):
    r"""State of the QueuedResource request."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    ACCEPTED = 'ACCEPTED'
    PROVISIONING = 'PROVISIONING'
    FAILED = 'FAILED'
    DELETING = 'DELETING'
    ACTIVE = 'ACTIVE'
    SUSPENDING = 'SUSPENDING'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueuedResourceState:
    r"""QueuedResourceState defines the details of the QueuedResource request."""
    
    accepted_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acceptedData'), 'exclude': lambda f: f is None }})
    r"""Further data for the accepted state."""  
    active_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeData'), 'exclude': lambda f: f is None }})
    r"""Further data for the active state."""  
    creating_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatingData'), 'exclude': lambda f: f is None }})
    r"""Further data for the creating state."""  
    deleting_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletingData'), 'exclude': lambda f: f is None }})
    r"""Further data for the deleting state."""  
    failed_data: Optional[shared_faileddata.FailedData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedData'), 'exclude': lambda f: f is None }})
    r"""Further data for the failed state."""  
    provisioning_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioningData'), 'exclude': lambda f: f is None }})
    r"""Further data for the provisioning state."""  
    state: Optional[QueuedResourceStateStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the QueuedResource request."""  
    suspended_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspendedData'), 'exclude': lambda f: f is None }})
    r"""Further data for the suspended state."""  
    suspending_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspendingData'), 'exclude': lambda f: f is None }})
    r"""Further data for the suspending state."""  
    