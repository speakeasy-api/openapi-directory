<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Rules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a Integration Rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdResponse
     */
	public function deleteAppsAppIdRulesRuleId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{app_id}/rules/{rule_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRulesRuleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 504) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Integration rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesResponse
     */
	public function getAppsAppIdRules(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{app_id}/rules', \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 504) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a Integration Rule by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdResponse
     */
	public function getAppsAppIdRulesRuleId(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{app_id}/rules/{rule_id}', \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRulesRuleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 504) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Integration Rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdResponse
     */
	public function patchAppsAppIdRulesRuleId(
        \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{app_id}/rules/{rule_id}', \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdRulesRuleIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 504) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Integration Rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesResponse
     */
	public function postAppsAppIdRules(
        \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{app_id}/rules', \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 504) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}