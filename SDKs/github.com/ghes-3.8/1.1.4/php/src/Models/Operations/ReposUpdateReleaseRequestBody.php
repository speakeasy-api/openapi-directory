<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ReposUpdateReleaseRequestBody
{
    /**
     * Text describing the contents of the tag.
     * 
     * @var ?string $body
     */
	#[\JMS\Serializer\Annotation\SerializedName('body')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $body = null;
    
    /**
     * `true` makes the release a draft, and `false` publishes the release.
     * 
     * @var ?bool $draft
     */
	#[\JMS\Serializer\Annotation\SerializedName('draft')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $draft = null;
    
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposUpdateReleaseRequestBodyMakeLatestEnum $makeLatest
     */
	#[\JMS\Serializer\Annotation\SerializedName('make_latest')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposUpdateReleaseRequestBodyMakeLatestEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposUpdateReleaseRequestBodyMakeLatestEnum $makeLatest = null;
    
    /**
     * The name of the release.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
     * 
     * @var ?bool $prerelease
     */
	#[\JMS\Serializer\Annotation\SerializedName('prerelease')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $prerelease = null;
    
    /**
     * The name of the tag.
     * 
     * @var ?string $tagName
     */
	#[\JMS\Serializer\Annotation\SerializedName('tag_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tagName = null;
    
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
     * 
     * @var ?string $targetCommitish
     */
	#[\JMS\Serializer\Annotation\SerializedName('target_commitish')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetCommitish = null;
    
	public function __construct()
	{
		$this->body = null;
		$this->draft = null;
		$this->makeLatest = null;
		$this->name = null;
		$this->prerelease = null;
		$this->tagName = null;
		$this->targetCommitish = null;
	}
}
