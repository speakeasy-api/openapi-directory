<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Orders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * BatchRetrieveOrders
     * 
     * Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.
     * 
     * If a given order ID does not exist, the ID is ignored instead of generating an error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveOrdersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveOrdersResponse
     */
	public function batchRetrieveOrders(
        \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveOrdersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/orders/batch-retrieve');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchRetrieveOrdersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchRetrieveOrdersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CalculateOrder
     * 
     * Enables applications to preview order pricing without creating an order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CalculateOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalculateOrderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalculateOrderResponse
     */
	public function calculateOrder(
        \OpenAPI\OpenAPI\Models\Shared\CalculateOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalculateOrderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalculateOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/orders/calculate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalculateOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calculateOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalculateOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateOrder
     * 
     * Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for
     * purchase and settings to apply to the purchase.
     * 
     * To pay for a created order, see 
     * [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
     * 
     * You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrderResponse
     */
	public function createOrder(
        \OpenAPI\OpenAPI\Models\Shared\CreateOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateOrderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * PayOrder
     * 
     * Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment)
     * or settle an order with a total of `0`.
     * 
     * The total of the `payment_ids` listed in the request must be equal to the order
     * total. Orders with a total amount of `0` can be marked as paid by specifying an empty
     * array of `payment_ids` in the request.
     * 
     * To be used with `PayOrder`, a payment must:
     * 
     * - Reference the order by specifying the `order_id` when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
     * Any approved payments that reference the same `order_id` not specified in the
     * `payment_ids` is canceled.
     * - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture).
     * Using a delayed capture payment with `PayOrder` completes the approved payment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PayOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PayOrderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PayOrderResponse
     */
	public function payOrder(
        \OpenAPI\OpenAPI\Models\Operations\PayOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PayOrderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PayOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/orders/{order_id}/pay', \OpenAPI\OpenAPI\Models\Operations\PayOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payOrderRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PayOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchOrders
     * 
     * Search all orders for one or more locations. Orders include all sales,
     * returns, and exchanges regardless of how or when they entered the Square
     * ecosystem (such as Point of Sale, Invoices, and Connect APIs).
     * 
     * `SearchOrders` requests need to specify which locations to search and define a
     * [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls
     * how to sort or filter the results. Your `SearchOrdersQuery` can:
     * 
     *   Set filter criteria.
     *   Set the sort order.
     *   Determine whether to return results as complete `Order` objects or as
     * [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.
     * 
     * Note that details for orders processed with Square Point of Sale while in
     * offline mode might not be transmitted to Square for up to 72 hours. Offline
     * orders have a `created_at` value that reflects the time the order was created,
     * not the time it was subsequently transmitted to Square.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchOrdersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchOrdersResponse
     */
	public function searchOrders(
        \OpenAPI\OpenAPI\Models\Shared\SearchOrdersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/orders/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchOrdersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchOrdersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveOrder
     * 
     * Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdResponse
     */
	public function getV2OrdersOrderId(
        \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/orders/{order_id}', \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2OrdersOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateOrder
     * 
     * Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting
     * fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.
     * 
     * An `UpdateOrder` request requires the following:
     * 
     * - The `order_id` in the endpoint path, identifying the order to update.
     * - The latest `version` of the order to update.
     * - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects)
     * containing only the fields to update and the version to which the update is
     * being applied.
     * - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
     * identifying the fields to clear.
     * 
     * To pay for an order, see 
     * [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdResponse
     */
	public function putV2OrdersOrderId(
        \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/orders/{order_id}', \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateOrderRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutV2OrdersOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateOrderResponse', 'json');
            }
        }

        return $response;
    }
}