"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PortfolioTemplates:
    r"""A portfolio template captures how an investor’s cash (once transferred to a pot) should be automatically invested by the system. A portfolio template consists of a set of investment products and the ratios in which these products must be bought, once cleared cash is available to invest.
    
    For example, a portfolio template ‘PT1’ has the following template
    
    Investment Product | Ratio
    -------------------|-------
    Investment Product A | 20%
    Investment Product B | 30%
    Investment Product C | 50%
    
    If GBP 100 is transferred to a pot linked to Portfolio template PT1, the following buy orders will be triggered
    
    * BUY Investment Product A for GBP 20
    * BUY Investment Product B for GBP 30
    * BUY Investment Product C for GBP 50
    
    ### Portfolio Creation
    
    Portfolio Templates can be created by the Wealth Manger (generic set of portfolio templates created in WealthOS and a single template will be assigned to an Investor’s pot based on suitability - e.g. robo advisory) 
    
    <!-- If a Portfolio template is created by an investor then the request must have `owner : \"investor\"` and `investor_id` populated with the relevant investor ID.  -->
    
    The ratios of investment products within a portfolio template must add up to a 100% - if this is not the case, the system will reject the portfolio creation or update. 
    
    Once cleared cash is available in a pot, the system can be instructed to trigger investment product buy requests based on the portfolio template linked to the pot.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_portfolio_template(self, request: operations.CreatePortfolioTemplateRequest, security: operations.CreatePortfolioTemplateSecurity) -> operations.CreatePortfolioTemplateResponse:
        r"""Create new Portfolio Template"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/portfolio-templates/v1/'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePortfolioTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePortfolioTemplate201ApplicationJSON])
                res.create_portfolio_template_201_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePortfolioTemplate400ApplicationJSON])
                res.create_portfolio_template_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePortfolioTemplate401ApplicationJSON])
                res.create_portfolio_template_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePortfolioTemplate403ApplicationJSON])
                res.create_portfolio_template_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePortfolioTemplate404ApplicationJSON])
                res.create_portfolio_template_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePortfolioTemplate429ApplicationJSON])
                res.create_portfolio_template_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePortfolioTemplate500ApplicationJSON])
                res.create_portfolio_template_500_application_json_object = out

        return res

    def get_all_portfolio_templates(self, request: operations.GetAllPortfolioTemplatesRequest, security: operations.GetAllPortfolioTemplatesSecurity) -> operations.GetAllPortfolioTemplatesResponse:
        r"""Get all the Portfolio templates
        Get all the portfolio templates
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/portfolio-templates/v1/'
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPortfolioTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPortfolioTemplates200ApplicationJSON])
                res.get_all_portfolio_templates_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPortfolioTemplates401ApplicationJSON])
                res.get_all_portfolio_templates_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPortfolioTemplates403ApplicationJSON])
                res.get_all_portfolio_templates_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPortfolioTemplates404ApplicationJSON])
                res.get_all_portfolio_templates_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPortfolioTemplates429ApplicationJSON])
                res.get_all_portfolio_templates_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllPortfolioTemplates500ApplicationJSON])
                res.get_all_portfolio_templates_500_application_json_object = out

        return res

    def get_portfolio_template(self, request: operations.GetPortfolioTemplateRequest, security: operations.GetPortfolioTemplateSecurity) -> operations.GetPortfolioTemplateResponse:
        r"""Retrive existing Portfolio template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPortfolioTemplateRequest, base_url, '/tenant/portfolio-templates/v1/{portfolio_template_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPortfolioTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioTemplate200ApplicationJSON])
                res.get_portfolio_template_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioTemplate401ApplicationJSON])
                res.get_portfolio_template_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioTemplate403ApplicationJSON])
                res.get_portfolio_template_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioTemplate404ApplicationJSON])
                res.get_portfolio_template_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioTemplate429ApplicationJSON])
                res.get_portfolio_template_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPortfolioTemplate500ApplicationJSON])
                res.get_portfolio_template_500_application_json_object = out

        return res

    def update_portfolio_template(self, request: operations.UpdatePortfolioTemplateRequest, security: operations.UpdatePortfolioTemplateSecurity) -> operations.UpdatePortfolioTemplateResponse:
        r"""Update existing Portfolio template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePortfolioTemplateRequest, base_url, '/tenant/portfolio-templates/v1/{portfolio_template_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePortfolioTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate200ApplicationJSON])
                res.update_portfolio_template_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate400ApplicationJSON])
                res.update_portfolio_template_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate401ApplicationJSON])
                res.update_portfolio_template_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate403ApplicationJSON])
                res.update_portfolio_template_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate404ApplicationJSON])
                res.update_portfolio_template_404_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate409ApplicationJSON])
                res.update_portfolio_template_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate429ApplicationJSON])
                res.update_portfolio_template_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePortfolioTemplate500ApplicationJSON])
                res.update_portfolio_template_500_application_json_object = out

        return res

    