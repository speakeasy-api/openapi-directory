"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityCorporationAddress:
    r"""The corporation's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityCorporationBeneficialOwnersElementIndividualAddress:
    r"""The person's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    
class EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityCorporationBeneficialOwnersElementIndividualIdentification:
    r"""A means of verifying the person's identity."""
    
    method: EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number_last4: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_last4') }})
    r"""The last 4 digits of the identification number that can be used to verify the individual's identity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityCorporationBeneficialOwnersElementIndividual:
    r"""Personal details for the beneficial owner."""
    
    address: EntityCorporationBeneficialOwnersElementIndividualAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The person's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: EntityCorporationBeneficialOwnersElementIndividualIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    
class EntityCorporationBeneficialOwnersElementProngEnum(str, Enum):
    r"""Why this person is considered a beneficial owner of the entity."""
    OWNERSHIP = 'ownership'
    CONTROL = 'control'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityCorporationBeneficialOwnersElement:
    
    company_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_title') }})
    r"""This person's role or title within the entity."""  
    individual: EntityCorporationBeneficialOwnersElementIndividual = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual') }})
    r"""Personal details for the beneficial owner."""  
    prong: EntityCorporationBeneficialOwnersElementProngEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prong') }})
    r"""Why this person is considered a beneficial owner of the entity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityCorporation:
    r"""Details of the corporation entity. Will be present if `structure` is equal to `corporation`."""
    
    address: EntityCorporationAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The corporation's address."""  
    beneficial_owners: list[EntityCorporationBeneficialOwnersElement] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beneficial_owners') }})
    r"""The identifying details of anyone controlling or owning 25% or more of the corporation."""  
    incorporation_state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incorporation_state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The legal name of the corporation."""  
    tax_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_identifier') }})
    r"""The Employer Identification Number (EIN) for the corporation."""  
    website: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website') }})
    r"""The website of the corporation."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityJointIndividualAddress:
    r"""The person's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    
class EntityJointIndividualIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityJointIndividualIdentification:
    r"""A means of verifying the person's identity."""
    
    method: EntityJointIndividualIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number_last4: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_last4') }})
    r"""The last 4 digits of the identification number that can be used to verify the individual's identity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityJointIndividual:
    
    address: EntityJointIndividualAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The person's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: EntityJointIndividualIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityJoint:
    r"""Details of the joint entity. Will be present if `structure` is equal to `joint`."""
    
    individuals: list[EntityJointIndividual] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individuals') }})
    r"""The two individuals that share control of the entity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The entity's name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityIndividualAddress:
    r"""The person's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    
class EntityIndividualIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityIndividualIdentification:
    r"""A means of verifying the person's identity."""
    
    method: EntityIndividualIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number_last4: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_last4') }})
    r"""The last 4 digits of the identification number that can be used to verify the individual's identity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityIndividual:
    r"""Details of the natural person entity. Will be present if `structure` is equal to `natural_person`."""
    
    address: EntityIndividualAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The person's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: EntityIndividualIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    
class EntityRelationshipEnum(str, Enum):
    r"""The relationship between your group and the entity."""
    AFFILIATED = 'affiliated'
    INFORMATIONAL = 'informational'
    UNAFFILIATED = 'unaffiliated'

class EntityStructureEnum(str, Enum):
    r"""The entity's legal structure."""
    CORPORATION = 'corporation'
    NATURAL_PERSON = 'natural_person'
    JOINT = 'joint'
    TRUST = 'trust'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntitySupplementalDocumentsElement:
    
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The File containing the document."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustAddress:
    r"""The trust's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    
class EntityTrustCategoryEnum(str, Enum):
    r"""Whether the trust is `revocable` or `irrevocable`."""
    REVOCABLE = 'revocable'
    IRREVOCABLE = 'irrevocable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustIndividualAddress:
    r"""The person's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    
class EntityTrustIndividualIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustIndividualIdentification:
    r"""A means of verifying the person's identity."""
    
    method: EntityTrustIndividualIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number_last4: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_last4') }})
    r"""The last 4 digits of the identification number that can be used to verify the individual's identity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustIndividual:
    r"""The grantor of the trust. Will be present if the `category` is `revocable`."""
    
    address: EntityTrustIndividualAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The person's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: EntityTrustIndividualIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustTrusteesElementIndividualAddress:
    r"""The person's address."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The ZIP code of the address."""  
    
class EntityTrustTrusteesElementIndividualIdentificationMethodEnum(str, Enum):
    r"""A method that can be used to verify the individual's identity."""
    SOCIAL_SECURITY_NUMBER = 'social_security_number'
    INDIVIDUAL_TAXPAYER_IDENTIFICATION_NUMBER = 'individual_taxpayer_identification_number'
    PASSPORT = 'passport'
    DRIVERS_LICENSE = 'drivers_license'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustTrusteesElementIndividualIdentification:
    r"""A means of verifying the person's identity."""
    
    method: EntityTrustTrusteesElementIndividualIdentificationMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""A method that can be used to verify the individual's identity."""  
    number_last4: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_last4') }})
    r"""The last 4 digits of the identification number that can be used to verify the individual's identity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustTrusteesElementIndividual:
    r"""The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`."""
    
    address: EntityTrustTrusteesElementIndividualAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The person's address."""  
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The person's date of birth in YYYY-MM-DD format."""  
    identification: EntityTrustTrusteesElementIndividualIdentification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identification') }})
    r"""A means of verifying the person's identity."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The person's legal name."""  
    
class EntityTrustTrusteesElementStructureEnum(str, Enum):
    r"""The structure of the trustee. Will always be equal to `individual`."""
    INDIVIDUAL = 'individual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrustTrusteesElement:
    
    individual: EntityTrustTrusteesElementIndividual = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual') }})
    r"""The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`."""  
    structure: EntityTrustTrusteesElementStructureEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structure') }})
    r"""The structure of the trustee. Will always be equal to `individual`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityTrust:
    r"""Details of the trust entity. Will be present if `structure` is equal to `trust`."""
    
    address: EntityTrustAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The trust's address."""  
    category: EntityTrustCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""Whether the trust is `revocable` or `irrevocable`."""  
    formation_document_file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formation_document_file_id') }})
    r"""The ID for the File containing the formation document of the trust."""  
    formation_state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formation_state') }})
    r"""The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed."""  
    grantor: EntityTrustIndividual = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grantor') }})
    r"""The grantor of the trust. Will be present if the `category` is `revocable`."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The trust's name"""  
    tax_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_identifier') }})
    r"""The Employer Identification Number (EIN) of the trust itself."""  
    trustees: list[EntityTrustTrusteesElement] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustees') }})
    r"""The trustees of the trust."""  
    
class EntityTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `entity`."""
    ENTITY = 'entity'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Entity:
    r"""Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts."""
    
    corporation: EntityCorporation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporation') }})
    r"""Details of the corporation entity. Will be present if `structure` is equal to `corporation`."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The entity's description for display purposes."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The entity's identifier."""  
    joint: EntityJoint = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joint') }})
    r"""Details of the joint entity. Will be present if `structure` is equal to `joint`."""  
    natural_person: EntityIndividual = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('natural_person') }})
    r"""Details of the natural person entity. Will be present if `structure` is equal to `natural_person`."""  
    relationship: EntityRelationshipEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship') }})
    r"""The relationship between your group and the entity."""  
    structure: EntityStructureEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structure') }})
    r"""The entity's legal structure."""  
    supplemental_documents: list[EntitySupplementalDocumentsElement] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supplemental_documents') }})
    r"""Additional documentation associated with the entity."""  
    trust: EntityTrust = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust') }})
    r"""Details of the trust entity. Will be present if `structure` is equal to `trust`."""  
    type: EntityTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `entity`."""  
    