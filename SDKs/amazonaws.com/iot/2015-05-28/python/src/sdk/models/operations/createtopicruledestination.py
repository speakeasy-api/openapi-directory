"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createtopicruledestinationresponse as shared_createtopicruledestinationresponse
from ..shared import httpurldestinationconfiguration as shared_httpurldestinationconfiguration
from ..shared import vpcdestinationconfiguration as shared_vpcdestinationconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTopicRuleDestinationRequestBodyDestinationConfiguration:
    r"""Configuration of the topic rule destination."""
    
    http_url_configuration: Optional[shared_httpurldestinationconfiguration.HTTPURLDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpUrlConfiguration'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_vpcdestinationconfiguration.VpcDestinationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConfiguration'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTopicRuleDestinationRequestBody:
    
    destination_configuration: CreateTopicRuleDestinationRequestBodyDestinationConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationConfiguration') }})
    r"""Configuration of the topic rule destination."""  
    

@dataclasses.dataclass
class CreateTopicRuleDestinationRequest:
    
    request_body: CreateTopicRuleDestinationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateTopicRuleDestinationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflicting_resource_update_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictingResourceUpdateException"""  
    create_topic_rule_destination_response: Optional[shared_createtopicruledestinationresponse.CreateTopicRuleDestinationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceAlreadyExistsException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    