"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Datacenters:
    r"""Each Datacenter represents a *virtual* Datacenter which is made up of possible many physical Datacenters where Servers are hosted.
    
    Datacenter names are composed from their Location and virtual Datacenter number, for example `fsn1-dc14` means virtual Datacenter `14` in Location `fsn1`.
    
    Right now there is only one Datacenter for each Location. The Datacenter numbers for `fsn`, `nbg` and `hel` are arbitrarily set to `14`, `3` and `2` for historic reasons and do not represent real physical Hetzner datacenters.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_datacenters(self, request: operations.GetDatacentersRequest) -> operations.GetDatacentersResponse:
        r"""Get all Datacenters
        Returns all Datacenter objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datacenters'
        
        query_params = utils.get_query_params(operations.GetDatacentersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatacentersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDatacenters200ApplicationJSON])
                res.get_datacenters_200_application_json_object = out

        return res

    def get_datacenters_id_(self, request: operations.GetDatacentersIDRequest) -> operations.GetDatacentersIDResponse:
        r"""Get a Datacenter
        Returns a specific Datacenter object.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDatacentersIDRequest, base_url, '/datacenters/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatacentersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDatacentersID200ApplicationJSON])
                res.get_datacenters_id_200_application_json_object = out

        return res

    