"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LabelFieldModification:
    r"""A modification to a label's field."""
    
    field_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldId'), 'exclude': lambda f: f is None }})
    r"""The ID of the field to be modified."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always drive#labelFieldModification."""  
    set_date_values: Optional[list[date]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setDateValues'), 'exclude': lambda f: f is None }})
    r"""Replaces a dateString field with these new values. The values must be strings in the RFC 3339 full-date format: YYYY-MM-DD."""  
    set_integer_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setIntegerValues'), 'exclude': lambda f: f is None }})
    r"""Replaces an integer field with these new values."""  
    set_selection_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setSelectionValues'), 'exclude': lambda f: f is None }})
    r"""Replaces a selection field with these new values."""  
    set_text_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setTextValues'), 'exclude': lambda f: f is None }})
    r"""Replaces a text field with these new values."""  
    set_user_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setUserValues'), 'exclude': lambda f: f is None }})
    r"""Replaces a user field with these new values. The values must be valid email addresses."""  
    unset_values: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unsetValues'), 'exclude': lambda f: f is None }})
    r"""Unsets the values for this field."""  
    