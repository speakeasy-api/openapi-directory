"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import agentstatus_enum as shared_agentstatus_enum
from ..shared import componentstatusdata as shared_componentstatusdata
from ..shared import updateagentstatusresponse as shared_updateagentstatusresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAgentStatusRequestBodyAggregateStatus:
    r"""Aggregate status of Agent components."""
    
    signature_map: Optional[dict[str, bool]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signatureMap'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_agentstatus_enum.AgentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAgentStatusRequestBody:
    
    aggregate_status: UpdateAgentStatusRequestBodyAggregateStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregateStatus') }})
    r"""Aggregate status of Agent components."""  
    component_statuses: list[shared_componentstatusdata.ComponentStatusData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentStatuses') }})
    r"""List of component statuses for agent."""  
    task_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskId') }})
    r"""GUID of agent task."""  
    

@dataclasses.dataclass
class UpdateAgentStatusRequest:
    
    agent_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'agentId', 'style': 'simple', 'explode': False }})
    r"""UUID of agent to update."""  
    request_body: UpdateAgentStatusRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateAgentStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    dependency_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DependencyException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    update_agent_status_response: Optional[shared_updateagentstatusresponse.UpdateAgentStatusResponse] = dataclasses.field(default=None)
    r"""Success"""  
    