// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetAggregateResourceConfigXAmzTargetEnum
type BatchGetAggregateResourceConfigXAmzTargetEnum string

const (
	BatchGetAggregateResourceConfigXAmzTargetEnumStarlingDoveServiceBatchGetAggregateResourceConfig BatchGetAggregateResourceConfigXAmzTargetEnum = "StarlingDoveService.BatchGetAggregateResourceConfig"
)

func (e *BatchGetAggregateResourceConfigXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "StarlingDoveService.BatchGetAggregateResourceConfig":
		*e = BatchGetAggregateResourceConfigXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetAggregateResourceConfigXAmzTargetEnum: %s", s)
	}
}

type BatchGetAggregateResourceConfigHeaders struct {
	XAmzAlgorithm     *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        BatchGetAggregateResourceConfigXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetAggregateResourceConfigRequest struct {
	Headers BatchGetAggregateResourceConfigHeaders
	Request shared.BatchGetAggregateResourceConfigRequest `request:"mediaType=application/json"`
}

type BatchGetAggregateResourceConfigResponse struct {
	// Success
	BatchGetAggregateResourceConfigResponse *shared.BatchGetAggregateResourceConfigResponse
	ContentType                             string
	// NoSuchConfigurationAggregatorException
	NoSuchConfigurationAggregatorException interface{}
	StatusCode                             int
	RawResponse                            *http.Response
	// ValidationException
	ValidationException interface{}
}
