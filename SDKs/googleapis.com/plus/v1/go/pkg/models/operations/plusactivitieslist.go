// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PlusActivitiesListSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PlusActivitiesListSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PlusActivitiesListSecurity struct {
	Option1 *PlusActivitiesListSecurityOption1 `security:"option"`
	Option2 *PlusActivitiesListSecurityOption2 `security:"option"`
}

// PlusActivitiesListCollectionEnum - The collection of activities to list.
type PlusActivitiesListCollectionEnum string

const (
	PlusActivitiesListCollectionEnumPublic PlusActivitiesListCollectionEnum = "public"
)

func (e *PlusActivitiesListCollectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		*e = PlusActivitiesListCollectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlusActivitiesListCollectionEnum: %s", s)
	}
}

type PlusActivitiesListPathParams struct {
	// The collection of activities to list.
	Collection PlusActivitiesListCollectionEnum `pathParam:"style=simple,explode=false,name=collection"`
	// The ID of the user to get activities for. The special value "me" can be used to indicate the authenticated user.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type PlusActivitiesListQueryParams struct {
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
}

type PlusActivitiesListRequest struct {
	PathParams  PlusActivitiesListPathParams
	QueryParams PlusActivitiesListQueryParams
	Security    PlusActivitiesListSecurity
}

type PlusActivitiesListResponse struct {
	// Successful response
	ActivityFeed *shared.ActivityFeed
	ContentType  string
	StatusCode   int
	RawResponse  *http.Response
}
