"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import committransactionrequest as shared_committransactionrequest
from ..shared import executestatementrequest as shared_executestatementrequest
from ..shared import fetchpagerequest as shared_fetchpagerequest
from ..shared import startsessionrequest as shared_startsessionrequest
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendCommandRequest:
    
    abort_transaction: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AbortTransaction'), 'exclude': lambda f: f is None }})  
    commit_transaction: Optional[shared_committransactionrequest.CommitTransactionRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommitTransaction'), 'exclude': lambda f: f is None }})  
    end_session: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndSession'), 'exclude': lambda f: f is None }})  
    execute_statement: Optional[shared_executestatementrequest.ExecuteStatementRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecuteStatement'), 'exclude': lambda f: f is None }})  
    fetch_page: Optional[shared_fetchpagerequest.FetchPageRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FetchPage'), 'exclude': lambda f: f is None }})  
    session_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SessionToken'), 'exclude': lambda f: f is None }})  
    start_session: Optional[shared_startsessionrequest.StartSessionRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartSession'), 'exclude': lambda f: f is None }})  
    start_transaction: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTransaction'), 'exclude': lambda f: f is None }})  
    