/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WebhookInput - Webhook is a user-defined callback, which can be maintained via API. CallFire will send POST request to a client's endpoint defined in webhook once one of assigned events is triggered. See [webhooks guide](https://developers.callfire.com/webhooks-guide.html) for more information about CallFire Webhooks API.
 */
public class WebhookInput {
    /**
     * URL that webhook will send POST to on resource event trigger
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback")
    public String callback;

    public WebhookInput withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public WebhookInput withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Comma separated list of events on resource that will trigger callbacks (ex: STARTED, STOPPED, FINISHED, etc...). 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    public String[] events;

    public WebhookInput withEvents(String[] events) {
        this.events = events;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    public Long expiresAt;

    public WebhookInput withExpiresAt(Long expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * A limit callback response to a particular fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public String fields;

    public WebhookInput withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * An id of a webhook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public WebhookInput withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * A name of a webhook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public WebhookInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonStrictSsl")
    public Boolean nonStrictSsl;

    public WebhookInput withNonStrictSsl(Boolean nonStrictSsl) {
        this.nonStrictSsl = nonStrictSsl;
        return this;
    }
    
    /**
     * A resource name that webhook is watching events on. Use GET /webhooks/resources to determine resources and events available (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    public String resource;

    public WebhookInput withResource(String resource) {
        this.resource = resource;
        return this;
    }
    
    /**
     * Webhook secret token which is used as a signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;

    public WebhookInput withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * If true is set then webhook triggers only once. Afterwards the webhook will be deleted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleUse")
    public Boolean singleUse;

    public WebhookInput withSingleUse(Boolean singleUse) {
        this.singleUse = singleUse;
        return this;
    }
    
    public WebhookInput(){}
}
