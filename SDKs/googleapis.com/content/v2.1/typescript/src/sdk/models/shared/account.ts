/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccountAdsLink } from "./accountadslink";
import {
  AccountAutomaticImprovements,
  AccountAutomaticImprovementsInput,
} from "./accountautomaticimprovements";
import { AccountBusinessInformation } from "./accountbusinessinformation";
import { AccountConversionSettings } from "./accountconversionsettings";
import { AccountGoogleMyBusinessLink } from "./accountgooglemybusinesslink";
import { AccountUser } from "./accountuser";
import { AccountYouTubeChannelLink } from "./accountyoutubechannellink";
import { Expose, Type } from "class-transformer";

/**
 * Account data. After the creation of a new account it may take a few minutes before it's fully operational. The methods delete, insert, and update require the admin role.
 */
export class AccountInput extends SpeakeasyBase {
  /**
   * Linked Ads accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the Ads interface or through the Google Ads API. To delete an active link, or to cancel a link request, remove it from the list.
   */
  @SpeakeasyMetadata({ elemType: AccountAdsLink })
  @Expose({ name: "adsLinks" })
  @Type(() => AccountAdsLink)
  adsLinks?: AccountAdsLink[];

  /**
   * Indicates whether the merchant sells adult content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adultContent" })
  adultContent?: boolean;

  /**
   * The automatic improvements of the account can be used to automatically update items, improve images and shipping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automaticImprovements" })
  @Type(() => AccountAutomaticImprovementsInput)
  automaticImprovements?: AccountAutomaticImprovementsInput;

  /**
   * Automatically created label IDs that are assigned to the account by CSS Center.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automaticLabelIds" })
  automaticLabelIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "businessInformation" })
  @Type(() => AccountBusinessInformation)
  businessInformation?: AccountBusinessInformation;

  /**
   * Settings for conversion tracking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conversionSettings" })
  @Type(() => AccountConversionSettings)
  conversionSettings?: AccountConversionSettings;

  /**
   * ID of CSS the account belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cssId" })
  cssId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "googleMyBusinessLink" })
  @Type(() => AccountGoogleMyBusinessLink)
  googleMyBusinessLink?: AccountGoogleMyBusinessLink;

  /**
   * Required. 64-bit Merchant Center account ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "`content#account`".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Manually created label IDs that are assigned to the account by CSS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelIds" })
  labelIds?: string[];

  /**
   * Required. Display name for the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Client-specific, locally-unique, internal ID for the child account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sellerId" })
  sellerId?: string;

  /**
   * Users with access to the account. Every account (except for subaccounts) must have at least one admin user.
   */
  @SpeakeasyMetadata({ elemType: AccountUser })
  @Expose({ name: "users" })
  @Type(() => AccountUser)
  users?: AccountUser[];

  /**
   * The merchant's website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "websiteUrl" })
  websiteUrl?: string;

  /**
   * Linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.
   */
  @SpeakeasyMetadata({ elemType: AccountYouTubeChannelLink })
  @Expose({ name: "youtubeChannelLinks" })
  @Type(() => AccountYouTubeChannelLink)
  youtubeChannelLinks?: AccountYouTubeChannelLink[];
}

/**
 * Account data. After the creation of a new account it may take a few minutes before it's fully operational. The methods delete, insert, and update require the admin role.
 */
export class Account extends SpeakeasyBase {
  /**
   * Output only. How the account is managed. Acceptable values are: - "`manual`" - "`automatic`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountManagement" })
  accountManagement?: string;

  /**
   * Linked Ads accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the Ads interface or through the Google Ads API. To delete an active link, or to cancel a link request, remove it from the list.
   */
  @SpeakeasyMetadata({ elemType: AccountAdsLink })
  @Expose({ name: "adsLinks" })
  @Type(() => AccountAdsLink)
  adsLinks?: AccountAdsLink[];

  /**
   * Indicates whether the merchant sells adult content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adultContent" })
  adultContent?: boolean;

  /**
   * The automatic improvements of the account can be used to automatically update items, improve images and shipping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automaticImprovements" })
  @Type(() => AccountAutomaticImprovements)
  automaticImprovements?: AccountAutomaticImprovements;

  /**
   * Automatically created label IDs that are assigned to the account by CSS Center.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automaticLabelIds" })
  automaticLabelIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "businessInformation" })
  @Type(() => AccountBusinessInformation)
  businessInformation?: AccountBusinessInformation;

  /**
   * Settings for conversion tracking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conversionSettings" })
  @Type(() => AccountConversionSettings)
  conversionSettings?: AccountConversionSettings;

  /**
   * ID of CSS the account belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cssId" })
  cssId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "googleMyBusinessLink" })
  @Type(() => AccountGoogleMyBusinessLink)
  googleMyBusinessLink?: AccountGoogleMyBusinessLink;

  /**
   * Required. 64-bit Merchant Center account ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "`content#account`".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Manually created label IDs that are assigned to the account by CSS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelIds" })
  labelIds?: string[];

  /**
   * Required. Display name for the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Client-specific, locally-unique, internal ID for the child account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sellerId" })
  sellerId?: string;

  /**
   * Users with access to the account. Every account (except for subaccounts) must have at least one admin user.
   */
  @SpeakeasyMetadata({ elemType: AccountUser })
  @Expose({ name: "users" })
  @Type(() => AccountUser)
  users?: AccountUser[];

  /**
   * The merchant's website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "websiteUrl" })
  websiteUrl?: string;

  /**
   * Linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.
   */
  @SpeakeasyMetadata({ elemType: AccountYouTubeChannelLink })
  @Expose({ name: "youtubeChannelLinks" })
  @Type(() => AccountYouTubeChannelLink)
  youtubeChannelLinks?: AccountYouTubeChannelLink[];
}
