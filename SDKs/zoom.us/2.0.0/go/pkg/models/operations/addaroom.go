// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AddARoomSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

// AddARoomApplicationJSONTypeEnum - Type of the Zoom Room.
type AddARoomApplicationJSONTypeEnum string

const (
	AddARoomApplicationJSONTypeEnumZoomRoom              AddARoomApplicationJSONTypeEnum = "ZoomRoom"
	AddARoomApplicationJSONTypeEnumSchedulingDisplayOnly AddARoomApplicationJSONTypeEnum = "SchedulingDisplayOnly"
	AddARoomApplicationJSONTypeEnumDigitalSignageOnly    AddARoomApplicationJSONTypeEnum = "DigitalSignageOnly"
)

func (e *AddARoomApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ZoomRoom":
		fallthrough
	case "SchedulingDisplayOnly":
		fallthrough
	case "DigitalSignageOnly":
		*e = AddARoomApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddARoomApplicationJSONTypeEnum: %s", s)
	}
}

type AddARoomApplicationJSON struct {
	// **Optional**<br>Location ID of the lowest level location in the [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) where the Zoom Room is to be added. For instance if the structure of the location hierarchy is set up as “country, states, city, campus, building, floor”, a room can only be added under the floor level location.
	//
	// This ID can be retrieved from the [List Zoom Room Locations](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms-location/listzrlocations) API.
	LocationID *string `json:"location_id,omitempty"`
	// Name of the Zoom Room.
	Name string `json:"name"`
	// Type of the Zoom Room.
	Type AddARoomApplicationJSONTypeEnum `json:"type"`
}

type AddARoomRequest struct {
	Request  *AddARoomApplicationJSON `request:"mediaType=application/json"`
	Security AddARoomSecurity
}

// AddARoom201ApplicationXMLTypeEnum - Type of the Zoom Room.
type AddARoom201ApplicationXMLTypeEnum string

const (
	AddARoom201ApplicationXMLTypeEnumZoomRoom              AddARoom201ApplicationXMLTypeEnum = "ZoomRoom"
	AddARoom201ApplicationXMLTypeEnumSchedulingDisplayOnly AddARoom201ApplicationXMLTypeEnum = "SchedulingDisplayOnly"
	AddARoom201ApplicationXMLTypeEnumDigitalSignageOnly    AddARoom201ApplicationXMLTypeEnum = "DigitalSignageOnly"
)

func (e *AddARoom201ApplicationXMLTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ZoomRoom":
		fallthrough
	case "SchedulingDisplayOnly":
		fallthrough
	case "DigitalSignageOnly":
		*e = AddARoom201ApplicationXMLTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddARoom201ApplicationXMLTypeEnum: %s", s)
	}
}

// AddARoom201ApplicationXML - **HTTP Status Code:** `201` **Created**<br>
// Zoom Room added successfully.
type AddARoom201ApplicationXML struct {
	// Unique Identifier of the Zoom Room.
	ID *string
	// Location ID of the location where the Zoom Room was added.
	LocationID *string
	// Name of the Zoom Room.
	Name *string
	// Globally unique identifier of the Zoom Room. Use this ID for the **Dashboard Zoom Room APIs**.
	RoomID *string
	// Type of the Zoom Room.
	Type *AddARoom201ApplicationXMLTypeEnum
}

// AddARoom201ApplicationJSONTypeEnum - Type of the Zoom Room.
type AddARoom201ApplicationJSONTypeEnum string

const (
	AddARoom201ApplicationJSONTypeEnumZoomRoom              AddARoom201ApplicationJSONTypeEnum = "ZoomRoom"
	AddARoom201ApplicationJSONTypeEnumSchedulingDisplayOnly AddARoom201ApplicationJSONTypeEnum = "SchedulingDisplayOnly"
	AddARoom201ApplicationJSONTypeEnumDigitalSignageOnly    AddARoom201ApplicationJSONTypeEnum = "DigitalSignageOnly"
)

func (e *AddARoom201ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ZoomRoom":
		fallthrough
	case "SchedulingDisplayOnly":
		fallthrough
	case "DigitalSignageOnly":
		*e = AddARoom201ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddARoom201ApplicationJSONTypeEnum: %s", s)
	}
}

// AddARoom201ApplicationJSON - **HTTP Status Code:** `201` **Created**<br>
// Zoom Room added successfully.
type AddARoom201ApplicationJSON struct {
	// Unique Identifier of the Zoom Room.
	ID *string `json:"id,omitempty"`
	// Location ID of the location where the Zoom Room was added.
	LocationID *string `json:"location_id,omitempty"`
	// Name of the Zoom Room.
	Name *string `json:"name,omitempty"`
	// Globally unique identifier of the Zoom Room. Use this ID for the **Dashboard Zoom Room APIs**.
	RoomID *string `json:"room_id,omitempty"`
	// Type of the Zoom Room.
	Type *AddARoom201ApplicationJSONTypeEnum `json:"type,omitempty"`
}

type AddARoomResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `201` **Created**<br>
	// Zoom Room added successfully.
	AddARoom201ApplicationJSONObject *AddARoom201ApplicationJSON
}
