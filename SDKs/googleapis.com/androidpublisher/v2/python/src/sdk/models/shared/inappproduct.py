"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import inappproductlisting as shared_inappproductlisting
from ..shared import price as shared_price
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InAppProduct:
    r"""Successful response"""
    
    default_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLanguage'), 'exclude': lambda f: f is None }})
    r"""The default language of the localized data, as defined by BCP 47. e.g. \\"en-US\\", \\"en-GB\\"."""  
    default_price: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultPrice'), 'exclude': lambda f: f is None }})  
    grace_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gracePeriod'), 'exclude': lambda f: f is None }})
    r"""Grace period of the subscription, specified in ISO 8601 format. It will allow developers to give their subscribers a grace period when the payment for the new recurrence period is declined. Acceptable values = \\"P3D\\" (three days), \\"P7D\\" (seven days), \\"P14D\\" (fourteen days), and \\"P30D\\" (thirty days)"""  
    listings: Optional[dict[str, shared_inappproductlisting.InAppProductListing]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listings'), 'exclude': lambda f: f is None }})
    r"""List of localized title and description data."""  
    package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageName'), 'exclude': lambda f: f is None }})
    r"""The package name of the parent app."""  
    prices: Optional[dict[str, shared_price.Price]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prices'), 'exclude': lambda f: f is None }})
    r"""Prices per buyer region. None of these prices should be zero. In-app products can never be free."""  
    purchase_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseType'), 'exclude': lambda f: f is None }})
    r"""Purchase type enum value. Unmodifiable after creation."""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""The stock-keeping-unit (SKU) of the product, unique within an app."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    subscription_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionPeriod'), 'exclude': lambda f: f is None }})
    r"""Subscription period, specified in ISO 8601 format. Acceptable values are \\"P1W\\" (one week), \\"P1M\\" (one month), \\"P3M\\" (three months), \\"P6M\\" (six months), and \\"P1Y\\" (one year)."""  
    trial_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialPeriod'), 'exclude': lambda f: f is None }})
    r"""Trial period, specified in ISO 8601 format. Acceptable values are anything between \\"P7D\\" (seven days) and \\"P999D\\" (999 days). Seasonal subscriptions cannot have a trial period."""  
    