"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumesCreateVolumeRequest:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the volume"""  
    size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""Size of the Volume in GB"""  
    automount: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automount'), 'exclude': lambda f: f is None }})
    r"""Auto-mount Volume after attach. `server` must be provided."""  
    format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""Format Volume after creation. One of: `xfs`, `ext4`"""  
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Location to create the Volume in (can be omitted if Server is specified)"""  
    server: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})
    r"""Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumes201ApplicationJSONActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumes201ApplicationJSONActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostVolumes201ApplicationJSONActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumes201ApplicationJSONAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostVolumes201ApplicationJSONActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostVolumes201ApplicationJSONActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostVolumes201ApplicationJSONActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumes201ApplicationJSONVolumeLocation:
    r"""Location of the Volume. Volume can only be attached to Servers in the same Location."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City the Location is closest to"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""ISO 3166-1 alpha-2 code of the country the Location resides in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Location"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the city closest to the Location"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the city closest to the Location"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Location"""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of network zone this Location resides in"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumes201ApplicationJSONVolumeProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class PostVolumes201ApplicationJSONVolumeStatusEnum(str, Enum):
    r"""Current status of the Volume"""
    CREATING = 'creating'
    AVAILABLE = 'available'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumes201ApplicationJSONVolume:
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    format: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format') }})
    r"""Filesystem of the Volume if formatted on creation, null if not formatted on creation"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    linux_device: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linux_device') }})
    r"""Device path on the file system for the Volume"""  
    location: PostVolumes201ApplicationJSONVolumeLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""Location of the Volume. Volume can only be attached to Servers in the same Location."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    protection: PostVolumes201ApplicationJSONVolumeProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    server: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server') }})
    r"""ID of the Server the Volume is attached to, null if it is not attached at all"""  
    size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""Size in GB of the Volume"""  
    status: PostVolumes201ApplicationJSONVolumeStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the Volume"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostVolumes201ApplicationJSON:
    r"""The `volume` key contains the Volume that was just created
    
    The `action` key contains the Action tracking Volume creation
    """
    
    action: PostVolumes201ApplicationJSONAction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})  
    next_actions: list[PostVolumes201ApplicationJSONAction] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_actions') }})  
    volume: PostVolumes201ApplicationJSONVolume = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume') }})  
    

@dataclasses.dataclass
class PostVolumesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_volumes_201_application_json_object: Optional[PostVolumes201ApplicationJSON] = dataclasses.field(default=None)
    r"""The `volume` key contains the Volume that was just created
    
    The `action` key contains the Action tracking Volume creation
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    