<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Electioneering 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:
     * 
     * _The communication refers to a clearly identified federal candidate._
     * 
     * _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._
     * 
     * _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringResponse
     */
	public function getElectioneering(
        \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/electioneering/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectioneeringRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->electioneeringPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ElectioneeringPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Electioneering communications costs aggregates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringAggregatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringAggregatesResponse
     */
	public function getElectioneeringAggregates(
        \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringAggregatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringAggregatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/electioneering/aggregates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectioneeringAggregatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringAggregatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->electioneeringByCandidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ElectioneeringByCandidatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Electioneering costs aggregated by candidate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringByCandidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringByCandidateResponse
     */
	public function getElectioneeringByCandidate(
        \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringByCandidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringByCandidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/electioneering/by_candidate/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectioneeringByCandidateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringByCandidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->electioneeringByCandidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ElectioneeringByCandidatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Total electioneering communications spent on candidates by cycle
     * or candidate election year
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringTotalsByCandidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringTotalsByCandidateResponse
     */
	public function getElectioneeringTotalsByCandidate(
        \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringTotalsByCandidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringTotalsByCandidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/electioneering/totals/by_candidate/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectioneeringTotalsByCandidateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectioneeringTotalsByCandidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ecTotalsByCandidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ECTotalsByCandidatePage', 'json');
            }
        }

        return $response;
    }
}