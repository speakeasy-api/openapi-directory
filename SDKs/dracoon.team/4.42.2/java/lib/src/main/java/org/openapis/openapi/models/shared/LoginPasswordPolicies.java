/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LoginPasswordPolicies - Login password policies
 */
public class LoginPasswordPolicies {
    /**
     * Password character rules
     */
    @JsonProperty("characterRules")
    public CharacterRules characterRules;
    public LoginPasswordPolicies withCharacterRules(CharacterRules characterRules) {
        this.characterRules = characterRules;
        return this;
    }
    
    /**
     * Minimum number of characters a password must contain
     */
    @JsonProperty("minLength")
    public Integer minLength;
    public LoginPasswordPolicies withMinLength(Integer minLength) {
        this.minLength = minLength;
        return this;
    }
    
    /**
     * Number of passwords to archive
     * 
     * (must be between `0` and `10`; `0` means that password history is disabled)
     */
    @JsonProperty("numberOfArchivedPasswords")
    public Integer numberOfArchivedPasswords;
    public LoginPasswordPolicies withNumberOfArchivedPasswords(Integer numberOfArchivedPasswords) {
        this.numberOfArchivedPasswords = numberOfArchivedPasswords;
        return this;
    }
    
    /**
     * Password expiration information
     */
    @JsonProperty("passwordExpiration")
    public PasswordExpiration passwordExpiration;
    public LoginPasswordPolicies withPasswordExpiration(PasswordExpiration passwordExpiration) {
        this.passwordExpiration = passwordExpiration;
        return this;
    }
    
    /**
     * Determines whether a password must NOT contain word(s) from a dictionary
     */
    @JsonProperty("rejectDictionaryWords")
    public Boolean rejectDictionaryWords;
    public LoginPasswordPolicies withRejectDictionaryWords(Boolean rejectDictionaryWords) {
        this.rejectDictionaryWords = rejectDictionaryWords;
        return this;
    }
    
    /**
     * Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
     * 
     * (min. 4 character pattern)
     */
    @JsonProperty("rejectKeyboardPatterns")
    public Boolean rejectKeyboardPatterns;
    public LoginPasswordPolicies withRejectKeyboardPatterns(Boolean rejectKeyboardPatterns) {
        this.rejectKeyboardPatterns = rejectKeyboardPatterns;
        return this;
    }
    
    /**
     * Determines whether a password must NOT contain user info (first name, last name, email, user name)
     */
    @JsonProperty("rejectUserInfo")
    public Boolean rejectUserInfo;
    public LoginPasswordPolicies withRejectUserInfo(Boolean rejectUserInfo) {
        this.rejectUserInfo = rejectUserInfo;
        return this;
    }
    
    /**
     * Modification date
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;
    public LoginPasswordPolicies withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * User information
     */
    @JsonProperty("updatedBy")
    public UserInfo updatedBy;
    public LoginPasswordPolicies withUpdatedBy(UserInfo updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
    /**
     * User lockout information
     */
    @JsonProperty("userLockout")
    public UserLockout userLockout;
    public LoginPasswordPolicies withUserLockout(UserLockout userLockout) {
        this.userLockout = userLockout;
        return this;
    }
    
}
