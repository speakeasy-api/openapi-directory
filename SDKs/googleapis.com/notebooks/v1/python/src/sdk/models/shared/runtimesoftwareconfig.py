"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import containerimage as shared_containerimage
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RuntimeSoftwareConfigPostStartupScriptBehaviorEnum(str, Enum):
    r"""Behavior for the post startup script."""
    POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED = 'POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED'
    RUN_EVERY_START = 'RUN_EVERY_START'
    DOWNLOAD_AND_RUN_EVERY_START = 'DOWNLOAD_AND_RUN_EVERY_START'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuntimeSoftwareConfigInput:
    r"""Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`"""
    
    custom_gpu_driver_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customGpuDriverPath'), 'exclude': lambda f: f is None }})
    r"""Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers."""  
    disable_terminal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableTerminal'), 'exclude': lambda f: f is None }})
    r"""Bool indicating whether JupyterLab terminal will be available or not. Default: False"""  
    enable_health_monitoring: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableHealthMonitoring'), 'exclude': lambda f: f is None }})
    r"""Verifies core internal services are running. Default: True"""  
    idle_shutdown: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleShutdown'), 'exclude': lambda f: f is None }})
    r"""Runtime will automatically shutdown after idle_shutdown_time. Default: True"""  
    idle_shutdown_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleShutdownTimeout'), 'exclude': lambda f: f is None }})
    r"""Time in minutes to wait before shutting down runtime. Default: 180 minutes"""  
    install_gpu_driver: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installGpuDriver'), 'exclude': lambda f: f is None }})
    r"""Install Nvidia Driver automatically. Default: True"""  
    kernels: Optional[list[shared_containerimage.ContainerImage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kernels'), 'exclude': lambda f: f is None }})
    r"""Optional. Use a list of container images to use as Kernels in the notebook instance."""  
    mixer_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mixerDisabled'), 'exclude': lambda f: f is None }})
    r"""Bool indicating whether mixer client should be disabled. Default: False"""  
    notebook_upgrade_schedule: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notebookUpgradeSchedule'), 'exclude': lambda f: f is None }})
    r"""Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron)."""  
    post_startup_script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postStartupScript'), 'exclude': lambda f: f is None }})
    r"""Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`)."""  
    post_startup_script_behavior: Optional[RuntimeSoftwareConfigPostStartupScriptBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postStartupScriptBehavior'), 'exclude': lambda f: f is None }})
    r"""Behavior for the post startup script."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuntimeSoftwareConfig:
    r"""Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`"""
    
    custom_gpu_driver_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customGpuDriverPath'), 'exclude': lambda f: f is None }})
    r"""Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers."""  
    disable_terminal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableTerminal'), 'exclude': lambda f: f is None }})
    r"""Bool indicating whether JupyterLab terminal will be available or not. Default: False"""  
    enable_health_monitoring: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableHealthMonitoring'), 'exclude': lambda f: f is None }})
    r"""Verifies core internal services are running. Default: True"""  
    idle_shutdown: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleShutdown'), 'exclude': lambda f: f is None }})
    r"""Runtime will automatically shutdown after idle_shutdown_time. Default: True"""  
    idle_shutdown_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleShutdownTimeout'), 'exclude': lambda f: f is None }})
    r"""Time in minutes to wait before shutting down runtime. Default: 180 minutes"""  
    install_gpu_driver: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installGpuDriver'), 'exclude': lambda f: f is None }})
    r"""Install Nvidia Driver automatically. Default: True"""  
    kernels: Optional[list[shared_containerimage.ContainerImage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kernels'), 'exclude': lambda f: f is None }})
    r"""Optional. Use a list of container images to use as Kernels in the notebook instance."""  
    mixer_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mixerDisabled'), 'exclude': lambda f: f is None }})
    r"""Bool indicating whether mixer client should be disabled. Default: False"""  
    notebook_upgrade_schedule: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notebookUpgradeSchedule'), 'exclude': lambda f: f is None }})
    r"""Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron)."""  
    post_startup_script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postStartupScript'), 'exclude': lambda f: f is None }})
    r"""Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`)."""  
    post_startup_script_behavior: Optional[RuntimeSoftwareConfigPostStartupScriptBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postStartupScriptBehavior'), 'exclude': lambda f: f is None }})
    r"""Behavior for the post startup script."""  
    upgradeable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeable'), 'exclude': lambda f: f is None }})
    r"""Output only. Bool indicating whether an newer image is available in an image family."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Output only. version of boot image such as M100, from release label of the image."""  
    