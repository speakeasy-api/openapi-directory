/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The version to be updated to
 */
export class CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * The version ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;
}

/**
 * The pending firmware upgrade if it exists
 */
export class CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgrade extends SpeakeasyBase {
  /**
   * The version to be updated to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgradeToVersion
  )
  toVersion?: CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgradeToVersion;
}

/**
 * The network device to be updated
 */
export class CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitch extends SpeakeasyBase {
  /**
   * The pending firmware upgrade if it exists
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgrade
  )
  nextUpgrade?: CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitchNextUpgrade;
}

/**
 * Contains information about the network to update
 */
export class CreateNetworkFirmwareUpgradesStagedEventRequestBodyProducts extends SpeakeasyBase {
  /**
   * The network device to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "switch" })
  @Type(() => CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitch)
  switch?: CreateNetworkFirmwareUpgradesStagedEventRequestBodyProductsSwitch;
}

/**
 * The Staged Upgrade Group containing the name and ID
 */
export class CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesGroup extends SpeakeasyBase {
  /**
   * ID of the Staged Upgrade Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;
}

/**
 * The Staged Upgrade Milestones for the specific stage
 */
export class CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesMilestones extends SpeakeasyBase {
  /**
   * The start time of the staged upgrade stage. (In ISO-8601 format, in the time zone of the network.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduledFor" })
  scheduledFor: string;
}

export class CreateNetworkFirmwareUpgradesStagedEventRequestBodyStages extends SpeakeasyBase {
  /**
   * The Staged Upgrade Group containing the name and ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group" })
  @Type(() => CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesGroup)
  group?: CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesGroup;

  /**
   * The Staged Upgrade Milestones for the specific stage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "milestones" })
  @Type(
    () => CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesMilestones
  )
  milestones?: CreateNetworkFirmwareUpgradesStagedEventRequestBodyStagesMilestones;
}

export class CreateNetworkFirmwareUpgradesStagedEventRequestBody extends SpeakeasyBase {
  /**
   * Contains information about the network to update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "products" })
  @Type(() => CreateNetworkFirmwareUpgradesStagedEventRequestBodyProducts)
  products?: CreateNetworkFirmwareUpgradesStagedEventRequestBodyProducts;

  /**
   * All firmware upgrade stages in the network with their start time.
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkFirmwareUpgradesStagedEventRequestBodyStages,
  })
  @Expose({ name: "stages" })
  @Type(() => CreateNetworkFirmwareUpgradesStagedEventRequestBodyStages)
  stages: CreateNetworkFirmwareUpgradesStagedEventRequestBodyStages[];
}

export class CreateNetworkFirmwareUpgradesStagedEventRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNetworkFirmwareUpgradesStagedEventRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Details of the version the device will upgrade to
 */
export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgradeToVersion extends SpeakeasyBase {
  /**
   * Id of the Version being upgraded to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Firmware version short name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortName" })
  shortName?: string;
}

/**
 * Details of the next firmware upgrade
 */
export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgrade extends SpeakeasyBase {
  /**
   * Details of the version the device will upgrade to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toVersion" })
  @Type(
    () =>
      CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgradeToVersion
  )
  toVersion?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgradeToVersion;
}

/**
 * The Switch network to be updated
 */
export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitch extends SpeakeasyBase {
  /**
   * Details of the next firmware upgrade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextUpgrade" })
  @Type(
    () =>
      CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgrade
  )
  nextUpgrade?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitchNextUpgrade;
}

/**
 * The network devices to be updated
 */
export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProducts extends SpeakeasyBase {
  /**
   * The Switch network to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "switch" })
  @Type(
    () =>
      CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitch
  )
  switch?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProductsSwitch;
}

/**
 * Reason for the rollback
 */
export enum CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum {
  BrokeOldFeatures = "broke old features",
  Other = "other",
  Performance = "performance",
  Stability = "stability",
  Testing = "testing",
  UnifyingNetworksVersions = "unifying networks versions",
}

export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasons extends SpeakeasyBase {
  /**
   * Reason for the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasonsCategoryEnum;

  /**
   * Additional comment about the rollback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;
}

/**
 * The staged upgrade group
 */
export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesGroup extends SpeakeasyBase {
  /**
   * Description of the Staged Upgrade Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Id of the Staged Upgrade Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the Staged Upgrade Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * The Staged Upgrade Milestones for the stage
 */
export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesMilestones extends SpeakeasyBase {
  /**
   * Time that the group was canceled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canceledAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  canceledAt?: Date;

  /**
   * Finish time for the group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completedAt?: Date;

  /**
   * Scheduled start time for the group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduledFor" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledFor?: Date;

  /**
   * Start time for the group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedAt?: Date;
}

export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStages extends SpeakeasyBase {
  /**
   * The staged upgrade group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group" })
  @Type(
    () => CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesGroup
  )
  group?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesGroup;

  /**
   * The Staged Upgrade Milestones for the stage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "milestones" })
  @Type(
    () =>
      CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesMilestones
  )
  milestones?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStagesMilestones;

  /**
   * Current upgrade status of the group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}

/**
 * Successful operation
 */
export class CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON extends SpeakeasyBase {
  /**
   * The network devices to be updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "products" })
  @Type(
    () => CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProducts
  )
  products?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONProducts;

  /**
   * Reasons for the rollback
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasons,
  })
  @Expose({ name: "reasons" })
  @Type(() => CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasons)
  reasons?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONReasons[];

  /**
   * The ordered stages in the network
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStages,
  })
  @Expose({ name: "stages" })
  @Type(() => CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStages)
  stages?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSONStages[];
}

export class CreateNetworkFirmwareUpgradesStagedEventResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createNetworkFirmwareUpgradesStagedEvent200ApplicationJSONObject?: CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON;
}
