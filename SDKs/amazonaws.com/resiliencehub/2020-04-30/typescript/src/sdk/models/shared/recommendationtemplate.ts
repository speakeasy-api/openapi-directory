/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RecommendationTemplateStatusEnum } from "./recommendationtemplatestatusenum";
import { RenderRecommendationTypeEnum } from "./renderrecommendationtypeenum";
import { S3Location } from "./s3location";
import { TemplateFormatEnum } from "./templateformatenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Defines a recommendation template created with the <a>CreateRecommendationTemplate</a> action.
 */
export class RecommendationTemplate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appArn" })
  appArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "assessmentArn" })
  assessmentArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: TemplateFormatEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "needsReplacements" })
  needsReplacements?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "recommendationIds" })
  recommendationIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "recommendationTemplateArn" })
  recommendationTemplateArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recommendationTypes" })
  recommendationTypes: RenderRecommendationTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: RecommendationTemplateStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "templatesLocation" })
  @Type(() => S3Location)
  templatesLocation?: S3Location;
}
