"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listmitigationactionsresponse as shared_listmitigationactionsresponse
from enum import Enum
from typing import Any, Optional

class ListMitigationActionsActionTypeEnum(str, Enum):
    r"""Specify a value to limit the result to mitigation actions with a specific action type."""
    UPDATE_DEVICE_CERTIFICATE = 'UPDATE_DEVICE_CERTIFICATE'
    UPDATE_CA_CERTIFICATE = 'UPDATE_CA_CERTIFICATE'
    ADD_THINGS_TO_THING_GROUP = 'ADD_THINGS_TO_THING_GROUP'
    REPLACE_DEFAULT_POLICY_VERSION = 'REPLACE_DEFAULT_POLICY_VERSION'
    ENABLE_IOT_LOGGING = 'ENABLE_IOT_LOGGING'
    PUBLISH_FINDING_TO_SNS = 'PUBLISH_FINDING_TO_SNS'


@dataclasses.dataclass
class ListMitigationActionsRequest:
    
    action_type: Optional[ListMitigationActionsActionTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'actionType', 'style': 'form', 'explode': True }})
    r"""Specify a value to limit the result to mitigation actions with a specific action type."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return at one time. The default is 25."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""The token for the next set of results."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListMitigationActionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    list_mitigation_actions_response: Optional[shared_listmitigationactionsresponse.ListMitigationActionsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    