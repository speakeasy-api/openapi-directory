// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartTableDataImportJobRequestBodyDataFormatEnum -  The format of the data that is being imported. Currently the only option supported is "DELIMITED_TEXT".
type StartTableDataImportJobRequestBodyDataFormatEnum string

const (
	StartTableDataImportJobRequestBodyDataFormatEnumDelimitedText StartTableDataImportJobRequestBodyDataFormatEnum = "DELIMITED_TEXT"
)

func (e *StartTableDataImportJobRequestBodyDataFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DELIMITED_TEXT":
		*e = StartTableDataImportJobRequestBodyDataFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartTableDataImportJobRequestBodyDataFormatEnum: %s", s)
	}
}

// StartTableDataImportJobRequestBodyDataSource - An object that has details about the source of the data that was submitted for import.
type StartTableDataImportJobRequestBodyDataSource struct {
	DataSourceConfig *shared.ImportDataSourceConfig `json:"dataSourceConfig,omitempty"`
}

// StartTableDataImportJobRequestBodyImportOptions - An object that contains the options specified by the sumitter of the import request.
type StartTableDataImportJobRequestBodyImportOptions struct {
	DelimitedTextOptions *shared.DelimitedTextImportOptions `json:"delimitedTextOptions,omitempty"`
	DestinationOptions   *shared.DestinationOptions         `json:"destinationOptions,omitempty"`
}

type StartTableDataImportJobRequestBody struct {
	// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
	ClientRequestToken string `json:"clientRequestToken"`
	//  The format of the data that is being imported. Currently the only option supported is "DELIMITED_TEXT".
	DataFormat StartTableDataImportJobRequestBodyDataFormatEnum `json:"dataFormat"`
	// An object that has details about the source of the data that was submitted for import.
	DataSource StartTableDataImportJobRequestBodyDataSource `json:"dataSource"`
	// An object that contains the options specified by the sumitter of the import request.
	ImportOptions StartTableDataImportJobRequestBodyImportOptions `json:"importOptions"`
}

type StartTableDataImportJobRequest struct {
	RequestBody       StartTableDataImportJobRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// <p>The ID of the table where the rows are being imported.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
	TableID string `pathParam:"style=simple,explode=false,name=tableId"`
	// <p>The ID of the workbook where the rows are being imported.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
	WorkbookID string `pathParam:"style=simple,explode=false,name=workbookId"`
}

type StartTableDataImportJobResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// RequestTimeoutException
	RequestTimeoutException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// Success
	StartTableDataImportJobResult *shared.StartTableDataImportJobResult
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
