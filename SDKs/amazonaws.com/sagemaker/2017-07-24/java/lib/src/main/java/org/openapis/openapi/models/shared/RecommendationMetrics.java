/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RecommendationMetrics - The metrics of recommendations.
 */
public class RecommendationMetrics {
    @JsonProperty("CostPerHour")
    public Float costPerHour;

    public RecommendationMetrics withCostPerHour(Float costPerHour) {
        this.costPerHour = costPerHour;
        return this;
    }
    
    @JsonProperty("CostPerInference")
    public Float costPerInference;

    public RecommendationMetrics withCostPerInference(Float costPerInference) {
        this.costPerInference = costPerInference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CpuUtilization")
    public Float cpuUtilization;

    public RecommendationMetrics withCpuUtilization(Float cpuUtilization) {
        this.cpuUtilization = cpuUtilization;
        return this;
    }
    
    @JsonProperty("MaxInvocations")
    public Long maxInvocations;

    public RecommendationMetrics withMaxInvocations(Long maxInvocations) {
        this.maxInvocations = maxInvocations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MemoryUtilization")
    public Float memoryUtilization;

    public RecommendationMetrics withMemoryUtilization(Float memoryUtilization) {
        this.memoryUtilization = memoryUtilization;
        return this;
    }
    
    @JsonProperty("ModelLatency")
    public Long modelLatency;

    public RecommendationMetrics withModelLatency(Long modelLatency) {
        this.modelLatency = modelLatency;
        return this;
    }
    
    public RecommendationMetrics(@JsonProperty("CostPerHour") Float costPerHour, @JsonProperty("CostPerInference") Float costPerInference, @JsonProperty("MaxInvocations") Long maxInvocations, @JsonProperty("ModelLatency") Long modelLatency) {
        this.costPerHour = costPerHour;
        this.costPerInference = costPerInference;
        this.maxInvocations = maxInvocations;
        this.modelLatency = modelLatency;
  }
}
