"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apipassthrough as shared_apipassthrough
from ..shared import signingalgorithm_enum as shared_signingalgorithm_enum
from ..shared import validity as shared_validity
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IssueCertificateRequest:
    
    certificate_authority_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateAuthorityArn') }})  
    csr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Csr') }})  
    signing_algorithm: shared_signingalgorithm_enum.SigningAlgorithmEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SigningAlgorithm') }})  
    validity: shared_validity.Validity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Validity') }})  
    api_passthrough: Optional[shared_apipassthrough.APIPassthrough] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApiPassthrough'), 'exclude': lambda f: f is None }})  
    idempotency_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdempotencyToken'), 'exclude': lambda f: f is None }})  
    template_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateArn'), 'exclude': lambda f: f is None }})  
    validity_not_before: Optional[shared_validity.Validity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidityNotBefore'), 'exclude': lambda f: f is None }})  
    