/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StoryCollaborator } from "./storycollaborator";
import { View } from "./view";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Base model for all types
 */
export class Session extends SpeakeasyBase {
  /**
   * Description of a user that can collaborate on a story
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collaborator" })
  @Type(() => StoryCollaborator)
  collaborator?: StoryCollaborator;

  @SpeakeasyMetadata()
  @Expose({ name: "collaborator_id" })
  collaboratorId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "outline_revision" })
  outlineRevision?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;

  @SpeakeasyMetadata({ elemType: View })
  @Expose({ name: "views" })
  @Type(() => View)
  views?: View[];
}
