/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://azure-api.sportsdata.io/v3/soccer/scores",
  "https://azure-api.sportsdata.io/v3/soccer/scores",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Areas (Countries)
   */
  areasCountries(
    req: operations.AreasCountriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AreasCountriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AreasCountriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/Areas", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AreasCountriesResponse =
        new operations.AreasCountriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.areas = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.areas = utils.objectToClass(
              httpRes?.data,
              shared.Area,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Canceled Memberships
   */
  canceledMemberships(
    req: operations.CanceledMembershipsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CanceledMembershipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CanceledMembershipsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/CanceledMemberships",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CanceledMembershipsResponse =
        new operations.CanceledMembershipsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.canceledMembership = utils.objectToClass(
              httpRes?.data,
              shared.CanceledMembership
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Competition Fixtures (League Details)
   */
  competitionFixturesLeagueDetails(
    req: operations.CompetitionFixturesLeagueDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CompetitionFixturesLeagueDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompetitionFixturesLeagueDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/CompetitionDetails/{competition}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompetitionFixturesLeagueDetailsResponse =
        new operations.CompetitionFixturesLeagueDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.competitionDetail = utils.objectToClass(
              httpRes?.data,
              shared.CompetitionDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Competition Hierarchy (League Hierarchy)
   */
  competitionHierarchyLeagueHierarchy(
    req: operations.CompetitionHierarchyLeagueHierarchyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CompetitionHierarchyLeagueHierarchyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompetitionHierarchyLeagueHierarchyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/CompetitionHierarchy",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompetitionHierarchyLeagueHierarchyResponse =
        new operations.CompetitionHierarchyLeagueHierarchyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.areas = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.areas = utils.objectToClass(
              httpRes?.data,
              shared.Area,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Competitions (Leagues)
   */
  competitionsLeagues(
    req: operations.CompetitionsLeaguesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CompetitionsLeaguesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompetitionsLeaguesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Competitions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompetitionsLeaguesResponse =
        new operations.CompetitionsLeaguesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.competitions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.competitions = utils.objectToClass(
              httpRes?.data,
              shared.Competition,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Games by Date
   */
  gamesByDate(
    req: operations.GamesByDateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesByDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesByDateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/GamesByDate/{date}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesByDateResponse =
        new operations.GamesByDateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.games = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.games = utils.objectToClass(
              httpRes?.data,
              shared.Game,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Memberships (Active)
   */
  membershipsActive(
    req: operations.MembershipsActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MembershipsActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MembershipsActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/ActiveMemberships",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MembershipsActiveResponse =
        new operations.MembershipsActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberships = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberships = utils.objectToClass(
              httpRes?.data,
              shared.Membership,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Memberships by Competition (Active)
   */
  membershipsByCompetitionActive(
    req: operations.MembershipsByCompetitionActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MembershipsByCompetitionActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MembershipsByCompetitionActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/MembershipsByCompetition/{competition}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MembershipsByCompetitionActiveResponse =
        new operations.MembershipsByCompetitionActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberships = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberships = utils.objectToClass(
              httpRes?.data,
              shared.Membership,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Memberships by Competition (Historical)
   */
  membershipsByCompetitionHistorical(
    req: operations.MembershipsByCompetitionHistoricalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MembershipsByCompetitionHistoricalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MembershipsByCompetitionHistoricalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/HistoricalMembershipsByCompetition/{competition}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MembershipsByCompetitionHistoricalResponse =
        new operations.MembershipsByCompetitionHistoricalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberships = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberships = utils.objectToClass(
              httpRes?.data,
              shared.Membership,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Memberships by Team (Active)
   */
  membershipsByTeamActive(
    req: operations.MembershipsByTeamActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MembershipsByTeamActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MembershipsByTeamActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/MembershipsByTeam/{teamid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MembershipsByTeamActiveResponse =
        new operations.MembershipsByTeamActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberships = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberships = utils.objectToClass(
              httpRes?.data,
              shared.Membership,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Memberships by Team (Historical)
   */
  membershipsByTeamHistorical(
    req: operations.MembershipsByTeamHistoricalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MembershipsByTeamHistoricalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MembershipsByTeamHistoricalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/HistoricalMembershipsByTeam/{teamid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MembershipsByTeamHistoricalResponse =
        new operations.MembershipsByTeamHistoricalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberships = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberships = utils.objectToClass(
              httpRes?.data,
              shared.Membership,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Memberships (Historical)
   */
  membershipsHistorical(
    req: operations.MembershipsHistoricalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MembershipsHistoricalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MembershipsHistoricalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/HistoricalMemberships",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MembershipsHistoricalResponse =
        new operations.MembershipsHistoricalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberships = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberships = utils.objectToClass(
              httpRes?.data,
              shared.Membership,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Memberships (Recently Changed)
   */
  membershipsRecentlyChanged(
    req: operations.MembershipsRecentlyChangedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MembershipsRecentlyChangedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MembershipsRecentlyChangedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/RecentlyChangedMemberships/{days}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MembershipsRecentlyChangedResponse =
        new operations.MembershipsRecentlyChangedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.memberships = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.memberships = utils.objectToClass(
              httpRes?.data,
              shared.Membership,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Player
   */
  player(
    req: operations.PlayerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Player/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayerResponse = new operations.PlayerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.player = utils.objectToClass(httpRes?.data, shared.Player);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Players
   */
  players(
    req: operations.PlayersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/Players", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayersResponse = new operations.PlayersResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.players = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.players = utils.objectToClass(
              httpRes?.data,
              shared.Player,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Players by Team
   */
  playersByTeam(
    req: operations.PlayersByTeamRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayersByTeamResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayersByTeamRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayersByTeam/{teamid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayersByTeamResponse =
        new operations.PlayersByTeamResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.players = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.players = utils.objectToClass(
              httpRes?.data,
              shared.Player,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Schedule
   */
  schedule(
    req: operations.ScheduleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ScheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Schedule/{roundid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScheduleResponse = new operations.ScheduleResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.games = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.games = utils.objectToClass(
              httpRes?.data,
              shared.Game,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Season Teams
   */
  seasonTeams(
    req: operations.SeasonTeamsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SeasonTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SeasonTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/SeasonTeams/{seasonid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SeasonTeamsResponse =
        new operations.SeasonTeamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.seasonTeams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.seasonTeams = utils.objectToClass(
              httpRes?.data,
              shared.SeasonTeam,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Standings
   */
  standings(
    req: operations.StandingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StandingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StandingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Standings/{roundid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StandingsResponse =
        new operations.StandingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.standings = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.standings = utils.objectToClass(
              httpRes?.data,
              shared.Standing,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Team Game Stats by Date
   */
  teamGameStatsByDate(
    req: operations.TeamGameStatsByDateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamGameStatsByDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamGameStatsByDateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/TeamGameStatsByDate/{date}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TeamGameStatsByDateResponse =
        new operations.TeamGameStatsByDateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamGames = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamGames = utils.objectToClass(
              httpRes?.data,
              shared.TeamGame,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Team Season Stats
   */
  teamSeasonStats(
    req: operations.TeamSeasonStatsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamSeasonStatsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamSeasonStatsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/TeamSeasonStats/{roundid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TeamSeasonStatsResponse =
        new operations.TeamSeasonStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSeasons = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSeasons = utils.objectToClass(
              httpRes?.data,
              shared.TeamSeason,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Teams
   */
  teams(
    req: operations.TeamsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/Teams", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TeamsResponse = new operations.TeamsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upcoming Schedule By Player
   */
  upcomingScheduleByPlayer(
    req: operations.UpcomingScheduleByPlayerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpcomingScheduleByPlayerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpcomingScheduleByPlayerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/UpcomingScheduleByPlayer/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpcomingScheduleByPlayerResponse =
        new operations.UpcomingScheduleByPlayerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.games = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.games = utils.objectToClass(
              httpRes?.data,
              shared.Game,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Venues
   */
  venues(
    req: operations.VenuesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VenuesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VenuesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/Venues", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VenuesResponse = new operations.VenuesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.venues = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.venues = utils.objectToClass(
              httpRes?.data,
              shared.Venue,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
