"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nestedcable as shared_nestedcable
from ..shared import nesteddevice as shared_nesteddevice
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RearPortTypeLabelEnum(str, Enum):
    EIGHT_P8_C = '8P8C'
    ONE_HUNDRED_AND_TEN_PUNCH = '110 Punch'
    BNC = 'BNC'
    MRJ21 = 'MRJ21'
    FC = 'FC'
    LC = 'LC'
    LC_APC = 'LC/APC'
    LSH = 'LSH'
    LSH_APC = 'LSH/APC'
    MPO = 'MPO'
    MTRJ = 'MTRJ'
    SC = 'SC'
    SC_APC = 'SC/APC'
    ST = 'ST'

class RearPortTypeValueEnum(str, Enum):
    EIGHTP8C = '8p8c'
    ONE_HUNDRED_AND_TEN_PUNCH = '110-punch'
    BNC = 'bnc'
    MRJ21 = 'mrj21'
    FC = 'fc'
    LC = 'lc'
    LC_APC = 'lc-apc'
    LSH = 'lsh'
    LSH_APC = 'lsh-apc'
    MPO = 'mpo'
    MTRJ = 'mtrj'
    SC = 'sc'
    SC_APC = 'sc-apc'
    ST = 'st'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RearPortType:
    
    label: RearPortTypeLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: RearPortTypeValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RearPort:
    
    device: shared_nesteddevice.NestedDevice = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    type: RearPortType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    cable: Optional[shared_nestedcable.NestedCable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cable'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    positions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positions'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    