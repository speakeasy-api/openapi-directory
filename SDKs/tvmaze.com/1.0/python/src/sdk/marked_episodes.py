"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MarkedEpisodes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_user_episodes_episode_id_(self, request: operations.DeleteUserEpisodesEpisodeIDRequest) -> operations.DeleteUserEpisodesEpisodeIDResponse:
        r"""Unmark an episode"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserEpisodesEpisodeIDRequest, base_url, '/user/episodes/{episode_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserEpisodesEpisodeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_user_episodes(self, request: operations.GetUserEpisodesRequest) -> operations.GetUserEpisodesResponse:
        r"""List the marked episodes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/episodes'
        
        query_params = utils.get_query_params(operations.GetUserEpisodesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserEpisodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MarkedEpisode]])
                res.marked_episodes = out

        return res

    def get_user_episodes_episode_id_(self, request: operations.GetUserEpisodesEpisodeIDRequest) -> operations.GetUserEpisodesEpisodeIDResponse:
        r"""Check if an episode is marked"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserEpisodesEpisodeIDRequest, base_url, '/user/episodes/{episode_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserEpisodesEpisodeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarkedEpisode])
                res.marked_episode = out
        elif http_res.status_code == 404:
            pass

        return res

    def put_user_episodes_episode_id_(self, request: operations.PutUserEpisodesEpisodeIDRequest) -> operations.PutUserEpisodesEpisodeIDResponse:
        r"""Mark an episode
        Set `marked_at` to `NULL` or leave it out to use the current time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutUserEpisodesEpisodeIDRequest, base_url, '/user/episodes/{episode_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "marked_episode_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutUserEpisodesEpisodeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarkedEpisode])
                res.marked_episode = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    