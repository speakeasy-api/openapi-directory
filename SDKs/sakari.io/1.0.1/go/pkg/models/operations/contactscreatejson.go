// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ContactsCreateJSONSecurity struct {
	SakariAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// ContactsCreateJSONMergeStrategyEnum - Determines how existing contacts with matching mobile numbers are treated
type ContactsCreateJSONMergeStrategyEnum string

const (
	ContactsCreateJSONMergeStrategyEnumAppend ContactsCreateJSONMergeStrategyEnum = "append"
	ContactsCreateJSONMergeStrategyEnumCore   ContactsCreateJSONMergeStrategyEnum = "core"
	ContactsCreateJSONMergeStrategyEnumRemove ContactsCreateJSONMergeStrategyEnum = "remove"
)

func (e ContactsCreateJSONMergeStrategyEnum) ToPointer() *ContactsCreateJSONMergeStrategyEnum {
	return &e
}

func (e *ContactsCreateJSONMergeStrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "append":
		fallthrough
	case "core":
		fallthrough
	case "remove":
		*e = ContactsCreateJSONMergeStrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContactsCreateJSONMergeStrategyEnum: %v", v)
	}
}

type ContactsCreateJSONRequest struct {
	ContactRequest *shared.ContactRequest `request:"mediaType=application/json"`
	// Account to apply operations to
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
	// Determines how existing contacts with matching mobile numbers are treated
	MergeStrategy *ContactsCreateJSONMergeStrategyEnum `queryParam:"style=form,explode=true,name=mergeStrategy"`
}

type ContactsCreateJSON201ApplicationJSONType string

const (
	ContactsCreateJSON201ApplicationJSONTypeContactsResponse      ContactsCreateJSON201ApplicationJSONType = "ContactsResponse"
	ContactsCreateJSON201ApplicationJSONTypeContactUploadResponse ContactsCreateJSON201ApplicationJSONType = "ContactUploadResponse"
)

type ContactsCreateJSON201ApplicationJSON struct {
	ContactsResponse      *shared.ContactsResponse
	ContactUploadResponse *shared.ContactUploadResponse

	Type ContactsCreateJSON201ApplicationJSONType
}

func CreateContactsCreateJSON201ApplicationJSONContactsResponse(contactsResponse shared.ContactsResponse) ContactsCreateJSON201ApplicationJSON {
	typ := ContactsCreateJSON201ApplicationJSONTypeContactsResponse

	return ContactsCreateJSON201ApplicationJSON{
		ContactsResponse: &contactsResponse,
		Type:             typ,
	}
}

func CreateContactsCreateJSON201ApplicationJSONContactUploadResponse(contactUploadResponse shared.ContactUploadResponse) ContactsCreateJSON201ApplicationJSON {
	typ := ContactsCreateJSON201ApplicationJSONTypeContactUploadResponse

	return ContactsCreateJSON201ApplicationJSON{
		ContactUploadResponse: &contactUploadResponse,
		Type:                  typ,
	}
}

func (u *ContactsCreateJSON201ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	contactsResponse := new(shared.ContactsResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contactsResponse); err == nil {
		u.ContactsResponse = contactsResponse
		u.Type = ContactsCreateJSON201ApplicationJSONTypeContactsResponse
		return nil
	}

	contactUploadResponse := new(shared.ContactUploadResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contactUploadResponse); err == nil {
		u.ContactUploadResponse = contactUploadResponse
		u.Type = ContactsCreateJSON201ApplicationJSONTypeContactUploadResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ContactsCreateJSON201ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ContactsResponse != nil {
		return json.Marshal(u.ContactsResponse)
	}

	if u.ContactUploadResponse != nil {
		return json.Marshal(u.ContactUploadResponse)
	}

	return nil, nil
}

type ContactsCreateJSONResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// successful operation
	ContactsCreateJSON201ApplicationJSONOneOf *ContactsCreateJSON201ApplicationJSON
}
