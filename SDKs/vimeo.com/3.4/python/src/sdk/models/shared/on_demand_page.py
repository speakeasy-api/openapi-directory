"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import category as shared_category
from ..shared import embed_settings as shared_embed_settings
from ..shared import on_demand_genre as shared_on_demand_genre
from ..shared import picture as shared_picture
from ..shared import purchase_interaction as shared_purchase_interaction
from ..shared import tag as shared_tag
from ..shared import user as shared_user
from ..shared import video as shared_video
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPagePictureSizes:
    
    height: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    r"""The height of the image."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The direct link to the image."""  
    width: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    r"""The width of the image."""  
    link_with_play_button: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link_with_play_button'), 'exclude': lambda f: f is None }})
    r"""The direct link to the image with a play button overlay."""  
    
class OnDemandPagePictureTypeEnum(str, Enum):
    r"""The type of the picture:
    
    Option descriptions:
     * `caution` - An image that is appropriate for all ages.
     * `custom` - A custom image for the video.
     * `default` - The default image for the video.
    """
    CAUTION = 'caution'
    CUSTOM = 'custom'
    DEFAULT = 'default'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPagePicture:
    r"""The background image for the On Demand page on Vimeo."""
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Whether this picture is the active picture for its parent resource."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The picture's resource key string."""  
    sizes: list[OnDemandPagePictureSizes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizes') }})
    r"""An array containing reference information about all available image files."""  
    type: OnDemandPagePictureTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the picture:
    
    Option descriptions:
     * `caution` - An image that is appropriate for all ages.
     * `custom` - A custom image for the video.
     * `default` - The default image for the video.
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The picture's URI."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The upload URL for the picture. This field appears when you create the picture resource for the first time."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageColors:
    r"""The primary and secondary colors used for rendering this On Demand page."""
    
    primary: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary') }})
    r"""The hexadecimal color code for the page's primary color."""  
    secondary: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary') }})
    r"""The hexadecimal color code for the page's secondary color."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageEpisodesBuy:
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Whether all the videos on this On Demand page can be purchased as a whole."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The default price to buy an episode."""  
    
class OnDemandPageEpisodesRentPeriodEnum(str, Enum):
    r"""The rental period for the video:
    
    Option descriptions:
     * `1 day` - The rental period is one day.
     * `1 month` - The rental period is one month.
     * `1 week` - The rental period is one week.
     * `1 year` - The rental period is one year.
     * `2 day` - The rental period is two days.
     * `24 hour` - The rental period is 24 hours.
     * `3 day` - The rental period is three days.
     * `3 month` - The rental period is three months.
     * `30 day` - The rental period is 30 days.
     * `48 hour` - The rental period is 48 hours.
     * `6 month` - The rental period is six months.
     * `60 day` - The rental period is 60 days.
     * `7 day` - The rental period is 7 days.
     * `72 hour` - The rental period is 72 hours.
    """
    ONE_DAY = '1 day'
    ONE_MONTH = '1 month'
    ONE_WEEK = '1 week'
    ONE_YEAR = '1 year'
    TWO_DAY = '2 day'
    TWENTY_FOUR_HOUR = '24 hour'
    THREE_DAY = '3 day'
    THREE_MONTH = '3 month'
    THIRTY_DAY = '30 day'
    FORTY_EIGHT_HOUR = '48 hour'
    SIX_MONTH = '6 month'
    SIXTY_DAY = '60 day'
    SEVEN_DAY = '7 day'
    SEVENTY_TWO_HOUR = '72 hour'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageEpisodesRent:
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Whether all the videos on this On Demand page can be rented as a whole."""  
    period: OnDemandPageEpisodesRentPeriodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period') }})
    r"""The rental period for the video:
    
    Option descriptions:
     * `1 day` - The rental period is one day.
     * `1 month` - The rental period is one month.
     * `1 week` - The rental period is one week.
     * `1 year` - The rental period is one year.
     * `2 day` - The rental period is two days.
     * `24 hour` - The rental period is 24 hours.
     * `3 day` - The rental period is three days.
     * `3 month` - The rental period is three months.
     * `30 day` - The rental period is 30 days.
     * `48 hour` - The rental period is 48 hours.
     * `6 month` - The rental period is six months.
     * `60 day` - The rental period is 60 days.
     * `7 day` - The rental period is 7 days.
     * `72 hour` - The rental period is 72 hours.
    """  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The default price to rent an episode."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageEpisodes:
    r"""Information about this On Demand page's episodes, if the page is for a series."""
    
    buy: OnDemandPageEpisodesBuy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy') }})  
    rent: OnDemandPageEpisodesRent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rent') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadataConnectionsComments:
    r"""Information about the comments associated with this page."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of comments on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadataConnectionsGenres:
    r"""Information about the genres associated with this page."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of genres on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadataConnectionsLikes:
    r"""Information about the likes associated with this page."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadataConnectionsPictures:
    r"""Information about the pictures associated with this page."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of pictures on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadataConnectionsSeasons:
    r"""Information about the seasons associated with this page."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of seasons on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadataConnectionsVideos:
    r"""Information about the videos associated with this page."""
    
    extra_total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra_total') }})
    r"""The total number of extra videos."""  
    main_total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('main_total') }})
    r"""The total number of main videos."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    viewable_total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewable_total') }})
    r"""The total number of viewable videos."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadataConnections:
    
    comments: OnDemandPageMetadataConnectionsMetadataConnectionsComments = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})
    r"""Information about the comments associated with this page."""  
    genres: OnDemandPageMetadataConnectionsMetadataConnectionsGenres = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genres') }})
    r"""Information about the genres associated with this page."""  
    likes: OnDemandPageMetadataConnectionsMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the likes associated with this page."""  
    pictures: OnDemandPageMetadataConnectionsMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about the pictures associated with this page."""  
    seasons: OnDemandPageMetadataConnectionsMetadataConnectionsSeasons = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seasons') }})
    r"""Information about the seasons associated with this page."""  
    videos: OnDemandPageMetadataConnectionsMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos associated with this page."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnectionsMetadata:
    
    connections: OnDemandPageMetadataConnectionsMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadataConnections:
    r"""A collection of information that is connected to this resource, including videos, genres, and pictures connections."""
    
    metadata: OnDemandPageMetadataConnectionsMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageMetadata:
    r"""Metadata about the On Demand page."""
    
    connections: OnDemandPageMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A collection of information that is connected to this resource, including videos, genres, and pictures connections."""  
    interactions: shared_purchase_interaction.PurchaseInteraction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})
    r"""The user's available purchase interactions."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPagePreorder:
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Whether this page is available for preorder."""  
    cancel_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancel_time') }})
    r"""The time in ISO 8601 format when the preorder was cancelled."""  
    publish_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_time') }})
    r"""The time in ISO 8601 format when the preorder was released to the public."""  
    time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time') }})
    r"""The time in ISO 8601 format when the preorder started."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPagePublished:
    
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""Whether this On Demand page has been published."""  
    time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time') }})
    r"""The time in IS 8601 format when this page was published."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageSubscription:
    r"""Information about subscribing to this On Demand page, if enabled."""
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Whether this product is active."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The link to this product on Vimeo."""  
    price: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The accepted currencies and respective pricing for this product."""  
    period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""The product's rental period."""  
    
class OnDemandPageVideoContextActionEnum(str, Enum):
    r"""The contextual action:
    
    Option descriptions:
     * `Added to` - An Added To action.
     * `Appearance by` - An Appearance By action.
     * `Liked by` - A Liked By action.
     * `Uploaded by` - An Unloaded By action.
    """
    ADDED_TO = 'Added to'
    APPEARANCE_BY = 'Appearance by'
    LIKED_BY = 'Liked by'
    UPLOADED_BY = 'Uploaded by'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoContext:
    r"""The context of the video's subscription, if this video is part of a subscription."""
    
    action: OnDemandPageVideoContextActionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""The contextual action:
    
    Option descriptions:
     * `Added to` - An Added To action.
     * `Appearance by` - An Appearance By action.
     * `Liked by` - A Liked By action.
     * `Uploaded by` - An Unloaded By action.
    """  
    resource: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource') }})
    r"""The contextual resource: a user, group, or channel representation, or an object of a tag."""  
    resource_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_type') }})
    r"""The contextual resource type."""  
    
class OnDemandPageVideoLicenseEnum(str, Enum):
    r"""The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
    
    Option descriptions:
     * `by` - Attribution
     * `by-nc` - Attribution Non-Commercial
     * `by-nc-nd` - Attribution Non-Commercial No Derivatives
     * `by-nc-sa` - Attribution Non-Commercial Share Alike
     * `by-nd` - Attribution No Derivatives
     * `by-sa` - Attribution Share Alike
     * `cc0` - Public Domain Dedication
    """
    BY = 'by'
    BY_NC = 'by-nc'
    BY_NC_ND = 'by-nc-nd'
    BY_NC_SA = 'by-nc-sa'
    BY_ND = 'by-nd'
    BY_SA = 'by-sa'
    CC0 = 'cc0'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsComments:
    r"""Information about the comments on this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of comments on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsCredits:
    r"""Information about the users credited in this video."""
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""The total number of users on this connection."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsLikes:
    r"""Information about the users who have liked this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsOndemand:
    r"""Information about this video's ondemand data."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The On Demand connection resource key."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsPictures:
    r"""Information about this video's thumbnails."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods allowed on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""Total number of thumbnails on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsPlayback:
    r"""The DRM playback status connection for this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsRecommendations:
    r"""The recommendations for this video."""
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of HTTP methods allowed on this URI."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsRelated:
    r"""Related content for this video."""
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of HTTP methods allowed on this URI."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsSeason:
    r"""Information about the video's season."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of this season."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsTexttracks:
    r"""Information about this video's text tracks."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of text tracks on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsTrailer:
    r"""Information about this video's VOD trailer."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The trailer connection resource key."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsUsersWithAccess:
    r"""Information about the user privacy of this video, if the video privacy is `users`."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnectionsVersions:
    r"""Information about the versions of this video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of versions on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    current_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_uri'), 'exclude': lambda f: f is None }})
    r"""The URI of the current version of the video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataConnections:
    r"""A list of resource URIs related to the video."""
    
    comments: OnDemandPageVideoMetadataConnectionsComments = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})
    r"""Information about the comments on this video."""  
    credits: OnDemandPageVideoMetadataConnectionsCredits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credits') }})
    r"""Information about the users credited in this video."""  
    likes: OnDemandPageVideoMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the users who have liked this video."""  
    ondemand: OnDemandPageVideoMetadataConnectionsOndemand = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ondemand') }})
    r"""Information about this video's ondemand data."""  
    pictures: OnDemandPageVideoMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about this video's thumbnails."""  
    playback: OnDemandPageVideoMetadataConnectionsPlayback = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playback') }})
    r"""The DRM playback status connection for this video."""  
    recommendations: OnDemandPageVideoMetadataConnectionsRecommendations = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendations') }})
    r"""The recommendations for this video."""  
    related: OnDemandPageVideoMetadataConnectionsRelated = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""Related content for this video."""  
    season: OnDemandPageVideoMetadataConnectionsSeason = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('season') }})
    r"""Information about the video's season."""  
    texttracks: OnDemandPageVideoMetadataConnectionsTexttracks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('texttracks') }})
    r"""Information about this video's text tracks."""  
    trailer: OnDemandPageVideoMetadataConnectionsTrailer = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trailer') }})
    r"""Information about this video's VOD trailer."""  
    users_with_access: OnDemandPageVideoMetadataConnectionsUsersWithAccess = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users_with_access') }})
    r"""Information about the user privacy of this video, if the video privacy is `users`."""  
    versions: OnDemandPageVideoMetadataConnectionsVersions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versions') }})
    r"""Information about the versions of this video."""  
    
class OnDemandPageVideoMetadataInteractionsBuyDownloadEnum(str, Enum):
    r"""The user's download access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for download.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to download the video.
     * `unavailable` - The video isn't available for download.
    """
    AVAILABLE = 'available'
    PURCHASED = 'purchased'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'

class OnDemandPageVideoMetadataInteractionsBuyStreamEnum(str, Enum):
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming
    """
    AVAILABLE = 'available'
    PURCHASED = 'purchased'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsBuy:
    r"""The Buy interaction for a On Demand video."""
    
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The currency code for the current user's region."""  
    display_price: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_price') }})
    r"""Formatted price to display to buy an On Demand video."""  
    download: OnDemandPageVideoMetadataInteractionsBuyDownloadEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download') }})
    r"""The user's download access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for download.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to download the video.
     * `unavailable` - The video isn't available for download.
    """  
    drm: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm') }})
    r"""Whether the video has DRM."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL to buy the On Demand video on Vimeo."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The numeric value of the price for buying the On Demand video."""  
    purchase_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_time') }})
    r"""The time in ISO 8601 format when the On Demand video was purchased."""  
    stream: OnDemandPageVideoMetadataInteractionsBuyStreamEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream') }})
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The product URI to purchase the On Demand video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsChannel:
    r"""When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsLike:
    r"""Information about whether the authenticated user has liked this video."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether the user has liked the video."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the user liked the video."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    
class OnDemandPageVideoMetadataInteractionsRentStreamEnum(str, Enum):
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming.
    """
    AVAILABLE = 'available'
    PURCHASED = 'purchased'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsRent:
    r"""The Rent interaction for an On Demand video."""
    
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The currency code for the current user's region."""  
    display_price: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_price') }})
    r"""Formatted price to display to rent an On Demand video."""  
    drm: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm') }})
    r"""Whether the video has DRM."""  
    expires_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_time') }})
    r"""The time in ISO 8601 format when the rental period for the video expires."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL to rent the On Demand video on Vimeo."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The numeric value of the price for buying the On Demand video."""  
    purchase_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_time') }})
    r"""The time in ISO 8601 format when the On Demand video was rented."""  
    stream: OnDemandPageVideoMetadataInteractionsRentStreamEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream') }})
    r"""The user's streaming access to this On Demand video:
    
    Option descriptions:
     * `available` - The video is available for streaming.
     * `purchased` - The user has purchased the video.
     * `restricted` - The user isn't permitted to stream the video.
     * `unavailable` - The video isn't available for streaming.
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The product URI to rent the On Demand video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsReport:
    r"""Information about where and how to report a video."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    reason: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""A list of valid reasons for reporting a video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsSubscribe:
    r"""Subscription information for an On Demand video."""
    
    drm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm'), 'exclude': lambda f: f is None }})
    r"""Whether the video has DRM."""  
    expires_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_time'), 'exclude': lambda f: f is None }})
    r"""The time in ISO 8601 format when the subscription expires."""  
    purchase_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_time'), 'exclude': lambda f: f is None }})
    r"""The tine in ISO 8601 format when the subscription was purchased."""  
    stream: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream'), 'exclude': lambda f: f is None }})
    r"""The stream type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsWatched:
    r"""Information about removing this video from the user's list of watched videos."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether the user has watched the video."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the user watched the video."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractionsWatchlater:
    r"""Information about whether this video appears on the authenticated user's Watch Later list."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether the user has added the video to their Watch later list."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the user added the video to their Watch Later list."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadataInteractions:
    r"""A list of resource URIs related to the video."""
    
    buy: OnDemandPageVideoMetadataInteractionsBuy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy') }})
    r"""The Buy interaction for a On Demand video."""  
    channel: OnDemandPageVideoMetadataInteractionsChannel = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel."""  
    like: OnDemandPageVideoMetadataInteractionsLike = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like') }})
    r"""Information about whether the authenticated user has liked this video."""  
    rent: OnDemandPageVideoMetadataInteractionsRent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rent') }})
    r"""The Rent interaction for an On Demand video."""  
    report: OnDemandPageVideoMetadataInteractionsReport = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report') }})
    r"""Information about where and how to report a video."""  
    watched: OnDemandPageVideoMetadataInteractionsWatched = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched') }})
    r"""Information about removing this video from the user's list of watched videos."""  
    watchlater: OnDemandPageVideoMetadataInteractionsWatchlater = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Information about whether this video appears on the authenticated user's Watch Later list."""  
    subscribe: Optional[OnDemandPageVideoMetadataInteractionsSubscribe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribe'), 'exclude': lambda f: f is None }})
    r"""Subscription information for an On Demand video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoMetadata:
    r"""The video's metadata."""
    
    connections: OnDemandPageVideoMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A list of resource URIs related to the video."""  
    interactions: OnDemandPageVideoMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})
    r"""A list of resource URIs related to the video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoProjectMetadataConnectionsVideos:
    r"""A standard connection object indicating how to get all the videos in this project."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoProjectMetadataConnections:
    r"""A list of resource URIs related to the project."""
    
    videos: OnDemandPageVideoProjectMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""A standard connection object indicating how to get all the videos in this project."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoProjectMetadata:
    r"""The project's metadata."""
    
    connections: OnDemandPageVideoProjectMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A list of resource URIs related to the project."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoProject:
    r"""Information about the folder that contains this video."""
    
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the project was created."""  
    metadata: OnDemandPageVideoProjectMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The project's metadata."""  
    modified_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_time') }})
    r"""The time in ISO 8601 format when the project was last modified."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the folder."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The resource key string of the project."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI of the project."""  
    user: shared_user.User = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The owner of the project."""  
    
class OnDemandPageVideoPrivacyCommentsEnum(str, Enum):
    r"""Who can comment on the video:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the video.
     * `contacts` - Only contacts can comment on the video.
     * `nobody` - No one can comment on the video.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class OnDemandPageVideoPrivacyEmbedEnum(str, Enum):
    r"""The video's embed permission setting:
    
    Option descriptions:
     * `private` - The video is private.
     * `public` - Anyone can embed the video.
    """
    PRIVATE = 'private'
    PUBLIC = 'public'

class OnDemandPageVideoPrivacyViewEnum(str, Enum):
    r"""The general privacy setting for the video:
    
    Option descriptions:
     * `anybody` - Anyone can view the video.
     * `contacts` - Only contacts can view the video.
     * `disable` - Hide from vimeo
     * `nobody` - No one besides the owner can view the video.
     * `password` - Anyone with the video's password can view the video.
     * `unlisted` - Not searchable from vimeo.com
     * `users` - Only people with a Vimeo account can view the video.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoPrivacy:
    r"""The video's privacy setting."""
    
    add: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add') }})
    r"""Whether the video can be added to collections."""  
    comments: OnDemandPageVideoPrivacyCommentsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})
    r"""Who can comment on the video:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the video.
     * `contacts` - Only contacts can comment on the video.
     * `nobody` - No one can comment on the video.
    """  
    download: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download') }})
    r"""The video's download permission setting."""  
    embed: OnDemandPageVideoPrivacyEmbedEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed') }})
    r"""The video's embed permission setting:
    
    Option descriptions:
     * `private` - The video is private.
     * `public` - Anyone can embed the video.
    """  
    view: OnDemandPageVideoPrivacyViewEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view') }})
    r"""The general privacy setting for the video:
    
    Option descriptions:
     * `anybody` - Anyone can view the video.
     * `contacts` - Only contacts can view the video.
     * `disable` - Hide from vimeo
     * `nobody` - No one besides the owner can view the video.
     * `password` - Anyone with the video's password can view the video.
     * `unlisted` - Not searchable from vimeo.com
     * `users` - Only people with a Vimeo account can view the video.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoSpatialDirectorTimeline:
    
    pitch: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pitch'), 'exclude': lambda f: f is None }})
    r"""The director timeline pitch, from -90 (minimum) to 90 (maximum)."""  
    roll: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roll'), 'exclude': lambda f: f is None }})
    r"""The director timeline roll."""  
    time_code: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_code'), 'exclude': lambda f: f is None }})
    r"""The director timeline time code."""  
    yaw: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yaw'), 'exclude': lambda f: f is None }})
    r"""The director timeline yaw, from 0 (minimum) to 360 (maximum)."""  
    
class OnDemandPageVideoSpatialProjectionEnum(str, Enum):
    r"""The 360 spatial projection:
    
    Option descriptions:
     * `cubical` - The spatial projection is cubical.
     * `cylindrical` - The spatial projection is cylindrical.
     * `dome` - The spatial projection is dome-shaped.
     * `equirectangular` - The spatial projection is equirectangular.
     * `pyramid` - The spatial projection is pyramid-shaped.
    """
    CUBICAL = 'cubical'
    CYLINDRICAL = 'cylindrical'
    DOME = 'dome'
    EQUIRECTANGULAR = 'equirectangular'
    PYRAMID = 'pyramid'

class OnDemandPageVideoSpatialStereoFormatEnum(str, Enum):
    r"""The 360 stereo format:
    
    Option descriptions:
     * `left-right` - The stereo format is left-right.
     * `mono` - The audio is monaural.
     * `top-bottom` - The stereo format is top-bottom.
    """
    LEFT_RIGHT = 'left-right'
    MONO = 'mono'
    TOP_BOTTOM = 'top-bottom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoSpatial:
    r"""360 spatial data."""
    
    director_timeline: list[OnDemandPageVideoSpatialDirectorTimeline] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('director_timeline') }})
    r"""360 director timeline."""  
    field_of_view: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_of_view') }})
    r"""The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50."""  
    projection: OnDemandPageVideoSpatialProjectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projection') }})
    r"""The 360 spatial projection:
    
    Option descriptions:
     * `cubical` - The spatial projection is cubical.
     * `cylindrical` - The spatial projection is cylindrical.
     * `dome` - The spatial projection is dome-shaped.
     * `equirectangular` - The spatial projection is equirectangular.
     * `pyramid` - The spatial projection is pyramid-shaped.
    """  
    stereo_format: OnDemandPageVideoSpatialStereoFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stereo_format') }})
    r"""The 360 stereo format:
    
    Option descriptions:
     * `left-right` - The stereo format is left-right.
     * `mono` - The audio is monaural.
     * `top-bottom` - The stereo format is top-bottom.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoStats:
    r"""A collection of stats associated with this video."""
    
    plays: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plays') }})
    r"""The current total number of times that the video has been played."""  
    
class OnDemandPageVideoStatusEnum(str, Enum):
    r"""The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
    
    Option descriptions:
     * `available` - The video is available.
     * `quota_exceeded` - The user's quota is exceeded with this video.
     * `total_cap_exceeded` - The user has exceeded their total cap with this video.
     * `transcode_starting` - Transcoding is beginning for the video.
     * `transcoding` - Transcoding is underway for the video.
     * `transcoding_error` - There was an error in transcoding the video.
     * `unavailable` - The video is unavailable.
     * `uploading` - The video is being uploaded.
     * `uploading_error` - There was an error in uploading the video.
    """
    AVAILABLE = 'available'
    QUOTA_EXCEEDED = 'quota_exceeded'
    TOTAL_CAP_EXCEEDED = 'total_cap_exceeded'
    TRANSCODE_STARTING = 'transcode_starting'
    TRANSCODING = 'transcoding'
    TRANSCODING_ERROR = 'transcoding_error'
    UNAVAILABLE = 'unavailable'
    UPLOADING = 'uploading'
    UPLOADING_ERROR = 'uploading_error'

class OnDemandPageVideoTranscodeStatusEnum(str, Enum):
    r"""Status code for this video's availability."""
    COMPLETE = 'complete'
    ERROR = 'error'
    IN_PROGRESS = 'in_progress'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoTranscode:
    r"""The transcode information for a video upload."""
    
    status: Optional[OnDemandPageVideoTranscodeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status code for this video's availability."""  
    
class OnDemandPageVideoUploadApproachEnum(str, Enum):
    r"""The approach for uploading the video."""
    POST = 'post'
    PULL = 'pull'
    STREAMING = 'streaming'
    TUS = 'tus'

class OnDemandPageVideoUploadStatusEnum(str, Enum):
    r"""The status code for the availability of the uploaded video:
    
    Option descriptions:
     * `complete` - The upload is complete.
     * `error` - The upload ended with an error.
     * `in_progress` - The upload is underway.
    """
    COMPLETE = 'complete'
    ERROR = 'error'
    IN_PROGRESS = 'in_progress'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUpload:
    r"""The upload information for this video."""
    
    status: OnDemandPageVideoUploadStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status code for the availability of the uploaded video:
    
    Option descriptions:
     * `complete` - The upload is complete.
     * `error` - The upload ended with an error.
     * `in_progress` - The upload is underway.
    """  
    approach: Optional[OnDemandPageVideoUploadApproachEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approach'), 'exclude': lambda f: f is None }})
    r"""The approach for uploading the video."""  
    complete_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complete_uri'), 'exclude': lambda f: f is None }})
    r"""The URI for completing the upload."""  
    form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form'), 'exclude': lambda f: f is None }})
    r"""The HTML form for uploading a video through the post approach."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The link of the video to capture through the pull approach."""  
    redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_url'), 'exclude': lambda f: f is None }})
    r"""The redirect URL for the upload app."""  
    size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The file size in bytes of the uploaded video."""  
    upload_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_link'), 'exclude': lambda f: f is None }})
    r"""The link for sending video file data."""  
    
class OnDemandPageVideoUserAccountEnum(str, Enum):
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """
    BASIC = 'basic'
    BUSINESS = 'business'
    LIVE_BUSINESS = 'live_business'
    LIVE_PREMIUM = 'live_premium'
    LIVE_PRO = 'live_pro'
    PLUS = 'plus'
    PRO = 'pro'
    PRO_UNLIMITED = 'pro_unlimited'
    PRODUCER = 'producer'

class OnDemandPageVideoUserContentFilterEnum(str, Enum):
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """
    DRUGS = 'drugs'
    LANGUAGE = 'language'
    NUDITY = 'nudity'
    SAFE = 'safe'
    UNRATED = 'unrated'
    VIOLENCE = 'violence'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsAlbums:
    r"""Information about the albums created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of albums on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsAppearances:
    r"""Information about the appearances of this user in other videos."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of appearances on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsBlock:
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of blocked users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsCategories:
    r"""Information about this user's followed categories."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of categories on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsChannels:
    r"""Information about this user's subscribed channels."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsFeed:
    r"""Information about this user's feed."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsFolders:
    r"""Information about this user's folders."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of folders on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsFollowers:
    r"""Information about the user's followers."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of followers on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsFollowing:
    r"""Information about the users that the current user is following."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsGroups:
    r"""Information about the groups created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of groups on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsLikes:
    r"""Information about the videos that this user has liked."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsModeratedChannels:
    r"""Information about the channels that this user moderates."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsPictures:
    r"""Information about this user's portraits."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of pictures on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsPortfolios:
    r"""Information about this user's portfolios."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of portfolios on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsRecommendedChannels:
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsRecommendedUsers:
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsShared:
    r"""Information about the videos that have been shared with this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsVideos:
    r"""Information about the videos uploaded by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsWatchedVideos:
    r"""Information about the videos that this user has watched."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnectionsWatchlater:
    r"""Information about the videos that this user wants to watch later."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataConnections:
    r"""The list of resource URIs related to the user."""
    
    albums: OnDemandPageVideoUserMetadataConnectionsAlbums = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('albums') }})
    r"""Information about the albums created by this user."""  
    appearances: OnDemandPageVideoUserMetadataConnectionsAppearances = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appearances') }})
    r"""Information about the appearances of this user in other videos."""  
    block: OnDemandPageVideoUserMetadataConnectionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""  
    categories: OnDemandPageVideoUserMetadataConnectionsCategories = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""Information about this user's followed categories."""  
    channels: OnDemandPageVideoUserMetadataConnectionsChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels') }})
    r"""Information about this user's subscribed channels."""  
    feed: OnDemandPageVideoUserMetadataConnectionsFeed = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feed') }})
    r"""Information about this user's feed."""  
    folders: OnDemandPageVideoUserMetadataConnectionsFolders = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folders') }})
    r"""Information about this user's folders."""  
    followers: OnDemandPageVideoUserMetadataConnectionsFollowers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers') }})
    r"""Information about the user's followers."""  
    following: OnDemandPageVideoUserMetadataConnectionsFollowing = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following') }})
    r"""Information about the users that the current user is following."""  
    groups: OnDemandPageVideoUserMetadataConnectionsGroups = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})
    r"""Information about the groups created by this user."""  
    likes: OnDemandPageVideoUserMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the videos that this user has liked."""  
    moderated_channels: OnDemandPageVideoUserMetadataConnectionsModeratedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderated_channels') }})
    r"""Information about the channels that this user moderates."""  
    pictures: OnDemandPageVideoUserMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about this user's portraits."""  
    portfolios: OnDemandPageVideoUserMetadataConnectionsPortfolios = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})
    r"""Information about this user's portfolios."""  
    recommended_channels: OnDemandPageVideoUserMetadataConnectionsRecommendedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_channels') }})
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""  
    recommended_users: OnDemandPageVideoUserMetadataConnectionsRecommendedUsers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_users') }})
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""  
    shared: OnDemandPageVideoUserMetadataConnectionsShared = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared') }})
    r"""Information about the videos that have been shared with this user."""  
    videos: OnDemandPageVideoUserMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos uploaded by this user."""  
    watched_videos: OnDemandPageVideoUserMetadataConnectionsWatchedVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_videos') }})
    r"""Information about the videos that this user has watched."""  
    watchlater: OnDemandPageVideoUserMetadataConnectionsWatchlater = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Information about the videos that this user wants to watch later."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataInteractionsAddPrivacyUser:
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataInteractionsBlock:
    r"""Information related to the block status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is blocking the current user."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the block occurred, or the null value if no block exists."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to block or unblock the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataInteractionsFollow:
    r"""Information related to the followed status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is following the current user."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to follow the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataInteractionsReport:
    r"""Information regarding where and how to report a user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    reason: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""List of valid reasons for reporting a video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadataInteractions:
    
    block: OnDemandPageVideoUserMetadataInteractionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information related to the block status of this user."""  
    follow: OnDemandPageVideoUserMetadataInteractionsFollow = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('follow') }})
    r"""Information related to the followed status of this user."""  
    report: OnDemandPageVideoUserMetadataInteractionsReport = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report') }})
    r"""Information regarding where and how to report a user."""  
    add_privacy_user: Optional[OnDemandPageVideoUserMetadataInteractionsAddPrivacyUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_privacy_user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserMetadata:
    r"""The user's metadata."""
    
    connections: OnDemandPageVideoUserMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""The list of resource URIs related to the user."""  
    interactions: OnDemandPageVideoUserMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})  
    
class OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum(str, Enum):
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum(str, Enum):
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """
    PRIVATE = 'private'
    PUBLIC = 'public'
    WHITELIST = 'whitelist'

class OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum(str, Enum):
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserPreferencesVideosPrivacy:
    
    add: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Whether other users can add the user's videos."""  
    comments: Optional[OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether other users can download the user's videos."""  
    embed: Optional[OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """  
    view: Optional[OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserPreferencesVideos:
    
    privacy: Optional[OnDemandPageVideoUserPreferencesVideosPrivacy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserPreferences:
    
    videos: Optional[OnDemandPageVideoUserPreferencesVideos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserUploadQuotaLifetime:
    r"""Information about the user's lifetime upload usage."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your lifetime maximum."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload across the lifetime of your account."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your lifetime limit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserUploadQuotaPeriodic:
    r"""Information about the user's usage for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota for the current period."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload per period."""  
    reset_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reset_date') }})
    r"""The time in ISO 8601 format when your upload quota resets."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota in the current period."""  
    
class OnDemandPageVideoUserUploadQuotaSpaceShowingEnum(str, Enum):
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""
    LIFETIME = 'lifetime'
    PERIODIC = 'periodic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserUploadQuotaSpace:
    r"""Information about the user's upload space remaining for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The maximum number of bytes allotted to your upload quota."""  
    showing: OnDemandPageVideoUserUploadQuotaSpaceShowingEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showing') }})
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserUploadQuota:
    r"""Appears only when the user has upload access and is looking at their own user record."""
    
    lifetime: OnDemandPageVideoUserUploadQuotaLifetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime') }})
    r"""Information about the user's lifetime upload usage."""  
    periodic: OnDemandPageVideoUserUploadQuotaPeriodic = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodic') }})
    r"""Information about the user's usage for the current period."""  
    space: OnDemandPageVideoUserUploadQuotaSpace = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space') }})
    r"""Information about the user's upload space remaining for the current period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUserWebsites:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The website's description."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL of the website."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the website."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideoUser:
    r"""The video owner."""
    
    account: OnDemandPageVideoUserAccountEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """  
    bio: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio') }})
    r"""The user's bio."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the user account was created."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The absolute URL of this user's profile page."""  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The user's location."""  
    metadata: OnDemandPageVideoUserMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The user's metadata."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The user's display name."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active portrait of this user."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The user's resource key string."""  
    upload_quota: OnDemandPageVideoUserUploadQuota = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_quota') }})
    r"""Appears only when the user has upload access and is looking at their own user record."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The user's canonical relative URI."""  
    websites: list[OnDemandPageVideoUserWebsites] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websites') }})
    r"""The user's websites."""  
    content_filter: Optional[OnDemandPageVideoUserContentFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_filter'), 'exclude': lambda f: f is None }})
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The user's email address. This data requires a bearer token with the `email` scope."""  
    preferences: Optional[OnDemandPageVideoUserPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferences'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageVideo:
    r"""The trailer for this On Demand page."""
    
    categories: list[shared_category.Category] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""The categories to which this video belongs."""  
    content_rating: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_rating') }})
    r"""The content ratings of this video."""  
    context: OnDemandPageVideoContext = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context') }})
    r"""The context of the video's subscription, if this video is part of a subscription."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the video was created."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A brief explanation of the video's content."""  
    duration: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The video's duration in seconds."""  
    embed: shared_embed_settings.EmbedSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed') }})
    r"""Information about embedding this video."""  
    height: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    r"""The video's height in pixels."""  
    language: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})
    r"""The video's primary language."""  
    license: OnDemandPageVideoLicenseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license') }})
    r"""The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
    
    Option descriptions:
     * `by` - Attribution
     * `by-nc` - Attribution Non-Commercial
     * `by-nc-nd` - Attribution Non-Commercial No Derivatives
     * `by-nc-sa` - Attribution Non-Commercial Share Alike
     * `by-nd` - Attribution No Derivatives
     * `by-sa` - Attribution Share Alike
     * `cc0` - Public Domain Dedication
    """  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The link to the video."""  
    metadata: OnDemandPageVideoMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The video's metadata."""  
    modified_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_time') }})
    r"""The time in ISO 8601 format when the video metadata was last modified."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The video's title."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active picture for this video."""  
    privacy: OnDemandPageVideoPrivacy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy') }})
    r"""The video's privacy setting."""  
    release_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_time') }})
    r"""The time in ISO 8601 format when the video was released."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The resource key string of the video."""  
    spatial: OnDemandPageVideoSpatial = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spatial') }})
    r"""360 spatial data."""  
    stats: OnDemandPageVideoStats = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats') }})
    r"""A collection of stats associated with this video."""  
    status: OnDemandPageVideoStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
    
    Option descriptions:
     * `available` - The video is available.
     * `quota_exceeded` - The user's quota is exceeded with this video.
     * `total_cap_exceeded` - The user has exceeded their total cap with this video.
     * `transcode_starting` - Transcoding is beginning for the video.
     * `transcoding` - Transcoding is underway for the video.
     * `transcoding_error` - There was an error in transcoding the video.
     * `unavailable` - The video is unavailable.
     * `uploading` - The video is being uploaded.
     * `uploading_error` - There was an error in uploading the video.
    """  
    tags: list[shared_tag.Tag] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""An array of all tags assigned to this video."""  
    transcode: OnDemandPageVideoTranscode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transcode') }})
    r"""The transcode information for a video upload."""  
    upload: OnDemandPageVideoUpload = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload') }})
    r"""The upload information for this video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The video's canonical relative URI."""  
    user: OnDemandPageVideoUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The video owner."""  
    width: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    r"""The video's width in pixels."""  
    last_user_action_event_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_user_action_event_date'), 'exclude': lambda f: f is None }})
    r"""The time in ISO 8601 format when the user last modified the video."""  
    parent_folder: Optional[OnDemandPageVideoProject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_folder'), 'exclude': lambda f: f is None }})
    r"""Information about the folder that contains this video."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope."""  
    
class OnDemandPageTypeEnum(str, Enum):
    r"""Whether this On Demand page is for a film or a series.
    
    Option descriptions:
     * `film` - The On Demand page is for a film.
     * `series` - The On Demand page is for a series.
    """
    FILM = 'film'
    SERIES = 'series'

class OnDemandPageUserAccountEnum(str, Enum):
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """
    BASIC = 'basic'
    BUSINESS = 'business'
    LIVE_BUSINESS = 'live_business'
    LIVE_PREMIUM = 'live_premium'
    LIVE_PRO = 'live_pro'
    PLUS = 'plus'
    PRO = 'pro'
    PRO_UNLIMITED = 'pro_unlimited'
    PRODUCER = 'producer'

class OnDemandPageUserContentFilterEnum(str, Enum):
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """
    DRUGS = 'drugs'
    LANGUAGE = 'language'
    NUDITY = 'nudity'
    SAFE = 'safe'
    UNRATED = 'unrated'
    VIOLENCE = 'violence'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsAlbums:
    r"""Information about the albums created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of albums on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsAppearances:
    r"""Information about the appearances of this user in other videos."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of appearances on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsBlock:
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of blocked users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsCategories:
    r"""Information about this user's followed categories."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of categories on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsChannels:
    r"""Information about this user's subscribed channels."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsFeed:
    r"""Information about this user's feed."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsFolders:
    r"""Information about this user's folders."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of folders on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsFollowers:
    r"""Information about the user's followers."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of followers on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsFollowing:
    r"""Information about the users that the current user is following."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsGroups:
    r"""Information about the groups created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of groups on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsLikes:
    r"""Information about the videos that this user has liked."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsModeratedChannels:
    r"""Information about the channels that this user moderates."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsPictures:
    r"""Information about this user's portraits."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of pictures on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsPortfolios:
    r"""Information about this user's portfolios."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of portfolios on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsRecommendedChannels:
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsRecommendedUsers:
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsShared:
    r"""Information about the videos that have been shared with this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsVideos:
    r"""Information about the videos uploaded by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsWatchedVideos:
    r"""Information about the videos that this user has watched."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnectionsWatchlater:
    r"""Information about the videos that this user wants to watch later."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataConnections:
    r"""The list of resource URIs related to the user."""
    
    albums: OnDemandPageUserMetadataConnectionsAlbums = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('albums') }})
    r"""Information about the albums created by this user."""  
    appearances: OnDemandPageUserMetadataConnectionsAppearances = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appearances') }})
    r"""Information about the appearances of this user in other videos."""  
    block: OnDemandPageUserMetadataConnectionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""  
    categories: OnDemandPageUserMetadataConnectionsCategories = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""Information about this user's followed categories."""  
    channels: OnDemandPageUserMetadataConnectionsChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels') }})
    r"""Information about this user's subscribed channels."""  
    feed: OnDemandPageUserMetadataConnectionsFeed = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feed') }})
    r"""Information about this user's feed."""  
    folders: OnDemandPageUserMetadataConnectionsFolders = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folders') }})
    r"""Information about this user's folders."""  
    followers: OnDemandPageUserMetadataConnectionsFollowers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers') }})
    r"""Information about the user's followers."""  
    following: OnDemandPageUserMetadataConnectionsFollowing = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following') }})
    r"""Information about the users that the current user is following."""  
    groups: OnDemandPageUserMetadataConnectionsGroups = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})
    r"""Information about the groups created by this user."""  
    likes: OnDemandPageUserMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the videos that this user has liked."""  
    moderated_channels: OnDemandPageUserMetadataConnectionsModeratedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderated_channels') }})
    r"""Information about the channels that this user moderates."""  
    pictures: OnDemandPageUserMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about this user's portraits."""  
    portfolios: OnDemandPageUserMetadataConnectionsPortfolios = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})
    r"""Information about this user's portfolios."""  
    recommended_channels: OnDemandPageUserMetadataConnectionsRecommendedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_channels') }})
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""  
    recommended_users: OnDemandPageUserMetadataConnectionsRecommendedUsers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_users') }})
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""  
    shared: OnDemandPageUserMetadataConnectionsShared = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared') }})
    r"""Information about the videos that have been shared with this user."""  
    videos: OnDemandPageUserMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos uploaded by this user."""  
    watched_videos: OnDemandPageUserMetadataConnectionsWatchedVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_videos') }})
    r"""Information about the videos that this user has watched."""  
    watchlater: OnDemandPageUserMetadataConnectionsWatchlater = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Information about the videos that this user wants to watch later."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataInteractionsAddPrivacyUser:
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataInteractionsBlock:
    r"""Information related to the block status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is blocking the current user."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the block occurred, or the null value if no block exists."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to block or unblock the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataInteractionsFollow:
    r"""Information related to the followed status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is following the current user."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to follow the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataInteractionsReport:
    r"""Information regarding where and how to report a user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    reason: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""List of valid reasons for reporting a video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadataInteractions:
    
    block: OnDemandPageUserMetadataInteractionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information related to the block status of this user."""  
    follow: OnDemandPageUserMetadataInteractionsFollow = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('follow') }})
    r"""Information related to the followed status of this user."""  
    report: OnDemandPageUserMetadataInteractionsReport = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report') }})
    r"""Information regarding where and how to report a user."""  
    add_privacy_user: Optional[OnDemandPageUserMetadataInteractionsAddPrivacyUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_privacy_user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserMetadata:
    r"""The user's metadata."""
    
    connections: OnDemandPageUserMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""The list of resource URIs related to the user."""  
    interactions: OnDemandPageUserMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})  
    
class OnDemandPageUserPreferencesVideosPrivacyCommentsEnum(str, Enum):
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class OnDemandPageUserPreferencesVideosPrivacyEmbedEnum(str, Enum):
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """
    PRIVATE = 'private'
    PUBLIC = 'public'
    WHITELIST = 'whitelist'

class OnDemandPageUserPreferencesVideosPrivacyViewEnum(str, Enum):
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserPreferencesVideosPrivacy:
    
    add: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Whether other users can add the user's videos."""  
    comments: Optional[OnDemandPageUserPreferencesVideosPrivacyCommentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether other users can download the user's videos."""  
    embed: Optional[OnDemandPageUserPreferencesVideosPrivacyEmbedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """  
    view: Optional[OnDemandPageUserPreferencesVideosPrivacyViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserPreferencesVideos:
    
    privacy: Optional[OnDemandPageUserPreferencesVideosPrivacy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserPreferences:
    
    videos: Optional[OnDemandPageUserPreferencesVideos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserUploadQuotaLifetime:
    r"""Information about the user's lifetime upload usage."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your lifetime maximum."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload across the lifetime of your account."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your lifetime limit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserUploadQuotaPeriodic:
    r"""Information about the user's usage for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota for the current period."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload per period."""  
    reset_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reset_date') }})
    r"""The time in ISO 8601 format when your upload quota resets."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota in the current period."""  
    
class OnDemandPageUserUploadQuotaSpaceShowingEnum(str, Enum):
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""
    LIFETIME = 'lifetime'
    PERIODIC = 'periodic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserUploadQuotaSpace:
    r"""Information about the user's upload space remaining for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The maximum number of bytes allotted to your upload quota."""  
    showing: OnDemandPageUserUploadQuotaSpaceShowingEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showing') }})
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserUploadQuota:
    r"""Appears only when the user has upload access and is looking at their own user record."""
    
    lifetime: OnDemandPageUserUploadQuotaLifetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime') }})
    r"""Information about the user's lifetime upload usage."""  
    periodic: OnDemandPageUserUploadQuotaPeriodic = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodic') }})
    r"""Information about the user's usage for the current period."""  
    space: OnDemandPageUserUploadQuotaSpace = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space') }})
    r"""Information about the user's upload space remaining for the current period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUserWebsites:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The website's description."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL of the website."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the website."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPageUser:
    r"""The user who created this On Demand page."""
    
    account: OnDemandPageUserAccountEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """  
    bio: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio') }})
    r"""The user's bio."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the user account was created."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The absolute URL of this user's profile page."""  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The user's location."""  
    metadata: OnDemandPageUserMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The user's metadata."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The user's display name."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active portrait of this user."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The user's resource key string."""  
    upload_quota: OnDemandPageUserUploadQuota = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_quota') }})
    r"""Appears only when the user has upload access and is looking at their own user record."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The user's canonical relative URI."""  
    websites: list[OnDemandPageUserWebsites] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websites') }})
    r"""The user's websites."""  
    content_filter: Optional[OnDemandPageUserContentFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_filter'), 'exclude': lambda f: f is None }})
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The user's email address. This data requires a bearer token with the `email` scope."""  
    preferences: Optional[OnDemandPageUserPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferences'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnDemandPage:
    r"""The On Demand page was created."""
    
    background: OnDemandPagePicture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('background') }})
    r"""The background image for the On Demand page on Vimeo."""  
    colors: OnDemandPageColors = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colors') }})
    r"""The primary and secondary colors used for rendering this On Demand page."""  
    content_rating: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_rating') }})
    r"""An array of the page's content ratings."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The description of this On Demand page."""  
    domain_link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_link') }})
    r"""The link to this page on its own domain."""  
    episodes: OnDemandPageEpisodes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episodes') }})
    r"""Information about this On Demand page's episodes, if the page is for a series."""  
    genres: list[shared_on_demand_genre.OnDemandGenre] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genres') }})
    r"""All the genres assigned to this page."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The link to the page on Vimeo."""  
    metadata: OnDemandPageMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""Metadata about the On Demand page."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""A descriptive title of this On Demand page."""  
    pictures: OnDemandPagePicture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active poster for this On Demand page."""  
    preorder: OnDemandPagePreorder = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preorder') }})  
    published: OnDemandPagePublished = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published') }})  
    rating: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rating') }})
    r"""The rating of this page."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The VOD resource key."""  
    subscription: OnDemandPageSubscription = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription') }})
    r"""Information about subscribing to this On Demand page, if enabled."""  
    theme: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme') }})
    r"""The graphical theme for this On Demand page."""  
    thumbnail: OnDemandPagePicture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail') }})
    r"""The thumbnail image for the On Demand page on Vimeo."""  
    trailer: OnDemandPageVideo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trailer') }})
    r"""The trailer for this On Demand page."""  
    type: OnDemandPageTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Whether this On Demand page is for a film or a series.
    
    Option descriptions:
     * `film` - The On Demand page is for a film.
     * `series` - The On Demand page is for a series.
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The relative URI of the On Demand page."""  
    user: OnDemandPageUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The user who created this On Demand page."""  
    created_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time'), 'exclude': lambda f: f is None }})
    r"""The time in ISO 8601 format when the page was created."""  
    film: Optional[shared_video.Video] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('film'), 'exclude': lambda f: f is None }})
    r"""This On Demand page's film, if it is a film."""  
    modified_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_time'), 'exclude': lambda f: f is None }})
    r"""he time in ISO 8601 format when the page was last modified."""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""The creator-designated SKU for this On Demand page."""  
    