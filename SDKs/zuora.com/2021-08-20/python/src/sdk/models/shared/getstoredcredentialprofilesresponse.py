"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum(str, Enum):
    EXTERNAL = 'External'

class GetStoredCredentialProfilesResponseProfilesStatusEnum(str, Enum):
    r"""The status of the stored credential profile.
    
    * `Agreed` - The stored credential profile has not been validated via an authorization transaction with the payment gateway.
    * `Active` - The stored credential profile has been validated via an authorization transaction with the payment gateway.
    * `Cancelled` - The stored credentials are no longer valid, per a customer request. Zuora cannot use the stored credentials in transactions.
    * `Expired` - The stored credentials are no longer valid, per an expiration policy in the stored credential transaction framework. Zuora cannot use the stored credentials in transactions.
    """
    AGREED = 'Agreed'
    ACTIVE = 'Active'
    CANCELLED = 'Cancelled'
    EXPIRED = 'Expired'

class GetStoredCredentialProfilesResponseProfilesTypeEnum(str, Enum):
    RECURRING = 'Recurring'
    UNSCHEDULED = 'Unscheduled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetStoredCredentialProfilesResponseProfiles:
    r"""Container for stored credential profiles."""
    
    activated_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activatedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the stored credential profile was activated (if applicable)."""  
    agreed_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agreedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the stored credential profile was created."""  
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""The stored credential transaction framework. For example, Visa."""  
    cancelled_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelledOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the stored credential profile was cancelled (if applicable)."""  
    consent_agreement_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentAgreementRef'), 'exclude': lambda f: f is None }})
    r"""Your reference for the consent agreement that you have established with the customer."""  
    consent_agreement_src: Optional[GetStoredCredentialProfilesResponseProfilesConsentAgreementSrcEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentAgreementSrc'), 'exclude': lambda f: f is None }})  
    expired_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiredOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the stored credential profile was expired (if applicable)."""  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The number that identifies the stored credential profile within the payment method."""  
    payment_method_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethodId'), 'exclude': lambda f: f is None }})
    r"""ID of the payment method."""  
    status: Optional[GetStoredCredentialProfilesResponseProfilesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the stored credential profile.
    
    * `Agreed` - The stored credential profile has not been validated via an authorization transaction with the payment gateway.
    * `Active` - The stored credential profile has been validated via an authorization transaction with the payment gateway.
    * `Cancelled` - The stored credentials are no longer valid, per a customer request. Zuora cannot use the stored credentials in transactions.
    * `Expired` - The stored credentials are no longer valid, per an expiration policy in the stored credential transaction framework. Zuora cannot use the stored credentials in transactions.
    """  
    type: Optional[GetStoredCredentialProfilesResponseProfilesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetStoredCredentialProfilesResponse:
    
    profiles: Optional[GetStoredCredentialProfilesResponseProfiles] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profiles'), 'exclude': lambda f: f is None }})
    r"""Container for stored credential profiles."""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    