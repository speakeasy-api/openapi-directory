<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reservations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of reservations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListResponse
     */
	public function computeReservationsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/reservations', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reservationAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReservationAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteResponse
     */
	public function computeReservationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations/{reservation}', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves information about the specified reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetResponse
     */
	public function computeReservationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations/{reservation}', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicyResponse
     */
	public function computeReservationsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new reservation. For more information, read Reserving zonal resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertResponse
     */
	public function computeReservationsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reservation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A list of all the reservations that have been configured for the specified project in specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListResponse
     */
	public function computeReservationsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reservationList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReservationList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeResponse
     */
	public function computeReservationsResize(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations/{reservation}/resize', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reservationsResizeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicyResponse
     */
	public function computeReservationsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsResponse
     */
	public function computeReservationsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update share settings of the reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateResponse
     */
	public function computeReservationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/reservations/{reservation}', \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reservation1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeReservationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}