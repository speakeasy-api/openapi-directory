/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetUserSentPrivateMessagesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=username",
  })
  username: string;
}

export class GetUserSentPrivateMessages200ApplicationJSONTopicListTopicsPosters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "extras" })
  extras?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "primary_group_id" })
  primaryGroupId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: number;
}

export class GetUserSentPrivateMessages200ApplicationJSONTopicListTopics extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_user_count" })
  allowedUserCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "archetype" })
  archetype?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "bookmarked" })
  bookmarked?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "bumped" })
  bumped?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "bumped_at" })
  bumpedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "category_id" })
  categoryId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "closed" })
  closed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fancy_title" })
  fancyTitle?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "featured_link" })
  featuredLink?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "has_summary" })
  hasSummary?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "highest_post_number" })
  highestPostNumber?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "image_url" })
  imageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_posted_at" })
  lastPostedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_poster_username" })
  lastPosterUsername?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_read_post_number" })
  lastReadPostNumber?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "like_count" })
  likeCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "liked" })
  liked?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "notification_level" })
  notificationLevel?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "participants" })
  participants?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "pinned" })
  pinned?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pinned_globally" })
  pinnedGlobally?: boolean;

  @SpeakeasyMetadata({
    elemType:
      GetUserSentPrivateMessages200ApplicationJSONTopicListTopicsPosters,
  })
  @Expose({ name: "posters" })
  @Type(
    () => GetUserSentPrivateMessages200ApplicationJSONTopicListTopicsPosters
  )
  posters?: GetUserSentPrivateMessages200ApplicationJSONTopicListTopicsPosters[];

  @SpeakeasyMetadata()
  @Expose({ name: "posts_count" })
  postsCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "reply_count" })
  replyCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "unpinned" })
  unpinned?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "unread_posts" })
  unreadPosts?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "unseen" })
  unseen?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "views" })
  views?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "visible" })
  visible?: boolean;
}

export class GetUserSentPrivateMessages200ApplicationJSONTopicList extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "can_create_topic" })
  canCreateTopic?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "draft" })
  draft?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "draft_key" })
  draftKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "draft_sequence" })
  draftSequence?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage?: number;

  @SpeakeasyMetadata({
    elemType: GetUserSentPrivateMessages200ApplicationJSONTopicListTopics,
  })
  @Expose({ name: "topics" })
  @Type(() => GetUserSentPrivateMessages200ApplicationJSONTopicListTopics)
  topics?: GetUserSentPrivateMessages200ApplicationJSONTopicListTopics[];
}

export class GetUserSentPrivateMessages200ApplicationJSONUsers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "avatar_template" })
  avatarTemplate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}

/**
 * private messages
 */
export class GetUserSentPrivateMessages200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "primary_groups" })
  primaryGroups?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "topic_list" })
  @Type(() => GetUserSentPrivateMessages200ApplicationJSONTopicList)
  topicList?: GetUserSentPrivateMessages200ApplicationJSONTopicList;

  @SpeakeasyMetadata({
    elemType: GetUserSentPrivateMessages200ApplicationJSONUsers,
  })
  @Expose({ name: "users" })
  @Type(() => GetUserSentPrivateMessages200ApplicationJSONUsers)
  users?: GetUserSentPrivateMessages200ApplicationJSONUsers[];
}

export class GetUserSentPrivateMessagesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * private messages
   */
  @SpeakeasyMetadata()
  getUserSentPrivateMessages200ApplicationJSONObject?: GetUserSentPrivateMessages200ApplicationJSON;
}
