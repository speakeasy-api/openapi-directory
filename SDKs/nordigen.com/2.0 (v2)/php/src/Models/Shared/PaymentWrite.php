<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PaymentWrite - PaymentWriteSerializer.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PaymentWrite
{
    /**
     * Registered creditor account
     * 
     * @var ?string $creditorAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditor_account')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $creditorAccount = null;
    
    /**
     * Creditor account
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CreditorAccountWrite $creditorObject
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditor_object')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CreditorAccountWrite')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreditorAccountWrite $creditorObject = null;
    
    /**
     * Payment Custom Payment ID
     * 
     * @var ?string $customPaymentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('custom_payment_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customPaymentId = null;
    
    /**
     * Payment description
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Instructed amount
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\InstructedAmount $instructedAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('instructed_amount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\InstructedAmount')]
    public InstructedAmount $instructedAmount;
    
    /**
     * Link to initiate authorization with Institution
     * 
     * @var ?string $link
     */
	#[\JMS\Serializer\Annotation\SerializedName('link')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $link = null;
    
    /**
     * Payment ID
     * 
     * @var ?string $paymentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('payment_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $paymentId = null;
    
    /**
     * Payment product
     * 
     * 
     * * `T2P` - target-2-payments
     * * `SCT` - sepa-credit-transfers
     * * `ISCT` - instant-sepa-credit-transfer
     * * `CBCT` - cross-border-credit-transfers
     * * `BACS` - Back Payment Scheme
     * * `CHAPS` - CHAPS Payment Scheme
     * * `FPS` - Faster Payment Scheme
     * * `SWIFT` - Swift Payment Service
     * * `BT` - Balance Transfer
     * * `MT` - Money Transfer
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PaymentWritePaymentProductEnum $paymentProduct
     */
	#[\JMS\Serializer\Annotation\SerializedName('payment_product')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PaymentWritePaymentProductEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PaymentWritePaymentProductEnum $paymentProduct = null;
    
    /**
     * Payment end to end identification
     * 
     * 
     * * `INIT` - Initiated. Payment has been initiated.
     * * `ERRE` - ExecutionError. We experienced error on payment execution.
     * * `ERRS` - StatusError. We experienced error retrieving payment status. Try again.
     * * `ACCC` - AcceptedSettlementCompleted. Settlement on the creditor's account has been completed
     * * `ACCP` - AcceptedCustomerProfile. Preceding check of technical validation was successful. Customer profile check was successful
     * * `ACSC` - AcceptedSettlementCompleted. Settlement on the debtor’s account has been completed
     * * `ACSP` - AcceptedSettlementInProcess. All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution
     * * `ACTC` - AcceptedTechnicalValidation. Authentication and syntactical and semantical validation are successful
     * * `ACWC` - AcceptedWithChange. Instruction is accepted but a change will be made, such as date or remittance not sent
     * * `ACWP` - AcceptedWithoutPosting. Payment instruction included in the credit transfer is accepted without being posted to the creditor customer’s account
     * * `RCVD` - Received. Payment initiation has been received by the receiving agent
     * * `PDNG` - Pending. Payment initiation or individual transaction included in the payment initiation is pending. Further checks and status update will be performed
     * * `RJCT` - Rejected. Payment initiation or individual transaction included in the payment initiation has been rejected.
     * * `CANC` - Cancelled. Payment initiation has been cancelled before execution
     * * `ACFC` - AcceptedFundsChecked. Pre-ceeding check of technical validation and customer profile was successful and an automatic funds check was positive
     * * `PATC` - PartiallyAcceptedTechnicalCorrect. The payment initiation needs multiple authentications, where some but not yet all have been performed
     * * `PART` - PartiallyAccepted. A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PaymentWritePaymentStatusEnum $paymentStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('payment_status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PaymentWritePaymentStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PaymentWritePaymentStatusEnum $paymentStatus = null;
    
    /**
     * Payment Type
     * 
     * 
     * * `single-payment` - payment
     * * `bulk-payment` - bulk-payments
     * * `periodic-payment` - periodic-payments
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PaymentWritePaymentTypeEnum $paymentType
     */
	#[\JMS\Serializer\Annotation\SerializedName('payment_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PaymentWritePaymentTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PaymentWritePaymentTypeEnum $paymentType = null;
    
    /**
     * Periodic Payment Serializer.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PeriodicPayment $periodicPayment
     */
	#[\JMS\Serializer\Annotation\SerializedName('periodic_payment')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PeriodicPayment')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PeriodicPayment $periodicPayment = null;
    
    /**
     * Redirect URL to your application after payment is done
     * 
     * @var string $redirect
     */
	#[\JMS\Serializer\Annotation\SerializedName('redirect')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $redirect;
    
    /**
     * Payment Execution date (for periodic payments)
     * 
     * @var ?\DateTime $requestedExecutionDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('requested_execution_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $requestedExecutionDate = null;
    
    /**
     * Indicates whether payment should be submitted separately
     * 
     * @var ?bool $submitPayment
     */
	#[\JMS\Serializer\Annotation\SerializedName('submit_payment')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $submitPayment = null;
    
	public function __construct()
	{
		$this->creditorAccount = null;
		$this->creditorObject = null;
		$this->customPaymentId = null;
		$this->description = null;
		$this->instructedAmount = new \OpenAPI\OpenAPI\Models\Shared\InstructedAmount();
		$this->link = null;
		$this->paymentId = null;
		$this->paymentProduct = null;
		$this->paymentStatus = null;
		$this->paymentType = null;
		$this->periodicPayment = null;
		$this->redirect = "";
		$this->requestedExecutionDate = null;
		$this->submitPayment = null;
	}
}
