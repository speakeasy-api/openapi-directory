/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Amount } from "./amount";
import { Counterparty } from "./counterparty";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The category of the transaction indicating the type of activity.
 *
 * @remarks
 *
 *  Possible values:
 *
 * * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
 *
 * * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
 *
 * * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
 *
 * * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
 *
 *
 */
export enum TransactionCategoryEnum {
  Bank = "bank",
  Grants = "grants",
  Internal = "internal",
  IssuedCard = "issuedCard",
  PlatformPayment = "platformPayment",
}

/**
 * The status of the transaction.
 *
 * @remarks
 *
 *  Possible values:
 *
 * * **pending**: The transaction is still pending.
 *
 * * **booked**: The transaction has been booked to the balance account.
 *
 *
 */
export enum TransactionStatusEnum {
  Booked = "booked",
  Pending = "pending",
}

/**
 * The type of the transaction.
 *
 * @remarks
 *
 *  Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
 */
export enum TransactionTypeEnum {
  AtmWithdrawal = "atmWithdrawal",
  AtmWithdrawalReversal = "atmWithdrawalReversal",
  BalanceAdjustment = "balanceAdjustment",
  BalanceRollover = "balanceRollover",
  BankTransfer = "bankTransfer",
  Capture = "capture",
  CaptureReversal = "captureReversal",
  Chargeback = "chargeback",
  ChargebackReversal = "chargebackReversal",
  DepositCorrection = "depositCorrection",
  Fee = "fee",
  Grant = "grant",
  Installment = "installment",
  InstallmentReversal = "installmentReversal",
  InternalTransfer = "internalTransfer",
  InvoiceDeduction = "invoiceDeduction",
  Leftover = "leftover",
  ManualCorrection = "manualCorrection",
  MiscCost = "miscCost",
  Payment = "payment",
  PaymentCost = "paymentCost",
  Refund = "refund",
  RefundReversal = "refundReversal",
  Repayment = "repayment",
  ReserveAdjustment = "reserveAdjustment",
  SecondChargeback = "secondChargeback",
}

/**
 * OK - the request has succeeded.
 */
export class Transaction extends SpeakeasyBase {
  /**
   * Unique identifier of the account holder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountHolderId" })
  accountHolderId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  @Type(() => Amount)
  amount: Amount;

  /**
   * Unique identifier of the balance account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balanceAccountId" })
  balanceAccountId: string;

  /**
   * Unique identifier of the balance platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balancePlatform" })
  balancePlatform: string;

  /**
   * The date the transaction was booked to the balance account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  bookingDate: Date;

  /**
   * The category of the transaction indicating the type of activity.
   *
   * @remarks
   *
   *  Possible values:
   *
   * * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
   *
   * * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
   *
   * * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
   *
   * * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: TransactionCategoryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "counterparty" })
  @Type(() => Counterparty)
  counterparty: Counterparty;

  /**
   * The date the transaction was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The `description` from the `/transfers` request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Unique identifier of the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "instructedAmount" })
  @Type(() => Amount)
  instructedAmount?: Amount;

  /**
   * Unique identifier of the payment instrument that was used for the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentInstrumentId" })
  paymentInstrumentId?: string;

  /**
   * The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference: string;

  /**
   * The reference sent to or received from the counterparty.
   *
   * @remarks
   *
   * * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.
   *
   *  * For incoming funds, this is the reference from the sender.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "referenceForBeneficiary" })
  referenceForBeneficiary?: string;

  /**
   * The status of the transaction.
   *
   * @remarks
   *
   *  Possible values:
   *
   * * **pending**: The transaction is still pending.
   *
   * * **booked**: The transaction has been booked to the balance account.
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: TransactionStatusEnum;

  /**
   * Unique identifier of the related transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferId" })
  transferId?: string;

  /**
   * The type of the transaction.
   *
   * @remarks
   *
   *  Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: TransactionTypeEnum;

  /**
   * The date the transfer amount becomes available in the balance account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  valueDate: Date;
}
