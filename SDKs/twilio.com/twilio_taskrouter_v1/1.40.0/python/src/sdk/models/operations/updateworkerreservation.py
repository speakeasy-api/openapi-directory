"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taskrouter_v1_workspace_worker_worker_reservation as shared_taskrouter_v1_workspace_worker_worker_reservation
from ..shared import worker_reservation_enum_call_status_enum as shared_worker_reservation_enum_call_status_enum
from ..shared import worker_reservation_enum_conference_event_enum as shared_worker_reservation_enum_conference_event_enum
from ..shared import worker_reservation_enum_status_enum as shared_worker_reservation_enum_status_enum
from enum import Enum
from typing import Optional

UPDATE_WORKER_RESERVATION_SERVERS = [
	"https://taskrouter.twilio.com",
]


@dataclasses.dataclass
class UpdateWorkerReservationSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class UpdateWorkerReservationUpdateWorkerReservationRequest:
    
    beep: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Beep' }})
    r"""Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`."""  
    beep_on_customer_entrance: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'BeepOnCustomerEntrance' }})
    r"""Whether to play a notification beep when the customer joins."""  
    call_accept: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallAccept' }})
    r"""Whether to accept a reservation when executing a Call instruction."""  
    call_from: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallFrom' }})
    r"""The Caller ID of the outbound call when executing a Call instruction."""  
    call_record: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallRecord' }})
    r"""Whether to record both legs of a call when executing a Call instruction."""  
    call_status_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallStatusCallbackUrl' }})
    r"""The URL to call for the completed call event when executing a Call instruction."""  
    call_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallTimeout' }})
    r"""The timeout for a call when executing a Call instruction."""  
    call_to: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallTo' }})
    r"""The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination."""  
    call_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallUrl' }})
    r"""TwiML URI executed on answering the worker's leg as a result of the Call instruction."""  
    conference_record: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceRecord' }})
    r"""Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`."""  
    conference_recording_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceRecordingStatusCallback' }})
    r"""The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available."""  
    conference_recording_status_callback_method: Optional[UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceRecordingStatusCallbackMethod' }})
    r"""The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""  
    conference_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceStatusCallback' }})
    r"""The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored."""  
    conference_status_callback_event: Optional[list[shared_worker_reservation_enum_conference_event_enum.WorkerReservationEnumConferenceEventEnum]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceStatusCallbackEvent' }})
    r"""The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`."""  
    conference_status_callback_method: Optional[UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceStatusCallbackMethod' }})
    r"""The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""  
    conference_trim: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceTrim' }})
    r"""Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`."""  
    dequeue_from: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DequeueFrom' }})
    r"""The caller ID of the call to the worker when executing a Dequeue instruction."""  
    dequeue_post_work_activity_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DequeuePostWorkActivitySid' }})
    r"""The SID of the Activity resource to start after executing a Dequeue instruction."""  
    dequeue_record: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DequeueRecord' }})
    r"""Whether to record both legs of a call when executing a Dequeue instruction or which leg to record."""  
    dequeue_status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DequeueStatusCallbackEvent' }})
    r"""The call progress events sent via webhooks as a result of a Dequeue instruction."""  
    dequeue_status_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DequeueStatusCallbackUrl' }})
    r"""The callback URL for completed call event when executing a Dequeue instruction."""  
    dequeue_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DequeueTimeout' }})
    r"""The timeout for call when executing a Dequeue instruction."""  
    dequeue_to: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DequeueTo' }})
    r"""The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination."""  
    early_media: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EarlyMedia' }})
    r"""Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`."""  
    end_conference_on_customer_exit: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EndConferenceOnCustomerExit' }})
    r"""Whether to end the conference when the customer leaves."""  
    end_conference_on_exit: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EndConferenceOnExit' }})
    r"""Whether to end the conference when the agent leaves."""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'From' }})
    r"""The caller ID of the call to the worker when executing a Conference instruction."""  
    instruction: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Instruction' }})
    r"""The assignment instruction for the reservation."""  
    max_participants: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MaxParticipants' }})
    r"""The maximum number of participants allowed in the conference. Can be a positive integer from `2` to `250`. The default value is `250`."""  
    muted: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Muted' }})
    r"""Whether the agent is muted in the conference. Defaults to `false`."""  
    post_work_activity_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'PostWorkActivitySid' }})
    r"""The new worker activity SID after executing a Conference instruction."""  
    record: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Record' }})
    r"""Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`."""  
    recording_channels: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingChannels' }})
    r"""The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`."""  
    recording_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallback' }})
    r"""The URL that we should call using the `recording_status_callback_method` when the recording status changes."""  
    recording_status_callback_method: Optional[UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallbackMethod' }})
    r"""The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""  
    redirect_accept: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RedirectAccept' }})
    r"""Whether the reservation should be accepted when executing a Redirect instruction."""  
    redirect_call_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RedirectCallSid' }})
    r"""The Call SID of the call parked in the queue when executing a Redirect instruction."""  
    redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RedirectUrl' }})
    r"""TwiML URI to redirect the call to when executing the Redirect instruction."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Region' }})
    r"""The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`."""  
    reservation_status: Optional[shared_worker_reservation_enum_status_enum.WorkerReservationEnumStatusEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReservationStatus' }})  
    sip_auth_password: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SipAuthPassword' }})
    r"""The SIP password for authentication."""  
    sip_auth_username: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SipAuthUsername' }})
    r"""The SIP username used for authentication."""  
    start_conference_on_enter: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StartConferenceOnEnter' }})
    r"""Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference."""  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallback' }})
    r"""The URL we should call using the `status_callback_method` to send status information to your application."""  
    status_callback_event: Optional[list[shared_worker_reservation_enum_call_status_enum.WorkerReservationEnumCallStatusEnum]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackEvent' }})
    r"""The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`."""  
    status_callback_method: Optional[UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackMethod' }})
    r"""The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`."""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Timeout' }})
    r"""The timeout for a call when executing a Conference instruction."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'To' }})
    r"""The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination."""  
    wait_method: Optional[UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WaitMethod' }})
    r"""The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file."""  
    wait_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WaitUrl' }})
    r"""The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic)."""  
    worker_activity_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WorkerActivitySid' }})
    r"""The new worker activity SID if rejecting a reservation."""  
    

@dataclasses.dataclass
class UpdateWorkerReservationRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the WorkerReservation resource to update."""  
    worker_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkerSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the reserved Worker resource with the WorkerReservation resources to update."""  
    workspace_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkspaceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Workspace with the WorkerReservation resources to update."""  
    if_match: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-Match', 'style': 'simple', 'explode': False }})
    r"""The If-Match HTTP request header"""  
    request_body: Optional[UpdateWorkerReservationUpdateWorkerReservationRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateWorkerReservationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taskrouter_v1_workspace_worker_worker_reservation: Optional[shared_taskrouter_v1_workspace_worker_worker_reservation.TaskrouterV1WorkspaceWorkerWorkerReservation] = dataclasses.field(default=None)
    r"""OK"""  
    