// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServingRestrictionStatusEnum - The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).
type ServingRestrictionStatusEnum string

const (
	ServingRestrictionStatusEnumStatusUnspecified ServingRestrictionStatusEnum = "STATUS_UNSPECIFIED"
	ServingRestrictionStatusEnumDisapproval       ServingRestrictionStatusEnum = "DISAPPROVAL"
	ServingRestrictionStatusEnumPendingReview     ServingRestrictionStatusEnum = "PENDING_REVIEW"
)

func (e *ServingRestrictionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATUS_UNSPECIFIED":
		fallthrough
	case "DISAPPROVAL":
		fallthrough
	case "PENDING_REVIEW":
		*e = ServingRestrictionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServingRestrictionStatusEnum: %s", s)
	}
}

// ServingRestriction - Output only. A representation of the status of an ad in a specific context. A context here relates to where something ultimately serves (for example, a user or publisher geo, a platform, an HTTPS versus HTTP request, or the type of auction).
type ServingRestriction struct {
	// The contexts for the restriction.
	Contexts []ServingContext `json:"contexts,omitempty"`
	// Output only. The reason and details for a disapproval.
	Disapproval *Disapproval `json:"disapproval,omitempty"`
	// Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.
	DisapprovalReasons []Disapproval `json:"disapprovalReasons,omitempty"`
	// The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).
	Status *ServingRestrictionStatusEnum `json:"status,omitempty"`
}
