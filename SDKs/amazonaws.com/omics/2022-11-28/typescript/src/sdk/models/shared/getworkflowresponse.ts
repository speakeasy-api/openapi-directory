/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { WorkflowEngineEnum } from "./workflowengineenum";
import { WorkflowParameter } from "./workflowparameter";
import { WorkflowStatusEnum } from "./workflowstatusenum";
import { WorkflowTypeEnum } from "./workflowtypeenum";
import { Expose, Transform } from "class-transformer";

/**
 * Success
 */
export class GetWorkflowResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "definition" })
  definition?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "digest" })
  digest?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "engine" })
  engine?: WorkflowEngineEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "main" })
  main?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata({ elemType: WorkflowParameter })
  @Expose({ name: "parameterTemplate" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, WorkflowParameter> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], WorkflowParameter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameterTemplate?: Record<string, WorkflowParameter>;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: WorkflowStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusMessage" })
  statusMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "storageCapacity" })
  storageCapacity?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WorkflowTypeEnum;
}
