// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETListTypeVersionsActionEnum
type GETListTypeVersionsActionEnum string

const (
	GETListTypeVersionsActionEnumListTypeVersions GETListTypeVersionsActionEnum = "ListTypeVersions"
)

func (e GETListTypeVersionsActionEnum) ToPointer() *GETListTypeVersionsActionEnum {
	return &e
}

func (e *GETListTypeVersionsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ListTypeVersions":
		*e = GETListTypeVersionsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeVersionsActionEnum: %v", v)
	}
}

// GETListTypeVersionsDeprecatedStatusEnum - <p>The deprecation status of the extension versions that you want to get summary information about.</p> <p>Valid values include:</p> <ul> <li> <p> <code>LIVE</code>: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p> </li> <li> <p> <code>DEPRECATED</code>: The extension version has been deregistered and can no longer be used in CloudFormation operations.</p> </li> </ul> <p>The default is <code>LIVE</code>.</p>
type GETListTypeVersionsDeprecatedStatusEnum string

const (
	GETListTypeVersionsDeprecatedStatusEnumLive       GETListTypeVersionsDeprecatedStatusEnum = "LIVE"
	GETListTypeVersionsDeprecatedStatusEnumDeprecated GETListTypeVersionsDeprecatedStatusEnum = "DEPRECATED"
)

func (e GETListTypeVersionsDeprecatedStatusEnum) ToPointer() *GETListTypeVersionsDeprecatedStatusEnum {
	return &e
}

func (e *GETListTypeVersionsDeprecatedStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIVE":
		fallthrough
	case "DEPRECATED":
		*e = GETListTypeVersionsDeprecatedStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeVersionsDeprecatedStatusEnum: %v", v)
	}
}

// GETListTypeVersionsTypeEnum - <p>The kind of the extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
type GETListTypeVersionsTypeEnum string

const (
	GETListTypeVersionsTypeEnumResource GETListTypeVersionsTypeEnum = "RESOURCE"
	GETListTypeVersionsTypeEnumModule   GETListTypeVersionsTypeEnum = "MODULE"
	GETListTypeVersionsTypeEnumHook     GETListTypeVersionsTypeEnum = "HOOK"
)

func (e GETListTypeVersionsTypeEnum) ToPointer() *GETListTypeVersionsTypeEnum {
	return &e
}

func (e *GETListTypeVersionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETListTypeVersionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeVersionsTypeEnum: %v", v)
	}
}

// GETListTypeVersionsVersionEnum
type GETListTypeVersionsVersionEnum string

const (
	GETListTypeVersionsVersionEnumTwoThousandAndTen0515 GETListTypeVersionsVersionEnum = "2010-05-15"
)

func (e GETListTypeVersionsVersionEnum) ToPointer() *GETListTypeVersionsVersionEnum {
	return &e
}

func (e *GETListTypeVersionsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-15":
		*e = GETListTypeVersionsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeVersionsVersionEnum: %v", v)
	}
}

type GETListTypeVersionsRequest struct {
	Action GETListTypeVersionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The Amazon Resource Name (ARN) of the extension for which you want version summary information.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	Arn *string `queryParam:"style=form,explode=true,name=Arn"`
	// <p>The deprecation status of the extension versions that you want to get summary information about.</p> <p>Valid values include:</p> <ul> <li> <p> <code>LIVE</code>: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p> </li> <li> <p> <code>DEPRECATED</code>: The extension version has been deregistered and can no longer be used in CloudFormation operations.</p> </li> </ul> <p>The default is <code>LIVE</code>.</p>
	DeprecatedStatus *GETListTypeVersionsDeprecatedStatusEnum `queryParam:"style=form,explode=true,name=DeprecatedStatus"`
	// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// <p>The publisher ID of the extension publisher.</p> <p>Extensions published by Amazon aren't assigned a publisher ID.</p>
	PublisherID *string `queryParam:"style=form,explode=true,name=PublisherId"`
	// <p>The kind of the extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	Type *GETListTypeVersionsTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The name of the extension for which you want version summary information.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	TypeName          *string                        `queryParam:"style=form,explode=true,name=TypeName"`
	Version           GETListTypeVersionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETListTypeVersionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
