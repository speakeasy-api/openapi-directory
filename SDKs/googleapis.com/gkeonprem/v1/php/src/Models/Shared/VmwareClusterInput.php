<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VmwareClusterInput - Resource that represents a VMware user cluster. ##
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VmwareClusterInput
{
    /**
     * Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
     * 
     * @var ?string $adminClusterMembership
     */
	#[\JMS\Serializer\Annotation\SerializedName('adminClusterMembership')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $adminClusterMembership = null;
    
    /**
     * Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     * @var ?array<string, string> $annotations
     */
	#[\JMS\Serializer\Annotation\SerializedName('annotations')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $annotations = null;
    
    /**
     * Specifies anti affinity group config for the VMware user cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareAAGConfig $antiAffinityGroups
     */
	#[\JMS\Serializer\Annotation\SerializedName('antiAffinityGroups')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareAAGConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareAAGConfig $antiAffinityGroups = null;
    
    /**
     * Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Authorization $authorization
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorization')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Authorization')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Authorization $authorization = null;
    
    /**
     * Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareAutoRepairConfig $autoRepairConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('autoRepairConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareAutoRepairConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareAutoRepairConfig $autoRepairConfig = null;
    
    /**
     * Specifies control plane node config for the VMware user cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareControlPlaneNodeConfig $controlPlaneNode
     */
	#[\JMS\Serializer\Annotation\SerializedName('controlPlaneNode')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareControlPlaneNodeConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareControlPlaneNodeConfig $controlPlaneNode = null;
    
    /**
     * Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareDataplaneV2Config $dataplaneV2
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataplaneV2')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareDataplaneV2Config')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareDataplaneV2Config $dataplaneV2 = null;
    
    /**
     * A human readable description of this VMware user cluster.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Enable control plane V2. Default to false.
     * 
     * @var ?bool $enableControlPlaneV2
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableControlPlaneV2')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enableControlPlaneV2 = null;
    
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     * 
     * @var ?string $etag
     */
	#[\JMS\Serializer\Annotation\SerializedName('etag')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $etag = null;
    
    /**
     * Specifies the locad balancer config for the VMware user cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareLoadBalancerConfig $loadBalancer
     */
	#[\JMS\Serializer\Annotation\SerializedName('loadBalancer')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareLoadBalancerConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareLoadBalancerConfig $loadBalancer = null;
    
    /**
     * Immutable. The VMware user cluster resource name.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Specifies network config for the VMware user cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareNetworkConfigInput $networkConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('networkConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareNetworkConfigInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareNetworkConfigInput $networkConfig = null;
    
    /**
     * The Anthos clusters on the VMware version for your user cluster. Defaults to the admin cluster version.
     * 
     * @var ?string $onPremVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('onPremVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $onPremVersion = null;
    
    /**
     * ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ResourceStatus $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ResourceStatus')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ResourceStatus $status = null;
    
    /**
     * Specifies vSphere CSI components deployment config in the VMware user cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareStorageConfig $storage
     */
	#[\JMS\Serializer\Annotation\SerializedName('storage')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareStorageConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareStorageConfig $storage = null;
    
    /**
     * ValidationCheck represents the result of preflight check.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ValidationCheckInput $validationCheck
     */
	#[\JMS\Serializer\Annotation\SerializedName('validationCheck')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ValidationCheckInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ValidationCheckInput $validationCheck = null;
    
    /**
     * Represents configuration for the VMware VCenter for the user cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VmwareVCenterConfig $vcenter
     */
	#[\JMS\Serializer\Annotation\SerializedName('vcenter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareVCenterConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareVCenterConfig $vcenter = null;
    
    /**
     * Enable VM tracking.
     * 
     * @var ?bool $vmTrackingEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('vmTrackingEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $vmTrackingEnabled = null;
    
	public function __construct()
	{
		$this->adminClusterMembership = null;
		$this->annotations = null;
		$this->antiAffinityGroups = null;
		$this->authorization = null;
		$this->autoRepairConfig = null;
		$this->controlPlaneNode = null;
		$this->dataplaneV2 = null;
		$this->description = null;
		$this->enableControlPlaneV2 = null;
		$this->etag = null;
		$this->loadBalancer = null;
		$this->name = null;
		$this->networkConfig = null;
		$this->onPremVersion = null;
		$this->status = null;
		$this->storage = null;
		$this->validationCheck = null;
		$this->vcenter = null;
		$this->vmTrackingEnabled = null;
	}
}
