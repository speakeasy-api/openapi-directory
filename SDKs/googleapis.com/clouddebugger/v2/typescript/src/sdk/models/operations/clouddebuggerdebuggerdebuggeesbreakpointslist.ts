/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption1 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, option=true" })
  option1?: ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption1;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option2?: ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption2;
}

/**
 * Only breakpoints with the specified action will pass the filter.
 */
export enum ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum {
  Capture = "CAPTURE",
  Log = "LOG",
}

export class ClouddebuggerDebuggerDebuggeesBreakpointsListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Only breakpoints with the specified action will pass the filter.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=action.value",
  })
  actionValue?: ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=clientVersion",
  })
  clientVersion?: string;

  /**
   * Required. ID of the debuggee whose breakpoints to list.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=debuggeeId",
  })
  debuggeeId: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * When set to `true`, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeAllUsers",
  })
  includeAllUsers?: boolean;

  /**
   * When set to `true`, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeInactive",
  })
  includeInactive?: boolean;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * This field is deprecated. The following fields are always stripped out of the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=stripResults",
  })
  stripResults?: boolean;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  /**
   * A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which should be called again with the same `wait_token`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=waitToken",
  })
  waitToken?: string;
}

export class ClouddebuggerDebuggerDebuggeesBreakpointsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  listBreakpointsResponse?: shared.ListBreakpointsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
