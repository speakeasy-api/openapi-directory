"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import assignmenttype_enum as shared_assignmenttype_enum
from ..shared import classattachmentcreation as shared_classattachmentcreation
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AssignmentCreationAssigneeModeEnum(str, Enum):
    r"""Possible modes of assigning assignments"""
    EVERYONE = 'everyone'
    SELECTED = 'selected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentCreationGoogleClassroom:
    r"""Google Classroom options for this assignment"""
    
    topic_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topicId'), 'exclude': lambda f: f is None }})
    r"""Identifier of the topic where the assignment is created"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentCreationMicrosoftGraph:
    r"""Microsoft Graph options for this assignment"""
    
    categories: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""List of categories this assignment belongs to"""  
    
class AssignmentCreationStateEnum(str, Enum):
    r"""State of the assignment"""
    DRAFT = 'draft'
    ACTIVE = 'active'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssignmentCreation:
    r"""Assignment creation details"""
    
    assigned_students: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedStudents'), 'exclude': lambda f: f is None }})
    r"""Identifiers for the students that have access to the assignment"""  
    assignee_mode: Optional[AssignmentCreationAssigneeModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assigneeMode'), 'exclude': lambda f: f is None }})
    r"""Possible modes of assigning assignments"""  
    attachments: Optional[list[shared_classattachmentcreation.ClassAttachmentCreation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments'), 'exclude': lambda f: f is None }})  
    cover: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cover'), 'exclude': lambda f: f is None }})
    r"""The URL of the cover to display"""  
    cover_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverFile'), 'exclude': lambda f: f is None }})
    r"""The id of the cover to display"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description and content of the assignment"""  
    due_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dueDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date."""  
    google_classroom: Optional[AssignmentCreationGoogleClassroom] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleClassroom'), 'exclude': lambda f: f is None }})
    r"""Google Classroom options for this assignment"""  
    max_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPoints'), 'exclude': lambda f: f is None }})
    r"""If set, the grading will be enabled for the assignement with this value as the maximum of points"""  
    microsoft_graph: Optional[AssignmentCreationMicrosoftGraph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microsoftGraph'), 'exclude': lambda f: f is None }})
    r"""Microsoft Graph options for this assignment"""  
    nb_playback_authorized: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nbPlaybackAuthorized'), 'exclude': lambda f: f is None }})
    r"""The number of playback authorized on the scores of the assignment."""  
    scheduled_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The publication (scheduled) date of the assignment.
    If this one is specified, the assignment will only be listed to the teachers of the class.
    """  
    state: Optional[AssignmentCreationStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the assignment"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of the assignment"""  
    toolset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toolset'), 'exclude': lambda f: f is None }})
    r"""The id of the associated toolset"""  
    type: Optional[shared_assignmenttype_enum.AssignmentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the assignment"""  
    