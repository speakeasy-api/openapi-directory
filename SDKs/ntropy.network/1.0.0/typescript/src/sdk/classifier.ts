/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Classifier {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a batch of business transaction classification results.
   *
   * @remarks
   * Get a batch of business transaction classification results.
   */
  getABatchOfBusinessTransactionClassificationResults(
    req: operations.GetABatchOfBusinessTransactionClassificationResultsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetABatchOfBusinessTransactionClassificationResultsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetABatchOfBusinessTransactionClassificationResultsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/classifier/business/batch/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetABatchOfBusinessTransactionClassificationResultsResponse =
        new operations.GetABatchOfBusinessTransactionClassificationResultsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getABatchOfBusinessTransactionClassificationResults200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetABatchOfBusinessTransactionClassificationResults200ApplicationJSON
              );
          }
          break;
        case [404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a batch of consumer transaction classification results.
   *
   * @remarks
   * Get a batch of consumer transaction classification results.
   */
  getABatchOfConsumerTransactionClassificationResults(
    req: operations.GetABatchOfConsumerTransactionClassificationResultsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetABatchOfConsumerTransactionClassificationResultsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetABatchOfConsumerTransactionClassificationResultsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/classifier/consumer/batch/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetABatchOfConsumerTransactionClassificationResultsResponse =
        new operations.GetABatchOfConsumerTransactionClassificationResultsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getABatchOfConsumerTransactionClassificationResults200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetABatchOfConsumerTransactionClassificationResults200ApplicationJSON
              );
          }
          break;
        case [404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
