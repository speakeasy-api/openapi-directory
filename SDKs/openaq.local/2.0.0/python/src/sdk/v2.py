"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class V2:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def averages_v2_get_v2_averages_get(self, request: operations.AveragesV2GetV2AveragesGetRequest) -> operations.AveragesV2GetV2AveragesGetResponse:
        r"""Averages V2 Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/averages'
        
        query_params = utils.get_query_params(operations.AveragesV2GetV2AveragesGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AveragesV2GetV2AveragesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def cities_get_v2_cities_get(self, request: operations.CitiesGetV2CitiesGetRequest) -> operations.CitiesGetV2CitiesGetResponse:
        r"""Provides a simple listing of cities within the platform"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/cities'
        
        query_params = utils.get_query_params(operations.CitiesGetV2CitiesGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CitiesGetV2CitiesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQCitiesResult])
                res.open_aq_cities_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def countries_get_v2_countries_country_id_get(self, request: operations.CountriesGetV2CountriesCountryIDGetRequest) -> operations.CountriesGetV2CountriesCountryIDGetResponse:
        r"""Countries Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CountriesGetV2CountriesCountryIDGetRequest, base_url, '/v2/countries/{country_id}', request)
        
        query_params = utils.get_query_params(operations.CountriesGetV2CountriesCountryIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CountriesGetV2CountriesCountryIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQCountriesResult])
                res.open_aq_countries_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def countries_get_v2_countries_get(self, request: operations.CountriesGetV2CountriesGetRequest) -> operations.CountriesGetV2CountriesGetResponse:
        r"""Countries Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/countries'
        
        query_params = utils.get_query_params(operations.CountriesGetV2CountriesGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CountriesGetV2CountriesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQCountriesResult])
                res.open_aq_countries_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def demo_v2_locations_tiles_viewer_get(self) -> operations.DemoV2LocationsTilesViewerGetResponse:
        r"""Demo"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/locations/tiles/viewer'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DemoV2LocationsTilesViewerGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/html'):
                res.demo_v2_locations_tiles_viewer_get_200_text_html_string = http_res.content

        return res

    def get_mobilegentile_v2_locations_tiles_mobile_generalized_z_x_y_pbf_get(self, request: operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest) -> operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse:
        r"""Get Mobilegentile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest, base_url, '/v2/locations/tiles/mobile-generalized/{z}/{x}/{y}.pbf', request)
        
        query_params = utils.get_query_params(operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def get_mobiletile_v2_locations_tiles_mobile_z_x_y_pbf_get(self, request: operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest) -> operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse:
        r"""Get Mobiletile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest, base_url, '/v2/locations/tiles/mobile/{z}/{x}/{y}.pbf', request)
        
        query_params = utils.get_query_params(operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def get_tile_v2_locations_tiles_z_x_y_pbf_get(self, request: operations.GetTileV2LocationsTilesZXYPbfGetRequest) -> operations.GetTileV2LocationsTilesZXYPbfGetResponse:
        r"""Get Tile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTileV2LocationsTilesZXYPbfGetRequest, base_url, '/v2/locations/tiles/{z}/{x}/{y}.pbf', request)
        
        query_params = utils.get_query_params(operations.GetTileV2LocationsTilesZXYPbfGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTileV2LocationsTilesZXYPbfGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def latest_get_v2_latest_location_id_get(self, request: operations.LatestGetV2LatestLocationIDGetRequest) -> operations.LatestGetV2LatestLocationIDGetResponse:
        r"""Latest Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LatestGetV2LatestLocationIDGetRequest, base_url, '/v2/latest/{location_id}', request)
        
        query_params = utils.get_query_params(operations.LatestGetV2LatestLocationIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LatestGetV2LatestLocationIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def latest_get_v2_latest_get(self, request: operations.LatestGetV2LatestGetRequest) -> operations.LatestGetV2LatestGetResponse:
        r"""Latest Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/latest'
        
        query_params = utils.get_query_params(operations.LatestGetV2LatestGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LatestGetV2LatestGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def locations_get_v2_locations_location_id_get(self, request: operations.LocationsGetV2LocationsLocationIDGetRequest) -> operations.LocationsGetV2LocationsLocationIDGetResponse:
        r"""Locations Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LocationsGetV2LocationsLocationIDGetRequest, base_url, '/v2/locations/{location_id}', request)
        
        query_params = utils.get_query_params(operations.LocationsGetV2LocationsLocationIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LocationsGetV2LocationsLocationIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def locations_get_v2_locations_get(self, request: operations.LocationsGetV2LocationsGetRequest) -> operations.LocationsGetV2LocationsGetResponse:
        r"""Locations Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/locations'
        
        query_params = utils.get_query_params(operations.LocationsGetV2LocationsGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LocationsGetV2LocationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def measurements_get_v2_measurements_get(self, request: operations.MeasurementsGetV2MeasurementsGetRequest) -> operations.MeasurementsGetV2MeasurementsGetResponse:
        r"""Measurements Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/measurements'
        
        query_params = utils.get_query_params(operations.MeasurementsGetV2MeasurementsGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MeasurementsGetV2MeasurementsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.measurements_get_v2_measurements_get_200_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def mfr_get_v2_manufacturers_get(self) -> operations.MfrGetV2ManufacturersGetResponse:
        r"""Mfr Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/manufacturers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MfrGetV2ManufacturersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out

        return res

    def mobilegentilejson_v2_locations_tiles_mobile_generalized_tiles_json_get(self) -> operations.MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJSONGetResponse:
        r"""Mobilegentilejson"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/locations/tiles/mobile-generalized/tiles.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJSONGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TileJSON])
                res.tile_json = out

        return res

    def mobiletilejson_v2_locations_tiles_mobile_tiles_json_get(self) -> operations.MobiletilejsonV2LocationsTilesMobileTilesJSONGetResponse:
        r"""Mobiletilejson"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/locations/tiles/mobile/tiles.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MobiletilejsonV2LocationsTilesMobileTilesJSONGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TileJSON])
                res.tile_json = out

        return res

    def model_get_v2_models_get(self) -> operations.ModelGetV2ModelsGetResponse:
        r"""Model Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/models'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ModelGetV2ModelsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out

        return res

    def parameters_get_v2_parameters_get(self, request: operations.ParametersGetV2ParametersGetRequest) -> operations.ParametersGetV2ParametersGetResponse:
        r"""Parameters Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/parameters'
        
        query_params = utils.get_query_params(operations.ParametersGetV2ParametersGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ParametersGetV2ParametersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQParametersResult])
                res.open_aq_parameters_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def projects_get_v2_projects_project_id_get(self, request: operations.ProjectsGetV2ProjectsProjectIDGetRequest) -> operations.ProjectsGetV2ProjectsProjectIDGetResponse:
        r"""Projects Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProjectsGetV2ProjectsProjectIDGetRequest, base_url, '/v2/projects/{project_id}', request)
        
        query_params = utils.get_query_params(operations.ProjectsGetV2ProjectsProjectIDGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectsGetV2ProjectsProjectIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQProjectsResult])
                res.open_aq_projects_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def projects_get_v2_projects_get(self, request: operations.ProjectsGetV2ProjectsGetRequest) -> operations.ProjectsGetV2ProjectsGetResponse:
        r"""Projects Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/projects'
        
        query_params = utils.get_query_params(operations.ProjectsGetV2ProjectsGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProjectsGetV2ProjectsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQProjectsResult])
                res.open_aq_projects_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def readme_get_v2_sources_readme_slug_get(self, request: operations.ReadmeGetV2SourcesReadmeSlugGetRequest) -> operations.ReadmeGetV2SourcesReadmeSlugGetResponse:
        r"""Readme Get"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReadmeGetV2SourcesReadmeSlugGetRequest, base_url, '/v2/sources/readme/{slug}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReadmeGetV2SourcesReadmeSlugGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.readme_get_v2_sources_readme_slug_get_200_application_json_any = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def sources_get_v2_sources_get(self, request: operations.SourcesGetV2SourcesGetRequest) -> operations.SourcesGetV2SourcesGetResponse:
        r"""Sources Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/sources'
        
        query_params = utils.get_query_params(operations.SourcesGetV2SourcesGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SourcesGetV2SourcesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def summary_get_v2_summary_get(self) -> operations.SummaryGetV2SummaryGetResponse:
        r"""Summary Get"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/summary'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SummaryGetV2SummaryGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OpenAQResult])
                res.open_aq_result = out

        return res

    def tilejson_v2_locations_tiles_tiles_json_get(self) -> operations.TilejsonV2LocationsTilesTilesJSONGetResponse:
        r"""Tilejson"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/locations/tiles/tiles.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TilejsonV2LocationsTilesTilesJSONGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TileJSON])
                res.tile_json = out

        return res

    