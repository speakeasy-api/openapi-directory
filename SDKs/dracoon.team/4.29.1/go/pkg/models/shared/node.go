// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// NodeClassificationEnum - Classification ID:
//
// * `1` - public
//
// * `2` - internal
//
// * `3` - confidential
//
// * `4` - strictly confidential
type NodeClassificationEnum string

const (
	NodeClassificationEnumOne   NodeClassificationEnum = "1"
	NodeClassificationEnumTwo   NodeClassificationEnum = "2"
	NodeClassificationEnumThree NodeClassificationEnum = "3"
	NodeClassificationEnumFour  NodeClassificationEnum = "4"
)

func (e *NodeClassificationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = NodeClassificationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeClassificationEnum: %s", s)
	}
}

// NodeTypeEnum - Node type
type NodeTypeEnum string

const (
	NodeTypeEnumRoom   NodeTypeEnum = "room"
	NodeTypeEnumFolder NodeTypeEnum = "folder"
	NodeTypeEnumFile   NodeTypeEnum = "file"
)

func (e *NodeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "room":
		fallthrough
	case "folder":
		fallthrough
	case "file":
		*e = NodeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeTypeEnum: %s", s)
	}
}

// Node - Node information (Node can be a room, folder or file)
type Node struct {
	// &#128640; Since v4.15.0
	//
	// Auth parent room ID
	AuthParentID *int64 `json:"authParentId,omitempty"`
	// Version of last change in this node or a node further down the tree.
	BranchVersion *int64 `json:"branchVersion,omitempty"`
	// &#128679; Deprecated since v4.10.0
	//
	// Child nodes list (if requested)
	//
	// (for rooms / folders only)
	Children []Node `json:"children,omitempty"`
	// Classification ID:
	//
	// * `1` - public
	//
	// * `2` - internal
	//
	// * `3` - confidential
	//
	// * `4` - strictly confidential
	Classification *NodeClassificationEnum `json:"classification,omitempty"`
	// &#128679; Deprecated since v4.2.0
	//
	// Number of admins (for rooms only)
	CntAdmins *int `json:"cntAdmins,omitempty"`
	// &#128679; Deprecated since v4.11.0
	//
	// Number of direct children
	//
	// (no recursion; for rooms / folders only)
	CntChildren *int `json:"cntChildren,omitempty"`
	// Returns the number of comments of this node.
	CntComments *int `json:"cntComments,omitempty"`
	// Number of deleted versions of this file / folder
	//
	// (for rooms / folders only)
	CntDeletedVersions *int `json:"cntDeletedVersions,omitempty"`
	// Returns the number of Download Shares of this node.
	CntDownloadShares *int `json:"cntDownloadShares,omitempty"`
	// &#128640; Since v4.11.0
	//
	// Amount of direct child files where this node is the parent node
	//
	// (no recursion; for rooms / folders only)
	CntFiles *int `json:"cntFiles,omitempty"`
	// &#128640; Since v4.11.0
	//
	// Amount of direct child folders where this node is the parent node
	//
	// (no recursion; for rooms / folders only)
	CntFolders *int `json:"cntFolders,omitempty"`
	// &#128640; Since v4.11.0
	//
	// Amount of direct child rooms where this node is the parent node
	//
	// (no recursion; for rooms only)
	CntRooms *int `json:"cntRooms,omitempty"`
	// Returns the number of Upload Shares of this node.
	CntUploadShares *int `json:"cntUploadShares,omitempty"`
	// &#128679; Deprecated since v4.2.0
	//
	// Number of users (for rooms only)
	CntUsers *int `json:"cntUsers,omitempty"`
	// Creation date
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// User information
	CreatedBy *UserInfo `json:"createdBy,omitempty"`
	// Encryption states
	EncryptionInfo *EncryptionInfo `json:"encryptionInfo,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// File type / extension (for files only)
	FileType *string `json:"fileType,omitempty"`
	// Is activities log active (for rooms only)
	HasActivitiesLog *bool `json:"hasActivitiesLog,omitempty"`
	// &#128679; Deprecated since v4.10.0
	//
	// Is recycle bin active (for rooms only)
	//
	// Recycle bin is always on (disabling is not possible).
	HasRecycleBin *bool `json:"hasRecycleBin,omitempty"`
	// MD5 hash of file
	Hash *string `json:"hash,omitempty"`
	// Node ID
	ID int64 `json:"id"`
	// Inherit permissions from parent room
	//
	// (default: `false` if `parentId` is `0`; otherwise: `true`)
	InheritPermissions *bool `json:"inheritPermissions,omitempty"`
	// &#128640; Since v4.11.0
	//
	// Determines whether node is browsable by client (for rooms only)
	IsBrowsable *bool `json:"isBrowsable,omitempty"`
	// Encryption state
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// Node is marked as favorite (for rooms / folders only)
	IsFavorite *bool `json:"isFavorite,omitempty"`
	// Media server media token
	MediaToken *string `json:"mediaToken,omitempty"`
	// File media type (for files only)
	MediaType *string `json:"mediaType,omitempty"`
	// Name
	Name string `json:"name"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// Parent node ID (room or folder)
	ParentID *int64 `json:"parentId,omitempty"`
	// Parent node path
	//
	// `/` if node is a root node (room)
	ParentPath *string `json:"parentPath,omitempty"`
	// Node permissions
	Permissions *NodePermissions `json:"permissions,omitempty"`
	// Quota in byte
	Quota *int64 `json:"quota,omitempty"`
	// Retention period for deleted nodes in days
	RecycleBinRetentionPeriod *int `json:"recycleBinRetentionPeriod,omitempty"`
	// Node size in byte
	Size *int64 `json:"size,omitempty"`
	// &#128640; Since v4.22.0
	//
	// Time the node was created on external file system
	TimestampCreation *time.Time `json:"timestampCreation,omitempty"`
	// &#128640; Since v4.22.0
	//
	// Time the content of a node was last modified on external file system
	TimestampModification *time.Time `json:"timestampModification,omitempty"`
	// Node type
	Type NodeTypeEnum `json:"type"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// User information
	UpdatedBy *UserInfo `json:"updatedBy,omitempty"`
}
