<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Dates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other
     * events into one calendar.
     * 
     * State and report type filtering is no longer available.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesResponse
     */
	public function getCalendarDates(
        \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendar-dates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarDatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarDatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.
     * 
     * Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other
     * events into one calendar.
     * 
     * State filtering now applies to elections, reports and reporting periods.
     * 
     * Presidential pre-primary report due dates are not shown on even years.
     * Filers generally opt to file monthly rather than submit over 50 pre-primary election
     * reports. All reporting deadlines are available at /reporting-dates/ for reference.
     * 
     * This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql)
     * that creates the calendar.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesExportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesExportResponse
     */
	public function getCalendarDatesExport(
        \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesExportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendar-dates/export/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesExportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCalendarDatesExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarDatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarDatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * FEC election dates since 1995.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetElectionDatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetElectionDatesResponse
     */
	public function getElectionDates(
        \OpenAPI\OpenAPI\Models\Operations\GetElectionDatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetElectionDatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/election-dates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetElectionDatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetElectionDatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getElectionDatesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetElectionDatesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * FEC election dates since 1995.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetReportingDatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetReportingDatesResponse
     */
	public function getReportingDates(
        \OpenAPI\OpenAPI\Models\Operations\GetReportingDatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetReportingDatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reporting-dates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetReportingDatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetReportingDatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getReportingDatesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetReportingDatesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}