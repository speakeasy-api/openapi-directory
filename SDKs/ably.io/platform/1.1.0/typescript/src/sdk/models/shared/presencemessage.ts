/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Extras } from "./extras";
import { Expose, Type } from "class-transformer";

/**
 * The event signified by a PresenceMessage.
 */
export enum PresenceMessageActionEnum {
  Absent = "ABSENT",
  Present = "PRESENT",
  Enter = "ENTER",
  Leave = "LEAVE",
  Update = "UPDATE",
}

export class PresenceMessage extends SpeakeasyBase {
  /**
   * The event signified by a PresenceMessage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: PresenceMessageActionEnum;

  /**
   * The client ID of the publisher of this presence update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  /**
   * The connection ID of the publisher of this presence update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectionId" })
  connectionId?: string;

  /**
   * The presence update payload, if provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  data?: string;

  /**
   * This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the data payload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encoding" })
  encoding?: string;

  /**
   * Extras object. Currently only allows for [push](https://www.ably.io/documentation/general/push/publish#channel-broadcast-example) extra.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extras" })
  @Type(() => Extras)
  extras?: Extras;

  /**
   * Unique ID assigned by Ably to this presence update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Timestamp when the presence update was received by Ably, as milliseconds since the epoch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: number;
}
