/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ChallengeData - It is contained in addition to the data element 'chosenScaMethod' if challenge data is needed for SCA.
 * In rare cases this attribute is also used in the context of the 'startAuthorisationWithPsuAuthentication' link.
 * 
 */
public class ChallengeData {
    /**
     * Additional explanation for the PSU to explain
     * e.g. fallback mechanism for the chosen SCA method.
     * The TPP is obliged to show this to the PSU.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalInformation")
    public String additionalInformation;

    public ChallengeData withAdditionalInformation(String additionalInformation) {
        this.additionalInformation = additionalInformation;
        return this;
    }
    
    /**
     * A collection of strings as challenge data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public String[] data;

    public ChallengeData withData(String[] data) {
        this.data = data;
        return this;
    }
    
    /**
     * PNG data (max. 512 kilobyte) to be displayed to the PSU,
     * Base64 encoding, cp. [RFC4648].
     * This attribute is used only, when PHOTO_OTP or CHIP_OTP
     * is the selected SCA method.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public ChallengeData withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * A link where the ASPSP will provides the challenge image for the TPP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageLink")
    public String imageLink;

    public ChallengeData withImageLink(String imageLink) {
        this.imageLink = imageLink;
        return this;
    }
    
    /**
     * The format type of the OTP to be typed in. The admitted values are "characters" or "integer".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otpFormat")
    public ChallengeDataOtpFormatEnum otpFormat;

    public ChallengeData withOtpFormat(ChallengeDataOtpFormatEnum otpFormat) {
        this.otpFormat = otpFormat;
        return this;
    }
    
    /**
     * The maximal length for the OTP to be typed in by the PSU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otpMaxLength")
    public Long otpMaxLength;

    public ChallengeData withOtpMaxLength(Long otpMaxLength) {
        this.otpMaxLength = otpMaxLength;
        return this;
    }
    
    public ChallengeData(){}
}
