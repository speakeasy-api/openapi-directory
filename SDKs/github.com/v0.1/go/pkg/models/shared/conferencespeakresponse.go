// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceSpeakResponseMessageEnum - Response message
type ConferenceSpeakResponseMessageEnum string

const (
	ConferenceSpeakResponseMessageEnumConferenceSpeakExecuted                 ConferenceSpeakResponseMessageEnum = "Conference Speak Executed"
	ConferenceSpeakResponseMessageEnumConferenceNameParameterMustBePresent    ConferenceSpeakResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferenceSpeakResponseMessageEnumTextParameterMustBePresent              ConferenceSpeakResponseMessageEnum = "Text Parameter must be present"
	ConferenceSpeakResponseMessageEnumMemberIDParameterMustBePresent          ConferenceSpeakResponseMessageEnum = "MemberID Parameter must be present"
	ConferenceSpeakResponseMessageEnumConferenceSpeakFailedConferenceNotFound ConferenceSpeakResponseMessageEnum = "Conference Speak Failed -- Conference not found"
	ConferenceSpeakResponseMessageEnumConferenceSpeakFailed                   ConferenceSpeakResponseMessageEnum = "Conference Speak Failed"
)

func (e *ConferenceSpeakResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Conference Speak Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "Text Parameter must be present":
		fallthrough
	case "MemberID Parameter must be present":
		fallthrough
	case "Conference Speak Failed -- Conference not found":
		fallthrough
	case "Conference Speak Failed":
		*e = ConferenceSpeakResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceSpeakResponseMessageEnum: %s", s)
	}
}

// ConferenceSpeakResponse - Response
type ConferenceSpeakResponse struct {
	// Response message
	Message ConferenceSpeakResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
