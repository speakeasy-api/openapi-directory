// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeSnapshotSchedulesActionEnum
type GETDescribeSnapshotSchedulesActionEnum string

const (
	GETDescribeSnapshotSchedulesActionEnumDescribeSnapshotSchedules GETDescribeSnapshotSchedulesActionEnum = "DescribeSnapshotSchedules"
)

func (e *GETDescribeSnapshotSchedulesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeSnapshotSchedules":
		*e = GETDescribeSnapshotSchedulesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeSnapshotSchedulesActionEnum: %s", s)
	}
}

// GETDescribeSnapshotSchedulesVersionEnum
type GETDescribeSnapshotSchedulesVersionEnum string

const (
	GETDescribeSnapshotSchedulesVersionEnumTwoThousandAndTwelve1201 GETDescribeSnapshotSchedulesVersionEnum = "2012-12-01"
)

func (e *GETDescribeSnapshotSchedulesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETDescribeSnapshotSchedulesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeSnapshotSchedulesVersionEnum: %s", s)
	}
}

type GETDescribeSnapshotSchedulesQueryParams struct {
	Action GETDescribeSnapshotSchedulesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The unique identifier for the cluster whose snapshot schedules you want to view.
	ClusterIdentifier *string `queryParam:"style=form,explode=true,name=ClusterIdentifier"`
	// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// A unique identifier for a snapshot schedule.
	ScheduleIdentifier *string `queryParam:"style=form,explode=true,name=ScheduleIdentifier"`
	// The key value for a snapshot schedule tag.
	TagKeys []string `queryParam:"style=form,explode=true,name=TagKeys"`
	// The value corresponding to the key of the snapshot schedule tag.
	TagValues []string                                `queryParam:"style=form,explode=true,name=TagValues"`
	Version   GETDescribeSnapshotSchedulesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeSnapshotSchedulesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeSnapshotSchedulesRequest struct {
	QueryParams GETDescribeSnapshotSchedulesQueryParams
	Headers     GETDescribeSnapshotSchedulesHeaders
}

type GETDescribeSnapshotSchedulesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
