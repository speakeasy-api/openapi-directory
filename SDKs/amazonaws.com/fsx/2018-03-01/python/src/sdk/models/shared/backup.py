"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import activedirectorybackupattributes as shared_activedirectorybackupattributes
from ..shared import backupfailuredetails as shared_backupfailuredetails
from ..shared import backuplifecycle_enum as shared_backuplifecycle_enum
from ..shared import backuptype_enum as shared_backuptype_enum
from ..shared import filesystem as shared_filesystem
from ..shared import resourcetype_enum as shared_resourcetype_enum
from ..shared import tag as shared_tag
from ..shared import volume as shared_volume
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Backup:
    r"""A backup of an Amazon FSx for Windows File Server, Amazon FSx for Lustre file system, Amazon FSx for NetApp ONTAP volume, or Amazon FSx for OpenZFS file system."""
    
    backup_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupId') }})  
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    file_system: shared_filesystem.FileSystem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystem') }})  
    lifecycle: shared_backuplifecycle_enum.BackupLifecycleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lifecycle') }})  
    type: shared_backuptype_enum.BackupTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    directory_information: Optional[shared_activedirectorybackupattributes.ActiveDirectoryBackupAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectoryInformation'), 'exclude': lambda f: f is None }})  
    failure_details: Optional[shared_backupfailuredetails.BackupFailureDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureDetails'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerId'), 'exclude': lambda f: f is None }})
    r"""An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources."""  
    progress_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProgressPercent'), 'exclude': lambda f: f is None }})
    r"""The current percent of progress of an asynchronous task."""  
    resource_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceARN'), 'exclude': lambda f: f is None }})  
    resource_type: Optional[shared_resourcetype_enum.ResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceType'), 'exclude': lambda f: f is None }})  
    source_backup_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceBackupId'), 'exclude': lambda f: f is None }})
    r"""The ID of the source backup. Specifies the backup that you are copying."""  
    source_backup_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceBackupRegion'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    volume: Optional[shared_volume.Volume] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Volume'), 'exclude': lambda f: f is None }})
    r"""Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume."""  
    