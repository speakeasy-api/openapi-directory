"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VisionDatasets:
    r"""Resources that manage image datasets."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_dataset(self, request: operations.CreateDatasetRequestBody, security: operations.CreateDatasetSecurity) -> operations.CreateDatasetResponse:
        r"""Create a Dataset
        Creates a dataset and labels, if they're specified.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/datasets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDatasetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dataset])
                res.dataset = out

        return res

    def delete_dataset_1(self, request: operations.DeleteDataset1Request, security: operations.DeleteDataset1Security) -> operations.DeleteDataset1Response:
        r"""Delete a Dataset
        Deletes the specified dataset and associated labels and examples.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDataset1Request, base_url, '/v2/vision/datasets/{datasetId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDataset1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeletionResponse])
                res.deletion_response = out

        return res

    def get_dataset_1(self, request: operations.GetDataset1Request, security: operations.GetDataset1Security) -> operations.GetDataset1Response:
        r"""Get a Dataset
        Returns a single dataset.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDataset1Request, base_url, '/v2/vision/datasets/{datasetId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDataset1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dataset])
                res.dataset = out

        return res

    def get_1(self, request: operations.Get1Request, security: operations.Get1Security) -> operations.Get1Response:
        r"""Get Deletion Status
        Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Get1Request, base_url, '/v2/vision/deletion/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Get1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeletionResponse])
                res.deletion_response = out

        return res

    def list_datasets_1(self, request: operations.ListDatasets1Request, security: operations.ListDatasets1Security) -> operations.ListDatasets1Response:
        r"""Get All Datasets
        Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/datasets'
        
        query_params = utils.get_query_params(operations.ListDatasets1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDatasets1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatasetList])
                res.dataset_list = out

        return res

    def upload_dataset_async_1(self, request: operations.UploadDatasetAsync1RequestBody, security: operations.UploadDatasetAsync1Security) -> operations.UploadDatasetAsync1Response:
        r"""Create a Dataset From a Zip File Asynchronously
        Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/datasets/upload'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadDatasetAsync1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dataset])
                res.dataset = out

        return res

    def upload_dataset_sync_1(self, request: operations.UploadDatasetSync1RequestBody, security: operations.UploadDatasetSync1Security) -> operations.UploadDatasetSync1Response:
        r"""Create a Dataset From a Zip File Synchronously
        Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/datasets/upload/sync'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadDatasetSync1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dataset])
                res.dataset = out

        return res

    