// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SandboxIncomeFireWebhookRequestVerificationStatusEnum - `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
//
// `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
//
// `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
type SandboxIncomeFireWebhookRequestVerificationStatusEnum string

const (
	SandboxIncomeFireWebhookRequestVerificationStatusEnumVerificationStatusProcessingComplete SandboxIncomeFireWebhookRequestVerificationStatusEnum = "VERIFICATION_STATUS_PROCESSING_COMPLETE"
	SandboxIncomeFireWebhookRequestVerificationStatusEnumVerificationStatusProcessingFailed   SandboxIncomeFireWebhookRequestVerificationStatusEnum = "VERIFICATION_STATUS_PROCESSING_FAILED"
	SandboxIncomeFireWebhookRequestVerificationStatusEnumVerificationStatusPendingApproval    SandboxIncomeFireWebhookRequestVerificationStatusEnum = "VERIFICATION_STATUS_PENDING_APPROVAL"
)

func (e SandboxIncomeFireWebhookRequestVerificationStatusEnum) ToPointer() *SandboxIncomeFireWebhookRequestVerificationStatusEnum {
	return &e
}

func (e *SandboxIncomeFireWebhookRequestVerificationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERIFICATION_STATUS_PROCESSING_COMPLETE":
		fallthrough
	case "VERIFICATION_STATUS_PROCESSING_FAILED":
		fallthrough
	case "VERIFICATION_STATUS_PENDING_APPROVAL":
		*e = SandboxIncomeFireWebhookRequestVerificationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SandboxIncomeFireWebhookRequestVerificationStatusEnum: %v", v)
	}
}

// SandboxIncomeFireWebhookRequest - SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook`
type SandboxIncomeFireWebhookRequest struct {
	// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
	ClientID *string `json:"client_id,omitempty"`
	// The Item ID associated with the verification.
	ItemID string `json:"item_id"`
	// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
	Secret *string `json:"secret,omitempty"`
	// The Plaid `user_id` of the User associated with this webhook, warning, or error.
	UserID *string `json:"user_id,omitempty"`
	// `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
	//
	// `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
	//
	// `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
	VerificationStatus SandboxIncomeFireWebhookRequestVerificationStatusEnum `json:"verification_status"`
	// The URL to which the webhook should be sent.
	Webhook string `json:"webhook"`
}
