// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ModifyAllowedNetworksPathParams struct {
	// Policy server ID for which you want to manage allowed networks.
	NodeID string `pathParam:"style=simple,explode=false,name=nodeId"`
}

type ModifyAllowedNetworksRequestBodyAllowedNetworks struct {
	// List of networks to add to existing allowed networks for that server
	Add []interface{} `json:"add,omitempty"`
	// List of networks to remove from existing allowed networks for that server
	Delete []interface{} `json:"delete,omitempty"`
}

type ModifyAllowedNetworksRequestBody struct {
	AllowedNetworks *ModifyAllowedNetworksRequestBodyAllowedNetworks `json:"allowed_networks,omitempty"`
}

type ModifyAllowedNetworksRequest struct {
	PathParams ModifyAllowedNetworksPathParams
	Request    ModifyAllowedNetworksRequestBody `request:"mediaType=application/json"`
}

// ModifyAllowedNetworks200ApplicationJSONActionEnum - The id of the action
type ModifyAllowedNetworks200ApplicationJSONActionEnum string

const (
	ModifyAllowedNetworks200ApplicationJSONActionEnumModifySetting ModifyAllowedNetworks200ApplicationJSONActionEnum = "modifySetting"
)

func (e *ModifyAllowedNetworks200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "modifySetting":
		*e = ModifyAllowedNetworks200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyAllowedNetworks200ApplicationJSONActionEnum: %s", s)
	}
}

// ModifyAllowedNetworks200ApplicationJSONData - Information about the allowed_networks settings
type ModifyAllowedNetworks200ApplicationJSONData struct {
	// Array of allowed networks
	AllowedNetworks []interface{} `json:"allowed_networks,omitempty"`
}

// ModifyAllowedNetworks200ApplicationJSONResultEnum - Result of the request
type ModifyAllowedNetworks200ApplicationJSONResultEnum string

const (
	ModifyAllowedNetworks200ApplicationJSONResultEnumSuccess ModifyAllowedNetworks200ApplicationJSONResultEnum = "success"
	ModifyAllowedNetworks200ApplicationJSONResultEnumError   ModifyAllowedNetworks200ApplicationJSONResultEnum = "error"
)

func (e *ModifyAllowedNetworks200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ModifyAllowedNetworks200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyAllowedNetworks200ApplicationJSONResultEnum: %s", s)
	}
}

// ModifyAllowedNetworks200ApplicationJSON - Allowed Networks
type ModifyAllowedNetworks200ApplicationJSON struct {
	// The id of the action
	Action ModifyAllowedNetworks200ApplicationJSONActionEnum `json:"action"`
	// Information about the allowed_networks settings
	Data ModifyAllowedNetworks200ApplicationJSONData `json:"data"`
	// Result of the request
	Result ModifyAllowedNetworks200ApplicationJSONResultEnum `json:"result"`
}

type ModifyAllowedNetworksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Allowed Networks
	ModifyAllowedNetworks200ApplicationJSONObject *ModifyAllowedNetworks200ApplicationJSON
}
