"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import proofreaderwithlanguage as shared_proofreaderwithlanguage
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientProfileNpsAverage:
    r"""information for all nps survey that this client completed"""
    
    completed_surveys_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_surveys_count'), 'exclude': lambda f: f is None }})
    r"""total number of completed survey count by this client"""  
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""average score for all coompleted surveys"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientProfileNpsLast:
    r"""last survey info"""
    
    completion_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completion_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""last surveys completion date"""  
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""score that the client gave us"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientProfileNps:
    r"""net promoter score info for this client"""
    
    average: Optional[ClientProfileNpsAverage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('average'), 'exclude': lambda f: f is None }})
    r"""information for all nps survey that this client completed"""  
    last: Optional[ClientProfileNpsLast] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last'), 'exclude': lambda f: f is None }})
    r"""last survey info"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientProfile:
    r"""Client profile"""
    
    account_creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_creation_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z"""  
    client_project_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_project_count'), 'exclude': lambda f: f is None }})
    r"""total project count that this client sent"""  
    corporate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporate'), 'exclude': lambda f: f is None }})
    r"""corporate name"""  
    corporate_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporate_id'), 'exclude': lambda f: f is None }})
    r"""corporate id"""  
    corporate_user_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporate_user_count'), 'exclude': lambda f: f is None }})
    r"""total user count in a corporation"""  
    frequent_file_extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequent_file_extension'), 'exclude': lambda f: f is None }})
    r"""the file extension for the files that usually this client sent"""  
    frequent_language_pairs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequent_language_pairs'), 'exclude': lambda f: f is None }})
    r"""frequent language pairs"""  
    full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name'), 'exclude': lambda f: f is None }})
    r"""full name of the client"""  
    growth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('growth'), 'exclude': lambda f: f is None }})
    r"""The answer for the question \\"Is there any growth for this corporate's spending\\". The values can be true, false or null if the corporate is oour client for less than 6 months"""  
    is_complex: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_complex'), 'exclude': lambda f: f is None }})
    r"""the answer for the question \\"Is this client usually sent complex projects?\\" """  
    last_12_months_spending: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_12_months_spending'), 'exclude': lambda f: f is None }})
    r"""corporate's spending in twelve months"""  
    last_project: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_project'), 'exclude': lambda f: f is None }})
    r"""the quote number for the last project of this client"""  
    last_project_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_project_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""the creation date of the last project that is sent by this client"""  
    last_proofreaders: Optional[list[shared_proofreaderwithlanguage.ProofreaderWithLanguage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_proofreaders'), 'exclude': lambda f: f is None }})
    r"""list of prooofreaders for the target languages of last project"""  
    notes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""notes that is submited for this client and/or with her projects"""  
    nps: Optional[ClientProfileNps] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nps'), 'exclude': lambda f: f is None }})
    r"""net promoter score info for this client"""  
    user_rank_in_project_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_rank_in_project_count'), 'exclude': lambda f: f is None }})
    r"""rank of the user in all corporate users for project count. If the user is the most active user foor sending projects her rank is 1"""  
    user_rank_in_spending: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_rank_in_spending'), 'exclude': lambda f: f is None }})
    r"""rank of the user in all corporate users for total spending. If the user is the most active user for spending her rank is 1"""  
    