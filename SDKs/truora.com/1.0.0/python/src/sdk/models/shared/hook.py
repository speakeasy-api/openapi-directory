"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class HookEventTypeEnum(str, Enum):
    r"""Entity events you want to be notified. If all is selected, there is no need to enter actions"""
    ALL = 'all'
    CHECK = 'check'

class HookStatusEnum(str, Enum):
    r"""indicates whether the hook is active or not. enabled by default"""
    ENABLED = 'enabled'
    DISABLED = 'disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Hook:
    r"""Represents a hook configuration"""
    
    actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions'), 'exclude': lambda f: f is None }})
    r"""Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three"""  
    event_type: Optional[HookEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type'), 'exclude': lambda f: f is None }})
    r"""Entity events you want to be notified. If all is selected, there is no need to enter actions"""  
    signing_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signing_key'), 'exclude': lambda f: f is None }})
    r"""Secret random hexadecimal key used to sign the event and confirm its legitimacy. Signing keys are used to decode the JWT you get as payload from events"""  
    status: Optional[HookStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates whether the hook is active or not. enabled by default"""  
    subscriber_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_type'), 'exclude': lambda f: f is None }})
    r"""Platform with an endpoint ready to process the information. Only web is supported currently"""  
    subscriber_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_url'), 'exclude': lambda f: f is None }})
    r"""Link where notification requests will be sent, required when subscriber_type is web"""  
    