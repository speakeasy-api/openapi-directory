"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateInventoryBySkuandWarehouseUpdateInventoryBySkuandWarehouseRequest:
    
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})  
    time_to_refill_deprecated: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeToRefill (deprecated)') }})  
    unlimited_quantity: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlimitedQuantity') }})  
    date_utc_on_balance_system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateUtcOnBalanceSystem'), 'exclude': lambda f: f is None }})
    r"""Defines the corresponding moment to the informed warehouse. It is useful due to the liberation of handling order reservations.
    
    When requested as `null`, this value will be the date/time of the request. Its format is `DateTimeOffset`, as in `yyyy-mm-dd-Thh:mm:ss`. For example: `2022-03-15T00:52:16`.
    """  
    

@dataclasses.dataclass
class UpdateInventoryBySkuandWarehouseRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    request_body: UpdateInventoryBySkuandWarehouseUpdateInventoryBySkuandWarehouseRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    sku_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'skuId', 'style': 'simple', 'explode': False }})  
    warehouse_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'warehouseId', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateInventoryBySkuandWarehouseResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    