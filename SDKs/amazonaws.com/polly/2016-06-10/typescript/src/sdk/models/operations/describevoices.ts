/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis.
 */
export enum DescribeVoicesEngineEnum {
  Standard = "standard",
  Neural = "neural",
}

/**
 *  The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned.
 */
export enum DescribeVoicesLanguageCodeEnum {
  Arb = "arb",
  CmnCN = "cmn-CN",
  CyGB = "cy-GB",
  DaDK = "da-DK",
  DEDE = "de-DE",
  EnAU = "en-AU",
  EnGB = "en-GB",
  EnGBWLS = "en-GB-WLS",
  EnIN = "en-IN",
  EnUS = "en-US",
  ESES = "es-ES",
  EsMX = "es-MX",
  EsUS = "es-US",
  FrCA = "fr-CA",
  FRFR = "fr-FR",
  ISIS = "is-IS",
  ITIT = "it-IT",
  JaJP = "ja-JP",
  HiIN = "hi-IN",
  KoKR = "ko-KR",
  NbNO = "nb-NO",
  NLNL = "nl-NL",
  PLPL = "pl-PL",
  PtBR = "pt-BR",
  PTPT = "pt-PT",
  RORO = "ro-RO",
  RURU = "ru-RU",
  SvSE = "sv-SE",
  TRTR = "tr-TR",
  EnNZ = "en-NZ",
  EnZA = "en-ZA",
  CaES = "ca-ES",
  DeAT = "de-AT",
  YueCN = "yue-CN",
  ArAE = "ar-AE",
  FIFI = "fi-FI",
}

export class DescribeVoicesRequest extends SpeakeasyBase {
  /**
   * Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Engine",
  })
  engine?: DescribeVoicesEngineEnum;

  /**
   * Boolean value indicating whether to return any bilingual voices that use the specified language as an additional language. For instance, if you request all languages that use US English (es-US), and there is an Italian voice that speaks both Italian (it-IT) and US English, that voice will be included if you specify <code>yes</code> but not if you specify <code>no</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=IncludeAdditionalLanguageCodes",
  })
  includeAdditionalLanguageCodes?: boolean;

  /**
   *  The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=LanguageCode",
  })
  languageCode?: DescribeVoicesLanguageCodeEnum;

  /**
   * An opaque pagination token returned from the previous <code>DescribeVoices</code> operation. If present, this indicates where to continue the listing.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class DescribeVoicesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  describeVoicesOutput?: shared.DescribeVoicesOutput;

  /**
   * InvalidNextTokenException
   */
  @SpeakeasyMetadata()
  invalidNextTokenException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceFailureException
   */
  @SpeakeasyMetadata()
  serviceFailureException?: any;
}
