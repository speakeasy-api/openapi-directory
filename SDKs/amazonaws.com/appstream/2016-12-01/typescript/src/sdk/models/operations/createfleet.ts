/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreateFleetXAmzTargetEnum {
  PhotonAdminProxyServiceCreateFleet = "PhotonAdminProxyService.CreateFleet",
}

export class CreateFleetRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createFleetRequest: shared.CreateFleetRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreateFleetXAmzTargetEnum;
}

export class CreateFleetResponse extends SpeakeasyBase {
  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createFleetResult?: shared.CreateFleetResult;

  /**
   * IncompatibleImageException
   */
  @SpeakeasyMetadata()
  incompatibleImageException?: any;

  /**
   * InvalidAccountStatusException
   */
  @SpeakeasyMetadata()
  invalidAccountStatusException?: any;

  /**
   * InvalidParameterCombinationException
   */
  @SpeakeasyMetadata()
  invalidParameterCombinationException?: any;

  /**
   * InvalidRoleException
   */
  @SpeakeasyMetadata()
  invalidRoleException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * OperationNotPermittedException
   */
  @SpeakeasyMetadata()
  operationNotPermittedException?: any;

  /**
   * RequestLimitExceededException
   */
  @SpeakeasyMetadata()
  requestLimitExceededException?: any;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotAvailableException
   */
  @SpeakeasyMetadata()
  resourceNotAvailableException?: any;
}
