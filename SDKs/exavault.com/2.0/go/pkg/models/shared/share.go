// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum - Type is message.
type ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum string

const (
	ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnumMessage ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum = "message"
)

func (e *ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "message":
		*e = ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum: %s", s)
	}
}

type ShareShareRelationshipsShareRelationshipsMessageShareMessageData struct {
	// ID of the message.
	ID *int64 `json:"id,omitempty"`
	// Type is message.
	Type *ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum `json:"type,omitempty"`
}

type ShareShareRelationshipsShareRelationshipsMessage struct {
	Data *ShareShareRelationshipsShareRelationshipsMessageShareMessageData `json:"data,omitempty"`
}

// ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum - Type is notification.
type ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum string

const (
	ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnumNotification ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum = "notification"
)

func (e *ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notification":
		*e = ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum: %s", s)
	}
}

type ShareShareRelationshipsShareRelationshipsNotificationData struct {
	// ID of the notification.
	ID *int64 `json:"id,omitempty"`
	// Type is notification.
	Type *ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum `json:"type,omitempty"`
}

type ShareShareRelationshipsShareRelationshipsNotification struct {
	Data *ShareShareRelationshipsShareRelationshipsNotificationData `json:"data,omitempty"`
}

type ShareShareRelationshipsShareRelationshipsOwnerData struct {
	// ID of the owner.
	ID *int64 `json:"id,omitempty"`
	// Type is user.
	Type *string `json:"type,omitempty"`
}

type ShareShareRelationshipsShareRelationshipsOwner struct {
	Data *ShareShareRelationshipsShareRelationshipsOwnerData `json:"data,omitempty"`
}

// ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum - Type is resource.
type ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum string

const (
	ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnumResource ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum = "resource"
)

func (e *ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resource":
		*e = ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum: %s", s)
	}
}

type ShareShareRelationshipsShareRelationshipsResourceShareResourceData struct {
	// ID of the shared resource.
	ID *int64 `json:"id,omitempty"`
	// Type is resource.
	Type *ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum `json:"type,omitempty"`
}

type ShareShareRelationshipsShareRelationshipsResource struct {
	Data *ShareShareRelationshipsShareRelationshipsResourceShareResourceData `json:"data,omitempty"`
}

// ShareShareRelationships - Message, owner, resource, and notification relationships of the share.
type ShareShareRelationships struct {
	Messages      []ShareShareRelationshipsShareRelationshipsMessage      `json:"messages,omitempty"`
	Notifications []ShareShareRelationshipsShareRelationshipsNotification `json:"notifications,omitempty"`
	Owner         *ShareShareRelationshipsShareRelationshipsOwner         `json:"owner,omitempty"`
	Resources     []ShareShareRelationshipsShareRelationshipsResource     `json:"resources,omitempty"`
}

// ShareTypeEnum - Type of the share.
type ShareTypeEnum string

const (
	ShareTypeEnumShare ShareTypeEnum = "share"
)

func (e *ShareTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "share":
		*e = ShareTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareTypeEnum: %s", s)
	}
}

// Share - Object contains share properties.
type Share struct {
	// Attributes of the share including the name, path and share recipients.
	Attributes *ShareAttributes `json:"attributes,omitempty"`
	// ID of the share.
	ID *int `json:"id,omitempty"`
	// Message, owner, resource, and notification relationships of the share.
	Relationships *ShareShareRelationships `json:"relationships,omitempty"`
	// Type of the share.
	Type *ShareTypeEnum `json:"type,omitempty"`
}
