/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AnalyzeIamPolicyResponse - A response message for AssetService.AnalyzeIamPolicy.
 */
public class AnalyzeIamPolicyResponse {
    /**
     * Represents whether all entries in the main_analysis and service_account_impersonation_analysis have been fully explored to answer the query in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullyExplored")
    public Boolean fullyExplored;
    public AnalyzeIamPolicyResponse withFullyExplored(Boolean fullyExplored) {
        this.fullyExplored = fullyExplored;
        return this;
    }
    
    /**
     * An analysis message to group the query and results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mainAnalysis")
    public IamPolicyAnalysis mainAnalysis;
    public AnalyzeIamPolicyResponse withMainAnalysis(IamPolicyAnalysis mainAnalysis) {
        this.mainAnalysis = mainAnalysis;
        return this;
    }
    
    /**
     * A list of non-critical errors happened during the request handling to explain why `fully_explored` is false, or empty if no error happened.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonCriticalErrors")
    public GoogleCloudAssetV1p4beta1AnalysisState[] nonCriticalErrors;
    public AnalyzeIamPolicyResponse withNonCriticalErrors(GoogleCloudAssetV1p4beta1AnalysisState[] nonCriticalErrors) {
        this.nonCriticalErrors = nonCriticalErrors;
        return this;
    }
    
    /**
     * The service account impersonation analysis if AnalyzeIamPolicyRequest.analyze_service_account_impersonation is enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccountImpersonationAnalysis")
    public IamPolicyAnalysis[] serviceAccountImpersonationAnalysis;
    public AnalyzeIamPolicyResponse withServiceAccountImpersonationAnalysis(IamPolicyAnalysis[] serviceAccountImpersonationAnalysis) {
        this.serviceAccountImpersonationAnalysis = serviceAccountImpersonationAnalysis;
        return this;
    }
    
}
