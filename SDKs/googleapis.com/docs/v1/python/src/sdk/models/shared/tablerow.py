"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import suggestedtablerowstyle as shared_suggestedtablerowstyle
from ..shared import tablecell as shared_tablecell
from ..shared import tablerowstyle as shared_tablerowstyle
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TableRow:
    r"""The contents and style of a row in a Table."""
    
    end_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based end index of this row, exclusive, in UTF-16 code units."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based start index of this row, in UTF-16 code units."""  
    suggested_deletion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedDeletionIds'), 'exclude': lambda f: f is None }})
    r"""The suggested deletion IDs. If empty, then there are no suggested deletions of this content."""  
    suggested_insertion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedInsertionIds'), 'exclude': lambda f: f is None }})
    r"""The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion."""  
    suggested_table_row_style_changes: Optional[dict[str, shared_suggestedtablerowstyle.SuggestedTableRowStyle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedTableRowStyleChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested style changes to this row, keyed by suggestion ID."""  
    table_cells: Optional[list[shared_tablecell.TableCell]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableCells'), 'exclude': lambda f: f is None }})
    r"""The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table."""  
    table_row_style: Optional[shared_tablerowstyle.TableRowStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableRowStyle'), 'exclude': lambda f: f is None }})
    r"""Styles that apply to a table row."""  
    