<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ClientInvoices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * 
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePaymentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePaymentResponse
     */
	public function createPayment(
        \OpenAPI\OpenAPI\Models\Operations\CreatePaymentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/payments', \OpenAPI\OpenAPI\Models\Operations\CreatePaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "paymentDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Creates a new invoice.
     * 
     * Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceCreateDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Create1Response
     */
	public function create1(
        \OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceCreateDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Create1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Create1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerInvoiceCreateResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceCreateResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a client invoice.
     * 
     * Removes a client invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete1Response
     */
	public function delete1(
        \OpenAPI\OpenAPI\Models\Operations\Delete1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}', \OpenAPI\OpenAPI\Models\Operations\Delete1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a customer payment.
     * 
     * Removes a customer payment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete2Response
     */
	public function delete2(
        \OpenAPI\OpenAPI\Models\Operations\Delete2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/payments/{paymentId}', \OpenAPI\OpenAPI\Models\Operations\Delete2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Generates client invoices' documents.
     * 
     * Generates client invoices' documents.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DownloadDocumentsRequestDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadDocumentsResponse
     */
	public function downloadDocuments(
        \OpenAPI\OpenAPI\Models\Shared\DownloadDocumentsRequestDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/documents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Duplicate client invoice.
     * 
     * Duplicate client invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DuplicateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DuplicateResponse
     */
	public function duplicate(
        \OpenAPI\OpenAPI\Models\Operations\DuplicateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DuplicateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/duplicate', \OpenAPI\OpenAPI\Models\Operations\DuplicateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DuplicateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerInvoiceDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Duplicate client invoice as pro forma.
     * 
     * Duplicate client invoice as pro forma.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DuplicateAsProFormaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DuplicateAsProFormaResponse
     */
	public function duplicateAsProForma(
        \OpenAPI\OpenAPI\Models\Operations\DuplicateAsProFormaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DuplicateAsProFormaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/duplicate/proForma', \OpenAPI\OpenAPI\Models\Operations\DuplicateAsProFormaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DuplicateAsProFormaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerInvoiceDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * 
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllResponse
     */
	public function getAll(
        \OpenAPI\OpenAPI\Models\Operations\GetAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerInvoiceDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns client invoices' internal identifiers.
     * 
     * Returns client invoices' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIdsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIdsResponse
     */
	public function getAllIds(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIdsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIdsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIdsDefaultApplicationVndXtrfV1PlusJsonInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns client invoice details.
     * 
     * Returns client invoice details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetByIdResponse
     */
	public function getById(
        \OpenAPI\OpenAPI\Models\Operations\GetByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}', \OpenAPI\OpenAPI\Models\Operations\GetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetByIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerInvoiceDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns dates of a given client invoice.
     * 
     * Returns dates of a given client invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDatesResponse
     */
	public function getDates(
        \OpenAPI\OpenAPI\Models\Operations\GetDatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/dates', \OpenAPI\OpenAPI\Models\Operations\GetDatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerInvoiceDatesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerInvoiceDatesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates client invoice document (PDF).
     * 
     * Generates client invoice document (PDF).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocumentResponse
     */
	public function getDocument(
        \OpenAPI\OpenAPI\Models\Operations\GetDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/document', \OpenAPI\OpenAPI\Models\Operations\GetDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns payment terms of a given client invoice.
     * 
     * Returns payment terms of a given client invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentTermsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaymentTermsResponse
     */
	public function getPaymentTerms(
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentTermsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaymentTermsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/paymentTerms', \OpenAPI\OpenAPI\Models\Operations\GetPaymentTermsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaymentTermsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentTermsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaymentTermsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all payments for the client invoice.
     * 
     * Returns all payments for the client invoice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaymentsResponse
     */
	public function getPayments(
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaymentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/payments', \OpenAPI\OpenAPI\Models\Operations\GetPaymentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaymentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paymentDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PaymentDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends reminder.
     * 
     * Sends reminder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendReminderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendReminderResponse
     */
	public function sendReminder(
        \OpenAPI\OpenAPI\Models\Operations\SendReminderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendReminderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/{invoiceId}/sendReminder', \OpenAPI\OpenAPI\Models\Operations\SendReminderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendReminderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Sends reminders. Returns number of sent e-mails.
     * 
     * Sends reminders. Returns number of sent e-mails.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SendRemindersRequestDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendRemindersResponse
     */
	public function sendReminders(
        \OpenAPI\OpenAPI\Models\Shared\SendRemindersRequestDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendRemindersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounting/customers/invoices/sendReminders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendRemindersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendRemindersResponseDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SendRemindersResponseDTO', 'json');
            }
        }

        return $response;
    }
}