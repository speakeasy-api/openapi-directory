// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetProductInfoRequest struct {
	Code string `pathParam:"style=simple,explode=false,name=code"`
}

// GetProductInfo200ApplicationJSONCodeTypeEnum - The type of product code (UPC/EAN/ISBN).
type GetProductInfo200ApplicationJSONCodeTypeEnum string

const (
	GetProductInfo200ApplicationJSONCodeTypeEnumUpc  GetProductInfo200ApplicationJSONCodeTypeEnum = "UPC"
	GetProductInfo200ApplicationJSONCodeTypeEnumEan  GetProductInfo200ApplicationJSONCodeTypeEnum = "EAN"
	GetProductInfo200ApplicationJSONCodeTypeEnumIsbn GetProductInfo200ApplicationJSONCodeTypeEnum = "ISBN"
)

func (e GetProductInfo200ApplicationJSONCodeTypeEnum) ToPointer() *GetProductInfo200ApplicationJSONCodeTypeEnum {
	return &e
}

func (e *GetProductInfo200ApplicationJSONCodeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UPC":
		fallthrough
	case "EAN":
		fallthrough
	case "ISBN":
		*e = GetProductInfo200ApplicationJSONCodeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProductInfo200ApplicationJSONCodeTypeEnum: %v", v)
	}
}

// GetProductInfo200ApplicationJSONProduct - all matching product details.
type GetProductInfo200ApplicationJSONProduct struct {
	// The brand of the product (if available).
	Brand *string `json:"brand,omitempty"`
	// The category of the product (if available).
	Category *string `json:"category,omitempty"`
	// A description of the product (if available).
	Description *string `json:"description,omitempty"`
	// The EAN code of the product.
	Ean *int64 `json:"ean,omitempty"`
	// The URL for the product image.
	ImageURL *string `json:"imageUrl,omitempty"`
	// The name of the product.
	Name *string `json:"name,omitempty"`
	// The region of the product.
	Region *string `json:"region,omitempty"`
	// A list of additional item specifications (if available).
	Specs [][]string `json:"specs,omitempty"`
	// The UPC code of the product.
	Upc *int64 `json:"upc,omitempty"`
}

// GetProductInfo200ApplicationJSON - The product corresponding to the provided `code`
type GetProductInfo200ApplicationJSON struct {
	// The URL to the scannable barcode image.
	BarcodeURL *string `json:"barcodeUrl,omitempty"`
	// The type of product code (UPC/EAN/ISBN).
	CodeType *GetProductInfo200ApplicationJSONCodeTypeEnum `json:"codeType,omitempty"`
	// all matching product details.
	Product *GetProductInfo200ApplicationJSONProduct `json:"product,omitempty"`
}

type GetProductInfoResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// No product information was found for the given `code`.
	Error *shared.Error
	// The product corresponding to the provided `code`
	GetProductInfo200ApplicationJSONObject *GetProductInfo200ApplicationJSON
}
