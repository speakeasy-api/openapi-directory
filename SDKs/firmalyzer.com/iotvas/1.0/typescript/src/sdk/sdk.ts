/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Device } from "./device";
import { Firmware } from "./firmware";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["/api/v1"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides
 *
 * @remarks
 *     detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.
 *     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.
 *     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,
 *     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner
 *     to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other
 *     solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 */
export class SDK {
  public device: Device;
  public firmware: Firmware;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.device = new Device(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.firmware = new Firmware(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
