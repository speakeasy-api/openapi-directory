/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Episodes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Clips
   *
   * @remarks
   * Get Clips
   */
  getClips(
    req: operations.GetClipsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetClipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetClipsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/clips/{pid}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetClipsResponse = new operations.GetClipsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all the episodes for a category.
   *
   * @remarks
   * Get the list of all the episodes for a given category in TV & iPlayer.
   */
  getEpisodesByCategory(
    req: operations.GetEpisodesByCategoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEpisodesByCategoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEpisodesByCategoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/categories/{category}/episodes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEpisodesByCategoryResponse =
        new operations.GetEpisodesByCategoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get episodes by group, brand or series
   *
   * @remarks
   * Get episodes by group, brand or series
   */
  getEpisodesByGroup(
    req: operations.GetEpisodesByGroupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEpisodesByGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEpisodesByGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/groups/{pid}/episodes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEpisodesByGroupResponse =
        new operations.GetEpisodesByGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Child episodes for a given programme pid.
   *
   * @remarks
   * Get the child episodes belonging to a given programme identifier.
   */
  getEpisodesByParentPID(
    req: operations.GetEpisodesByParentPIDRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEpisodesByParentPIDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEpisodesByParentPIDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/programmes/{pid}/episodes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEpisodesByParentPIDResponse =
        new operations.GetEpisodesByParentPIDResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Onward Journey
   *
   * @remarks
   * Get Onward Journey (next programme)
   */
  getOnwardJourney(
    req: operations.GetOnwardJourneyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOnwardJourneyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOnwardJourneyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/episodes/{pid}/next", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOnwardJourneyResponse =
        new operations.GetOnwardJourneyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Episode for a given pid.
   *
   * @remarks
   * Get the episode for a given episode identifier.
   */
  getProgrammeByPID(
    req: operations.GetProgrammeByPIDRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProgrammeByPIDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProgrammeByPIDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/episodes/{pid}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProgrammeByPIDResponse =
        new operations.GetProgrammeByPIDResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get programme recommendations
   *
   * @remarks
   * Get programme recommendations
   */
  getProgrammeRecommendations(
    req: operations.GetProgrammeRecommendationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProgrammeRecommendationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProgrammeRecommendationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/episodes/{pid}/recommendations",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProgrammeRecommendationsResponse =
        new operations.GetProgrammeRecommendationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get programmes popular
   *
   * @remarks
   * Get programmes popular
   */
  getProgrammesPopular(
    req: operations.GetProgrammesPopularRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProgrammesPopularResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProgrammesPopularRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/groups/popular/episodes";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProgrammesPopularResponse =
        new operations.GetProgrammesPopularResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Trailers (pre-rolls)
   *
   * @remarks
   * Get Trailers (pre-rolls)
   */
  getTrailersPreRolls(
    req: operations.GetTrailersPreRollsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrailersPreRollsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrailersPreRollsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/episodes/{pid}/prerolls",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrailersPreRollsResponse =
        new operations.GetTrailersPreRollsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Follow-ups (post-rolls)
   *
   * @remarks
   * Get Follow-ups (post-rolls)
   */
  getPostRolls(
    req: operations.GetPostRollsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPostRollsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPostRollsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/episodes/{pid}/postrolls",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPostRollsResponse =
        new operations.GetPostRollsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ibl = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }
}
