"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitteeTotals:
    
    cycle: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycle') }})
    r"""Filter records to only those that are applicable to a given two-year
    period. This cycle follows the traditional House election cycle and
    subdivides the presidential and Senate elections into comparable
    two-year blocks. The cycle begins with an odd year and is named for its
    ending, even year.
    """  
    all_loans_received: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_loans_received'), 'exclude': lambda f: f is None }})  
    all_other_loans: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_other_loans'), 'exclude': lambda f: f is None }})  
    allocated_federal_election_levin_share: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_federal_election_levin_share'), 'exclude': lambda f: f is None }})  
    candidate_contribution: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_contribution'), 'exclude': lambda f: f is None }})  
    cash_on_hand_beginning_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_on_hand_beginning_period'), 'exclude': lambda f: f is None }})  
    committee_designation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_designation'), 'exclude': lambda f: f is None }})
    r"""The one-letter designation code of the organization:
             - A authorized by a candidate
             - J joint fundraising committee
             - P principal campaign committee of a candidate
             - U unauthorized
             - B lobbyist/registrant PAC
             - D leadership PAC
    """  
    committee_designation_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_designation_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter designation code of the organization:
             - A authorized by a candidate
             - J joint fundraising committee
             - P principal campaign committee of a candidate
             - U unauthorized
             - B lobbyist/registrant PAC
             - D leadership PAC
    """  
    committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    committee_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_state'), 'exclude': lambda f: f is None }})
    r"""State of the committee's address as filed on the Form 1"""  
    committee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type'), 'exclude': lambda f: f is None }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    committee_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    contribution_refunds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contribution_refunds'), 'exclude': lambda f: f is None }})  
    contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributions'), 'exclude': lambda f: f is None }})
    r"""Contribution"""  
    contributions_ie_and_party_expenditures_made_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributions_ie_and_party_expenditures_made_percent'), 'exclude': lambda f: f is None }})  
    convention_exp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('convention_exp'), 'exclude': lambda f: f is None }})  
    coordinated_expenditures_by_party_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinated_expenditures_by_party_committee'), 'exclude': lambda f: f is None }})  
    coverage_end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_end_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    coverage_start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_start_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disbursements'), 'exclude': lambda f: f is None }})
    r"""Disbursements"""  
    exempt_legal_accounting_disbursement: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exempt_legal_accounting_disbursement'), 'exclude': lambda f: f is None }})  
    exp_prior_years_subject_limits: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_prior_years_subject_limits'), 'exclude': lambda f: f is None }})  
    exp_subject_limits: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_subject_limits'), 'exclude': lambda f: f is None }})  
    fed_candidate_committee_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_candidate_committee_contributions'), 'exclude': lambda f: f is None }})  
    fed_candidate_contribution_refunds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_candidate_contribution_refunds'), 'exclude': lambda f: f is None }})  
    fed_disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_disbursements'), 'exclude': lambda f: f is None }})  
    fed_election_activity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_election_activity'), 'exclude': lambda f: f is None }})  
    fed_operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_operating_expenditures'), 'exclude': lambda f: f is None }})  
    fed_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_receipts'), 'exclude': lambda f: f is None }})  
    federal_funds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('federal_funds'), 'exclude': lambda f: f is None }})  
    filing_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filing_frequency'), 'exclude': lambda f: f is None }})
    r"""The one-letter
        code of the filing frequency:
             - A Administratively terminated
             - D Debt
             - M Monthly filer
             - Q Quarterly filer
             - T Terminated
             - W Waived
    """  
    filing_frequency_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filing_frequency_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter
        code of the filing frequency:
             - A Administratively terminated
             - D Debt
             - M Monthly filer
             - Q Quarterly filer
             - T Terminated
             - W Waived
    """  
    first_f1_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_f1_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's first Form 1"""  
    first_file_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_file_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's first filing. This is usually a Form 1 committee registration."""  
    fundraising_disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundraising_disbursements'), 'exclude': lambda f: f is None }})  
    independent_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('independent_expenditures'), 'exclude': lambda f: f is None }})  
    individual_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_contributions'), 'exclude': lambda f: f is None }})  
    individual_contributions_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_contributions_percent'), 'exclude': lambda f: f is None }})  
    individual_itemized_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_itemized_contributions'), 'exclude': lambda f: f is None }})
    r"""Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less."""  
    individual_unitemized_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_unitemized_contributions'), 'exclude': lambda f: f is None }})
    r"""Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total."""  
    itemized_convention_exp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemized_convention_exp'), 'exclude': lambda f: f is None }})  
    itemized_other_disb: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemized_other_disb'), 'exclude': lambda f: f is None }})  
    itemized_other_income: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemized_other_income'), 'exclude': lambda f: f is None }})  
    itemized_other_refunds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemized_other_refunds'), 'exclude': lambda f: f is None }})  
    itemized_refunds_relating_convention_exp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemized_refunds_relating_convention_exp'), 'exclude': lambda f: f is None }})  
    last_beginning_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_beginning_image_number'), 'exclude': lambda f: f is None }})  
    last_cash_on_hand_end_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_cash_on_hand_end_period'), 'exclude': lambda f: f is None }})  
    last_debts_owed_by_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_debts_owed_by_committee'), 'exclude': lambda f: f is None }})  
    last_debts_owed_to_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_debts_owed_to_committee'), 'exclude': lambda f: f is None }})  
    last_report_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_report_type_full'), 'exclude': lambda f: f is None }})  
    last_report_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_report_year'), 'exclude': lambda f: f is None }})  
    loan_repayments: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments'), 'exclude': lambda f: f is None }})  
    loan_repayments_candidate_loans: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_candidate_loans'), 'exclude': lambda f: f is None }})  
    loan_repayments_made: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_made'), 'exclude': lambda f: f is None }})  
    loan_repayments_other_loans: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_other_loans'), 'exclude': lambda f: f is None }})  
    loan_repayments_received: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_received'), 'exclude': lambda f: f is None }})  
    loans: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans'), 'exclude': lambda f: f is None }})  
    loans_and_loan_repayments_made: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_and_loan_repayments_made'), 'exclude': lambda f: f is None }})  
    loans_and_loan_repayments_received: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_and_loan_repayments_received'), 'exclude': lambda f: f is None }})  
    loans_made: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_made'), 'exclude': lambda f: f is None }})  
    loans_made_by_candidate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_made_by_candidate'), 'exclude': lambda f: f is None }})  
    loans_received: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_received'), 'exclude': lambda f: f is None }})  
    loans_received_from_candidate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_received_from_candidate'), 'exclude': lambda f: f is None }})  
    net_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_contributions'), 'exclude': lambda f: f is None }})  
    net_operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_operating_expenditures'), 'exclude': lambda f: f is None }})  
    non_allocated_fed_election_activity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_allocated_fed_election_activity'), 'exclude': lambda f: f is None }})  
    offsets_to_fundraising_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_fundraising_expenditures'), 'exclude': lambda f: f is None }})  
    offsets_to_legal_accounting: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_legal_accounting'), 'exclude': lambda f: f is None }})  
    offsets_to_operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_operating_expenditures'), 'exclude': lambda f: f is None }})  
    operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operating_expenditures'), 'exclude': lambda f: f is None }})  
    operating_expenditures_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operating_expenditures_percent'), 'exclude': lambda f: f is None }})  
    organization_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_type'), 'exclude': lambda f: f is None }})
    r"""The one-letter code for the kind for organization:
            - C corporation
            - L labor organization
            - M membership organization
            - T trade association
            - V cooperative
            - W corporation without capital stock
    """  
    organization_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_type_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter code for the kind for organization:
            - C corporation
            - L labor organization
            - M membership organization
            - T trade association
            - V cooperative
            - W corporation without capital stock
    """  
    other_disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_disbursements'), 'exclude': lambda f: f is None }})  
    other_fed_operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_fed_operating_expenditures'), 'exclude': lambda f: f is None }})  
    other_fed_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_fed_receipts'), 'exclude': lambda f: f is None }})  
    other_loans_received: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_loans_received'), 'exclude': lambda f: f is None }})  
    other_political_committee_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_political_committee_contributions'), 'exclude': lambda f: f is None }})  
    other_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_receipts'), 'exclude': lambda f: f is None }})  
    other_refunds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_refunds'), 'exclude': lambda f: f is None }})  
    party_and_other_committee_contributions_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party_and_other_committee_contributions_percent'), 'exclude': lambda f: f is None }})  
    party_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party_full'), 'exclude': lambda f: f is None }})
    r"""Party affiliated with a candidate or committee"""  
    pdf_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdf_url'), 'exclude': lambda f: f is None }})  
    political_party_committee_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('political_party_committee_contributions'), 'exclude': lambda f: f is None }})  
    receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipts'), 'exclude': lambda f: f is None }})  
    refunded_individual_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_individual_contributions'), 'exclude': lambda f: f is None }})  
    refunded_other_political_committee_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_other_political_committee_contributions'), 'exclude': lambda f: f is None }})  
    refunded_political_party_committee_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_political_party_committee_contributions'), 'exclude': lambda f: f is None }})  
    refunds_relating_convention_exp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunds_relating_convention_exp'), 'exclude': lambda f: f is None }})  
    repayments_loans_made_by_candidate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repayments_loans_made_by_candidate'), 'exclude': lambda f: f is None }})  
    repayments_other_loans: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repayments_other_loans'), 'exclude': lambda f: f is None }})  
    report_form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_form'), 'exclude': lambda f: f is None }})  
    shared_fed_activity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_activity'), 'exclude': lambda f: f is None }})  
    shared_fed_activity_nonfed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_activity_nonfed'), 'exclude': lambda f: f is None }})  
    shared_fed_operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_operating_expenditures'), 'exclude': lambda f: f is None }})  
    shared_nonfed_operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_nonfed_operating_expenditures'), 'exclude': lambda f: f is None }})  
    total_exp_subject_limits: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_exp_subject_limits'), 'exclude': lambda f: f is None }})  
    total_independent_contributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_independent_contributions'), 'exclude': lambda f: f is None }})  
    total_independent_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_independent_expenditures'), 'exclude': lambda f: f is None }})  
    total_offsets_to_operating_expenditures: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_offsets_to_operating_expenditures'), 'exclude': lambda f: f is None }})  
    total_transfers: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_transfers'), 'exclude': lambda f: f is None }})  
    transaction_coverage_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_coverage_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    transfers_from_affiliated_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_affiliated_committee'), 'exclude': lambda f: f is None }})  
    transfers_from_affiliated_party: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_affiliated_party'), 'exclude': lambda f: f is None }})  
    transfers_from_nonfed_account: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_nonfed_account'), 'exclude': lambda f: f is None }})  
    transfers_from_nonfed_levin: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_nonfed_levin'), 'exclude': lambda f: f is None }})  
    transfers_from_other_authorized_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_other_authorized_committee'), 'exclude': lambda f: f is None }})  
    transfers_to_affiliated_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_to_affiliated_committee'), 'exclude': lambda f: f is None }})  
    transfers_to_other_authorized_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_to_other_authorized_committee'), 'exclude': lambda f: f is None }})  
    treasurer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name'), 'exclude': lambda f: f is None }})
    r"""Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown."""  
    unitemized_convention_exp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitemized_convention_exp'), 'exclude': lambda f: f is None }})  
    unitemized_other_disb: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitemized_other_disb'), 'exclude': lambda f: f is None }})  
    unitemized_other_income: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitemized_other_income'), 'exclude': lambda f: f is None }})  
    unitemized_other_refunds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitemized_other_refunds'), 'exclude': lambda f: f is None }})  
    unitemized_refunds_relating_convention_exp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitemized_refunds_relating_convention_exp'), 'exclude': lambda f: f is None }})  
    