<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * StreamingSetupTask - A task which initializes part of a streaming Dataflow job.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class StreamingSetupTask
{
    /**
     * The user has requested drain.
     * 
     * @var ?bool $drain
     */
	#[\JMS\Serializer\Annotation\SerializedName('drain')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $drain = null;
    
    /**
     * The TCP port on which the worker should listen for messages from other streaming computation workers.
     * 
     * @var ?int $receiveWorkPort
     */
	#[\JMS\Serializer\Annotation\SerializedName('receiveWorkPort')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $receiveWorkPort = null;
    
    /**
     * Streaming appliance snapshot configuration.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StreamingApplianceSnapshotConfig $snapshotConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('snapshotConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StreamingApplianceSnapshotConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StreamingApplianceSnapshotConfig $snapshotConfig = null;
    
    /**
     * Global topology of the streaming Dataflow job, including all computations and their sharded locations.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TopologyConfig $streamingComputationTopology
     */
	#[\JMS\Serializer\Annotation\SerializedName('streamingComputationTopology')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TopologyConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TopologyConfig $streamingComputationTopology = null;
    
    /**
     * The TCP port used by the worker to communicate with the Dataflow worker harness.
     * 
     * @var ?int $workerHarnessPort
     */
	#[\JMS\Serializer\Annotation\SerializedName('workerHarnessPort')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $workerHarnessPort = null;
    
	public function __construct()
	{
		$this->drain = null;
		$this->receiveWorkPort = null;
		$this->snapshotConfig = null;
		$this->streamingComputationTopology = null;
		$this->workerHarnessPort = null;
	}
}
