"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificatebasedauthproperties as shared_certificatebasedauthproperties
from ..shared import defaultworkspacecreationproperties as shared_defaultworkspacecreationproperties
from ..shared import samlproperties as shared_samlproperties
from ..shared import selfservicepermissions as shared_selfservicepermissions
from ..shared import tenancy_enum as shared_tenancy_enum
from ..shared import workspaceaccessproperties as shared_workspaceaccessproperties
from ..shared import workspacedirectorystate_enum as shared_workspacedirectorystate_enum
from ..shared import workspacedirectorytype_enum as shared_workspacedirectorytype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkspaceDirectory:
    r"""Describes a directory that is used with Amazon WorkSpaces."""
    
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Alias'), 'exclude': lambda f: f is None }})  
    certificate_based_auth_properties: Optional[shared_certificatebasedauthproperties.CertificateBasedAuthProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateBasedAuthProperties'), 'exclude': lambda f: f is None }})  
    customer_user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerUserName'), 'exclude': lambda f: f is None }})  
    directory_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectoryId'), 'exclude': lambda f: f is None }})  
    directory_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectoryName'), 'exclude': lambda f: f is None }})  
    directory_type: Optional[shared_workspacedirectorytype_enum.WorkspaceDirectoryTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectoryType'), 'exclude': lambda f: f is None }})  
    dns_ip_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsIpAddresses'), 'exclude': lambda f: f is None }})  
    iam_role_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IamRoleId'), 'exclude': lambda f: f is None }})  
    ip_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipGroupIds'), 'exclude': lambda f: f is None }})  
    registration_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegistrationCode'), 'exclude': lambda f: f is None }})  
    saml_properties: Optional[shared_samlproperties.SamlProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SamlProperties'), 'exclude': lambda f: f is None }})  
    selfservice_permissions: Optional[shared_selfservicepermissions.SelfservicePermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelfservicePermissions'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_workspacedirectorystate_enum.WorkspaceDirectoryStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetIds'), 'exclude': lambda f: f is None }})  
    tenancy: Optional[shared_tenancy_enum.TenancyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tenancy'), 'exclude': lambda f: f is None }})  
    workspace_access_properties: Optional[shared_workspaceaccessproperties.WorkspaceAccessProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkspaceAccessProperties'), 'exclude': lambda f: f is None }})  
    workspace_creation_properties: Optional[shared_defaultworkspacecreationproperties.DefaultWorkspaceCreationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkspaceCreationProperties'), 'exclude': lambda f: f is None }})  
    workspace_security_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkspaceSecurityGroupId'), 'exclude': lambda f: f is None }})  
    