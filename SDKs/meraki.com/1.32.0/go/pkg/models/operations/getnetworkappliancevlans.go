// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkApplianceVlansRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum - The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
type GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum string

const (
	GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnumDoNotRespondToDhcpRequests GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum = "Do not respond to DHCP requests"
	GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnumRelayDhcpToAnotherServer   GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum = "Relay DHCP to another server"
	GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnumRunADhcpServer             GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum = "Run a DHCP server"
)

func (e GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum) ToPointer() *GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum {
	return &e
}

func (e *GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Do not respond to DHCP requests":
		fallthrough
	case "Relay DHCP to another server":
		fallthrough
	case "Run a DHCP server":
		*e = GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum: %v", v)
	}
}

// GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum - The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
type GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum string

const (
	GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnumOneDay        GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum = "1 day"
	GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnumOneHour       GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum = "1 hour"
	GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnumOneWeek       GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum = "1 week"
	GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnumTwelveHours   GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum = "12 hours"
	GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnumThirtyMinutes GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum = "30 minutes"
	GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnumFourHours     GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum = "4 hours"
)

func (e GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum) ToPointer() *GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum {
	return &e
}

func (e *GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1 day":
		fallthrough
	case "1 hour":
		fallthrough
	case "1 week":
		fallthrough
	case "12 hours":
		fallthrough
	case "30 minutes":
		fallthrough
	case "4 hours":
		*e = GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum: %v", v)
	}
}

// GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum - The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
type GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum string

const (
	GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnumHex     GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum = "hex"
	GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnumInteger GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum = "integer"
	GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnumIP      GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum = "ip"
	GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnumText    GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum = "text"
)

func (e GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum) ToPointer() *GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum {
	return &e
}

func (e *GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hex":
		fallthrough
	case "integer":
		fallthrough
	case "ip":
		fallthrough
	case "text":
		*e = GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum: %v", v)
	}
}

type GetNetworkApplianceVlans200ApplicationJSONDhcpOptions struct {
	// The code for the DHCP option. This should be an integer between 2 and 254.
	Code string `json:"code"`
	// The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
	Type GetNetworkApplianceVlans200ApplicationJSONDhcpOptionsTypeEnum `json:"type"`
	// The value for the DHCP option
	Value string `json:"value"`
}

// GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum - Type of the origin
type GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum string

const (
	GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnumIndependent GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = "independent"
	GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnumInternet    GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = "internet"
)

func (e GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum) ToPointer() *GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum {
	return &e
}

func (e *GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "independent":
		fallthrough
	case "internet":
		*e = GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum: %v", v)
	}
}

// GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOrigin - The origin of the prefix
type GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOrigin struct {
	// Interfaces associated with the prefix
	Interfaces []string `json:"interfaces,omitempty"`
	// Type of the origin
	Type *GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum `json:"type,omitempty"`
}

type GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignments struct {
	// Auto assign a /64 prefix from the origin to the VLAN
	Autonomous *bool `json:"autonomous,omitempty"`
	// The origin of the prefix
	Origin *GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignmentsOrigin `json:"origin,omitempty"`
	// Manual configuration of the IPv6 Appliance IP
	StaticApplianceIp6 *string `json:"staticApplianceIp6,omitempty"`
	// Manual configuration of a /64 prefix on the VLAN
	StaticPrefix *string `json:"staticPrefix,omitempty"`
}

// GetNetworkApplianceVlans200ApplicationJSONIpv6 - IPv6 configuration on the VLAN
type GetNetworkApplianceVlans200ApplicationJSONIpv6 struct {
	// Enable IPv6 on VLAN
	Enabled *bool `json:"enabled,omitempty"`
	// Prefix assignments on the VLAN
	PrefixAssignments []GetNetworkApplianceVlans200ApplicationJSONIpv6PrefixAssignments `json:"prefixAssignments,omitempty"`
}

// GetNetworkApplianceVlans200ApplicationJSONMandatoryDhcp - Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
type GetNetworkApplianceVlans200ApplicationJSONMandatoryDhcp struct {
	// Enable Mandatory DHCP on VLAN.
	Enabled *bool `json:"enabled,omitempty"`
}

type GetNetworkApplianceVlans200ApplicationJSONReservedIPRanges struct {
	// A text comment for the reserved range
	Comment *string `json:"comment,omitempty"`
	// The last IP in the reserved range
	End *string `json:"end,omitempty"`
	// The first IP in the reserved range
	Start *string `json:"start,omitempty"`
}

// GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum - Type of subnetting of the VLAN. Applicable only for template network.
type GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum string

const (
	GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnumSame   GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum = "same"
	GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnumUnique GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum = "unique"
)

func (e GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum) ToPointer() *GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum {
	return &e
}

func (e *GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "same":
		fallthrough
	case "unique":
		*e = GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum: %v", v)
	}
}

type GetNetworkApplianceVlans200ApplicationJSON struct {
	// The local IP of the appliance on the VLAN
	ApplianceIP *string `json:"applianceIp,omitempty"`
	// CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
	Cidr *string `json:"cidr,omitempty"`
	// DHCP boot option for boot filename
	DhcpBootFilename *string `json:"dhcpBootFilename,omitempty"`
	// DHCP boot option to direct boot clients to the server to load the boot file from
	DhcpBootNextServer *string `json:"dhcpBootNextServer,omitempty"`
	// Use DHCP boot options specified in other properties
	DhcpBootOptionsEnabled *bool `json:"dhcpBootOptionsEnabled,omitempty"`
	// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
	DhcpHandling *GetNetworkApplianceVlans200ApplicationJSONDhcpHandlingEnum `json:"dhcpHandling,omitempty"`
	// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
	DhcpLeaseTime *GetNetworkApplianceVlans200ApplicationJSONDhcpLeaseTimeEnum `json:"dhcpLeaseTime,omitempty"`
	// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
	DhcpOptions []GetNetworkApplianceVlans200ApplicationJSONDhcpOptions `json:"dhcpOptions,omitempty"`
	// The IPs of the DHCP servers that DHCP requests should be relayed to
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps,omitempty"`
	// The DNS nameservers used for DHCP responses, either "upstream_dns", "google_dns", "opendns", or a newline seperated string of IP addresses or domain names
	DNSNameservers *string `json:"dnsNameservers,omitempty"`
	// The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
	FixedIPAssignments map[string]interface{} `json:"fixedIpAssignments,omitempty"`
	// The id of the desired group policy to apply to the VLAN
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
	// The VLAN ID of the VLAN
	ID *string `json:"id,omitempty"`
	// The interface ID of the VLAN
	InterfaceID *string `json:"interfaceId,omitempty"`
	// IPv6 configuration on the VLAN
	Ipv6 *GetNetworkApplianceVlans200ApplicationJSONIpv6 `json:"ipv6,omitempty"`
	// Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
	MandatoryDhcp *GetNetworkApplianceVlans200ApplicationJSONMandatoryDhcp `json:"mandatoryDhcp,omitempty"`
	// Mask used for the subnet of all bound to the template networks. Applicable only for template network.
	Mask *int64 `json:"mask,omitempty"`
	// The name of the VLAN
	Name *string `json:"name,omitempty"`
	// The DHCP reserved IP ranges on the VLAN
	ReservedIPRanges []GetNetworkApplianceVlans200ApplicationJSONReservedIPRanges `json:"reservedIpRanges,omitempty"`
	// The subnet of the VLAN
	Subnet *string `json:"subnet,omitempty"`
	// Type of subnetting of the VLAN. Applicable only for template network.
	TemplateVlanType *GetNetworkApplianceVlans200ApplicationJSONTemplateVlanTypeEnum `json:"templateVlanType,omitempty"`
	// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
	VpnNatSubnet *string `json:"vpnNatSubnet,omitempty"`
}

type GetNetworkApplianceVlansResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkApplianceVlans200ApplicationJSONObjects []GetNetworkApplianceVlans200ApplicationJSON
}
