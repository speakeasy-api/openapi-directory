"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createemailidentityresponse as shared_createemailidentityresponse
from ..shared import dkimsigningkeylength_enum as shared_dkimsigningkeylength_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateEmailIdentityRequestBodyDkimSigningAttributes:
    r"""An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM"""
    
    domain_signing_private_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainSigningPrivateKey'), 'exclude': lambda f: f is None }})  
    domain_signing_selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainSigningSelector'), 'exclude': lambda f: f is None }})  
    next_signing_key_length: Optional[shared_dkimsigningkeylength_enum.DkimSigningKeyLengthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextSigningKeyLength'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateEmailIdentityRequestBody:
    
    email_identity: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailIdentity') }})
    r"""The email address or domain to verify."""  
    configuration_set_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationSetName'), 'exclude': lambda f: f is None }})
    r"""<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>"""  
    dkim_signing_attributes: Optional[CreateEmailIdentityRequestBodyDkimSigningAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DkimSigningAttributes'), 'exclude': lambda f: f is None }})
    r"""An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM"""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""An array of objects that define the tags (keys and values) to associate with the email identity."""  
    

@dataclasses.dataclass
class CreateEmailIdentityRequest:
    
    request_body: CreateEmailIdentityRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateEmailIdentityResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AlreadyExistsException"""  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    create_email_identity_response: Optional[shared_createemailidentityresponse.CreateEmailIdentityResponse] = dataclasses.field(default=None)
    r"""Success"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    