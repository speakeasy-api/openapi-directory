// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeSourceRegionsActionEnum
type POSTDescribeSourceRegionsActionEnum string

const (
	POSTDescribeSourceRegionsActionEnumDescribeSourceRegions POSTDescribeSourceRegionsActionEnum = "DescribeSourceRegions"
)

func (e POSTDescribeSourceRegionsActionEnum) ToPointer() *POSTDescribeSourceRegionsActionEnum {
	return &e
}

func (e *POSTDescribeSourceRegionsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeSourceRegions":
		*e = POSTDescribeSourceRegionsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeSourceRegionsActionEnum: %v", v)
	}
}

// POSTDescribeSourceRegionsVersionEnum
type POSTDescribeSourceRegionsVersionEnum string

const (
	POSTDescribeSourceRegionsVersionEnumTwoThousandAndFourteen1031 POSTDescribeSourceRegionsVersionEnum = "2014-10-31"
)

func (e POSTDescribeSourceRegionsVersionEnum) ToPointer() *POSTDescribeSourceRegionsVersionEnum {
	return &e
}

func (e *POSTDescribeSourceRegionsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2014-10-31":
		*e = POSTDescribeSourceRegionsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeSourceRegionsVersionEnum: %v", v)
	}
}

type POSTDescribeSourceRegionsRequest struct {
	Action POSTDescribeSourceRegionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords        *string                              `queryParam:"style=form,explode=true,name=MaxRecords"`
	RequestBody       []byte                               `request:"mediaType=text/xml"`
	Version           POSTDescribeSourceRegionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeSourceRegionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
