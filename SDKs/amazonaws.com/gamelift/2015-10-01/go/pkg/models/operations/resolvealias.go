// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ResolveAliasXAmzTargetEnum
type ResolveAliasXAmzTargetEnum string

const (
	ResolveAliasXAmzTargetEnumGameLiftResolveAlias ResolveAliasXAmzTargetEnum = "GameLift.ResolveAlias"
)

func (e ResolveAliasXAmzTargetEnum) ToPointer() *ResolveAliasXAmzTargetEnum {
	return &e
}

func (e *ResolveAliasXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.ResolveAlias":
		*e = ResolveAliasXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResolveAliasXAmzTargetEnum: %v", v)
	}
}

type ResolveAliasRequest struct {
	ResolveAliasInput shared.ResolveAliasInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ResolveAliasXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ResolveAliasResponse struct {
	ContentType string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// NotFoundException
	NotFoundException interface{}
	// Success
	ResolveAliasOutput *shared.ResolveAliasOutput
	StatusCode         int
	RawResponse        *http.Response
	// TerminalRoutingStrategyException
	TerminalRoutingStrategyException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
