"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import algorithm as shared_algorithm
from ..shared import configuration as shared_configuration
from ..shared import costmatrix as shared_costmatrix
from ..shared import objective as shared_objective
from ..shared import service as shared_service
from ..shared import shipment as shared_shipment
from ..shared import vehicle as shared_vehicle
from ..shared import vehicletype as shared_vehicletype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Request:
    r"""The request that contains the vehicle routing problem to be solved."""
    
    algorithm: Optional[shared_algorithm.Algorithm] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithm'), 'exclude': lambda f: f is None }})
    r"""Use `objectives` instead."""  
    configuration: Optional[shared_configuration.Configuration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration'), 'exclude': lambda f: f is None }})
    r"""Specifies general configurations that are taken into account when solving the vehicle routing problem."""  
    cost_matrices: Optional[list[shared_costmatrix.CostMatrix]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost_matrices'), 'exclude': lambda f: f is None }})
    r"""Specifies your own tranport time and distance matrices."""  
    objectives: Optional[list[shared_objective.Objective]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectives'), 'exclude': lambda f: f is None }})
    r"""Specifies an objective function. The vehicle routing problem is solved in such a way that this objective function is minimized."""  
    relations: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relations'), 'exclude': lambda f: f is None }})
    r"""Defines additional relationships between orders."""  
    services: Optional[list[shared_service.Service]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('services'), 'exclude': lambda f: f is None }})
    r"""Specifies the orders of the type \\"service\\". These are, for example, pick-ups, deliveries or other stops that are to be approached by the specified vehicles. Each of these orders contains only one location."""  
    shipments: Optional[list[shared_shipment.Shipment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipments'), 'exclude': lambda f: f is None }})
    r"""Specifies the available shipments. Each shipment contains a pickup and a delivery stop, which must be processed one after the other."""  
    vehicle_types: Optional[list[shared_vehicletype.VehicleType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicle_types'), 'exclude': lambda f: f is None }})
    r"""Specifies the available vehicle types. These types can be assigned to vehicles."""  
    vehicles: Optional[list[shared_vehicle.Vehicle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicles'), 'exclude': lambda f: f is None }})
    r"""Specifies the available vehicles."""  
    