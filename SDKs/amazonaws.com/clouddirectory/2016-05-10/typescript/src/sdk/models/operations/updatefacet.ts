/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.
 */
export enum UpdateFacetRequestBodyObjectTypeEnum {
  Node = "NODE",
  LeafNode = "LEAF_NODE",
  Policy = "POLICY",
  Index = "INDEX",
}

export class UpdateFacetRequestBody extends SpeakeasyBase {
  /**
   * List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform.
   */
  @SpeakeasyMetadata({ elemType: shared.FacetAttributeUpdate })
  @Expose({ name: "AttributeUpdates" })
  @Type(() => shared.FacetAttributeUpdate)
  attributeUpdates?: shared.FacetAttributeUpdate[];

  /**
   * The name of the facet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ObjectType" })
  objectType?: UpdateFacetRequestBodyObjectTypeEnum;
}

export class UpdateFacetRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateFacetRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>. For more information, see <a>arns</a>.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-amz-data-partition",
  })
  xAmzDataPartition: string;
}

export class UpdateFacetResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: shared.AccessDeniedException;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * FacetNotFoundException
   */
  @SpeakeasyMetadata()
  facetNotFoundException?: shared.FacetNotFoundException;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: shared.InternalServiceException;

  /**
   * InvalidArnException
   */
  @SpeakeasyMetadata()
  invalidArnException?: shared.InvalidArnException;

  /**
   * InvalidFacetUpdateException
   */
  @SpeakeasyMetadata()
  invalidFacetUpdateException?: shared.InvalidFacetUpdateException;

  /**
   * InvalidRuleException
   */
  @SpeakeasyMetadata()
  invalidRuleException?: shared.InvalidRuleException;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: shared.LimitExceededException;

  /**
   * RetryableConflictException
   */
  @SpeakeasyMetadata()
  retryableConflictException?: shared.RetryableConflictException;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: shared.ResourceNotFoundException;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateFacetResponse?: Record<string, any>;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: shared.ValidationException;
}
