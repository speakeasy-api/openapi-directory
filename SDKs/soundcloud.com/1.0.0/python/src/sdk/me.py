"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Me:
    r"""Own User Endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_me_followings_user_id_(self, request: operations.DeleteMeFollowingsUserIDRequest, security: operations.DeleteMeFollowingsUserIDSecurity) -> operations.DeleteMeFollowingsUserIDResponse:
        r"""Deletes a user who is followed by the authenticated user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMeFollowingsUserIDRequest, base_url, '/me/followings/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMeFollowingsUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code in [404, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me(self) -> operations.GetMeResponse:
        r"""Returns the authenticated userâ€™s information."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompleteUser])
                res.complete_user = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_activities(self, request: operations.GetMeActivitiesRequest, security: operations.GetMeActivitiesSecurity) -> operations.GetMeActivitiesResponse:
        r"""Returns the authenticated user's activities."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/activities'
        
        query_params = utils.get_query_params(operations.GetMeActivitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Activities])
                res.activities = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_activities_all_own(self, request: operations.GetMeActivitiesAllOwnRequest, security: operations.GetMeActivitiesAllOwnSecurity) -> operations.GetMeActivitiesAllOwnResponse:
        r"""Recent the authenticated user's activities."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/activities/all/own'
        
        query_params = utils.get_query_params(operations.GetMeActivitiesAllOwnRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeActivitiesAllOwnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Activities])
                res.activities = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_activities_tracks(self, request: operations.GetMeActivitiesTracksRequest, security: operations.GetMeActivitiesTracksSecurity) -> operations.GetMeActivitiesTracksResponse:
        r"""Returns the authenticated user's recent track related activities."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/activities/tracks'
        
        query_params = utils.get_query_params(operations.GetMeActivitiesTracksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeActivitiesTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Activities])
                res.activities = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_connections(self, request: operations.GetMeConnectionsRequest, security: operations.GetMeConnectionsSecurity) -> operations.GetMeConnectionsResponse:
        r"""Returns a list of the authenticated user's connected social accounts."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/connections'
        
        query_params = utils.get_query_params(operations.GetMeConnectionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeConnectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Connection]])
                res.connections = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_connections_connection_id_(self, request: operations.GetMeConnectionsConnectionIDRequest, security: operations.GetMeConnectionsConnectionIDSecurity) -> operations.GetMeConnectionsConnectionIDResponse:
        r"""Returns the authenticated user's connected social account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMeConnectionsConnectionIDRequest, base_url, '/me/connections/{connection_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeConnectionsConnectionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Connection])
                res.connection = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_favorites_ids(self, request: operations.GetMeFavoritesIdsRequest, security: operations.GetMeFavoritesIdsSecurity) -> operations.GetMeFavoritesIdsResponse:
        r"""Returns userâ€™s favorites ids. (use /me/likes/tracks instead to fetch the authenticated user's likes)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/favorites/ids'
        
        query_params = utils.get_query_params(operations.GetMeFavoritesIdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeFavoritesIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_me_followers(self, request: operations.GetMeFollowersRequest, security: operations.GetMeFollowersSecurity) -> operations.GetMeFollowersResponse:
        r"""Returns a list of users who are following the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/followers'
        
        query_params = utils.get_query_params(operations.GetMeFollowersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeFollowersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_me_followers_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_followers_follower_id_(self, request: operations.GetMeFollowersFollowerIDRequest, security: operations.GetMeFollowersFollowerIDSecurity) -> operations.GetMeFollowersFollowerIDResponse:
        r"""Returns a user who is following the authenticated user. (use /users/{user_id} instead, to fetch the user details)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMeFollowersFollowerIDRequest, base_url, '/me/followers/{follower_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeFollowersFollowerIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_followings(self, request: operations.GetMeFollowingsRequest, security: operations.GetMeFollowingsSecurity) -> operations.GetMeFollowingsResponse:
        r"""Returns a list of users who are followed by the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/followings'
        
        query_params = utils.get_query_params(operations.GetMeFollowingsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeFollowingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_me_followings_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_followings_tracks(self, request: operations.GetMeFollowingsTracksRequest, security: operations.GetMeFollowingsTracksSecurity) -> operations.GetMeFollowingsTracksResponse:
        r"""Returns a list of recent tracks from users followed by the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/followings/tracks'
        
        query_params = utils.get_query_params(operations.GetMeFollowingsTracksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeFollowingsTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Track]])
                res.tracks_list = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_followings_user_id_(self, request: operations.GetMeFollowingsUserIDRequest, security: operations.GetMeFollowingsUserIDSecurity) -> operations.GetMeFollowingsUserIDResponse:
        r"""Returns a user who is followed by the authenticated user. (use /users/{user_id} instead, to fetch the user details)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMeFollowingsUserIDRequest, base_url, '/me/followings/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeFollowingsUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_likes_tracks(self, request: operations.GetMeLikesTracksRequest, security: operations.GetMeLikesTracksSecurity) -> operations.GetMeLikesTracksResponse:
        r"""Returns a list of favorited or liked tracks of the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/likes/tracks'
        
        query_params = utils.get_query_params(operations.GetMeLikesTracksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeLikesTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_me_likes_tracks_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_playlists(self, request: operations.GetMePlaylistsRequest, security: operations.GetMePlaylistsSecurity) -> operations.GetMePlaylistsResponse:
        r"""Returns userâ€™s playlists (sets).
        Returns playlist info, playlist tracks and tracks owner info.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/playlists'
        
        query_params = utils.get_query_params(operations.GetMePlaylistsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMePlaylistsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Playlist]])
                res.playlists_array = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_playlists_playlist_id_(self, request: operations.GetMePlaylistsPlaylistIDRequest, security: operations.GetMePlaylistsPlaylistIDSecurity) -> operations.GetMePlaylistsPlaylistIDResponse:
        r"""Returns playlist. (use /playlists/{playlist_id} instead, to fetch the playlist details)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMePlaylistsPlaylistIDRequest, base_url, '/me/playlists/{playlist_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMePlaylistsPlaylistIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Playlist])
                res.playlist = out

        return res

    def get_me_tracks(self, request: operations.GetMeTracksRequest, security: operations.GetMeTracksSecurity) -> operations.GetMeTracksResponse:
        r"""Returns a list of user's tracks."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/tracks'
        
        query_params = utils.get_query_params(operations.GetMeTracksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_me_tracks_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_me_tracks_track_id_(self, request: operations.GetMeTracksTrackIDRequest, security: operations.GetMeTracksTrackIDSecurity) -> operations.GetMeTracksTrackIDResponse:
        r"""Returns a specified track. (use /tracks/{track_id} instead, to fetch the track details)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMeTracksTrackIDRequest, base_url, '/me/tracks/{track_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMeTracksTrackIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Track])
                res.track = out

        return res

    def put_me_followings_user_id_(self, request: operations.PutMeFollowingsUserIDRequest, security: operations.PutMeFollowingsUserIDSecurity) -> operations.PutMeFollowingsUserIDResponse:
        r"""Follows a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutMeFollowingsUserIDRequest, base_url, '/me/followings/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutMeFollowingsUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    