"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitykey as shared_entitykey
from ..shared import transitivemembershiprole as shared_transitivemembershiprole
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GroupRelationRelationTypeEnum(str, Enum):
    r"""The relation between the member and the transitive group."""
    RELATION_TYPE_UNSPECIFIED = 'RELATION_TYPE_UNSPECIFIED'
    DIRECT = 'DIRECT'
    INDIRECT = 'INDIRECT'
    DIRECT_AND_INDIRECT = 'DIRECT_AND_INDIRECT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupRelation:
    r"""Message representing a transitive group of a user or a group."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name for this group."""  
    group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})
    r"""Resource name for this group."""  
    group_key: Optional[shared_entitykey.EntityKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupKey'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels for Group resource."""  
    relation_type: Optional[GroupRelationRelationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationType'), 'exclude': lambda f: f is None }})
    r"""The relation between the member and the transitive group."""  
    roles: Optional[list[shared_transitivemembershiprole.TransitiveMembershipRole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})
    r"""Membership roles of the member for the group."""  
    