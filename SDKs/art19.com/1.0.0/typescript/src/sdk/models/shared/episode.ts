/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ResourceIdentifier } from "./resourceidentifier";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The type of the episode according to Apple's type categorization
 */
export enum EpisodeAttributesItunesTypeEnum {
  Full = "full",
  Bonus = "bonus",
  Trailer = "trailer",
}

/**
 * The current premium status of the episode
 */
export enum EpisodeAttributesPremiumStatusEnum {
  Active = "active",
  Inactive = "inactive",
  ForceActive = "force-active",
  ForceInactive = "force-inactive",
}

/**
 * The status of an episode
 */
export enum EpisodeAttributesStatusEnum {
  Active = "active",
  Inactive = "inactive",
}

export class EpisodeAttributes extends SpeakeasyBase {
  /**
   * Only visible to credentials having write privileges for the series.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_user_comments" })
  allowUserComments?: boolean;

  /**
   * This will be replaced by the relationship `cascaded_cover_image` in a future update.<br/>
   *
   * @remarks
   * The image ID of the cover art for this episode. This is the preferred image ID to use.
   * If there is no specific cover for the episode, the image ID of the season or the
   * series will be returned, whichever has one defined.
   * The `/images` endpoint provides details to the image.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cascaded_cover_image_id" })
  cascadedCoverImageId?: string;

  /**
   * This will be replaced by the relationship `cover_image` in a future update.<br/>
   *
   * @remarks
   * The image ID of the cover art for this episode, if an episode-specific image has been provided.
   * The `/images` endpoint provideds details to the image.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cover_image_id" })
  coverImageId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The description of the episode, possibly in HTML format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Determines whether `description` is in HTML format or plain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description_is_html" })
  descriptionIsHtml?: boolean;

  /**
   * The description with all HTML markup removed. If the description does not contain markup,
   *
   * @remarks
   * this is identical to `description`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description_plain" })
  descriptionPlain?: string;

  /**
   * The file name, without extension, to present users when downloading the episode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_name" })
  fileName?: string;

  /**
   * The type of the episode according to Apple's type categorization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itunes_type" })
  itunesType?: EpisodeAttributesItunesTypeEnum;

  /**
   * The number of total downloads all time for this episode.
   *
   * @remarks
   * Only visible if the credential has the right privilege on the series.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listen_count" })
  listenCount?: number;

  /**
   * The current premium status of the episode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "premium_status" })
  premiumStatus?: EpisodeAttributesPremiumStatusEnum;

  /**
   * If `true`, the episode will be available for download and included in the feed as soon as its
   *
   * @remarks
   * release time is reached, provided it has a valid media file, and `release_end_at` is in the future (if applicable).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "published" })
  published?: boolean;

  /**
   * The date and time when an episode will no longer be included in the feed, or available for download.
   *
   * @remarks
   * `Published` will remain `true` unless the episode is manually unpublished.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "release_end_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releaseEndAt?: Date;

  /**
   * If `true`, the episode's release time is set in a way it is considered released right away.
   *
   * @remarks
   * Only visible if the credential has write privileges on the series.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "release_immediately" })
  releaseImmediately?: boolean;

  /**
   * The date and time when an episode will be released. It will be available for download and included
   *
   * @remarks
   * in the feed if this time is reached, `published` is set to `true`, and the episode has a media file.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "released_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  releasedAt?: Date;

  /**
   * A globally unique identifier describing the episode. This ID is commonly used by podcast applications
   *
   * @remarks
   * to determine whether an episode has already been downloaded or not.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rss_guid" })
  rssGuid?: string;

  /**
   * Use the relationship `season` instead.<br />
   *
   * @remarks
   * The ID of the season an episode belongs to. This can be `null`. A series can have episodes with and
   * without seasons at the same time.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "season_id" })
  seasonId?: string;

  /**
   * Use the relationship `series` instead.<br />
   *
   * @remarks
   * The ID of the series an episode belongs to.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "series_id" })
  seriesId?: string;

  /**
   * The title of the episode modified for sorting. This converts all characters to
   *
   * @remarks
   * lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sort_title" })
  sortTitle?: string;

  /**
   * The status of an episode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: EpisodeAttributesStatusEnum;

  /**
   * The title of the episode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;
}

/**
 * The cover art for this episode. This is the preferred image to use.
 *
 * @remarks
 * If there is no specific cover image for the episode, the cover of the season or the
 * series will be returned, whichever has one defined.
 * The `/images` endpoint provides details to the image.
 *
 */
export class EpisodeRelationshipsCascadedCoverImage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier;
}

export class EpisodeRelationshipsAListOfClassificationsAssociatedWithTheEpisode extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

/**
 * The cover art for this episode, if an episode-specific image has been provided.
 *
 * @remarks
 * The `/images` endpoint provideds details to the image.
 *
 */
export class EpisodeRelationshipsCoverImage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier;
}

export class EpisodeRelationshipsAListOfCreditsGivenToPeopleInTheEpisode extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

/**
 * Only visible if the credential has write privileges on the series
 */
export class EpisodeRelationshipsAListOfDefaultWarpFeedMarkerPoints extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

/**
 * Only visible if the credential has write privileges on the series
 */
export class EpisodeRelationshipsAListOfEpisodeVersionsForThisEpisode extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class EpisodeRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class EpisodeRelationshipsTheSeasonTheEpisodeBelongsTo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier;
}

/**
 * Only visible if the credential has write privileges on the series
 */
export class EpisodeRelationshipsAListOfSegmentListsDirectlyAttachedToTheEpisode extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class EpisodeRelationshipsTheSeriesAnEpisodeBelongsTo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier;
}

export class EpisodeRelationshipsAListOfAssociationsLinkingTagsToTheEpisodes extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class EpisodeRelationshipsAListOfTagsAssociatedWithTheEpisodes extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ResourceIdentifier })
  @Expose({ name: "data" })
  @Type(() => ResourceIdentifier)
  data?: ResourceIdentifier[];
}

export class EpisodeRelationships extends SpeakeasyBase {
  /**
   * The cover art for this episode. This is the preferred image to use.
   *
   * @remarks
   * If there is no specific cover image for the episode, the cover of the season or the
   * series will be returned, whichever has one defined.
   * The `/images` endpoint provides details to the image.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cascaded_cover_image" })
  @Type(() => EpisodeRelationshipsCascadedCoverImage)
  cascadedCoverImage?: EpisodeRelationshipsCascadedCoverImage;

  @SpeakeasyMetadata()
  @Expose({ name: "classification_inclusions" })
  @Type(
    () => EpisodeRelationshipsAListOfClassificationsAssociatedWithTheEpisode
  )
  classificationInclusions?: EpisodeRelationshipsAListOfClassificationsAssociatedWithTheEpisode;

  /**
   * The cover art for this episode, if an episode-specific image has been provided.
   *
   * @remarks
   * The `/images` endpoint provideds details to the image.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cover_image" })
  @Type(() => EpisodeRelationshipsCoverImage)
  coverImage?: EpisodeRelationshipsCoverImage;

  @SpeakeasyMetadata()
  @Expose({ name: "credits" })
  @Type(() => EpisodeRelationshipsAListOfCreditsGivenToPeopleInTheEpisode)
  credits?: EpisodeRelationshipsAListOfCreditsGivenToPeopleInTheEpisode;

  /**
   * Only visible if the credential has write privileges on the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_marker_points" })
  @Type(() => EpisodeRelationshipsAListOfDefaultWarpFeedMarkerPoints)
  defaultMarkerPoints?: EpisodeRelationshipsAListOfDefaultWarpFeedMarkerPoints;

  /**
   * Only visible if the credential has write privileges on the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "episode_versions" })
  @Type(() => EpisodeRelationshipsAListOfEpisodeVersionsForThisEpisode)
  episodeVersions?: EpisodeRelationshipsAListOfEpisodeVersionsForThisEpisode;

  @SpeakeasyMetadata()
  @Expose({ name: "images" })
  @Type(
    () =>
      EpisodeRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason
  )
  images?: EpisodeRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason;

  @SpeakeasyMetadata()
  @Expose({ name: "season" })
  @Type(() => EpisodeRelationshipsTheSeasonTheEpisodeBelongsTo)
  season?: EpisodeRelationshipsTheSeasonTheEpisodeBelongsTo;

  /**
   * Only visible if the credential has write privileges on the series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "segment_lists" })
  @Type(
    () => EpisodeRelationshipsAListOfSegmentListsDirectlyAttachedToTheEpisode
  )
  segmentLists?: EpisodeRelationshipsAListOfSegmentListsDirectlyAttachedToTheEpisode;

  @SpeakeasyMetadata()
  @Expose({ name: "series" })
  @Type(() => EpisodeRelationshipsTheSeriesAnEpisodeBelongsTo)
  series?: EpisodeRelationshipsTheSeriesAnEpisodeBelongsTo;

  @SpeakeasyMetadata()
  @Expose({ name: "taggings" })
  @Type(() => EpisodeRelationshipsAListOfAssociationsLinkingTagsToTheEpisodes)
  taggings?: EpisodeRelationshipsAListOfAssociationsLinkingTagsToTheEpisodes;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  @Type(() => EpisodeRelationshipsAListOfTagsAssociatedWithTheEpisodes)
  tags?: EpisodeRelationshipsAListOfTagsAssociatedWithTheEpisodes;
}

export class Episode extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => EpisodeAttributes)
  attributes?: EpisodeAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => EpisodeRelationships)
  relationships?: EpisodeRelationships;

  /**
   * The type of resource. This is always `episodes`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
