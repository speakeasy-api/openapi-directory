"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flaterrorresponse as shared_flaterrorresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetScoreRevisionDataSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetScoreRevisionDataFormatEnum(str, Enum):
    r"""The format of the file you will retrieve"""
    JSON = 'json'
    MXL = 'mxl'
    XML = 'xml'
    MP3 = 'mp3'
    WAV = 'wav'
    MIDI = 'midi'
    THUMBNAIL_PNG = 'thumbnail.png'
    SYNCHRONIZATION_POINTS = 'synchronizationPoints'


@dataclasses.dataclass
class GetScoreRevisionDataRequest:
    
    format: GetScoreRevisionDataFormatEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'format', 'style': 'simple', 'explode': False }})
    r"""The format of the file you will retrieve"""  
    revision: str = dataclasses.field(metadata={'path_param': { 'field_name': 'revision', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of a score revision. You can use `last` to fetch the information related to the last version created."""  
    score: str = dataclasses.field(metadata={'path_param': { 'field_name': 'score', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`)."""  
    only_cached: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onlyCached', 'style': 'form', 'explode': True }})
    r"""Only return files already generated and cached in Flat's production
    cache. If the file is not availabe, a 404 will be returned
    """  
    parts: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parts', 'style': 'form', 'explode': True }})
    r"""An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids
    separated by commas. For example \"59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87\".
    """  
    sharing_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sharingKey', 'style': 'form', 'explode': True }})
    r"""This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document."""  
    url: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'url', 'style': 'form', 'explode': True }})
    r"""Returns a json with the `url` in it instead of redirecting"""  
    

@dataclasses.dataclass
class GetScoreRevisionDataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flat_error_response: Optional[shared_flaterrorresponse.FlatErrorResponse] = dataclasses.field(default=None)
    r"""Account overquota"""  
    get_score_revision_data_200_application_json_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Revision data"""  
    get_score_revision_data_200_application_vnd_recordare_musicxml_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Revision data"""  
    get_score_revision_data_200_application_vnd_recordare_musicxml_plus_xml_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Revision data"""  
    get_score_revision_data_200_audio_midi_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Revision data"""  
    get_score_revision_data_200_audio_mp3_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Revision data"""  
    get_score_revision_data_200_audio_wav_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Revision data"""  
    get_score_revision_data_200_image_png_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""Revision data"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    