"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Swagger:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_swagger(self, request: operations.DeleteSwaggerRequest, security: operations.DeleteSwaggerSecurity) -> operations.DeleteSwaggerResponse:
        r"""DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#deleteapispecification to delete a Swagger file in ReadMe"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSwaggerRequest, base_url, '/swagger/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSwaggerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_swagger(self, request: operations.UpdateSwaggerRequest, security: operations.UpdateSwaggerSecurity) -> operations.UpdateSwaggerResponse:
        r"""DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#updateapispecification to update a Swagger file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSwaggerRequest, base_url, '/swagger/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSwaggerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def upload_swagger(self, request: operations.UploadSwaggerRequestBody, security: operations.UploadSwaggerSecurity) -> operations.UploadSwaggerResponse:
        r"""DEPRECATED. Instead use https://docs.readme.com/developers/reference/api-specification#uploadapispecification to upload a Swagger file to ReadMe"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/swagger'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadSwaggerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    