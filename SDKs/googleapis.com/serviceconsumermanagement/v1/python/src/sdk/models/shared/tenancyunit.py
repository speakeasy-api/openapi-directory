"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tenantresource as shared_tenantresource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TenancyUnit:
    r"""Representation of a tenancy unit."""
    
    consumer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumer'), 'exclude': lambda f: f is None }})
    r"""Output only. @OutputOnly Cloud resource name of the consumer of this service. For example 'projects/123456'."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. @OutputOnly The time this tenancy unit was created."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Globally unique identifier of this tenancy unit \\"services/{service}/{collection id}/{resource id}/tenancyUnits/{unit}\\" """  
    service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""Output only. Google Cloud API name of the managed service owning this tenancy unit. For example 'serviceconsumermanagement.googleapis.com'."""  
    tenant_resources: Optional[list[shared_tenantresource.TenantResource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenantResources'), 'exclude': lambda f: f is None }})
    r"""Resources constituting the tenancy unit. There can be at most 512 tenant resources in a tenancy unit."""  
    