/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class TargetingTypes {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public TargetingTypes(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Gets a single targeting option.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsGetResponse displayvideoTargetingTypesTargetingOptionsGet(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsGetRequest request, org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsGetRequest.class, baseUrl, "/v1/targetingTypes/{targetingType}/targetingOptions/{targetingOptionId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsGetResponse res = new org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsGetResponse(contentType, httpRes.statusCode()) {{
            targetingOption = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TargetingOption out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TargetingOption.class);
                res.targetingOption = out;
            }
        }

        return res;
    }

    /**
     * Lists targeting options of a given type.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsListResponse displayvideoTargetingTypesTargetingOptionsList(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsListRequest request, org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsListRequest.class, baseUrl, "/v1/targetingTypes/{targetingType}/targetingOptions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsListResponse res = new org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsListResponse(contentType, httpRes.statusCode()) {{
            listTargetingOptionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListTargetingOptionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListTargetingOptionsResponse.class);
                res.listTargetingOptionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Searches for targeting options of a given type based on the given search terms.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsSearchResponse displayvideoTargetingTypesTargetingOptionsSearch(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsSearchRequest request, org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsSearchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsSearchRequest.class, baseUrl, "/v1/targetingTypes/{targetingType}/targetingOptions:search", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "searchTargetingOptionsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsSearchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsSearchResponse res = new org.openapis.openapi.models.operations.DisplayvideoTargetingTypesTargetingOptionsSearchResponse(contentType, httpRes.statusCode()) {{
            searchTargetingOptionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SearchTargetingOptionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SearchTargetingOptionsResponse.class);
                res.searchTargetingOptionsResponse = out;
            }
        }

        return res;
    }
}