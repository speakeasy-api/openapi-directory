// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

type SearchImageImageTypeEnum string

const (
	SearchImageImageTypeEnumPhoto        SearchImageImageTypeEnum = "photo"
	SearchImageImageTypeEnumIllustration SearchImageImageTypeEnum = "illustration"
	SearchImageImageTypeEnumVector       SearchImageImageTypeEnum = "vector"
)

func (e *SearchImageImageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "photo":
		fallthrough
	case "illustration":
		fallthrough
	case "vector":
		*e = SearchImageImageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImageImageTypeEnum: %s", s)
	}
}

type SearchImageLicenseEnum string

const (
	SearchImageLicenseEnumCommercial SearchImageLicenseEnum = "commercial"
	SearchImageLicenseEnumEditorial  SearchImageLicenseEnum = "editorial"
	SearchImageLicenseEnumEnhanced   SearchImageLicenseEnum = "enhanced"
)

func (e *SearchImageLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "commercial":
		fallthrough
	case "editorial":
		fallthrough
	case "enhanced":
		*e = SearchImageLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImageLicenseEnum: %s", s)
	}
}

// SearchImageOrientationEnum - Show image results with horizontal or vertical orientation
type SearchImageOrientationEnum string

const (
	SearchImageOrientationEnumHorizontal SearchImageOrientationEnum = "horizontal"
	SearchImageOrientationEnumVertical   SearchImageOrientationEnum = "vertical"
)

func (e *SearchImageOrientationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "horizontal":
		fallthrough
	case "vertical":
		*e = SearchImageOrientationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImageOrientationEnum: %s", s)
	}
}

// SearchImagePeopleAgeEnum - Show images that feature people of the specified age category
type SearchImagePeopleAgeEnum string

const (
	SearchImagePeopleAgeEnumInfants   SearchImagePeopleAgeEnum = "infants"
	SearchImagePeopleAgeEnumChildren  SearchImagePeopleAgeEnum = "children"
	SearchImagePeopleAgeEnumTeenagers SearchImagePeopleAgeEnum = "teenagers"
	SearchImagePeopleAgeEnumTwentys   SearchImagePeopleAgeEnum = "20s"
	SearchImagePeopleAgeEnumThirtys   SearchImagePeopleAgeEnum = "30s"
	SearchImagePeopleAgeEnumFortys    SearchImagePeopleAgeEnum = "40s"
	SearchImagePeopleAgeEnumFiftys    SearchImagePeopleAgeEnum = "50s"
	SearchImagePeopleAgeEnumSixtys    SearchImagePeopleAgeEnum = "60s"
	SearchImagePeopleAgeEnumOlder     SearchImagePeopleAgeEnum = "older"
)

func (e *SearchImagePeopleAgeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "infants":
		fallthrough
	case "children":
		fallthrough
	case "teenagers":
		fallthrough
	case "20s":
		fallthrough
	case "30s":
		fallthrough
	case "40s":
		fallthrough
	case "50s":
		fallthrough
	case "60s":
		fallthrough
	case "older":
		*e = SearchImagePeopleAgeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagePeopleAgeEnum: %s", s)
	}
}

type SearchImagePeopleEthnicityEnum string

const (
	SearchImagePeopleEthnicityEnumAfrican            SearchImagePeopleEthnicityEnum = "african"
	SearchImagePeopleEthnicityEnumAfricanAmerican    SearchImagePeopleEthnicityEnum = "african_american"
	SearchImagePeopleEthnicityEnumBlack              SearchImagePeopleEthnicityEnum = "black"
	SearchImagePeopleEthnicityEnumBrazilian          SearchImagePeopleEthnicityEnum = "brazilian"
	SearchImagePeopleEthnicityEnumChinese            SearchImagePeopleEthnicityEnum = "chinese"
	SearchImagePeopleEthnicityEnumCaucasian          SearchImagePeopleEthnicityEnum = "caucasian"
	SearchImagePeopleEthnicityEnumEastAsian          SearchImagePeopleEthnicityEnum = "east_asian"
	SearchImagePeopleEthnicityEnumHispanic           SearchImagePeopleEthnicityEnum = "hispanic"
	SearchImagePeopleEthnicityEnumJapanese           SearchImagePeopleEthnicityEnum = "japanese"
	SearchImagePeopleEthnicityEnumMiddleEastern      SearchImagePeopleEthnicityEnum = "middle_eastern"
	SearchImagePeopleEthnicityEnumNativeAmerican     SearchImagePeopleEthnicityEnum = "native_american"
	SearchImagePeopleEthnicityEnumPacificIslander    SearchImagePeopleEthnicityEnum = "pacific_islander"
	SearchImagePeopleEthnicityEnumSouthAsian         SearchImagePeopleEthnicityEnum = "south_asian"
	SearchImagePeopleEthnicityEnumSoutheastAsian     SearchImagePeopleEthnicityEnum = "southeast_asian"
	SearchImagePeopleEthnicityEnumOther              SearchImagePeopleEthnicityEnum = "other"
	SearchImagePeopleEthnicityEnumNotAfrican         SearchImagePeopleEthnicityEnum = "NOT african"
	SearchImagePeopleEthnicityEnumNotAfricanAmerican SearchImagePeopleEthnicityEnum = "NOT african_american"
	SearchImagePeopleEthnicityEnumNotBlack           SearchImagePeopleEthnicityEnum = "NOT black"
	SearchImagePeopleEthnicityEnumNotBrazilian       SearchImagePeopleEthnicityEnum = "NOT brazilian"
	SearchImagePeopleEthnicityEnumNotChinese         SearchImagePeopleEthnicityEnum = "NOT chinese"
	SearchImagePeopleEthnicityEnumNotCaucasian       SearchImagePeopleEthnicityEnum = "NOT caucasian"
	SearchImagePeopleEthnicityEnumNotEastAsian       SearchImagePeopleEthnicityEnum = "NOT east_asian"
	SearchImagePeopleEthnicityEnumNotHispanic        SearchImagePeopleEthnicityEnum = "NOT hispanic"
	SearchImagePeopleEthnicityEnumNotJapanese        SearchImagePeopleEthnicityEnum = "NOT japanese"
	SearchImagePeopleEthnicityEnumNotMiddleEastern   SearchImagePeopleEthnicityEnum = "NOT middle_eastern"
	SearchImagePeopleEthnicityEnumNotNativeAmerican  SearchImagePeopleEthnicityEnum = "NOT native_american"
	SearchImagePeopleEthnicityEnumNotPacificIslander SearchImagePeopleEthnicityEnum = "NOT pacific_islander"
	SearchImagePeopleEthnicityEnumNotSouthAsian      SearchImagePeopleEthnicityEnum = "NOT south_asian"
	SearchImagePeopleEthnicityEnumNotSoutheastAsian  SearchImagePeopleEthnicityEnum = "NOT southeast_asian"
	SearchImagePeopleEthnicityEnumNotOther           SearchImagePeopleEthnicityEnum = "NOT other"
)

func (e *SearchImagePeopleEthnicityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "african":
		fallthrough
	case "african_american":
		fallthrough
	case "black":
		fallthrough
	case "brazilian":
		fallthrough
	case "chinese":
		fallthrough
	case "caucasian":
		fallthrough
	case "east_asian":
		fallthrough
	case "hispanic":
		fallthrough
	case "japanese":
		fallthrough
	case "middle_eastern":
		fallthrough
	case "native_american":
		fallthrough
	case "pacific_islander":
		fallthrough
	case "south_asian":
		fallthrough
	case "southeast_asian":
		fallthrough
	case "other":
		fallthrough
	case "NOT african":
		fallthrough
	case "NOT african_american":
		fallthrough
	case "NOT black":
		fallthrough
	case "NOT brazilian":
		fallthrough
	case "NOT chinese":
		fallthrough
	case "NOT caucasian":
		fallthrough
	case "NOT east_asian":
		fallthrough
	case "NOT hispanic":
		fallthrough
	case "NOT japanese":
		fallthrough
	case "NOT middle_eastern":
		fallthrough
	case "NOT native_american":
		fallthrough
	case "NOT pacific_islander":
		fallthrough
	case "NOT south_asian":
		fallthrough
	case "NOT southeast_asian":
		fallthrough
	case "NOT other":
		*e = SearchImagePeopleEthnicityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagePeopleEthnicityEnum: %s", s)
	}
}

// SearchImagePeopleGenderEnum - Show images with people of the specified gender
type SearchImagePeopleGenderEnum string

const (
	SearchImagePeopleGenderEnumMale   SearchImagePeopleGenderEnum = "male"
	SearchImagePeopleGenderEnumFemale SearchImagePeopleGenderEnum = "female"
	SearchImagePeopleGenderEnumBoth   SearchImagePeopleGenderEnum = "both"
)

func (e *SearchImagePeopleGenderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "both":
		*e = SearchImagePeopleGenderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImagePeopleGenderEnum: %s", s)
	}
}

// SearchImageSortEnum - Sort by
type SearchImageSortEnum string

const (
	SearchImageSortEnumNewest    SearchImageSortEnum = "newest"
	SearchImageSortEnumPopular   SearchImageSortEnum = "popular"
	SearchImageSortEnumRelevance SearchImageSortEnum = "relevance"
	SearchImageSortEnumRandom    SearchImageSortEnum = "random"
)

func (e *SearchImageSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newest":
		fallthrough
	case "popular":
		fallthrough
	case "relevance":
		fallthrough
	case "random":
		*e = SearchImageSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImageSortEnum: %s", s)
	}
}

// SearchImageViewEnum - Amount of detail to render in the response
type SearchImageViewEnum string

const (
	SearchImageViewEnumMinimal SearchImageViewEnum = "minimal"
	SearchImageViewEnumFull    SearchImageViewEnum = "full"
)

func (e *SearchImageViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "minimal":
		fallthrough
	case "full":
		*e = SearchImageViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchImageViewEnum: %s", s)
	}
}

// SearchImage - Data required to search for an image
type SearchImage struct {
	// Show images added on the specified date
	AddedDate *types.Date `json:"added_date,omitempty"`
	// Show images added before the specified date
	AddedDateEnd *types.Date `json:"added_date_end,omitempty"`
	// Show images added on or after the specified date
	AddedDateStart *types.Date `json:"added_date_start,omitempty"`
	// Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatio *float64 `json:"aspect_ratio,omitempty"`
	// Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatioMax *float64 `json:"aspect_ratio_max,omitempty"`
	// Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
	AspectRatioMin *float64 `json:"aspect_ratio_min,omitempty"`
	// Show only authentic images
	Authentic *bool `json:"authentic,omitempty"`
	// Show images with the specified Shutterstock-defined category; specify a category name or ID
	Category *string `json:"category,omitempty"`
	// Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
	Color *string `json:"color,omitempty"`
	// Show images with the specified contributor names or IDs, allows multiple
	Contributor []string `json:"contributor,omitempty"`
	// Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
	ContributorCountry interface{} `json:"contributor_country,omitempty"`
	// Fields to display in the response; see the documentation for the fields parameter in the overview section
	Fields *string `json:"fields,omitempty"`
	// (Deprecated; use height_from and height_to instead) Show images with the specified height
	Height *int64 `json:"height,omitempty"`
	// Show images with the specified height or larger, in pixels
	HeightFrom *int64 `json:"height_from,omitempty"`
	// Show images with the specified height or smaller, in pixels
	HeightTo *int64 `json:"height_to,omitempty"`
	// Show images of the specified type
	ImageType []SearchImageImageTypeEnum `json:"image_type,omitempty"`
	// Hide results with potentially unsafe keywords
	KeywordSafeSearch *bool `json:"keyword_safe_search,omitempty"`
	// Language code
	Language *LanguageEnum `json:"language,omitempty"`
	// Show only images with the specified license
	License []SearchImageLicenseEnum `json:"license,omitempty"`
	// Show image results with the specified model IDs
	Model []string `json:"model,omitempty"`
	// Show image results with horizontal or vertical orientation
	Orientation *SearchImageOrientationEnum `json:"orientation,omitempty"`
	// Page number
	Page *int64 `json:"page,omitempty"`
	// Show images that feature people of the specified age category
	PeopleAge *SearchImagePeopleAgeEnum `json:"people_age,omitempty"`
	// Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
	PeopleEthnicity []SearchImagePeopleEthnicityEnum `json:"people_ethnicity,omitempty"`
	// Show images with people of the specified gender
	PeopleGender *SearchImagePeopleGenderEnum `json:"people_gender,omitempty"`
	// Show images of people with a signed model release
	PeopleModelReleased *bool `json:"people_model_released,omitempty"`
	// Show images with the specified number of people
	PeopleNumber *int64 `json:"people_number,omitempty"`
	// Number of results per page
	PerPage *int64 `json:"per_page,omitempty"`
	// One or more search terms separated by spaces; you can use NOT to filter out images that match a term
	Query *string `json:"query,omitempty"`
	// Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
	Region interface{} `json:"region,omitempty"`
	// Enable or disable safe search
	Safe *bool `json:"safe,omitempty"`
	// Sort by
	Sort *SearchImageSortEnum `json:"sort,omitempty"`
	// Spellcheck the search query and return results on suggested spellings
	SpellcheckQuery *bool `json:"spellcheck_query,omitempty"`
	// Amount of detail to render in the response
	View *SearchImageViewEnum `json:"view,omitempty"`
	// (Deprecated; use width_from and width_to instead) Show images with the specified width
	Width *int64 `json:"width,omitempty"`
	// Show images with the specified width or larger, in pixels
	WidthFrom *int64 `json:"width_from,omitempty"`
	// Show images with the specified width or smaller, in pixels
	WidthTo *int64 `json:"width_to,omitempty"`
}
