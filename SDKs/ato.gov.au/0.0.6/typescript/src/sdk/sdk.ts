/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AddressTypes } from "./addresstypes";
import { BusinessNameLifecycleStates } from "./businessnamelifecyclestates";
import { BusinessNames } from "./businessnames";
import { ElectronicAddressTypes } from "./electronicaddresstypes";
import { Genders } from "./genders";
import { Individuals } from "./individuals";
import { IndividualsAddresses } from "./individualsaddresses";
import { IndividualsBusinessNames } from "./individualsbusinessnames";
import { IndividualsElectronicAddresses } from "./individualselectronicaddresses";
import { IndividualsLicenses } from "./individualslicenses";
import { IndividualsRoles } from "./individualsroles";
import { LegalEntityTypes } from "./legalentitytypes";
import { LicenseLifecycleStates } from "./licenselifecyclestates";
import { Licenses } from "./licenses";
import { LicenseTypes } from "./licensetypes";
import { NameDirections } from "./namedirections";
import { NamePrefixes } from "./nameprefixes";
import { NameTypes } from "./nametypes";
import { Organisations } from "./organisations";
import { OrganisationsAddresses } from "./organisationsaddresses";
import { OrganisationsBusinessNames } from "./organisationsbusinessnames";
import { OrganisationsElectronicAddresses } from "./organisationselectronicaddresses";
import { OrganisationsLicenses } from "./organisationslicenses";
import { OrganisationsRoles } from "./organisationsroles";
import { RegisteredIdentifierTypes } from "./registeredidentifiertypes";
import { Roles } from "./roles";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Production API Server
   */
  "//api.abr.ato.gov.au/",
  /**
   * Sandbox API Server
   */
  "//api.sandbox.abr.ato.gov.au/",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * # Introduction
 *
 * @remarks
 * The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.
 *
 *   The API is documented in <a target="_blank" href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> format.
 *   In addition to the standard OpenAPI syntax we use a few
 *   <a target="_blank" href="https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md">vendor extensions</a>.
 *
 * # Overview
 * The following sections describe the resources that make up the Business Registries REST API.
 * ## Current Version
 * By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.
 *
 *     Accept: application/vnd.abr-ato.v1+json
 *
 * ## Schema
 * All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.
 *
 *   All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
 *
 *     YYYY-MM-DD
 *
 *   For example: `2017-07-01` (the 1st of July 2017)
 *
 *   All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
 *
 *     YYYY-MM-DDTHH:MM:SSZ
 *
 *   For example: `2017-07-01T11:05:06+10:00`
 *
 * ## Timezones
 * Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls.
 * ### Explicitly provide an ISO 8601 timestamp with timezone information
 * For API calls that allow for a timestamp to be specified, we use that exact timestamp.
 *
 *   For example: `2017-07-01T11:05:06+10:00`
 *
 * ## Pagination
 * Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.
 *
 *   For example:
 *
 *     Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel="next",
 *           <https://api.abr.ato.gov.au/individuals?page=34>; rel="last"
 *
 * `rel="next"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel="last"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume.
 * ## Parameters
 * Many API methods take optional parameters:
 *
 *     GET /individuals/1234/addresses/?addressType='Mailing'
 *
 * In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string.
 * For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'.
 * ## Metadata
 * The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.
 *
 *   For example:
 *
 *     GET /classifications/roles
 *
 *   Sample response:
 *
 *     [
 *       {
 *         "id": "123e4567-e89b-12d3-a456-426655440001",
 *         "role": "Director",
 *         "roleDescription": "An individual responsible for managing a company's ...",
 *         "relationship": "Directorship",
 *         "reciprocalRole": "Company",
 *         "reciprocalRoleDescription": "An incorporated legal entity."
 *       },
 *       {
 *         ...
 *       }
 *     ]
 *
 * ## Root Endpoint
 * You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:
 *
 *     curl https://api.abr.ato.gov.au
 *
 * ## Authentication
 * The Business Registries API supports API Key authentication.
 *
 *   When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete
 *   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by
 *   providing your secret key in the request header.
 *
 *   **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the
 *   accidental leakage of information to unauthorised users.
 *
 */
export class SDK {
  /**
   * A classification scheme for addresses.
   *
   * @remarks
   *
   */
  public addressTypes: AddressTypes;
  /**
   * A classification scheme for business names.
   *
   * @remarks
   *
   */
  public businessNameLifecycleStates: BusinessNameLifecycleStates;
  /**
   * A business name is a name or title under which a person or organisation conducts a business.
   *
   * @remarks
   *
   */
  public businessNames: BusinessNames;
  /**
   * A classification scheme for electronic addresses.
   *
   * @remarks
   *
   */
  public electronicAddressTypes: ElectronicAddressTypes;
  /**
   * A classification scheme for the representation of human sexes.
   *
   * @remarks
   *
   */
  public genders: Genders;
  /**
   * An individual is a person about whom the registry wishes to maintain information.
   *
   * @remarks
   *
   *   For example, the individual's date and place of birth (for the purposes of identification) and the individual's
   *   residential address (which is used for administrative purposes).
   *
   */
  public individuals: Individuals;
  /**
   * The registry maintains information about an individual's contact details for administrative purposes.
   *
   * @remarks
   *
   *   Including:
   *   - an address for the service of documents
   *   - a principal place of business address
   *
   */
  public individualsAddresses: IndividualsAddresses;
  /**
   * A business name is a name or title under which a person conducts a business.
   *
   * @remarks
   *
   */
  public individualsBusinessNames: IndividualsBusinessNames;
  /**
   * The registry maintains information about an individual's contact details for administrative purposes.
   *
   * @remarks
   *
   *   Including:
   *   - an email address
   *   - a mobile number
   *
   */
  public individualsElectronicAddresses: IndividualsElectronicAddresses;
  /**
   * If you carry on a business you may need to hold a licence.
   *
   * @remarks
   *
   *   For example, if you provide financial services, you are required to hold an Australian Financial
   *   Services (AFS) licence.
   *
   */
  public individualsLicenses: IndividualsLicenses;
  /**
   * A role defines the characteristics of a relationship between parties.
   *
   * @remarks
   * An Individual can participate in a relationship with other individuals and organisations.
   *
   * For example:
   *
   * | Party         | Role           | Relationship     | Role          | Party                           |
   * | ------------- | -------------- | ---------------- | ------------- | ------------------------------- |
   * | Homer Simpson | Husband        | Marriage         | Wife          | Marge Simpson                   |
   * | Homer Simpson | Employee       | Employment       | Employer      | Springfield Nuclear Power Plant |
   * | Homer Simpson | Safety Officer | Colleague        | Supervisor    | Carl Carlson                    |
   * | Homer Simpson | Director       | Directorship     | Company       | Compu Global Hyper Mega Net     |
   * | Homer Simpson | Employee       | Employment       | Employer      | Compu Global Hyper Mega Net     |
   * | Homer Simpson | Member         | Membership       | Organisation  | The Stonecutters                |
   * | Homer Simpson | Partner        | Partnership      | Partnership   | The Be Sharps                   |
   * | Homer Simpson | Trustee        | Trusteeship      | Trust         | The Simpson Family Trust        |
   * | Homer Simpson | Member         | Membership       | Association   | Mensa International             |
   *
   * You can use the API's **metadata services** to retrieve information about the classifcation schemes and
   * values used by the Registry.
   *
   */
  public individualsRoles: IndividualsRoles;
  /**
   * A classification scheme for parties (individuals and organisations).
   *
   * @remarks
   *
   */
  public legalEntityTypes: LegalEntityTypes;
  /**
   * A classification scheme for licenses.
   *
   * @remarks
   *
   */
  public licenseLifecycleStates: LicenseLifecycleStates;
  /**
   * A classification scheme for licenses.
   *
   * @remarks
   *
   */
  public licenseTypes: LicenseTypes;
  /**
   * If you carry on a business you may need to hold a licence.
   *
   * @remarks
   *
   *   For example, if you provide financial services, you are required to hold an Australian Financial
   *   Services (AFS) licence.
   *
   */
  public licenses: Licenses;
  /**
   * A classification scheme for names.
   *
   * @remarks
   *
   */
  public nameDirections: NameDirections;
  /**
   * A classification scheme for names.
   *
   * @remarks
   *
   */
  public namePrefixes: NamePrefixes;
  /**
   * A classification scheme for names.
   *
   * @remarks
   *
   */
  public nameTypes: NameTypes;
  /**
   * An organisation usually consists of a number of individuals or groups bound by a common purpose about whom the
   *
   * @remarks
   * registry wishes to maintain information.
   *
   *   For example, the organisation's legal entity type (e.g., Incorporated Entity, Unincorporated Entity,
   *   Partnership or Joint Venture).
   *
   */
  public organisations: Organisations;
  /**
   * The registry maintains information about an organisation's contact details for administrative purposes.
   *
   * @remarks
   *
   *   Including:
   *   - an address for the service of documents
   *   - a principal place of business address
   *
   */
  public organisationsAddresses: OrganisationsAddresses;
  /**
   * A business name is a name or title under which an organisation conducts a business.
   *
   * @remarks
   *
   */
  public organisationsBusinessNames: OrganisationsBusinessNames;
  /**
   * The registry maintains information about an organisation's contact details for administrative purposes.
   *
   * @remarks
   *
   *   Including:
   *   - an email address
   *   - a mobile number
   *
   */
  public organisationsElectronicAddresses: OrganisationsElectronicAddresses;
  /**
   * If you carry on a business you may need to hold a licence.
   *
   * @remarks
   *
   *   For example, if you provide financial services, you are required to hold an Australian Financial
   *   Services (AFS) licence.
   *
   */
  public organisationsLicenses: OrganisationsLicenses;
  /**
   * A role defines the characteristics of a relationship between parties.
   *
   * @remarks
   * An Organisation can participate in a relationship with other organisations and indiviuals.
   *
   * For example:
   *
   * | Party                           | Role     | Relationship | Role         | Party             |
   * | ------------------------------- | -------- | -------------| ------------ | ----------------- |
   * | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Homer Simpson     |
   * | Springfield Nuclear Power Plant | Company  | Directorship | Director     | Mr Burns          |
   * | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Mr Burns          |
   * | Springfield Nuclear Power Plant | Sponsor  | Sponsorship  | Organisation | The Stonecutters  |
   *
   * You can use the API's **metadata services** to retrieve information about the classifcation schemes and
   * values used by the Registry.
   *
   */
  public organisationsRoles: OrganisationsRoles;
  /**
   * A classification scheme for registered identifiers.
   *
   * @remarks
   *
   */
  public registeredIdentifierTypes: RegisteredIdentifierTypes;
  /**
   * A classification scheme for the characteristics of relationships between parties (individuals and organisations).
   *
   * @remarks
   *
   */
  public roles: Roles;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.addressTypes = new AddressTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.businessNameLifecycleStates = new BusinessNameLifecycleStates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.businessNames = new BusinessNames(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.electronicAddressTypes = new ElectronicAddressTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.genders = new Genders(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.individuals = new Individuals(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.individualsAddresses = new IndividualsAddresses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.individualsBusinessNames = new IndividualsBusinessNames(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.individualsElectronicAddresses = new IndividualsElectronicAddresses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.individualsLicenses = new IndividualsLicenses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.individualsRoles = new IndividualsRoles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.legalEntityTypes = new LegalEntityTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.licenseLifecycleStates = new LicenseLifecycleStates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.licenseTypes = new LicenseTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.licenses = new Licenses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nameDirections = new NameDirections(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.namePrefixes = new NamePrefixes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nameTypes = new NameTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organisations = new Organisations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organisationsAddresses = new OrganisationsAddresses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organisationsBusinessNames = new OrganisationsBusinessNames(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organisationsElectronicAddresses =
      new OrganisationsElectronicAddresses(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.organisationsLicenses = new OrganisationsLicenses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organisationsRoles = new OrganisationsRoles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.registeredIdentifierTypes = new RegisteredIdentifierTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.roles = new Roles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
