"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2hybridinspectstatistics as shared_googleprivacydlpv2hybridinspectstatistics
from ..shared import googleprivacydlpv2infotypestats as shared_googleprivacydlpv2infotypestats
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2Result:
    r"""All result fields mentioned below are updated while the job is processing."""
    
    hybrid_stats: Optional[shared_googleprivacydlpv2hybridinspectstatistics.GooglePrivacyDlpV2HybridInspectStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hybridStats'), 'exclude': lambda f: f is None }})
    r"""Statistics related to processing hybrid inspect requests."""  
    info_type_stats: Optional[list[shared_googleprivacydlpv2infotypestats.GooglePrivacyDlpV2InfoTypeStats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infoTypeStats'), 'exclude': lambda f: f is None }})
    r"""Statistics of how many instances of each info type were found during inspect job."""  
    processed_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processedBytes'), 'exclude': lambda f: f is None }})
    r"""Total size in bytes that were processed."""  
    total_estimated_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalEstimatedBytes'), 'exclude': lambda f: f is None }})
    r"""Estimate of the number of bytes to process."""  
    