// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type MeetingPollUpdateSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// MeetingPollUpdatePollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type MeetingPollUpdatePollQuestionsTypeEnum string

const (
	MeetingPollUpdatePollQuestionsTypeEnumSingle   MeetingPollUpdatePollQuestionsTypeEnum = "single"
	MeetingPollUpdatePollQuestionsTypeEnumMultiple MeetingPollUpdatePollQuestionsTypeEnum = "multiple"
)

func (e *MeetingPollUpdatePollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = MeetingPollUpdatePollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingPollUpdatePollQuestionsTypeEnum: %s", s)
	}
}

type MeetingPollUpdatePollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *MeetingPollUpdatePollQuestionsTypeEnum `json:"type,omitempty"`
}

// MeetingPollUpdatePoll - Poll
type MeetingPollUpdatePoll struct {
	// Array of Polls
	Questions []MeetingPollUpdatePollQuestions `json:"questions,omitempty" multipartForm:"name=questions,json"`
	// Title for the poll.
	Title *string `json:"title,omitempty" multipartForm:"name=title"`
}

type MeetingPollUpdateRequest struct {
	// Meeting Poll
	RequestBody MeetingPollUpdatePoll `request:"mediaType=application/json"`
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
	// The poll ID
	PollID string `pathParam:"style=simple,explode=false,name=pollId"`
}

type MeetingPollUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
