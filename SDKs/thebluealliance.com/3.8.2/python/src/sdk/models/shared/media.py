"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class MediaTypeEnum(str, Enum):
    r"""String type of the media element."""
    YOUTUBE = 'youtube'
    CDPHOTOTHREAD = 'cdphotothread'
    IMGUR = 'imgur'
    FACEBOOK_PROFILE = 'facebook-profile'
    YOUTUBE_CHANNEL = 'youtube-channel'
    TWITTER_PROFILE = 'twitter-profile'
    GITHUB_PROFILE = 'github-profile'
    INSTAGRAM_PROFILE = 'instagram-profile'
    PERISCOPE_PROFILE = 'periscope-profile'
    GRABCAD = 'grabcad'
    INSTAGRAM_IMAGE = 'instagram-image'
    EXTERNAL_LINK = 'external-link'
    AVATAR = 'avatar'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Media:
    r"""The `Media` object contains a reference for most any media associated with a team or event on TBA."""
    
    foreign_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('foreign_key') }})
    r"""The key used to identify this media on the media site."""  
    type: MediaTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""String type of the media element."""  
    details: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""If required, a JSON dict of additional media information."""  
    direct_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direct_url'), 'exclude': lambda f: f is None }})
    r"""Direct URL to the media."""  
    preferred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred'), 'exclude': lambda f: f is None }})
    r"""True if the media is of high quality."""  
    view_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view_url'), 'exclude': lambda f: f is None }})
    r"""The URL that leads to the full web page for the media, if one exists."""  
    