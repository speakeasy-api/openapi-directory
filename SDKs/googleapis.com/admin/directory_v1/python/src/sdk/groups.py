"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Groups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_groups_aliases_delete(self, request: operations.DirectoryGroupsAliasesDeleteRequest, security: operations.DirectoryGroupsAliasesDeleteSecurity) -> operations.DirectoryGroupsAliasesDeleteResponse:
        r"""Removes an alias."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryGroupsAliasesDeleteRequest, base_url, '/admin/directory/v1/groups/{groupKey}/aliases/{alias}', request)
        
        query_params = utils.get_query_params(operations.DirectoryGroupsAliasesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsAliasesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_groups_aliases_insert(self, request: operations.DirectoryGroupsAliasesInsertRequest, security: operations.DirectoryGroupsAliasesInsertSecurity) -> operations.DirectoryGroupsAliasesInsertResponse:
        r"""Adds an alias for the group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryGroupsAliasesInsertRequest, base_url, '/admin/directory/v1/groups/{groupKey}/aliases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "alias", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryGroupsAliasesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsAliasesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Alias])
                res.alias = out

        return res

    def directory_groups_aliases_list(self, request: operations.DirectoryGroupsAliasesListRequest, security: operations.DirectoryGroupsAliasesListSecurity) -> operations.DirectoryGroupsAliasesListResponse:
        r"""Lists all aliases for a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryGroupsAliasesListRequest, base_url, '/admin/directory/v1/groups/{groupKey}/aliases', request)
        
        query_params = utils.get_query_params(operations.DirectoryGroupsAliasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsAliasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Aliases])
                res.aliases = out

        return res

    def directory_groups_delete(self, request: operations.DirectoryGroupsDeleteRequest, security: operations.DirectoryGroupsDeleteSecurity) -> operations.DirectoryGroupsDeleteResponse:
        r"""Deletes a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryGroupsDeleteRequest, base_url, '/admin/directory/v1/groups/{groupKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryGroupsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_groups_get(self, request: operations.DirectoryGroupsGetRequest, security: operations.DirectoryGroupsGetSecurity) -> operations.DirectoryGroupsGetResponse:
        r"""Retrieves a group's properties."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryGroupsGetRequest, base_url, '/admin/directory/v1/groups/{groupKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryGroupsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out

        return res

    def directory_groups_insert(self, request: operations.DirectoryGroupsInsertRequest, security: operations.DirectoryGroupsInsertSecurity) -> operations.DirectoryGroupsInsertResponse:
        r"""Creates a group."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/directory/v1/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryGroupsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out

        return res

    def directory_groups_list(self, request: operations.DirectoryGroupsListRequest, security: operations.DirectoryGroupsListSecurity) -> operations.DirectoryGroupsListResponse:
        r"""Retrieves all groups of a domain or of a user given a userKey (paginated)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/directory/v1/groups'
        
        query_params = utils.get_query_params(operations.DirectoryGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Groups])
                res.groups = out

        return res

    def directory_groups_patch(self, request: operations.DirectoryGroupsPatchRequest, security: operations.DirectoryGroupsPatchSecurity) -> operations.DirectoryGroupsPatchResponse:
        r"""Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryGroupsPatchRequest, base_url, '/admin/directory/v1/groups/{groupKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryGroupsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out

        return res

    def directory_groups_update(self, request: operations.DirectoryGroupsUpdateRequest, security: operations.DirectoryGroupsUpdateSecurity) -> operations.DirectoryGroupsUpdateResponse:
        r"""Updates a group's properties."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryGroupsUpdateRequest, base_url, '/admin/directory/v1/groups/{groupKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryGroupsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out

        return res

    