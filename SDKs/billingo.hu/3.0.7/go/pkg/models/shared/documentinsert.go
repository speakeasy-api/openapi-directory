// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"openapi/pkg/types"
)

type DocumentInsertItemsType string

const (
	DocumentInsertItemsTypeDocumentItemData    DocumentInsertItemsType = "DocumentItemData"
	DocumentInsertItemsTypeDocumentProductData DocumentInsertItemsType = "DocumentProductData"
)

type DocumentInsertItems struct {
	DocumentItemData    *DocumentItemData
	DocumentProductData *DocumentProductData

	Type DocumentInsertItemsType
}

func CreateDocumentInsertItemsDocumentItemData(documentItemData DocumentItemData) DocumentInsertItems {
	typ := DocumentInsertItemsTypeDocumentItemData

	return DocumentInsertItems{
		DocumentItemData: &documentItemData,
		Type:             typ,
	}
}

func CreateDocumentInsertItemsDocumentProductData(documentProductData DocumentProductData) DocumentInsertItems {
	typ := DocumentInsertItemsTypeDocumentProductData

	return DocumentInsertItems{
		DocumentProductData: &documentProductData,
		Type:                typ,
	}
}

func (u *DocumentInsertItems) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	documentItemData := new(DocumentItemData)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&documentItemData); err == nil {
		u.DocumentItemData = documentItemData
		u.Type = DocumentInsertItemsTypeDocumentItemData
		return nil
	}

	documentProductData := new(DocumentProductData)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&documentProductData); err == nil {
		u.DocumentProductData = documentProductData
		u.Type = DocumentInsertItemsTypeDocumentProductData
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DocumentInsertItems) MarshalJSON() ([]byte, error) {
	if u.DocumentItemData != nil {
		return json.Marshal(u.DocumentItemData)
	}

	if u.DocumentProductData != nil {
		return json.Marshal(u.DocumentProductData)
	}

	return nil, nil
}

// DocumentInsert - DocumentInsert object that you would like to store.
type DocumentInsert struct {
	BankAccountID   *int64                 `json:"bank_account_id,omitempty"`
	BlockID         int64                  `json:"block_id"`
	Comment         *string                `json:"comment,omitempty"`
	ConversionRate  *float32               `json:"conversion_rate,omitempty"`
	Currency        CurrencyEnum           `json:"currency"`
	DueDate         types.Date             `json:"due_date"`
	Electronic      *bool                  `json:"electronic,omitempty"`
	FulfillmentDate types.Date             `json:"fulfillment_date"`
	Items           []DocumentInsertItems  `json:"items,omitempty"`
	Language        DocumentLanguageEnum   `json:"language"`
	Paid            *bool                  `json:"paid,omitempty"`
	PartnerID       int64                  `json:"partner_id"`
	PaymentMethod   PaymentMethodEnum      `json:"payment_method"`
	Settings        *DocumentSettings      `json:"settings,omitempty"`
	Type            DocumentInsertTypeEnum `json:"type"`
	VendorID        *string                `json:"vendor_id,omitempty"`
}
