/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object representing the specification of a route.
 */
export class UpdateRouteRequestBodySpec extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "httpRoute" })
  @Type(() => shared.HttpRoute)
  httpRoute?: shared.HttpRoute;
}

export class UpdateRouteRequestBody extends SpeakeasyBase {
  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the
   *
   * @remarks
   * request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * An object representing the specification of a route.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spec" })
  @Type(() => UpdateRouteRequestBodySpec)
  spec: UpdateRouteRequestBodySpec;
}

export class UpdateRouteRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateRouteRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the service mesh in which the route resides.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meshName",
  })
  meshName: string;

  /**
   * The name of the route to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=routeName",
  })
  routeName: string;

  /**
   * The name of the virtual router with which the route is associated.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=virtualRouterName",
  })
  virtualRouterName: string;
}

export class UpdateRouteResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateRouteOutput?: shared.UpdateRouteOutput;
}
