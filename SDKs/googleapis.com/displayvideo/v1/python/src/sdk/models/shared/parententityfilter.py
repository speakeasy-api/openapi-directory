"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ParentEntityFilterFileTypeEnum(str, Enum):
    FILE_TYPE_UNSPECIFIED = 'FILE_TYPE_UNSPECIFIED'
    FILE_TYPE_CAMPAIGN = 'FILE_TYPE_CAMPAIGN'
    FILE_TYPE_MEDIA_PRODUCT = 'FILE_TYPE_MEDIA_PRODUCT'
    FILE_TYPE_INSERTION_ORDER = 'FILE_TYPE_INSERTION_ORDER'
    FILE_TYPE_LINE_ITEM = 'FILE_TYPE_LINE_ITEM'
    FILE_TYPE_AD_GROUP = 'FILE_TYPE_AD_GROUP'
    FILE_TYPE_AD = 'FILE_TYPE_AD'

class ParentEntityFilterFilterTypeEnum(str, Enum):
    r"""Required. Filter type used to filter fetched entities."""
    FILTER_TYPE_UNSPECIFIED = 'FILTER_TYPE_UNSPECIFIED'
    FILTER_TYPE_NONE = 'FILTER_TYPE_NONE'
    FILTER_TYPE_ADVERTISER_ID = 'FILTER_TYPE_ADVERTISER_ID'
    FILTER_TYPE_CAMPAIGN_ID = 'FILTER_TYPE_CAMPAIGN_ID'
    FILTER_TYPE_MEDIA_PRODUCT_ID = 'FILTER_TYPE_MEDIA_PRODUCT_ID'
    FILTER_TYPE_INSERTION_ORDER_ID = 'FILTER_TYPE_INSERTION_ORDER_ID'
    FILTER_TYPE_LINE_ITEM_ID = 'FILTER_TYPE_LINE_ITEM_ID'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParentEntityFilter:
    r"""A filtering option that filters on selected file types belonging to a chosen set of filter entities."""
    
    file_type: Optional[list[ParentEntityFilterFileTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileType'), 'exclude': lambda f: f is None }})
    r"""Required. File types that will be returned."""  
    filter_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified."""  
    filter_type: Optional[ParentEntityFilterFilterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterType'), 'exclude': lambda f: f is None }})
    r"""Required. Filter type used to filter fetched entities."""  
    