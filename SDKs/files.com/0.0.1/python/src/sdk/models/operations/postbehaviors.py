"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import behaviorentity as shared_behaviorentity
from typing import Optional


@dataclasses.dataclass
class PostBehaviorsRequestBodyAttachmentFile:
    
    attachment_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'attachment_file' }})  
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    

@dataclasses.dataclass
class PostBehaviorsRequestBody:
    
    behavior: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'behavior' }})
    r"""Behavior type."""  
    path: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'path' }})
    r"""Folder behaviors path."""  
    attachment_file: Optional[PostBehaviorsRequestBodyAttachmentFile] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""Certain behaviors may require a file, for instance, the \\"watermark\\" behavior requires a watermark image"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'description' }})
    r"""Description for this behavior."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'name' }})
    r"""Name for this behavior."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'value' }})
    r"""The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior. See The Behavior Types section for example values for each type of behavior."""  
    

@dataclasses.dataclass
class PostBehaviorsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    behavior_entity: Optional[shared_behaviorentity.BehaviorEntity] = dataclasses.field(default=None)
    r"""The Behaviors object."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    