"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import date_ as shared_date_
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FreeBookingLinksResultDeviceTypeEnum(str, Enum):
    r"""The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request."""
    DEVICE_UNSPECIFIED = 'DEVICE_UNSPECIFIED'
    DEVICE_UNKNOWN = 'DEVICE_UNKNOWN'
    DESKTOP = 'DESKTOP'
    MOBILE = 'MOBILE'
    TABLET = 'TABLET'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FreeBookingLinksResult:
    r"""**DEPRECATED:** Use `PropertyPerformanceResult` with `PropertyPerformanceReportService` instead. Represents a result from querying for free booking link stats for an account."""
    
    click_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickCount'), 'exclude': lambda f: f is None }})
    r"""The total number of clicks that were recorded for this result."""  
    date_: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    device_type: Optional[FreeBookingLinksResultDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceType'), 'exclude': lambda f: f is None }})
    r"""The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request."""  
    partner_hotel_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerHotelDisplayName'), 'exclude': lambda f: f is None }})
    r"""Partner's hotel name. Only present if `partnerHotelDisplayName` is specified in `aggregateBy` in the request."""  
    partner_hotel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerHotelId'), 'exclude': lambda f: f is None }})
    r"""Partner's hotel ID. Only present if `partnerHotelId` is specified in `aggregateBy` in the request."""  
    user_region_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRegionCode'), 'exclude': lambda f: f is None }})
    r"""ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request"""  
    