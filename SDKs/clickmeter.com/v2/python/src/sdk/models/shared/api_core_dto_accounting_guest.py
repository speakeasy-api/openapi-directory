"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import api_core_dto_accounting_conversionoptions as shared_api_core_dto_accounting_conversionoptions
from ..shared import api_core_dto_accounting_extendedgrants as shared_api_core_dto_accounting_extendedgrants
from ..shared import api_core_dto_accounting_hitoptions as shared_api_core_dto_accounting_hitoptions
from ..shared import api_core_dto_grants_grant as shared_api_core_dto_grants_grant
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class APICoreDtoAccountingGuestTimeFormatEnum(str, Enum):
    AM_PM = 'AmPm'
    H24 = 'H24'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICoreDtoAccountingGuest:
    r"""Guest object to create"""
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKey'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'apiKey' }})  
    conversion_options: Optional[shared_api_core_dto_accounting_conversionoptions.APICoreDtoAccountingConversionOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionOptions'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'conversionOptions', 'json': True }})  
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'creationDate' }})
    r"""(A date in \\"YmdHis\\" format)"""  
    current_grant: Optional[shared_api_core_dto_grants_grant.APICoreDtoGrantsGrant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentGrant'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'currentGrant', 'json': True }})  
    date_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateFormat'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'dateFormat' }})  
    decimal_separator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decimalSeparator'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'decimalSeparator' }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'email' }})  
    extended_grants: Optional[shared_api_core_dto_accounting_extendedgrants.APICoreDtoAccountingExtendedGrants] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extendedGrants'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'extendedGrants', 'json': True }})  
    group_grants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupGrants'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'groupGrants' }})  
    hit_options: Optional[shared_api_core_dto_accounting_hitoptions.APICoreDtoAccountingHitOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hitOptions'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'hitOptions', 'json': True }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'id' }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'key' }})  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'language' }})  
    login_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loginCount'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'loginCount' }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'name' }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'notes' }})  
    number_group_separator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberGroupSeparator'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'numberGroupSeparator' }})  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'password' }})  
    time_format: Optional[APICoreDtoAccountingGuestTimeFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeFormat'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'timeFormat' }})  
    timeframe_min_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeframeMinDate'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'timeframeMinDate' }})
    r"""(A date in \\"YmdHis\\" format)"""  
    time_zone: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'timeZone' }})  
    timezonename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezonename'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'timezonename' }})  
    tl_grants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tlGrants'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'tlGrants' }})  
    tp_grants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tpGrants'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'tpGrants' }})  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'userName' }})  
    