// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetMergeCommitXAmzTargetEnum
type GetMergeCommitXAmzTargetEnum string

const (
	GetMergeCommitXAmzTargetEnumCodeCommit20150413GetMergeCommit GetMergeCommitXAmzTargetEnum = "CodeCommit_20150413.GetMergeCommit"
)

func (e *GetMergeCommitXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.GetMergeCommit":
		*e = GetMergeCommitXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMergeCommitXAmzTargetEnum: %s", s)
	}
}

type GetMergeCommitRequest struct {
	GetMergeCommitInput shared.GetMergeCommitInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          GetMergeCommitXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetMergeCommitResponse struct {
	// CommitDoesNotExistException
	CommitDoesNotExistException interface{}
	// CommitRequiredException
	CommitRequiredException interface{}
	ContentType             string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// Success
	GetMergeCommitOutput *shared.GetMergeCommitOutput
	// InvalidCommitException
	InvalidCommitException interface{}
	// InvalidConflictDetailLevelException
	InvalidConflictDetailLevelException interface{}
	// InvalidConflictResolutionStrategyException
	InvalidConflictResolutionStrategyException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
