"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class WebResource:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def site_verification_web_resource_delete(self, request: operations.SiteVerificationWebResourceDeleteRequest, security: operations.SiteVerificationWebResourceDeleteSecurity) -> operations.SiteVerificationWebResourceDeleteResponse:
        r"""Relinquish ownership of a website or domain."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SiteVerificationWebResourceDeleteRequest, base_url, '/webResource/{id}', request)
        
        query_params = utils.get_query_params(operations.SiteVerificationWebResourceDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SiteVerificationWebResourceDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def site_verification_web_resource_get(self, request: operations.SiteVerificationWebResourceGetRequest, security: operations.SiteVerificationWebResourceGetSecurity) -> operations.SiteVerificationWebResourceGetResponse:
        r"""Get the most current data for a website or domain."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SiteVerificationWebResourceGetRequest, base_url, '/webResource/{id}', request)
        
        query_params = utils.get_query_params(operations.SiteVerificationWebResourceGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SiteVerificationWebResourceGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SiteVerificationWebResourceResource])
                res.site_verification_web_resource_resource = out

        return res

    def site_verification_web_resource_get_token(self, request: operations.SiteVerificationWebResourceGetTokenRequest, security: operations.SiteVerificationWebResourceGetTokenSecurity) -> operations.SiteVerificationWebResourceGetTokenResponse:
        r"""Get a verification token for placing on a website or domain."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "site_verification_web_resource_gettoken_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SiteVerificationWebResourceGetTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SiteVerificationWebResourceGetTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SiteVerificationWebResourceGettokenResponse])
                res.site_verification_web_resource_gettoken_response = out

        return res

    def site_verification_web_resource_insert(self, request: operations.SiteVerificationWebResourceInsertRequest, security: operations.SiteVerificationWebResourceInsertSecurity) -> operations.SiteVerificationWebResourceInsertResponse:
        r"""Attempt verification of a website or domain."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webResource'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "site_verification_web_resource_resource", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SiteVerificationWebResourceInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SiteVerificationWebResourceInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SiteVerificationWebResourceResource])
                res.site_verification_web_resource_resource = out

        return res

    def site_verification_web_resource_list(self, request: operations.SiteVerificationWebResourceListRequest, security: operations.SiteVerificationWebResourceListSecurity) -> operations.SiteVerificationWebResourceListResponse:
        r"""Get the list of your verified websites and domains."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webResource'
        
        query_params = utils.get_query_params(operations.SiteVerificationWebResourceListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SiteVerificationWebResourceListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SiteVerificationWebResourceListResponse])
                res.site_verification_web_resource_list_response = out

        return res

    def site_verification_web_resource_patch(self, request: operations.SiteVerificationWebResourcePatchRequest, security: operations.SiteVerificationWebResourcePatchSecurity) -> operations.SiteVerificationWebResourcePatchResponse:
        r"""Modify the list of owners for your website or domain. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SiteVerificationWebResourcePatchRequest, base_url, '/webResource/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "site_verification_web_resource_resource", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SiteVerificationWebResourcePatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SiteVerificationWebResourcePatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SiteVerificationWebResourceResource])
                res.site_verification_web_resource_resource = out

        return res

    def site_verification_web_resource_update(self, request: operations.SiteVerificationWebResourceUpdateRequest, security: operations.SiteVerificationWebResourceUpdateSecurity) -> operations.SiteVerificationWebResourceUpdateResponse:
        r"""Modify the list of owners for your website or domain."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SiteVerificationWebResourceUpdateRequest, base_url, '/webResource/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "site_verification_web_resource_resource", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SiteVerificationWebResourceUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SiteVerificationWebResourceUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SiteVerificationWebResourceResource])
                res.site_verification_web_resource_resource = out

        return res

    