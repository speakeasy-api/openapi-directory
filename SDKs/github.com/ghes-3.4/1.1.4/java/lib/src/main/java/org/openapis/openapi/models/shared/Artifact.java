/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Artifact - An artifact
 */
public class Artifact {
    @JsonProperty("archive_download_url")
    public String archiveDownloadUrl;
    public Artifact withArchiveDownloadUrl(String archiveDownloadUrl) {
        this.archiveDownloadUrl = archiveDownloadUrl;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Artifact withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Whether or not the artifact has expired.
     */
    @JsonProperty("expired")
    public Boolean expired;
    public Artifact withExpired(Boolean expired) {
        this.expired = expired;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expires_at")
    public OffsetDateTime expiresAt;
    public Artifact withExpiresAt(OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    @JsonProperty("id")
    public Long id;
    public Artifact withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The name of the artifact.
     */
    @JsonProperty("name")
    public String name;
    public Artifact withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;
    public Artifact withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * The size in bytes of the artifact.
     */
    @JsonProperty("size_in_bytes")
    public Long sizeInBytes;
    public Artifact withSizeInBytes(Long sizeInBytes) {
        this.sizeInBytes = sizeInBytes;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Artifact withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonProperty("url")
    public String url;
    public Artifact withUrl(String url) {
        this.url = url;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_run")
    public ArtifactWorkflowRun workflowRun;
    public Artifact withWorkflowRun(ArtifactWorkflowRun workflowRun) {
        this.workflowRun = workflowRun;
        return this;
    }
    
}
