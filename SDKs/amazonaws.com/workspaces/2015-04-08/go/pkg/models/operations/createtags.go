// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateTagsXAmzTargetEnum
type CreateTagsXAmzTargetEnum string

const (
	CreateTagsXAmzTargetEnumWorkspacesServiceCreateTags CreateTagsXAmzTargetEnum = "WorkspacesService.CreateTags"
)

func (e CreateTagsXAmzTargetEnum) ToPointer() *CreateTagsXAmzTargetEnum {
	return &e
}

func (e *CreateTagsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkspacesService.CreateTags":
		*e = CreateTagsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTagsXAmzTargetEnum: %v", v)
	}
}

type CreateTagsRequest struct {
	CreateTagsRequest shared.CreateTagsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateTagsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateTagsResponse struct {
	ContentType string
	// Success
	CreateTagsResult map[string]interface{}
	// InvalidParameterValuesException
	InvalidParameterValuesException interface{}
	// ResourceLimitExceededException
	ResourceLimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
