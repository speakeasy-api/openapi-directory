<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Atomically gets the AppAttestConfigs for the specified list of apps.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetResponse
     */
	public function firebaseappcheckProjectsAppsAppAttestConfigBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/apps/-/appAttestConfig:batchGet', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsAppAttestConfigBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchGetAppAttestConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchGetAppAttestConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new DebugToken for the specified app. For security reasons, after the creation operation completes, the `token` field cannot be updated or retrieved, but you can revoke the debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateResponse
     */
	public function firebaseappcheckProjectsAppsDebugTokensCreate(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/debugTokens', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaDebugToken", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaDebugToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaDebugToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified DebugToken. A deleted debug token cannot be used to exchange for an App Check token. Use this method when you suspect the secret `token` has been compromised or when you no longer need the debug token.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteResponse
     */
	public function firebaseappcheckProjectsAppsDebugTokensDelete(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all DebugTokens for the specified app. For security reasons, the `token` field is never populated in the response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListResponse
     */
	public function firebaseappcheckProjectsAppsDebugTokensList(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/debugTokens', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDebugTokensListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaListDebugTokensResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaListDebugTokensResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Atomically gets the DeviceCheckConfigs for the specified list of apps. For security reasons, the `private_key` field is never populated in the response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetResponse
     */
	public function firebaseappcheckProjectsAppsDeviceCheckConfigBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/apps/-/deviceCheckConfig:batchGet', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsDeviceCheckConfigBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts an App Attest assertion and an artifact previously obtained from ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionResponse
     */
	public function firebaseappcheckProjectsAppsExchangeAppAttestAssertion(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeAppAttestAssertion', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAssertionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts an App Attest CBOR attestation and verifies it with Apple using your preconfigured team and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an AppCheckToken using ExchangeAppAttestAssertion. For convenience and performance, this method's response object will also contain an AppCheckToken (if the verification is successful).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationResponse
     */
	public function firebaseappcheckProjectsAppsExchangeAppAttestAttestation(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeAppAttestAttestation', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeAppAttestAttestationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates a custom token signed using your project's Admin SDK service account credentials. If valid, returns an AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangeCustomToken(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeCustomToken', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeCustomTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeCustomTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates a debug token secret that you have previously created using CreateDebugToken. If valid, returns an AppCheckToken. Note that a restrictive quota is enforced on this method to prevent accidental exposure of the app to abuse.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangeDebugToken(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeDebugToken', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeDebugTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDebugTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice) issued by DeviceCheck, and attempts to validate it with Apple. If valid, returns an AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangeDeviceCheckToken(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeDeviceCheckToken', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeDeviceCheckTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates an [integrity verdict response token from Play Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify). If valid, returns an AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangePlayIntegrityToken(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangePlayIntegrityToken', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangePlayIntegrityTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangePlayIntegrityTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates a [reCAPTCHA Enterprise response token](https://cloud.google.com/recaptcha-enterprise/docs/create-assessment#retrieve_token). If valid, returns an App Check token AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseToken(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeRecaptchaEnterpriseToken', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeRecaptchaEnterpriseTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaEnterpriseTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangeRecaptchaToken(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeRecaptchaToken', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangeRecaptchaV3Token(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeRecaptchaV3Token', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeRecaptchaV3TokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeRecaptchaV3TokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation#request-attestation-step). If valid, returns an AppCheckToken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenResponse
     */
	public function firebaseappcheckProjectsAppsExchangeSafetyNetToken(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:exchangeSafetyNetToken', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsExchangeSafetyNetTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaAppCheckToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaAppCheckToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates a challenge that protects the integrity of an immediately following call to ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused for multiple calls.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeResponse
     */
	public function firebaseappcheckProjectsAppsGenerateAppAttestChallenge(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:generateAppAttestChallenge', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGenerateAppAttestChallengeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaGenerateAppAttestChallengeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates a challenge that protects the integrity of an immediately following integrity verdict request to the Play Integrity API. The next call to ExchangePlayIntegrityToken using the resulting integrity token will verify the presence and validity of the challenge. A challenge should not be reused for multiple calls.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeResponse
     */
	public function firebaseappcheckProjectsAppsGeneratePlayIntegrityChallenge(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{app}:generatePlayIntegrityChallenge', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsGeneratePlayIntegrityChallengeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Atomically gets the PlayIntegrityConfigs for the specified list of apps.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetResponse
     */
	public function firebaseappcheckProjectsAppsPlayIntegrityConfigBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/apps/-/playIntegrityConfig:batchGet', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsPlayIntegrityConfigBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchGetPlayIntegrityConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchGetPlayIntegrityConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Atomically gets the RecaptchaConfigs for the specified list of apps. For security reasons, the `site_secret` field is never populated in the response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetResponse
     */
	public function firebaseappcheckProjectsAppsRecaptchaConfigBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/apps/-/recaptchaConfig:batchGet', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaConfigBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Atomically gets the RecaptchaEnterpriseConfigs for the specified list of apps.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetResponse
     */
	public function firebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/apps/-/recaptchaEnterpriseConfig:batchGet', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaEnterpriseConfigBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchGetRecaptchaEnterpriseConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchGetRecaptchaEnterpriseConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Atomically gets the RecaptchaV3Configs for the specified list of apps. For security reasons, the `site_secret` field is never populated in the response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetResponse
     */
	public function firebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/apps/-/recaptchaV3Config:batchGet', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsRecaptchaV3ConfigBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchGetRecaptchaV3ConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchGetRecaptchaV3ConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Atomically gets the SafetyNetConfigs for the specified list of apps.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetResponse
     */
	public function firebaseappcheckProjectsAppsSafetyNetConfigBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/apps/-/safetyNetConfig:batchGet', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsAppsSafetyNetConfigBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchGetSafetyNetConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchGetSafetyNetConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Atomically updates the specified Service configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateResponse
     */
	public function firebaseappcheckProjectsServicesBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/services:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaBatchUpdateServicesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaBatchUpdateServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Service configuration for the specified service name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetResponse
     */
	public function firebaseappcheckProjectsServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all Service configurations for the specified project. Only Services which were explicitly configured using UpdateService or BatchUpdateServices will be returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListResponse
     */
	public function firebaseappcheckProjectsServicesList(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaListServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified Service configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchResponse
     */
	public function firebaseappcheckProjectsServicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppcheckV1betaService", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappcheckProjectsServicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppcheckV1betaService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppcheckV1betaService', 'json');
            }
        }

        return $response;
    }
}