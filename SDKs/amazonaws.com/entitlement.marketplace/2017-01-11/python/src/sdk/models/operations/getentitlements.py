"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getentitlementsrequest as shared_getentitlementsrequest
from ..shared import getentitlementsresult as shared_getentitlementsresult
from ..shared import internalserviceerrorexception as shared_internalserviceerrorexception
from ..shared import invalidparameterexception as shared_invalidparameterexception
from ..shared import throttlingexception as shared_throttlingexception
from enum import Enum
from typing import Optional

class GetEntitlementsXAmzTargetEnum(str, Enum):
    AWSMP_ENTITLEMENT_SERVICE_GET_ENTITLEMENTS = 'AWSMPEntitlementService.GetEntitlements'


@dataclasses.dataclass
class GetEntitlementsRequest:
    
    get_entitlements_request: shared_getentitlementsrequest.GetEntitlementsRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: GetEntitlementsXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetEntitlementsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_entitlements_result: Optional[shared_getentitlementsresult.GetEntitlementsResult] = dataclasses.field(default=None)
    r"""Success"""  
    internal_service_error_exception: Optional[shared_internalserviceerrorexception.InternalServiceErrorException] = dataclasses.field(default=None)
    r"""InternalServiceErrorException"""  
    invalid_parameter_exception: Optional[shared_invalidparameterexception.InvalidParameterException] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[shared_throttlingexception.ThrottlingException] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    