"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ClientKeyCompanyLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_companies_company_id_api_credentials_api_credential_id_generate_client_key(self, request: operations.PostCompaniesCompanyIDAPICredentialsAPICredentialIDGenerateClientKeyRequest, security: operations.PostCompaniesCompanyIDAPICredentialsAPICredentialIDGenerateClientKeySecurity) -> operations.PostCompaniesCompanyIDAPICredentialsAPICredentialIDGenerateClientKeyResponse:
        r"""Generate new client key
        Returns a new [client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works) for the API credential identified in the path. You can use the new client key a few minutes after generating it. The old client key stops working 24 hours after generating a new one.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management APIâ€”API credentials read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCompaniesCompanyIDAPICredentialsAPICredentialIDGenerateClientKeyRequest, base_url, '/companies/{companyId}/apiCredentials/{apiCredentialId}/generateClientKey', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCompaniesCompanyIDAPICredentialsAPICredentialIDGenerateClientKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateClientKeyResponse])
                res.generate_client_key_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    