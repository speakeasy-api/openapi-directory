/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CertificateAuthorityConfiguration } from "./certificateauthorityconfiguration";
import { CertificateAuthorityStatusEnum } from "./certificateauthoritystatusenum";
import { CertificateAuthorityTypeEnum } from "./certificateauthoritytypeenum";
import { CertificateAuthorityUsageModeEnum } from "./certificateauthorityusagemodeenum";
import { FailureReasonEnum } from "./failurereasonenum";
import { KeyStorageSecurityStandardEnum } from "./keystoragesecuritystandardenum";
import { RevocationConfiguration } from "./revocationconfiguration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Contains information about your private certificate authority (CA). Your private CA can issue and revoke X.509 digital certificates. Digital certificates verify that the entity named in the certificate <b>Subject</b> field owns or controls the public key contained in the <b>Subject Public Key Info</b> field. Call the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html">CreateCertificateAuthority</a> action to create your private CA. You must then call the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCertificate.html">GetCertificateAuthorityCertificate</a> action to retrieve a private CA certificate signing request (CSR). Sign the CSR with your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA certificate. Call the <a href="https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html">ImportCertificateAuthorityCertificate</a> action to import the signed certificate into Certificate Manager (ACM).
 */
export class CertificateAuthority extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CertificateAuthorityConfiguration" })
  @Type(() => CertificateAuthorityConfiguration)
  certificateAuthorityConfiguration?: CertificateAuthorityConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "FailureReason" })
  failureReason?: FailureReasonEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "KeyStorageSecurityStandard" })
  keyStorageSecurityStandard?: KeyStorageSecurityStandardEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LastStateChangeAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastStateChangeAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "NotAfter" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  notAfter?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "NotBefore" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  notBefore?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "OwnerAccount" })
  ownerAccount?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RestorableUntil" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  restorableUntil?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "RevocationConfiguration" })
  @Type(() => RevocationConfiguration)
  revocationConfiguration?: RevocationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Serial" })
  serial?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: CertificateAuthorityStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type?: CertificateAuthorityTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UsageMode" })
  usageMode?: CertificateAuthorityUsageModeEnum;
}
