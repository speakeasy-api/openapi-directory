/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Parameter } from "./parameter";
import { SetupTag } from "./setuptag";
import { TeardownTag } from "./teardowntag";
import { Expose, Type } from "class-transformer";

/**
 * Option to fire this tag.
 */
export enum TagTagFiringOptionEnum {
  Unlimited = "unlimited",
  OncePerEvent = "oncePerEvent",
  OncePerLoad = "oncePerLoad",
}

/**
 * Represents a Google Tag Manager Tag.
 */
export class Tag extends SpeakeasyBase {
  /**
   * GTM Account ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blockingRuleId" })
  blockingRuleId?: string[];

  /**
   * Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blockingTriggerId" })
  blockingTriggerId?: string[];

  /**
   * GTM Container ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "containerId" })
  containerId?: string;

  /**
   * The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firingRuleId" })
  firingRuleId?: string[];

  /**
   * Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firingTriggerId" })
  firingTriggerId?: string[];

  /**
   * If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "liveOnly" })
  liveOnly?: boolean;

  /**
   * Tag display name. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * The tag's parameters. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata({ elemType: Parameter })
  @Expose({ name: "parameter" })
  @Type(() => Parameter)
  parameter?: Parameter[];

  /**
   * Parent folder id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentFolderId" })
  parentFolderId?: string;

  /**
   * True if the tag is paused. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paused" })
  paused?: boolean;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  @Type(() => Parameter)
  priority?: Parameter;

  /**
   * The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduleEndMs" })
  scheduleEndMs?: string;

  /**
   * The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduleStartMs" })
  scheduleStartMs?: string;

  /**
   * The list of setup tags. Currently we only allow one.
   */
  @SpeakeasyMetadata({ elemType: SetupTag })
  @Expose({ name: "setupTag" })
  @Type(() => SetupTag)
  setupTag?: SetupTag[];

  /**
   * Option to fire this tag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tagFiringOption" })
  tagFiringOption?: TagTagFiringOptionEnum;

  /**
   * The Tag ID uniquely identifies the GTM Tag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tagId" })
  tagId?: string;

  /**
   * The list of teardown tags. Currently we only allow one.
   */
  @SpeakeasyMetadata({ elemType: TeardownTag })
  @Expose({ name: "teardownTag" })
  @Type(() => TeardownTag)
  teardownTag?: TeardownTag[];

  /**
   * GTM Tag Type. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
