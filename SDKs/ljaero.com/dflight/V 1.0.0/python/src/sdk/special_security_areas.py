"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SpecialSecurityAreas:
    r"""#### Locations where all UAS flight operations are prohibited unless prior FAA authorization has been obtained, and coordination with the controlling agency has taken place.
    Through agreements with the Department of Defense and other U.S. security and intelligence agencies, the FAA published these restrictions as [FDC NOTAM 1/0488](https://tfr.faa.gov/save_pages/detail_1_0488.html) (and it's predecessors). Unlike other NOTAMs designated as [Temporary Flight Restrictions](https://dflight-api.ljaero.com/#/Flight%20Restrictions), these remain in effect 24 hours a day, 7 days a week, until further announcement.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def ssa_by_distance_us_v1_ssa_distance_query_post(self, request: operations.SsaByDistanceUsV1SsaDistanceQueryPostRequest) -> operations.SsaByDistanceUsV1SsaDistanceQueryPostResponse:
        r"""Retrieve all special security areas located within given distance of location.
        Retrieve special security areas existing within given distance from a point. Request body parameters are:
        * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
        * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
        * distance:  distance in meters (max allowed value is 25000)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/ssa/distance-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ssa_by_distance", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SsaByDistanceUsV1SsaDistanceQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSADistanceResponse])
                res.ssa_distance_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def ssa_by_poly_us_v1_ssa_polygon_query_post(self, request: operations.SsaByPolyUsV1SsaPolygonQueryPostRequest) -> operations.SsaByPolyUsV1SsaPolygonQueryPostResponse:
        r"""Retrieve all special security areas located within given GeoJSON Polygon.
        Retrieve all special security areas located within given area. Request body parameters are:
        * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/ssa/polygon-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ssa_by_polygon", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SsaByPolyUsV1SsaPolygonQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSAPolyResponse])
                res.ssa_poly_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def ssa_by_route_us_v1_ssa_route_query_post(self, request: operations.SsaByRouteUsV1SsaRouteQueryPostRequest) -> operations.SsaByRouteUsV1SsaRouteQueryPostResponse:
        r"""Retrieve all special security areas traversed by route.
        Retrieve all special security areas intersected by route. Request body parameters are:
        * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/ssa/route-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ssa_by_route", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SsaByRouteUsV1SsaRouteQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSARouteResponse])
                res.ssa_route_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    