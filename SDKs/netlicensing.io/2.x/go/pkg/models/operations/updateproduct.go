// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateProductSecurity struct {
	BasicAuth shared.SchemeBasicAuth `security:"scheme,type=http,subtype=basic"`
}

type UpdateProductPathParams struct {
	// Unique number that identifies the Product.
	ProductNumber string `pathParam:"style=simple,explode=false,name=productNumber"`
}

// UpdateProductRequestBodyVatModeEnum - Vat mode for Product. Supported types: GROSS, NET
type UpdateProductRequestBodyVatModeEnum string

const (
	UpdateProductRequestBodyVatModeEnumGross UpdateProductRequestBodyVatModeEnum = "GROSS"
	UpdateProductRequestBodyVatModeEnumNet   UpdateProductRequestBodyVatModeEnum = "NET"
)

func (e *UpdateProductRequestBodyVatModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GROSS":
		fallthrough
	case "NET":
		*e = UpdateProductRequestBodyVatModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProductRequestBodyVatModeEnum: %s", s)
	}
}

type UpdateProductRequestBody struct {
	// If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses.
	Active *bool `form:"name=active"`
	// Product description.
	Description *string `form:"name=description"`
	// If set to 'true', non-existing Licensees will be created at first validation attempt.
	LicenseeAutoCreate *bool `form:"name=licenseeAutoCreate"`
	// Licensing information.
	LicensingInfo *string `form:"name=licensingInfo"`
	// Product name. Together with the version identifies the Product for the end customer.
	Name *string `form:"name=name"`
	// New Product number (update)
	Number *string `form:"name=number"`
	// Vat mode for Product. Supported types: GROSS, NET
	VatMode *UpdateProductRequestBodyVatModeEnum `form:"name=vatMode"`
	// Product version. Convenience parameter, additional to the Product name.
	Version *string `form:"name=version"`
}

type UpdateProductRequest struct {
	PathParams UpdateProductPathParams
	Request    *UpdateProductRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	Security   UpdateProductSecurity
}

type UpdateProductResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful request
	Netlicensing *shared.Netlicensing
}
