"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Captions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_captions(self, request: operations.GetCaptionsRequest) -> operations.GetCaptionsResponse:
        r"""Get Captions
        Returns the caption output for a transcription job. We currently support SubRip (SRT) and Web Video Text Tracks (VTT) output.
        Caption output format can be specified in the `Accept` header. Returns SRT by default.
        ***
        Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete caption file. This is rare, but not impossible.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCaptionsRequest, base_url, '/jobs/{id}/captions', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetCaptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCaptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/x-subrip'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/vtt'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCaptions401ApplicationProblemPlusJSON])
                res.get_captions_401_application_problem_plus_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCaptions404ApplicationProblemPlusJSON])
                res.get_captions_404_application_problem_plus_json_object = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCaptions405ApplicationProblemPlusJSON])
                res.get_captions_405_application_problem_plus_json_object = out
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCaptions406ApplicationProblemPlusJSON])
                res.get_captions_406_application_problem_plus_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCaptions409ApplicationProblemPlusJSON])
                res.get_captions_409_application_problem_plus_json_object = out

        return res

    