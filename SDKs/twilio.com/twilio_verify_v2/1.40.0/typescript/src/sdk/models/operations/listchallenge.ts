/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListChallengeServerList = ["https://verify.twilio.com"] as const;

export class ListChallengeSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListChallengeRequest extends SpeakeasyBase {
  /**
   * The unique SID identifier of the Factor.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=FactorSid",
  })
  factorSid?: string;

  /**
   * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=Identity",
  })
  identity: string;

  /**
   * The desired sort order of the Challenges list. One of `asc` or `desc` for ascending and descending respectively. Defaults to `asc`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Order" })
  order?: shared.ChallengeEnumListOrdersEnum;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;

  /**
   * The unique SID identifier of the Service.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ServiceSid",
  })
  serviceSid: string;

  /**
   * The Status of the Challenges to fetch. One of `pending`, `expired`, `approved` or `denied`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Status",
  })
  status?: shared.ChallengeEnumChallengeStatusesEnum;
}

export class ListChallengeListChallengeResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "first_page_url" })
  firstPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_url" })
  nextPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_url" })
  previousPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * OK
 */
export class ListChallengeListChallengeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.VerifyV2ServiceEntityChallenge })
  @Expose({ name: "challenges" })
  @Type(() => shared.VerifyV2ServiceEntityChallenge)
  challenges?: shared.VerifyV2ServiceEntityChallenge[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ListChallengeListChallengeResponseMeta)
  meta?: ListChallengeListChallengeResponseMeta;
}

export class ListChallengeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listChallengeResponse?: ListChallengeListChallengeResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
