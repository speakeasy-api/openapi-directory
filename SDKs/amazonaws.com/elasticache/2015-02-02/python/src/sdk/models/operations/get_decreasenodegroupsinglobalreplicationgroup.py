"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETDecreaseNodeGroupsInGlobalReplicationGroupActionEnum(str, Enum):
    DECREASE_NODE_GROUPS_IN_GLOBAL_REPLICATION_GROUP = 'DecreaseNodeGroupsInGlobalReplicationGroup'

class GETDecreaseNodeGroupsInGlobalReplicationGroupVersionEnum(str, Enum):
    TWO_THOUSAND_AND_FIFTEEN_02_02 = '2015-02-02'


@dataclasses.dataclass
class GETDecreaseNodeGroupsInGlobalReplicationGroupRequest:
    
    action: GETDecreaseNodeGroupsInGlobalReplicationGroupActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    apply_immediately: bool = dataclasses.field(metadata={'query_param': { 'field_name': 'ApplyImmediately', 'style': 'form', 'explode': True }})
    r"""Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true."""  
    global_replication_group_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'GlobalReplicationGroupId', 'style': 'form', 'explode': True }})
    r"""The name of the Global datastore"""  
    node_group_count: int = dataclasses.field(metadata={'query_param': { 'field_name': 'NodeGroupCount', 'style': 'form', 'explode': True }})
    r"""The number of node groups (shards) that results from the modification of the shard configuration"""  
    version: GETDecreaseNodeGroupsInGlobalReplicationGroupVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    global_node_groups_to_remove: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'GlobalNodeGroupsToRemove', 'style': 'form', 'explode': True }})
    r"""If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster."""  
    global_node_groups_to_retain: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'GlobalNodeGroupsToRetain', 'style': 'form', 'explode': True }})
    r"""If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDecreaseNodeGroupsInGlobalReplicationGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    