"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETVersionLocationsFormatIncidentTypeEnum(str, Enum):
    r"""<p>Only incidents of specific type</p>"""
    CRASH = 'crash'
    HAZARD = 'hazard'
    THEFT = 'theft'
    UNCONFIRMED = 'unconfirmed'
    INFRASTRUCTURE_ISSUE = 'infrastructure_issue'
    CHOP_SHOP = 'chop_shop'


@dataclasses.dataclass
class GETVersionLocationsFormatRequest:
    
    all: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'all', 'style': 'form', 'explode': True }})
    r"""<p>Give â€˜em all to me. Will ignore limit</p>"""  
    incident_type: Optional[GETVersionLocationsFormatIncidentTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'incident_type', 'style': 'form', 'explode': True }})
    r"""<p>Only incidents of specific type</p>"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""<p>Max number of results to return. Defaults to 100</p>"""  
    occurred_after: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurred_after', 'style': 'form', 'explode': True }})
    r"""<p>Start of period</p>"""  
    occurred_before: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurred_before', 'style': 'form', 'explode': True }})
    r"""<p>End of period</p>"""  
    proximity: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'proximity', 'style': 'form', 'explode': True }})
    r"""<p>Center of location for proximity search</p>"""  
    proximity_square: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'proximity_square', 'style': 'form', 'explode': True }})
    r"""<p>Size of the proximity search</p>"""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""<p>Full text search of incidents</p>"""  
    

@dataclasses.dataclass
class GETVersionLocationsFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    