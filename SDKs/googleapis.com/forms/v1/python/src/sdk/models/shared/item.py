"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import imageitem as shared_imageitem
from ..shared import questiongroupitem as shared_questiongroupitem
from ..shared import questionitem as shared_questionitem
from ..shared import videoitem as shared_videoitem
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Item:
    r"""A single item of the form. `kind` defines which kind of item it is."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the item."""  
    image_item: Optional[shared_imageitem.ImageItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageItem'), 'exclude': lambda f: f is None }})
    r"""An item containing an image."""  
    item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId'), 'exclude': lambda f: f is None }})
    r"""The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned."""  
    page_break_item: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageBreakItem'), 'exclude': lambda f: f is None }})
    r"""A page break. The title and description of this item are shown at the top of the new page."""  
    question_group_item: Optional[shared_questiongroupitem.QuestionGroupItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionGroupItem'), 'exclude': lambda f: f is None }})
    r"""Defines a question that comprises multiple questions grouped together."""  
    question_item: Optional[shared_questionitem.QuestionItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionItem'), 'exclude': lambda f: f is None }})
    r"""A form item containing a single question."""  
    text_item: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textItem'), 'exclude': lambda f: f is None }})
    r"""A text item."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the item."""  
    video_item: Optional[shared_videoitem.VideoItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoItem'), 'exclude': lambda f: f is None }})
    r"""An item containing a video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemInput:
    r"""A single item of the form. `kind` defines which kind of item it is."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the item."""  
    image_item: Optional[shared_imageitem.ImageItemInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageItem'), 'exclude': lambda f: f is None }})
    r"""An item containing an image."""  
    item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId'), 'exclude': lambda f: f is None }})
    r"""The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned."""  
    page_break_item: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageBreakItem'), 'exclude': lambda f: f is None }})
    r"""A page break. The title and description of this item are shown at the top of the new page."""  
    question_group_item: Optional[shared_questiongroupitem.QuestionGroupItemInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionGroupItem'), 'exclude': lambda f: f is None }})
    r"""Defines a question that comprises multiple questions grouped together."""  
    question_item: Optional[shared_questionitem.QuestionItemInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionItem'), 'exclude': lambda f: f is None }})
    r"""A form item containing a single question."""  
    text_item: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textItem'), 'exclude': lambda f: f is None }})
    r"""A text item."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the item."""  
    video_item: Optional[shared_videoitem.VideoItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoItem'), 'exclude': lambda f: f is None }})
    r"""An item containing a video."""  
    