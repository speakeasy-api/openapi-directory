"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Services:
    r"""Everything about Otoroshi service descriptors"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_services(self) -> operations.AllServicesResponse:
        r"""Get all services
        Get all services
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/services'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllServicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Service]])
                res.services = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_service(self, request: shared.Service, security: operations.CreateServiceSecurity) -> operations.CreateServiceResponse:
        r"""Create a new service descriptor
        Create a new service descriptor
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/services'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_service_template(self, request: operations.CreateServiceTemplateRequest, security: operations.CreateServiceTemplateSecurity) -> operations.CreateServiceTemplateResponse:
        r"""Create a service descriptor error template
        Update a service descriptor targets
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateServiceTemplateRequest, base_url, '/api/services/{serviceId}/template', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "error_template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateServiceTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorTemplate])
                res.error_template = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_service(self, request: operations.DeleteServiceRequest, security: operations.DeleteServiceSecurity) -> operations.DeleteServiceResponse:
        r"""Delete a service descriptor
        Delete a service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteServiceRequest, base_url, '/api/services/{serviceId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_service_template(self, request: operations.DeleteServiceTemplateRequest, security: operations.DeleteServiceTemplateSecurity) -> operations.DeleteServiceTemplateResponse:
        r"""Delete a service descriptor error template
        Delete a service descriptor error template
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteServiceTemplateRequest, base_url, '/api/services/{serviceId}/template', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteServiceTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_service(self, request: operations.PatchServiceRequest, security: operations.PatchServiceSecurity) -> operations.PatchServiceResponse:
        r"""Update a service descriptor with a diff
        Update a service descriptor with a diff
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchServiceRequest, base_url, '/api/services/{serviceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def service(self, request: operations.ServiceRequest, security: operations.ServiceSecurity) -> operations.ServiceResponse:
        r"""Get a service descriptor
        Get a service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceRequest, base_url, '/api/services/{serviceId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def service_add_target(self, request: operations.ServiceAddTargetRequest, security: operations.ServiceAddTargetSecurity) -> operations.ServiceAddTargetResponse:
        r"""Add a target to a service descriptor
        Add a target to a service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceAddTargetRequest, base_url, '/api/services/{serviceId}/targets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "target", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceAddTargetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Target]])
                res.targets = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def service_delete_target(self, request: operations.ServiceDeleteTargetRequest, security: operations.ServiceDeleteTargetSecurity) -> operations.ServiceDeleteTargetResponse:
        r"""Delete a service descriptor target
        Delete a service descriptor target
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceDeleteTargetRequest, base_url, '/api/services/{serviceId}/targets', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceDeleteTargetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Target]])
                res.targets = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def service_group_services(self, request: operations.ServiceGroupServicesRequest, security: operations.ServiceGroupServicesSecurity) -> operations.ServiceGroupServicesResponse:
        r"""Get all services descriptor for a group
        Get all services descriptor for a group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceGroupServicesRequest, base_url, '/api/groups/{serviceGroupId}/services', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceGroupServicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.APIKey]])
                res.api_keys = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def service_targets(self, request: operations.ServiceTargetsRequest, security: operations.ServiceTargetsSecurity) -> operations.ServiceTargetsResponse:
        r"""Get a service descriptor targets
        Get a service descriptor targets
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceTargetsRequest, base_url, '/api/services/{serviceId}/targets', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceTargetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Target]])
                res.targets = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def service_template(self, request: operations.ServiceTemplateRequest, security: operations.ServiceTemplateSecurity) -> operations.ServiceTemplateResponse:
        r"""Get a service descriptor error template
        Get a service descriptor error template
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceTemplateRequest, base_url, '/api/services/{serviceId}/template', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorTemplate])
                res.error_template = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_service(self, request: operations.UpdateServiceRequest, security: operations.UpdateServiceSecurity) -> operations.UpdateServiceResponse:
        r"""Update a service descriptor
        Update a service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateServiceRequest, base_url, '/api/services/{serviceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_service_targets(self, request: operations.UpdateServiceTargetsRequest, security: operations.UpdateServiceTargetsSecurity) -> operations.UpdateServiceTargetsResponse:
        r"""Update a service descriptor targets
        Update a service descriptor targets
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateServiceTargetsRequest, base_url, '/api/services/{serviceId}/targets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateServiceTargetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Target]])
                res.targets = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_service_template(self, request: operations.UpdateServiceTemplateRequest, security: operations.UpdateServiceTemplateSecurity) -> operations.UpdateServiceTemplateResponse:
        r"""Update an error template to a service descriptor
        Update an error template to a service descriptor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateServiceTemplateRequest, base_url, '/api/services/{serviceId}/template', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "error_template", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateServiceTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorTemplate])
                res.error_template = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    