"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createaccesspolicyresponse as shared_createaccesspolicyresponse
from ..shared import groupidentity as shared_groupidentity
from ..shared import iamroleidentity as shared_iamroleidentity
from ..shared import iamuseridentity as shared_iamuseridentity
from ..shared import portalresource as shared_portalresource
from ..shared import projectresource as shared_projectresource
from ..shared import useridentity as shared_useridentity
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAccessPolicyRequestBodyAccessPolicyIdentity:
    r"""<p>Contains an identity that can access an IoT SiteWise Monitor resource.</p> <note> <p>Currently, you can't use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the <a href=\\"https://console.aws.amazon.com/singlesignon\\">IAM Identity Center console</a>.</p> </note>"""
    
    group: Optional[shared_groupidentity.GroupIdentity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})  
    iam_role: Optional[shared_iamroleidentity.IAMRoleIdentity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iamRole'), 'exclude': lambda f: f is None }})  
    iam_user: Optional[shared_iamuseridentity.IAMUserIdentity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iamUser'), 'exclude': lambda f: f is None }})  
    user: Optional[shared_useridentity.UserIdentity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    
class CreateAccessPolicyRequestBodyAccessPolicyPermissionEnum(str, Enum):
    r"""The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner."""
    ADMINISTRATOR = 'ADMINISTRATOR'
    VIEWER = 'VIEWER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAccessPolicyRequestBodyAccessPolicyResource:
    r"""Contains an IoT SiteWise Monitor resource ID for a portal or project."""
    
    portal: Optional[shared_portalresource.PortalResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portal'), 'exclude': lambda f: f is None }})  
    project: Optional[shared_projectresource.ProjectResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAccessPolicyRequestBody:
    
    access_policy_identity: CreateAccessPolicyRequestBodyAccessPolicyIdentity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPolicyIdentity') }})
    r"""<p>Contains an identity that can access an IoT SiteWise Monitor resource.</p> <note> <p>Currently, you can't use Amazon Web Services APIs to retrieve IAM Identity Center identity IDs. You can find the IAM Identity Center identity IDs in the URL of user and group pages in the <a href=\\"https://console.aws.amazon.com/singlesignon\\">IAM Identity Center console</a>.</p> </note>"""  
    access_policy_permission: CreateAccessPolicyRequestBodyAccessPolicyPermissionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPolicyPermission') }})
    r"""The permission level for this access policy. Note that a project <code>ADMINISTRATOR</code> is also known as a project owner."""  
    access_policy_resource: CreateAccessPolicyRequestBodyAccessPolicyResource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPolicyResource') }})
    r"""Contains an IoT SiteWise Monitor resource ID for a portal or project."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of key-value pairs that contain metadata for the access policy. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>."""  
    

@dataclasses.dataclass
class CreateAccessPolicyRequest:
    
    request_body: CreateAccessPolicyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateAccessPolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_access_policy_response: Optional[shared_createaccesspolicyresponse.CreateAccessPolicyResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    