// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetAlbumVideosAlt1PathParams struct {
	// The ID of the album.
	AlbumID float64 `pathParam:"style=simple,explode=false,name=album_id"`
}

// GetAlbumVideosAlt1DirectionEnum - The sort direction of the results.
type GetAlbumVideosAlt1DirectionEnum string

const (
	GetAlbumVideosAlt1DirectionEnumAsc  GetAlbumVideosAlt1DirectionEnum = "asc"
	GetAlbumVideosAlt1DirectionEnumDesc GetAlbumVideosAlt1DirectionEnum = "desc"
)

func (e *GetAlbumVideosAlt1DirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAlbumVideosAlt1DirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAlbumVideosAlt1DirectionEnum: %s", s)
	}
}

// GetAlbumVideosAlt1FilterEnum - The attribute by which to filter the results.
type GetAlbumVideosAlt1FilterEnum string

const (
	GetAlbumVideosAlt1FilterEnumEmbeddable GetAlbumVideosAlt1FilterEnum = "embeddable"
)

func (e *GetAlbumVideosAlt1FilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "embeddable":
		*e = GetAlbumVideosAlt1FilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAlbumVideosAlt1FilterEnum: %s", s)
	}
}

// GetAlbumVideosAlt1SortEnum - The way to sort the results.
type GetAlbumVideosAlt1SortEnum string

const (
	GetAlbumVideosAlt1SortEnumAlphabetical GetAlbumVideosAlt1SortEnum = "alphabetical"
	GetAlbumVideosAlt1SortEnumComments     GetAlbumVideosAlt1SortEnum = "comments"
	GetAlbumVideosAlt1SortEnumDate         GetAlbumVideosAlt1SortEnum = "date"
	GetAlbumVideosAlt1SortEnumDefault      GetAlbumVideosAlt1SortEnum = "default"
	GetAlbumVideosAlt1SortEnumDuration     GetAlbumVideosAlt1SortEnum = "duration"
	GetAlbumVideosAlt1SortEnumLikes        GetAlbumVideosAlt1SortEnum = "likes"
	GetAlbumVideosAlt1SortEnumManual       GetAlbumVideosAlt1SortEnum = "manual"
	GetAlbumVideosAlt1SortEnumModifiedTime GetAlbumVideosAlt1SortEnum = "modified_time"
	GetAlbumVideosAlt1SortEnumPlays        GetAlbumVideosAlt1SortEnum = "plays"
)

func (e *GetAlbumVideosAlt1SortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alphabetical":
		fallthrough
	case "comments":
		fallthrough
	case "date":
		fallthrough
	case "default":
		fallthrough
	case "duration":
		fallthrough
	case "likes":
		fallthrough
	case "manual":
		fallthrough
	case "modified_time":
		fallthrough
	case "plays":
		*e = GetAlbumVideosAlt1SortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAlbumVideosAlt1SortEnum: %s", s)
	}
}

type GetAlbumVideosAlt1QueryParams struct {
	// The page containing the video URI.
	ContainingURI *string `queryParam:"style=form,explode=true,name=containing_uri"`
	// The sort direction of the results.
	Direction *GetAlbumVideosAlt1DirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The attribute by which to filter the results.
	Filter *GetAlbumVideosAlt1FilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
	FilterEmbeddable *bool `queryParam:"style=form,explode=true,name=filter_embeddable"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The password of the album.
	Password *string `queryParam:"style=form,explode=true,name=password"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// The search query to use to filter the results.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The way to sort the results.
	Sort *GetAlbumVideosAlt1SortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.
	WeakSearch *bool `queryParam:"style=form,explode=true,name=weak_search"`
}

type GetAlbumVideosAlt1Request struct {
	PathParams  GetAlbumVideosAlt1PathParams
	QueryParams GetAlbumVideosAlt1QueryParams
}

type GetAlbumVideosAlt1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// No such album exists.
	LegacyError *shared.LegacyError
	// The videos were returned.
	Videos []shared.Video
}
