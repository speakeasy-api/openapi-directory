<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Nodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Signs a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceResponse
     */
	public function sasportalNodesDevicesSignDevice(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:signDevice', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalSignDeviceRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesSignDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a signed device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedResponse
     */
	public function sasportalNodesDevicesUpdateSigned(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:updateSigned', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalUpdateSignedDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesDevicesUpdateSignedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteResponse
     */
	public function sasportalNodesNodesDelete(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateResponse
     */
	public function sasportalNodesNodesDeploymentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/deployments', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalDeploymentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists deployments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListResponse
     */
	public function sasportalNodesNodesDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/deployments', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalListDeploymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalListDeploymentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a device under a node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateResponse
     */
	public function sasportalNodesNodesDevicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/devices', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalDeviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a signed device under a node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedResponse
     */
	public function sasportalNodesNodesDevicesCreateSigned(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/devices:createSigned', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalCreateSignedDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesCreateSignedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists devices under a node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListResponse
     */
	public function sasportalNodesNodesDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/devices', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalListDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalListDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a requested node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetResponse
     */
	public function sasportalNodesNodesGet(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalNode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalNode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a node under another node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveResponse
     */
	public function sasportalNodesNodesMove(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:move', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalMoveNodeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesMoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateResponse
     */
	public function sasportalNodesNodesNodesCreate(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/nodes', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalNode", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalNode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalNode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists nodes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListResponse
     */
	public function sasportalNodesNodesNodesList(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/nodes', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesNodesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalListNodesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalListNodesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchResponse
     */
	public function sasportalNodesNodesPatch(
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalNode", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SasportalNodesNodesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalNode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalNode', 'json');
            }
        }

        return $response;
    }
}