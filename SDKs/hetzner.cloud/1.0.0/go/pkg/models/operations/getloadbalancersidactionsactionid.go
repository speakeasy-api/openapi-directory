// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetLoadBalancersIDActionsActionIDRequest struct {
	// ID of the Action
	ActionID int64 `pathParam:"style=simple,explode=false,name=action_id"`
	// ID of the Load Balancer
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// GetLoadBalancersIDActionsActionIDActionResponseActionError - Error message for the Action if error occurred, otherwise null
type GetLoadBalancersIDActionsActionIDActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type GetLoadBalancersIDActionsActionIDActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum - Status of the Action
type GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum string

const (
	GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnumSuccess GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum = "success"
	GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnumRunning GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum = "running"
	GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnumError   GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum = "error"
)

func (e GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum) ToPointer() *GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum {
	return &e
}

func (e *GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum: %v", v)
	}
}

type GetLoadBalancersIDActionsActionIDActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error GetLoadBalancersIDActionsActionIDActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []GetLoadBalancersIDActionsActionIDActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status GetLoadBalancersIDActionsActionIDActionResponseActionStatusEnum `json:"status"`
}

// GetLoadBalancersIDActionsActionIDActionResponse - The `action` key contains the Load Balancer Action
type GetLoadBalancersIDActionsActionIDActionResponse struct {
	Action GetLoadBalancersIDActionsActionIDActionResponseAction `json:"action"`
}

type GetLoadBalancersIDActionsActionIDResponse struct {
	// The `action` key contains the Load Balancer Action
	ActionResponse *GetLoadBalancersIDActionsActionIDActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
