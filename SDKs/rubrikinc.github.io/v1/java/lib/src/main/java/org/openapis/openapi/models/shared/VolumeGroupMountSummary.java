/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VolumeGroupMountSummary - Returns detail information for a specified live mount.
 */
public class VolumeGroupMountSummary {
    /**
     * Indicates if the logged-in user has the authority to remove the specified mount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canUnmount")
    public Boolean canUnmount;

    public VolumeGroupMountSummary withCanUnmount(Boolean canUnmount) {
        this.canUnmount = canUnmount;
        return this;
    }
    
    /**
     * The unique ID of the mount.
     */
    @JsonProperty("id")
    public String id;

    public VolumeGroupMountSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Specifies whether the volume mount operation has successfully completed and is ready to use.
     */
    @JsonProperty("isReady")
    public Boolean isReady;

    public VolumeGroupMountSummary withIsReady(Boolean isReady) {
        this.isReady = isReady;
        return this;
    }
    
    /**
     * The ID of the job instance that initiated the request for the specified mount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mountRequestId")
    public String mountRequestId;

    public VolumeGroupMountSummary withMountRequestId(String mountRequestId) {
        this.mountRequestId = mountRequestId;
        return this;
    }
    
    /**
     * The UTC timestamp at which the mount was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("mountedDate")
    public OffsetDateTime mountedDate;

    public VolumeGroupMountSummary withMountedDate(OffsetDateTime mountedDate) {
        this.mountedDate = mountedDate;
        return this;
    }
    
    /**
     * Configuration details for each of the mounted Volumes in the Volume Group.
     */
    @JsonProperty("mountedVolumes")
    public VolumeMountInfo[] mountedVolumes;

    public VolumeGroupMountSummary withMountedVolumes(VolumeMountInfo[] mountedVolumes) {
        this.mountedVolumes = mountedVolumes;
        return this;
    }
    
    /**
     * The name of the Volume Group.
     */
    @JsonProperty("name")
    public String name;

    public VolumeGroupMountSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The link to the script that can perform bare-metal recovery for the mounted snapshot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restoreScriptSmbPath")
    public String restoreScriptSmbPath;

    public VolumeGroupMountSummary withRestoreScriptSmbPath(String restoreScriptSmbPath) {
        this.restoreScriptSmbPath = restoreScriptSmbPath;
        return this;
    }
    
    /**
     * The UTC timestamp at which the snapshot was originally taken.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("snapshotDate")
    public OffsetDateTime snapshotDate;

    public VolumeGroupMountSummary withSnapshotDate(OffsetDateTime snapshotDate) {
        this.snapshotDate = snapshotDate;
        return this;
    }
    
    /**
     * Rubrik release version that supports volume group snappable.
     */
    @JsonProperty("snapshotSourceVersion")
    public VolumeGroupReleaseVersionEnum snapshotSourceVersion;

    public VolumeGroupMountSummary withSnapshotSourceVersion(VolumeGroupReleaseVersionEnum snapshotSourceVersion) {
        this.snapshotSourceVersion = snapshotSourceVersion;
        return this;
    }
    
    /**
     * The ID of the Host on which the snapshot was originally taken.
     */
    @JsonProperty("sourceHostId")
    public String sourceHostId;

    public VolumeGroupMountSummary withSourceHostId(String sourceHostId) {
        this.sourceHostId = sourceHostId;
        return this;
    }
    
    /**
     * The name of the Host on which the snapshot was originally taken.
     */
    @JsonProperty("sourceHostName")
    public String sourceHostName;

    public VolumeGroupMountSummary withSourceHostName(String sourceHostName) {
        this.sourceHostName = sourceHostName;
        return this;
    }
    
    /**
     * The ID of the Volume Group from which this snapshot was created.
     */
    @JsonProperty("sourceVolumeGroupId")
    public String sourceVolumeGroupId;

    public VolumeGroupMountSummary withSourceVolumeGroupId(String sourceVolumeGroupId) {
        this.sourceVolumeGroupId = sourceVolumeGroupId;
        return this;
    }
    
    /**
     * The ID of the host where the volumes are mounted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetHostId")
    public String targetHostId;

    public VolumeGroupMountSummary withTargetHostId(String targetHostId) {
        this.targetHostId = targetHostId;
        return this;
    }
    
    /**
     * The name of the host where the volumes are mounted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetHostName")
    public String targetHostName;

    public VolumeGroupMountSummary withTargetHostName(String targetHostName) {
        this.targetHostName = targetHostName;
        return this;
    }
    
    /**
     * The ID of the job instance that initiated the request to remove the specified mount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmountRequestId")
    public String unmountRequestId;

    public VolumeGroupMountSummary withUnmountRequestId(String unmountRequestId) {
        this.unmountRequestId = unmountRequestId;
        return this;
    }
    
    public VolumeGroupMountSummary(@JsonProperty("id") String id, @JsonProperty("isReady") Boolean isReady, @JsonProperty("mountedDate") OffsetDateTime mountedDate, @JsonProperty("mountedVolumes") VolumeMountInfo[] mountedVolumes, @JsonProperty("name") String name, @JsonProperty("snapshotDate") OffsetDateTime snapshotDate, @JsonProperty("snapshotSourceVersion") VolumeGroupReleaseVersionEnum snapshotSourceVersion, @JsonProperty("sourceHostId") String sourceHostId, @JsonProperty("sourceHostName") String sourceHostName, @JsonProperty("sourceVolumeGroupId") String sourceVolumeGroupId) {
        this.id = id;
        this.isReady = isReady;
        this.mountedDate = mountedDate;
        this.mountedVolumes = mountedVolumes;
        this.name = name;
        this.snapshotDate = snapshotDate;
        this.snapshotSourceVersion = snapshotSourceVersion;
        this.sourceHostId = sourceHostId;
        this.sourceHostName = sourceHostName;
        this.sourceVolumeGroupId = sourceVolumeGroupId;
  }
}
