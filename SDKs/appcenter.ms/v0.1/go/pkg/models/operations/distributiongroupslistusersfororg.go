// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DistributionGroupsListUsersForOrgSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type DistributionGroupsListUsersForOrgPathParams struct {
	// The name of the distribution group
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type DistributionGroupsListUsersForOrgRequest struct {
	PathParams DistributionGroupsListUsersForOrgPathParams
	Security   DistributionGroupsListUsersForOrgSecurity
}

type DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DistributionGroupsListUsersForOrgDefaultApplicationJSONError struct {
	Code    DistributionGroupsListUsersForOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                               `json:"message"`
}

// DistributionGroupsListUsersForOrgDefaultApplicationJSON - Error
type DistributionGroupsListUsersForOrgDefaultApplicationJSON struct {
	Error DistributionGroupsListUsersForOrgDefaultApplicationJSONError `json:"error"`
}

type DistributionGroupsListUsersForOrg200ApplicationJSON struct {
	// The avatar URL of the user
	AvatarURL *string `json:"avatar_url,omitempty"`
	// User is required to send an old password in order to change the password.
	CanChangePassword *bool `json:"can_change_password,omitempty"`
	// The full name of the user. Might for example be first and last name
	DisplayName *string `json:"display_name,omitempty"`
	// The email address of the user
	Email string `json:"email"`
	// The unique id (UUID) of the user
	ID *string `json:"id,omitempty"`
	// Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
	InvitePending *bool `json:"invite_pending,omitempty"`
	// The unique name that is used to identify the user.
	Name *string `json:"name,omitempty"`
}

type DistributionGroupsListUsersForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsListUsersForOrg200ApplicationJSONObjects []DistributionGroupsListUsersForOrg200ApplicationJSON
	// Error
	DistributionGroupsListUsersForOrgDefaultApplicationJSONObject *DistributionGroupsListUsersForOrgDefaultApplicationJSON
}
