// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsGetTeamsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppsGetTeamsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AppsGetTeamsDefaultApplicationJSONErrorCodeEnum string

const (
	AppsGetTeamsDefaultApplicationJSONErrorCodeEnumBadRequest          AppsGetTeamsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsGetTeamsDefaultApplicationJSONErrorCodeEnumConflict            AppsGetTeamsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsGetTeamsDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsGetTeamsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsGetTeamsDefaultApplicationJSONErrorCodeEnumNotFound            AppsGetTeamsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsGetTeamsDefaultApplicationJSONErrorCodeEnumInternalServerError AppsGetTeamsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsGetTeamsDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsGetTeamsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsGetTeamsDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsGetTeamsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppsGetTeamsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppsGetTeamsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppsGetTeamsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsGetTeamsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetTeamsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppsGetTeamsDefaultApplicationJSONError struct {
	Code    AppsGetTeamsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                          `json:"message"`
}

// AppsGetTeamsDefaultApplicationJSON - Error
type AppsGetTeamsDefaultApplicationJSON struct {
	Error AppsGetTeamsDefaultApplicationJSONError `json:"error"`
}

type AppsGetTeams200ApplicationJSONPermissionsEnum string

const (
	AppsGetTeams200ApplicationJSONPermissionsEnumManager   AppsGetTeams200ApplicationJSONPermissionsEnum = "manager"
	AppsGetTeams200ApplicationJSONPermissionsEnumDeveloper AppsGetTeams200ApplicationJSONPermissionsEnum = "developer"
	AppsGetTeams200ApplicationJSONPermissionsEnumViewer    AppsGetTeams200ApplicationJSONPermissionsEnum = "viewer"
	AppsGetTeams200ApplicationJSONPermissionsEnumTester    AppsGetTeams200ApplicationJSONPermissionsEnum = "tester"
)

func (e AppsGetTeams200ApplicationJSONPermissionsEnum) ToPointer() *AppsGetTeams200ApplicationJSONPermissionsEnum {
	return &e
}

func (e *AppsGetTeams200ApplicationJSONPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsGetTeams200ApplicationJSONPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetTeams200ApplicationJSONPermissionsEnum: %v", v)
	}
}

type AppsGetTeams200ApplicationJSON struct {
	// The description of the team
	Description *string `json:"description,omitempty"`
	// The display name of the team
	DisplayName string `json:"display_name"`
	// The internal unique id (UUID) of the team.
	ID string `json:"id"`
	// The name of the team
	Name string `json:"name"`
	// The permissions the team has for the app
	Permissions []AppsGetTeams200ApplicationJSONPermissionsEnum `json:"permissions,omitempty"`
}

type AppsGetTeamsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsGetTeams200ApplicationJSONAnies []AppsGetTeams200ApplicationJSON
	// Error
	AppsGetTeamsDefaultApplicationJSONObject *AppsGetTeamsDefaultApplicationJSON
}
