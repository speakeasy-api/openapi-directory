// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OBWriteDomesticStandingOrderResponse6DataCharges - Set of elements used to provide details of a charge for the payment initiation.
type OBWriteDomesticStandingOrderResponse6DataCharges struct {
	// Amount of money associated with the charge type.
	Amount OBActiveOrHistoricCurrencyAndAmount `json:"Amount"`
	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer OBChargeBearerType1CodeEnum `json:"ChargeBearer"`
	// Charge type, in a coded form.
	Type string `json:"Type"`
}

// OBWriteDomesticStandingOrderResponse6DataInitiationCreditorAccount - Identification assigned by an institution to identify an account. This identification is known by the account owner.
type OBWriteDomesticStandingOrderResponse6DataInitiationCreditorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level.
	// Note, the account name is not the product name or the nickname of the account.
	// OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
	Name string `json:"Name"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteDomesticStandingOrderResponse6DataInitiationDebtorAccount - Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
type OBWriteDomesticStandingOrderResponse6DataInitiationDebtorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
	// Note, the account name is not the product name or the nickname of the account.
	Name *string `json:"Name,omitempty"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteDomesticStandingOrderResponse6DataInitiationFinalPaymentAmount - The amount of the final Standing Order
type OBWriteDomesticStandingOrderResponse6DataInitiationFinalPaymentAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteDomesticStandingOrderResponse6DataInitiationFirstPaymentAmount - The amount of the first Standing Order
type OBWriteDomesticStandingOrderResponse6DataInitiationFirstPaymentAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteDomesticStandingOrderResponse6DataInitiationRecurringPaymentAmount - The amount of the recurring Standing Order
type OBWriteDomesticStandingOrderResponse6DataInitiationRecurringPaymentAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteDomesticStandingOrderResponse6DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
type OBWriteDomesticStandingOrderResponse6DataInitiation struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	CreditorAccount OBWriteDomesticStandingOrderResponse6DataInitiationCreditorAccount `json:"CreditorAccount"`
	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *OBWriteDomesticStandingOrderResponse6DataInitiationDebtorAccount `json:"DebtorAccount,omitempty"`
	// The amount of the final Standing Order
	FinalPaymentAmount *OBWriteDomesticStandingOrderResponse6DataInitiationFinalPaymentAmount `json:"FinalPaymentAmount,omitempty"`
	// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	FinalPaymentDateTime *time.Time `json:"FinalPaymentDateTime,omitempty"`
	// The amount of the first Standing Order
	FirstPaymentAmount OBWriteDomesticStandingOrderResponse6DataInitiationFirstPaymentAmount `json:"FirstPaymentAmount"`
	// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	FirstPaymentDateTime time.Time `json:"FirstPaymentDateTime"`
	// Individual Definitions:
	// EvryDay - Every day
	// EvryWorkgDay - Every working day
	// IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
	// WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
	// IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
	// QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED).
	// ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December.
	// SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
	// RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December.
	// Individual Patterns:
	// EvryDay (ScheduleCode)
	// EvryWorkgDay (ScheduleCode)
	// IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
	// WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
	// IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
	// QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
	// The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
	// EvryDay
	// EvryWorkgDay
	// IntrvlWkDay:0[1-9]:0[1-7]
	// WkInMnthDay:0[1-5]:0[1-7]
	// IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
	// QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
	// Full Regular Expression:
	// ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
	Frequency string `json:"Frequency"`
	// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
	NumberOfPayments *string `json:"NumberOfPayments,omitempty"`
	// The amount of the recurring Standing Order
	RecurringPaymentAmount *OBWriteDomesticStandingOrderResponse6DataInitiationRecurringPaymentAmount `json:"RecurringPaymentAmount,omitempty"`
	// The date on which the first recurring payment for a Standing Order schedule will be made.
	// Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	RecurringPaymentDateTime *time.Time `json:"RecurringPaymentDateTime,omitempty"`
	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
	// Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
	// If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
	Reference *string `json:"Reference,omitempty"`
	// Additional information that can not be captured in the structured fields and/or any other specific block.
	SupplementaryData map[string]interface{} `json:"SupplementaryData,omitempty"`
}

// OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum - Specifies the status of the authorisation flow in code form.
type OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum string

const (
	OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnumAuthorised                   OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum = "Authorised"
	OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnumAwaitingFurtherAuthorisation OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum = "AwaitingFurtherAuthorisation"
	OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnumRejected                     OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum = "Rejected"
)

func (e *OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authorised":
		fallthrough
	case "AwaitingFurtherAuthorisation":
		fallthrough
	case "Rejected":
		*e = OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum: %s", s)
	}
}

// OBWriteDomesticStandingOrderResponse6DataMultiAuthorisation - The multiple authorisation flow response from the ASPSP.
type OBWriteDomesticStandingOrderResponse6DataMultiAuthorisation struct {
	// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	ExpirationDateTime *time.Time `json:"ExpirationDateTime,omitempty"`
	// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	LastUpdateDateTime *time.Time `json:"LastUpdateDateTime,omitempty"`
	// Number of authorisations received.
	NumberReceived *int64 `json:"NumberReceived,omitempty"`
	// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
	NumberRequired *int64 `json:"NumberRequired,omitempty"`
	// Specifies the status of the authorisation flow in code form.
	Status OBWriteDomesticStandingOrderResponse6DataMultiAuthorisationStatusEnum `json:"Status"`
}

// OBWriteDomesticStandingOrderResponse6DataRefundAccount - Provides the details to identify an account.
type OBWriteDomesticStandingOrderResponse6DataRefundAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// Name of the account, as assigned by the account servicing institution.
	// Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
	// OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
	Name string `json:"Name"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteDomesticStandingOrderResponse6DataRefund - Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
type OBWriteDomesticStandingOrderResponse6DataRefund struct {
	// Provides the details to identify an account.
	Account OBWriteDomesticStandingOrderResponse6DataRefundAccount `json:"Account"`
}

// OBWriteDomesticStandingOrderResponse6DataStatusEnum - Specifies the status of the payment order resource.
type OBWriteDomesticStandingOrderResponse6DataStatusEnum string

const (
	OBWriteDomesticStandingOrderResponse6DataStatusEnumCancelled           OBWriteDomesticStandingOrderResponse6DataStatusEnum = "Cancelled"
	OBWriteDomesticStandingOrderResponse6DataStatusEnumInitiationCompleted OBWriteDomesticStandingOrderResponse6DataStatusEnum = "InitiationCompleted"
	OBWriteDomesticStandingOrderResponse6DataStatusEnumInitiationFailed    OBWriteDomesticStandingOrderResponse6DataStatusEnum = "InitiationFailed"
	OBWriteDomesticStandingOrderResponse6DataStatusEnumInitiationPending   OBWriteDomesticStandingOrderResponse6DataStatusEnum = "InitiationPending"
)

func (e *OBWriteDomesticStandingOrderResponse6DataStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Cancelled":
		fallthrough
	case "InitiationCompleted":
		fallthrough
	case "InitiationFailed":
		fallthrough
	case "InitiationPending":
		*e = OBWriteDomesticStandingOrderResponse6DataStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticStandingOrderResponse6DataStatusEnum: %s", s)
	}
}

type OBWriteDomesticStandingOrderResponse6Data struct {
	Charges []OBWriteDomesticStandingOrderResponse6DataCharges `json:"Charges,omitempty"`
	// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
	ConsentID string `json:"ConsentId"`
	// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CreationDateTime time.Time `json:"CreationDateTime"`
	// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
	Debtor *OBCashAccountDebtor4 `json:"Debtor,omitempty"`
	// OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic standing order resource.
	DomesticStandingOrderID string `json:"DomesticStandingOrderId"`
	// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
	Initiation OBWriteDomesticStandingOrderResponse6DataInitiation `json:"Initiation"`
	// The multiple authorisation flow response from the ASPSP.
	MultiAuthorisation *OBWriteDomesticStandingOrderResponse6DataMultiAuthorisation `json:"MultiAuthorisation,omitempty"`
	// Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
	Refund *OBWriteDomesticStandingOrderResponse6DataRefund `json:"Refund,omitempty"`
	// Specifies the status of the payment order resource.
	Status OBWriteDomesticStandingOrderResponse6DataStatusEnum `json:"Status"`
	// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	StatusUpdateDateTime time.Time `json:"StatusUpdateDateTime"`
}

// OBWriteDomesticStandingOrderResponse6 - Domestic Standing Orders Created
type OBWriteDomesticStandingOrderResponse6 struct {
	Data OBWriteDomesticStandingOrderResponse6Data `json:"Data"`
	// Links relevant to the payload
	Links *Links `json:"Links,omitempty"`
	// Meta Data relevant to the payload
	Meta *Meta `json:"Meta,omitempty"`
}
