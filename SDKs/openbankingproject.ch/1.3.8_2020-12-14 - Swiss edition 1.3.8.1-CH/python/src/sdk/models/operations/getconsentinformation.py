"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import consentinformationresponse_200_json as shared_consentinformationresponse_200_json
from ..shared import error400_ais as shared_error400_ais
from ..shared import error400_ng_ais as shared_error400_ng_ais
from ..shared import error401_ais as shared_error401_ais
from ..shared import error401_ng_ais as shared_error401_ng_ais
from ..shared import error403_ais as shared_error403_ais
from ..shared import error403_ng_ais as shared_error403_ng_ais
from ..shared import error404_ais as shared_error404_ais
from ..shared import error404_ng_ais as shared_error404_ng_ais
from ..shared import error405_ais as shared_error405_ais
from ..shared import error405_ng_ais as shared_error405_ng_ais
from ..shared import error406_ais as shared_error406_ais
from ..shared import error406_ng_ais as shared_error406_ng_ais
from ..shared import error409_ais as shared_error409_ais
from ..shared import error409_ng_ais as shared_error409_ng_ais
from ..shared import error429_ais as shared_error429_ais
from ..shared import error429_ng_ais as shared_error429_ng_ais
from ..shared import psu_http_method_enum as shared_psu_http_method_enum
from typing import Optional


@dataclasses.dataclass
class GetConsentInformationSecurity:
    
    bearer_auth_o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetConsentInformationRequest:
    
    consent_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'consentId', 'style': 'simple', 'explode': False }})
    r"""ID of the corresponding consent object as returned by an account information consent request."""  
    x_request_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""ID of the request, unique to the call, as determined by the initiating party."""  
    digest: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Digest', 'style': 'simple', 'explode': False }})
    r"""Is contained if and only if the \\"Signature\\" element is contained in the header of the request."""  
    psu_accept: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_charset: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Charset', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_encoding: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Encoding', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_language: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Language', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_device_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Device-ID', 'style': 'simple', 'explode': False }})
    r"""UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
    UUID identifies either a device or a device dependant application installation.
    In case of an installation identification this ID needs to be unaltered until removal from device.
    """  
    psu_geo_location: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Geo-Location', 'style': 'simple', 'explode': False }})
    r"""The forwarded Geo Location of the corresponding http request between PSU and TPP if available."""  
    psu_http_method: Optional[shared_psu_http_method_enum.PSUHTTPMethodEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Http-Method', 'style': 'simple', 'explode': False }})
    r"""HTTP method used at the PSU ? TPP interface, if available.
    Valid values are:
    * GET
    * POST
    * PUT
    * PATCH
    * DELETE
    """  
    psu_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Address', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Address header field consists of the corresponding HTTP request
    IP Address field between PSU and TPP.
    It shall be contained if and only if this request was actively initiated by the PSU.
    """  
    psu_ip_port: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Port', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available."""  
    psu_user_agent: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-User-Agent', 'style': 'simple', 'explode': False }})
    r"""The forwarded Agent header field of the HTTP request between PSU and TPP, if available."""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Signature', 'style': 'simple', 'explode': False }})
    r"""A signature of the request by the TPP on application level. This might be mandated by ASPSP."""  
    tpp_signature_certificate: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Signature-Certificate', 'style': 'simple', 'explode': False }})
    r"""The certificate used for signing the request, in base64 encoding.
    Must be contained if a signature is contained.
    """  
    

@dataclasses.dataclass
class GetConsentInformationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    consent_information_response_200_json: Optional[shared_consentinformationresponse_200_json.ConsentInformationResponse200JSON] = dataclasses.field(default=None)
    r"""OK"""  
    error400_ais: Optional[shared_error400_ais.Error400AIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error400_ng_ais: Optional[shared_error400_ng_ais.Error400NGAIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error401_ais: Optional[shared_error401_ais.Error401AIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error401_ng_ais: Optional[shared_error401_ng_ais.Error401NGAIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error403_ais: Optional[shared_error403_ais.Error403AIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error403_ng_ais: Optional[shared_error403_ng_ais.Error403NGAIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error404_ais: Optional[shared_error404_ais.Error404AIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error404_ng_ais: Optional[shared_error404_ng_ais.Error404NGAIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error405_ais: Optional[shared_error405_ais.Error405AIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error405_ng_ais: Optional[shared_error405_ng_ais.Error405NGAIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error406_ais: Optional[shared_error406_ais.Error406AIS] = dataclasses.field(default=None)
    r"""Not Acceptable"""  
    error406_ng_ais: Optional[shared_error406_ng_ais.Error406NGAIS] = dataclasses.field(default=None)
    r"""Not Acceptable"""  
    error409_ais: Optional[shared_error409_ais.Error409AIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error409_ng_ais: Optional[shared_error409_ng_ais.Error409NGAIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error429_ais: Optional[shared_error429_ais.Error429AIS] = dataclasses.field(default=None)
    r"""Too Many Requests"""  
    error429_ng_ais: Optional[shared_error429_ng_ais.Error429NGAIS] = dataclasses.field(default=None)
    r"""Too Many Requests"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    