"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customerreturnreason as shared_customerreturnreason
from ..shared import merchantrejectionreason as shared_merchantrejectionreason
from ..shared import monetaryamount as shared_monetaryamount
from ..shared import orderlineitemproduct as shared_orderlineitemproduct
from ..shared import refundreason as shared_refundreason
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MerchantOrderReturnItem:
    
    customer_return_reason: Optional[shared_customerreturnreason.CustomerReturnReason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerReturnReason'), 'exclude': lambda f: f is None }})  
    item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId'), 'exclude': lambda f: f is None }})
    r"""Product level item ID. If the returned items are of the same product, they will have the same ID."""  
    merchant_rejection_reason: Optional[shared_merchantrejectionreason.MerchantRejectionReason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantRejectionReason'), 'exclude': lambda f: f is None }})  
    merchant_return_reason: Optional[shared_refundreason.RefundReason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantReturnReason'), 'exclude': lambda f: f is None }})  
    product: Optional[shared_orderlineitemproduct.OrderLineItemProduct] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product'), 'exclude': lambda f: f is None }})  
    refundable_amount: Optional[shared_monetaryamount.MonetaryAmount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refundableAmount'), 'exclude': lambda f: f is None }})  
    return_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnItemId'), 'exclude': lambda f: f is None }})
    r"""Unit level ID for the return item. Different units of the same product will have different IDs."""  
    return_shipment_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnShipmentIds'), 'exclude': lambda f: f is None }})
    r"""IDs of the return shipments that this return item belongs to."""  
    shipment_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipmentGroupId'), 'exclude': lambda f: f is None }})
    r"""ID of the original shipment group. Provided for shipments with invoice support."""  
    shipment_unit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipmentUnitId'), 'exclude': lambda f: f is None }})
    r"""ID of the shipment unit assigned by the merchant. Provided for shipments with invoice support."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the item. Acceptable values are: - \\"`canceled`\\" - \\"`new`\\" - \\"`received`\\" - \\"`refunded`\\" - \\"`rejected`\\" """  
    