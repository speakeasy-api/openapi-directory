/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleMapsPlayablelocationsV3SampleFilter - Specifies the filters to use when searching for playable locations.
 */
public class GoogleMapsPlayablelocationsV3SampleFilter {
    /**
     * Restricts the set of playable locations to just the [types](/maps/documentation/gaming/tt/types) that you want.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includedTypes")
    public String[] includedTypes;

    public GoogleMapsPlayablelocationsV3SampleFilter withIncludedTypes(String[] includedTypes) {
        this.includedTypes = includedTypes;
        return this;
    }
    
    /**
     * Specifies the maximum number of playable locations to return. This value must not be greater than 1000. The default value is 100. Only the top-ranking playable locations are returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxLocationCount")
    public Integer maxLocationCount;

    public GoogleMapsPlayablelocationsV3SampleFilter withMaxLocationCount(Integer maxLocationCount) {
        this.maxLocationCount = maxLocationCount;
        return this;
    }
    
    /**
     * A set of options that specifies the separation between playable locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spacing")
    public GoogleMapsPlayablelocationsV3SampleSpacingOptions spacing;

    public GoogleMapsPlayablelocationsV3SampleFilter withSpacing(GoogleMapsPlayablelocationsV3SampleSpacingOptions spacing) {
        this.spacing = spacing;
        return this;
    }
    
    public GoogleMapsPlayablelocationsV3SampleFilter(){}
}
