"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FilterContextEnum(str, Enum):
    HOME = 'home'
    NOTIFICATIONS = 'notifications'
    PUBLIC = 'public'
    THREAD = 'thread'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filter:
    r"""Represents a user-defined filter for determining which statuses should not be shown to the user.
    https://docs.joinmastodon.org/entities/filter/
    """
    
    context: Optional[list[FilterContextEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""The contexts in which the filter should be applied."""  
    expires_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at'), 'exclude': lambda f: f is None }})
    r"""When the filter should no longer be applied. ISO 8601 Datetime, or null if the filter does not expire"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the filter in the database. Cast from an integer, but not guaranteed to be a number."""  
    irreversible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('irreversible'), 'exclude': lambda f: f is None }})
    r"""Should matching entities in home and notifications be dropped by the server?"""  
    phrase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phrase'), 'exclude': lambda f: f is None }})
    r"""The text to be filtered."""  
    whole_word: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whole_word'), 'exclude': lambda f: f is None }})
    r"""Should the filter consider word boundaries?"""  
    