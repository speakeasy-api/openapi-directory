"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Licensees:
    r"""The Licensee resource represents an alternate legal End User of our data who may not be same entity as the owners of the account.
    
    The concept of Licensees underpins our sublicensing platform, which allows users to license multiple external organisations or individuals to access data under the same account.
    
    Sublicensing is ideal for platform vendors, who provide services to multiple clients who in turn each have their own users.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_licensee(self, request: operations.CreateLicenseeRequest) -> operations.CreateLicenseeResponse:
        r"""Create
        Create a licensee for the specified API Key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateLicenseeRequest, base_url, '/keys/{key}/licensees', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "licensee_editable", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateLicenseeRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLicenseeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseeResponse])
                res.licensee_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def delete_licensee(self, request: operations.DeleteLicenseeRequest) -> operations.DeleteLicenseeResponse:
        r"""Cancel
        Cancels a licensee key. This renders a licensee unusable. This action can be reversed if you get in contact with us.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteLicenseeRequest, base_url, '/keys/{key}/licensees/{licensee}', request)
        
        query_params = utils.get_query_params(operations.DeleteLicenseeRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLicenseeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteLicenseeLicenseeDeleteResponse])
                res.licensee_delete_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def list_licensees(self, request: operations.ListLicenseesRequest) -> operations.ListLicenseesResponse:
        r"""List
        Returns a list of licensees for a key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListLicenseesRequest, base_url, '/keys/{key}/licensees', request)
        
        query_params = utils.get_query_params(operations.ListLicenseesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLicenseesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseesResponse])
                res.licensees_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def retrieve_licensee(self, request: operations.RetrieveLicenseeRequest) -> operations.RetrieveLicenseeResponse:
        r"""Retrieve
        Returns licensee information as identified by the licensee key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveLicenseeRequest, base_url, '/keys/{key}/licensees/{licensee}', request)
        
        query_params = utils.get_query_params(operations.RetrieveLicenseeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveLicenseeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseeResponse])
                res.licensee_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def update_licensee(self, request: operations.UpdateLicenseeRequest) -> operations.UpdateLicenseeResponse:
        r"""Update
        Update Licensee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateLicenseeRequest, base_url, '/keys/{key}/licensees/{licensee}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "licensee_editable", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdateLicenseeRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLicenseeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseeResponse])
                res.licensee_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    