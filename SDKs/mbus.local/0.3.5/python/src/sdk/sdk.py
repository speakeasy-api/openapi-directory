"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://mbus.local",
    "/",
]
"""Contains the list of servers available to the SDK"""

class SDK:

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get(self, request: operations.GetRequest) -> operations.GetResponse:
        r"""Gets data from the slave identified by {address}"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRequest, base_url, '/mbus/get/{device}/{baudrate}/{address}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/xml'):
                res.mbus_data = http_res.content
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'text/plain'):
                res.text_error = http_res.content

        return res

    def get_multi(self, request: operations.GetMultiRequest) -> operations.GetMultiResponse:
        r"""Gets data from the slave identified by {address}, and supports multiple responses from the slave"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMultiRequest, base_url, '/mbus/getMulti/{device}/{baudrate}/{address}/{maxframes}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMultiResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/xml'):
                res.mbus_data = http_res.content
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'text/plain'):
                res.text_error = http_res.content

        return res

    def hat(self) -> operations.HatResponse:
        r"""Gets Raspberry Pi Hat information"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mbus/hat'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Hat])
                res.hat = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'text/plain'):
                res.text_error = http_res.content

        return res

    def hat_off(self) -> operations.HatOffResponse:
        r"""Turns off power to the M-Bus"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mbus/hat/off'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HatOffResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'text/plain'):
                res.text_error = http_res.content

        return res

    def hat_on(self) -> operations.HatOnResponse:
        r"""Turns on power to the M-Bus"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mbus/hat/on'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HatOnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'text/plain'):
                res.text_error = http_res.content

        return res

    def mbus_api(self) -> operations.MbusAPIResponse:
        r"""Returns this API specification"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mbus/api'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MbusAPIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.yaml = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'text/plain'):
                res.text_error = http_res.content

        return res

    def scan(self, request: operations.ScanRequest) -> operations.ScanResponse:
        r"""Scan the specified device for slaves"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScanRequest, base_url, '/mbus/scan/{device}/{baudrate}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.slaves = http_res.content
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'text/plain'):
                res.text_error = http_res.content

        return res

    