// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceMuteResponseMessageEnum - Response message
type ConferenceMuteResponseMessageEnum string

const (
	ConferenceMuteResponseMessageEnumConferenceMuteExecuted                 ConferenceMuteResponseMessageEnum = "Conference Mute Executed"
	ConferenceMuteResponseMessageEnumConferenceNameParameterMustBePresent   ConferenceMuteResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferenceMuteResponseMessageEnumMemberIDParameterMustBePresent         ConferenceMuteResponseMessageEnum = "MemberID Parameter must be present"
	ConferenceMuteResponseMessageEnumConferenceMuteFailedConferenceNotFound ConferenceMuteResponseMessageEnum = "Conference Mute Failed -- Conference not found"
)

func (e ConferenceMuteResponseMessageEnum) ToPointer() *ConferenceMuteResponseMessageEnum {
	return &e
}

func (e *ConferenceMuteResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Conference Mute Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "MemberID Parameter must be present":
		fallthrough
	case "Conference Mute Failed -- Conference not found":
		*e = ConferenceMuteResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceMuteResponseMessageEnum: %v", v)
	}
}

// ConferenceMuteResponse - Response
type ConferenceMuteResponse struct {
	// List of affected members
	Members []string `json:"Members,omitempty"`
	// Response message
	Message ConferenceMuteResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
