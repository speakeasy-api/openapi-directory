// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://dev.api.chaingateway.io",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// SDK - This API allows you to interact with Ethereum, Binance smart chain, Polygon and Tron blockchain. If you ever looked for a possibility to automate token or payments this is the right place.
// You still have no idea for real use cases? Let me give you some examples: Accept your own token as payment method for your shop, distribute airdrop tokens of your ICO, convert your site currency to a token that can be traded on exchanges and many more.
// There are a lot of use cases which are not only limited to sending tokens but also receiving them. You could even create a secure wallet for your token which only the wallet owner has access to. Additionally we offer a lot of functions for retrieving blockchain data, including transactions. Using our webhook system, it is possible to receive notifications when events on the blockchain occur, for example when a transfer to a specific address is happening.
//
// # Registering
//
// To use this Blockchain API, you need to register for a free account on [Chaingateway.io](https://chaingateway.io)
//
// Once you have created your account, you can create an API key in your Account panel to use with our API.
//
// # Postman
//
// Postman is a great software to test APIs, it helped us a lot when developing this API. If you haven't installed it yet, we recommend to do so
//
// We have created a Postman collection that allows to import all functions and their settings, including descriptions in Postman. This way you can test all functions with the click of a button (just change the parameters before).
//
// # API Specifications
//
// For many API clients, websites and development projects you may need a file which specifies all function endpoints of our API. These files can be found in our [Github repository](https://github.com/chaingateway/api-specification), always updated in the formats "Postman Collection" and "OPENAPI/SWAGGER".
//
// # Authorization
//
// You can get your personal API Key from your account dashboard. It is used by us to determine who is accessing the API and to count the requests by that account. There are 2 possibilities to use it in your requests:
//
// # Add it in the HTTP header as
//
// `Authorization: q9PdaWuD4j6DK6vsUgehhL8pgarSrS9m`
//
// Please do not share your api key! If you did so by mistake, immediately regenerate it in your account panel!
type SDK struct {
	AddressRequests         *addressRequests
	AddressRequests1        *addressRequests1
	AddressRequests12       *addressRequests12
	AddressRequests123      *addressRequests123
	BinanceSmartChain       *binanceSmartChain
	Bitcoin                 *bitcoin
	Ethereum                *ethereum
	InfoRequests            *infoRequests
	InfoRequests1           *infoRequests1
	InfoRequests12          *infoRequests12
	InfoRequests123         *infoRequests123
	InfoRequests1234        *infoRequests1234
	Market                  *market
	Polygon                 *polygon
	TransactionRequests     *transactionRequests
	TransactionRequests1    *transactionRequests1
	TransactionRequests12   *transactionRequests12
	TransactionRequests123  *transactionRequests123
	TransactionRequests1234 *transactionRequests1234
	Tron                    *tron
	WalletRequests          *walletRequests
	// WebhooksIPNRequests - With webhooks, you can get notified about various events in the blockchain. E.g:
	//
	// Receipt of payment to a specific address
	// Outgoing payment from a specific address
	// Exchange of sats between two specific addresses
	// Execution of a contract
	// Change of ownership of a token
	//
	// For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
	//
	// from: Outgoing address
	// to: Incoming address
	// contract: Contract that should be monitored
	// tokenid: ID of a token that should be monitored.
	// type: Token type (\[ETH', 'ERC20', 'ERC721', null)
	//
	// Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
	//
	// ``` json
	// {
	//   "id": "63a1ae0887ca3625b82b4924",
	//   "webhook_id": "63a1ad0e87ca3625b82b4923",
	//   "from": "0x0000000000000000000000000000000000000000",
	//   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
	//   "blocknumber": "123",
	//   "datetime": "22-12-20 13:43:52",
	//   "tokenid": "0x0000000000000000000000000000000000000000",
	//   "type": null,
	//   "txid": "000000000000000000000000000000000000000000000000000",
	//   "amount": "000000000000000000000000000000000000000000000000000"
	// }
	//
	// ```
	WebhooksIPNRequests *webhooksIPNRequests
	// WebhooksIPNRequests1 - With webhooks, you can get notified about various events in the blockchain. E.g:
	//
	// Receipt of payment to a specific address
	// Outgoing payment from a specific address
	// Exchange of sats between two specific addresses
	// Execution of a contract
	// Change of ownership of a token
	//
	// For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
	//
	// from: Outgoing address
	// to: Incoming address
	// contract: Contract that should be monitored
	// tokenid: ID of a token that should be monitored.
	// type: Token type (\[ETH', 'ERC20', 'ERC721', null)
	//
	// Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
	//
	// ``` json
	// {
	//   "id": "63a1ae0887ca3625b82b4924",
	//   "webhook_id": "63a1ad0e87ca3625b82b4923",
	//   "from": "0x0000000000000000000000000000000000000000",
	//   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
	//   "blocknumber": "123",
	//   "datetime": "22-12-20 13:43:52",
	//   "tokenid": "0x0000000000000000000000000000000000000000",
	//   "type": null,
	//   "txid": "000000000000000000000000000000000000000000000000000",
	//   "amount": "000000000000000000000000000000000000000000000000000"
	// }
	//
	// ```
	WebhooksIPNRequests1 *webhooksIPNRequests1
	// WebhooksIPNRequests12 - With webhooks, you can get notified about various events in the blockchain. E.g:
	//
	// Receipt of payment to a specific address
	// Outgoing payment from a specific address
	// Exchange of sats between two specific addresses
	// Execution of a contract
	// Change of ownership of a token
	//
	// For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
	//
	// from: Outgoing address
	// to: Incoming address
	// contract: Contract that should be monitored
	// tokenid: ID of a token that should be monitored.
	// type: Token type (\[ETH', 'ERC20', 'ERC721', null)
	//
	// Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
	//
	// ``` json
	// {
	//  "id": "63a1ae0887ca3625b82b4924",
	//   "webhook_id": "63a1ad0e87ca3625b82b4923",
	//   "from": "0x0000000000000000000000000000000000000000",
	//   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
	//   "blocknumber": "123",
	//   "datetime": "22-12-20 13:43:52",
	//   "tokenid": "0x0000000000000000000000000000000000000000",
	//   "type": null,
	//   "txid": "000000000000000000000000000000000000000000000000000",
	//   "amount": "000000000000000000000000000000000000000000000000000"
	// }
	//
	// ```
	WebhooksIPNRequests12 *webhooksIPNRequests12
	// WebhooksIPNRequests123 - With webhooks, you can get notified about various events in the blockchain. E.g:
	//
	// Receipt of payment to a specific address
	// Outgoing payment from a specific address
	// Exchange of sats between two specific addresses
	// Execution of a contract
	// Change of ownership of a token
	//
	// For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
	//
	// from: Outgoing address
	// to: Incoming address
	// contract: Contract that should be monitored
	// tokenid: ID of a token that should be monitored.
	// type: Token type (\[ETH', 'ERC20', 'ERC721', null)
	//
	// Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
	//
	// ``` json
	// {
	//   "id": "63a1ae0887ca3625b82b4924",
	//   "webhook_id": "63a1ad0e87ca3625b82b4923",
	//   "from": "0x0000000000000000000000000000000000000000",
	//   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
	//   "blocknumber": "123",
	//   "datetime": "22-12-20 13:43:52",
	//   "tokenid": "0x0000000000000000000000000000000000000000",
	//   "type": null,
	//   "txid": "000000000000000000000000000000000000000000000000000",
	//   "amount": "000000000000000000000000000000000000000000000000000"
	// }
	//
	// ```
	WebhooksIPNRequests123 *webhooksIPNRequests123
	// WebhooksIPNRequests1234 - With webhooks, you can get notified about various events in the blockchain. E.g:
	//
	// Receipt of payment to a specific address
	// Outgoing payment from a specific address
	// Exchange of sats between two specific addresses
	// Execution of a contract
	// Change of ownership of a token
	//
	// For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
	//
	// from: Outgoing address
	// to: Incoming address
	// contract: Contract that should be monitored
	// tokenid: ID of a token that should be monitored.
	// type: Token type (\[ETH', 'ERC20', 'ERC721', null)
	//
	// Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
	//
	// ``` json
	// {
	//   "id": "63a1ae0887ca3625b82b4924",
	//   "webhook_id": "63a1ad0e87ca3625b82b4923",
	//   "from": "0x0000000000000000000000000000000000000000",
	//   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
	//   "blocknumber": "123",
	//   "datetime": "22-12-20 13:43:52",
	//   "tokenid": "0x0000000000000000000000000000000000000000",
	//   "type": null,
	//   "txid": "000000000000000000000000000000000000000000000000000",
	//   "amount": "000000000000000000000000000000000000000000000000000"
	// }
	//
	// ```
	WebhooksIPNRequests1234 *webhooksIPNRequests1234

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.AddressRequests = newAddressRequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AddressRequests1 = newAddressRequests1(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AddressRequests12 = newAddressRequests12(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AddressRequests123 = newAddressRequests123(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BinanceSmartChain = newBinanceSmartChain(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Bitcoin = newBitcoin(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Ethereum = newEthereum(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InfoRequests = newInfoRequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InfoRequests1 = newInfoRequests1(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InfoRequests12 = newInfoRequests12(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InfoRequests123 = newInfoRequests123(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InfoRequests1234 = newInfoRequests1234(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Market = newMarket(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Polygon = newPolygon(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TransactionRequests = newTransactionRequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TransactionRequests1 = newTransactionRequests1(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TransactionRequests12 = newTransactionRequests12(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TransactionRequests123 = newTransactionRequests123(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TransactionRequests1234 = newTransactionRequests1234(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Tron = newTron(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WalletRequests = newWalletRequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhooksIPNRequests = newWebhooksIPNRequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhooksIPNRequests1 = newWebhooksIPNRequests1(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhooksIPNRequests12 = newWebhooksIPNRequests12(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhooksIPNRequests123 = newWebhooksIPNRequests123(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhooksIPNRequests1234 = newWebhooksIPNRequests1234(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
