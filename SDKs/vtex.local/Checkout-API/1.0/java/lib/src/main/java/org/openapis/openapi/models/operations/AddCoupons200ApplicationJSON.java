/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AddCoupons200ApplicationJSON - OK
 */
public class AddCoupons200ApplicationJSON {
    /**
     * Permission to modify item price manually.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowManualPrice")
    public Boolean allowManualPrice;

    public AddCoupons200ApplicationJSON withAllowManualPrice(Boolean allowManualPrice) {
        this.allowManualPrice = allowManualPrice;
        return this;
    }
    
    /**
     * Available accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableAccounts")
    public String[] availableAccounts;

    public AddCoupons200ApplicationJSON withAvailableAccounts(String[] availableAccounts) {
        this.availableAccounts = availableAccounts;
        return this;
    }
    
    /**
     * Information on each available address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableAddresses")
    public AddCoupons200ApplicationJSONAvailableAddresses[] availableAddresses;

    public AddCoupons200ApplicationJSON withAvailableAddresses(AddCoupons200ApplicationJSONAvailableAddresses[] availableAddresses) {
        this.availableAddresses = availableAddresses;
        return this;
    }
    
    /**
     * Data can be edited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canEditData")
    public Boolean canEditData;

    public AddCoupons200ApplicationJSON withCanEditData(Boolean canEditData) {
        this.canEditData = canEditData;
        return this;
    }
    
    /**
     * Object containing preferences from the client who placed the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientPreferencesData")
    public AddCoupons200ApplicationJSONClientPreferencesData clientPreferencesData;

    public AddCoupons200ApplicationJSON withClientPreferencesData(AddCoupons200ApplicationJSONClientPreferencesData clientPreferencesData) {
        this.clientPreferencesData = clientPreferencesData;
        return this;
    }
    
    /**
     * Customer's profile information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientProfileData")
    public AddCoupons200ApplicationJSONClientProfileData clientProfileData;

    public AddCoupons200ApplicationJSON withClientProfileData(AddCoupons200ApplicationJSONClientProfileData clientProfileData) {
        this.clientProfileData = clientProfileData;
        return this;
    }
    
    /**
     * Object containing commercial condition information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commercialConditionData")
    public java.util.Map<String, Object> commercialConditionData;

    public AddCoupons200ApplicationJSON withCommercialConditionData(java.util.Map<String, Object> commercialConditionData) {
        this.commercialConditionData = commercialConditionData;
        return this;
    }
    
    /**
     * Customer additional information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customData")
    public java.util.Map<String, Object> customData;

    public AddCoupons200ApplicationJSON withCustomData(java.util.Map<String, Object> customData) {
        this.customData = customData;
        return this;
    }
    
    /**
     * Gift registry list information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("giftRegistryData")
    public java.util.Map<String, Object> giftRegistryData;

    public AddCoupons200ApplicationJSON withGiftRegistryData(java.util.Map<String, Object> giftRegistryData) {
        this.giftRegistryData = giftRegistryData;
        return this;
    }
    
    /**
     * Hooks information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hooksData")
    public java.util.Map<String, Object> hooksData;

    public AddCoupons200ApplicationJSON withHooksData(java.util.Map<String, Object> hooksData) {
        this.hooksData = hooksData;
        return this;
    }
    
    /**
     * Ignore customer profile data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoreProfileData")
    public Boolean ignoreProfileData;

    public AddCoupons200ApplicationJSON withIgnoreProfileData(Boolean ignoreProfileData) {
        this.ignoreProfileData = ignoreProfileData;
        return this;
    }
    
    /**
     * Object containing information pertinent to the order's invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceData")
    public java.util.Map<String, Object> invoiceData;

    public AddCoupons200ApplicationJSON withInvoiceData(java.util.Map<String, Object> invoiceData) {
        this.invoiceData = invoiceData;
        return this;
    }
    
    /**
     * Indicates whether order is checked in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCheckedIn")
    public Boolean isCheckedIn;

    public AddCoupons200ApplicationJSON withIsCheckedIn(Boolean isCheckedIn) {
        this.isCheckedIn = isCheckedIn;
        return this;
    }
    
    /**
     * Item metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemMetadata")
    public AddCoupons200ApplicationJSONItemMetadata itemMetadata;

    public AddCoupons200ApplicationJSON withItemMetadata(AddCoupons200ApplicationJSONItemMetadata itemMetadata) {
        this.itemMetadata = itemMetadata;
        return this;
    }
    
    /**
     * Information on each item in the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    public AddCoupons200ApplicationJSONItems[] items;

    public AddCoupons200ApplicationJSON withItems(AddCoupons200ApplicationJSONItems[] items) {
        this.items = items;
        return this;
    }
    
    /**
     * Object containing information about the ordering of items within the orderForm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemsOrdination")
    public AddCoupons200ApplicationJSONItemsOrdination itemsOrdination;

    public AddCoupons200ApplicationJSON withItemsOrdination(AddCoupons200ApplicationJSONItemsOrdination itemsOrdination) {
        this.itemsOrdination = itemsOrdination;
        return this;
    }
    
    /**
     * Indicates whether the user is logged into the store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loggedIn")
    public Boolean loggedIn;

    public AddCoupons200ApplicationJSON withLoggedIn(Boolean loggedIn) {
        this.loggedIn = loggedIn;
        return this;
    }
    
    /**
     * Object containIng promotion data such as coupon tracking information and internal or external UTMs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketingData")
    public AddCoupons200ApplicationJSONMarketingData marketingData;

    public AddCoupons200ApplicationJSON withMarketingData(AddCoupons200ApplicationJSONMarketingData marketingData) {
        this.marketingData = marketingData;
        return this;
    }
    
    /**
     * Array containing an object for each message generated by our servers while processing the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    public Object[] messages;

    public AddCoupons200ApplicationJSON withMessages(Object[] messages) {
        this.messages = messages;
        return this;
    }
    
    /**
     * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("openTextField")
    public String openTextField;

    public AddCoupons200ApplicationJSON withOpenTextField(String openTextField) {
        this.openTextField = openTextField;
        return this;
    }
    
    /**
     * ID of the orderForm corresponding to a specific cart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderFormId")
    public String orderFormId;

    public AddCoupons200ApplicationJSON withOrderFormId(String orderFormId) {
        this.orderFormId = orderFormId;
        return this;
    }
    
    /**
     * Information on the order's payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentData")
    public AddCoupons200ApplicationJSONPaymentData paymentData;

    public AddCoupons200ApplicationJSON withPaymentData(AddCoupons200ApplicationJSONPaymentData paymentData) {
        this.paymentData = paymentData;
        return this;
    }
    
    /**
     * Profile provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileProvider")
    public String profileProvider;

    public AddCoupons200ApplicationJSON withProfileProvider(String profileProvider) {
        this.profileProvider = profileProvider;
        return this;
    }
    
    /**
     * Information on rates and benefits that apply to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratesAndBenefitsData")
    public AddCoupons200ApplicationJSONRatesAndBenefitsData ratesAndBenefitsData;

    public AddCoupons200ApplicationJSON withRatesAndBenefitsData(AddCoupons200ApplicationJSONRatesAndBenefitsData ratesAndBenefitsData) {
        this.ratesAndBenefitsData = ratesAndBenefitsData;
        return this;
    }
    
    /**
     * Attribute created by the seller, in their VTEX store configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesChannel")
    public String salesChannel;

    public AddCoupons200ApplicationJSON withSalesChannel(String salesChannel) {
        this.salesChannel = salesChannel;
        return this;
    }
    
    /**
     * Array containing the data of the item selected as a gift.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectableGifts")
    public Object[] selectableGifts;

    public AddCoupons200ApplicationJSON withSelectableGifts(Object[] selectableGifts) {
        this.selectableGifts = selectableGifts;
        return this;
    }
    
    /**
     * Information on each seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellers")
    public AddCoupons200ApplicationJSONSellers[] sellers;

    public AddCoupons200ApplicationJSON withSellers(AddCoupons200ApplicationJSONSellers[] sellers) {
        this.sellers = sellers;
        return this;
    }
    
    /**
     * Shipping information pertinent to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingData")
    public AddCoupons200ApplicationJSONShippingData shippingData;

    public AddCoupons200ApplicationJSON withShippingData(AddCoupons200ApplicationJSONShippingData shippingData) {
        this.shippingData = shippingData;
        return this;
    }
    
    /**
     * ID of the store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storeId")
    public String storeId;

    public AddCoupons200ApplicationJSON withStoreId(String storeId) {
        this.storeId = storeId;
        return this;
    }
    
    /**
     * Object containing data from the store's configuration (stored in VTEX's License Manager).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storePreferencesData")
    public java.util.Map<String, Object> storePreferencesData;

    public AddCoupons200ApplicationJSON withStorePreferencesData(java.util.Map<String, Object> storePreferencesData) {
        this.storePreferencesData = storePreferencesData;
        return this;
    }
    
    /**
     * Subscription information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptionData")
    public java.util.Map<String, Object> subscriptionData;

    public AddCoupons200ApplicationJSON withSubscriptionData(java.util.Map<String, Object> subscriptionData) {
        this.subscriptionData = subscriptionData;
        return this;
    }
    
    /**
     * Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalizers")
    public Object[] totalizers;

    public AddCoupons200ApplicationJSON withTotalizers(Object[] totalizers) {
        this.totalizers = totalizers;
        return this;
    }
    
    /**
     * Unique ID associated with the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userProfileId")
    public String userProfileId;

    public AddCoupons200ApplicationJSON withUserProfileId(String userProfileId) {
        this.userProfileId = userProfileId;
        return this;
    }
    
    /**
     * User type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userType")
    public String userType;

    public AddCoupons200ApplicationJSON withUserType(String userType) {
        this.userType = userType;
        return this;
    }
    
    /**
     * Total value of the order without separating cents. For example, $24.99 is represented `2499`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    public Long value;

    public AddCoupons200ApplicationJSON withValue(Long value) {
        this.value = value;
        return this;
    }
    
    public AddCoupons200ApplicationJSON(){}
}
