/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetRebalanceDetailsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiSecretKey: string;
}

export class GetRebalanceDetailsRequest extends SpeakeasyBase {
  /**
   * Unique identifier of the rebalance request
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=rebalance_request_id",
  })
  rebalanceRequestId: string;

  /**
   * ApiSecretKey
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-api-key",
  })
  xApiKey: string;
}

/**
 * System error. Retry later. If the error persist, contact WOS support
 */
export class GetRebalanceDetails500ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
 */
export class GetRebalanceDetails429ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Current status of the original request
 */
export enum GetRebalanceDetails409ApplicationJSONStatusEnum {
  Processing = "PROCESSING",
  Complete = "COMPLETE",
}

/**
 * Duplicate request
 */
export class GetRebalanceDetails409ApplicationJSON extends SpeakeasyBase {
  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  /**
   * Stringified original response body if status is `COMPLETE`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  response?: Record<string, any>;

  /**
   * Current status of the original request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetRebalanceDetails409ApplicationJSONStatusEnum;
}

/**
 * The specified resource was not found
 */
export class GetRebalanceDetails404ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
 */
export class GetRebalanceDetails403ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You do not have permissions to access this resource.
 */
export class GetRebalanceDetails401ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Request is not complete and may have one or more validations errors. Please check the error message and the code
 */
export class GetRebalanceDetails400ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
 */
export enum GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum {
  Percentage = "percentage",
  Unit = "unit",
  Value = "value",
}

/**
 * Each individual buy side and sell side instruction of the Switch request
 */
export class GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest extends SpeakeasyBase {
  /**
   * Identifier of the investment product sold or bought. If the instruction is to use a cash holding (relevant only for sell instruction) this must be `cash`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "investment_product_id" })
  investmentProductId: string;

  /**
   * Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum;

  /**
   * value according to the mode. e.g. mode `percentage` and value `10` implies 10%
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;
}

/**
 * Current status of the rebalance on the specific pot_id
 */
export enum GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum {
  Failed = "failed",
  Processing = "processing",
  Initiated = "initiated",
  SellInProgress = "sell_in_progress",
  BuyInProgress = "buy_in_progress",
  Completed = "completed",
}

/**
 * Side of the transaction
 */
export enum GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum {
  Buy = "buy",
  Sell = "sell",
}

export enum GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum {
  Instructed = "instructed",
  Priced = "priced",
  Settled = "settled",
  Rejected = "rejected",
}

export class GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactions extends SpeakeasyBase {
  /**
   * Date and time of transaction creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * Identifier of investment product that is bought or sold.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "investment_product_id" })
  investmentProductId: string;

  /**
   * Executed price of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: string;

  /**
   * quantity (in units)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: string;

  /**
   * Side of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "side" })
  side: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum;

  /**
   * Unique identifier of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * Monetary value of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Each individual pot details on the rebalance request
 */
export class GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest,
  })
  @Expose({ name: "buy_instructions" })
  @Type(
    () =>
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest
  )
  buyInstructions: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest[];

  /**
   * switch instruction ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instruction_id" })
  instructionId: string;

  /**
   * Portfolio deviation for the pot
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolio_deviation" })
  portfolioDeviation: string;

  /**
   * portfolio_template_id in used by the relevent pot
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolio_template_id" })
  portfolioTemplateId: string;

  /**
   * Identifier of pot triggered for rebalance
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pot_id" })
  potId: string;

  /**
   * if the status is rejected then the reason for it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string;

  @SpeakeasyMetadata({
    elemType:
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest,
  })
  @Expose({ name: "sell_instructions" })
  @Type(
    () =>
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest
  )
  sellInstructions: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest[];

  /**
   * Current status of the rebalance on the specific pot_id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum;

  /**
   * Array with status of all buy and sell transactions.
   */
  @SpeakeasyMetadata({
    elemType:
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactions,
  })
  @Expose({ name: "transactions" })
  @Type(
    () =>
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactions
  )
  transactions: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactions[];
}

/**
 * Status of the rebalance instruction
 */
export enum GetRebalanceDetails200ApplicationJSONStatusEnum {
  Processing = "processing",
  InProgress = "in_progress",
  Completed = "completed",
  Failed = "failed",
}

/**
 * success
 */
export class GetRebalanceDetails200ApplicationJSON extends SpeakeasyBase {
  /**
   * Date of the Rebalance created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt: string;

  /**
   * Details of the each pot related to the rebalance instruction
   */
  @SpeakeasyMetadata({
    elemType:
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequest,
  })
  @Expose({ name: "pot_details" })
  @Type(
    () =>
      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequest
  )
  potDetails: GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequest[];

  /**
   * Unique identifier of the rebalance instruction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rebalance_request_id" })
  rebalanceRequestId: string;

  /**
   * Status of the rebalance instruction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetRebalanceDetails200ApplicationJSONStatusEnum;
}

export class GetRebalanceDetailsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * success
   */
  @SpeakeasyMetadata()
  getRebalanceDetails200ApplicationJSONObject?: GetRebalanceDetails200ApplicationJSON;

  /**
   * Request is not complete and may have one or more validations errors. Please check the error message and the code
   */
  @SpeakeasyMetadata()
  getRebalanceDetails400ApplicationJSONObject?: GetRebalanceDetails400ApplicationJSON;

  /**
   * You do not have permissions to access this resource.
   */
  @SpeakeasyMetadata()
  getRebalanceDetails401ApplicationJSONObject?: GetRebalanceDetails401ApplicationJSON;

  /**
   * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
   */
  @SpeakeasyMetadata()
  getRebalanceDetails403ApplicationJSONObject?: GetRebalanceDetails403ApplicationJSON;

  /**
   * The specified resource was not found
   */
  @SpeakeasyMetadata()
  getRebalanceDetails404ApplicationJSONObject?: GetRebalanceDetails404ApplicationJSON;

  /**
   * Duplicate request
   */
  @SpeakeasyMetadata()
  getRebalanceDetails409ApplicationJSONObject?: GetRebalanceDetails409ApplicationJSON;

  /**
   * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
   */
  @SpeakeasyMetadata()
  getRebalanceDetails429ApplicationJSONObject?: GetRebalanceDetails429ApplicationJSON;

  /**
   * System error. Retry later. If the error persist, contact WOS support
   */
  @SpeakeasyMetadata()
  getRebalanceDetails500ApplicationJSONObject?: GetRebalanceDetails500ApplicationJSON;
}
