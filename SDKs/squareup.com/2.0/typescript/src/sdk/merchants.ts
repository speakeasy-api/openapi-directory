/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Merchants {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * ListMerchants
   *
   * @remarks
   * Returns `Merchant` information for a given access token.
   *
   * If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token.
   * You can specify your personal access token to get your own merchant information or specify an OAuth token
   * to get the information for the  merchant that granted you access.
   *
   * If you know the merchant ID, you can also use the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant)
   * endpoint to get the merchant information.
   */
  listMerchants(
    req: operations.ListMerchantsRequest,
    security: operations.ListMerchantsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListMerchantsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListMerchantsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/merchants";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListMerchantsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListMerchantsResponse =
        new operations.ListMerchantsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMerchantsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMerchantsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveMerchant
   *
   * @remarks
   * Retrieve a `Merchant` object for the given `merchant_id`.
   */
  retrieveMerchant(
    req: operations.RetrieveMerchantRequest,
    security: operations.RetrieveMerchantSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveMerchantResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveMerchantRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/merchants/{merchant_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveMerchantSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveMerchantResponse =
        new operations.RetrieveMerchantResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveMerchantResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveMerchantResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
