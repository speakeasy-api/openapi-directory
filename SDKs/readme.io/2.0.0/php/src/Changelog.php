<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Changelog 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create changelog
     * 
     * Create a new changelog inside of this project
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Changelog $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChangelogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateChangelogResponse
     */
	public function createChangelog(
        \OpenAPI\OpenAPI\Models\Shared\Changelog $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateChangelogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateChangelogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changelogs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateChangelogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Delete changelog
     * 
     * Delete the changelog with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogResponse
     */
	public function deleteChangelog(
        \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changelogs/{slug}', \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteChangelogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get changelog
     * 
     * Returns the changelog with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChangelogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChangelogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChangelogResponse
     */
	public function getChangelog(
        \OpenAPI\OpenAPI\Models\Operations\GetChangelogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetChangelogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChangelogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changelogs/{slug}', \OpenAPI\OpenAPI\Models\Operations\GetChangelogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChangelogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get changelogs
     * 
     * Returns a list of changelogs associated with the project API key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChangelogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChangelogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChangelogsResponse
     */
	public function getChangelogs(
        \OpenAPI\OpenAPI\Models\Operations\GetChangelogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetChangelogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChangelogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changelogs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChangelogsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChangelogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Update changelog
     * 
     * Update a changelog with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogResponse
     */
	public function updateChangelog(
        \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changelogs/{slug}', \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changelog", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateChangelogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}