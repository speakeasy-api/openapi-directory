/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetUsersIdTrendAnalysisQueryParams {
    /**
     * A comma-separated list of category IDs to analyse.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=categories")
    public String categories;
    public GetUsersIdTrendAnalysisQueryParams withCategories(String categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_date")
    public String endDate;
    public GetUsersIdTrendAnalysisQueryParams withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=interval")
    public Long interval;
    public GetUsersIdTrendAnalysisQueryParams withInterval(Long interval) {
        this.interval = interval;
        return this;
    }
    
    /**
     * The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it's highly unlikely that event period analysis will be possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=period")
    public GetUsersIdTrendAnalysisPeriodEnum period;
    public GetUsersIdTrendAnalysisQueryParams withPeriod(GetUsersIdTrendAnalysisPeriodEnum period) {
        this.period = period;
        return this;
    }
    
    /**
     * A comma-separated list of scenario IDs to analyse. You're likely going to want to include all a user's scenarios here, unless you have reason to only analyse for a subset of scenarios. Regardless of what scenarios are analysed, all actuals (transactions) across all accounts will be included.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scenarios")
    public String scenarios;
    public GetUsersIdTrendAnalysisQueryParams withScenarios(String scenarios) {
        this.scenarios = scenarios;
        return this;
    }
    
    /**
     * The date to start analysing the budget from. This will be bumped out to make full periods as necessary.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_date")
    public String startDate;
    public GetUsersIdTrendAnalysisQueryParams withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
}
