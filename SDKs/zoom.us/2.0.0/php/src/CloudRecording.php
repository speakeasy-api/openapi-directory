<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CloudRecording 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List recordings of an account
     * 
     * List [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) available on an Account.
     * 
     * > To access a password protected cloud recording, add an "access_token" parameter to the download URL and provide [JWT](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app) as the value of the "access_token".
     * <br>
     * **Prerequisites**:<br>
     * * A Pro or a higher paid plan with Cloud Recording option enabled.<br>
     * **Scopes**: `recording:read:admin` or `account:read:admin`
     * 
     * If the scope `recording:read:admin` is used, the Account ID of the Account must be provided in the `accountId` path parameter to list recordings that belong to the Account. This scope only works for sub accounts. 
     * 
     * To list recordings of a master account, the scope must be `account:read:admin` and the value of `accountId` should be `me`.<br>  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingResponse
     */
	public function getAccountCloudRecording(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/recordings', \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAccountCloudRecording200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAccountCloudRecording200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List archived files
     * 
     * Zoomâ€™s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) allows account administrators to set up an automated mechanism to record, collect and archive meeting data to a 3rd party platform of their choice and hence, satisfy FINRA and/ or other compliance requirements.<br><br>
     * Use this API to retrieve archived meeting or webinar files of an account.
     * 
     * **Scope:** `recording:read:admin`<br>
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br><br>
     * **Prerequisites:** <br>
     * * Enable cloud recording.
     * * Follow the [enablement process](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data#h_01ENPBD3WR68D7FAKTBY92SG45) to access the archiving feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListArchivedFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListArchivedFilesResponse
     */
	public function listArchivedFiles(
        \OpenAPI\OpenAPI\Models\Operations\ListArchivedFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListArchivedFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/archive_files');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListArchivedFilesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListArchivedFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listArchivedFiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListArchivedFiles200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Create a recording registrant
     * 
     * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.
     * 
     * Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.<br>
     * **Scopes:** `recording:write:admin`, `recording:write`.<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateResponse
     */
	public function meetingRecordingRegistrantCreate(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/registrants', \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meetingRecordingRegistrantCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantCreate201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update registrant's status
     * 
     * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording. 
     * Use this API to update a registrant's status.
     * 
     * **Scopes:** `recording:write:admin`, `recording:write`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusResponse
     */
	public function meetingRecordingRegistrantStatus(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/registrants/status', \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List recording registrants
     * 
     * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://marketplace.zoom.us/docs/api-reference/zoom-api/cloud-recording/meetingrecordingregistrantcreate) to view these recordings.
     * 
     * Use this API to list registrants of **On-demand Cloud Recordings** of a past meeting.<br>
     * **Scopes:** `recording:read:admin`, `recording:read`.<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsResponse
     */
	public function meetingRecordingRegistrants(
        \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/registrants', \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recordingRegistrationList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MeetingRecordingRegistrantsRecordingRegistrationList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete meeting recordings
     * 
     * Delete all recording files of a meeting.<br><br>
     * 
     * **Scopes:** `recording:write:admin` `recording:write`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisites**:
     * * Cloud Recording should be enabled on the user's account.<br>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteResponse
     */
	public function recordingDelete(
        \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings', \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecordingDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a meeting recording file
     * 
     * Delete a sprecific recording file from a meeting.<br><br>
     * **Scopes**: `recording:write:admin` `recording:write`<br>
     *  <br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneResponse
     */
	public function recordingDeleteOne(
        \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/{recordingId}', \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingDeleteOneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get meeting recordings
     * 
     * Get all the [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4) from a meeting or Webinar instance.<br><br> The recording files can be downloaded via the `download_url` property listed in the response.
     * 
     * > To access a password protected cloud recording, add an "access_token" parameter to the download URL and provide OAuth access token or [JWT](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app) as the value of the "access_token".
     * <br>
     * 
     * **Scopes:** `recording:read:admin` `recording:read`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingGetResponse
     */
	public function recordingGet(
        \OpenAPI\OpenAPI\Models\Operations\RecordingGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings', \OpenAPI\OpenAPI\Models\Operations\RecordingGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecordingGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recordingFileList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RecordingGetRecordingFileList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update registration questions
     * 
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.
     * 
     * Use this API to update registration questions that are to be answered by users while registering to view a recording.<br>
     * **Scopes:** `recording:write:admin`, `recording:write`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateResponse
     */
	public function recordingRegistrantQuestionUpdate(
        \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/registrants/questions', \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantQuestionUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get registration questions
     * 
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.
     * 
     * Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.<br>
     * **Scopes:** `recording:read:admin`, `recording:read`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetResponse
     */
	public function recordingRegistrantsQuestionsGet(
        \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/registrants/questions', \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recordingRegistrantQuestions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get meeting recording settings
     * 
     * Retrieve settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).<br><br>
     * **Scopes**: `recording:read:admin` `recording:read`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateResponse
     */
	public function recordingSettingUpdate(
        \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/settings', \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recordingSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RecordingSettingUpdateRecordingSettings', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update meeting recording settings
     * 
     * Update settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording)<br><br>
     * **Scopes**: `recording:write:admin` `recording:write`<br>
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateResponse
     */
	public function recordingSettingsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/settings', \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingSettingsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Recover meeting recordings
     * 
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.<br><br>
     * **Scopes**: `recording:write:admin` `recording:write`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisites**:<br>
     * * A Pro user with Cloud Recording enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateResponse
     */
	public function recordingStatusUpdate(
        \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/status', \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Recover a single recording
     * 
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.<br>
     * **Scopes:** `recording:write:admin` `recording:write`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneResponse
     */
	public function recordingStatusUpdateOne(
        \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/meetings/{meetingId}/recordings/{recordingId}/status', \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingStatusUpdateOneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List all recordings
     * 
     * When a user records a meeting or a webinar by choosing the **Record to the Cloud** option, the video, audio, and chat text are recorded in the Zoom cloud. 
     * 
     * Use this API to list all [Cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a user.<br>
     * > To access a user's password protected cloud recording, add an "access_token" parameter to the download URL and provide either the [JWT](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app) or the user's OAuth access token as the value of the "access_token" parameter. 
     * <br>
     * 
     * **Scopes:** `recording:read:admin` `recording:read`  <br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>
     * **Prerequisites:** 
     * * Pro or a higher plan.
     * * Cloud Recording must be enabled on the user's account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecordingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecordingsListResponse
     */
	public function recordingsList(
        \OpenAPI\OpenAPI\Models\Operations\RecordingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecordingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecordingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/recordings', \OpenAPI\OpenAPI\Models\Operations\RecordingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecordingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecordingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recordingList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RecordingsListRecordingList', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}