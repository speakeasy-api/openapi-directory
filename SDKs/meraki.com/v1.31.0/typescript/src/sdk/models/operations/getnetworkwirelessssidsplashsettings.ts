/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworkWirelessSsidSplashSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=number",
  })
  number: string;
}

/**
 * Details associated with a free access plan with limits
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess extends SpeakeasyBase {
  /**
   * How long a device can use a network for free.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "durationInMinutes" })
  durationInMinutes?: number;

  /**
   * Whether or not free access is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * Details associated with billing splash
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling extends SpeakeasyBase {
  /**
   * Details associated with a free access plan with limits
   */
  @SpeakeasyMetadata()
  @Expose({ name: "freeAccess" })
  @Type(
    () =>
      GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess
  )
  freeAccess?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess;

  /**
   * Whether or not billing uses the fast login prepaid access option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prepaidAccessFastLoginEnabled" })
  prepaidAccessFastLoginEnabled?: boolean;

  /**
   * The email address that reeceives replies from clients
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyToEmailAddress" })
  replyToEmailAddress?: string;
}

/**
 * Details associated with guest sponsored splash
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship extends SpeakeasyBase {
  /**
   * Duration in minutes of sponsored guest authorization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "durationInMinutes" })
  durationInMinutes?: number;

  /**
   * Whether or not guests can specify how much time they are requesting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "guestCanRequestTimeframe" })
  guestCanRequestTimeframe?: boolean;
}

/**
 * How created user accounts should be authorized.
 */
export enum GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum {
  Admin = "admin",
  Auto = "auto",
  SelfEmail = "self_email",
}

/**
 * Self-registration for splash with Meraki authentication.
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration extends SpeakeasyBase {
  /**
   * How created user accounts should be authorized.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizationType" })
  authorizationType?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum;

  /**
   * Whether or not to allow users to create their own account on the network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * The strength of the enforcement of selected system types.
 */
export enum GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum {
  ClickThrough = "click-through",
  Focused = "focused",
  Strict = "strict",
}

/**
 * Systems Manager network targeted for sentry enrollment.
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork extends SpeakeasyBase {
  /**
   * The network ID of the Systems Manager network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * Systems Manager sentry enrollment splash settings.
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment extends SpeakeasyBase {
  /**
   * The system types that the Sentry enforces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enforcedSystems" })
  enforcedSystems?: string[];

  /**
   * The strength of the enforcement of selected system types.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "strength" })
  strength?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum;

  /**
   * Systems Manager network targeted for sentry enrollment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "systemsManagerNetwork" })
  @Type(
    () =>
      GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork
  )
  systemsManagerNetwork?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork;
}

/**
 * The image used in the splash page.
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage extends SpeakeasyBase {
  /**
   * The extension of the image file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extension" })
  extension?: string;

  /**
   * The MD5 value of the image file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "md5" })
  md5?: string;
}

/**
 * The logo used in the splash page.
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo extends SpeakeasyBase {
  /**
   * The extension of the logo file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extension" })
  extension?: string;

  /**
   * The MD5 value of the logo file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "md5" })
  md5?: string;
}

/**
 * The prepaid front image used in the splash page.
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront extends SpeakeasyBase {
  /**
   * The extension of the prepaid front image file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extension" })
  extension?: string;

  /**
   * The MD5 value of the prepaid front image file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "md5" })
  md5?: string;
}

/**
 * Successful operation
 */
export class GetNetworkWirelessSsidSplashSettings200ApplicationJSON extends SpeakeasyBase {
  /**
   * Whether or not to allow simultaneous logins from different devices.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowSimultaneousLogins" })
  allowSimultaneousLogins?: boolean;

  /**
   * Details associated with billing splash
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billing" })
  @Type(() => GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling)
  billing?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling;

  /**
   * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blockAllTrafficBeforeSignOn" })
  blockAllTrafficBeforeSignOn?: boolean;

  /**
   * How login attempts should be handled when the controller is unreachable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "controllerDisconnectionBehavior" })
  controllerDisconnectionBehavior?: string;

  /**
   * Details associated with guest sponsored splash
   */
  @SpeakeasyMetadata()
  @Expose({ name: "guestSponsorship" })
  @Type(
    () => GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship
  )
  guestSponsorship?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship;

  /**
   * The custom redirect URL where the users will go after the splash page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirectUrl" })
  redirectUrl?: string;

  /**
   * Self-registration for splash with Meraki authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfRegistration" })
  @Type(
    () => GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration
  )
  selfRegistration?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration;

  /**
   * Systems Manager sentry enrollment splash settings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sentryEnrollment" })
  @Type(
    () => GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment
  )
  sentryEnrollment?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment;

  /**
   * The image used in the splash page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splashImage" })
  @Type(() => GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage)
  splashImage?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage;

  /**
   * The logo used in the splash page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splashLogo" })
  @Type(() => GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo)
  splashLogo?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo;

  /**
   * The type of splash page for this SSID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splashPage" })
  splashPage?: string;

  /**
   * The prepaid front image used in the splash page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splashPrepaidFront" })
  @Type(
    () =>
      GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront
  )
  splashPrepaidFront?: GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront;

  /**
   * Splash timeout in minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splashTimeout" })
  splashTimeout?: number;

  /**
   * The custom splash URL of the click-through splash page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splashUrl" })
  splashUrl?: string;

  /**
   * SSID number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssidNumber" })
  ssidNumber?: number;

  /**
   * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useRedirectUrl" })
  useRedirectUrl?: boolean;

  /**
   * Boolean indicating whether the users will be redirected to the custom splash url
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useSplashUrl" })
  useSplashUrl?: boolean;

  /**
   * The welcome message for the users on the splash page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcomeMessage" })
  welcomeMessage?: string;
}

export class GetNetworkWirelessSsidSplashSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getNetworkWirelessSsidSplashSettings200ApplicationJSONObject?: GetNetworkWirelessSsidSplashSettings200ApplicationJSON;
}
