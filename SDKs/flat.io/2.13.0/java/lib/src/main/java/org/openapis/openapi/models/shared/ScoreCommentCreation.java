/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ScoreCommentCreation - Creation of a comment
 */
public class ScoreCommentCreation {
    /**
     * The comment text that can includes mentions using the following format: `@[id:username]`.
     * 
     */
    @JsonProperty("comment")
    public String comment;
    public ScoreCommentCreation withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public ScoreCommentContext context;
    public ScoreCommentCreation withContext(ScoreCommentContext context) {
        this.context = context;
        return this;
    }
    
    /**
     * The list of user identifiers mentioned in this comment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mentions")
    public String[] mentions;
    public ScoreCommentCreation withMentions(String[] mentions) {
        this.mentions = mentions;
        return this;
    }
    
    /**
     * A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rawComment")
    public String rawComment;
    public ScoreCommentCreation withRawComment(String rawComment) {
        this.rawComment = rawComment;
        return this;
    }
    
    /**
     * When the comment is a reply to another comment, the unique identifier of the parent comment
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyTo")
    public String replyTo;
    public ScoreCommentCreation withReplyTo(String replyTo) {
        this.replyTo = replyTo;
        return this;
    }
    
    /**
     * The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains "last", the API will automatically take the last revision created.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revision")
    public String revision;
    public ScoreCommentCreation withRevision(String revision) {
        this.revision = revision;
        return this;
    }
    
}
