/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VcdHierarchyObjectSummary - Details of the hierarchy object.
 */
public class VcdHierarchyObjectSummary {
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public VcdHierarchyObjectSummary withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public VcdHierarchyObjectSummary withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public VcdHierarchyObjectSummary withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionStatus")
    public VcdConnectionStatus connectionStatus;

    public VcdHierarchyObjectSummary withConnectionStatus(VcdConnectionStatus connectionStatus) {
        this.connectionStatus = connectionStatus;
        return this;
    }
    
    @JsonProperty("descendantCount")
    public VcdHierarchyObjectDescendantCount descendantCount;

    public VcdHierarchyObjectSummary withDescendantCount(VcdHierarchyObjectDescendantCount descendantCount) {
        this.descendantCount = descendantCount;
        return this;
    }
    
    /**
     * The ID of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public VcdHierarchyObjectSummary withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public VcdHierarchyObjectSummary withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    /**
     * Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainPolarisManagedId")
    public String effectiveSlaDomainPolarisManagedId;

    public VcdHierarchyObjectSummary withEffectiveSlaDomainPolarisManagedId(String effectiveSlaDomainPolarisManagedId) {
        this.effectiveSlaDomainPolarisManagedId = effectiveSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectId")
    public String effectiveSlaSourceObjectId;

    public VcdHierarchyObjectSummary withEffectiveSlaSourceObjectId(String effectiveSlaSourceObjectId) {
        this.effectiveSlaSourceObjectId = effectiveSlaSourceObjectId;
        return this;
    }
    
    /**
     * The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectName")
    public String effectiveSlaSourceObjectName;

    public VcdHierarchyObjectSummary withEffectiveSlaSourceObjectName(String effectiveSlaSourceObjectName) {
        this.effectiveSlaSourceObjectName = effectiveSlaSourceObjectName;
        return this;
    }
    
    /**
     * attributes pertaining to each vCD hierarchy object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extendedAttributes")
    public VcdHierarchyObjectAttributes extendedAttributes;

    public VcdHierarchyObjectSummary withExtendedAttributes(VcdHierarchyObjectAttributes extendedAttributes) {
        this.extendedAttributes = extendedAttributes;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public VcdHierarchyObjectSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infraPath")
    public ManagedHierarchyObjectAncestor[] infraPath;

    public VcdHierarchyObjectSummary withInfraPath(ManagedHierarchyObjectAncestor[] infraPath) {
        this.infraPath = infraPath;
        return this;
    }
    
    /**
     * IPv4 address for a vCD cluster or vCenter Server that is managed through a VIM Server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAddress")
    public String ipAddress;

    public VcdHierarchyObjectSummary withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public VcdHierarchyObjectSummary withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Indicates whether the managed hierarchy object is deleted.
     */
    @JsonProperty("isDeleted")
    public Boolean isDeleted;

    public VcdHierarchyObjectSummary withIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
        return this;
    }
    
    /**
     * Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEffectiveSlaDomainRetentionLocked")
    public Boolean isEffectiveSlaDomainRetentionLocked;

    public VcdHierarchyObjectSummary withIsEffectiveSlaDomainRetentionLocked(Boolean isEffectiveSlaDomainRetentionLocked) {
        this.isEffectiveSlaDomainRetentionLocked = isEffectiveSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Whether this managed object is a relic (an archived snappable with unexpired snapshots).
     */
    @JsonProperty("isRelic")
    public Boolean isRelic;

    public VcdHierarchyObjectSummary withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public VcdHierarchyObjectSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Types of object that can be present in the vCD hierarchy.
     */
    @JsonProperty("objectType")
    public VcdObjectTypeEnum objectType;

    public VcdHierarchyObjectSummary withObjectType(VcdObjectTypeEnum objectType) {
        this.objectType = objectType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingSlaDomain")
    public ManagedObjectPendingSlaInfo pendingSlaDomain;

    public VcdHierarchyObjectSummary withPendingSlaDomain(ManagedObjectPendingSlaInfo pendingSlaDomain) {
        this.pendingSlaDomain = pendingSlaDomain;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public VcdHierarchyObjectSummary withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * The ID of the SLA Domain whose retention policy is in use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public VcdHierarchyObjectSummary withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    /**
     * The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
     */
    @JsonProperty("slaAssignment")
    public VcdHierarchyObjectSummarySlaAssignmentEnum slaAssignment;

    public VcdHierarchyObjectSummary withSlaAssignment(VcdHierarchyObjectSummarySlaAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public VcdHierarchyObjectSummary withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slaPath")
    public ManagedHierarchyObjectAncestor[] slaPath;

    public VcdHierarchyObjectSummary withSlaPath(ManagedHierarchyObjectAncestor[] slaPath) {
        this.slaPath = slaPath;
        return this;
    }
    
    /**
     * ID assigned to a vCenter Server instance that is managed through a VIM Server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vcenterId")
    public String vcenterId;

    public VcdHierarchyObjectSummary withVcenterId(String vcenterId) {
        this.vcenterId = vcenterId;
        return this;
    }
    
    public VcdHierarchyObjectSummary(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("descendantCount") VcdHierarchyObjectDescendantCount descendantCount, @JsonProperty("effectiveSlaDomainId") String effectiveSlaDomainId, @JsonProperty("effectiveSlaDomainName") String effectiveSlaDomainName, @JsonProperty("id") String id, @JsonProperty("isDeleted") Boolean isDeleted, @JsonProperty("isRelic") Boolean isRelic, @JsonProperty("name") String name, @JsonProperty("objectType") VcdObjectTypeEnum objectType, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("slaAssignment") VcdHierarchyObjectSummarySlaAssignmentEnum slaAssignment) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.descendantCount = descendantCount;
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        this.id = id;
        this.isDeleted = isDeleted;
        this.isRelic = isRelic;
        this.name = name;
        this.objectType = objectType;
        this.primaryClusterId = primaryClusterId;
        this.slaAssignment = slaAssignment;
  }
}
