<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootFailoverClusterFailoverClusterApp 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete failover cluster applications
     * 
     * Delete failover cluster applications from Rubrik cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkDeleteFailoverClusterAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkDeleteFailoverClusterAppResponse
     */
	public function bulkDeleteFailoverClusterApp(
        \OpenAPI\OpenAPI\Models\Operations\BulkDeleteFailoverClusterAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkDeleteFailoverClusterAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/failover_cluster/failover_cluster_app/bulk');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BulkDeleteFailoverClusterAppRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkDeleteFailoverClusterAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a failover cluster app
     * 
     * Create a failover cluster app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\FailoverClusterAppConfig $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFailoverClusterAppResponse
     */
	public function createFailoverClusterApp(
        \OpenAPI\OpenAPI\Models\Shared\FailoverClusterAppConfig $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFailoverClusterAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/failover_cluster/failover_cluster_app');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFailoverClusterAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->failoverClusterAppSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FailoverClusterAppSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a failover cluster app
     * 
     * Delete a failover cluster app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFailoverClusterAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFailoverClusterAppResponse
     */
	public function deleteFailoverClusterApp(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFailoverClusterAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFailoverClusterAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/failover_cluster/failover_cluster_app/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteFailoverClusterAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteFailoverClusterAppRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFailoverClusterAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get details of a failover cluster app
     * 
     * Get details of a failover cluster app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFailoverClusterAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFailoverClusterAppResponse
     */
	public function getFailoverClusterApp(
        \OpenAPI\OpenAPI\Models\Operations\GetFailoverClusterAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFailoverClusterAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/failover_cluster/failover_cluster_app/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFailoverClusterAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFailoverClusterAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->failoverClusterAppDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FailoverClusterAppDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a summary of all failover cluster apps
     * 
     * Get a summary of all failover cluster apps.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryFailoverClusterAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryFailoverClusterAppResponse
     */
	public function queryFailoverClusterApp(
        \OpenAPI\OpenAPI\Models\Operations\QueryFailoverClusterAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryFailoverClusterAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/failover_cluster/failover_cluster_app');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryFailoverClusterAppRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryFailoverClusterAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->failoverClusterAppSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FailoverClusterAppSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a failover cluster app
     * 
     * Update the failover cluster app with specified properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFailoverClusterAppRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFailoverClusterAppResponse
     */
	public function updateFailoverClusterApp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFailoverClusterAppRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFailoverClusterAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/failover_cluster/failover_cluster_app/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateFailoverClusterAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "failoverClusterAppConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFailoverClusterAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->failoverClusterAppSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FailoverClusterAppSummary', 'json');
            }
        }

        return $response;
    }
}