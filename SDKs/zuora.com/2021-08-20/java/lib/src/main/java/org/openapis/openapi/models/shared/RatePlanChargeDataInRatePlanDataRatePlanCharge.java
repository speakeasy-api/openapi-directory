/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class RatePlanChargeDataInRatePlanDataRatePlanCharge {
    /**
     * The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.AccountingCode` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountingCode")
    public String accountingCode;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withAccountingCode(String accountingCode) {
        this.accountingCode = accountingCode;
        return this;
    }
    
    /**
     *  Specifies the type of charges a specific discount applies to.
     * 
     * **Character limit**: 21
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApplyDiscountTo")
    public String applyDiscountTo;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withApplyDiscountTo(String applyDiscountTo) {
        this.applyDiscountTo = applyDiscountTo;
        return this;
    }
    
    /**
     *  Indicates the charge's billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.
     * 
     * 
     * **Character limit**: 2
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.BillCycleDay` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BillCycleDay")
    public Integer billCycleDay;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withBillCycleDay(Integer billCycleDay) {
        this.billCycleDay = billCycleDay;
        return this;
    }
    
    /**
     *  Specifies how to determine the billing day for the charge.
     * 
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.BillCycleType` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BillCycleType")
    public String billCycleType;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withBillCycleType(String billCycleType) {
        this.billCycleType = billCycleType;
        return this;
    }
    
    /**
     *  Allows billing period to be overridden on rate plan charge.
     * 
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BillingPeriod")
    public String billingPeriod;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withBillingPeriod(String billingPeriod) {
        this.billingPeriod = billingPeriod;
        return this;
    }
    
    /**
     *  Aligns charges within the same subscription if multiple charges begin on different dates.
     * 
     * 
     * **Character limit**: 24
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BillingPeriodAlignment")
    public String billingPeriodAlignment;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withBillingPeriodAlignment(String billingPeriodAlignment) {
        this.billingPeriodAlignment = billingPeriodAlignment;
        return this;
    }
    
    /**
     *  The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
     * 
     * 
     * **Character limit**:
     * 
     * 
     * **Values**: one of the following:
     * 
     * - `In Advance`
     * - `In Arrears`
     * **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.
     * This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BillingTiming")
    public String billingTiming;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withBillingTiming(String billingTiming) {
        this.billingTiming = billingTiming;
        return this;
    }
    
    /**
     *  Determines how to evaluate charges. Charge models must be individually activated in the web-based UI.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.ChargeModel` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeModel")
    public String chargeModel;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withChargeModel(String chargeModel) {
        this.chargeModel = chargeModel;
        return this;
    }
    
    /**
     *  A unique number that identifies the charge. This number is returned as a string.
     * 
     * 
     * **Character limit**: 50
     * 
     * 
     * **Values**: one of the following:
     * 
     * - automatically generated if left null
     * - a unique number of 50 characters or fewer
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeNumber")
    public String chargeNumber;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withChargeNumber(String chargeNumber) {
        this.chargeNumber = chargeNumber;
        return this;
    }
    
    /**
     *  Specifies the type of charge.
     * 
     * 
     * **Character limit**: 9
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.ChargeType` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeType")
    public String chargeType;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withChargeType(String chargeType) {
        this.chargeType = chargeType;
        return this;
    }
    
    /**
     *  The date through which a customer has been billed for the charge.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ChargedThroughDate")
    public LocalDate chargedThroughDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withChargedThroughDate(LocalDate chargedThroughDate) {
        this.chargedThroughDate = chargedThroughDate;
        return this;
    }
    
    /**
     * The ID of the Zuora user who created the `RatePlanCharge` object.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date when the `RatePlanCharge` object was created.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * A delta monthly recurring charge is the change in monthly recurring revenue caused by an amendment or a new subscription.
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DMRC")
    public Double dmrc;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withDmrc(Double dmrc) {
        this.dmrc = dmrc;
        return this;
    }
    
    /**
     *  After an Amendment, the change in the total contract value (TCV) amount for this charge, compared with its previous value.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DTCV")
    public Double dtcv;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withDtcv(Double dtcv) {
        this.dtcv = dtcv;
        return this;
    }
    
    /**
     *  A description of the charge.
     * 
     * 
     * **Character limit**: 500
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.Description` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    public String description;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     *  Specifies the amount of a fixed-amount discount. You can provide a value for this field if the `ChargeModel` field value is `Discount-Fixed Amount`. If this field is included in a query, the query will filter out the rate plans whose `ChargeModel` field is not of a Discount type. You cannot query this field with the following fields in a single query:
     * 
     * - Price
     * - IncludedUnits
     * - DiscountPercentage
     * - OveragePrice
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: a valid currency amount 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DiscountAmount")
    public Double discountAmount;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
        return this;
    }
    
    /**
     * Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account. This field is only required if the `ChargeModel` field is set to `DiscountFixedAmount` or `DiscountPercentage`.
     * 
     * **Character limit**: 12
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.DiscountLevel` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DiscountLevel")
    public String discountLevel;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withDiscountLevel(String discountLevel) {
        this.discountLevel = discountLevel;
        return this;
    }
    
    /**
     *  Query Filter 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DiscountPercentage")
    public Double discountPercentage;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withDiscountPercentage(Double discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }
    
    /**
     *  The date when the segmented charge ends or ended.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("EffectiveEndDate")
    public LocalDate effectiveEndDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withEffectiveEndDate(LocalDate effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
        return this;
    }
    
    /**
     *  The date when the segmented charge starts or started.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("EffectiveStartDate")
    public LocalDate effectiveStartDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withEffectiveStartDate(LocalDate effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
        return this;
    }
    
    /**
     *  Defines when the charge ends after the charge trigger date. This field can be updated when **Status** is `Draft`.
     * 
     * 
     * 
     * **Values**: one of the following:
     * 
     * - `SubscriptionEnd`: The charge ends on the subscription end date after the charge trigger date. This is the default value.
     * - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields.
     * - `SpecificEndDate`: The specific date on which the charge ends. If you set this field to `SpecificEndDate`, you must specify the specific date by defining the `SpecificEndDate` field.
     * 
     * 
     * 
     * **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EndDateCondition")
    public String endDateCondition;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withEndDateCondition(String endDateCondition) {
        this.endDateCondition = endDateCondition;
        return this;
    }
    
    /**
     *  Query Filter 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IncludedUnits")
    public Double includedUnits;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withIncludedUnits(Double includedUnits) {
        this.includedUnits = includedUnits;
        return this;
    }
    
    /**
     * Indicates if the segment of the rate plan charge is the most recent segment.
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: automatically generated: `true`, `false` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsLastSegment")
    public Boolean isLastSegment;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withIsLastSegment(Boolean isLastSegment) {
        this.isLastSegment = isLastSegment;
        return this;
    }
    
    /**
     * The list price base for the product rate plan charge.
     * 
     * You can only change the value of this field if the amendment type is NewProduct.
     * 
     * **Values**: one of the following:
     * 
     * - `Per Month`
     * - `Per Billing Period`
     * - `Per Week`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ListPriceBase")
    public String listPriceBase;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withListPriceBase(String listPriceBase) {
        this.listPriceBase = listPriceBase;
        return this;
    }
    
    /**
     * Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges.
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MRR")
    public Double mrr;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withMrr(Double mrr) {
        this.mrr = mrr;
        return this;
    }
    
    /**
     * The name of the rate plan charge.
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NumberOfPeriods")
    public Long numberOfPeriods;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withNumberOfPeriods(Long numberOfPeriods) {
        this.numberOfPeriods = numberOfPeriods;
        return this;
    }
    
    /**
     * The original ID of the rate plan charge.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OriginalId")
    public String originalId;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withOriginalId(String originalId) {
        this.originalId = originalId;
        return this;
    }
    
    /**
     * Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored.
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OverageCalculationOption")
    public String overageCalculationOption;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withOverageCalculationOption(String overageCalculationOption) {
        this.overageCalculationOption = overageCalculationOption;
        return this;
    }
    
    /**
     *  Query Filter 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OveragePrice")
    public Double overagePrice;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withOveragePrice(Double overagePrice) {
        this.overagePrice = overagePrice;
        return this;
    }
    
    /**
     *  Determines whether to credit the customer with unused units of usage.
     * 
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OverageUnusedUnitsCreditOption")
    public String overageUnusedUnitsCreditOption;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withOverageUnusedUnitsCreditOption(String overageUnusedUnitsCreditOption) {
        this.overageUnusedUnitsCreditOption = overageUnusedUnitsCreditOption;
        return this;
    }
    
    /**
     *  Query Filter 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Price")
    public Double price;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     *  Applies an automatic price change when a termed subscription is renewed.
     * 
     * 
     * **Character limit**:
     * 
     * 
     * **Values**: one of the following:
     * 
     * - `NoChange` (default)
     * - `SpecificPercentageValue`
     * - `UseLatestProductCatalogPricing`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PriceChangeOption")
    public String priceChangeOption;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withPriceChangeOption(String priceChangeOption) {
        this.priceChangeOption = priceChangeOption;
        return this;
    }
    
    /**
     *  Specifies the percentage to increase or decrease the price of renewed subscriptions. Use this field if the `ProductRatePlanCharge`.`PriceChangeOption` value is set to `SpecificPercentageValue`.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: a decimal value between -100 and 100 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PriceIncreasePercentage")
    public Double priceIncreasePercentage;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withPriceIncreasePercentage(Double priceIncreasePercentage) {
        this.priceIncreasePercentage = priceIncreasePercentage;
        return this;
    }
    
    /**
     *  The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ProcessedThroughDate")
    public LocalDate processedThroughDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withProcessedThroughDate(LocalDate processedThroughDate) {
        this.processedThroughDate = processedThroughDate;
        return this;
    }
    
    /**
     *  The ID of the product rate plan charge associated with the subscription rate plan charge,
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.Id` 
     */
    @JsonProperty("ProductRatePlanChargeId")
    public String productRatePlanChargeId;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withProductRatePlanChargeId(String productRatePlanChargeId) {
        this.productRatePlanChargeId = productRatePlanChargeId;
        return this;
    }
    
    /**
     *  The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing. This field is only rquired if the charge model is tiered pricing or volume pricing.
     * 
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: a valid quantity value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Quantity")
    public Double quantity;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     *  The ID of the rate plan associated with the rate plan charge.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: inherited from `RatePlan.Id` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RatePlanId")
    public String ratePlanId;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withRatePlanId(String ratePlanId) {
        this.ratePlanId = ratePlanId;
        return this;
    }
    
    /**
     *  Associates this product rate plan charge with a specific revenue recognition code.
     * 
     * 
     * **Character limit**: 70
     * 
     * 
     * **Values**: a valid revenue recognition code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevRecCode")
    public String revRecCode;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withRevRecCode(String revRecCode) {
        this.revRecCode = revRecCode;
        return this;
    }
    
    /**
     *  Specifies when revenue recognition begins.
     * 
     * 
     * **Character limit**: 22
     * 
     * 
     * **Values**: one of the following:
     * 
     * -  `ContractEffectiveDate`
     * 
     * -  `ServiceActivationDate`
     * 
     * -  `CustomerAcceptanceDate`
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevRecTriggerCondition")
    public String revRecTriggerCondition;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withRevRecTriggerCondition(String revRecTriggerCondition) {
        this.revRecTriggerCondition = revRecTriggerCondition;
        return this;
    }
    
    /**
     *  Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend
     * calls, you can use this field only for NewProduct amendments. For Update
     * calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge. See [Z-Billing User Role](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/d_Billing_Roles) permission enabled to use this field.
     * 
     * 
     * 
     * **Character limit**: n/a
     * 
     * 
     * **Values**: name of an active Revenue Recognition Rule 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevenueRecognitionRuleName")
    public String revenueRecognitionRuleName;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withRevenueRecognitionRuleName(String revenueRecognitionRuleName) {
        this.revenueRecognitionRuleName = revenueRecognitionRuleName;
        return this;
    }
    
    /**
     *  Specifies the number of units of measure (UOM) rolled over from previous periods. This field is applicable only to usage charges with overage models.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated
     * 
     * **Note**:
     * 
     * - You cannot query or filter this field with other fields in a single query.
     * - To query or filter this field, you must specify and only specify the rate plan charge Id in the condition.
     * - You cannot use this field in the query or filter condition.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RolloverBalance")
    public Double rolloverBalance;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withRolloverBalance(Double rolloverBalance) {
        this.rolloverBalance = rolloverBalance;
        return this;
    }
    
    /**
     *  The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.
     * 
     * 
     * **Character limit**: 2
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Segment")
    public Integer segment;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withSegment(Integer segment) {
        this.segment = segment;
        return this;
    }
    
    /**
     *  Customizes the number of months or weeks for the charges billing period. This field is only required if you set the value of the `BillingPeriod` field to `Specific Months` or `Specific Weeks`.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SpecificBillingPeriod")
    public Long specificBillingPeriod;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withSpecificBillingPeriod(Long specificBillingPeriod) {
        this.specificBillingPeriod = specificBillingPeriod;
        return this;
    }
    
    /**
     *  The specific date on which the charge ends, in `yyyy-mm-dd` format.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * 
     * **Note**:
     * 
     * - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.
     * - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("SpecificEndDate")
    public LocalDate specificEndDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withSpecificEndDate(LocalDate specificEndDate) {
        this.specificEndDate = specificEndDate;
        return this;
    }
    
    /**
     *  The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TCV")
    public Double tcv;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withTcv(Double tcv) {
        this.tcv = tcv;
        return this;
    }
    
    /**
     *  The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is only required if the `TriggerEvent` field is set to `SpecificDate`.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TriggerDate")
    public LocalDate triggerDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withTriggerDate(LocalDate triggerDate) {
        this.triggerDate = triggerDate;
        return this;
    }
    
    /**
     *  Specifies when to start billing the customer for the charge.
     * **Note: **This field can be passed through the subscribe
     * and amend
     * calls and will override the default value set on the Product Rate Plan Charge.
     * 
     * 
     * **Character limit**: 18
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:
     * 
     * - `ContractEffective `is the date when the subscription's contract goes into effect and the charge is ready to be billed.
     * - `ServiceActivationDate `is when the services or products for a subscription have been activated and the customers have access.
     * - `CustomerAcceptance `is when the customer accepts the services or products for a subscription.
     * - SpecificDate is valid only on the RatePlanCharge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TriggerEvent")
    public String triggerEvent;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withTriggerEvent(String triggerEvent) {
        this.triggerEvent = triggerEvent;
        return this;
    }
    
    /**
     *  Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing &gt; Settings**.
     * 
     * 
     * **Character limit**: 25
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.UOM` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UOM")
    public String uom;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUom(String uom) {
        this.uom = uom;
        return this;
    }
    
    /**
     *  Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the `OverageUnusedUnitsCreditOption` field value is CreditBySpecificRate.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: a valid decimal value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UnusedUnitsCreditRates")
    public Double unusedUnitsCreditRates;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUnusedUnitsCreditRates(Double unusedUnitsCreditRates) {
        this.unusedUnitsCreditRates = unusedUnitsCreditRates;
        return this;
    }
    
    /**
     *  Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.UpToPeriods`
     * 
     * **Note**:
     * 
     * - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
     * - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
     * - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.
     * - If you override the value in this field, enter a whole number between 0 and 65535, exclusive.
     * - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpToPeriods")
    public Long upToPeriods;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUpToPeriods(Long upToPeriods) {
        this.upToPeriods = upToPeriods;
        return this;
    }
    
    /**
     *  The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`.
     * 
     * 
     * **Values**: one of the following:
     * 
     * - `Billing Periods` (default)
     * - `Days`
     * - `Weeks`
     * - `Months`
     * - `Years`
     * 
     * 
     * **Note**:
     * 
     * - You must use this field together with the `UpToPeriods` field to specify the time period.
     * - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpToPeriodsType")
    public String upToPeriodsType;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUpToPeriodsType(String upToPeriodsType) {
        this.upToPeriodsType = upToPeriodsType;
        return this;
    }
    
    /**
     * The ID of the last user to update the object.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the object was last updated.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
    /**
     *  Determines how Zuora processes usage records for per-unit usage charges.
     * 
     * **Character limit**: 18
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UsageRecordRatingOption")
    public String usageRecordRatingOption;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUsageRecordRatingOption(String usageRecordRatingOption) {
        this.usageRecordRatingOption = usageRecordRatingOption;
        return this;
    }
    
    /**
     *  Determines whether to define a new accounting code for the new discount charge.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: inherited from `ProductRatePlanCharge.UseDiscountSpecificAccountingCode` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UseDiscountSpecificAccountingCode")
    public Boolean useDiscountSpecificAccountingCode;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withUseDiscountSpecificAccountingCode(Boolean useDiscountSpecificAccountingCode) {
        this.useDiscountSpecificAccountingCode = useDiscountSpecificAccountingCode;
        return this;
    }
    
    /**
     *  The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge.
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Version")
    public Long version;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    /**
     *  Specifies which day of the week as the bill cycle day (BCD) for the charge.
     * This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * 
     * 
     * 
     * **Values**: one of the following:
     * 
     * - `Sunday`
     * - `Monday`
     * - `Tuesday`
     * - `Wednesday`
     * - `Thursday`
     * - `Friday`
     * - `Saturday`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WeeklyBillCycleDay")
    public String weeklyBillCycleDay;
    public RatePlanChargeDataInRatePlanDataRatePlanCharge withWeeklyBillCycleDay(String weeklyBillCycleDay) {
        this.weeklyBillCycleDay = weeklyBillCycleDay;
        return this;
    }
    
}
