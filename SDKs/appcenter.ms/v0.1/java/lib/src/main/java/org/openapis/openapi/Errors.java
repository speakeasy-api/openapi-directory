/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Errors {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Errors(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * List of app builds
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsAppBuildsListResponse errorsAppBuildsList(org.openapis.openapi.models.operations.ErrorsAppBuildsListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsAppBuildsListPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsAppBuildsListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsAppBuildsListResponse res = new org.openapis.openapi.models.operations.ErrorsAppBuildsListResponse() {{
            errorsAppBuildsList200ApplicationJSONObject = null;
            errorsAppBuildsListDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsAppBuildsList200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsAppBuildsList200ApplicationJSON.class);
                res.errorsAppBuildsList200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsAppBuildsListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsAppBuildsListDefaultApplicationJSON.class);
                res.errorsAppBuildsListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all available versions in the time range.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsAvailableVersionsResponse errorsAvailableVersions(org.openapis.openapi.models.operations.ErrorsAvailableVersionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsAvailableVersionsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsAvailableVersionsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsAvailableVersionsResponse res = new org.openapis.openapi.models.operations.ErrorsAvailableVersionsResponse() {{
            errorsAvailableVersions200ApplicationJSONObject = null;
            errorsAvailableVersionsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsAvailableVersions200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsAvailableVersions200ApplicationJSON.class);
                res.errorsAvailableVersions200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsAvailableVersionsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsAvailableVersionsDefaultApplicationJSON.class);
                res.errorsAvailableVersionsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsCountsPerDayResponse errorsCountsPerDay(org.openapis.openapi.models.operations.ErrorsCountsPerDayRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsCountsPerDayPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsCountsPerDayQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsCountsPerDayResponse res = new org.openapis.openapi.models.operations.ErrorsCountsPerDayResponse() {{
            errorsCountsPerDay200ApplicationJSONObject = null;
            errorsCountsPerDayDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsCountsPerDay200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsCountsPerDay200ApplicationJSON.class);
                res.errorsCountsPerDay200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsCountsPerDayDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsCountsPerDayDefaultApplicationJSON.class);
                res.errorsCountsPerDayDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsDeleteErrorResponse errorsDeleteError(org.openapis.openapi.models.operations.ErrorsDeleteErrorRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsDeleteErrorPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsDeleteErrorResponse res = new org.openapis.openapi.models.operations.ErrorsDeleteErrorResponse() {{
            errorsDeleteError200ApplicationJSONObject = null;
            errorsDeleteErrorDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsDeleteError200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsDeleteError200ApplicationJSON.class);
                res.errorsDeleteError200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsDeleteErrorDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsDeleteErrorDefaultApplicationJSON.class);
                res.errorsDeleteErrorDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Error attachment location.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocationResponse errorsErrorAttachmentLocation(org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocationPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocationResponse res = new org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocationResponse() {{
            errorsErrorAttachmentLocation200ApplicationJSONObject = null;
            errorsErrorAttachmentLocationDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocation200ApplicationJSON.class);
                res.errorsErrorAttachmentLocation200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocationDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorAttachmentLocationDefaultApplicationJSON.class);
                res.errorsErrorAttachmentLocationDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Error attachment text.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorAttachmentTextResponse errorsErrorAttachmentText(org.openapis.openapi.models.operations.ErrorsErrorAttachmentTextRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorAttachmentTextPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorAttachmentTextResponse res = new org.openapis.openapi.models.operations.ErrorsErrorAttachmentTextResponse() {{
            errorsErrorAttachmentText200ApplicationJSONObject = null;
            errorsErrorAttachmentTextDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorAttachmentText200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorAttachmentText200ApplicationJSON.class);
                res.errorsErrorAttachmentText200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorAttachmentTextDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorAttachmentTextDefaultApplicationJSON.class);
                res.errorsErrorAttachmentTextDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List error attachments.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorAttachmentsResponse errorsErrorAttachments(org.openapis.openapi.models.operations.ErrorsErrorAttachmentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorAttachmentsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorAttachmentsResponse res = new org.openapis.openapi.models.operations.ErrorsErrorAttachmentsResponse() {{
            errorsErrorAttachments200ApplicationJSONObjects = null;
            errorsErrorAttachmentsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorAttachments200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorAttachments200ApplicationJSON[].class);
                res.errorsErrorAttachments200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorAttachmentsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorAttachmentsDefaultApplicationJSON.class);
                res.errorsErrorAttachmentsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Download details for a specific error.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorDownloadResponse errorsErrorDownload(org.openapis.openapi.models.operations.ErrorsErrorDownloadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorDownloadPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsErrorDownloadQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorDownloadResponse res = new org.openapis.openapi.models.operations.ErrorsErrorDownloadResponse() {{
            errorsErrorDownload200ApplicationJSONFileObject = null;
            errorsErrorDownloadDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.errorsErrorDownload200ApplicationJSONFileObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorDownloadDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorDownloadDefaultApplicationJSON.class);
                res.errorsErrorDownloadDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Error groups list based on search parameters
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchResponse errorsErrorGroupsSearch(org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchResponse res = new org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchResponse() {{
            errorsErrorGroupsSearch200ApplicationJSONObject = null;
            errorsErrorGroupsSearchDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorGroupsSearch200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorGroupsSearch200ApplicationJSON.class);
                res.errorsErrorGroupsSearch200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorGroupsSearchDefaultApplicationJSON.class);
                res.errorsErrorGroupsSearchDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Error location.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorLocationResponse errorsErrorLocation(org.openapis.openapi.models.operations.ErrorsErrorLocationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorLocationPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorLocationResponse res = new org.openapis.openapi.models.operations.ErrorsErrorLocationResponse() {{
            errorsErrorLocation200ApplicationJSONObject = null;
            errorsErrorLocationDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorLocation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorLocation200ApplicationJSON.class);
                res.errorsErrorLocation200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorLocationDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorLocationDefaultApplicationJSON.class);
                res.errorsErrorLocationDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Errors list based on search parameters
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorSearchResponse errorsErrorSearch(org.openapis.openapi.models.operations.ErrorsErrorSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorSearchPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/search", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsErrorSearchQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorSearchResponse res = new org.openapis.openapi.models.operations.ErrorsErrorSearchResponse() {{
            errorsErrorSearch200ApplicationJSONObject = null;
            errorsErrorSearchDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorSearch200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorSearch200ApplicationJSON.class);
                res.errorsErrorSearch200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorSearchDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorSearchDefaultApplicationJSON.class);
                res.errorsErrorSearchDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Error Stacktrace details.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsErrorStackTraceResponse errorsErrorStackTrace(org.openapis.openapi.models.operations.ErrorsErrorStackTraceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsErrorStackTracePathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsErrorStackTraceResponse res = new org.openapis.openapi.models.operations.ErrorsErrorStackTraceResponse() {{
            diagnosticsStackTrace = null;
            errorsErrorStackTraceDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiagnosticsStackTrace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiagnosticsStackTrace.class);
                res.diagnosticsStackTrace = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsErrorStackTraceDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsErrorStackTraceDefaultApplicationJSON.class);
                res.errorsErrorStackTraceDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Error details.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGetErrorDetailsResponse errorsGetErrorDetails(org.openapis.openapi.models.operations.ErrorsGetErrorDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGetErrorDetailsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGetErrorDetailsResponse res = new org.openapis.openapi.models.operations.ErrorsGetErrorDetailsResponse() {{
            errorsGetErrorDetails200ApplicationJSONObject = null;
            errorsGetErrorDetailsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGetErrorDetails200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGetErrorDetails200ApplicationJSON.class);
                res.errorsGetErrorDetails200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGetErrorDetailsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGetErrorDetailsDefaultApplicationJSON.class);
                res.errorsGetErrorDetailsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Count of errors by day in the time range of the selected error group with selected version
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayResponse errorsGroupCountsPerDay(org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayResponse res = new org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayResponse() {{
            errorsGroupCountsPerDay200ApplicationJSONObject = null;
            errorsGroupCountsPerDayDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupCountsPerDay200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupCountsPerDay200ApplicationJSON.class);
                res.errorsGroupCountsPerDay200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupCountsPerDayDefaultApplicationJSON.class);
                res.errorsGroupCountsPerDayDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Error group details
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGroupDetailsResponse errorsGroupDetails(org.openapis.openapi.models.operations.ErrorsGroupDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGroupDetailsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGroupDetailsResponse res = new org.openapis.openapi.models.operations.ErrorsGroupDetailsResponse() {{
            errorsGroupDetails200ApplicationJSONObject = null;
            errorsGroupDetailsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupDetails200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupDetails200ApplicationJSON.class);
                res.errorsGroupDetails200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupDetailsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupDetailsDefaultApplicationJSON.class);
                res.errorsGroupDetailsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesResponse errorsGroupErrorFreeDevicePercentages(org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesResponse res = new org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesResponse() {{
            errorsGroupErrorFreeDevicePercentages200ApplicationJSONObject = null;
            errorsGroupErrorFreeDevicePercentagesDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentages200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentages200ApplicationJSON.class);
                res.errorsGroupErrorFreeDevicePercentages200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupErrorFreeDevicePercentagesDefaultApplicationJSON.class);
                res.errorsGroupErrorFreeDevicePercentagesDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the stack trace for the error group.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGroupErrorStackTraceResponse errorsGroupErrorStackTrace(org.openapis.openapi.models.operations.ErrorsGroupErrorStackTraceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGroupErrorStackTracePathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGroupErrorStackTraceResponse res = new org.openapis.openapi.models.operations.ErrorsGroupErrorStackTraceResponse() {{
            diagnosticsStackTrace = null;
            errorsGroupErrorStackTraceDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiagnosticsStackTrace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiagnosticsStackTrace.class);
                res.diagnosticsStackTrace = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupErrorStackTraceDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupErrorStackTraceDefaultApplicationJSON.class);
                res.errorsGroupErrorStackTraceDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List of error groups
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGroupListResponse errorsGroupList(org.openapis.openapi.models.operations.ErrorsGroupListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGroupListPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsGroupListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGroupListResponse res = new org.openapis.openapi.models.operations.ErrorsGroupListResponse() {{
            errorsGroupList200ApplicationJSONObject = null;
            errorsGroupListDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupList200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupList200ApplicationJSON.class);
                res.errorsGroupList200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupListDefaultApplicationJSON.class);
                res.errorsGroupListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Top models of the selected error group.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGroupModelCountsResponse errorsGroupModelCounts(org.openapis.openapi.models.operations.ErrorsGroupModelCountsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGroupModelCountsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsGroupModelCountsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGroupModelCountsResponse res = new org.openapis.openapi.models.operations.ErrorsGroupModelCountsResponse() {{
            errorsGroupModelCounts200ApplicationJSONObject = null;
            errorsGroupModelCountsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupModelCounts200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupModelCounts200ApplicationJSON.class);
                res.errorsGroupModelCounts200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupModelCountsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupModelCountsDefaultApplicationJSON.class);
                res.errorsGroupModelCountsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Top OSes of the selected error group.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsResponse errorsGroupOperatingSystemCounts(org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsResponse res = new org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsResponse() {{
            errorsGroupOperatingSystemCounts200ApplicationJSONObject = null;
            errorsGroupOperatingSystemCountsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCounts200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCounts200ApplicationJSON.class);
                res.errorsGroupOperatingSystemCounts200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGroupOperatingSystemCountsDefaultApplicationJSON.class);
                res.errorsGroupOperatingSystemCountsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Latest error details.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsLatestErrorDetailsResponse errorsLatestErrorDetails(org.openapis.openapi.models.operations.ErrorsLatestErrorDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsLatestErrorDetailsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsLatestErrorDetailsResponse res = new org.openapis.openapi.models.operations.ErrorsLatestErrorDetailsResponse() {{
            errorsLatestErrorDetails200ApplicationJSONObject = null;
            errorsLatestErrorDetailsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsLatestErrorDetails200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsLatestErrorDetails200ApplicationJSON.class);
                res.errorsLatestErrorDetails200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsLatestErrorDetailsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsLatestErrorDetailsDefaultApplicationJSON.class);
                res.errorsLatestErrorDetailsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all errors for group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsListForGroupResponse errorsListForGroup(org.openapis.openapi.models.operations.ErrorsListForGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsListForGroupPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsListForGroupQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsListForGroupResponse res = new org.openapis.openapi.models.operations.ErrorsListForGroupResponse() {{
            errorsListForGroup200ApplicationJSONObject = null;
            errorsListForGroupDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsListForGroup200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsListForGroup200ApplicationJSON.class);
                res.errorsListForGroup200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsListForGroupDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsListForGroupDefaultApplicationJSON.class);
                res.errorsListForGroupDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get session logs by error ID
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsListSessionLogsResponse errorsListSessionLogs(org.openapis.openapi.models.operations.ErrorsListSessionLogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsListSessionLogsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ErrorsListSessionLogsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsListSessionLogsResponse res = new org.openapis.openapi.models.operations.ErrorsListSessionLogsResponse() {{
            errorsListSessionLogs200ApplicationJSONObject = null;
            errorsListSessionLogsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsListSessionLogs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsListSessionLogs200ApplicationJSON.class);
                res.errorsListSessionLogs200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsListSessionLogsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsListSessionLogsDefaultApplicationJSON.class);
                res.errorsListSessionLogsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update error group state
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsUpdateStateResponse errorsUpdateState(org.openapis.openapi.models.operations.ErrorsUpdateStateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsUpdateStatePathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsUpdateStateResponse res = new org.openapis.openapi.models.operations.ErrorsUpdateStateResponse() {{
            errorsUpdateState200ApplicationJSONObject = null;
            errorsUpdateStateDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsUpdateState200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsUpdateState200ApplicationJSON.class);
                res.errorsUpdateState200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsUpdateStateDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsUpdateStateDefaultApplicationJSON.class);
                res.errorsUpdateStateDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * gets the retention settings in days
     * gets the retention settings in days
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ErrorsGetRetentionSettingsResponse errorsGetRetentionSettings(org.openapis.openapi.models.operations.ErrorsGetRetentionSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ErrorsGetRetentionSettingsPathParams.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ErrorsGetRetentionSettingsResponse res = new org.openapis.openapi.models.operations.ErrorsGetRetentionSettingsResponse() {{
            errorsGetRetentionSettings200ApplicationJSONObject = null;
            errorsGetRetentionSettingsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGetRetentionSettings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGetRetentionSettings200ApplicationJSON.class);
                res.errorsGetRetentionSettings200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ErrorsGetRetentionSettingsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ErrorsGetRetentionSettingsDefaultApplicationJSON.class);
                res.errorsGetRetentionSettingsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }
}