// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum - Status of responses from attendees
type CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum string

const (
	CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnumNeedsAction CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum = "needsAction"
	CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnumDeclined    CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum = "declined"
	CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnumTentative   CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum = "tentative"
	CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnumAccepted    CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum = "accepted"
)

func (e CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum) ToPointer() *CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum {
	return &e
}

func (e *CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "needsAction":
		fallthrough
	case "declined":
		fallthrough
	case "tentative":
		fallthrough
	case "accepted":
		*e = CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum: %v", v)
	}
}

type CreateCalendarEventRequestDataAttributesAttendees struct {
	// Status of responses from attendees
	ResponseStatus *CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum `json:"response_status,omitempty"`
	User           *string                                                              `json:"user,omitempty"`
}

// CreateCalendarEventRequestDataAttributesTypeEnum - The type of calendar event. Immutable after event creation.
type CreateCalendarEventRequestDataAttributesTypeEnum string

const (
	CreateCalendarEventRequestDataAttributesTypeEnumPlanCheckIn   CreateCalendarEventRequestDataAttributesTypeEnum = "plan-check-in"
	CreateCalendarEventRequestDataAttributesTypeEnumReminder      CreateCalendarEventRequestDataAttributesTypeEnum = "reminder"
	CreateCalendarEventRequestDataAttributesTypeEnumTelephoneCall CreateCalendarEventRequestDataAttributesTypeEnum = "telephone-call"
	CreateCalendarEventRequestDataAttributesTypeEnumOfficeVisit   CreateCalendarEventRequestDataAttributesTypeEnum = "office-visit"
	CreateCalendarEventRequestDataAttributesTypeEnumVideoCall     CreateCalendarEventRequestDataAttributesTypeEnum = "video-call"
)

func (e CreateCalendarEventRequestDataAttributesTypeEnum) ToPointer() *CreateCalendarEventRequestDataAttributesTypeEnum {
	return &e
}

func (e *CreateCalendarEventRequestDataAttributesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "plan-check-in":
		fallthrough
	case "reminder":
		fallthrough
	case "telephone-call":
		fallthrough
	case "office-visit":
		fallthrough
	case "video-call":
		*e = CreateCalendarEventRequestDataAttributesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCalendarEventRequestDataAttributesTypeEnum: %v", v)
	}
}

type CreateCalendarEventRequestDataAttributes struct {
	// True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.
	AllDay *bool `json:"all_day,omitempty"`
	// List of attendees for the calendar event
	Attendees []CreateCalendarEventRequestDataAttributesAttendees `json:"attendees"`
	// The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.
	CompletedAt *string `json:"completed_at,omitempty"`
	// The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.
	CompletedBy map[string]interface{} `json:"completed_by,omitempty"`
	Description *string                `json:"description,omitempty"`
	// The date and time when the calendar event ends. Not valid for `plan-check-in` event type.
	EndAt    *string `json:"end_at,omitempty"`
	Location *string `json:"location,omitempty"`
	// The date and time when the calendar event starts
	StartAt string `json:"start_at"`
	// The time zone in which the dates for the calendar event are specified
	TimeZone *string `json:"time_zone,omitempty"`
	// The title of the calendar event. Must not be empty or null
	Title string `json:"title"`
	// The type of calendar event. Immutable after event creation.
	Type CreateCalendarEventRequestDataAttributesTypeEnum `json:"type"`
}

type CreateCalendarEventRequestDataRelationshipsOwner struct {
	Data Data `json:"data"`
}

type CreateCalendarEventRequestDataRelationships struct {
	Owner *CreateCalendarEventRequestDataRelationshipsOwner `json:"owner,omitempty"`
}

type CreateCalendarEventRequestData struct {
	Attributes    CreateCalendarEventRequestDataAttributes    `json:"attributes"`
	Relationships CreateCalendarEventRequestDataRelationships `json:"relationships"`
	Type          TypeEnum                                    `json:"type"`
}

type CreateCalendarEventRequest struct {
	Data CreateCalendarEventRequestData `json:"data"`
}
