/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
 */
export class StaticFilesHandler extends SpeakeasyBase {
  /**
   * Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applicationReadable" })
  applicationReadable?: boolean;

  /**
   * Time a static file served by this handler should be cached by web proxies and browsers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration" })
  expiration?: string;

  /**
   * HTTP headers to use for all responses from these URLs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpHeaders" })
  httpHeaders?: Record<string, string>;

  /**
   * MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mimeType" })
  mimeType?: string;

  /**
   * Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;

  /**
   * Whether this handler should match the request if the file referenced by the handler does not exist.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requireMatchingFile" })
  requireMatchingFile?: boolean;

  /**
   * Regular expression that matches the file paths for all files that should be referenced by this handler.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploadPathRegex" })
  uploadPathRegex?: string;
}
