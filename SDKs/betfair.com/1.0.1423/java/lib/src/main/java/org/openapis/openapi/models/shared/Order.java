/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Order {
    /**
     * Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for\u00a0these markets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avp")
    public Double avp;
    public Order withAvp(Double avp) {
        this.avp = avp;
        return this;
    }
    
    /**
     * BSP Liability - the BSP liability of the order (null if the order is not a BSP order)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bsp")
    public Double bsp;
    public Order withBsp(Double bsp) {
        this.bsp = bsp;
        return this;
    }
    
    /**
     * Cancelled Date - the date the order was cancelled (null if the order is not cancelled)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cd")
    public Long cd;
    public Order withCd(Long cd) {
        this.cd = cd;
        return this;
    }
    
    /**
     * Bet Id - the id of the order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Order withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Lapsed Date - the date the order was lapsed (null if the order is not lapsed)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ld")
    public Long ld;
    public Order withLd(Long ld) {
        this.ld = ld;
        return this;
    }
    
    /**
     * Lapse Status Reason Code - the reason that some or all of this order has been lapsed (null if no portion of the order is lapsed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lsrc")
    public String lsrc;
    public Order withLsrc(String lsrc) {
        this.lsrc = lsrc;
        return this;
    }
    
    /**
     * Matched Date - the date the order was matched (null if the order is not matched)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("md")
    public Long md;
    public Order withMd(Long md) {
        this.md = md;
        return this;
    }
    
    /**
     * Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ot")
    public OrderOtEnum ot;
    public Order withOt(OrderOtEnum ot) {
        this.ot = ot;
        return this;
    }
    
    /**
     * Price - the original placed price of the order. Line markets operate at even-money odds of 2.0.\u00a0However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("p")
    public Double p;
    public Order withP(Double p) {
        this.p = p;
        return this;
    }
    
    /**
     * Placed Date - the date the order was placed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pd")
    public Long pd;
    public Order withPd(Long pd) {
        this.pd = pd;
        return this;
    }
    
    /**
     * Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pt")
    public OrderPtEnum pt;
    public Order withPt(OrderPtEnum pt) {
        this.pt = pt;
        return this;
    }
    
    /**
     * Regulator Auth Code - the auth code returned by the regulator
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rac")
    public String rac;
    public Order withRac(String rac) {
        this.rac = rac;
        return this;
    }
    
    /**
     * Regulator Code - the regulator of the order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rc")
    public String rc;
    public Order withRc(String rc) {
        this.rc = rc;
        return this;
    }
    
    /**
     * Order Reference - the customer's order reference for this order (empty string if one was not set)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rfo")
    public String rfo;
    public Order withRfo(String rfo) {
        this.rfo = rfo;
        return this;
    }
    
    /**
     * Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rfs")
    public String rfs;
    public Order withRfs(String rfs) {
        this.rfs = rfs;
        return this;
    }
    
    /**
     * Size - the original placed size of the order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s")
    public Double s;
    public Order withS(Double s) {
        this.s = s;
        return this;
    }
    
    /**
     * Size Cancelled - the amount of the order that has been cancelled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sc")
    public Double sc;
    public Order withSc(Double sc) {
        this.sc = sc;
        return this;
    }
    
    /**
     * Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers\u00a0to a BUY line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("side")
    public OrderSideEnum side;
    public Order withSide(OrderSideEnum side) {
        this.side = side;
        return this;
    }
    
    /**
     * Size Lapsed - the amount of the order that has been lapsed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sl")
    public Double sl;
    public Order withSl(Double sl) {
        this.sl = sl;
        return this;
    }
    
    /**
     * Size Matched - the amount of the order that has been matched
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sm")
    public Double sm;
    public Order withSm(Double sm) {
        this.sm = sm;
        return this;
    }
    
    /**
     * Size Remaining - the amount of the order that is remaining unmatched
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sr")
    public Double sr;
    public Order withSr(Double sr) {
        this.sr = sr;
        return this;
    }
    
    /**
     * Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public OrderStatusEnum status;
    public Order withStatus(OrderStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Size Voided - the amount of the order that has been voided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sv")
    public Double sv;
    public Order withSv(Double sv) {
        this.sv = sv;
        return this;
    }
    
}
