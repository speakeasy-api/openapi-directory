"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Webhooks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def web_hook_management_delete(self, request: operations.WebHookManagementDeleteRequest) -> operations.WebHookManagementDeleteResponse:
        r"""Deletes an existing WebHook registration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebHookManagementDeleteRequest, base_url, '/api/v1/webhooks/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebHookManagementDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.web_hook_management_delete_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.web_hook_management_delete_200_text_json_object = out

        return res

    def web_hook_management_delete_all(self) -> operations.WebHookManagementDeleteAllResponse:
        r"""Deletes all existing WebHook registrations."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/webhooks'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebHookManagementDeleteAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.web_hook_management_delete_all_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.web_hook_management_delete_all_200_text_json_object = out

        return res

    def web_hook_management_get(self) -> operations.WebHookManagementGetResponse:
        r"""Gets all registered WebHooks for a given user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/webhooks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebHookManagementGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel]])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_models = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel]])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_models = out

        return res

    def web_hook_management_get_filters(self) -> operations.WebHookManagementGetFiltersResponse:
        r"""Returns a list of all known filters you can use to register webhooks"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/webhooks/filters'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebHookManagementGetFiltersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.web_hook_management_get_filters_200_application_json_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.web_hook_management_get_filters_200_text_json_object = out

        return res

    def web_hook_management_lookup(self, request: operations.WebHookManagementLookupRequest) -> operations.WebHookManagementLookupResponse:
        r"""Looks up a registered WebHook with the given {id} for a given user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebHookManagementLookupRequest, base_url, '/api/v1/webhooks/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebHookManagementLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_model = out

        return res

    def web_hook_management_post(self, request: shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel) -> operations.WebHookManagementPostResponse:
        r"""Registers a new WebHook for a given user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/webhooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebHookManagementPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_model = out

        return res

    def web_hook_management_put(self, request: operations.WebHookManagementPutRequest) -> operations.WebHookManagementPutResponse:
        r"""Updates an existing WebHook registration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebHookManagementPutRequest, base_url, '/api/v1/webhooks/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rechnungsdruck_web_app_controllers_api_web_hook_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebHookManagementPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RechnungsdruckWebAppControllersAPIWebHookAPIModel])
                res.rechnungsdruck_web_app_controllers_api_web_hook_api_model = out

        return res

    