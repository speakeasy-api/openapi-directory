<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Buyer - This type contains information about the order's buyer.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Buyer
{
    /**
     * This container consists of address information that can be used by sellers for tax purpose.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TaxAddress $taxAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('taxAddress')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TaxAddress')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TaxAddress $taxAddress = null;
    
    /**
     * This type is used by the <strong>taxIdentifier</strong> container that is returned in <strong>getOrder</strong>. The <strong>taxIdentifier</strong> container consists of taxpayer identification information for buyers from Italy, Spain, or Guatemala. It is currently only returned for orders occurring on the eBay Italy or eBay Spain marketplaces.<br><br><span class="tablenote"><strong>Note:</strong> Currently, the <strong>taxIdentifier</strong> container is only returned in <strong>getOrder</strong> and not in <strong>getOrders</strong>. So, if a seller wanted to view a buyer's tax information for a particular order returned in <strong>getOrders</strong>, that seller would need to use the <strong>orderId</strong> value for that particular order, and then run a <strong>getOrder</strong> call against that order ID. </span>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TaxIdentifier $taxIdentifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('taxIdentifier')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TaxIdentifier')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TaxIdentifier $taxIdentifier = null;
    
    /**
     * The buyer's eBay user ID.
     * 
     * @var ?string $username
     */
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $username = null;
    
	public function __construct()
	{
		$this->taxAddress = null;
		$this->taxIdentifier = null;
		$this->username = null;
	}
}
