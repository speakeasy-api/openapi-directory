/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NamespacedName } from "./namespacedname";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The current state of this VolumeRestore.
 */
export enum VolumeRestoreStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Creating = "CREATING",
  Restoring = "RESTORING",
  Succeeded = "SUCCEEDED",
  Failed = "FAILED",
  Deleting = "DELETING",
}

/**
 * Output only. The type of volume provisioned
 */
export enum VolumeRestoreVolumeTypeEnum {
  VolumeTypeUnspecified = "VOLUME_TYPE_UNSPECIFIED",
  GcePersistentDisk = "GCE_PERSISTENT_DISK",
}

/**
 * Represents the operation of restoring a volume from a VolumeBackup. Next id: 13
 */
export class VolumeRestore extends SpeakeasyBase {
  /**
   * Output only. The timestamp when the associated underlying volume restoration completed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completeTime" })
  completeTime?: string;

  /**
   * Output only. The timestamp when this VolumeRestore resource was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume restore updates in order to avoid race conditions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * Output only. Full name of the VolumeRestore resource. Format: `projects/* /locations/* /restorePlans/* /restores/* /volumeRestores/*`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. The current state of this VolumeRestore.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: VolumeRestoreStateEnum;

  /**
   * Output only. A human readable message explaining why the VolumeRestore is in its current state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stateMessage" })
  stateMessage?: string;

  /**
   * A reference to a namespaced resource in Kubernetes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetPvc" })
  @Type(() => NamespacedName)
  targetPvc?: NamespacedName;

  /**
   * Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uid" })
  uid?: string;

  /**
   * Output only. The timestamp when this VolumeRestore resource was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;

  /**
   * Output only. The full name of the VolumeBackup from which the volume will be restored. Format: `projects/* /locations/* /backupPlans/* /backups/* /volumeBackups/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volumeBackup" })
  volumeBackup?: string;

  /**
   * Output only. A storage system-specific opaque handler to the underlying volume created for the target PVC from the volume backup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volumeHandle" })
  volumeHandle?: string;

  /**
   * Output only. The type of volume provisioned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volumeType" })
  volumeType?: VolumeRestoreVolumeTypeEnum;
}
