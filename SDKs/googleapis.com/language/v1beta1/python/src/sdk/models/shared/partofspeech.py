"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PartOfSpeechAspectEnum(str, Enum):
    r"""The grammatical aspect."""
    ASPECT_UNKNOWN = 'ASPECT_UNKNOWN'
    PERFECTIVE = 'PERFECTIVE'
    IMPERFECTIVE = 'IMPERFECTIVE'
    PROGRESSIVE = 'PROGRESSIVE'

class PartOfSpeechCaseEnum(str, Enum):
    r"""The grammatical case."""
    CASE_UNKNOWN = 'CASE_UNKNOWN'
    ACCUSATIVE = 'ACCUSATIVE'
    ADVERBIAL = 'ADVERBIAL'
    COMPLEMENTIVE = 'COMPLEMENTIVE'
    DATIVE = 'DATIVE'
    GENITIVE = 'GENITIVE'
    INSTRUMENTAL = 'INSTRUMENTAL'
    LOCATIVE = 'LOCATIVE'
    NOMINATIVE = 'NOMINATIVE'
    OBLIQUE = 'OBLIQUE'
    PARTITIVE = 'PARTITIVE'
    PREPOSITIONAL = 'PREPOSITIONAL'
    REFLEXIVE_CASE = 'REFLEXIVE_CASE'
    RELATIVE_CASE = 'RELATIVE_CASE'
    VOCATIVE = 'VOCATIVE'

class PartOfSpeechFormEnum(str, Enum):
    r"""The grammatical form."""
    FORM_UNKNOWN = 'FORM_UNKNOWN'
    ADNOMIAL = 'ADNOMIAL'
    AUXILIARY = 'AUXILIARY'
    COMPLEMENTIZER = 'COMPLEMENTIZER'
    FINAL_ENDING = 'FINAL_ENDING'
    GERUND = 'GERUND'
    REALIS = 'REALIS'
    IRREALIS = 'IRREALIS'
    SHORT = 'SHORT'
    LONG = 'LONG'
    ORDER = 'ORDER'
    SPECIFIC = 'SPECIFIC'

class PartOfSpeechGenderEnum(str, Enum):
    r"""The grammatical gender."""
    GENDER_UNKNOWN = 'GENDER_UNKNOWN'
    FEMININE = 'FEMININE'
    MASCULINE = 'MASCULINE'
    NEUTER = 'NEUTER'

class PartOfSpeechMoodEnum(str, Enum):
    r"""The grammatical mood."""
    MOOD_UNKNOWN = 'MOOD_UNKNOWN'
    CONDITIONAL_MOOD = 'CONDITIONAL_MOOD'
    IMPERATIVE = 'IMPERATIVE'
    INDICATIVE = 'INDICATIVE'
    INTERROGATIVE = 'INTERROGATIVE'
    JUSSIVE = 'JUSSIVE'
    SUBJUNCTIVE = 'SUBJUNCTIVE'

class PartOfSpeechNumberEnum(str, Enum):
    r"""The grammatical number."""
    NUMBER_UNKNOWN = 'NUMBER_UNKNOWN'
    SINGULAR = 'SINGULAR'
    PLURAL = 'PLURAL'
    DUAL = 'DUAL'

class PartOfSpeechPersonEnum(str, Enum):
    r"""The grammatical person."""
    PERSON_UNKNOWN = 'PERSON_UNKNOWN'
    FIRST = 'FIRST'
    SECOND = 'SECOND'
    THIRD = 'THIRD'
    REFLEXIVE_PERSON = 'REFLEXIVE_PERSON'

class PartOfSpeechProperEnum(str, Enum):
    r"""The grammatical properness."""
    PROPER_UNKNOWN = 'PROPER_UNKNOWN'
    PROPER = 'PROPER'
    NOT_PROPER = 'NOT_PROPER'

class PartOfSpeechReciprocityEnum(str, Enum):
    r"""The grammatical reciprocity."""
    RECIPROCITY_UNKNOWN = 'RECIPROCITY_UNKNOWN'
    RECIPROCAL = 'RECIPROCAL'
    NON_RECIPROCAL = 'NON_RECIPROCAL'

class PartOfSpeechTagEnum(str, Enum):
    r"""The part of speech tag."""
    UNKNOWN = 'UNKNOWN'
    ADJ = 'ADJ'
    ADP = 'ADP'
    ADV = 'ADV'
    CONJ = 'CONJ'
    DET = 'DET'
    NOUN = 'NOUN'
    NUM = 'NUM'
    PRON = 'PRON'
    PRT = 'PRT'
    PUNCT = 'PUNCT'
    VERB = 'VERB'
    X = 'X'
    AFFIX = 'AFFIX'

class PartOfSpeechTenseEnum(str, Enum):
    r"""The grammatical tense."""
    TENSE_UNKNOWN = 'TENSE_UNKNOWN'
    CONDITIONAL_TENSE = 'CONDITIONAL_TENSE'
    FUTURE = 'FUTURE'
    PAST = 'PAST'
    PRESENT = 'PRESENT'
    IMPERFECT = 'IMPERFECT'
    PLUPERFECT = 'PLUPERFECT'

class PartOfSpeechVoiceEnum(str, Enum):
    r"""The grammatical voice."""
    VOICE_UNKNOWN = 'VOICE_UNKNOWN'
    ACTIVE = 'ACTIVE'
    CAUSATIVE = 'CAUSATIVE'
    PASSIVE = 'PASSIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PartOfSpeech:
    r"""Represents part of speech information for a token."""
    
    aspect: Optional[PartOfSpeechAspectEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aspect'), 'exclude': lambda f: f is None }})
    r"""The grammatical aspect."""  
    case: Optional[PartOfSpeechCaseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('case'), 'exclude': lambda f: f is None }})
    r"""The grammatical case."""  
    form: Optional[PartOfSpeechFormEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form'), 'exclude': lambda f: f is None }})
    r"""The grammatical form."""  
    gender: Optional[PartOfSpeechGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""The grammatical gender."""  
    mood: Optional[PartOfSpeechMoodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mood'), 'exclude': lambda f: f is None }})
    r"""The grammatical mood."""  
    number: Optional[PartOfSpeechNumberEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The grammatical number."""  
    person: Optional[PartOfSpeechPersonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person'), 'exclude': lambda f: f is None }})
    r"""The grammatical person."""  
    proper: Optional[PartOfSpeechProperEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proper'), 'exclude': lambda f: f is None }})
    r"""The grammatical properness."""  
    reciprocity: Optional[PartOfSpeechReciprocityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reciprocity'), 'exclude': lambda f: f is None }})
    r"""The grammatical reciprocity."""  
    tag: Optional[PartOfSpeechTagEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""The part of speech tag."""  
    tense: Optional[PartOfSpeechTenseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tense'), 'exclude': lambda f: f is None }})
    r"""The grammatical tense."""  
    voice: Optional[PartOfSpeechVoiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice'), 'exclude': lambda f: f is None }})
    r"""The grammatical voice."""  
    