"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import responsepolicyrulelocaldata as shared_responsepolicyrulelocaldata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ResponsePolicyRuleBehaviorEnum(str, Enum):
    r"""Answer this query with a behavior rather than DNS data."""
    BEHAVIOR_UNSPECIFIED = 'behaviorUnspecified'
    BYPASS_RESPONSE_POLICY = 'bypassResponsePolicy'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResponsePolicyRule:
    r"""A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix."""
    
    behavior: Optional[ResponsePolicyRuleBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('behavior'), 'exclude': lambda f: f is None }})
    r"""Answer this query with a behavior rather than DNS data."""  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsName'), 'exclude': lambda f: f is None }})
    r"""The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    local_data: Optional[shared_responsepolicyrulelocaldata.ResponsePolicyRuleLocalData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localData'), 'exclude': lambda f: f is None }})  
    rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleName'), 'exclude': lambda f: f is None }})
    r"""An identifier for this rule. Must be unique with the ResponsePolicy."""  
    