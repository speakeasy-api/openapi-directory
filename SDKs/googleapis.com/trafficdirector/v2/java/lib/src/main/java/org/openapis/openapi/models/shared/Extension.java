/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Extension - Version and identification for an Envoy extension. [#next-free-field: 6]
 */
public class Extension {
    /**
     * Category of the extension. Extension category names use reverse DNS notation. For instance "envoy.filters.listener" for Envoy's built-in listener filters or "com.acme.filters.http" for HTTP filters from acme.com vendor. [#comment:
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public String category;
    public Extension withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * Indicates that the extension is present but was disabled via dynamic configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;
    public Extension withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Extension withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * [#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("typeDescriptor")
    public String typeDescriptor;
    public Extension withTypeDescriptor(String typeDescriptor) {
        this.typeDescriptor = typeDescriptor;
        return this;
    }
    
    /**
     * BuildVersion combines SemVer version of extension with free-form build information (i.e. 'alpha', 'private-build') as a set of strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public BuildVersion version;
    public Extension withVersion(BuildVersion version) {
        this.version = version;
        return this;
    }
    
}
