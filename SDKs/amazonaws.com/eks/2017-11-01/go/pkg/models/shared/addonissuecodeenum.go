// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AddonIssueCodeEnum string

const (
	AddonIssueCodeEnumAccessDenied                 AddonIssueCodeEnum = "AccessDenied"
	AddonIssueCodeEnumInternalFailure              AddonIssueCodeEnum = "InternalFailure"
	AddonIssueCodeEnumClusterUnreachable           AddonIssueCodeEnum = "ClusterUnreachable"
	AddonIssueCodeEnumInsufficientNumberOfReplicas AddonIssueCodeEnum = "InsufficientNumberOfReplicas"
	AddonIssueCodeEnumConfigurationConflict        AddonIssueCodeEnum = "ConfigurationConflict"
	AddonIssueCodeEnumAdmissionRequestDenied       AddonIssueCodeEnum = "AdmissionRequestDenied"
	AddonIssueCodeEnumUnsupportedAddonModification AddonIssueCodeEnum = "UnsupportedAddonModification"
	AddonIssueCodeEnumK8sResourceNotFound          AddonIssueCodeEnum = "K8sResourceNotFound"
)

func (e AddonIssueCodeEnum) ToPointer() *AddonIssueCodeEnum {
	return &e
}

func (e *AddonIssueCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AccessDenied":
		fallthrough
	case "InternalFailure":
		fallthrough
	case "ClusterUnreachable":
		fallthrough
	case "InsufficientNumberOfReplicas":
		fallthrough
	case "ConfigurationConflict":
		fallthrough
	case "AdmissionRequestDenied":
		fallthrough
	case "UnsupportedAddonModification":
		fallthrough
	case "K8sResourceNotFound":
		*e = AddonIssueCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddonIssueCodeEnum: %v", v)
	}
}
