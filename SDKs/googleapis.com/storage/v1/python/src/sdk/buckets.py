"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Buckets:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def storage_buckets_delete(self, request: operations.StorageBucketsDeleteRequest, security: operations.StorageBucketsDeleteSecurity) -> operations.StorageBucketsDeleteResponse:
        r"""Permanently deletes an empty bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsDeleteRequest, base_url, '/b/{bucket}', request)
        
        query_params = utils.get_query_params(operations.StorageBucketsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def storage_buckets_get(self, request: operations.StorageBucketsGetRequest, security: operations.StorageBucketsGetSecurity) -> operations.StorageBucketsGetResponse:
        r"""Returns metadata for the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsGetRequest, base_url, '/b/{bucket}', request)
        
        query_params = utils.get_query_params(operations.StorageBucketsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bucket])
                res.bucket = out

        return res

    def storage_buckets_get_iam_policy(self, request: operations.StorageBucketsGetIamPolicyRequest, security: operations.StorageBucketsGetIamPolicySecurity) -> operations.StorageBucketsGetIamPolicyResponse:
        r"""Returns an IAM policy for the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsGetIamPolicyRequest, base_url, '/b/{bucket}/iam', request)
        
        query_params = utils.get_query_params(operations.StorageBucketsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def storage_buckets_insert(self, request: operations.StorageBucketsInsertRequest, security: operations.StorageBucketsInsertSecurity) -> operations.StorageBucketsInsertResponse:
        r"""Creates a new bucket."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/b'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bucket", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageBucketsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bucket])
                res.bucket = out

        return res

    def storage_buckets_list(self, request: operations.StorageBucketsListRequest, security: operations.StorageBucketsListSecurity) -> operations.StorageBucketsListResponse:
        r"""Retrieves a list of buckets for a given project."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/b'
        
        query_params = utils.get_query_params(operations.StorageBucketsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Buckets])
                res.buckets = out

        return res

    def storage_buckets_lock_retention_policy(self, request: operations.StorageBucketsLockRetentionPolicyRequest, security: operations.StorageBucketsLockRetentionPolicySecurity) -> operations.StorageBucketsLockRetentionPolicyResponse:
        r"""Locks retention policy on a bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsLockRetentionPolicyRequest, base_url, '/b/{bucket}/lockRetentionPolicy', request)
        
        query_params = utils.get_query_params(operations.StorageBucketsLockRetentionPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsLockRetentionPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bucket])
                res.bucket = out

        return res

    def storage_buckets_patch(self, request: operations.StorageBucketsPatchRequest, security: operations.StorageBucketsPatchSecurity) -> operations.StorageBucketsPatchResponse:
        r"""Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsPatchRequest, base_url, '/b/{bucket}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bucket1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageBucketsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bucket])
                res.bucket = out

        return res

    def storage_buckets_set_iam_policy(self, request: operations.StorageBucketsSetIamPolicyRequest, security: operations.StorageBucketsSetIamPolicySecurity) -> operations.StorageBucketsSetIamPolicyResponse:
        r"""Updates an IAM policy for the specified bucket."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsSetIamPolicyRequest, base_url, '/b/{bucket}/iam', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "policy", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageBucketsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def storage_buckets_test_iam_permissions(self, request: operations.StorageBucketsTestIamPermissionsRequest, security: operations.StorageBucketsTestIamPermissionsSecurity) -> operations.StorageBucketsTestIamPermissionsResponse:
        r"""Tests a set of permissions on the given bucket to see which, if any, are held by the caller."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsTestIamPermissionsRequest, base_url, '/b/{bucket}/iam/testPermissions', request)
        
        query_params = utils.get_query_params(operations.StorageBucketsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    def storage_buckets_update(self, request: operations.StorageBucketsUpdateRequest, security: operations.StorageBucketsUpdateSecurity) -> operations.StorageBucketsUpdateResponse:
        r"""Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageBucketsUpdateRequest, base_url, '/b/{bucket}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bucket1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageBucketsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageBucketsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bucket])
                res.bucket = out

        return res

    