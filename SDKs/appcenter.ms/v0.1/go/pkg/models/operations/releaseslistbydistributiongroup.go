// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesListByDistributionGroupSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ReleasesListByDistributionGroupRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the distribution group.
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ReleasesListByDistributionGroup404ApplicationJSONCodeEnum string

const (
	ReleasesListByDistributionGroup404ApplicationJSONCodeEnumBadRequest          ReleasesListByDistributionGroup404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesListByDistributionGroup404ApplicationJSONCodeEnumConflict            ReleasesListByDistributionGroup404ApplicationJSONCodeEnum = "Conflict"
	ReleasesListByDistributionGroup404ApplicationJSONCodeEnumNotAcceptable       ReleasesListByDistributionGroup404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesListByDistributionGroup404ApplicationJSONCodeEnumNotFound            ReleasesListByDistributionGroup404ApplicationJSONCodeEnum = "NotFound"
	ReleasesListByDistributionGroup404ApplicationJSONCodeEnumInternalServerError ReleasesListByDistributionGroup404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesListByDistributionGroup404ApplicationJSONCodeEnumUnauthorized        ReleasesListByDistributionGroup404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesListByDistributionGroup404ApplicationJSONCodeEnumTooManyRequests     ReleasesListByDistributionGroup404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesListByDistributionGroup404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesListByDistributionGroup404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesListByDistributionGroup404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesListByDistributionGroup404ApplicationJSON - A distribution group can't be found.
type ReleasesListByDistributionGroup404ApplicationJSON struct {
	Code    ReleasesListByDistributionGroup404ApplicationJSONCodeEnum `json:"code"`
	Message string                                                    `json:"message"`
}

// ReleasesListByDistributionGroup200ApplicationJSONOriginEnum - The release's origin
type ReleasesListByDistributionGroup200ApplicationJSONOriginEnum string

const (
	ReleasesListByDistributionGroup200ApplicationJSONOriginEnumHockeyapp ReleasesListByDistributionGroup200ApplicationJSONOriginEnum = "hockeyapp"
	ReleasesListByDistributionGroup200ApplicationJSONOriginEnumAppcenter ReleasesListByDistributionGroup200ApplicationJSONOriginEnum = "appcenter"
)

func (e *ReleasesListByDistributionGroup200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hockeyapp":
		fallthrough
	case "appcenter":
		*e = ReleasesListByDistributionGroup200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesListByDistributionGroup200ApplicationJSONOriginEnum: %s", s)
	}
}

// ReleasesListByDistributionGroup200ApplicationJSON - Response for getting a list of releases in a distribution group
type ReleasesListByDistributionGroup200ApplicationJSON struct {
	// This value determines the whether a release currently is enabled or disabled.
	Enabled bool `json:"enabled"`
	// ID identifying this unique release.
	ID int64 `json:"id"`
	// This value determines if a release is external or not.
	IsExternalBuild *bool `json:"is_external_build,omitempty"`
	// A boolean which determines whether the release is a mandatory update or not.
	MandatoryUpdate bool `json:"mandatory_update"`
	// The release's origin
	Origin *ReleasesListByDistributionGroup200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// The release's short version.<br>
	// For iOS: CFBundleShortVersionString from info.plist.<br>
	// For Android: android:versionName from AppManifest.xml.
	//
	ShortVersion string `json:"short_version"`
	// UTC time in ISO 8601 format of the uploaded time.
	UploadedAt string `json:"uploaded_at"`
	// The release's version.<br>
	// For iOS: CFBundleVersion from info.plist.<br>
	// For Android: android:versionCode from AppManifest.xml.
	//
	Version string `json:"version"`
}

type ReleasesListByDistributionGroupResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesListByDistributionGroup200ApplicationJSONObjects []ReleasesListByDistributionGroup200ApplicationJSON
	// A distribution group can't be found.
	//
	ReleasesListByDistributionGroup404ApplicationJSONObject *ReleasesListByDistributionGroup404ApplicationJSON
}
