/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * OrderExportationReporting - Represent the reporting of the Order report exportations
 */
public class OrderExportationReporting {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("abortionUtcDate")
    public OffsetDateTime abortionUtcDate;

    public OrderExportationReporting withAbortionUtcDate(OffsetDateTime abortionUtcDate) {
        this.abortionUtcDate = abortionUtcDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("beginUtcDate")
    public OffsetDateTime beginUtcDate;

    public OrderExportationReporting withBeginUtcDate(OffsetDateTime beginUtcDate) {
        this.beginUtcDate = beginUtcDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blobNameUri")
    public String blobNameUri;

    public OrderExportationReporting withBlobNameUri(String blobNameUri) {
        this.blobNameUri = blobNameUri;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endUtcDate")
    public OffsetDateTime endUtcDate;

    public OrderExportationReporting withEndUtcDate(OffsetDateTime endUtcDate) {
        this.endUtcDate = endUtcDate;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("enqueuedUtcDate")
    public OffsetDateTime enqueuedUtcDate;

    public OrderExportationReporting withEnqueuedUtcDate(OffsetDateTime enqueuedUtcDate) {
        this.enqueuedUtcDate = enqueuedUtcDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    public String errorMessage;

    public OrderExportationReporting withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    @JsonProperty("executionUUID")
    public String executionUUID;

    public OrderExportationReporting withExecutionUUID(String executionUUID) {
        this.executionUUID = executionUUID;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expirationUtcDate")
    public OffsetDateTime expirationUtcDate;

    public OrderExportationReporting withExpirationUtcDate(OffsetDateTime expirationUtcDate) {
        this.expirationUtcDate = expirationUtcDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("failureUtcDate")
    public OffsetDateTime failureUtcDate;

    public OrderExportationReporting withFailureUtcDate(OffsetDateTime failureUtcDate) {
        this.failureUtcDate = failureUtcDate;
        return this;
    }
    
    @JsonProperty("ipAddress")
    public String ipAddress;

    public OrderExportationReporting withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Raw representation of the JSON
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jsonCriteria")
    public String jsonCriteria;

    public OrderExportationReporting withJsonCriteria(String jsonCriteria) {
        this.jsonCriteria = jsonCriteria;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateUtcDate")
    public OffsetDateTime lastUpdateUtcDate;

    public OrderExportationReporting withLastUpdateUtcDate(OffsetDateTime lastUpdateUtcDate) {
        this.lastUpdateUtcDate = lastUpdateUtcDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderCount")
    public Integer orderCount;

    public OrderExportationReporting withOrderCount(Integer orderCount) {
        this.orderCount = orderCount;
        return this;
    }
    
    @JsonProperty("processingStatus")
    public OrderExportationReportingProcessingStatusEnum processingStatus;

    public OrderExportationReporting withProcessingStatus(OrderExportationReportingProcessingStatusEnum processingStatus) {
        this.processingStatus = processingStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingOrderCount")
    public Integer remainingOrderCount;

    public OrderExportationReporting withRemainingOrderCount(Integer remainingOrderCount) {
        this.remainingOrderCount = remainingOrderCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("resumedUtcDate")
    public OffsetDateTime resumedUtcDate;

    public OrderExportationReporting withResumedUtcDate(OffsetDateTime resumedUtcDate) {
        this.resumedUtcDate = resumedUtcDate;
        return this;
    }
    
    /**
     * Indicates the origin of the operation
     */
    @JsonProperty("sourceType")
    public SourceTypeEnum sourceType;

    public OrderExportationReporting withSourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    /**
     * The user identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceUserId")
    public String sourceUserId;

    public OrderExportationReporting withSourceUserId(String sourceUserId) {
        this.sourceUserId = sourceUserId;
        return this;
    }
    
    @JsonProperty("sourceUserName")
    public String sourceUserName;

    public OrderExportationReporting withSourceUserName(String sourceUserName) {
        this.sourceUserName = sourceUserName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("suspendedUtcDate")
    public OffsetDateTime suspendedUtcDate;

    public OrderExportationReporting withSuspendedUtcDate(OffsetDateTime suspendedUtcDate) {
        this.suspendedUtcDate = suspendedUtcDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutDuration")
    public String timeoutDuration;

    public OrderExportationReporting withTimeoutDuration(String timeoutDuration) {
        this.timeoutDuration = timeoutDuration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warningMessage")
    public String warningMessage;

    public OrderExportationReporting withWarningMessage(String warningMessage) {
        this.warningMessage = warningMessage;
        return this;
    }
    
    public OrderExportationReporting(@JsonProperty("enqueuedUtcDate") OffsetDateTime enqueuedUtcDate, @JsonProperty("executionUUID") String executionUUID, @JsonProperty("ipAddress") String ipAddress, @JsonProperty("processingStatus") OrderExportationReportingProcessingStatusEnum processingStatus, @JsonProperty("sourceType") SourceTypeEnum sourceType, @JsonProperty("sourceUserName") String sourceUserName) {
        this.enqueuedUtcDate = enqueuedUtcDate;
        this.executionUUID = executionUUID;
        this.ipAddress = ipAddress;
        this.processingStatus = processingStatus;
        this.sourceType = sourceType;
        this.sourceUserName = sourceUserName;
  }
}
