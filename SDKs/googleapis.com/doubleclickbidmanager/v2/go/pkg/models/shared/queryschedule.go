// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// QueryScheduleFrequencyEnum - How often the query is run.
type QueryScheduleFrequencyEnum string

const (
	QueryScheduleFrequencyEnumFrequencyUnspecified QueryScheduleFrequencyEnum = "FREQUENCY_UNSPECIFIED"
	QueryScheduleFrequencyEnumOneTime              QueryScheduleFrequencyEnum = "ONE_TIME"
	QueryScheduleFrequencyEnumDaily                QueryScheduleFrequencyEnum = "DAILY"
	QueryScheduleFrequencyEnumWeekly               QueryScheduleFrequencyEnum = "WEEKLY"
	QueryScheduleFrequencyEnumSemiMonthly          QueryScheduleFrequencyEnum = "SEMI_MONTHLY"
	QueryScheduleFrequencyEnumMonthly              QueryScheduleFrequencyEnum = "MONTHLY"
	QueryScheduleFrequencyEnumQuarterly            QueryScheduleFrequencyEnum = "QUARTERLY"
	QueryScheduleFrequencyEnumYearly               QueryScheduleFrequencyEnum = "YEARLY"
)

func (e QueryScheduleFrequencyEnum) ToPointer() *QueryScheduleFrequencyEnum {
	return &e
}

func (e *QueryScheduleFrequencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREQUENCY_UNSPECIFIED":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "DAILY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "SEMI_MONTHLY":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "QUARTERLY":
		fallthrough
	case "YEARLY":
		*e = QueryScheduleFrequencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryScheduleFrequencyEnum: %v", v)
	}
}

// QuerySchedule - Information on when and how frequently to run a query.
type QuerySchedule struct {
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	EndDate *Date `json:"endDate,omitempty"`
	// How often the query is run.
	Frequency *QueryScheduleFrequencyEnum `json:"frequency,omitempty"`
	// Canonical timezone code for report generation time. Defaults to `America/New_York`.
	NextRunTimezoneCode *string `json:"nextRunTimezoneCode,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	StartDate *Date `json:"startDate,omitempty"`
}
