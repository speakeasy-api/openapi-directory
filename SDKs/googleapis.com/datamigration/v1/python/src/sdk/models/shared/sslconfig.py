"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SslConfigTypeEnum(str, Enum):
    r"""Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'."""
    SSL_TYPE_UNSPECIFIED = 'SSL_TYPE_UNSPECIFIED'
    SERVER_ONLY = 'SERVER_ONLY'
    SERVER_CLIENT = 'SERVER_CLIENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SslConfig:
    r"""SSL configuration information."""
    
    ca_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caCertificate'), 'exclude': lambda f: f is None }})
    r"""Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host."""  
    client_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertificate'), 'exclude': lambda f: f is None }})
    r"""Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory."""  
    client_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientKey'), 'exclude': lambda f: f is None }})
    r"""Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory."""  
    type: Optional[SslConfigTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SslConfigInput:
    r"""SSL configuration information."""
    
    ca_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caCertificate'), 'exclude': lambda f: f is None }})
    r"""Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host."""  
    client_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertificate'), 'exclude': lambda f: f is None }})
    r"""Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory."""  
    client_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientKey'), 'exclude': lambda f: f is None }})
    r"""Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory."""  
    