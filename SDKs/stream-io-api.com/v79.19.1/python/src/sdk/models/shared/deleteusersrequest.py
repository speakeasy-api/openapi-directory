"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DeleteUsersRequestDeleteConversationsEnum(str, Enum):
    r"""Conversation channels delete mode.
    Conversation channel is any channel which only has two members one of which is the user being deleted.
    
    * null or empty string - doesn't delete any conversation channels
    * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)
    * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)
    """
    SOFT = 'soft'
    HARD = 'hard'

class DeleteUsersRequestDeleteMessagesEnum(str, Enum):
    r"""Message delete mode.
    
    * null or empty string - doesn't delete user messages
    * soft - marks all user messages as deleted without removing any related message data
    * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags
    * hard - deletes messages completely with all related information
    """
    SOFT = 'soft'
    PRUNING = 'pruning'
    HARD = 'hard'

class DeleteUsersRequestDeleteUserEnum(str, Enum):
    r"""User delete mode.
    
    * soft - marks user as deleted and retains all user data
    * pruning - marks user as deleted and nullifies user information
    * hard - deletes user completely. Requires 'hard' option for messages and conversations as well
    """
    SOFT = 'soft'
    PRUNING = 'pruning'
    HARD = 'hard'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteUsersRequest:
    
    user_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_ids') }})
    r"""IDs of users to delete"""  
    conversations: Optional[DeleteUsersRequestDeleteConversationsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversations'), 'exclude': lambda f: f is None }})
    r"""Conversation channels delete mode.
    Conversation channel is any channel which only has two members one of which is the user being deleted.
    
    * null or empty string - doesn't delete any conversation channels
    * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)
    * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)
    """  
    messages: Optional[DeleteUsersRequestDeleteMessagesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""Message delete mode.
    
    * null or empty string - doesn't delete user messages
    * soft - marks all user messages as deleted without removing any related message data
    * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags
    * hard - deletes messages completely with all related information
    """  
    new_channel_owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_channel_owner_id'), 'exclude': lambda f: f is None }})  
    user: Optional[DeleteUsersRequestDeleteUserEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""User delete mode.
    
    * soft - marks user as deleted and retains all user data
    * pruning - marks user as deleted and nullifies user information
    * hard - deletes user completely. Requires 'hard' option for messages and conversations as well
    """  
    