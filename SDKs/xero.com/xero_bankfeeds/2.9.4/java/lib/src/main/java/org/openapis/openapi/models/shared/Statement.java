/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * Statement - search results matching id for single statement
 */
public class Statement {
    /**
     * The StartBalance plus all the Statement Line Amounts should be equal to the EndBalance Amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endBalance")
    public EndBalance endBalance;
    public Statement withEndBalance(EndBalance endBalance) {
        this.endBalance = endBalance;
        return this;
    }
    
    /**
     * Closing balance date ISO-8601 YYYY-MM-DD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("endDate")
    public LocalDate endDate;
    public Statement withEndDate(LocalDate endDate) {
        this.endDate = endDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public Error[] errors;
    public Statement withErrors(Error[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedConnectionId")
    public String feedConnectionId;
    public Statement withFeedConnectionId(String feedConnectionId) {
        this.feedConnectionId = feedConnectionId;
        return this;
    }
    
    /**
     * GUID used to identify the Statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Statement withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The starting balance of the statement
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startBalance")
    public StartBalance startBalance;
    public Statement withStartBalance(StartBalance startBalance) {
        this.startBalance = startBalance;
        return this;
    }
    
    /**
     * Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("startDate")
    public LocalDate startDate;
    public Statement withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statementLineCount")
    public Long statementLineCount;
    public Statement withStatementLineCount(Long statementLineCount) {
        this.statementLineCount = statementLineCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statementLines")
    public StatementLine[] statementLines;
    public Statement withStatementLines(StatementLine[] statementLines) {
        this.statementLines = statementLines;
        return this;
    }
    
    /**
     * Current status of statements
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public StatementStatusEnum status;
    public Statement withStatus(StatementStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
