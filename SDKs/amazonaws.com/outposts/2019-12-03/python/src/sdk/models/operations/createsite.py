"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createsiteoutput as shared_createsiteoutput
from ..shared import fiberopticcabletype_enum as shared_fiberopticcabletype_enum
from ..shared import maximumsupportedweightlbs_enum as shared_maximumsupportedweightlbs_enum
from ..shared import opticalstandard_enum as shared_opticalstandard_enum
from ..shared import powerconnector_enum as shared_powerconnector_enum
from ..shared import powerdrawkva_enum as shared_powerdrawkva_enum
from ..shared import powerfeeddrop_enum as shared_powerfeeddrop_enum
from ..shared import powerphase_enum as shared_powerphase_enum
from ..shared import uplinkcount_enum as shared_uplinkcount_enum
from ..shared import uplinkgbps_enum as shared_uplinkgbps_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSiteRequestBodyOperatingAddress:
    r"""Information about an address."""
    
    address_line1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine1'), 'exclude': lambda f: f is None }})  
    address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine2'), 'exclude': lambda f: f is None }})  
    address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine3'), 'exclude': lambda f: f is None }})  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactName'), 'exclude': lambda f: f is None }})  
    contact_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactPhoneNumber'), 'exclude': lambda f: f is None }})  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountryCode'), 'exclude': lambda f: f is None }})  
    district_or_county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DistrictOrCounty'), 'exclude': lambda f: f is None }})  
    municipality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Municipality'), 'exclude': lambda f: f is None }})  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalCode'), 'exclude': lambda f: f is None }})  
    state_or_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StateOrRegion'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSiteRequestBodyRackPhysicalProperties:
    r"""Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href=\\"https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist\\">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide."""
    
    fiber_optic_cable_type: Optional[shared_fiberopticcabletype_enum.FiberOpticCableTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FiberOpticCableType'), 'exclude': lambda f: f is None }})  
    maximum_supported_weight_lbs: Optional[shared_maximumsupportedweightlbs_enum.MaximumSupportedWeightLbsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumSupportedWeightLbs'), 'exclude': lambda f: f is None }})  
    optical_standard: Optional[shared_opticalstandard_enum.OpticalStandardEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpticalStandard'), 'exclude': lambda f: f is None }})  
    power_connector: Optional[shared_powerconnector_enum.PowerConnectorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerConnector'), 'exclude': lambda f: f is None }})  
    power_draw_kva: Optional[shared_powerdrawkva_enum.PowerDrawKvaEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerDrawKva'), 'exclude': lambda f: f is None }})  
    power_feed_drop: Optional[shared_powerfeeddrop_enum.PowerFeedDropEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFeedDrop'), 'exclude': lambda f: f is None }})  
    power_phase: Optional[shared_powerphase_enum.PowerPhaseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerPhase'), 'exclude': lambda f: f is None }})  
    uplink_count: Optional[shared_uplinkcount_enum.UplinkCountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UplinkCount'), 'exclude': lambda f: f is None }})  
    uplink_gbps: Optional[shared_uplinkgbps_enum.UplinkGbpsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UplinkGbps'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSiteRequestBodyShippingAddress:
    r"""Information about an address."""
    
    address_line1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine1'), 'exclude': lambda f: f is None }})  
    address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine2'), 'exclude': lambda f: f is None }})  
    address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine3'), 'exclude': lambda f: f is None }})  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactName'), 'exclude': lambda f: f is None }})  
    contact_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactPhoneNumber'), 'exclude': lambda f: f is None }})  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountryCode'), 'exclude': lambda f: f is None }})  
    district_or_county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DistrictOrCounty'), 'exclude': lambda f: f is None }})  
    municipality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Municipality'), 'exclude': lambda f: f is None }})  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalCode'), 'exclude': lambda f: f is None }})  
    state_or_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StateOrRegion'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSiteRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The name of the site."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The description of the site."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notes'), 'exclude': lambda f: f is None }})
    r"""Additional information that you provide about site access requirements, electrician scheduling, personal protective equipment, or regulation of equipment materials that could affect your installation process."""  
    operating_address: Optional[CreateSiteRequestBodyOperatingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OperatingAddress'), 'exclude': lambda f: f is None }})
    r"""Information about an address."""  
    rack_physical_properties: Optional[CreateSiteRequestBodyRackPhysicalProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RackPhysicalProperties'), 'exclude': lambda f: f is None }})
    r"""Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href=\\"https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist\\">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide."""  
    shipping_address: Optional[CreateSiteRequestBodyShippingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingAddress'), 'exclude': lambda f: f is None }})
    r"""Information about an address."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""The tags to apply to a site."""  
    

@dataclasses.dataclass
class CreateSiteRequest:
    
    request_body: CreateSiteRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateSiteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_site_output: Optional[shared_createsiteoutput.CreateSiteOutput] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    