/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PortfolioSimulation {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Drift-weight Portfolio Rebalancing
   *
   * @remarks
   * Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being never rebalanced (a.k.a. buy and hold).
   *
   * References
   * * [Hillion, Pierre, The Ex-Ante Rebalancing Premium (March 11, 2016). INSEAD Working Paper No. 2016/15/FIN](https://ssrn.com/abstract=2746471)
   *
   */
  postPortfolioSimulationRebalancingDriftWeight(
    req: operations.PostPortfolioSimulationRebalancingDriftWeightRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioSimulationRebalancingDriftWeightResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioSimulationRebalancingDriftWeightRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/simulation/rebalancing/drift-weight";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioSimulationRebalancingDriftWeightResponse =
        new operations.PostPortfolioSimulationRebalancingDriftWeightResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioSimulationRebalancingDriftWeight200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioSimulationRebalancingDriftWeight200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fixed-weight Portfolio Rebalancing
   *
   * @remarks
   * Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being rebalanced toward fixed weights at the beginning of each time period.
   *
   * References
   * * [Hillion, Pierre, The Ex-Ante Rebalancing Premium (March 11, 2016). INSEAD Working Paper No. 2016/15/FIN](https://ssrn.com/abstract=2746471)
   *
   */
  postPortfolioSimulationRebalancingFixedWeight(
    req: operations.PostPortfolioSimulationRebalancingFixedWeightRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioSimulationRebalancingFixedWeightResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioSimulationRebalancingFixedWeightRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/simulation/rebalancing/fixed-weight";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioSimulationRebalancingFixedWeightResponse =
        new operations.PostPortfolioSimulationRebalancingFixedWeightResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioSimulationRebalancingFixedWeight200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioSimulationRebalancingFixedWeight200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Random-weight Portfolio Rebalancing
   *
   * @remarks
   * Simulate the evolution of one or several portfolio(s) over one or several time period(s), the portfolio(s) being rebalanced toward random weights at the beginning of each time period.
   *
   * References
   * * [R Stein, Not fooled by randomness: Using random portfolios to analyse investment funds, Investment Analysts Journal, 43:79, 1-15, DOI: 10.1080/10293523.2014.11082564](https://www.tandfonline.com/doi/abs/10.1080/10293523.2014.11082564)
   *
   */
  postPortfolioSimulationRebalancingRandomWeight(
    req: operations.PostPortfolioSimulationRebalancingRandomWeightRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioSimulationRebalancingRandomWeightResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioSimulationRebalancingRandomWeightRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/simulation/rebalancing/random-weight";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioSimulationRebalancingRandomWeightResponse =
        new operations.PostPortfolioSimulationRebalancingRandomWeightResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioSimulationRebalancingRandomWeight200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioSimulationRebalancingRandomWeight200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
