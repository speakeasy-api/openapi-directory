/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetServersIdRequest extends SpeakeasyBase {
  /**
   * ID of the Server
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class GetServersId200ApplicationJSONServerDatacenterLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * The Server types the Datacenter can handle
 */
export class GetServersId200ApplicationJSONServerDatacenterServerTypes extends SpeakeasyBase {
  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available" })
  available: number[];

  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available_for_migration" })
  availableForMigration: number[];

  /**
   * IDs of Server types that are supported in the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supported" })
  supported: number[];
}

/**
 * Datacenter this Resource is located at
 */
export class GetServersId200ApplicationJSONServerDatacenter extends SpeakeasyBase {
  /**
   * Description of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => GetServersId200ApplicationJSONServerDatacenterLocation)
  location: GetServersId200ApplicationJSONServerDatacenterLocation;

  /**
   * Unique identifier of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Server types the Datacenter can handle
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_types" })
  @Type(() => GetServersId200ApplicationJSONServerDatacenterServerTypes)
  serverTypes: GetServersId200ApplicationJSONServerDatacenterServerTypes;
}

/**
 * Information about the Server the Image was created from
 */
export class GetServersId200ApplicationJSONServerImageCreatedFrom extends SpeakeasyBase {
  /**
   * ID of the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Server name at the time the Image was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Flavor of operating system contained in the Image
 */
export enum GetServersId200ApplicationJSONServerImageOsFlavorEnum {
  Ubuntu = "ubuntu",
  Centos = "centos",
  Debian = "debian",
  Fedora = "fedora",
  Unknown = "unknown",
}

/**
 * Protection configuration for the Resource
 */
export class GetServersId200ApplicationJSONServerImageProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Whether the Image can be used or if it's still being created or unavailable
 */
export enum GetServersId200ApplicationJSONServerImageStatusEnum {
  Available = "available",
  Creating = "creating",
  Unavailable = "unavailable",
}

/**
 * Type of the Image
 */
export enum GetServersId200ApplicationJSONServerImageTypeEnum {
  System = "system",
  App = "app",
  Snapshot = "snapshot",
  Backup = "backup",
  Temporary = "temporary",
}

export class GetServersId200ApplicationJSONServerImage extends SpeakeasyBase {
  /**
   * ID of Server the Image is bound to. Only set for Images of type `backup`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bound_to" })
  boundTo: number;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Information about the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_from" })
  @Type(() => GetServersId200ApplicationJSONServerImageCreatedFrom)
  createdFrom: GetServersId200ApplicationJSONServerImageCreatedFrom;

  /**
   * Point in time where the Image was deleted (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted: string;

  /**
   * Point in time when the Image is considered to be deprecated (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Size of the disk contained in the Image in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk_size" })
  diskSize: number;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image_size" })
  imageSize: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Unique identifier of the Image. This value is only set for system Images.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Flavor of operating system contained in the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_flavor" })
  osFlavor: GetServersId200ApplicationJSONServerImageOsFlavorEnum;

  /**
   * Operating system version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_version" })
  osVersion: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetServersId200ApplicationJSONServerImageProtection)
  protection: GetServersId200ApplicationJSONServerImageProtection;

  /**
   * Indicates that rapid deploy of the Image is available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rapid_deploy" })
  rapidDeploy?: boolean;

  /**
   * Whether the Image can be used or if it's still being created or unavailable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetServersId200ApplicationJSONServerImageStatusEnum;

  /**
   * Type of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetServersId200ApplicationJSONServerImageTypeEnum;
}

/**
 * Type of the ISO
 */
export enum GetServersId200ApplicationJSONServerIsoTypeEnum {
  Public = "public",
  Private = "private",
}

/**
 * ISO Image that is attached to this Server. Null if no ISO is attached.
 */
export class GetServersId200ApplicationJSONServerIso extends SpeakeasyBase {
  /**
   * ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Unique identifier of the ISO. Only set for public ISOs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Type of the ISO
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetServersId200ApplicationJSONServerIsoTypeEnum;
}

/**
 * Type of the Placement Group
 */
export enum GetServersId200ApplicationJSONServerPlacementGroupNullableTypeEnum {
  Spread = "spread",
}

export class GetServersId200ApplicationJSONServerPlacementGroupNullable extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Array of IDs of Servers that are part of this Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "servers" })
  servers: number[];

  /**
   * Type of the Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetServersId200ApplicationJSONServerPlacementGroupNullableTypeEnum;
}

export class GetServersId200ApplicationJSONServerPrivateNet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alias_ips" })
  aliasIps?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mac_address" })
  macAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: number;
}

/**
 * Protection configuration for the Server
 */
export class GetServersId200ApplicationJSONServerProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Server from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;

  /**
   * If true, prevents the Server from being rebuilt
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rebuild" })
  rebuild: boolean;
}

/**
 * Status of the Firewall on the Server
 */
export enum GetServersId200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum {
  Applied = "applied",
  Pending = "pending",
}

export class GetServersId200ApplicationJSONServerPublicNetServerPublicNetFirewall extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Status of the Firewall on the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetServersId200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum;
}

/**
 * IP address (v4) and its reverse DNS entry of this Server
 */
export class GetServersId200ApplicationJSONServerPublicNetIpv4 extends SpeakeasyBase {
  /**
   * If the IP is blocked by our anti abuse dept
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Reverse DNS PTR entry for the IPv4 addresses of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * IP address (v4) of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

export class GetServersId200ApplicationJSONServerPublicNetIpv6DnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv6 address of this Server for which the reverse DNS entry has been set up
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * IPv6 network assigned to this Server and its reverse DNS entry
 */
export class GetServersId200ApplicationJSONServerPublicNetIpv6 extends SpeakeasyBase {
  /**
   * If the IP is blocked by our anti abuse dept
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default
   */
  @SpeakeasyMetadata({
    elemType: GetServersId200ApplicationJSONServerPublicNetIpv6DnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => GetServersId200ApplicationJSONServerPublicNetIpv6DnsPtr)
  dnsPtr: GetServersId200ApplicationJSONServerPublicNetIpv6DnsPtr[];

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * IP address (v6) of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
 */
export class GetServersId200ApplicationJSONServerPublicNet extends SpeakeasyBase {
  /**
   * Firewalls applied to the public network interface of this Server
   */
  @SpeakeasyMetadata({
    elemType:
      GetServersId200ApplicationJSONServerPublicNetServerPublicNetFirewall,
  })
  @Expose({ name: "firewalls" })
  @Type(
    () => GetServersId200ApplicationJSONServerPublicNetServerPublicNetFirewall
  )
  firewalls?: GetServersId200ApplicationJSONServerPublicNetServerPublicNetFirewall[];

  /**
   * IDs of Floating IPs assigned to this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "floating_ips" })
  floatingIps: number[];

  /**
   * IP address (v4) and its reverse DNS entry of this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv4" })
  @Type(() => GetServersId200ApplicationJSONServerPublicNetIpv4)
  ipv4: GetServersId200ApplicationJSONServerPublicNetIpv4;

  /**
   * IPv6 network assigned to this Server and its reverse DNS entry
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  @Type(() => GetServersId200ApplicationJSONServerPublicNetIpv6)
  ipv6: GetServersId200ApplicationJSONServerPublicNetIpv6;
}

/**
 * Type of cpu
 */
export enum GetServersId200ApplicationJSONServerServerTypeCpuTypeEnum {
  Shared = "shared",
  Dedicated = "dedicated",
}

/**
 * Hourly costs for a Server type in this Location
 */
export class GetServersId200ApplicationJSONServerServerTypePricesPriceHourly extends SpeakeasyBase {
  /**
   * Price with VAT added
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross" })
  gross: string;

  /**
   * Price without VAT
   */
  @SpeakeasyMetadata()
  @Expose({ name: "net" })
  net: string;
}

/**
 * Monthly costs for a Server type in this Location
 */
export class GetServersId200ApplicationJSONServerServerTypePricesPriceMonthly extends SpeakeasyBase {
  /**
   * Price with VAT added
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross" })
  gross: string;

  /**
   * Price without VAT
   */
  @SpeakeasyMetadata()
  @Expose({ name: "net" })
  net: string;
}

export class GetServersId200ApplicationJSONServerServerTypePrices extends SpeakeasyBase {
  /**
   * Name of the Location the price is for
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * Hourly costs for a Server type in this Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price_hourly" })
  @Type(() => GetServersId200ApplicationJSONServerServerTypePricesPriceHourly)
  priceHourly: GetServersId200ApplicationJSONServerServerTypePricesPriceHourly;

  /**
   * Monthly costs for a Server type in this Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price_monthly" })
  @Type(() => GetServersId200ApplicationJSONServerServerTypePricesPriceMonthly)
  priceMonthly: GetServersId200ApplicationJSONServerServerTypePricesPriceMonthly;
}

/**
 * Type of Server boot drive. Local has higher speed. Network has better availability.
 */
export enum GetServersId200ApplicationJSONServerServerTypeStorageTypeEnum {
  Local = "local",
  Network = "network",
}

/**
 * Type of Server - determines how much ram, disk and cpu a Server has
 */
export class GetServersId200ApplicationJSONServerServerType extends SpeakeasyBase {
  /**
   * Number of cpu cores a Server of this type will have
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cores" })
  cores: number;

  /**
   * Type of cpu
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpu_type" })
  cpuType: GetServersId200ApplicationJSONServerServerTypeCpuTypeEnum;

  /**
   * True if Server type is deprecated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: boolean;

  /**
   * Description of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Disk size a Server of this type will have in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk" })
  disk: number;

  /**
   * ID of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Memory a Server of this type will have in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory: number;

  /**
   * Unique identifier of the Server type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Prices in different Locations
   */
  @SpeakeasyMetadata({
    elemType: GetServersId200ApplicationJSONServerServerTypePrices,
  })
  @Expose({ name: "prices" })
  @Type(() => GetServersId200ApplicationJSONServerServerTypePrices)
  prices: GetServersId200ApplicationJSONServerServerTypePrices[];

  /**
   * Type of Server boot drive. Local has higher speed. Network has better availability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storage_type" })
  storageType: GetServersId200ApplicationJSONServerServerTypeStorageTypeEnum;
}

/**
 * Status of the Server
 */
export enum GetServersId200ApplicationJSONServerStatusEnum {
  Running = "running",
  Initializing = "initializing",
  Starting = "starting",
  Stopping = "stopping",
  Off = "off",
  Deleting = "deleting",
  Migrating = "migrating",
  Rebuilding = "rebuilding",
  Unknown = "unknown",
}

export class GetServersId200ApplicationJSONServer extends SpeakeasyBase {
  /**
   * Time window (UTC) in which the backup will run, or null if the backups are not enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backup_window" })
  backupWindow: string;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Datacenter this Resource is located at
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datacenter" })
  @Type(() => GetServersId200ApplicationJSONServerDatacenter)
  datacenter: GetServersId200ApplicationJSONServerDatacenter;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => GetServersId200ApplicationJSONServerImage)
  image: GetServersId200ApplicationJSONServerImage;

  /**
   * Free Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "included_traffic" })
  includedTraffic: number;

  /**
   * Inbound Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingoing_traffic" })
  ingoingTraffic: number;

  /**
   * ISO Image that is attached to this Server. Null if no ISO is attached.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iso" })
  @Type(() => GetServersId200ApplicationJSONServerIso)
  iso: GetServersId200ApplicationJSONServerIso;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "load_balancers" })
  loadBalancers?: number[];

  /**
   * True if Server has been locked and is not available to user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locked" })
  locked: boolean;

  /**
   * Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Outbound Traffic for the current billing period in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outgoing_traffic" })
  outgoingTraffic: number;

  @SpeakeasyMetadata()
  @Expose({ name: "placement_group" })
  @Type(() => GetServersId200ApplicationJSONServerPlacementGroupNullable)
  placementGroup?: GetServersId200ApplicationJSONServerPlacementGroupNullable;

  /**
   * Size of the primary Disk
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primary_disk_size" })
  primaryDiskSize: number;

  /**
   * Private networks information
   */
  @SpeakeasyMetadata({
    elemType: GetServersId200ApplicationJSONServerPrivateNet,
  })
  @Expose({ name: "private_net" })
  @Type(() => GetServersId200ApplicationJSONServerPrivateNet)
  privateNet: GetServersId200ApplicationJSONServerPrivateNet[];

  /**
   * Protection configuration for the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetServersId200ApplicationJSONServerProtection)
  protection: GetServersId200ApplicationJSONServerProtection;

  /**
   * Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_net" })
  @Type(() => GetServersId200ApplicationJSONServerPublicNet)
  publicNet: GetServersId200ApplicationJSONServerPublicNet;

  /**
   * True if rescue mode is enabled. Server will then boot into rescue system on next reboot
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rescue_enabled" })
  rescueEnabled: boolean;

  /**
   * Type of Server - determines how much ram, disk and cpu a Server has
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_type" })
  @Type(() => GetServersId200ApplicationJSONServerServerType)
  serverType: GetServersId200ApplicationJSONServerServerType;

  /**
   * Status of the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetServersId200ApplicationJSONServerStatusEnum;

  /**
   * IDs of Volumes assigned to this Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volumes" })
  volumes?: number[];
}

/**
 * The `server` key in the reply contains a Server object with this structure
 */
export class GetServersId200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(() => GetServersId200ApplicationJSONServer)
  server?: GetServersId200ApplicationJSONServer;
}

export class GetServersIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `server` key in the reply contains a Server object with this structure
   */
  @SpeakeasyMetadata()
  getServersId200ApplicationJSONObject?: GetServersId200ApplicationJSON;
}
