<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AccountingCodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an accounting code
     * 
     * This reference describes how to delete an accounting code through the REST API.
     * ## Prerequisites
     * If you have Zuora Finance enabled on your tenant, then you must have the Delete Unused Accounting Code permission.
     * ## Limitations
     * You can only delete accounting codes that have never been associated with any transactions. An accounting code must be deactivated before you can delete it.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEAccountingCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEAccountingCodeResponse
     */
	public function deleteAccountingCode(
        \OpenAPI\OpenAPI\Models\Operations\DELETEAccountingCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEAccountingCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounting-codes/{ac-id}', \OpenAPI\OpenAPI\Models\Operations\DELETEAccountingCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEAccountingCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an accounting code
     * 
     * This reference describes how to query an accounting code through the REST API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAccountingCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAccountingCodeResponse
     */
	public function getAccountingCode(
        \OpenAPI\OpenAPI\Models\Operations\GETAccountingCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAccountingCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounting-codes/{ac-id}', \OpenAPI\OpenAPI\Models\Operations\GETAccountingCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAccountingCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAccountingCodeItemType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETAccountingCodeItemType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all accounting codes
     * 
     * This reference describes how to query all accounting codes in your chart of accounts through the REST API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAllAccountingCodesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAllAccountingCodesResponse
     */
	public function getAllAccountingCodes(
        \OpenAPI\OpenAPI\Models\Operations\GETAllAccountingCodesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAllAccountingCodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounting-codes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETAllAccountingCodesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAllAccountingCodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAccountingCodesType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETAccountingCodesType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an accounting code
     * 
     * This reference describes how to create a new accounting code through the REST API. 
     * The accounting code will be active as soon as it has been created.
     * 
     * ## Prerequisites
     *   If you have Zuora Finance enabled on your tenant, you must have the  Configure Accounting Codes permission. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTAccountingCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTAccountingCodeResponse
     */
	public function postAccountingCode(
        \OpenAPI\OpenAPI\Models\Operations\POSTAccountingCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTAccountingCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounting-codes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postAccountingCodeType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTAccountingCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAccountingCodeResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTAccountingCodeResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an accounting code
     * 
     * This reference describes how to update an existing accounting code through the REST API.
     * ## Prerequisites
     *   If you have Zuora Finance enabled on your tenant, you must have the  Manage Accounting Code permission. 
     * ## Limitations
     * You can only update accounting codes that are not already associated with any transactions.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTAccountingCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTAccountingCodeResponse
     */
	public function putAccountingCode(
        \OpenAPI\OpenAPI\Models\Operations\PUTAccountingCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTAccountingCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounting-codes/{ac-id}', \OpenAPI\OpenAPI\Models\Operations\PUTAccountingCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putAccountingCodeType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTAccountingCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activate an accounting code
     * 
     * This reference describes how to activate an accounting code through the REST API.
     * 
     * Prerequisites
     * -------------
     * If you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTActivateAccountingCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTActivateAccountingCodeResponse
     */
	public function putActivateAccountingCode(
        \OpenAPI\OpenAPI\Models\Operations\PUTActivateAccountingCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTActivateAccountingCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounting-codes/{ac-id}/activate', \OpenAPI\OpenAPI\Models\Operations\PUTActivateAccountingCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTActivateAccountingCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivate an accounting code
     * 
     * This reference describes how to deactivate an accounting code through the REST API.
     * 
     * ## Prerequisites
     * If you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission.
     * ## Limitations
     * You can only deactivate accounting codes that are not associated with any transactions. 
     * You cannot disable accounting codes of type AccountsReceivable.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTDeactivateAccountingCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTDeactivateAccountingCodeResponse
     */
	public function putDeactivateAccountingCode(
        \OpenAPI\OpenAPI\Models\Operations\PUTDeactivateAccountingCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTDeactivateAccountingCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounting-codes/{ac-id}/deactivate', \OpenAPI\OpenAPI\Models\Operations\PUTDeactivateAccountingCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTDeactivateAccountingCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
}