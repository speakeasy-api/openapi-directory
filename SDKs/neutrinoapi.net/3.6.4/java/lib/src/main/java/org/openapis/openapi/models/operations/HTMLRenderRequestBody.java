/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class HTMLRenderRequestBody {
    /**
     * The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string
     */
    @SpeakeasyMetadata("form:name=content")
    public String content;

    public HTMLRenderRequestBody withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * Inject custom CSS into the HTML. e.g. 'body { background-color: red;}'
     */
    @SpeakeasyMetadata("form:name=css")
    public String css;

    public HTMLRenderRequestBody withCss(String css) {
        this.css = css;
        return this;
    }
    
    /**
     * Number of seconds to wait before rendering the page (can be useful for pages with animations etc)
     */
    @SpeakeasyMetadata("form:name=delay")
    public Integer delay;

    public HTMLRenderRequestBody withDelay(Integer delay) {
        this.delay = delay;
        return this;
    }
    
    /**
     * The footer HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages}
     */
    @SpeakeasyMetadata("form:name=footer")
    public String footer;

    public HTMLRenderRequestBody withFooter(String footer) {
        this.footer = footer;
        return this;
    }
    
    /**
     * Which format to output, available options are: PDF, PNG, JPG
     */
    @SpeakeasyMetadata("form:name=format")
    public String format;

    public HTMLRenderRequestBody withFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * Render the final document in grayscale
     */
    @SpeakeasyMetadata("form:name=grayscale")
    public Boolean grayscale;

    public HTMLRenderRequestBody withGrayscale(Boolean grayscale) {
        this.grayscale = grayscale;
        return this;
    }
    
    /**
     * The header HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages}
     */
    @SpeakeasyMetadata("form:name=header")
    public String header;

    public HTMLRenderRequestBody withHeader(String header) {
        this.header = header;
        return this;
    }
    
    /**
     * Ignore any TLS/SSL certificate errors
     */
    @SpeakeasyMetadata("form:name=ignore-certificate-errors")
    public Boolean ignoreCertificateErrors;

    public HTMLRenderRequestBody withIgnoreCertificateErrors(Boolean ignoreCertificateErrors) {
        this.ignoreCertificateErrors = ignoreCertificateErrors;
        return this;
    }
    
    /**
     * If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content
     */
    @SpeakeasyMetadata("form:name=image-height")
    public Integer imageHeight;

    public HTMLRenderRequestBody withImageHeight(Integer imageHeight) {
        this.imageHeight = imageHeight;
        return this;
    }
    
    /**
     * If rendering to an image format (PNG or JPG) use this image width (in pixels)
     */
    @SpeakeasyMetadata("form:name=image-width")
    public Integer imageWidth;

    public HTMLRenderRequestBody withImageWidth(Integer imageWidth) {
        this.imageWidth = imageWidth;
        return this;
    }
    
    /**
     * Set the document to landscape orientation
     */
    @SpeakeasyMetadata("form:name=landscape")
    public Boolean landscape;

    public HTMLRenderRequestBody withLandscape(Boolean landscape) {
        this.landscape = landscape;
        return this;
    }
    
    /**
     * The document margin (in mm)
     */
    @SpeakeasyMetadata("form:name=margin")
    public Double margin;

    public HTMLRenderRequestBody withMargin(Double margin) {
        this.margin = margin;
        return this;
    }
    
    /**
     * The document bottom margin (in mm)
     */
    @SpeakeasyMetadata("form:name=margin-bottom")
    public Double marginBottom;

    public HTMLRenderRequestBody withMarginBottom(Double marginBottom) {
        this.marginBottom = marginBottom;
        return this;
    }
    
    /**
     * The document left margin (in mm)
     */
    @SpeakeasyMetadata("form:name=margin-left")
    public Double marginLeft;

    public HTMLRenderRequestBody withMarginLeft(Double marginLeft) {
        this.marginLeft = marginLeft;
        return this;
    }
    
    /**
     * The document right margin (in mm)
     */
    @SpeakeasyMetadata("form:name=margin-right")
    public Double marginRight;

    public HTMLRenderRequestBody withMarginRight(Double marginRight) {
        this.marginRight = marginRight;
        return this;
    }
    
    /**
     * The document top margin (in mm)
     */
    @SpeakeasyMetadata("form:name=margin-top")
    public Double marginTop;

    public HTMLRenderRequestBody withMarginTop(Double marginTop) {
        this.marginTop = marginTop;
        return this;
    }
    
    /**
     * Set the PDF page height explicitly (in mm)
     */
    @SpeakeasyMetadata("form:name=page-height")
    public Double pageHeight;

    public HTMLRenderRequestBody withPageHeight(Double pageHeight) {
        this.pageHeight = pageHeight;
        return this;
    }
    
    /**
     * Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter
     */
    @SpeakeasyMetadata("form:name=page-size")
    public String pageSize;

    public HTMLRenderRequestBody withPageSize(String pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * Set the PDF page width explicitly (in mm)
     */
    @SpeakeasyMetadata("form:name=page-width")
    public Double pageWidth;

    public HTMLRenderRequestBody withPageWidth(Double pageWidth) {
        this.pageWidth = pageWidth;
        return this;
    }
    
    /**
     * Timeout in seconds. Give up if still trying to load the HTML content after this number of seconds
     */
    @SpeakeasyMetadata("form:name=timeout")
    public Integer timeout;

    public HTMLRenderRequestBody withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * The document title
     */
    @SpeakeasyMetadata("form:name=title")
    public String title;

    public HTMLRenderRequestBody withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size)
     */
    @SpeakeasyMetadata("form:name=zoom")
    public Double zoom;

    public HTMLRenderRequestBody withZoom(Double zoom) {
        this.zoom = zoom;
        return this;
    }
    
    public HTMLRenderRequestBody(@JsonProperty("content") String content) {
        this.content = content;
  }
}
