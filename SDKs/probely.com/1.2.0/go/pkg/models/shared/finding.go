// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// Finding - Event object.
type Finding struct {
	// Assigned user
	Assignee *Assignee `json:"assignee,omitempty"`
	// Date time of the last change
	Changed *time.Time `json:"changed,omitempty"`
	// User that last modified the object
	ChangedBy *ChangedBy `json:"changed_by,omitempty"`
	// User comment left on the finding.
	Comment *string `json:"comment,omitempty"`
	// CVSS score
	CvssScore *float32 `json:"cvss_score,omitempty"`
	// CVSS vector
	CvssVector *string     `json:"cvss_vector,omitempty"`
	Definition *Definition `json:"definition,omitempty"`
	// Evidence for the finding.
	Evidence *string `json:"evidence,omitempty"`
	// Extra data for the finding.
	Extra *string `json:"extra,omitempty"`
	// Fix sugestion for the vulnerability and framework
	Fix *string `json:"fix,omitempty"`
	// Object id.
	ID *string `json:"id,omitempty"`
	// An insertion point is the place in the HTTP request where the
	// malicious payload is injected to exploit the vulnerability.
	//   * cookie - Payload injected into the value of an HTTP cookie
	//   * header - Payload injected into the header of an HTTP request
	//   * parameter - Payload injected into the value of a query string
	//   parameter
	//   * arbitrary_url_param - Payload injected into the value of an
	//   arbitrarily added query string parameter
	//   * url_filename - Payload injected into the URL filename part
	//   * url_folder - Payload injected into the URL folder part
	//   * multipart_parameter - Payload is inserted into the value of a
	//   parameter attribute within a multi-part message body (such as
	//   the name of an uploaded file).
	//   * <empty> - No payload to inject.
	//
	InsertionPoint *FindingInsertionPointEnum `json:"insertion_point,omitempty"`
	// User labels for the finding.
	Labels []string `json:"labels,omitempty"`
	// Date time of the last time the vulnerability was found.
	LastFound *time.Time `json:"last_found,omitempty"`
	// HTTP method
	Method *MethodEnum `json:"method,omitempty"`
	// Vulnerable paramenter.
	Parameter *string `json:"parameter,omitempty"`
	// Request parameters
	Params *string `json:"params,omitempty"`
	// Finding path.
	Path *string `json:"path,omitempty"`
	// Reporting user
	Reporter *Reporter `json:"reporter,omitempty"`
	// Request response pairs that produced the finding
	Requests []Requests `json:"requests,omitempty"`
	// Scan ids where this finding was present.
	Scans []string `json:"scans,omitempty"`
	// Severity, how serious the issue is considered:
	//   * 10 - low
	//   * 20 - medium
	//   * 30 - high
	//
	Severity *FindingSeverityEnum `json:"severity,omitempty"`
	// Finding state:
	//   * notfixed - Issue can still be exploited
	//   * invalid - Issue determined to be a false positive
	//   * accepted - Issue will not be solved and the risk was accepted
	//   * fixed - No problem here anymore
	//
	State  *FindingStateEnum `json:"state,omitempty"`
	Target *TargetSimple     `json:"target,omitempty"`
	// Full finding URL
	URL *string `json:"url,omitempty"`
	// Value for parameter.
	Value *string `json:"value,omitempty"`
}
