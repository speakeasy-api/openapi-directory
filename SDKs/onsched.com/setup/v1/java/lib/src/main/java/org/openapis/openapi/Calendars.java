/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Calendars {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Calendars(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete Calendar Block
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a calendar block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSetupV1CalendarsBlockIdResponse deleteSetupV1CalendarsBlockId(org.openapis.openapi.models.operations.DeleteSetupV1CalendarsBlockIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSetupV1CalendarsBlockIdRequest.class, baseUrl, "/setup/v1/calendars/block/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSetupV1CalendarsBlockIdResponse res = new org.openapis.openapi.models.operations.DeleteSetupV1CalendarsBlockIdResponse() {{
            calendarBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CalendarBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CalendarBlockViewModel.class);
                res.calendarBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Delete Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. The calendar is not permanently deleted and can be recovered by using the &lt;i&gt;PUT \u200b/setup\u200b/v1\u200b/calendars\u200b/{id}\u200b/recover &lt;/i&gt;endpoint.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSetupV1CalendarsIdResponse deleteSetupV1CalendarsId(org.openapis.openapi.models.operations.DeleteSetupV1CalendarsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSetupV1CalendarsIdRequest.class, baseUrl, "/setup/v1/calendars/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSetupV1CalendarsIdResponse res = new org.openapis.openapi.models.operations.DeleteSetupV1CalendarsIdResponse() {{
            scheduleViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScheduleViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScheduleViewModel.class);
                res.scheduleViewModel = out;
            }
        }

        return res;
    }

    /**
     * List Calendars
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendars&lt;/b&gt; from the requested location. If not specified, the business location defaults to the primary business location. &lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1CalendarsResponse getSetupV1Calendars(org.openapis.openapi.models.operations.GetSetupV1CalendarsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/setup/v1/calendars");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1CalendarsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1CalendarsResponse res = new org.openapis.openapi.models.operations.GetSetupV1CalendarsResponse() {{
            scheduleListViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScheduleListViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScheduleListViewModel.class);
                res.scheduleListViewModel = out;
            }
        }

        return res;
    }

    /**
     * Get Calendar Block
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar Block&lt;/b&gt;. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. &lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1CalendarsBlocksIdResponse getSetupV1CalendarsBlocksId(org.openapis.openapi.models.operations.GetSetupV1CalendarsBlocksIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1CalendarsBlocksIdRequest.class, baseUrl, "/setup/v1/calendars/blocks/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1CalendarsBlocksIdResponse res = new org.openapis.openapi.models.operations.GetSetupV1CalendarsBlocksIdResponse() {{
            calendarBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CalendarBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CalendarBlockViewModel.class);
                res.calendarBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Get Calendar
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar&lt;/b&gt; object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1CalendarsIdResponse getSetupV1CalendarsId(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdRequest.class, baseUrl, "/setup/v1/calendars/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1CalendarsIdResponse res = new org.openapis.openapi.models.operations.GetSetupV1CalendarsIdResponse() {{
            scheduleViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScheduleViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScheduleViewModel.class);
                res.scheduleViewModel = out;
            }
        }

        return res;
    }

    /**
     * List Calendar Blocks
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendar Blocks&lt;/b&gt; for the requested calendar. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. &lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1CalendarsIdBlocksResponse getSetupV1CalendarsIdBlocks(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdBlocksRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdBlocksRequest.class, baseUrl, "/setup/v1/calendars/{id}/blocks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdBlocksRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1CalendarsIdBlocksResponse res = new org.openapis.openapi.models.operations.GetSetupV1CalendarsIdBlocksResponse() {{
            calendarBlockListViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CalendarBlockListViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CalendarBlockListViewModel.class);
                res.calendarBlockListViewModel = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List Calendar Services
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Linked Services&lt;/b&gt; of a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. Find calendar id's by using the &lt;i&gt;GET /setup/v1/calendars&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSetupV1CalendarsIdServicesResponse getSetupV1CalendarsIdServices(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdServicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdServicesRequest.class, baseUrl, "/setup/v1/calendars/{id}/services", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSetupV1CalendarsIdServicesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetupV1CalendarsIdServicesResponse res = new org.openapis.openapi.models.operations.GetSetupV1CalendarsIdServicesResponse() {{
            serviceListViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ServiceListViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ServiceListViewModel.class);
                res.serviceListViewModel = out;
            }
        }

        return res;
    }

    /**
     * DEPRECATING: Create
     * &lt;p&gt;
     *   &lt;b&gt;DEPRECATING:&lt;/b&gt; Create Calendar&lt;/p&gt;
     * &lt;p&gt;We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1CalendarsResponse postSetupV1Calendars(org.openapis.openapi.models.shared.ScheduleInputModel request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/setup/v1/calendars");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1CalendarsResponse res = new org.openapis.openapi.models.operations.PostSetupV1CalendarsResponse() {{
            scheduleViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScheduleViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScheduleViewModel.class);
                res.scheduleViewModel = out;
            }
        }

        return res;
    }

    /**
     * Create Calendar Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;
     * &lt;p&gt;Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.&lt;/p&gt;
     * &lt;p&gt;Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;Repeat object: (repeats = true)&lt;/b&gt;
     * &lt;/p&gt;
     * &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;
     * &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of \u201c1\u201d repeats every day, and an interval value of \u201c3\u201d is every 3rd day.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt;  is required and should be set to &lt;b&gt;\u201cW\u201d&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of \u201c1\u201d, and an entry of weekdays = \u201c24\u201d, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;\u201cM\u201d&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay=\u201915\u2019 this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses \u201cday of the week and week of the month\u201d scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=\u201dM\u201d and monthDay=\u201d43\u201d.&lt;/p&gt;
     * &lt;p&gt;
     *   &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;
     * &lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSetupV1CalendarsIdBlockResponse postSetupV1CalendarsIdBlock(org.openapis.openapi.models.operations.PostSetupV1CalendarsIdBlockRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSetupV1CalendarsIdBlockRequest.class, baseUrl, "/setup/v1/calendars/{id}/block", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "calendarBlockInputModel", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSetupV1CalendarsIdBlockResponse res = new org.openapis.openapi.models.operations.PostSetupV1CalendarsIdBlockResponse() {{
            resourceBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ResourceBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ResourceBlockViewModel.class);
                res.resourceBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Update Calendar Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST \u200b/setup\u200b/v1\u200b/calendars\u200b/{id}\u200b/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1CalendarsBlockIdResponse putSetupV1CalendarsBlockId(org.openapis.openapi.models.operations.PutSetupV1CalendarsBlockIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1CalendarsBlockIdRequest.class, baseUrl, "/setup/v1/calendars/block/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "calendarBlockUpdateModel", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1CalendarsBlockIdResponse res = new org.openapis.openapi.models.operations.PutSetupV1CalendarsBlockIdResponse() {{
            calendarBlockViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CalendarBlockViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CalendarBlockViewModel.class);
                res.calendarBlockViewModel = out;
            }
        }

        return res;
    }

    /**
     * Update Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its &lt;b&gt;name = Main&lt;/b&gt;, the &lt;b&gt;type = resource&lt;/b&gt; and by default the &lt;b&gt;interval = 30 mins&lt;/b&gt;. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1CalendarsIdResponse putSetupV1CalendarsId(org.openapis.openapi.models.operations.PutSetupV1CalendarsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1CalendarsIdRequest.class, baseUrl, "/setup/v1/calendars/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "scheduleUpdateModel", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1CalendarsIdResponse res = new org.openapis.openapi.models.operations.PutSetupV1CalendarsIdResponse() {{
            scheduleViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScheduleViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScheduleViewModel.class);
                res.scheduleViewModel = out;
            }
        }

        return res;
    }

    /**
     * Recover Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a previously deleted calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSetupV1CalendarsIdRecoverResponse putSetupV1CalendarsIdRecover(org.openapis.openapi.models.operations.PutSetupV1CalendarsIdRecoverRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSetupV1CalendarsIdRecoverRequest.class, baseUrl, "/setup/v1/calendars/{id}/recover", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSetupV1CalendarsIdRecoverResponse res = new org.openapis.openapi.models.operations.PutSetupV1CalendarsIdRecoverResponse() {{
            scheduleViewModel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScheduleViewModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScheduleViewModel.class);
                res.scheduleViewModel = out;
            }
        }

        return res;
    }
}