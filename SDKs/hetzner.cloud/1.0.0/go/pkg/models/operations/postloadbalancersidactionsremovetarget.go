// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestIP - IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
type PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestIP struct {
	// IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.
	IP string `json:"ip"`
}

// PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestLabelSelector - Configuration for label selector targets, required if type is `label_selector`
type PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestServer - Configuration for type Server, required if type is `server`
type PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestServer struct {
	// ID of the Server
	ID float64 `json:"id"`
}

// PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum - Type of the resource
type PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum string

const (
	PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnumServer        PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum = "server"
	PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnumLabelSelector PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum = "label_selector"
	PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnumIP            PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum = "ip"
)

func (e *PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		fallthrough
	case "ip":
		*e = PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum: %s", s)
	}
}

type PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequest struct {
	// IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
	IP *PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestIP `json:"ip,omitempty"`
	// Configuration for label selector targets, required if type is `label_selector`
	LabelSelector *PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestLabelSelector `json:"label_selector,omitempty"`
	// Configuration for type Server, required if type is `server`
	Server *PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestServer `json:"server,omitempty"`
	// Type of the resource
	Type PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum `json:"type"`
}

type PostLoadBalancersIDActionsRemoveTargetRequest struct {
	RequestBody *PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequest `request:"mediaType=application/json"`
	// ID of the Load Balancer
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostLoadBalancersIDActionsRemoveTargetActionResponseActionError - Error message for the Action if error occurred, otherwise null
type PostLoadBalancersIDActionsRemoveTargetActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostLoadBalancersIDActionsRemoveTargetActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum - Status of the Action
type PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum string

const (
	PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnumSuccess PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum = "success"
	PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnumRunning PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum = "running"
	PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnumError   PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum = "error"
)

func (e *PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum: %s", s)
	}
}

type PostLoadBalancersIDActionsRemoveTargetActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostLoadBalancersIDActionsRemoveTargetActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostLoadBalancersIDActionsRemoveTargetActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum `json:"status"`
}

// PostLoadBalancersIDActionsRemoveTargetActionResponse - The `action` key contains the `remove_target` Action
type PostLoadBalancersIDActionsRemoveTargetActionResponse struct {
	Action PostLoadBalancersIDActionsRemoveTargetActionResponseAction `json:"action"`
}

type PostLoadBalancersIDActionsRemoveTargetResponse struct {
	// The `action` key contains the `remove_target` Action
	ActionResponse *PostLoadBalancersIDActionsRemoveTargetActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
