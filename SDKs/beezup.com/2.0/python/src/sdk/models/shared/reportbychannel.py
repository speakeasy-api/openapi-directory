"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_channelbasicinfo as shared_beezup_common_channelbasicinfo
from ..shared import reportbychannellinks as shared_reportbychannellinks
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportByChannel:
    
    catalog_product_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalogProductCount') }})
    r"""The catalog product count"""  
    channel: shared_beezup_common_channelbasicinfo.BeezUPCommonChannelBasicInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The basic info related to a channel"""  
    click_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickCount') }})
    r"""The click count"""  
    cost: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost') }})
    r"""The cost for"""  
    enabled_product_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledProductCount') }})
    r"""The enabled product count"""  
    links: shared_reportbychannellinks.ReportByChannelLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})  
    order_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderCount') }})
    r"""The order count"""  
    performance_indicator: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceIndicator') }})
    r"""The performance indicator based on the performance indicator formula indicated in the request"""  
    sold_product_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('soldProductCount') }})
    r"""The product sold count count"""  
    total_sales: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSales') }})
    r"""The total sales"""  
    margin: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('margin'), 'exclude': lambda f: f is None }})
    r"""The margin"""  
    roi: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roi'), 'exclude': lambda f: f is None }})
    r"""The Return On Investment"""  
    