<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * V1Order - V1Order
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class V1Order
{
    /**
     * For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
     * 
     * @var ?float $btcPriceSatoshi
     */
	#[\JMS\Serializer\Annotation\SerializedName('btc_price_satoshi')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $btcPriceSatoshi = null;
    
    /**
     * For Bitcoin transactions, the address that the buyer sent Bitcoin to.
     * 
     * @var ?string $btcReceiveAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('btc_receive_address')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $btcReceiveAddress = null;
    
    /**
     * The email address of the order's buyer.
     * 
     * @var ?string $buyerEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('buyer_email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $buyerEmail = null;
    
    /**
     * A note provided by the buyer when the order was created, if any.
     * 
     * @var ?string $buyerNote
     */
	#[\JMS\Serializer\Annotation\SerializedName('buyer_note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $buyerNote = null;
    
    /**
     * A note provided by the merchant when the order's state was set to CANCELED, if any.
     * 
     * @var ?string $canceledNote
     */
	#[\JMS\Serializer\Annotation\SerializedName('canceled_note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $canceledNote = null;
    
    /**
     * A note provided by the merchant when the order's state was set to COMPLETED, if any
     * 
     * @var ?string $completedNote
     */
	#[\JMS\Serializer\Annotation\SerializedName('completed_note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $completedNote = null;
    
    /**
     * The time when the order was created, in ISO 8601 format.
     * 
     * @var ?string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createdAt = null;
    
    /**
     * Any errors that occurred during the request.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Error> $errors
     */
	#[\JMS\Serializer\Annotation\SerializedName('errors')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Error>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $errors = null;
    
    /**
     * The time when the order expires if no action is taken, in ISO 8601 format.
     * 
     * @var ?string $expiresAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('expires_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $expiresAt = null;
    
    /**
     * The order's unique identifier.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The history of actions associated with the order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\V1OrderHistoryEntry> $orderHistory
     */
	#[\JMS\Serializer\Annotation\SerializedName('order_history')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\V1OrderHistoryEntry>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $orderHistory = null;
    
    /**
     * The unique identifier of the payment associated with the order.
     * 
     * @var ?string $paymentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('payment_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $paymentId = null;
    
    /**
     * The promo code provided by the buyer, if any.
     * 
     * @var ?string $promoCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('promo_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $promoCode = null;
    
    /**
     * The name of the order's buyer.
     * 
     * @var ?string $recipientName
     */
	#[\JMS\Serializer\Annotation\SerializedName('recipient_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recipientName = null;
    
    /**
     * The phone number to use for the order's delivery.
     * 
     * @var ?string $recipientPhoneNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('recipient_phone_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recipientPhoneNumber = null;
    
    /**
     * A note provided by the merchant when the order's state was set to REFUNDED, if any.
     * 
     * @var ?string $refundedNote
     */
	#[\JMS\Serializer\Annotation\SerializedName('refunded_note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $refundedNote = null;
    
    /**
     * Represents a postal address in a country. The address format is based 
     * 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Address $shippingAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('shipping_address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $shippingAddress = null;
    
    /**
     * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
     * 
     * @var ?string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $state = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('subtotal_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\V1Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?V1Money $subtotalMoney = null;
    
    /**
     * A tender represents a discrete monetary exchange. Square represents this
     * 
     * exchange as a money object with a specific currency and amount, where the
     * amount is given in the smallest denomination of the given currency.
     * 
     * Square POS can accept more than one form of tender for a single payment (such
     * as by splitting a bill between a credit card and a gift card). The `tender`
     * field of the Payment object lists all forms of tender used for the payment.
     * 
     * Split tender payments behave slightly differently from single tender payments:
     * 
     * The receipt_url for a split tender corresponds only to the first tender listed
     * in the tender field. To get the receipt URLs for the remaining tenders, use
     * the receipt_url fields of the corresponding Tender objects.
     * 
     * *A note on gift cards**: when a customer purchases a Square gift card from a
     * merchant, the merchant receives the full amount of the gift card in the
     * associated payment.
     * 
     * When that gift card is used as a tender, the balance of the gift card is
     * reduced and the merchant receives no funds. A `Tender` object with a type of
     * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
     * associated payment.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\V1Tender $tender
     */
	#[\JMS\Serializer\Annotation\SerializedName('tender')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\V1Tender')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?V1Tender $tender = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('total_discount_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\V1Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?V1Money $totalDiscountMoney = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('total_price_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\V1Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?V1Money $totalPriceMoney = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('total_shipping_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\V1Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?V1Money $totalShippingMoney = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('total_tax_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\V1Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?V1Money $totalTaxMoney = null;
    
    /**
     * The time when the order was last modified, in ISO 8601 format.
     * 
     * @var ?string $updatedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updatedAt = null;
    
	public function __construct()
	{
		$this->btcPriceSatoshi = null;
		$this->btcReceiveAddress = null;
		$this->buyerEmail = null;
		$this->buyerNote = null;
		$this->canceledNote = null;
		$this->completedNote = null;
		$this->createdAt = null;
		$this->errors = null;
		$this->expiresAt = null;
		$this->id = null;
		$this->orderHistory = null;
		$this->paymentId = null;
		$this->promoCode = null;
		$this->recipientName = null;
		$this->recipientPhoneNumber = null;
		$this->refundedNote = null;
		$this->shippingAddress = null;
		$this->state = null;
		$this->subtotalMoney = null;
		$this->tender = null;
		$this->totalDiscountMoney = null;
		$this->totalPriceMoney = null;
		$this->totalShippingMoney = null;
		$this->totalTaxMoney = null;
		$this->updatedAt = null;
	}
}
