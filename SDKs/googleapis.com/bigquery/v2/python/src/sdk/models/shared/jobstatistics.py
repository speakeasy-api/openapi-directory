"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datamaskingstatistics as shared_datamaskingstatistics
from ..shared import jobstatistics2 as shared_jobstatistics2
from ..shared import jobstatistics3 as shared_jobstatistics3
from ..shared import jobstatistics4 as shared_jobstatistics4
from ..shared import jobstatistics5 as shared_jobstatistics5
from ..shared import rowlevelsecuritystatistics as shared_rowlevelsecuritystatistics
from ..shared import scriptstatistics as shared_scriptstatistics
from ..shared import sessioninfo as shared_sessioninfo
from ..shared import transactioninfo as shared_transactioninfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobStatisticsReservationUsage:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Reservation name or \\"unreserved\\" for on-demand resources usage."""  
    slot_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotMs'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Slot-milliseconds the job spent in the given reservation."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobStatistics:
    
    completion_ratio: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completionRatio'), 'exclude': lambda f: f is None }})
    r"""[TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs."""  
    copy: Optional[shared_jobstatistics5.JobStatistics5] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copy'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs."""  
    data_masking_statistics: Optional[shared_datamaskingstatistics.DataMaskingStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataMaskingStatistics'), 'exclude': lambda f: f is None }})  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""[Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state."""  
    extract: Optional[shared_jobstatistics4.JobStatistics4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extract'), 'exclude': lambda f: f is None }})  
    load: Optional[shared_jobstatistics3.JobStatistics3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load'), 'exclude': lambda f: f is None }})  
    num_child_jobs: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numChildJobs'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Number of child jobs executed."""  
    parent_job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentJobId'), 'exclude': lambda f: f is None }})
    r"""[Output-only] If this is a child job, the id of the parent."""  
    query: Optional[shared_jobstatistics2.JobStatistics2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})  
    quota_deferments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaDeferments'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Quotas which delayed this job's start time."""  
    reservation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservation_id'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job."""  
    reservation_usage: Optional[list[JobStatisticsReservationUsage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservationUsage'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Job resource usage breakdown by reservation."""  
    row_level_security_statistics: Optional[shared_rowlevelsecuritystatistics.RowLevelSecurityStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowLevelSecurityStatistics'), 'exclude': lambda f: f is None }})  
    script_statistics: Optional[shared_scriptstatistics.ScriptStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptStatistics'), 'exclude': lambda f: f is None }})  
    session_info: Optional[shared_sessioninfo.SessionInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionInfo'), 'exclude': lambda f: f is None }})  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE."""  
    total_bytes_processed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalBytesProcessed'), 'exclude': lambda f: f is None }})
    r"""[Output-only] [Deprecated] Use the bytes processed in the query statistics instead."""  
    total_slot_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSlotMs'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Slot-milliseconds for the job."""  
    transaction_info: Optional[shared_transactioninfo.TransactionInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionInfo'), 'exclude': lambda f: f is None }})  
    