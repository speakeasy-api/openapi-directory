"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httprouteheadermatchintegerrange as shared_httprouteheadermatchintegerrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPRouteHeaderMatch:
    r"""Specifies how to select a route rule based on HTTP request headers."""
    
    exact_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exactMatch'), 'exclude': lambda f: f is None }})
    r"""The value of the header should match exactly the content of exact_match."""  
    header: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header'), 'exclude': lambda f: f is None }})
    r"""The name of the HTTP header to match against."""  
    invert_match: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invertMatch'), 'exclude': lambda f: f is None }})
    r"""If specified, the match result will be inverted before checking. Default value is set to false."""  
    prefix_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefixMatch'), 'exclude': lambda f: f is None }})
    r"""The value of the header must start with the contents of prefix_match."""  
    present_match: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('presentMatch'), 'exclude': lambda f: f is None }})
    r"""A header with header_name must exist. The match takes place whether or not the header has a value."""  
    range_match: Optional[shared_httprouteheadermatchintegerrange.HTTPRouteHeaderMatchIntegerRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeMatch'), 'exclude': lambda f: f is None }})
    r"""Represents an integer value range."""  
    regex_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regexMatch'), 'exclude': lambda f: f is None }})
    r"""The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax"""  
    suffix_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffixMatch'), 'exclude': lambda f: f is None }})
    r"""The value of the header must end with the contents of suffix_match."""  
    