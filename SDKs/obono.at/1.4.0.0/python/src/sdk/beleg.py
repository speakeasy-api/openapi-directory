"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Beleg:
    r"""resources concerning a \\"Beleg\\" """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_beleg(self, request: operations.AddBelegRequest) -> operations.AddBelegResponse:
        r"""Signs a receipt and stores it in the \\"Datenerfassungsprotokoll\\"."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddBelegRequest, base_url, '/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "belegdaten", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddBelegResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        elif http_res.status_code in [400, 403, 409, 415, 429, 500]:
            pass

        return res

    def create_abschluss(self, request: operations.CreateAbschlussRequest) -> operations.CreateAbschlussResponse:
        r"""Generates an `Abschlussbeleg`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAbschlussRequest, base_url, '/registrierkassen/{registrierkasseUuid}/abschluss', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "abschlussbelegdaten", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAbschlussResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def get_beleg(self, request: operations.GetBelegRequest) -> operations.GetBelegResponse:
        r"""Retrieves a particular `Beleg` from the \\"Datenerfassungsprotokoll\\"."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBelegRequest, base_url, '/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBelegResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Beleg])
                res.beleg = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_belege(self, request: operations.GetBelegeRequest) -> operations.GetBelegeResponse:
        r"""Retrieves the `Beleg` collection from the \\"Datenerfassungsprotokoll\\"."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBelegeRequest, base_url, '/registrierkassen/{registrierkasseUuid}/belege', request)
        
        query_params = utils.get_query_params(operations.GetBelegeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBelegeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Belege])
                res.belege = out

        return res

    def get_belege_beleg_uuid_(self, request: operations.GetBelegeBelegUUIDRequest) -> operations.GetBelegeBelegUUIDResponse:
        r"""Retrieves a particular `Beleg` from the \\"Datenerfassungsprotokoll\\"."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBelegeBelegUUIDRequest, base_url, '/belege/{belegUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBelegeBelegUUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Beleg])
                res.beleg = out
        elif http_res.status_code == 404:
            pass

        return res

    