/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The type of a bot to create.
 */
export enum CreateBotRequestBodyBotTypeEnum {
  Bot = "Bot",
  BotNetwork = "BotNetwork",
}

/**
 * By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
 */
export class CreateBotRequestBodyDataPrivacy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "childDirected" })
  childDirected?: boolean;
}

export class CreateBotRequestBody extends SpeakeasyBase {
  /**
   * The list of bot members in a network to be created.
   */
  @SpeakeasyMetadata({ elemType: shared.BotMember })
  @Expose({ name: "botMembers" })
  @Type(() => shared.BotMember)
  botMembers?: shared.BotMember[];

  /**
   * The name of the bot. The bot name must be unique in the account that creates the bot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "botName" })
  botName: string;

  /**
   * A list of tags to add to the bot. You can only add tags when you create a bot. You can't use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "botTags" })
  botTags?: Record<string, string>;

  /**
   * The type of a bot to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "botType" })
  botType?: CreateBotRequestBodyBotTypeEnum;

  /**
   * By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataPrivacy" })
  @Type(() => CreateBotRequestBodyDataPrivacy)
  dataPrivacy: CreateBotRequestBodyDataPrivacy;

  /**
   * A description of the bot. It appears in lists to help you identify a particular bot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idleSessionTTLInSeconds" })
  idleSessionTTLInSeconds: number;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn: string;

  /**
   * A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can't use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testBotAliasTags" })
  testBotAliasTags?: Record<string, string>;
}

export class CreateBotRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateBotRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateBotResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createBotResponse?: shared.CreateBotResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * PreconditionFailedException
   */
  @SpeakeasyMetadata()
  preconditionFailedException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
