/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CrossSelling {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Product Search of Accessories
   *
   * @remarks
   * Retrieves general information about the product's accessories.
   */
  productSearchAccessories(
    req: operations.ProductSearchAccessoriesRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchAccessoriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchAccessoriesRequest(req);
    }

    let baseURL: string = operations.ProductSearchAccessoriesServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/api/catalog_system/pub/products/crossselling/accessories/{productId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchAccessoriesResponse =
        new operations.ProductSearchAccessoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get Product Search of Show Together
   *
   * @remarks
   * Retrieves general information about the products that are show together with the product in question.
   */
  productSearchShowTogether(
    req: operations.ProductSearchShowTogetherRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchShowTogetherResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchShowTogetherRequest(req);
    }

    let baseURL: string = operations.ProductSearchShowTogetherServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/api/catalog_system/pub/products/crossselling/showtogether/{productId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchShowTogetherResponse =
        new operations.ProductSearchShowTogetherResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get Product Search of Similars
   *
   * @remarks
   * Retrieves general information about related product searches.
   */
  productSearchSimilars(
    req: operations.ProductSearchSimilarsRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchSimilarsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchSimilarsRequest(req);
    }

    let baseURL: string = operations.ProductSearchSimilarsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/api/catalog_system/pub/products/crossselling/similars/{productId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchSimilarsResponse =
        new operations.ProductSearchSimilarsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get Product Search of Suggestions
   *
   * @remarks
   * Retrieves general information about other product suggestions related to the product.
   */
  productSearchSuggestions(
    req: operations.ProductSearchSuggestionsRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchSuggestionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchSuggestionsRequest(req);
    }

    let baseURL: string = operations.ProductSearchSuggestionsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/api/catalog_system/pub/products/crossselling/suggestions/{productId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchSuggestionsResponse =
        new operations.ProductSearchSuggestionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get Product Search of Who Bought Also Bought
   *
   * @remarks
   * Retrieves general information about other related products that the user also bought.
   */
  productSearchWhoBoughtAlsoBought(
    req: operations.ProductSearchWhoBoughtAlsoBoughtRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchWhoBoughtAlsoBoughtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchWhoBoughtAlsoBoughtRequest(req);
    }

    let baseURL: string =
      operations.ProductSearchWhoBoughtAlsoBoughtServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/api/catalog_system/pub/products/crossselling/whoboughtalsobought/{productId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchWhoBoughtAlsoBoughtResponse =
        new operations.ProductSearchWhoBoughtAlsoBoughtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productSearchWhoBoughtAlsoBought200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.productSearchWhoBoughtAlsoBought200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductSearchWhoBoughtAlsoBought200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Product Search of Who Saw Also Bought
   *
   * @remarks
   * Retrieves general information about other related products that the users saw and also bought.
   */
  productSearchWhoSawAlsoBought(
    req: operations.ProductSearchWhoSawAlsoBoughtRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchWhoSawAlsoBoughtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchWhoSawAlsoBoughtRequest(req);
    }

    let baseURL: string = operations.ProductSearchWhoSawAlsoBoughtServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/api/catalog_system/pub/products/crossselling/whosawalsobought/{productId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchWhoSawAlsoBoughtResponse =
        new operations.ProductSearchWhoSawAlsoBoughtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productSearchWhoSawAlsoBought200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.productSearchWhoSawAlsoBought200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductSearchWhoSawAlsoBought200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Product Search of Who Saw Also Saw
   *
   * @remarks
   * Retrieves general information about other related products that the users also saw.
   */
  productSearchWhoSawAlsoSaw(
    req: operations.ProductSearchWhoSawAlsoSawRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchWhoSawAlsoSawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchWhoSawAlsoSawRequest(req);
    }

    let baseURL: string = operations.ProductSearchWhoSawAlsoSawServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/api/catalog_system/pub/products/crossselling/whosawalsosaw/{productId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchWhoSawAlsoSawResponse =
        new operations.ProductSearchWhoSawAlsoSawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productSearchWhoSawAlsoSaw200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.productSearchWhoSawAlsoSaw200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductSearchWhoSawAlsoSaw200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }
}
