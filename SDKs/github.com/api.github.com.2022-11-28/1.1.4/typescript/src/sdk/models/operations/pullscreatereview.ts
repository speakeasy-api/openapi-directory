/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PullsCreateReviewRequestBodyComments extends SpeakeasyBase {
  /**
   * Text of the review comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  @SpeakeasyMetadata()
  @Expose({ name: "line" })
  line?: number;

  /**
   * The relative path to the file that necessitates a review comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;

  /**
   * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  position?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "side" })
  side?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "start_line" })
  startLine?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "start_side" })
  startSide?: string;
}

/**
 * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
 */
export enum PullsCreateReviewRequestBodyEventEnum {
  Approve = "APPROVE",
  RequestChanges = "REQUEST_CHANGES",
  Comment = "COMMENT",
}

export class PullsCreateReviewRequestBody extends SpeakeasyBase {
  /**
   * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * Use the following table to specify the location, destination, and contents of the draft review comment.
   */
  @SpeakeasyMetadata({ elemType: PullsCreateReviewRequestBodyComments })
  @Expose({ name: "comments" })
  @Type(() => PullsCreateReviewRequestBodyComments)
  comments?: PullsCreateReviewRequestBodyComments[];

  /**
   * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_id" })
  commitId?: string;

  /**
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  event?: PullsCreateReviewRequestBodyEventEnum;
}

export class PullsCreateReviewRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PullsCreateReviewRequestBody;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The number that identifies the pull request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=pull_number",
  })
  pullNumber: number;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class PullsCreateReviewResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  pullRequestReview?: shared.PullRequestReview;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationErrorSimple?: shared.ValidationErrorSimple;
}
