// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type RequestAccessTokenPathParams struct {
	// The [key name](https://www.ably.io/documentation/rest-api/token-request-spec#api-key-format) comprises of the app ID and key ID of an API key.
	KeyName string `pathParam:"style=simple,explode=false,name=keyName"`
}

type RequestAccessTokenQueryParams struct {
	// The response format you would like
	Format *shared.ResponseFormatEnum `queryParam:"style=form,explode=true,name=format"`
}

type RequestAccessTokenHeaders struct {
	// The version of the API you wish to use.
	XAblyVersion *string `header:"style=simple,explode=false,name=X-Ably-Version"`
}

type RequestAccessTokenRequestBodyType string

const (
	RequestAccessTokenRequestBodyTypeTokenRequest       RequestAccessTokenRequestBodyType = "TokenRequest"
	RequestAccessTokenRequestBodyTypeSignedTokenRequest RequestAccessTokenRequestBodyType = "SignedTokenRequest"
)

type RequestAccessTokenRequestBody struct {
	TokenRequest       *shared.TokenRequest
	SignedTokenRequest *shared.SignedTokenRequest

	Type RequestAccessTokenRequestBodyType
}

func CreateRequestAccessTokenRequestBodyTokenRequest(tokenRequest shared.TokenRequest) RequestAccessTokenRequestBody {
	typ := RequestAccessTokenRequestBodyTypeTokenRequest

	return RequestAccessTokenRequestBody{
		TokenRequest: &tokenRequest,
		Type:         typ,
	}
}

func CreateRequestAccessTokenRequestBodySignedTokenRequest(signedTokenRequest shared.SignedTokenRequest) RequestAccessTokenRequestBody {
	typ := RequestAccessTokenRequestBodyTypeSignedTokenRequest

	return RequestAccessTokenRequestBody{
		SignedTokenRequest: &signedTokenRequest,
		Type:               typ,
	}
}

func (u *RequestAccessTokenRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	tokenRequest := new(shared.TokenRequest)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&tokenRequest); err == nil {
		u.TokenRequest = tokenRequest
		u.Type = RequestAccessTokenRequestBodyTypeTokenRequest
		return nil
	}

	signedTokenRequest := new(shared.SignedTokenRequest)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&signedTokenRequest); err == nil {
		u.SignedTokenRequest = signedTokenRequest
		u.Type = RequestAccessTokenRequestBodyTypeSignedTokenRequest
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RequestAccessTokenRequestBody) MarshalJSON() ([]byte, error) {
	if u.TokenRequest != nil {
		return json.Marshal(u.TokenRequest)
	}

	if u.SignedTokenRequest != nil {
		return json.Marshal(u.SignedTokenRequest)
	}

	return nil, nil
}

type RequestAccessTokenRequest struct {
	PathParams  RequestAccessTokenPathParams
	QueryParams RequestAccessTokenQueryParams
	Headers     RequestAccessTokenHeaders
	Request     *RequestAccessTokenRequestBody `request:"mediaType=application/json"`
}

type RequestAccessTokenResponse struct {
	Body        []byte
	ContentType string
	// Error
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// OK
	TokenDetails *shared.TokenDetails
}
