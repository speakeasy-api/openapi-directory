// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReleasesGetReleaseUploadStatusSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type ReleasesGetReleaseUploadStatusPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release upload
	UploadID string `pathParam:"style=simple,explode=false,name=upload_id"`
}

type ReleasesGetReleaseUploadStatusRequest struct {
	PathParams ReleasesGetReleaseUploadStatusPathParams
	Security   ReleasesGetReleaseUploadStatusSecurity
}

type ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum string

const (
	ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnumBadRequest          ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnumConflict            ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnumNotAcceptable       ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnumNotFound            ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnumInternalServerError ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnumUnauthorized        ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnumTooManyRequests     ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetReleaseUploadStatus404ApplicationJSON - Error codes:
// - `not_found` - The app or upload doesn't exist.
type ReleasesGetReleaseUploadStatus404ApplicationJSON struct {
	Code    ReleasesGetReleaseUploadStatus404ApplicationJSONCodeEnum `json:"code"`
	Message string                                                   `json:"message"`
}

type ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum string

const (
	ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnumBadRequest          ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnumConflict            ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnumNotAcceptable       ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnumNotFound            ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnumInternalServerError ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnumUnauthorized        ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnumTooManyRequests     ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetReleaseUploadStatus400ApplicationJSON - The request contained invalid properties.
type ReleasesGetReleaseUploadStatus400ApplicationJSON struct {
	Code    ReleasesGetReleaseUploadStatus400ApplicationJSONCodeEnum `json:"code"`
	Message string                                                   `json:"message"`
}

// ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum - The current upload status.
type ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum string

const (
	ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnumUploadStarted      ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "uploadStarted"
	ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnumUploadFinished     ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "uploadFinished"
	ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnumReadyToBePublished ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "readyToBePublished"
	ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnumMalwareDetected    ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "malwareDetected"
	ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnumError              ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "error"
)

func (e *ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uploadStarted":
		fallthrough
	case "uploadFinished":
		fallthrough
	case "readyToBePublished":
		fallthrough
	case "malwareDetected":
		fallthrough
	case "error":
		*e = ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum: %s", s)
	}
}

// ReleasesGetReleaseUploadStatus200ApplicationJSON - Success
type ReleasesGetReleaseUploadStatus200ApplicationJSON struct {
	// Details describing what went wrong processing the upload. Will only be set if status = 'error'.
	ErrorDetails *string `json:"error_details,omitempty"`
	// The ID for the upload.
	ID string `json:"id"`
	// The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.
	ReleaseDistinctID *float64 `json:"release_distinct_id,omitempty"`
	// The URL of the release. Will only be set when the status = 'readyToBePublished'.
	ReleaseURL interface{} `json:"release_url,omitempty"`
	// The current upload status.
	UploadStatus ReleasesGetReleaseUploadStatus200ApplicationJSONUploadStatusEnum `json:"upload_status"`
}

type ReleasesGetReleaseUploadStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesGetReleaseUploadStatus200ApplicationJSONObject *ReleasesGetReleaseUploadStatus200ApplicationJSON
	// The request contained invalid properties.
	ReleasesGetReleaseUploadStatus400ApplicationJSONObject *ReleasesGetReleaseUploadStatus400ApplicationJSON
	// Error codes:
	// - `not_found` - The app or upload doesn't exist.
	//
	ReleasesGetReleaseUploadStatus404ApplicationJSONObject *ReleasesGetReleaseUploadStatus404ApplicationJSON
}
