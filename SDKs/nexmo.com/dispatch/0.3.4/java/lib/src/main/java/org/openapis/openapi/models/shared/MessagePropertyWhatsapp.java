/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class MessagePropertyWhatsapp {
    /**
     * We are using the industry standard, BCP 47, for locales. So in your API call to the /messages API you will need to put \u201cen-GB\u201d and this will refer to the \u201cen_GB\u201d template for WhatsApp. A full list of the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    public String locale;

    public MessagePropertyWhatsapp withLocale(String locale) {
        this.locale = locale;
        return this;
    }
    
    /**
     * Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` \u2014 Deliver the Message Template in exactly the language and locale asked for. `fallback` \u2014 Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policy")
    public MessagePropertyWhatsappPolicyEnum policy;

    public MessagePropertyWhatsapp withPolicy(MessagePropertyWhatsappPolicyEnum policy) {
        this.policy = policy;
        return this;
    }
    
    public MessagePropertyWhatsapp(){}
}
