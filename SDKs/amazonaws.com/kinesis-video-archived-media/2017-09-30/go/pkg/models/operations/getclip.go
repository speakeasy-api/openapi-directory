// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// GetClipRequestBodyClipFragmentSelector - <p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the clip will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned.</p>
type GetClipRequestBodyClipFragmentSelector struct {
	FragmentSelectorType *shared.ClipFragmentSelectorTypeEnum `json:"FragmentSelectorType,omitempty"`
	TimestampRange       *shared.ClipTimestampRange           `json:"TimestampRange,omitempty"`
}

type GetClipRequestBody struct {
	// <p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the clip will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned.</p>
	ClipFragmentSelector GetClipRequestBodyClipFragmentSelector `json:"ClipFragmentSelector"`
	// <p>The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip. </p> <p>You must specify either the StreamName or the StreamARN. </p>
	StreamARN *string `json:"StreamARN,omitempty"`
	// <p>The name of the stream for which to retrieve the media clip. </p> <p>You must specify either the StreamName or the StreamARN. </p>
	StreamName *string `json:"StreamName,omitempty"`
}

type GetClipRequest struct {
	RequestBody       GetClipRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GetClipResponse struct {
	// ClientLimitExceededException
	ClientLimitExceededException interface{}
	ContentType                  string
	// Success
	GetClipOutput *shared.GetClipOutput
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidCodecPrivateDataException
	InvalidCodecPrivateDataException interface{}
	// InvalidMediaFrameException
	InvalidMediaFrameException interface{}
	// MissingCodecPrivateDataException
	MissingCodecPrivateDataException interface{}
	// NoDataRetentionException
	NoDataRetentionException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// UnsupportedStreamMediaTypeException
	UnsupportedStreamMediaTypeException interface{}
}
