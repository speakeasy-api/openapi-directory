<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Event - Represents user interaction event information sent using the <code>PutEvents</code> API.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Event
{
	#[\JMS\Serializer\Annotation\SerializedName('eventId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $eventId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('eventType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventType;
    
	#[\JMS\Serializer\Annotation\SerializedName('eventValue')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $eventValue = null;
    
    /**
     * $impression
     * 
     * @var ?array<string> $impression
     */
	#[\JMS\Serializer\Annotation\SerializedName('impression')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $impression = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('itemId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $itemId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('metricAttribution')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MetricAttribution')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MetricAttribution $metricAttribution = null;
    
    /**
     * <p>A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>) , you might also send the number of movie ratings made by the user.</p> <p>Each item in the map consists of a key-value pair. For example,</p> <p> <code>{"numberOfRatings": "12"}</code> </p> <p>The keys use camel case names that match the fields in the Interactions schema. In the above example, the <code>numberOfRatings</code> would match the 'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>
     * 
     * @var mixed $properties
     */
	#[\JMS\Serializer\Annotation\SerializedName('properties')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $properties = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('recommendationId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recommendationId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('sentAt')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $sentAt;
    
	public function __construct()
	{
		$this->eventId = null;
		$this->eventType = "";
		$this->eventValue = null;
		$this->impression = null;
		$this->itemId = null;
		$this->metricAttribution = null;
		$this->properties = null;
		$this->recommendationId = null;
		$this->sentAt = new \DateTime();
	}
}
