// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum string

const (
	Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnumLessThanNilGreaterThan Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum = "<nil>"
	Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnumDefault                Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum = "DEFAULT"
)

func (e Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum) ToPointer() *Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum {
	return &e
}

func (e *Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "DEFAULT":
		*e = Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum: %v", v)
	}
}

type Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchema struct {
	// Vehicle's maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.
	BatteryCapacity *float64 `json:"batteryCapacity,omitempty"`
	// Remaining battery in percent
	BatteryLevel *float64 `json:"batteryLevel,omitempty"`
	// Charge limit, as a percent of `batteryCapacity`.
	ChargeLimit *float64 `json:"chargeLimit,omitempty"`
	// The current charge rate in kW.
	//
	// This property is only available when the vehicle is charging, and is `null` any other time.
	ChargeRate *float64 `json:"chargeRate,omitempty"`
	// Estimated time until the current charging intent is completed, in minutes.
	//
	// This property is only available when the vehicle is charging, and is `null` any other time.
	ChargeTimeRemaining *float64 `json:"chargeTimeRemaining,omitempty"`
	// Current charging status of the vehicle
	IsCharging *bool `json:"isCharging,omitempty"`
	// Array of string constants that explain why the car is or is not charging. May contain multiple values.
	//
	// **Any:**
	// - DEFAULT - the car is not being controlled by Enode
	//
	// **Not Charging:**
	// - NOT_PLUGGED_IN - because the car is not plugged into a charger
	// - FULLY_CHARGED - because the car is fully charged
	// - MANUALLY_STOPPED - because the car has been manually commanded to stop charging
	// - SMART_CHARGING_DELAY - because Smart Charging has identified an opportunity to delay charging until prices are lower
	//
	// **Charging:**
	// - MANUALLY_STARTED - because the car has been manually commanded to start charging
	// - SMART_CHARGING_ACTIVE - because Smart Charging has identified that this is an optimal time to charge
	// - SMART_CHARGING_DEADLINE - because, regardless of price, charging must be active to meet the configured deadline
	IsChargingReasons []Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum `json:"isChargingReasons,omitempty"`
	// Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)
	IsPluggedIn *bool `json:"isPluggedIn,omitempty"`
	// Estimated remaining kilometers
	Range *float64 `json:"range,omitempty"`
}
