"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = exports.DeviceStateEnum = exports.DeviceOwnershipEnum = exports.DeviceManagementModeEnum = exports.DeviceAppliedStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
var applicationreport_1 = require("./applicationreport");
var commoncriteriamodeinfo_1 = require("./commoncriteriamodeinfo");
var devicesettings_1 = require("./devicesettings");
var display_1 = require("./display");
var hardwareinfo_1 = require("./hardwareinfo");
var hardwarestatus_1 = require("./hardwarestatus");
var memoryevent_1 = require("./memoryevent");
var memoryinfo_1 = require("./memoryinfo");
var networkinfo_1 = require("./networkinfo");
var noncompliancedetail_1 = require("./noncompliancedetail");
var passwordrequirements_1 = require("./passwordrequirements");
var powermanagementevent_1 = require("./powermanagementevent");
var securityposture_1 = require("./securityposture");
var softwareinfo_1 = require("./softwareinfo");
var user_1 = require("./user");
var userfacingmessage_1 = require("./userfacingmessage");
var class_transformer_1 = require("class-transformer");
/**
 * The state currently applied to the device.
 */
var DeviceAppliedStateEnum;
(function (DeviceAppliedStateEnum) {
    DeviceAppliedStateEnum["DeviceStateUnspecified"] = "DEVICE_STATE_UNSPECIFIED";
    DeviceAppliedStateEnum["Active"] = "ACTIVE";
    DeviceAppliedStateEnum["Disabled"] = "DISABLED";
    DeviceAppliedStateEnum["Deleted"] = "DELETED";
    DeviceAppliedStateEnum["Provisioning"] = "PROVISIONING";
})(DeviceAppliedStateEnum = exports.DeviceAppliedStateEnum || (exports.DeviceAppliedStateEnum = {}));
/**
 * The type of management mode Android Device Policy takes on the device. This influences which policy settings are supported.
 */
var DeviceManagementModeEnum;
(function (DeviceManagementModeEnum) {
    DeviceManagementModeEnum["ManagementModeUnspecified"] = "MANAGEMENT_MODE_UNSPECIFIED";
    DeviceManagementModeEnum["DeviceOwner"] = "DEVICE_OWNER";
    DeviceManagementModeEnum["ProfileOwner"] = "PROFILE_OWNER";
})(DeviceManagementModeEnum = exports.DeviceManagementModeEnum || (exports.DeviceManagementModeEnum = {}));
/**
 * Ownership of the managed device.
 */
var DeviceOwnershipEnum;
(function (DeviceOwnershipEnum) {
    DeviceOwnershipEnum["OwnershipUnspecified"] = "OWNERSHIP_UNSPECIFIED";
    DeviceOwnershipEnum["CompanyOwned"] = "COMPANY_OWNED";
    DeviceOwnershipEnum["PersonallyOwned"] = "PERSONALLY_OWNED";
})(DeviceOwnershipEnum = exports.DeviceOwnershipEnum || (exports.DeviceOwnershipEnum = {}));
/**
 * The state to be applied to the device. This field can be modified by a patch request. Note that when calling enterprises.devices.patch, ACTIVE and DISABLED are the only allowable values. To enter the device into a DELETED state, call enterprises.devices.delete.
 */
var DeviceStateEnum;
(function (DeviceStateEnum) {
    DeviceStateEnum["DeviceStateUnspecified"] = "DEVICE_STATE_UNSPECIFIED";
    DeviceStateEnum["Active"] = "ACTIVE";
    DeviceStateEnum["Disabled"] = "DISABLED";
    DeviceStateEnum["Deleted"] = "DELETED";
    DeviceStateEnum["Provisioning"] = "PROVISIONING";
})(DeviceStateEnum = exports.DeviceStateEnum || (exports.DeviceStateEnum = {}));
/**
 * A device owned by an enterprise. Unless otherwise noted, all fields are read-only and can't be modified by enterprises.devices.patch.
 */
var Device = /** @class */ (function (_super) {
    __extends(Device, _super);
    function Device() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "apiLevel" }),
        __metadata("design:type", Number)
    ], Device.prototype, "apiLevel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: applicationreport_1.ApplicationReport }),
        (0, class_transformer_1.Expose)({ name: "applicationReports" }),
        (0, class_transformer_1.Type)(function () { return applicationreport_1.ApplicationReport; }),
        __metadata("design:type", Array)
    ], Device.prototype, "applicationReports", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: passwordrequirements_1.PasswordRequirements }),
        (0, class_transformer_1.Expose)({ name: "appliedPasswordPolicies" }),
        (0, class_transformer_1.Type)(function () { return passwordrequirements_1.PasswordRequirements; }),
        __metadata("design:type", Array)
    ], Device.prototype, "appliedPasswordPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appliedPolicyName" }),
        __metadata("design:type", String)
    ], Device.prototype, "appliedPolicyName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appliedPolicyVersion" }),
        __metadata("design:type", String)
    ], Device.prototype, "appliedPolicyVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appliedState" }),
        __metadata("design:type", String)
    ], Device.prototype, "appliedState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "commonCriteriaModeInfo" }),
        (0, class_transformer_1.Type)(function () { return commoncriteriamodeinfo_1.CommonCriteriaModeInfo; }),
        __metadata("design:type", commoncriteriamodeinfo_1.CommonCriteriaModeInfo)
    ], Device.prototype, "commonCriteriaModeInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deviceSettings" }),
        (0, class_transformer_1.Type)(function () { return devicesettings_1.DeviceSettings; }),
        __metadata("design:type", devicesettings_1.DeviceSettings)
    ], Device.prototype, "deviceSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "disabledReason" }),
        (0, class_transformer_1.Type)(function () { return userfacingmessage_1.UserFacingMessage; }),
        __metadata("design:type", userfacingmessage_1.UserFacingMessage)
    ], Device.prototype, "disabledReason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: display_1.Display }),
        (0, class_transformer_1.Expose)({ name: "displays" }),
        (0, class_transformer_1.Type)(function () { return display_1.Display; }),
        __metadata("design:type", Array)
    ], Device.prototype, "displays", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enrollmentTime" }),
        __metadata("design:type", String)
    ], Device.prototype, "enrollmentTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enrollmentTokenData" }),
        __metadata("design:type", String)
    ], Device.prototype, "enrollmentTokenData", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enrollmentTokenName" }),
        __metadata("design:type", String)
    ], Device.prototype, "enrollmentTokenName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hardwareInfo" }),
        (0, class_transformer_1.Type)(function () { return hardwareinfo_1.HardwareInfo; }),
        __metadata("design:type", hardwareinfo_1.HardwareInfo)
    ], Device.prototype, "hardwareInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: hardwarestatus_1.HardwareStatus }),
        (0, class_transformer_1.Expose)({ name: "hardwareStatusSamples" }),
        (0, class_transformer_1.Type)(function () { return hardwarestatus_1.HardwareStatus; }),
        __metadata("design:type", Array)
    ], Device.prototype, "hardwareStatusSamples", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastPolicyComplianceReportTime" }),
        __metadata("design:type", String)
    ], Device.prototype, "lastPolicyComplianceReportTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastPolicySyncTime" }),
        __metadata("design:type", String)
    ], Device.prototype, "lastPolicySyncTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastStatusReportTime" }),
        __metadata("design:type", String)
    ], Device.prototype, "lastStatusReportTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "managementMode" }),
        __metadata("design:type", String)
    ], Device.prototype, "managementMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: memoryevent_1.MemoryEvent }),
        (0, class_transformer_1.Expose)({ name: "memoryEvents" }),
        (0, class_transformer_1.Type)(function () { return memoryevent_1.MemoryEvent; }),
        __metadata("design:type", Array)
    ], Device.prototype, "memoryEvents", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "memoryInfo" }),
        (0, class_transformer_1.Type)(function () { return memoryinfo_1.MemoryInfo; }),
        __metadata("design:type", memoryinfo_1.MemoryInfo)
    ], Device.prototype, "memoryInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Device.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkInfo" }),
        (0, class_transformer_1.Type)(function () { return networkinfo_1.NetworkInfo; }),
        __metadata("design:type", networkinfo_1.NetworkInfo)
    ], Device.prototype, "networkInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: noncompliancedetail_1.NonComplianceDetail }),
        (0, class_transformer_1.Expose)({ name: "nonComplianceDetails" }),
        (0, class_transformer_1.Type)(function () { return noncompliancedetail_1.NonComplianceDetail; }),
        __metadata("design:type", Array)
    ], Device.prototype, "nonComplianceDetails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ownership" }),
        __metadata("design:type", String)
    ], Device.prototype, "ownership", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "policyCompliant" }),
        __metadata("design:type", Boolean)
    ], Device.prototype, "policyCompliant", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "policyName" }),
        __metadata("design:type", String)
    ], Device.prototype, "policyName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: powermanagementevent_1.PowerManagementEvent }),
        (0, class_transformer_1.Expose)({ name: "powerManagementEvents" }),
        (0, class_transformer_1.Type)(function () { return powermanagementevent_1.PowerManagementEvent; }),
        __metadata("design:type", Array)
    ], Device.prototype, "powerManagementEvents", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "previousDeviceNames" }),
        __metadata("design:type", Array)
    ], Device.prototype, "previousDeviceNames", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "securityPosture" }),
        (0, class_transformer_1.Type)(function () { return securityposture_1.SecurityPosture; }),
        __metadata("design:type", securityposture_1.SecurityPosture)
    ], Device.prototype, "securityPosture", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "softwareInfo" }),
        (0, class_transformer_1.Type)(function () { return softwareinfo_1.SoftwareInfo; }),
        __metadata("design:type", softwareinfo_1.SoftwareInfo)
    ], Device.prototype, "softwareInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Device.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "systemProperties" }),
        __metadata("design:type", Object)
    ], Device.prototype, "systemProperties", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "user" }),
        (0, class_transformer_1.Type)(function () { return user_1.User; }),
        __metadata("design:type", user_1.User)
    ], Device.prototype, "user", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "userName" }),
        __metadata("design:type", String)
    ], Device.prototype, "userName", void 0);
    return Device;
}(utils_1.SpeakeasyBase));
exports.Device = Device;
