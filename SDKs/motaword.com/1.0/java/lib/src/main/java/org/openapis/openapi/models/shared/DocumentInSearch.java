/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class DocumentInSearch {
    /**
     * Extension of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_type")
    public String fileType;

    public DocumentInSearch withFileType(String fileType) {
        this.fileType = fileType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_custom_package")
    public Boolean hasCustomPackage;

    public DocumentInSearch withHasCustomPackage(Boolean hasCustomPackage) {
        this.hasCustomPackage = hasCustomPackage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public DocumentInSearch withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public DocumentLinks links;

    public DocumentInSearch withLinks(DocumentLinks links) {
        this.links = links;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manual_files")
    public ManualFile[] manualFiles;

    public DocumentInSearch withManualFiles(ManualFile[] manualFiles) {
        this.manualFiles = manualFiles;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public DocumentInSearch withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    public Long projectId;

    public DocumentInSearch withProjectId(Long projectId) {
        this.projectId = projectId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("review_in_manual_editor")
    public Boolean reviewInManualEditor;

    public DocumentInSearch withReviewInManualEditor(Boolean reviewInManualEditor) {
        this.reviewInManualEditor = reviewInManualEditor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme")
    public java.util.Map<String, Object> scheme;

    public DocumentInSearch withScheme(java.util.Map<String, Object> scheme) {
        this.scheme = scheme;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_result_reason")
    public String searchResultReason;

    public DocumentInSearch withSearchResultReason(String searchResultReason) {
        this.searchResultReason = searchResultReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_score")
    public Float searchScore;

    public DocumentInSearch withSearchScore(Float searchScore) {
        this.searchScore = searchScore;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_language")
    public String sourceLanguage;

    public DocumentInSearch withSourceLanguage(String sourceLanguage) {
        this.sourceLanguage = sourceLanguage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    public String subject;

    public DocumentInSearch withSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_languages")
    public String[] targetLanguages;

    public DocumentInSearch withTargetLanguages(String[] targetLanguages) {
        this.targetLanguages = targetLanguages;
        return this;
    }
    
    /**
     * Unix epoch time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploaded_at")
    public Long uploadedAt;

    public DocumentInSearch withUploadedAt(Long uploadedAt) {
        this.uploadedAt = uploadedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("word_count")
    public Long wordCount;

    public DocumentInSearch withWordCount(Long wordCount) {
        this.wordCount = wordCount;
        return this;
    }
    
    public DocumentInSearch(){}
}
