// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ExecuteSwitchTrasactionSecurity struct {
	APISecretKey shared.SchemeAPISecretKey `security:"scheme,type=apiKey,subtype=header"`
}

type ExecuteSwitchTrasactionHeaders struct {
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum - Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
type ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum string

const (
	ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnumPercentage ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "percentage"
	ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnumUnit       ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "unit"
	ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnumValue      ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "value"
)

func (e *ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "percentage":
		fallthrough
	case "unit":
		fallthrough
	case "value":
		*e = ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum: %s", s)
	}
}

// ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequest - Each individual buy side and sell side instruction of the Switch request
type ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequest struct {
	// Identifier of the investment product sold or bought. If the instruction is to use a cash holding (relevant only for sell instruction) this must be `cash`
	InvestmentProductID string `json:"investment_product_id"`
	// Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
	Mode ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum `json:"mode"`
	// value according to the mode. e.g. mode `percentage` and value `10` implies 10%
	Value string `json:"value"`
}

// ExecuteSwitchTrasactionSwitchInstructionRequest - Definition of Switch instruction
type ExecuteSwitchTrasactionSwitchInstructionRequest struct {
	BuyInstructions []ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequest `json:"buy_instructions"`
	// Identifier of the pot the instruction is sent to
	PotID string `json:"pot_id"`
	// Unique request id to ensure idempotency. (eg: UUID)
	RequestID        string                                                                                      `json:"request_id"`
	SellInstructions []ExecuteSwitchTrasactionSwitchInstructionRequestEachBuyOrSellInstructionOfTheSwitchRequest `json:"sell_instructions"`
}

type ExecuteSwitchTrasactionRequest struct {
	Headers  ExecuteSwitchTrasactionHeaders
	Request  *ExecuteSwitchTrasactionSwitchInstructionRequest `request:"mediaType=application/json"`
	Security ExecuteSwitchTrasactionSecurity
}

// ExecuteSwitchTrasaction500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type ExecuteSwitchTrasaction500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSwitchTrasaction429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type ExecuteSwitchTrasaction429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSwitchTrasaction409ApplicationJSONStatusEnum - Current status of the original request
type ExecuteSwitchTrasaction409ApplicationJSONStatusEnum string

const (
	ExecuteSwitchTrasaction409ApplicationJSONStatusEnumProcessing ExecuteSwitchTrasaction409ApplicationJSONStatusEnum = "PROCESSING"
	ExecuteSwitchTrasaction409ApplicationJSONStatusEnumComplete   ExecuteSwitchTrasaction409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e *ExecuteSwitchTrasaction409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = ExecuteSwitchTrasaction409ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSwitchTrasaction409ApplicationJSONStatusEnum: %s", s)
	}
}

// ExecuteSwitchTrasaction409ApplicationJSON - Duplicate request
type ExecuteSwitchTrasaction409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status ExecuteSwitchTrasaction409ApplicationJSONStatusEnum `json:"status"`
}

// ExecuteSwitchTrasaction404ApplicationJSON - The specified resource was not found
type ExecuteSwitchTrasaction404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSwitchTrasaction403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type ExecuteSwitchTrasaction403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSwitchTrasaction401ApplicationJSON - You do not have permissions to access this resource.
type ExecuteSwitchTrasaction401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSwitchTrasaction400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type ExecuteSwitchTrasaction400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum - Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
type ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum string

const (
	ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnumPercentage ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "percentage"
	ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnumUnit       ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "unit"
	ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnumValue      ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "value"
)

func (e *ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "percentage":
		fallthrough
	case "unit":
		fallthrough
	case "value":
		*e = ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum: %s", s)
	}
}

// ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest - Each individual buy side and sell side instruction of the Switch request
type ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest struct {
	// Identifier of the investment product sold or bought. If the instruction is to use a cash holding (relevant only for sell instruction) this must be `cash`
	InvestmentProductID string `json:"investment_product_id"`
	// Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
	Mode ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum `json:"mode"`
	// value according to the mode. e.g. mode `percentage` and value `10` implies 10%
	Value string `json:"value"`
}

// ExecuteSwitchTrasaction200ApplicationJSONOriginEnum - Describe the origin from where the switch transaction is triggered
type ExecuteSwitchTrasaction200ApplicationJSONOriginEnum string

const (
	ExecuteSwitchTrasaction200ApplicationJSONOriginEnumAPI       ExecuteSwitchTrasaction200ApplicationJSONOriginEnum = "api"
	ExecuteSwitchTrasaction200ApplicationJSONOriginEnumRebalance ExecuteSwitchTrasaction200ApplicationJSONOriginEnum = "rebalance"
)

func (e *ExecuteSwitchTrasaction200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api":
		fallthrough
	case "rebalance":
		*e = ExecuteSwitchTrasaction200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSwitchTrasaction200ApplicationJSONOriginEnum: %s", s)
	}
}

// ExecuteSwitchTrasaction200ApplicationJSONStatusEnum - Status of the Switch instruction
type ExecuteSwitchTrasaction200ApplicationJSONStatusEnum string

const (
	ExecuteSwitchTrasaction200ApplicationJSONStatusEnumInitiated      ExecuteSwitchTrasaction200ApplicationJSONStatusEnum = "initiated"
	ExecuteSwitchTrasaction200ApplicationJSONStatusEnumSellInProgress ExecuteSwitchTrasaction200ApplicationJSONStatusEnum = "sell_in_progress"
	ExecuteSwitchTrasaction200ApplicationJSONStatusEnumBuyInProgress  ExecuteSwitchTrasaction200ApplicationJSONStatusEnum = "buy_in_progress"
	ExecuteSwitchTrasaction200ApplicationJSONStatusEnumCompleted      ExecuteSwitchTrasaction200ApplicationJSONStatusEnum = "completed"
)

func (e *ExecuteSwitchTrasaction200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initiated":
		fallthrough
	case "sell_in_progress":
		fallthrough
	case "buy_in_progress":
		fallthrough
	case "completed":
		*e = ExecuteSwitchTrasaction200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteSwitchTrasaction200ApplicationJSONStatusEnum: %s", s)
	}
}

// ExecuteSwitchTrasaction200ApplicationJSON - success
type ExecuteSwitchTrasaction200ApplicationJSON struct {
	BuyInstructions []ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest `json:"buy_instructions"`
	// Describe the origin from where the switch transaction is triggered
	Origin ExecuteSwitchTrasaction200ApplicationJSONOriginEnum `json:"origin"`
	// Identifier of the pot the instruction is sent to
	PotID            string                                                                                `json:"pot_id"`
	SellInstructions []ExecuteSwitchTrasaction200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest `json:"sell_instructions"`
	// Status of the Switch instruction
	Status ExecuteSwitchTrasaction200ApplicationJSONStatusEnum `json:"status"`
	// Unique identifier of the switch instruction
	SwitchTransactionID string `json:"switch_transaction_id"`
}

type ExecuteSwitchTrasactionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	ExecuteSwitchTrasaction200ApplicationJSONObject *ExecuteSwitchTrasaction200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	ExecuteSwitchTrasaction400ApplicationJSONObject *ExecuteSwitchTrasaction400ApplicationJSON
	// You do not have permissions to access this resource.
	ExecuteSwitchTrasaction401ApplicationJSONObject *ExecuteSwitchTrasaction401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	ExecuteSwitchTrasaction403ApplicationJSONObject *ExecuteSwitchTrasaction403ApplicationJSON
	// The specified resource was not found
	ExecuteSwitchTrasaction404ApplicationJSONObject *ExecuteSwitchTrasaction404ApplicationJSON
	// Duplicate request
	ExecuteSwitchTrasaction409ApplicationJSONObject *ExecuteSwitchTrasaction409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	ExecuteSwitchTrasaction429ApplicationJSONObject *ExecuteSwitchTrasaction429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	ExecuteSwitchTrasaction500ApplicationJSONObject *ExecuteSwitchTrasaction500ApplicationJSON
}
