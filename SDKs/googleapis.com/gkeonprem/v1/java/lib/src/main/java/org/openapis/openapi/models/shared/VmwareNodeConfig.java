/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VmwareNodeConfig - Parameters that describe the configuration of all nodes within a given node pool.
 */
public class VmwareNodeConfig {
    /**
     * VMware disk size to be used during creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootDiskSizeGb")
    public String bootDiskSizeGb;

    public VmwareNodeConfig withBootDiskSizeGb(String bootDiskSizeGb) {
        this.bootDiskSizeGb = bootDiskSizeGb;
        return this;
    }
    
    /**
     * The number of CPUs for each node in the node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpus")
    public String cpus;

    public VmwareNodeConfig withCpus(String cpus) {
        this.cpus = cpus;
        return this;
    }
    
    /**
     * Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableLoadBalancer")
    public Boolean enableLoadBalancer;

    public VmwareNodeConfig withEnableLoadBalancer(Boolean enableLoadBalancer) {
        this.enableLoadBalancer = enableLoadBalancer;
        return this;
    }
    
    /**
     * The OS image name in vCenter, only valid when using Windows.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public VmwareNodeConfig withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageType")
    public String imageType;

    public VmwareNodeConfig withImageType(String imageType) {
        this.imageType = imageType;
        return this;
    }
    
    /**
     * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public VmwareNodeConfig withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The megabytes of memory for each node in the node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryMb")
    public String memoryMb;

    public VmwareNodeConfig withMemoryMb(String memoryMb) {
        this.memoryMb = memoryMb;
        return this;
    }
    
    /**
     * The number of nodes in the node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicas")
    public String replicas;

    public VmwareNodeConfig withReplicas(String replicas) {
        this.replicas = replicas;
        return this;
    }
    
    /**
     * The initial taints assigned to nodes of this node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taints")
    public NodeTaint[] taints;

    public VmwareNodeConfig withTaints(NodeTaint[] taints) {
        this.taints = taints;
        return this;
    }
    
    /**
     * VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vsphereConfig")
    public VmwareVsphereConfig vsphereConfig;

    public VmwareNodeConfig withVsphereConfig(VmwareVsphereConfig vsphereConfig) {
        this.vsphereConfig = vsphereConfig;
        return this;
    }
    
    public VmwareNodeConfig(){}
}
