/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * BulkPaymentInitiationJson - Generic Body for a bulk payment initation via JSON.
 * 
 * paymentInformationId is contained in code but commented since it is n.a.
 * and not all ASPSP are able to support this field now.
 * In a later version the field will be mandatory.
 * 
 */
public class BulkPaymentInitiationJson {
    /**
     * If this element equals 'true', the PSU prefers only one booking entry.
     * If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.
     * 
     * The ASPSP will follow this preference according to contracts agreed on with the PSU.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchBookingPreferred")
    public Boolean batchBookingPreferred;
    public BulkPaymentInitiationJson withBatchBookingPreferred(Boolean batchBookingPreferred) {
        this.batchBookingPreferred = batchBookingPreferred;
        return this;
    }
    
    /**
     * Reference to an account by either
     *   * IBAN, of a payment accounts, or
     *   * otherAccountIdentification, for payment accounts if there is no IBAN
     * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
     * 
     */
    @JsonProperty("debtorAccount")
    public AccountReference16CH debtorAccount;
    public BulkPaymentInitiationJson withDebtorAccount(AccountReference16CH debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * Reference to an debtorAgent by either
     *   * BIC, of the debtor bank, or
     *   * IID, of the debtor bank
     * adapted from ISO pain.001.001.03.ch.02 FinancialInstitutionIdentification7-CH_BicOrClrId
     * 
     */
    @JsonProperty("debtorAgent")
    public DebtorAgent7CH debtorAgent;
    public BulkPaymentInitiationJson withDebtorAgent(DebtorAgent7CH debtorAgent) {
        this.debtorAgent = debtorAgent;
        return this;
    }
    
    /**
     * A list of generic JSON bodies payment initations for bulk payments via JSON.
     * 
     * Note: Some fields from single payments do not occcur in a bulk payment element
     * 
     */
    @JsonProperty("payments")
    public PaymentInitiationBulkElementJson[] payments;
    public BulkPaymentInitiationJson withPayments(PaymentInitiationBulkElementJson[] payments) {
        this.payments = payments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("requestedExecutionDate")
    public LocalDate requestedExecutionDate;
    public BulkPaymentInitiationJson withRequestedExecutionDate(LocalDate requestedExecutionDate) {
        this.requestedExecutionDate = requestedExecutionDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("requestedExecutionTime")
    public OffsetDateTime requestedExecutionTime;
    public BulkPaymentInitiationJson withRequestedExecutionTime(OffsetDateTime requestedExecutionTime) {
        this.requestedExecutionTime = requestedExecutionTime;
        return this;
    }
    
}
