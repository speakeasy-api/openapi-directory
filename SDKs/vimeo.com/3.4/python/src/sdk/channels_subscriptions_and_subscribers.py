"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelsSubscriptionsAndSubscribers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def check_if_user_subscribed_to_channel(self, request: operations.CheckIfUserSubscribedToChannelRequest) -> operations.CheckIfUserSubscribedToChannelResponse:
        r"""Check if a user follows a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfUserSubscribedToChannelRequest, base_url, '/users/{user_id}/channels/{channel_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfUserSubscribedToChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def check_if_user_subscribed_to_channel_alt1(self, request: operations.CheckIfUserSubscribedToChannelAlt1Request) -> operations.CheckIfUserSubscribedToChannelAlt1Response:
        r"""Check if a user follows a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfUserSubscribedToChannelAlt1Request, base_url, '/me/channels/{channel_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfUserSubscribedToChannelAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_channel_subscribers(self, request: operations.GetChannelSubscribersRequest) -> operations.GetChannelSubscribersResponse:
        r"""Get all the followers of a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelSubscribersRequest, base_url, '/channels/{channel_id}/users', request)
        
        query_params = utils.get_query_params(operations.GetChannelSubscribersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelSubscribersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def subscribe_to_channel(self, request: operations.SubscribeToChannelRequest, security: operations.SubscribeToChannelSecurity) -> operations.SubscribeToChannelResponse:
        r"""Subscribe a user to a specific channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubscribeToChannelRequest, base_url, '/users/{user_id}/channels/{channel_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribeToChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def subscribe_to_channel_alt1(self, request: operations.SubscribeToChannelAlt1Request, security: operations.SubscribeToChannelAlt1Security) -> operations.SubscribeToChannelAlt1Response:
        r"""Subscribe a user to a specific channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubscribeToChannelAlt1Request, base_url, '/me/channels/{channel_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribeToChannelAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def unsubscribe_from_channel(self, request: operations.UnsubscribeFromChannelRequest, security: operations.UnsubscribeFromChannelSecurity) -> operations.UnsubscribeFromChannelResponse:
        r"""Unsubscribe a user from a specific channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnsubscribeFromChannelRequest, base_url, '/users/{user_id}/channels/{channel_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnsubscribeFromChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def unsubscribe_from_channel_alt1(self, request: operations.UnsubscribeFromChannelAlt1Request, security: operations.UnsubscribeFromChannelAlt1Security) -> operations.UnsubscribeFromChannelAlt1Response:
        r"""Unsubscribe a user from a specific channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnsubscribeFromChannelAlt1Request, base_url, '/me/channels/{channel_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnsubscribeFromChannelAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    