// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"openapi/pkg/types"
)

// ConsentInformationResponse200JSON - Body of the JSON response for a successfull get consent request.
type ConsentInformationResponse200JSON struct {
	// A list of hyperlinks to be recognised by the TPP.
	//
	// Links of type "account" and/or "cardAccount", depending on the nature of the consent.
	//
	Links map[string]HrefType `json:"_links,omitempty"`
	// Requested access services for a consent.
	//
	Access AccountAccess `json:"access"`
	// This is the overall lifecycle status of the consent.
	//
	// Valid values are:
	//   - 'received': The consent data have been received and are technically correct.
	//     The data is not authorised yet.
	//   - 'rejected': The consent data have been rejected e.g. since no successful authorisation has taken place.
	//   - 'valid': The consent is accepted and valid for GET account data calls and others as specified in the consent object.
	//   - 'revokedByPsu': The consent has been revoked by the PSU towards the ASPSP.
	//   - 'expired': The consent expired.
	//   - 'terminatedByTpp': The corresponding TPP has terminated the consent by applying the DELETE method to the consent resource.
	//   - 'partiallyAuthorised': The consent is due to a multi-level authorisation, some but not all mandated authorisations have been performed yet.
	//
	// The ASPSP might add further codes. These codes then shall be contained in the ASPSP's documentation of the XS2A interface
	// and has to be added to this API definition as well.
	//
	ConsentStatus ConsentStatusEnum `json:"consentStatus"`
	// This field indicates the requested maximum frequency for an access without PSU involvement per day.
	// For a one-off access, this attribute is set to "1".
	//
	// The frequency needs to be greater equal to one.
	//
	// If not otherwise agreed bilaterally between TPP and ASPSP, the frequency is less equal to 4.
	//
	FrequencyPerDay int64 `json:"frequencyPerDay"`
	// This date is containing the date of the last action on the consent object either through
	// the XS2A interface or the PSU/ASPSP interface having an impact on the status.
	//
	LastActionDate types.Date `json:"lastActionDate"`
	// "true", if the consent is for recurring access to the account data.
	//
	// "false", if the consent is for one access to the account data.
	//
	RecurringIndicator bool `json:"recurringIndicator"`
	// This parameter is defining a valid until date (including the mentioned date) for the requested consent.
	// The content is the local ASPSP date in ISO-Date format, e.g. 2017-10-30.
	//
	// Future dates might get adjusted by ASPSP.
	//
	// If a maximal available date is requested, a date in far future is to be used: "9999-12-31".
	//
	// In both cases the consent object to be retrieved by the get consent request will contain the adjusted date.
	//
	ValidUntil types.Date `json:"validUntil"`
}
