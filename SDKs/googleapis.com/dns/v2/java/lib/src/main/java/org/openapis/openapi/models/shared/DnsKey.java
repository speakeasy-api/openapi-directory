/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DnsKey - A DNSSEC key pair.
 */
public class DnsKey {
    /**
     * String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("algorithm")
    public DnsKeyAlgorithmEnum algorithm;

    public DnsKey withAlgorithm(DnsKeyAlgorithmEnum algorithm) {
        this.algorithm = algorithm;
        return this;
    }
    
    /**
     * The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public String creationTime;

    public DnsKey withCreationTime(String creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public DnsKey withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("digests")
    public DnsKeyDigest[] digests;

    public DnsKey withDigests(DnsKeyDigest[] digests) {
        this.digests = digests;
        return this;
    }
    
    /**
     * Unique identifier for the resource; defined by the server (output only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public DnsKey withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isActive")
    public Boolean isActive;

    public DnsKey withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    /**
     * Length of the key in bits. Specified at creation time, and then immutable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyLength")
    public Long keyLength;

    public DnsKey withKeyLength(Long keyLength) {
        this.keyLength = keyLength;
        return this;
    }
    
    /**
     * The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyTag")
    public Integer keyTag;

    public DnsKey withKeyTag(Integer keyTag) {
        this.keyTag = keyTag;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public DnsKey withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Base64 encoded public half of this key. Output only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicKey")
    public String publicKey;

    public DnsKey withPublicKey(String publicKey) {
        this.publicKey = publicKey;
        return this;
    }
    
    /**
     * One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public DnsKeyTypeEnum type;

    public DnsKey withType(DnsKeyTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public DnsKey(){}
}
