// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServiceDatabaseTypeEnum - Immutable. The database type that the Metastore service stores its data.
type ServiceDatabaseTypeEnum string

const (
	ServiceDatabaseTypeEnumDatabaseTypeUnspecified ServiceDatabaseTypeEnum = "DATABASE_TYPE_UNSPECIFIED"
	ServiceDatabaseTypeEnumMysql                   ServiceDatabaseTypeEnum = "MYSQL"
	ServiceDatabaseTypeEnumSpanner                 ServiceDatabaseTypeEnum = "SPANNER"
)

func (e *ServiceDatabaseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATABASE_TYPE_UNSPECIFIED":
		fallthrough
	case "MYSQL":
		fallthrough
	case "SPANNER":
		*e = ServiceDatabaseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceDatabaseTypeEnum: %s", s)
	}
}

// ServiceReleaseChannelEnum - Immutable. The release channel of the service. If unspecified, defaults to STABLE.
type ServiceReleaseChannelEnum string

const (
	ServiceReleaseChannelEnumReleaseChannelUnspecified ServiceReleaseChannelEnum = "RELEASE_CHANNEL_UNSPECIFIED"
	ServiceReleaseChannelEnumCanary                    ServiceReleaseChannelEnum = "CANARY"
	ServiceReleaseChannelEnumStable                    ServiceReleaseChannelEnum = "STABLE"
)

func (e *ServiceReleaseChannelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RELEASE_CHANNEL_UNSPECIFIED":
		fallthrough
	case "CANARY":
		fallthrough
	case "STABLE":
		*e = ServiceReleaseChannelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceReleaseChannelEnum: %s", s)
	}
}

// ServiceStateEnum - Output only. The current state of the metastore service.
type ServiceStateEnum string

const (
	ServiceStateEnumStateUnspecified ServiceStateEnum = "STATE_UNSPECIFIED"
	ServiceStateEnumCreating         ServiceStateEnum = "CREATING"
	ServiceStateEnumActive           ServiceStateEnum = "ACTIVE"
	ServiceStateEnumSuspending       ServiceStateEnum = "SUSPENDING"
	ServiceStateEnumSuspended        ServiceStateEnum = "SUSPENDED"
	ServiceStateEnumUpdating         ServiceStateEnum = "UPDATING"
	ServiceStateEnumDeleting         ServiceStateEnum = "DELETING"
	ServiceStateEnumError            ServiceStateEnum = "ERROR"
)

func (e *ServiceStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "SUSPENDING":
		fallthrough
	case "SUSPENDED":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "ERROR":
		*e = ServiceStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceStateEnum: %s", s)
	}
}

// ServiceTierEnum - The tier of the service.
type ServiceTierEnum string

const (
	ServiceTierEnumTierUnspecified ServiceTierEnum = "TIER_UNSPECIFIED"
	ServiceTierEnumDeveloper       ServiceTierEnum = "DEVELOPER"
	ServiceTierEnumEnterprise      ServiceTierEnum = "ENTERPRISE"
)

func (e *ServiceTierEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TIER_UNSPECIFIED":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "ENTERPRISE":
		*e = ServiceTierEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceTierEnum: %s", s)
	}
}

// Service - A managed metastore service that serves metadata queries.
type Service struct {
	// Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsURI *string `json:"artifactGcsUri,omitempty"`
	// Output only. The time when the metastore service was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Immutable. The database type that the Metastore service stores its data.
	DatabaseType *ServiceDatabaseTypeEnum `json:"databaseType,omitempty"`
	// Encryption settings for the service.
	EncryptionConfig *EncryptionConfig `json:"encryptionConfig,omitempty"`
	// Output only. The URI of the endpoint used to access the metastore service.
	EndpointURI *string `json:"endpointUri,omitempty"`
	// Specifies configuration information specific to running Hive metastore software as the metastore service.
	HiveMetastoreConfig *HiveMetastoreConfig `json:"hiveMetastoreConfig,omitempty"`
	// User-defined labels for the metastore service.
	Labels map[string]string `json:"labels,omitempty"`
	// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`
	// The metadata management activities of the metastore service.
	MetadataManagementActivity *MetadataManagementActivity `json:"metadataManagementActivity,omitempty"`
	// Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
	Name *string `json:"name,omitempty"`
	// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
	Network *string `json:"network,omitempty"`
	// Network configuration for the Dataproc Metastore service.
	NetworkConfig *NetworkConfig `json:"networkConfig,omitempty"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port *int `json:"port,omitempty"`
	// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
	ReleaseChannel *ServiceReleaseChannelEnum `json:"releaseChannel,omitempty"`
	// Represents the scaling configuration of a metastore service.
	ScalingConfig *ScalingConfig `json:"scalingConfig,omitempty"`
	// Output only. The current state of the metastore service.
	State *ServiceStateEnum `json:"state,omitempty"`
	// Output only. Additional information about the current state of the metastore service, if available.
	StateMessage *string `json:"stateMessage,omitempty"`
	// Telemetry Configuration for the Dataproc Metastore service.
	TelemetryConfig *TelemetryConfig `json:"telemetryConfig,omitempty"`
	// The tier of the service.
	Tier *ServiceTierEnum `json:"tier,omitempty"`
	// Output only. The globally unique resource identifier of the metastore service.
	UID *string `json:"uid,omitempty"`
	// Output only. The time when the metastore service was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// ServiceInput - A managed metastore service that serves metadata queries.
type ServiceInput struct {
	// Immutable. The database type that the Metastore service stores its data.
	DatabaseType *ServiceDatabaseTypeEnum `json:"databaseType,omitempty"`
	// Encryption settings for the service.
	EncryptionConfig *EncryptionConfig `json:"encryptionConfig,omitempty"`
	// Specifies configuration information specific to running Hive metastore software as the metastore service.
	HiveMetastoreConfig *HiveMetastoreConfigInput `json:"hiveMetastoreConfig,omitempty"`
	// User-defined labels for the metastore service.
	Labels map[string]string `json:"labels,omitempty"`
	// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`
	// Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
	Name *string `json:"name,omitempty"`
	// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
	Network *string `json:"network,omitempty"`
	// Network configuration for the Dataproc Metastore service.
	NetworkConfig *NetworkConfigInput `json:"networkConfig,omitempty"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port *int `json:"port,omitempty"`
	// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
	ReleaseChannel *ServiceReleaseChannelEnum `json:"releaseChannel,omitempty"`
	// Represents the scaling configuration of a metastore service.
	ScalingConfig *ScalingConfig `json:"scalingConfig,omitempty"`
	// Telemetry Configuration for the Dataproc Metastore service.
	TelemetryConfig *TelemetryConfig `json:"telemetryConfig,omitempty"`
	// The tier of the service.
	Tier *ServiceTierEnum `json:"tier,omitempty"`
}
