/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AdditionalAuthenticationProvider } from "./additionalauthenticationprovider";
import { AuthenticationTypeEnum } from "./authenticationtypeenum";
import { LambdaAuthorizerConfig } from "./lambdaauthorizerconfig";
import { LogConfig } from "./logconfig";
import { OpenIDConnectConfig } from "./openidconnectconfig";
import { UserPoolConfig } from "./userpoolconfig";
import { Expose, Type } from "class-transformer";

/**
 * Describes a GraphQL API.
 */
export class GraphqlApi extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AdditionalAuthenticationProvider })
  @Expose({ name: "additionalAuthenticationProviders" })
  @Type(() => AdditionalAuthenticationProvider)
  additionalAuthenticationProviders?: AdditionalAuthenticationProvider[];

  @SpeakeasyMetadata()
  @Expose({ name: "apiId" })
  apiId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "authenticationType" })
  authenticationType?: AuthenticationTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "lambdaAuthorizerConfig" })
  @Type(() => LambdaAuthorizerConfig)
  lambdaAuthorizerConfig?: LambdaAuthorizerConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "logConfig" })
  @Type(() => LogConfig)
  logConfig?: LogConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "openIDConnectConfig" })
  @Type(() => OpenIDConnectConfig)
  openIDConnectConfig?: OpenIDConnectConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "uris" })
  uris?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "userPoolConfig" })
  @Type(() => UserPoolConfig)
  userPoolConfig?: UserPoolConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "wafWebAclArn" })
  wafWebAclArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "xrayEnabled" })
  xrayEnabled?: boolean;
}
