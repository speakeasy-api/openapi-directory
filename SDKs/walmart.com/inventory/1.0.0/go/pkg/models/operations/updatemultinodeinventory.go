// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateMultiNodeInventoryPathParams struct {
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
	Sku string `pathParam:"style=simple,explode=false,name=sku"`
}

type UpdateMultiNodeInventoryHeaders struct {
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

// UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum - The unit of measurement. Example: 'EACH'
type UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum string

const (
	UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnumEach UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum = "EACH"
)

func (e *UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum: %s", s)
	}
}

// UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQty - Quantity that has been ordered by the customers but not yet shipped
type UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQty struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum `json:"unit"`
}

type UpdateMultiNodeInventoryRequestBodyInventoriesNodes struct {
	// Quantity that has been ordered by the customers but not yet shipped
	InputQty UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQty `json:"inputQty"`
	// ShipNode Id of the ship node for which the inventory is requested
	ShipNode string `json:"shipNode"`
}

type UpdateMultiNodeInventoryRequestBodyInventories struct {
	Nodes []UpdateMultiNodeInventoryRequestBodyInventoriesNodes `json:"nodes"`
}

// UpdateMultiNodeInventoryRequestBody - Request fields
type UpdateMultiNodeInventoryRequestBody struct {
	Inventories UpdateMultiNodeInventoryRequestBodyInventories `json:"inventories"`
}

type UpdateMultiNodeInventoryRequest struct {
	PathParams UpdateMultiNodeInventoryPathParams
	Headers    UpdateMultiNodeInventoryHeaders
	// Request fields
	Request UpdateMultiNodeInventoryRequestBody `request:"mediaType=application/json"`
}

type UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum string

const (
	UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnumApplication UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum = "APPLICATION"
	UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnumSystem      UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum = "SYSTEM"
	UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnumRequest     UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum = "REQUEST"
	UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnumData        UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum = "DATA"
)

func (e *UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "APPLICATION":
		fallthrough
	case "SYSTEM":
		fallthrough
	case "REQUEST":
		fallthrough
	case "DATA":
		*e = UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum: %s", s)
	}
}

type UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCauses struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Field       *string `json:"field,omitempty"`
	Type        *string `json:"type,omitempty"`
}

type UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum string

const (
	UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnumInfo  UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum = "INFO"
	UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnumWarn  UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum = "WARN"
	UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnumError UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum = "ERROR"
)

func (e *UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INFO":
		fallthrough
	case "WARN":
		fallthrough
	case "ERROR":
		*e = UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum: %s", s)
	}
}

type UpdateMultiNodeInventory200ApplicationJSONNodesErrors struct {
	Category         *UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum `json:"category,omitempty"`
	Causes           []UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCauses      `json:"causes,omitempty"`
	Code             string                                                             `json:"code"`
	Description      *string                                                            `json:"description,omitempty"`
	ErrorIdentifiers map[string]map[string]interface{}                                  `json:"errorIdentifiers,omitempty"`
	Field            *string                                                            `json:"field,omitempty"`
	Info             *string                                                            `json:"info,omitempty"`
	Severity         *UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum `json:"severity,omitempty"`
}

type UpdateMultiNodeInventory200ApplicationJSONNodes struct {
	// Node Update Error description.
	Errors []UpdateMultiNodeInventory200ApplicationJSONNodesErrors `json:"errors,omitempty"`
	// ShipNode Id of the ship node for which the inventory is requested
	ShipNode *string `json:"shipNode,omitempty"`
	// Node Update status. Example: 'Success'
	Status *string `json:"status,omitempty"`
}

// UpdateMultiNodeInventory200ApplicationJSON - Successful Operation
type UpdateMultiNodeInventory200ApplicationJSON struct {
	Nodes []UpdateMultiNodeInventory200ApplicationJSONNodes `json:"nodes,omitempty"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
	Sku *string `json:"sku,omitempty"`
}

type UpdateMultiNodeInventoryResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UpdateMultiNodeInventory200ApplicationJSONObject *UpdateMultiNodeInventory200ApplicationJSON
}
