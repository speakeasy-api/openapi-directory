// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TripcSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type TripcRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Policy Number
	Policyno string `json:"policyno"`
}

// TripcRequestBodyFormatEnum - The format of the certificate in response.
type TripcRequestBodyFormatEnum string

const (
	TripcRequestBodyFormatEnumPdf TripcRequestBodyFormatEnum = "pdf"
)

func (e *TripcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = TripcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TripcRequestBodyFormatEnum: %s", s)
	}
}

// TripcRequestBody - Request format
type TripcRequestBody struct {
	CertificateParameters *TripcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TripcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Tripc504ApplicationJSONErrorEnum string

const (
	Tripc504ApplicationJSONErrorEnumGatewayTimeout Tripc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Tripc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Tripc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Tripc504ApplicationJSONErrorDescriptionEnum string

const (
	Tripc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Tripc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Tripc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Tripc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tripc504ApplicationJSON - Gateway timeout
type Tripc504ApplicationJSON struct {
	Error            *Tripc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tripc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tripc503ApplicationJSONErrorEnum string

const (
	Tripc503ApplicationJSONErrorEnumServiceUnavailable Tripc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Tripc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Tripc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Tripc503ApplicationJSONErrorDescriptionEnum string

const (
	Tripc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Tripc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Tripc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Tripc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tripc503ApplicationJSON - Service unavailable
type Tripc503ApplicationJSON struct {
	Error            *Tripc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tripc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tripc502ApplicationJSONErrorEnum string

const (
	Tripc502ApplicationJSONErrorEnumBadGatewy Tripc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Tripc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Tripc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Tripc502ApplicationJSONErrorDescriptionEnum string

const (
	Tripc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Tripc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Tripc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Tripc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tripc502ApplicationJSON - Bad gateway
type Tripc502ApplicationJSON struct {
	Error            *Tripc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tripc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tripc500ApplicationJSONErrorEnum string

const (
	Tripc500ApplicationJSONErrorEnumInternalServerError Tripc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Tripc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Tripc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Tripc500ApplicationJSONErrorDescriptionEnum string

const (
	Tripc500ApplicationJSONErrorDescriptionEnumInternalServerError Tripc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Tripc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Tripc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tripc500ApplicationJSON - Internal server error
type Tripc500ApplicationJSON struct {
	Error            *Tripc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tripc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tripc404ApplicationJSONErrorEnum string

const (
	Tripc404ApplicationJSONErrorEnumRecordNotFound Tripc404ApplicationJSONErrorEnum = "record_not_found"
	Tripc404ApplicationJSONErrorEnumURLNotFound    Tripc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Tripc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Tripc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Tripc404ApplicationJSONErrorDescriptionEnum string

const (
	Tripc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Tripc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Tripc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Tripc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Tripc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Tripc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tripc404ApplicationJSON - No record found
type Tripc404ApplicationJSON struct {
	Error            *Tripc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tripc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tripc401ApplicationJSONErrorEnum string

const (
	Tripc401ApplicationJSONErrorEnumInvalidAuthentication Tripc401ApplicationJSONErrorEnum = "invalid_authentication"
	Tripc401ApplicationJSONErrorEnumInvalidAuthorization  Tripc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Tripc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Tripc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Tripc401ApplicationJSONErrorDescriptionEnum string

const (
	Tripc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Tripc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Tripc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Tripc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Tripc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Tripc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tripc401ApplicationJSON - Unauthorized access
type Tripc401ApplicationJSON struct {
	Error            *Tripc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tripc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tripc400ApplicationJSONErrorEnum string

const (
	Tripc400ApplicationJSONErrorEnumMissingParameter Tripc400ApplicationJSONErrorEnum = "missing_parameter"
	Tripc400ApplicationJSONErrorEnumInvalidParameter Tripc400ApplicationJSONErrorEnum = "invalid_parameter"
	Tripc400ApplicationJSONErrorEnumInvalidFormat    Tripc400ApplicationJSONErrorEnum = "invalid_format"
	Tripc400ApplicationJSONErrorEnumInvalidTxnid     Tripc400ApplicationJSONErrorEnum = "invalid_txnid"
	Tripc400ApplicationJSONErrorEnumInvalidConsentid Tripc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Tripc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Tripc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Tripc400ApplicationJSONErrorDescriptionEnum string

const (
	Tripc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Tripc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Tripc400ApplicationJSONErrorDescriptionEnumBadRequest                              Tripc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Tripc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Tripc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Tripc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Tripc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Tripc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Tripc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Tripc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Tripc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tripc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tripc400ApplicationJSON - Bad request
type Tripc400ApplicationJSON struct {
	Error            *Tripc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tripc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TripcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Tripc400ApplicationJSONObject *Tripc400ApplicationJSON
	// Unauthorized access
	Tripc401ApplicationJSONObject *Tripc401ApplicationJSON
	// No record found
	Tripc404ApplicationJSONObject *Tripc404ApplicationJSON
	// Internal server error
	Tripc500ApplicationJSONObject *Tripc500ApplicationJSON
	// Bad gateway
	Tripc502ApplicationJSONObject *Tripc502ApplicationJSON
	// Service unavailable
	Tripc503ApplicationJSONObject *Tripc503ApplicationJSON
	// Gateway timeout
	Tripc504ApplicationJSONObject *Tripc504ApplicationJSON
}
