"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETAmendmentType:
    
    auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRenew'), 'exclude': lambda f: f is None }})
    r"""Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed."""  
    base_rate_plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseRatePlanId'), 'exclude': lambda f: f is None }})
    r"""The rate plan ID on which changes are made. Only the Update or Remove amendment returns a base rate plan ID."""  
    base_subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseSubscriptionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription based on which the amendment is created."""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The amendment code."""  
    contract_effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contractEffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`."""  
    current_term: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentTerm'), 'exclude': lambda f: f is None }})
    r"""The length of the period for the current subscription term."""  
    current_term_period_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentTermPeriodType'), 'exclude': lambda f: f is None }})
    r"""The period type for the current subscription term.
    Possible values are:
    
    - Month
    - Year
    - Day
    - Week
    """  
    customer_acceptance_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerAcceptanceDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the amendment."""  
    destination_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationAccountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the account that the subscription is being transferred to."""  
    destination_invoice_owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationInvoiceOwnerId'), 'exclude': lambda f: f is None }})
    r"""The ID of the invoice that the subscription is being transferred to."""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the amendment changes take effective."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The amendment ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the amendment."""  
    new_rate_plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newRatePlanId'), 'exclude': lambda f: f is None }})
    r"""The ID of the rate plan charge on which amendment is made. Only the Add or Update amendment returns a new rate plan ID."""  
    new_subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newSubscriptionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription that the amendment changes."""  
    renewal_setting: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalSetting'), 'exclude': lambda f: f is None }})
    r"""Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
    Possible values are:
    
    - RENEW_WITH_SPECIFIC_TERM
    - RENEW_TO_EVERGREEN
    """  
    renewal_term: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalTerm'), 'exclude': lambda f: f is None }})
    r"""The term of renewal for the amended subscription."""  
    renewal_term_period_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalTermPeriodType'), 'exclude': lambda f: f is None }})
    r"""The period type for the subscription renewal term.
    Possible values are:
    
    - Month
    - Year
    - Day
    - Week
    """  
    resume_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resumeDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the subscription resumption takes effect, as `yyyy-mm-dd`.
    
    **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    """  
    service_activation_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceActivationDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when service is activated, as `yyyy-mm-dd`."""  
    specific_update_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specificUpdateDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the Update Product amendment takes effect.
    Only for the Update Product amendments if there is already a future-dated Update Product amendment on
    the subscription.
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the amendment.
    Possible values are:
    
    - Draft 
    - Pending Activation
    - Pending Acceptance
    - Completed
    """  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""Returns `true` if the request was processed successfully."""  
    suspend_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspendDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the subscription suspension takes effect, as `yyyy-mm-dd`.
    
    **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    """  
    term_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the new terms and conditions take effect."""  
    term_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termType'), 'exclude': lambda f: f is None }})
    r"""Indicates if the subscription is `TERMED` or `EVERGREEN`."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the amendment.
    Possible values are:
    
    - Cancellation
    - NewProduct
    - OwnerTransfer
    - RemoveProduct
    - Renewal
    - UpdateProduct
    - TermsAndConditions
    """  
    