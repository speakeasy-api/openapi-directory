/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CatalogsImportationCatalogInfo {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Configure catalog column
   */
  importationConfigureCatalogColumn(
    req: operations.ImportationConfigureCatalogColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationConfigureCatalogColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationConfigureCatalogColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "configureCatalogColumnCatalogRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationConfigureCatalogColumnResponse =
        new operations.ImportationConfigureCatalogColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Custom Column
   */
  importationDeleteCustomColumn(
    req: operations.ImportationDeleteCustomColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationDeleteCustomColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationDeleteCustomColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationDeleteCustomColumnResponse =
        new operations.ImportationDeleteCustomColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the encrypted custom column expression in this importation
   */
  importationGetCustomColumnExpression(
    req: operations.ImportationGetCustomColumnExpressionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationGetCustomColumnExpressionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationGetCustomColumnExpressionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationGetCustomColumnExpressionResponse =
        new operations.ImportationGetCustomColumnExpressionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.importationGetCustomColumnExpression200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get custom columns currently place in this importation
   */
  importationGetCustomColumns(
    req: operations.ImportationGetCustomColumnsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationGetCustomColumnsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationGetCustomColumnsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationGetCustomColumnsResponse =
        new operations.ImportationGetCustomColumnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.importationCustomColumnList = utils.objectToClass(
              httpRes?.data,
              shared.ImportationCustomColumnList
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get detected catalog columns during this importation.
   */
  importationGetDetectedCatalogColumns(
    req: operations.ImportationGetDetectedCatalogColumnsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationGetDetectedCatalogColumnsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationGetDetectedCatalogColumnsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationGetDetectedCatalogColumnsResponse =
        new operations.ImportationGetDetectedCatalogColumnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.detectedCatalogColumnList = utils.objectToClass(
              httpRes?.data,
              shared.DetectedCatalogColumnList
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the product sample related to this importation with all columns (catalog and custom)
   */
  importationGetProductSample(
    req: operations.ImportationGetProductSampleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationGetProductSampleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationGetProductSampleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationGetProductSampleResponse =
        new operations.ImportationGetProductSampleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productSample = utils.objectToClass(
              httpRes?.data,
              shared.ProductSample
            );
          }
          break;
        case httpRes?.status == 404:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get product sample custom column value related to this importation.
   *
   * @remarks
   * /!\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
   */
  importationGetProductSampleCustomColumnValue(
    req: operations.ImportationGetProductSampleCustomColumnValueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationGetProductSampleCustomColumnValueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationGetProductSampleCustomColumnValueRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationGetProductSampleCustomColumnValueResponse =
        new operations.ImportationGetProductSampleCustomColumnValueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.importationGetProductSampleCustomColumnValue200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Ignore Column
   */
  importationIgnoreColumn(
    req: operations.ImportationIgnoreColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationIgnoreColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationIgnoreColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationIgnoreColumnResponse =
        new operations.ImportationIgnoreColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Map catalog column to a BeezUP column
   */
  importationMapCatalogColumn(
    req: operations.ImportationMapCatalogColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationMapCatalogColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationMapCatalogColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "mapBeezUPColumnRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationMapCatalogColumnResponse =
        new operations.ImportationMapCatalogColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Map custom column to a BeezUP column
   */
  importationMapCustomColumn(
    req: operations.ImportationMapCustomColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationMapCustomColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationMapCustomColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "mapBeezUPColumnRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationMapCustomColumnResponse =
        new operations.ImportationMapCustomColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reattend Column
   */
  importationReattendColumn(
    req: operations.ImportationReattendColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationReattendColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationReattendColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationReattendColumnResponse =
        new operations.ImportationReattendColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create or replace a custom column
   */
  importationSaveCustomColumn(
    req: operations.ImportationSaveCustomColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationSaveCustomColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationSaveCustomColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "changeCustomColumnRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationSaveCustomColumnResponse =
        new operations.ImportationSaveCustomColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unmap catalog column
   */
  importationUnmapCatalogColumn(
    req: operations.ImportationUnmapCatalogColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationUnmapCatalogColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationUnmapCatalogColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationUnmapCatalogColumnResponse =
        new operations.ImportationUnmapCatalogColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unmap custom column
   */
  importationUnmapCustomColumn(
    req: operations.ImportationUnmapCustomColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportationUnmapCustomColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImportationUnmapCustomColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportationUnmapCustomColumnResponse =
        new operations.ImportationUnmapCustomColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }
}
