/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Access random quote service. Use this to get random quotes , quotes filtered by authors or tags etc. You need an API key to access this service.
 */
export class Quote {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Remove the disLike for the given Quote as a user of the API Key.
   */
  deleteQuoteDislike(
    req: operations.DeleteQuoteDislikeRequest,
    security: operations.DeleteQuoteDislikeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteQuoteDislikeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteQuoteDislikeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/dislike";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteQuoteDislikeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteQuoteDislikeResponse =
        new operations.DeleteQuoteDislikeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove the Like for the given Quote as a user of the API Key.
   */
  deleteQuoteLike(
    req: operations.DeleteQuoteLikeRequest,
    security: operations.DeleteQuoteLikeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteQuoteLikeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteQuoteLikeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/like";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteQuoteLikeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteQuoteLikeResponse =
        new operations.DeleteQuoteLikeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a `Quote` with a given `id`.
   */
  getQuote(
    req: operations.GetQuoteRequest,
    security: operations.GetQuoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteResponse = new operations.GetQuoteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quoteResponse = utils.objectToClass(
              httpRes?.data,
              shared.QuoteResponse
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of popular author names in the system.
   *
   */
  getQuoteAuthorsPopular(
    req: operations.GetQuoteAuthorsPopularRequest,
    security: operations.GetQuoteAuthorsPopularSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteAuthorsPopularResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteAuthorsPopularRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/authors/popular";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteAuthorsPopularSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteAuthorsPopularResponse =
        new operations.GetQuoteAuthorsPopularResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of author names in the system.
   *
   */
  getQuoteAuthorsSearch(
    req: operations.GetQuoteAuthorsSearchRequest,
    security: operations.GetQuoteAuthorsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteAuthorsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteAuthorsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/authors/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteAuthorsSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteAuthorsSearchResponse =
        new operations.GetQuoteAuthorsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of popular `Quote` Categories.
   *
   */
  getQuoteCategoriesPopular(
    req: operations.GetQuoteCategoriesPopularRequest,
    security: operations.GetQuoteCategoriesPopularSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteCategoriesPopularResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteCategoriesPopularRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/quote/categories/popular";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteCategoriesPopularSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteCategoriesPopularResponse =
        new operations.GetQuoteCategoriesPopularResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Quote` Categories matching the query string.
   *
   */
  getQuoteCategoriesSearch(
    req: operations.GetQuoteCategoriesSearchRequest,
    security: operations.GetQuoteCategoriesSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteCategoriesSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteCategoriesSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/categories/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteCategoriesSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteCategoriesSearchResponse =
        new operations.GetQuoteCategoriesSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a `Random Quote`. When you are in a hurry this is what you call to get a random famous quote.
   */
  getQuoteRandom(
    req: operations.GetQuoteRandomRequest,
    security: operations.GetQuoteRandomSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteRandomResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteRandomRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/random";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteRandomSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteRandomResponse =
        new operations.GetQuoteRandomResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quoteResponse = utils.objectToClass(
              httpRes?.data,
              shared.QuoteResponse
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Search for a `Quote` in They Said So platform. Optional `category` , `author`, `minlength`, `maxlength` params determines the filters applied while searching for the quote.
   */
  getQuoteSearch(
    req: operations.GetQuoteSearchRequest,
    security: operations.GetQuoteSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteSearchResponse =
        new operations.GetQuoteSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quoteResponse = utils.objectToClass(
              httpRes?.data,
              shared.QuoteResponse
            );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Dislike the given Quote as a user of the API Key. Same as `put` but a convenient alias for those clients that don't support `put` cleanly.
   */
  postQuoteDislike(
    req: operations.PostQuoteDislikeRequest,
    security: operations.PostQuoteDislikeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteDislikeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteDislikeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/dislike";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteDislikeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteDislikeResponse =
        new operations.PostQuoteDislikeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Like the given Quote as a user of the API Key. Same as `PUT` but a convenient alias for those clients that don't support `PUT` cleanly.
   */
  postQuoteLike(
    req: operations.PostQuoteLikeRequest,
    security: operations.PostQuoteLikeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteLikeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteLikeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/like";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteLikeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteLikeResponse =
        new operations.PostQuoteLikeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Dislike the given Quote as a user of the API Key. Some clients don't cleanly support `PUT`, in such scenarios use the `POST` version of this.
   */
  putQuoteDislike(
    req: operations.PutQuoteDislikeRequest,
    security: operations.PutQuoteDislikeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutQuoteDislikeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutQuoteDislikeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/dislike";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutQuoteDislikeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutQuoteDislikeResponse =
        new operations.PutQuoteDislikeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Like the given Quote as a user of the API Key. Some clients don't cleanly support `PUT`, in such scenarios use the `POST` version of this.
   */
  putQuoteLike(
    req: operations.PutQuoteLikeRequest,
    security: operations.PutQuoteLikeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutQuoteLikeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutQuoteLikeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/like";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutQuoteLikeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutQuoteLikeResponse =
        new operations.PutQuoteLikeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
