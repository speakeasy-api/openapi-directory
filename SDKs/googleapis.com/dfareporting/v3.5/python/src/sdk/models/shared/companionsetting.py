"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import size as shared_size
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanionSetting:
    r"""Companion Settings"""
    
    companions_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companionsDisabled'), 'exclude': lambda f: f is None }})
    r"""Whether companions are disabled for this placement."""  
    enabled_sizes: Optional[list[shared_size.Size]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledSizes'), 'exclude': lambda f: f is None }})
    r"""Allowlist of companion sizes to be served to this placement. Set this list to null or empty to serve all companion sizes."""  
    image_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageOnly'), 'exclude': lambda f: f is None }})
    r"""Whether to serve only static images as companions."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#companionSetting\\"."""  
    