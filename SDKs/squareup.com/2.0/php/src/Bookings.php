<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Bookings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CancelBooking
     * 
     * Cancels an existing booking.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelBookingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelBookingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelBookingResponse
     */
	public function cancelBooking(
        \OpenAPI\OpenAPI\Models\Operations\CancelBookingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CancelBookingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelBookingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings/{booking_id}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelBookingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cancelBookingRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelBookingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelBookingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelBookingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateBooking
     * 
     * Creates a booking.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateBookingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBookingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBookingResponse
     */
	public function createBooking(
        \OpenAPI\OpenAPI\Models\Shared\CreateBookingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBookingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBookingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBookingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createBookingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateBookingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListTeamMemberBookingProfiles
     * 
     * Lists booking profiles for team members.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesResponse
     */
	public function listTeamMemberBookingProfiles(
        \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings/team-member-booking-profiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTeamMemberBookingProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTeamMemberBookingProfilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTeamMemberBookingProfilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveBooking
     * 
     * Retrieves a booking.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingResponse
     */
	public function retrieveBooking(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings/{booking_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveBookingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveBookingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveBookingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveBusinessBookingProfile
     * 
     * Retrieves a seller's booking profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveBusinessBookingProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveBusinessBookingProfileResponse
     */
	public function retrieveBusinessBookingProfile(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveBusinessBookingProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveBusinessBookingProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings/business-booking-profile');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveBusinessBookingProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveBusinessBookingProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveBusinessBookingProfileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveTeamMemberBookingProfile
     * 
     * Retrieves a team member's booking profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileResponse
     */
	public function retrieveTeamMemberBookingProfile(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings/team-member-booking-profiles/{team_member_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberBookingProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveTeamMemberBookingProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveTeamMemberBookingProfileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchAvailability
     * 
     * Searches for availabilities for booking.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchAvailabilityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchAvailabilitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchAvailabilityResponse
     */
	public function searchAvailability(
        \OpenAPI\OpenAPI\Models\Shared\SearchAvailabilityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchAvailabilitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchAvailabilityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings/availability/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchAvailabilityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchAvailabilityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchAvailabilityResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateBooking
     * 
     * Updates a booking.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBookingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBookingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBookingResponse
     */
	public function updateBooking(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBookingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBookingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBookingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bookings/{booking_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateBookingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateBookingRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBookingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateBookingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateBookingResponse', 'json');
            }
        }

        return $response;
    }
}