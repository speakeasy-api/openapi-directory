/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;

public class GetFloatingIps200ApplicationJSONFloatingIps {
    /**
     * Whether the IP is blocked
     */
    @JsonProperty("blocked")
    public Boolean blocked;
    public GetFloatingIps200ApplicationJSONFloatingIps withBlocked(Boolean blocked) {
        this.blocked = blocked;
        return this;
    }
    
    /**
     * Point in time when the Resource was created (in ISO-8601 format)
     */
    @JsonProperty("created")
    public String created;
    public GetFloatingIps200ApplicationJSONFloatingIps withCreated(String created) {
        this.created = created;
        return this;
    }
    
    /**
     * Description of the Resource
     */
    @JsonProperty("description")
    public String description;
    public GetFloatingIps200ApplicationJSONFloatingIps withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Array of reverse DNS entries
     */
    @JsonProperty("dns_ptr")
    public GetFloatingIps200ApplicationJSONFloatingIpsDnsPtr[] dnsPtr;
    public GetFloatingIps200ApplicationJSONFloatingIps withDnsPtr(GetFloatingIps200ApplicationJSONFloatingIpsDnsPtr[] dnsPtr) {
        this.dnsPtr = dnsPtr;
        return this;
    }
    
    /**
     * Location the Floating IP was created in. Routing is optimized for this Location.
     */
    @JsonProperty("home_location")
    public GetFloatingIps200ApplicationJSONFloatingIpsHomeLocation homeLocation;
    public GetFloatingIps200ApplicationJSONFloatingIps withHomeLocation(GetFloatingIps200ApplicationJSONFloatingIpsHomeLocation homeLocation) {
        this.homeLocation = homeLocation;
        return this;
    }
    
    /**
     * ID of the Resource
     */
    @JsonProperty("id")
    public Long id;
    public GetFloatingIps200ApplicationJSONFloatingIps withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * IP address
     */
    @JsonProperty("ip")
    public String ip;
    public GetFloatingIps200ApplicationJSONFloatingIps withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * User-defined labels (key-value pairs)
     */
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public GetFloatingIps200ApplicationJSONFloatingIps withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Name of the Resource. Must be unique per Project.
     */
    @JsonProperty("name")
    public String name;
    public GetFloatingIps200ApplicationJSONFloatingIps withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Protection configuration for the Resource
     */
    @JsonProperty("protection")
    public GetFloatingIps200ApplicationJSONFloatingIpsProtection protection;
    public GetFloatingIps200ApplicationJSONFloatingIps withProtection(GetFloatingIps200ApplicationJSONFloatingIpsProtection protection) {
        this.protection = protection;
        return this;
    }
    
    /**
     * ID of the Server the Floating IP is assigned to, null if it is not assigned at all
     */
    @JsonProperty("server")
    public Long server;
    public GetFloatingIps200ApplicationJSONFloatingIps withServer(Long server) {
        this.server = server;
        return this;
    }
    
    /**
     * Type of the Floating IP
     */
    @JsonProperty("type")
    public GetFloatingIps200ApplicationJSONFloatingIpsTypeEnum type;
    public GetFloatingIps200ApplicationJSONFloatingIps withType(GetFloatingIps200ApplicationJSONFloatingIpsTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
