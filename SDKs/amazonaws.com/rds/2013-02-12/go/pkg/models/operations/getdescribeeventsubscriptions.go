// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeEventSubscriptionsActionEnum
type GETDescribeEventSubscriptionsActionEnum string

const (
	GETDescribeEventSubscriptionsActionEnumDescribeEventSubscriptions GETDescribeEventSubscriptionsActionEnum = "DescribeEventSubscriptions"
)

func (e *GETDescribeEventSubscriptionsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeEventSubscriptions":
		*e = GETDescribeEventSubscriptionsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventSubscriptionsActionEnum: %s", s)
	}
}

// GETDescribeEventSubscriptionsVersionEnum
type GETDescribeEventSubscriptionsVersionEnum string

const (
	GETDescribeEventSubscriptionsVersionEnumTwoThousandAndThirteen0212 GETDescribeEventSubscriptionsVersionEnum = "2013-02-12"
)

func (e *GETDescribeEventSubscriptionsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-02-12":
		*e = GETDescribeEventSubscriptionsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventSubscriptionsVersionEnum: %s", s)
	}
}

type GETDescribeEventSubscriptionsQueryParams struct {
	Action           GETDescribeEventSubscriptionsActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Marker           *string                                  `queryParam:"style=form,explode=true,name=Marker"`
	MaxRecords       *int64                                   `queryParam:"style=form,explode=true,name=MaxRecords"`
	SubscriptionName *string                                  `queryParam:"style=form,explode=true,name=SubscriptionName"`
	Version          GETDescribeEventSubscriptionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeEventSubscriptionsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeEventSubscriptionsRequest struct {
	QueryParams GETDescribeEventSubscriptionsQueryParams
	Headers     GETDescribeEventSubscriptionsHeaders
}

type GETDescribeEventSubscriptionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
