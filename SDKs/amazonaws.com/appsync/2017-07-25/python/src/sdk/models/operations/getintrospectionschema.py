"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getintrospectionschemaresponse as shared_getintrospectionschemaresponse
from enum import Enum
from typing import Any, Optional

class GetIntrospectionSchemaFormatEnum(str, Enum):
    r"""The schema format: SDL or JSON."""
    SDL = 'SDL'
    JSON = 'JSON'


@dataclasses.dataclass
class GetIntrospectionSchemaRequest:
    
    api_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiId', 'style': 'simple', 'explode': False }})
    r"""The API ID."""  
    format: GetIntrospectionSchemaFormatEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""The schema format: SDL or JSON."""  
    include_directives: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeDirectives', 'style': 'form', 'explode': True }})
    r"""A flag that specifies whether the schema introspection should contain directives."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetIntrospectionSchemaResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_introspection_schema_response: Optional[shared_getintrospectionschemaresponse.GetIntrospectionSchemaResponse] = dataclasses.field(default=None)
    r"""Success"""  
    graph_ql_schema_exception: Optional[Any] = dataclasses.field(default=None)
    r"""GraphQLSchemaException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    