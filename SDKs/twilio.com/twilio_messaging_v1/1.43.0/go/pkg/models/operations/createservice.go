// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var CreateServiceServerList = []string{
	"https://messaging.twilio.com",
}

type CreateServiceSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// CreateServiceCreateServiceRequestFallbackMethodEnum - The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.
type CreateServiceCreateServiceRequestFallbackMethodEnum string

const (
	CreateServiceCreateServiceRequestFallbackMethodEnumHead   CreateServiceCreateServiceRequestFallbackMethodEnum = "HEAD"
	CreateServiceCreateServiceRequestFallbackMethodEnumGet    CreateServiceCreateServiceRequestFallbackMethodEnum = "GET"
	CreateServiceCreateServiceRequestFallbackMethodEnumPost   CreateServiceCreateServiceRequestFallbackMethodEnum = "POST"
	CreateServiceCreateServiceRequestFallbackMethodEnumPatch  CreateServiceCreateServiceRequestFallbackMethodEnum = "PATCH"
	CreateServiceCreateServiceRequestFallbackMethodEnumPut    CreateServiceCreateServiceRequestFallbackMethodEnum = "PUT"
	CreateServiceCreateServiceRequestFallbackMethodEnumDelete CreateServiceCreateServiceRequestFallbackMethodEnum = "DELETE"
)

func (e CreateServiceCreateServiceRequestFallbackMethodEnum) ToPointer() *CreateServiceCreateServiceRequestFallbackMethodEnum {
	return &e
}

func (e *CreateServiceCreateServiceRequestFallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateServiceCreateServiceRequestFallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServiceCreateServiceRequestFallbackMethodEnum: %v", v)
	}
}

// CreateServiceCreateServiceRequestInboundMethodEnum - The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.
type CreateServiceCreateServiceRequestInboundMethodEnum string

const (
	CreateServiceCreateServiceRequestInboundMethodEnumHead   CreateServiceCreateServiceRequestInboundMethodEnum = "HEAD"
	CreateServiceCreateServiceRequestInboundMethodEnumGet    CreateServiceCreateServiceRequestInboundMethodEnum = "GET"
	CreateServiceCreateServiceRequestInboundMethodEnumPost   CreateServiceCreateServiceRequestInboundMethodEnum = "POST"
	CreateServiceCreateServiceRequestInboundMethodEnumPatch  CreateServiceCreateServiceRequestInboundMethodEnum = "PATCH"
	CreateServiceCreateServiceRequestInboundMethodEnumPut    CreateServiceCreateServiceRequestInboundMethodEnum = "PUT"
	CreateServiceCreateServiceRequestInboundMethodEnumDelete CreateServiceCreateServiceRequestInboundMethodEnum = "DELETE"
)

func (e CreateServiceCreateServiceRequestInboundMethodEnum) ToPointer() *CreateServiceCreateServiceRequestInboundMethodEnum {
	return &e
}

func (e *CreateServiceCreateServiceRequestInboundMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateServiceCreateServiceRequestInboundMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServiceCreateServiceRequestInboundMethodEnum: %v", v)
	}
}

type CreateServiceCreateServiceRequest struct {
	// Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/sms/services#area-code-geomatch) on the Service Instance.
	AreaCodeGeomatch *bool `form:"name=AreaCodeGeomatch"`
	// The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.
	FallbackMethod *CreateServiceCreateServiceRequestFallbackMethodEnum `form:"name=FallbackMethod"`
	// Whether to enable [Fallback to Long Code](https://www.twilio.com/docs/sms/services#fallback-to-long-code) for messages sent through the Service instance.
	FallbackToLongCode *bool `form:"name=FallbackToLongCode"`
	// The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.
	FallbackURL *string `form:"name=FallbackUrl"`
	// A descriptive string that you create to describe the resource. It can be up to 64 characters long.
	FriendlyName string `form:"name=FriendlyName"`
	// The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.
	InboundMethod *CreateServiceCreateServiceRequestInboundMethodEnum `form:"name=InboundMethod"`
	// The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.
	InboundRequestURL *string `form:"name=InboundRequestUrl"`
	// Whether to enable the [MMS Converter](https://www.twilio.com/docs/sms/services#mms-converter) for messages sent through the Service instance.
	MmsConverter       *bool                                     `form:"name=MmsConverter"`
	ScanMessageContent *shared.ServiceEnumScanMessageContentEnum `form:"name=ScanMessageContent"`
	// Whether to enable [Smart Encoding](https://www.twilio.com/docs/sms/services#smart-encoding) for messages sent through the Service instance.
	SmartEncoding *bool `form:"name=SmartEncoding"`
	// The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.
	StatusCallback *string `form:"name=StatusCallback"`
	// Whether to enable [Sticky Sender](https://www.twilio.com/docs/sms/services#sticky-sender) on the Service instance.
	StickySender *bool `form:"name=StickySender"`
	// Reserved.
	SynchronousValidation *bool `form:"name=SynchronousValidation"`
	// A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.
	UseInboundWebhookOnNumber *bool `form:"name=UseInboundWebhookOnNumber"`
	// A string that describes the scenario in which the Messaging Service will be used. Examples: [notification, marketing, verification, poll ..].
	Usecase *string `form:"name=Usecase"`
	// How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.
	ValidityPeriod *int64 `form:"name=ValidityPeriod"`
}

type CreateServiceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	MessagingV1Service *shared.MessagingV1Service
}
