// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Sandbox Environment
	"https://sandbox.heraldapi.com",
	// Production Environment
	"https://production.heraldapi.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - HeraldAPI is the API for commercial insurance.
//
// Below are the available endpoints:
//
// <b>Welcome & Health Check</b>
// <br><tt>[GET&nbsp;/](/b3A6ODY5Mzc1MA-)</tt>
// <hr>
//
// <b>Submissions</b>
// <br><tt>[POST&nbsp;/submissions](/b3A6OTQ1Mjg5Nw-submissions)</tt>
// <br><tt>[GET&nbsp;&nbsp;/submissions/{submission_id}](/b3A6OTQ1ODY3Mg-submissions-submission-id)</tt>
// <hr>
//
// <b>Quotes</b>
// <br><tt>[GET&nbsp;/quotes/{quote_id}](/b3A6ODc3NjcwMg-quotes-quote-id)</tt>
// <hr>
//
// <b>Producers</b>
// <br><tt>[GET&nbsp;/producers](/b3A6ODc3NjcwMQ-producers)</tt>
// <hr>
//
// <b>Products</b>
// <br><tt>[GET&nbsp;/products](/b3A6ODc3NjcwNg-products)</tt>
// <hr>
//
// <b>Institutions</b>
// <br><tt>[GET&nbsp;/institutions](/b3A6ODc3NjcwNw-institutions)</tt>
// <hr>
//
// <b>Coverage Parameters</b>
// <br><tt>[GET&nbsp;/coverage_parameters](/b3A6MTA0MDgyNzc-coverage-parameters)</tt>
// <hr>
//
// <b>Risk Parameters</b>
// <br><tt>[GET&nbsp;/risk_parameters](/b3A6MTA0MDgyNzg-risk-parameters)</tt>
type SDK struct {
	Applications          *applications
	Auth                  *auth
	Classifications       *classifications
	CoverageParameters    *coverageParameters
	Files                 *files
	Institutions          *institutions
	Policies              *policies
	Producers             *producers
	Products              *products
	Quotes                *quotes
	RiskParameters        *riskParameters
	Submissions           *submissions
	WelcomeAndHealthCheck *welcomeAndHealthCheck

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *SDK) {
		sdk._security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Applications = newApplications(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Auth = newAuth(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Classifications = newClassifications(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CoverageParameters = newCoverageParameters(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Files = newFiles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Institutions = newInstitutions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Policies = newPolicies(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Producers = newProducers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Products = newProducts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Quotes = newQuotes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RiskParameters = newRiskParameters(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Submissions = newSubmissions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WelcomeAndHealthCheck = newWelcomeAndHealthCheck(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
