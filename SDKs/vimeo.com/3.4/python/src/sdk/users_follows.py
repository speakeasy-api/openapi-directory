"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class UsersFollows:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def check_if_user_is_following(self, request: operations.CheckIfUserIsFollowingRequest) -> operations.CheckIfUserIsFollowingResponse:
        r"""Check if a user is following another user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfUserIsFollowingRequest, base_url, '/users/{user_id}/following/{follow_user_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfUserIsFollowingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def check_if_user_is_following_alt1(self, request: operations.CheckIfUserIsFollowingAlt1Request) -> operations.CheckIfUserIsFollowingAlt1Response:
        r"""Check if a user is following another user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfUserIsFollowingAlt1Request, base_url, '/me/following/{follow_user_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfUserIsFollowingAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def follow_user(self, request: operations.FollowUserRequest, security: operations.FollowUserSecurity) -> operations.FollowUserResponse:
        r"""Follow a specific user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FollowUserRequest, base_url, '/users/{user_id}/following/{follow_user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FollowUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def follow_user_alt1(self, request: operations.FollowUserAlt1Request, security: operations.FollowUserAlt1Security) -> operations.FollowUserAlt1Response:
        r"""Follow a specific user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FollowUserAlt1Request, base_url, '/me/following/{follow_user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FollowUserAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def follow_users(self, request: operations.FollowUsersRequest, security: operations.FollowUsersSecurity) -> operations.FollowUsersResponse:
        r"""Follow a list of users"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FollowUsersRequest, base_url, '/users/{user_id}/following', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FollowUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def follow_users_alt1(self, request: operations.FollowUsersAlt1RequestBody, security: operations.FollowUsersAlt1Security) -> operations.FollowUsersAlt1Response:
        r"""Follow a list of users"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/following'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FollowUsersAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 429, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_followers(self, request: operations.GetFollowersRequest) -> operations.GetFollowersResponse:
        r"""Get all the followers of a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFollowersRequest, base_url, '/users/{user_id}/followers', request)
        
        query_params = utils.get_query_params(operations.GetFollowersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFollowersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out

        return res

    def get_followers_alt1(self, request: operations.GetFollowersAlt1Request) -> operations.GetFollowersAlt1Response:
        r"""Get all the followers of a user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/followers'
        
        query_params = utils.get_query_params(operations.GetFollowersAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFollowersAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out

        return res

    def get_user_following(self, request: operations.GetUserFollowingRequest) -> operations.GetUserFollowingResponse:
        r"""Get all the users that a user is following"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserFollowingRequest, base_url, '/users/{user_id}/following', request)
        
        query_params = utils.get_query_params(operations.GetUserFollowingRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserFollowingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out

        return res

    def get_user_following_alt1(self, request: operations.GetUserFollowingAlt1Request) -> operations.GetUserFollowingAlt1Response:
        r"""Get all the users that a user is following"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/following'
        
        query_params = utils.get_query_params(operations.GetUserFollowingAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserFollowingAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out

        return res

    def unfollow_user(self, request: operations.UnfollowUserRequest, security: operations.UnfollowUserSecurity) -> operations.UnfollowUserResponse:
        r"""Unfollow a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnfollowUserRequest, base_url, '/users/{user_id}/following/{follow_user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnfollowUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def unfollow_user_alt1(self, request: operations.UnfollowUserAlt1Request, security: operations.UnfollowUserAlt1Security) -> operations.UnfollowUserAlt1Response:
        r"""Unfollow a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnfollowUserAlt1Request, base_url, '/me/following/{follow_user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnfollowUserAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    