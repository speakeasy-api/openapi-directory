"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Models:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bigquery_models_delete(self, request: operations.BigqueryModelsDeleteRequest, security: operations.BigqueryModelsDeleteSecurity) -> operations.BigqueryModelsDeleteResponse:
        r"""Deletes the model specified by modelId from the dataset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryModelsDeleteRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/models/{modelId}', request)
        
        query_params = utils.get_query_params(operations.BigqueryModelsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryModelsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def bigquery_models_get(self, request: operations.BigqueryModelsGetRequest, security: operations.BigqueryModelsGetSecurity) -> operations.BigqueryModelsGetResponse:
        r"""Gets the specified model resource by model ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryModelsGetRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/models/{modelId}', request)
        
        query_params = utils.get_query_params(operations.BigqueryModelsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryModelsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Model])
                res.model = out

        return res

    def bigquery_models_list(self, request: operations.BigqueryModelsListRequest, security: operations.BigqueryModelsListSecurity) -> operations.BigqueryModelsListResponse:
        r"""Lists all models in the specified dataset. Requires the READER dataset role. After retrieving the list of models, you can get information about a particular model by calling the models.get method."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryModelsListRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/models', request)
        
        query_params = utils.get_query_params(operations.BigqueryModelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryModelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListModelsResponse])
                res.list_models_response = out

        return res

    def bigquery_models_patch(self, request: operations.BigqueryModelsPatchRequest, security: operations.BigqueryModelsPatchSecurity) -> operations.BigqueryModelsPatchResponse:
        r"""Patch specific fields in the specified model."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryModelsPatchRequest, base_url, '/projects/{projectId}/datasets/{datasetId}/models/{modelId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "model_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryModelsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryModelsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Model])
                res.model = out

        return res

    