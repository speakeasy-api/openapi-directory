/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class CreateCommitResponse {
    /**
     * BranchDoesNotExistException
     */
    
    public Object branchDoesNotExistException;

    public CreateCommitResponse withBranchDoesNotExistException(Object branchDoesNotExistException) {
        this.branchDoesNotExistException = branchDoesNotExistException;
        return this;
    }
    
    /**
     * BranchNameIsTagNameException
     */
    
    public Object branchNameIsTagNameException;

    public CreateCommitResponse withBranchNameIsTagNameException(Object branchNameIsTagNameException) {
        this.branchNameIsTagNameException = branchNameIsTagNameException;
        return this;
    }
    
    /**
     * BranchNameRequiredException
     */
    
    public Object branchNameRequiredException;

    public CreateCommitResponse withBranchNameRequiredException(Object branchNameRequiredException) {
        this.branchNameRequiredException = branchNameRequiredException;
        return this;
    }
    
    /**
     * CommitMessageLengthExceededException
     */
    
    public Object commitMessageLengthExceededException;

    public CreateCommitResponse withCommitMessageLengthExceededException(Object commitMessageLengthExceededException) {
        this.commitMessageLengthExceededException = commitMessageLengthExceededException;
        return this;
    }
    
    
    public String contentType;

    public CreateCommitResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.CreateCommitOutput createCommitOutput;

    public CreateCommitResponse withCreateCommitOutput(org.openapis.openapi.models.shared.CreateCommitOutput createCommitOutput) {
        this.createCommitOutput = createCommitOutput;
        return this;
    }
    
    /**
     * DirectoryNameConflictsWithFileNameException
     */
    
    public Object directoryNameConflictsWithFileNameException;

    public CreateCommitResponse withDirectoryNameConflictsWithFileNameException(Object directoryNameConflictsWithFileNameException) {
        this.directoryNameConflictsWithFileNameException = directoryNameConflictsWithFileNameException;
        return this;
    }
    
    /**
     * EncryptionIntegrityChecksFailedException
     */
    
    public Object encryptionIntegrityChecksFailedException;

    public CreateCommitResponse withEncryptionIntegrityChecksFailedException(Object encryptionIntegrityChecksFailedException) {
        this.encryptionIntegrityChecksFailedException = encryptionIntegrityChecksFailedException;
        return this;
    }
    
    /**
     * EncryptionKeyAccessDeniedException
     */
    
    public Object encryptionKeyAccessDeniedException;

    public CreateCommitResponse withEncryptionKeyAccessDeniedException(Object encryptionKeyAccessDeniedException) {
        this.encryptionKeyAccessDeniedException = encryptionKeyAccessDeniedException;
        return this;
    }
    
    /**
     * EncryptionKeyDisabledException
     */
    
    public Object encryptionKeyDisabledException;

    public CreateCommitResponse withEncryptionKeyDisabledException(Object encryptionKeyDisabledException) {
        this.encryptionKeyDisabledException = encryptionKeyDisabledException;
        return this;
    }
    
    /**
     * EncryptionKeyNotFoundException
     */
    
    public Object encryptionKeyNotFoundException;

    public CreateCommitResponse withEncryptionKeyNotFoundException(Object encryptionKeyNotFoundException) {
        this.encryptionKeyNotFoundException = encryptionKeyNotFoundException;
        return this;
    }
    
    /**
     * EncryptionKeyUnavailableException
     */
    
    public Object encryptionKeyUnavailableException;

    public CreateCommitResponse withEncryptionKeyUnavailableException(Object encryptionKeyUnavailableException) {
        this.encryptionKeyUnavailableException = encryptionKeyUnavailableException;
        return this;
    }
    
    /**
     * FileContentAndSourceFileSpecifiedException
     */
    
    public Object fileContentAndSourceFileSpecifiedException;

    public CreateCommitResponse withFileContentAndSourceFileSpecifiedException(Object fileContentAndSourceFileSpecifiedException) {
        this.fileContentAndSourceFileSpecifiedException = fileContentAndSourceFileSpecifiedException;
        return this;
    }
    
    /**
     * FileContentSizeLimitExceededException
     */
    
    public Object fileContentSizeLimitExceededException;

    public CreateCommitResponse withFileContentSizeLimitExceededException(Object fileContentSizeLimitExceededException) {
        this.fileContentSizeLimitExceededException = fileContentSizeLimitExceededException;
        return this;
    }
    
    /**
     * FileDoesNotExistException
     */
    
    public Object fileDoesNotExistException;

    public CreateCommitResponse withFileDoesNotExistException(Object fileDoesNotExistException) {
        this.fileDoesNotExistException = fileDoesNotExistException;
        return this;
    }
    
    /**
     * FileEntryRequiredException
     */
    
    public Object fileEntryRequiredException;

    public CreateCommitResponse withFileEntryRequiredException(Object fileEntryRequiredException) {
        this.fileEntryRequiredException = fileEntryRequiredException;
        return this;
    }
    
    /**
     * FileModeRequiredException
     */
    
    public Object fileModeRequiredException;

    public CreateCommitResponse withFileModeRequiredException(Object fileModeRequiredException) {
        this.fileModeRequiredException = fileModeRequiredException;
        return this;
    }
    
    /**
     * FileNameConflictsWithDirectoryNameException
     */
    
    public Object fileNameConflictsWithDirectoryNameException;

    public CreateCommitResponse withFileNameConflictsWithDirectoryNameException(Object fileNameConflictsWithDirectoryNameException) {
        this.fileNameConflictsWithDirectoryNameException = fileNameConflictsWithDirectoryNameException;
        return this;
    }
    
    /**
     * FilePathConflictsWithSubmodulePathException
     */
    
    public Object filePathConflictsWithSubmodulePathException;

    public CreateCommitResponse withFilePathConflictsWithSubmodulePathException(Object filePathConflictsWithSubmodulePathException) {
        this.filePathConflictsWithSubmodulePathException = filePathConflictsWithSubmodulePathException;
        return this;
    }
    
    /**
     * FolderContentSizeLimitExceededException
     */
    
    public Object folderContentSizeLimitExceededException;

    public CreateCommitResponse withFolderContentSizeLimitExceededException(Object folderContentSizeLimitExceededException) {
        this.folderContentSizeLimitExceededException = folderContentSizeLimitExceededException;
        return this;
    }
    
    /**
     * InvalidBranchNameException
     */
    
    public Object invalidBranchNameException;

    public CreateCommitResponse withInvalidBranchNameException(Object invalidBranchNameException) {
        this.invalidBranchNameException = invalidBranchNameException;
        return this;
    }
    
    /**
     * InvalidDeletionParameterException
     */
    
    public Object invalidDeletionParameterException;

    public CreateCommitResponse withInvalidDeletionParameterException(Object invalidDeletionParameterException) {
        this.invalidDeletionParameterException = invalidDeletionParameterException;
        return this;
    }
    
    /**
     * InvalidEmailException
     */
    
    public Object invalidEmailException;

    public CreateCommitResponse withInvalidEmailException(Object invalidEmailException) {
        this.invalidEmailException = invalidEmailException;
        return this;
    }
    
    /**
     * InvalidFileModeException
     */
    
    public Object invalidFileModeException;

    public CreateCommitResponse withInvalidFileModeException(Object invalidFileModeException) {
        this.invalidFileModeException = invalidFileModeException;
        return this;
    }
    
    /**
     * InvalidParentCommitIdException
     */
    
    public Object invalidParentCommitIdException;

    public CreateCommitResponse withInvalidParentCommitIdException(Object invalidParentCommitIdException) {
        this.invalidParentCommitIdException = invalidParentCommitIdException;
        return this;
    }
    
    /**
     * InvalidPathException
     */
    
    public Object invalidPathException;

    public CreateCommitResponse withInvalidPathException(Object invalidPathException) {
        this.invalidPathException = invalidPathException;
        return this;
    }
    
    /**
     * InvalidRepositoryNameException
     */
    
    public Object invalidRepositoryNameException;

    public CreateCommitResponse withInvalidRepositoryNameException(Object invalidRepositoryNameException) {
        this.invalidRepositoryNameException = invalidRepositoryNameException;
        return this;
    }
    
    /**
     * MaximumFileEntriesExceededException
     */
    
    public Object maximumFileEntriesExceededException;

    public CreateCommitResponse withMaximumFileEntriesExceededException(Object maximumFileEntriesExceededException) {
        this.maximumFileEntriesExceededException = maximumFileEntriesExceededException;
        return this;
    }
    
    /**
     * NameLengthExceededException
     */
    
    public Object nameLengthExceededException;

    public CreateCommitResponse withNameLengthExceededException(Object nameLengthExceededException) {
        this.nameLengthExceededException = nameLengthExceededException;
        return this;
    }
    
    /**
     * NoChangeException
     */
    
    public Object noChangeException;

    public CreateCommitResponse withNoChangeException(Object noChangeException) {
        this.noChangeException = noChangeException;
        return this;
    }
    
    /**
     * ParentCommitDoesNotExistException
     */
    
    public Object parentCommitDoesNotExistException;

    public CreateCommitResponse withParentCommitDoesNotExistException(Object parentCommitDoesNotExistException) {
        this.parentCommitDoesNotExistException = parentCommitDoesNotExistException;
        return this;
    }
    
    /**
     * ParentCommitIdOutdatedException
     */
    
    public Object parentCommitIdOutdatedException;

    public CreateCommitResponse withParentCommitIdOutdatedException(Object parentCommitIdOutdatedException) {
        this.parentCommitIdOutdatedException = parentCommitIdOutdatedException;
        return this;
    }
    
    /**
     * ParentCommitIdRequiredException
     */
    
    public Object parentCommitIdRequiredException;

    public CreateCommitResponse withParentCommitIdRequiredException(Object parentCommitIdRequiredException) {
        this.parentCommitIdRequiredException = parentCommitIdRequiredException;
        return this;
    }
    
    /**
     * PathRequiredException
     */
    
    public Object pathRequiredException;

    public CreateCommitResponse withPathRequiredException(Object pathRequiredException) {
        this.pathRequiredException = pathRequiredException;
        return this;
    }
    
    /**
     * PutFileEntryConflictException
     */
    
    public Object putFileEntryConflictException;

    public CreateCommitResponse withPutFileEntryConflictException(Object putFileEntryConflictException) {
        this.putFileEntryConflictException = putFileEntryConflictException;
        return this;
    }
    
    /**
     * RepositoryDoesNotExistException
     */
    
    public Object repositoryDoesNotExistException;

    public CreateCommitResponse withRepositoryDoesNotExistException(Object repositoryDoesNotExistException) {
        this.repositoryDoesNotExistException = repositoryDoesNotExistException;
        return this;
    }
    
    /**
     * RepositoryNameRequiredException
     */
    
    public Object repositoryNameRequiredException;

    public CreateCommitResponse withRepositoryNameRequiredException(Object repositoryNameRequiredException) {
        this.repositoryNameRequiredException = repositoryNameRequiredException;
        return this;
    }
    
    /**
     * RestrictedSourceFileException
     */
    
    public Object restrictedSourceFileException;

    public CreateCommitResponse withRestrictedSourceFileException(Object restrictedSourceFileException) {
        this.restrictedSourceFileException = restrictedSourceFileException;
        return this;
    }
    
    /**
     * SamePathRequestException
     */
    
    public Object samePathRequestException;

    public CreateCommitResponse withSamePathRequestException(Object samePathRequestException) {
        this.samePathRequestException = samePathRequestException;
        return this;
    }
    
    /**
     * SourceFileOrContentRequiredException
     */
    
    public Object sourceFileOrContentRequiredException;

    public CreateCommitResponse withSourceFileOrContentRequiredException(Object sourceFileOrContentRequiredException) {
        this.sourceFileOrContentRequiredException = sourceFileOrContentRequiredException;
        return this;
    }
    
    
    public Integer statusCode;

    public CreateCommitResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public CreateCommitResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    public CreateCommitResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
