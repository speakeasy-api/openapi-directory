"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionalsettings as shared_additionalsettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateMerchantWebhookRequestCommunicationFormatEnum(str, Enum):
    r"""Format or protocol for receiving webhooks. Possible values:
    * **soap**
    * **http**
    * **json**
    """
    HTTP = 'http'
    JSON = 'json'
    SOAP = 'soap'

class UpdateMerchantWebhookRequestNetworkTypeEnum(str, Enum):
    r"""Network type for Terminal API notification webhooks. Possible values:
    * **public**
    * **local**
    
    Default Value: **public**.
    """
    LOCAL = 'LOCAL'
    PUBLIC = 'PUBLIC'

class UpdateMerchantWebhookRequestSslVersionEnum(str, Enum):
    r"""SSL version to access the public webhook URL specified in the `url` field. Possible values:
    * **TLSv1.3**
    * **TLSv1.2**
    * **HTTP** - Only allowed on Test environment.
    
    If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
    """
    HTTP = 'HTTP'
    SSL = 'SSL'
    SS_LV3 = 'SSLv3'
    TLS = 'TLS'
    TL_SV1 = 'TLSv1'
    TL_SV1_1 = 'TLSv1.1'
    TL_SV1_2 = 'TLSv1.2'
    TL_SV1_3 = 'TLSv1.3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMerchantWebhookRequest:
    
    accepts_expired_certificate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acceptsExpiredCertificate'), 'exclude': lambda f: f is None }})
    r"""Indicates if expired SSL certificates are accepted. Default value: **false**."""  
    accepts_self_signed_certificate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acceptsSelfSignedCertificate'), 'exclude': lambda f: f is None }})
    r"""Indicates if self-signed SSL certificates are accepted. Default value: **false**."""  
    accepts_untrusted_root_certificate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acceptsUntrustedRootCertificate'), 'exclude': lambda f: f is None }})
    r"""Indicates if untrusted SSL certificates are accepted. Default value: **false**."""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account."""  
    additional_settings: Optional[shared_additionalsettings.AdditionalSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalSettings'), 'exclude': lambda f: f is None }})  
    communication_format: Optional[UpdateMerchantWebhookRequestCommunicationFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('communicationFormat'), 'exclude': lambda f: f is None }})
    r"""Format or protocol for receiving webhooks. Possible values:
    * **soap**
    * **http**
    * **json**
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Your description for this webhook configuration."""  
    network_type: Optional[UpdateMerchantWebhookRequestNetworkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkType'), 'exclude': lambda f: f is None }})
    r"""Network type for Terminal API notification webhooks. Possible values:
    * **public**
    * **local**
    
    Default Value: **public**.
    """  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""Password to access the webhook URL."""  
    populate_soap_action_header: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('populateSoapActionHeader'), 'exclude': lambda f: f is None }})
    r"""Indicates if the SOAP action header needs to be populated. Default value: **false**.
    
    Only applies if `communicationFormat`: **soap**.
    """  
    ssl_version: Optional[UpdateMerchantWebhookRequestSslVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslVersion'), 'exclude': lambda f: f is None }})
    r"""SSL version to access the public webhook URL specified in the `url` field. Possible values:
    * **TLSv1.3**
    * **TLSv1.2**
    * **HTTP** - Only allowed on Test environment.
    
    If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
    """  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""Username to access the webhook URL."""  
    