// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETEnableReachabilityAnalyzerOrganizationSharingActionEnum
type GETEnableReachabilityAnalyzerOrganizationSharingActionEnum string

const (
	GETEnableReachabilityAnalyzerOrganizationSharingActionEnumEnableReachabilityAnalyzerOrganizationSharing GETEnableReachabilityAnalyzerOrganizationSharingActionEnum = "EnableReachabilityAnalyzerOrganizationSharing"
)

func (e *GETEnableReachabilityAnalyzerOrganizationSharingActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EnableReachabilityAnalyzerOrganizationSharing":
		*e = GETEnableReachabilityAnalyzerOrganizationSharingActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableReachabilityAnalyzerOrganizationSharingActionEnum: %s", s)
	}
}

// GETEnableReachabilityAnalyzerOrganizationSharingVersionEnum
type GETEnableReachabilityAnalyzerOrganizationSharingVersionEnum string

const (
	GETEnableReachabilityAnalyzerOrganizationSharingVersionEnumTwoThousandAndSixteen1115 GETEnableReachabilityAnalyzerOrganizationSharingVersionEnum = "2016-11-15"
)

func (e *GETEnableReachabilityAnalyzerOrganizationSharingVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETEnableReachabilityAnalyzerOrganizationSharingVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableReachabilityAnalyzerOrganizationSharingVersionEnum: %s", s)
	}
}

type GETEnableReachabilityAnalyzerOrganizationSharingQueryParams struct {
	Action GETEnableReachabilityAnalyzerOrganizationSharingActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun  *bool                                                       `queryParam:"style=form,explode=true,name=DryRun"`
	Version GETEnableReachabilityAnalyzerOrganizationSharingVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETEnableReachabilityAnalyzerOrganizationSharingHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETEnableReachabilityAnalyzerOrganizationSharingRequest struct {
	QueryParams GETEnableReachabilityAnalyzerOrganizationSharingQueryParams
	Headers     GETEnableReachabilityAnalyzerOrganizationSharingHeaders
}

type GETEnableReachabilityAnalyzerOrganizationSharingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
