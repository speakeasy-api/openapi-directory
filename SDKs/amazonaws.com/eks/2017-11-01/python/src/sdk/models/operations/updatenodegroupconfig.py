"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taint as shared_taint
from ..shared import updatenodegroupconfigresponse as shared_updatenodegroupconfigresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNodegroupConfigRequestBodyLabels:
    r"""An object representing a Kubernetes label change for a managed node group."""
    
    add_or_update_labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addOrUpdateLabels'), 'exclude': lambda f: f is None }})  
    remove_labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removeLabels'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNodegroupConfigRequestBodyScalingConfig:
    r"""An object representing the scaling configuration details for the Auto Scaling group that is associated with your node group. When creating a node group, you must specify all or none of the properties. When updating a node group, you can specify any or none of the properties."""
    
    desired_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desiredSize'), 'exclude': lambda f: f is None }})  
    max_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxSize'), 'exclude': lambda f: f is None }})  
    min_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minSize'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNodegroupConfigRequestBodyTaints:
    r"""An object representing the details of an update to a taints payload. For more information, see <a href=\\"https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html\\">Node taints on managed node groups</a>."""
    
    add_or_update_taints: Optional[list[shared_taint.Taint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addOrUpdateTaints'), 'exclude': lambda f: f is None }})  
    remove_taints: Optional[list[shared_taint.Taint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removeTaints'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNodegroupConfigRequestBodyUpdateConfig:
    r"""The node group update configuration."""
    
    max_unavailable: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUnavailable'), 'exclude': lambda f: f is None }})  
    max_unavailable_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUnavailablePercentage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNodegroupConfigRequestBody:
    
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken'), 'exclude': lambda f: f is None }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."""  
    labels: Optional[UpdateNodegroupConfigRequestBodyLabels] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""An object representing a Kubernetes label change for a managed node group."""  
    scaling_config: Optional[UpdateNodegroupConfigRequestBodyScalingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scalingConfig'), 'exclude': lambda f: f is None }})
    r"""An object representing the scaling configuration details for the Auto Scaling group that is associated with your node group. When creating a node group, you must specify all or none of the properties. When updating a node group, you can specify any or none of the properties."""  
    taints: Optional[UpdateNodegroupConfigRequestBodyTaints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taints'), 'exclude': lambda f: f is None }})
    r"""An object representing the details of an update to a taints payload. For more information, see <a href=\\"https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html\\">Node taints on managed node groups</a>."""  
    update_config: Optional[UpdateNodegroupConfigRequestBodyUpdateConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateConfig'), 'exclude': lambda f: f is None }})
    r"""The node group update configuration."""  
    

@dataclasses.dataclass
class UpdateNodegroupConfigRequest:
    
    name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'name', 'style': 'simple', 'explode': False }})
    r"""The name of the Amazon EKS cluster that the managed node group resides in."""  
    nodegroup_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'nodegroupName', 'style': 'simple', 'explode': False }})
    r"""The name of the managed node group to update."""  
    request_body: UpdateNodegroupConfigRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateNodegroupConfigResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServerException"""  
    update_nodegroup_config_response: Optional[shared_updatenodegroupconfigresponse.UpdateNodegroupConfigResponse] = dataclasses.field(default=None)
    r"""Success"""  
    