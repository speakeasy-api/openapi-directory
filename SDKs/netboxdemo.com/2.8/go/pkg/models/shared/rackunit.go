// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RackUnitFaceLabelEnum string

const (
	RackUnitFaceLabelEnumFront RackUnitFaceLabelEnum = "Front"
	RackUnitFaceLabelEnumRear  RackUnitFaceLabelEnum = "Rear"
)

func (e *RackUnitFaceLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Front":
		fallthrough
	case "Rear":
		*e = RackUnitFaceLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackUnitFaceLabelEnum: %s", s)
	}
}

type RackUnitFaceValueEnum string

const (
	RackUnitFaceValueEnumFront RackUnitFaceValueEnum = "front"
	RackUnitFaceValueEnumRear  RackUnitFaceValueEnum = "rear"
)

func (e *RackUnitFaceValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "front":
		fallthrough
	case "rear":
		*e = RackUnitFaceValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackUnitFaceValueEnum: %s", s)
	}
}

type RackUnitFace struct {
	Label RackUnitFaceLabelEnum `json:"label"`
	Value RackUnitFaceValueEnum `json:"value"`
}

type RackUnit struct {
	Device *NestedDevice `json:"device,omitempty"`
	Face   *RackUnitFace `json:"face,omitempty"`
	ID     *int64        `json:"id,omitempty"`
	Name   *string       `json:"name,omitempty"`
}
