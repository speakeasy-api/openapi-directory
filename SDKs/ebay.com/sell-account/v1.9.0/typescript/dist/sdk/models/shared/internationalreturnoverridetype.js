"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternationalReturnOverrideType = void 0;
var utils_1 = require("../../../internal/utils");
var timeduration_1 = require("./timeduration");
var class_transformer_1 = require("class-transformer");
/**
 * This type defines the fields for a seller's international return policy. Sellers have the ability to set separate domestic and international return policies, but if an international return policy is not set, the same return policy settings specified for the domestic return policy are also used for returns for international buyers.
 */
var InternationalReturnOverrideType = /** @class */ (function (_super) {
    __extends(InternationalReturnOverrideType, _super);
    function InternationalReturnOverrideType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "returnMethod" }),
        __metadata("design:type", String)
    ], InternationalReturnOverrideType.prototype, "returnMethod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "returnPeriod" }),
        (0, class_transformer_1.Type)(function () { return timeduration_1.TimeDuration; }),
        __metadata("design:type", timeduration_1.TimeDuration)
    ], InternationalReturnOverrideType.prototype, "returnPeriod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "returnShippingCostPayer" }),
        __metadata("design:type", String)
    ], InternationalReturnOverrideType.prototype, "returnShippingCostPayer", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "returnsAccepted" }),
        __metadata("design:type", Boolean)
    ], InternationalReturnOverrideType.prototype, "returnsAccepted", void 0);
    return InternationalReturnOverrideType;
}(utils_1.SpeakeasyBase));
exports.InternationalReturnOverrideType = InternationalReturnOverrideType;
