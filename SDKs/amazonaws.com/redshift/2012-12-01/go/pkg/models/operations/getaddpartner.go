// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAddPartnerActionEnum
type GETAddPartnerActionEnum string

const (
	GETAddPartnerActionEnumAddPartner GETAddPartnerActionEnum = "AddPartner"
)

func (e *GETAddPartnerActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AddPartner":
		*e = GETAddPartnerActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAddPartnerActionEnum: %s", s)
	}
}

// GETAddPartnerVersionEnum
type GETAddPartnerVersionEnum string

const (
	GETAddPartnerVersionEnumTwoThousandAndTwelve1201 GETAddPartnerVersionEnum = "2012-12-01"
)

func (e *GETAddPartnerVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETAddPartnerVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAddPartnerVersionEnum: %s", s)
	}
}

type GETAddPartnerQueryParams struct {
	// The Amazon Web Services account ID that owns the cluster.
	AccountID string                  `queryParam:"style=form,explode=true,name=AccountId"`
	Action    GETAddPartnerActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The cluster identifier of the cluster that receives data from the partner.
	ClusterIdentifier string `queryParam:"style=form,explode=true,name=ClusterIdentifier"`
	// The name of the database that receives data from the partner.
	DatabaseName string `queryParam:"style=form,explode=true,name=DatabaseName"`
	// The name of the partner that is authorized to send data.
	PartnerName string                   `queryParam:"style=form,explode=true,name=PartnerName"`
	Version     GETAddPartnerVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETAddPartnerHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAddPartnerRequest struct {
	QueryParams GETAddPartnerQueryParams
	Headers     GETAddPartnerHeaders
}

type GETAddPartnerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
