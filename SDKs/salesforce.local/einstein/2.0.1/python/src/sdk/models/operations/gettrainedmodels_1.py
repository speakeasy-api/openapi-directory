"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import modellist as shared_modellist
from typing import Optional


@dataclasses.dataclass
class GetTrainedModels1Security:
    
    bearer_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetTrainedModels1Request:
    
    dataset_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'datasetId', 'style': 'simple', 'explode': False }})
    r"""Dataset Id"""  
    count: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""Number of models to return."""  
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Index of the model from which you want to start paging."""  
    

@dataclasses.dataclass
class GetTrainedModels1Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    model_list: Optional[shared_modellist.ModelList] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    