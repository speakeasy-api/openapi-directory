<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Snmptcp 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's SNMPTCP argument structure
     * 
     * Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetArgsResponse
     */
	public function protocolSnmptcpGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmptcpGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's SNMPTCP configuration
     * 
     * Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetConfigResponse
     */
	public function protocolSnmptcpGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSNMPTCP = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSNMPTCP', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's SNMPTCP statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatisticsResponse
     */
	public function protocolSnmptcpGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmptcpGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the SNMPTCP statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatsHdrResponse
     */
	public function protocolSnmptcpGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/snmptcp/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmptcpGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's SNMPTCP traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetTraceResponse
     */
	public function protocolSnmptcpGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSNMPTCP = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSNMPTCP', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Disable individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasDisableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasDisableResponse
     */
	public function protocolSnmptcpIpaliasDisable(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasDisableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/disable/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmptcpIpaliasDisable200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Enable individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasEnableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasEnableResponse
     */
	public function protocolSnmptcpIpaliasEnable(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasEnableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/enable/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmptcpIpaliasEnable200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Check individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasIsenabledRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasIsenabledResponse
     */
	public function protocolSnmptcpIpaliasIsenabled(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasIsenabledRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasIsenabledResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/isenabled/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasIsenabledRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasIsenabledResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmptcpIpaliasIsenabled200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List all IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasListResponse
     */
	public function protocolSnmptcpIpaliasList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpIpaliasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ipAliases = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IPAlias>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's SNMPTCP configuration
     * 
     * Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetConfigResponse
     */
	public function protocolSnmptcpSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmptcpSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's SNMPTCP traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetTraceResponse
     */
	public function protocolSnmptcpSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmptcpSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmptcpSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}