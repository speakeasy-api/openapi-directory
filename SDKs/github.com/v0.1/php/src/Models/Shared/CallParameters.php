<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
/**
 * CallParameters - POST parameters
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CallParameters
{
    /**
     * Fully qualified URL which will provide the RestXML once the call connects
     * 
     * @var string $answerUrl
     */
	#[SpeakeasyMetadata('form:name=AnswerUrl')]
    public string $answerUrl;
    
    /**
     * When set to `true`, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension)
     * 
     * @var ?bool $asyncAMD
     */
	#[SpeakeasyMetadata('form:name=AsyncAMD')]
    public ?bool $asyncAMD = null;
    
    /**
     * Fully qualified URL to which the answering machine detection result will be sent. `AnsweredBy` and `MachineDetectionDuration` are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension)
     * 
     * @var ?string $asyncAmdStatusCallback
     */
	#[SpeakeasyMetadata('form:name=AsyncAmdStatusCallback')]
    public ?string $asyncAmdStatusCallback = null;
    
    /**
     * HTTP method to be used when answering machine detection is completed (an Eqivo extension)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CallParametersAsyncAmdStatusCallbackMethodEnum $asyncAmdStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=AsyncAmdStatusCallbackMethod')]
    public ?CallParametersAsyncAmdStatusCallbackMethodEnum $asyncAmdStatusCallbackMethod = null;
    
    /**
     * Caller Name to be set for the call
     * 
     * @var ?string $callerName
     */
	#[SpeakeasyMetadata('form:name=CallerName')]
    public ?string $callerName = null;
    
    /**
     * Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
     * 
     * @var ?string $coreUUID
     */
	#[SpeakeasyMetadata('form:name=CoreUUID')]
    public ?string $coreUUID = null;
    
    /**
     * Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
     * 
     * @var ?string $extraDialString
     */
	#[SpeakeasyMetadata('form:name=ExtraDialString')]
    public ?string $extraDialString = null;
    
    /**
     * Phone number to be used as Caller ID
     * 
     * @var string $from
     */
	#[SpeakeasyMetadata('form:name=From')]
    public string $from;
    
    /**
     * List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
     * 
     * @var ?string $gatewayCodecs
     */
	#[SpeakeasyMetadata('form:name=GatewayCodecs')]
    public ?string $gatewayCodecs = null;
    
    /**
     * List of maximum retry counts for each gateway
     * 
     * @var ?string $gatewayRetries
     */
	#[SpeakeasyMetadata('form:name=GatewayRetries')]
    public ?string $gatewayRetries = null;
    
    /**
     * List of maximum timeout amounts (in seconds) for each gateway
     * 
     * @var ?string $gatewayTimeouts
     */
	#[SpeakeasyMetadata('form:name=GatewayTimeouts')]
    public ?string $gatewayTimeouts = null;
    
    /**
     * Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
     * 
     * @var string $gateways
     */
	#[SpeakeasyMetadata('form:name=Gateways')]
    public string $gateways;
    
    /**
     * Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
     * 
     * @var ?int $hangupOnRing
     */
	#[SpeakeasyMetadata('form:name=HangupOnRing')]
    public ?int $hangupOnRing = null;
    
    /**
     * Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
     * 
     * @var ?string $hangupUrl
     */
	#[SpeakeasyMetadata('form:name=HangupUrl')]
    public ?string $hangupUrl = null;
    
    /**
     * Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CallParametersMachineDetectionEnum $machineDetection
     */
	#[SpeakeasyMetadata('form:name=MachineDetection')]
    public ?CallParametersMachineDetectionEnum $machineDetection = null;
    
    /**
     * Initial silence threshold (in milliseconds, an Eqivo extension)
     * 
     * @var ?int $machineDetectionSilenceTimeout
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSilenceTimeout')]
    public ?int $machineDetectionSilenceTimeout = null;
    
    /**
     * Silence threshold (in milliseconds, an Eqivo extension)
     * 
     * @var ?int $machineDetectionSpeechEndThreshold
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSpeechEndThreshold')]
    public ?int $machineDetectionSpeechEndThreshold = null;
    
    /**
     * Speech activity/utterance threshold (in milliseconds, an Eqivo extension)
     * 
     * @var ?int $machineDetectionSpeechThreshold
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSpeechThreshold')]
    public ?int $machineDetectionSpeechThreshold = null;
    
    /**
     * Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension)
     * 
     * @var ?int $machineDetectionTimeout
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionTimeout')]
    public ?int $machineDetectionTimeout = null;
    
    /**
     * Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
     * 
     * @var ?string $ringUrl
     */
	#[SpeakeasyMetadata('form:name=RingUrl')]
    public ?string $ringUrl = null;
    
    /**
     * DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
     * 
     * @var ?string $sendDigits
     */
	#[SpeakeasyMetadata('form:name=SendDigits')]
    public ?string $sendDigits = null;
    
    /**
     * When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
     * 
     * @var ?bool $sendOnPreanswer
     */
	#[SpeakeasyMetadata('form:name=SendOnPreanswer')]
    public ?bool $sendOnPreanswer = null;
    
    /**
     * Schedules the call's hangup at a given time offset (in seconds) after the call is answered
     * 
     * @var ?int $timeLimit
     */
	#[SpeakeasyMetadata('form:name=TimeLimit')]
    public ?int $timeLimit = null;
    
    /**
     * Phone number to be called
     * 
     * @var string $to
     */
	#[SpeakeasyMetadata('form:name=To')]
    public string $to;
    
	public function __construct()
	{
		$this->answerUrl = "";
		$this->asyncAMD = null;
		$this->asyncAmdStatusCallback = null;
		$this->asyncAmdStatusCallbackMethod = null;
		$this->callerName = null;
		$this->coreUUID = null;
		$this->extraDialString = null;
		$this->from = "";
		$this->gatewayCodecs = null;
		$this->gatewayRetries = null;
		$this->gatewayTimeouts = null;
		$this->gateways = "";
		$this->hangupOnRing = null;
		$this->hangupUrl = null;
		$this->machineDetection = null;
		$this->machineDetectionSilenceTimeout = null;
		$this->machineDetectionSpeechEndThreshold = null;
		$this->machineDetectionSpeechThreshold = null;
		$this->machineDetectionTimeout = null;
		$this->ringUrl = null;
		$this->sendDigits = null;
		$this->sendOnPreanswer = null;
		$this->timeLimit = null;
		$this->to = "";
	}
}
