/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogColumn - The catalog column configuration
 */
public class CatalogColumn {
    /**
     * The catalog column name
     */
    @JsonProperty("catalogColumnName")
    public String catalogColumnName;

    public CatalogColumn withCatalogColumnName(String catalogColumnName) {
        this.catalogColumnName = catalogColumnName;
        return this;
    }
    
    /**
     * Indicates the configuration applied on the column (catalog or custom) during the importation process.
     */
    @JsonProperty("configuration")
    public ColumnConfiguration configuration;

    public CatalogColumn withConfiguration(ColumnConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }
    
    /**
     * Describe how you want to manage the duplication of the product value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplicateProductValueConfiguration")
    public DuplicateProductValueConfiguration duplicateProductValueConfiguration;

    public CatalogColumn withDuplicateProductValueConfiguration(DuplicateProductValueConfiguration duplicateProductValueConfiguration) {
        this.duplicateProductValueConfiguration = duplicateProductValueConfiguration;
        return this;
    }
    
    /**
     * The catalog column identifier
     */
    @JsonProperty("id")
    public String id;

    public CatalogColumn withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * IF true, the product values of this column will be not taken in account during the importation process
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignored")
    public Boolean ignored;

    public CatalogColumn withIgnored(Boolean ignored) {
        this.ignored = ignored;
        return this;
    }
    
    @JsonProperty("links")
    public CatalogColumnLinks links;

    public CatalogColumn withLinks(CatalogColumnLinks links) {
        this.links = links;
        return this;
    }
    
    /**
     * Column named by the user
     */
    @JsonProperty("userColumName")
    public String userColumName;

    public CatalogColumn withUserColumName(String userColumName) {
        this.userColumName = userColumName;
        return this;
    }
    
    public CatalogColumn(@JsonProperty("catalogColumnName") String catalogColumnName, @JsonProperty("configuration") ColumnConfiguration configuration, @JsonProperty("id") String id, @JsonProperty("links") CatalogColumnLinks links, @JsonProperty("userColumName") String userColumName) {
        this.catalogColumnName = catalogColumnName;
        this.configuration = configuration;
        this.id = id;
        this.links = links;
        this.userColumName = userColumName;
  }
}
