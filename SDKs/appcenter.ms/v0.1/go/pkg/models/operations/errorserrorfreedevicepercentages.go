// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsErrorFreeDevicePercentagesSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ErrorsErrorFreeDevicePercentagesErrorTypeEnum - Type of error (handled vs unhandled), excluding All
type ErrorsErrorFreeDevicePercentagesErrorTypeEnum string

const (
	ErrorsErrorFreeDevicePercentagesErrorTypeEnumUnhandledError ErrorsErrorFreeDevicePercentagesErrorTypeEnum = "unhandledError"
	ErrorsErrorFreeDevicePercentagesErrorTypeEnumHandledError   ErrorsErrorFreeDevicePercentagesErrorTypeEnum = "handledError"
)

func (e ErrorsErrorFreeDevicePercentagesErrorTypeEnum) ToPointer() *ErrorsErrorFreeDevicePercentagesErrorTypeEnum {
	return &e
}

func (e *ErrorsErrorFreeDevicePercentagesErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unhandledError":
		fallthrough
	case "handledError":
		*e = ErrorsErrorFreeDevicePercentagesErrorTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorFreeDevicePercentagesErrorTypeEnum: %v", v)
	}
}

type ErrorsErrorFreeDevicePercentagesRequest struct {
	// app build
	AppBuild *string `queryParam:"style=form,explode=true,name=app_build"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// Type of error (handled vs unhandled), excluding All
	ErrorType *ErrorsErrorFreeDevicePercentagesErrorTypeEnum `queryParam:"style=form,explode=true,name=errorType"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format
	Start    time.Time `queryParam:"style=form,explode=true,name=start"`
	Versions []string  `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

type ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONError struct {
	Code    ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                              `json:"message"`
}

// ErrorsErrorFreeDevicePercentagesDefaultApplicationJSON - Error code with reason
type ErrorsErrorFreeDevicePercentagesDefaultApplicationJSON struct {
	Error ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONError `json:"error"`
}

type ErrorsErrorFreeDevicePercentages200ApplicationJSONDailyPercentages struct {
	// the ISO 8601 datetime
	Datetime *string `json:"datetime,omitempty"`
	// percentage of the object
	Percentage *float64 `json:"percentage,omitempty"`
}

// ErrorsErrorFreeDevicePercentages200ApplicationJSON - Percentage of error-free devices by day in the time range and overall percentage of the entire time range.
type ErrorsErrorFreeDevicePercentages200ApplicationJSON struct {
	// Average percentage
	AveragePercentage *float64 `json:"averagePercentage,omitempty"`
	// The error-free percentage per day.
	DailyPercentages []ErrorsErrorFreeDevicePercentages200ApplicationJSONDailyPercentages `json:"dailyPercentages,omitempty"`
}

type ErrorsErrorFreeDevicePercentagesResponse struct {
	ContentType string
	// Percentage of error-free devices by day in the time range and overall percentage of the entire time range.
	ErrorsErrorFreeDevicePercentages200ApplicationJSONObject *ErrorsErrorFreeDevicePercentages200ApplicationJSON
	// Error code with reason
	ErrorsErrorFreeDevicePercentagesDefaultApplicationJSONObject *ErrorsErrorFreeDevicePercentagesDefaultApplicationJSON
	StatusCode                                                   int
	RawResponse                                                  *http.Response
}
