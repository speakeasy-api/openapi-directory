// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateIdentityProviderConfigRequestBodyOidc - An object representing an OpenID Connect (OIDC) configuration. Before associating an OIDC identity provider to your cluster, review the considerations in <a href="https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html">Authenticating users for your cluster from an OpenID Connect identity provider</a> in the <i>Amazon EKS User Guide</i>.
type AssociateIdentityProviderConfigRequestBodyOidc struct {
	ClientID                   *string           `json:"clientId,omitempty"`
	GroupsClaim                *string           `json:"groupsClaim,omitempty"`
	GroupsPrefix               *string           `json:"groupsPrefix,omitempty"`
	IdentityProviderConfigName *string           `json:"identityProviderConfigName,omitempty"`
	IssuerURL                  *string           `json:"issuerUrl,omitempty"`
	RequiredClaims             map[string]string `json:"requiredClaims,omitempty"`
	UsernameClaim              *string           `json:"usernameClaim,omitempty"`
	UsernamePrefix             *string           `json:"usernamePrefix,omitempty"`
}

type AssociateIdentityProviderConfigRequestBody struct {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
	ClientRequestToken *string `json:"clientRequestToken,omitempty"`
	// An object representing an OpenID Connect (OIDC) configuration. Before associating an OIDC identity provider to your cluster, review the considerations in <a href="https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html">Authenticating users for your cluster from an OpenID Connect identity provider</a> in the <i>Amazon EKS User Guide</i>.
	Oidc AssociateIdentityProviderConfigRequestBodyOidc `json:"oidc"`
	// The metadata to apply to the configuration to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.
	Tags map[string]string `json:"tags,omitempty"`
}

type AssociateIdentityProviderConfigRequest struct {
	RequestBody       AssociateIdentityProviderConfigRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The name of the cluster to associate the configuration to.
	Name string `pathParam:"style=simple,explode=false,name=name"`
}

type AssociateIdentityProviderConfigResponse struct {
	// Success
	AssociateIdentityProviderConfigResponse *shared.AssociateIdentityProviderConfigResponse
	// ClientException
	ClientException interface{}
	ContentType     string
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ServerException
	ServerException interface{}
}
