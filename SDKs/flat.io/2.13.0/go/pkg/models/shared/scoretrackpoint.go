// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScoreTrackPointTypeEnum - The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`
type ScoreTrackPointTypeEnum string

const (
	ScoreTrackPointTypeEnumMeasure ScoreTrackPointTypeEnum = "measure"
	ScoreTrackPointTypeEnumEnd     ScoreTrackPointTypeEnum = "end"
)

func (e ScoreTrackPointTypeEnum) ToPointer() *ScoreTrackPointTypeEnum {
	return &e
}

func (e *ScoreTrackPointTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "measure":
		fallthrough
	case "end":
		*e = ScoreTrackPointTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreTrackPointTypeEnum: %v", v)
	}
}

// ScoreTrackPoint - A track synchronization point
type ScoreTrackPoint struct {
	// The measure unique identifier
	MeasureUUID *string `json:"measureUuid,omitempty"`
	// The corresponding time in seconds
	Time float64 `json:"time"`
	// The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`
	Type ScoreTrackPointTypeEnum `json:"type"`
}
