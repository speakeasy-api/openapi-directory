"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PlacementGroups:
    r"""Placement groups are used to influence the location of interdependent virtual servers in our data centers. The distribution of the different instances within a group is based on a pattern specified in the type. By enforcing certain rules on the placement of instances within our infrastructure, availability can be influenced in a way that fits your needs best.
    
    In `spread` placement groups, all virtual servers will run on different physical servers. This decreases the probability that some instances might fail together.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_placement_groups_id_(self, request: operations.DeletePlacementGroupsIDRequest) -> operations.DeletePlacementGroupsIDResponse:
        r"""Delete a PlacementGroup
        Deletes a PlacementGroup.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePlacementGroupsIDRequest, base_url, '/placement_groups/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePlacementGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_placement_groups(self, request: operations.GetPlacementGroupsRequest) -> operations.GetPlacementGroupsResponse:
        r"""Get all PlacementGroups
        Returns all PlacementGroup objects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/placement_groups'
        
        query_params = utils.get_query_params(operations.GetPlacementGroupsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlacementGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPlacementGroupsPlacementGroupsResponse])
                res.placement_groups_response = out

        return res

    def get_placement_groups_id_(self, request: operations.GetPlacementGroupsIDRequest) -> operations.GetPlacementGroupsIDResponse:
        r"""Get a PlacementGroup
        Gets a specific PlacementGroup object.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPlacementGroupsIDRequest, base_url, '/placement_groups/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlacementGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPlacementGroupsIDPlacementGroupResponse])
                res.placement_group_response = out

        return res

    def post_placement_groups(self, request: operations.PostPlacementGroupsCreatePlacementGroupRequest) -> operations.PostPlacementGroupsResponse:
        r"""Create a PlacementGroup
        Creates a new PlacementGroup.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/placement_groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPlacementGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPlacementGroupsCreatePlacementGroupResponse])
                res.create_placement_group_response = out

        return res

    def put_placement_groups_id_(self, request: operations.PutPlacementGroupsIDRequest) -> operations.PutPlacementGroupsIDResponse:
        r"""Update a PlacementGroup
        Updates the PlacementGroup properties.
        
        Note that when updating labels, the PlacementGroup’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
        
        Note: if the PlacementGroup object changes during the request, the response will be a “conflict” error.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPlacementGroupsIDRequest, base_url, '/placement_groups/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPlacementGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutPlacementGroupsIDPlacementGroupResponse])
                res.placement_group_response = out

        return res

    