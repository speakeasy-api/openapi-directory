<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GenericOauth2ModuleConfig - Settings to authenticate users using a generic OAuth2 provider
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GenericOauth2ModuleConfig
{
    /**
     * Field name to get access token
     * 
     * @var string $accessTokenField
     */
	#[\JMS\Serializer\Annotation\SerializedName('accessTokenField')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accessTokenField;
    
    /**
     * OAuth authorize URL
     * 
     * @var string $authorizeUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizeUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $authorizeUrl;
    
    /**
     * Otoroshi callback URL
     * 
     * @var string $callbackUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('callbackUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $callbackUrl;
    
    /**
     * The claims of the token
     * 
     * @var ?string $claims
     */
	#[\JMS\Serializer\Annotation\SerializedName('claims')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $claims = null;
    
    /**
     * OAuth Client id
     * 
     * @var string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientId;
    
    /**
     * OAuth Client secret
     * 
     * @var string $clientSecret
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientSecret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientSecret;
    
    /**
     * Description of the config
     * 
     * @var string $desc
     */
	#[\JMS\Serializer\Annotation\SerializedName('desc')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $desc;
    
    /**
     * Field name to get email from user profile
     * 
     * @var string $emailField
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailField')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $emailField;
    
    /**
     * Unique id of the config
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * Algo. settings to verify JWT token
     * 
     * @var mixed $jwtVerifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('jwtVerifier')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $jwtVerifier = null;
    
    /**
     * OAuth login URL
     * 
     * @var string $loginUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('loginUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $loginUrl;
    
    /**
     * OAuth logout URL
     * 
     * @var string $logoutUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('logoutUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $logoutUrl;
    
    /**
     * Name of the config
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Field name to get name from user profile
     * 
     * @var string $nameField
     */
	#[\JMS\Serializer\Annotation\SerializedName('nameField')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nameField;
    
    /**
     * URL of the OIDC config. file
     * 
     * @var ?string $oidConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('oidConfig')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oidConfig = null;
    
    /**
     * Field name to get otoroshi metadata from. You can specify sub fields using | as separator
     * 
     * @var string $otoroshiDataField
     */
	#[\JMS\Serializer\Annotation\SerializedName('otoroshiDataField')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $otoroshiDataField;
    
    /**
     * The user profile will be read from the JWT token in id_token
     * 
     * @var ?bool $readProfileFromToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('readProfileFromToken')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $readProfileFromToken = null;
    
    /**
     * The scope of the token
     * 
     * @var ?string $scope
     */
	#[\JMS\Serializer\Annotation\SerializedName('scope')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $scope = null;
    
    /**
     * Max age of the session
     * 
     * @var int $sessionMaxAge
     */
	#[\JMS\Serializer\Annotation\SerializedName('sessionMaxAge')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $sessionMaxAge;
    
    /**
     * OAuth token URL
     * 
     * @var string $tokenUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('tokenUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $tokenUrl;
    
    /**
     * Type of settings. value is oauth2
     * 
     * @var string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $type;
    
    /**
     * Use for redirection to actual service
     * 
     * @var ?bool $useCookies
     */
	#[\JMS\Serializer\Annotation\SerializedName('useCookies')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useCookies = null;
    
    /**
     * Use JSON or URL Form Encoded as payload with the OAuth provider
     * 
     * @var ?bool $useJson
     */
	#[\JMS\Serializer\Annotation\SerializedName('useJson')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useJson = null;
    
    /**
     * OAuth userinfo to get user profile
     * 
     * @var string $userInfoUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('userInfoUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $userInfoUrl;
    
	public function __construct()
	{
		$this->accessTokenField = "";
		$this->authorizeUrl = "";
		$this->callbackUrl = "";
		$this->claims = null;
		$this->clientId = "";
		$this->clientSecret = "";
		$this->desc = "";
		$this->emailField = "";
		$this->id = "";
		$this->jwtVerifier = null;
		$this->loginUrl = "";
		$this->logoutUrl = "";
		$this->name = "";
		$this->nameField = "";
		$this->oidConfig = null;
		$this->otoroshiDataField = "";
		$this->readProfileFromToken = null;
		$this->scope = null;
		$this->sessionMaxAge = 0;
		$this->tokenUrl = "";
		$this->type = "";
		$this->useCookies = null;
		$this->useJson = null;
		$this->userInfoUrl = "";
	}
}
