<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootLegalHold 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Apply a Legal Hold
     * 
     * Places a snapshot on legal hold by specifying the hold requirements.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApplyLegalHoldDefinition $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ApplyLegalHoldResponse
     */
	public function applyLegalHold(
        \OpenAPI\OpenAPI\Models\Shared\ApplyLegalHoldDefinition $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ApplyLegalHoldResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legal_hold/snapshot');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApplyLegalHoldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legalHoldSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegalHoldSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Dissolve a collection of snapshots of specified data source from Legal Hold
     * 
     * Dissolve a collection of snapshots of specified data source from Legal Hold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DissolveLegalHoldSnapshotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DissolveLegalHoldSnapshotsResponse
     */
	public function dissolveLegalHoldSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\DissolveLegalHoldSnapshotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DissolveLegalHoldSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legal_hold/object/{id}/dissolve', \OpenAPI\OpenAPI\Models\Operations\DissolveLegalHoldSnapshotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dissolveLegalHoldDefinition", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DissolveLegalHoldSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dissolveLegalHoldResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DissolveLegalHoldResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get objects part of Legal Hold
     * 
     * Returns the object details for object with snapshots under legal hold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLegalHoldObjectsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLegalHoldObjectsResponse
     */
	public function getLegalHoldObjects(
        \OpenAPI\OpenAPI\Models\Operations\GetLegalHoldObjectsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLegalHoldObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legal_hold/object');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLegalHoldObjectsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLegalHoldObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->objectHoldSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ObjectHoldSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get snasphots held under legal hold
     * 
     * Get summary for snapshots under legal hold. If object_id is passed, return summary information only for snapshots of the object under legal hold else return summary for all snapshots under legal hold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryLegalHoldRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryLegalHoldResponse
     */
	public function queryLegalHold(
        \OpenAPI\OpenAPI\Models\Operations\QueryLegalHoldRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryLegalHoldResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/legal_hold/snapshot');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryLegalHoldRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryLegalHoldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legalHoldSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegalHoldSummaryListResponse', 'json');
            }
        }

        return $response;
    }
}