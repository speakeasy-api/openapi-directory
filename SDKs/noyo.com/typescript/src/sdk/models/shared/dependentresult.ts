/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Type of email address
 */
export enum DependentResultPersonContactEmailAddressTypeEnum {
  Home = "home",
  Work = "work",
}

/**
 * Preferred method of contact for the person
 */
export enum DependentResultPersonContactPreferredMethodEnum {
  Email = "email",
  HomePhone = "home-phone",
  Mail = "mail",
  Other = "other",
  WorkPhone = "work-phone",
}

/**
 * Contact information for the person
 */
export class DependentResultPersonContact extends SpeakeasyBase {
  /**
   * Email address of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email_address" })
  emailAddress?: string;

  /**
   * Type of email address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email_address_type" })
  emailAddressType?: DependentResultPersonContactEmailAddressTypeEnum;

  /**
   * Home phone number in E.164 format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "home_phone" })
  homePhone?: string;

  /**
   * Preferred written or spoken language of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred_language" })
  preferredLanguage?: string;

  /**
   * Preferred method of contact for the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred_method" })
  preferredMethod?: DependentResultPersonContactPreferredMethodEnum;

  /**
   * True if the person can speak or communicate in English
   */
  @SpeakeasyMetadata()
  @Expose({ name: "speaks_english" })
  speaksEnglish?: boolean;

  /**
   * Work phone number in E.164 format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "work_phone" })
  workPhone?: string;
}

/**
 * Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable
 */
export enum DependentResultPersonDetailsAmericanIndianStateEnum {
  Ak = "AK",
  Al = "AL",
  Ar = "AR",
  As = "AS",
  Az = "AZ",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  Dc = "DC",
  De = "DE",
  Fl = "FL",
  Fm = "FM",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Ia = "IA",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Ma = "MA",
  Md = "MD",
  Me = "ME",
  Mh = "MH",
  Mi = "MI",
  Mn = "MN",
  Mo = "MO",
  Mp = "MP",
  Ms = "MS",
  Mt = "MT",
  Nc = "NC",
  Nd = "ND",
  Ne = "NE",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Nv = "NV",
  Ny = "NY",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Pw = "PW",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Um = "UM",
  Ut = "UT",
  Va = "VA",
  Vi = "VI",
  Vt = "VT",
  Wa = "WA",
  Wi = "WI",
  Wv = "WV",
  Wy = "WY",
}

/**
 * American Indian status details (if applicable)
 */
export class DependentResultPersonDetailsAmericanIndian extends SpeakeasyBase {
  /**
   * Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: DependentResultPersonDetailsAmericanIndianStateEnum;

  /**
   * Name of the federally-recognized American Indian or Alaska Native tribe, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tribe" })
  tribe?: string;
}

/**
 * Disability details (if applicable)
 */
export class DependentResultPersonDetailsDisability extends SpeakeasyBase {
  /**
   * True if the disability impacts the ability to communicate or read
   */
  @SpeakeasyMetadata()
  @Expose({ name: "communication" })
  communication?: boolean;

  /**
   * True if the member has a disability
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled?: boolean;

  /**
   * Description of the disability
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;
}

/**
 * Type of tobacco use
 */
export enum DependentResultPersonDetailsTobaccoTypesEnum {
  ChewingTobacco = "chewing-tobacco",
  Cigarettes = "cigarettes",
  Pipe = "pipe",
}

/**
 * Tobacco usage details (if applicable)
 */
export class DependentResultPersonDetailsTobacco extends SpeakeasyBase {
  /**
   * Duration of tobacco use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * Frequency of tobacco use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frequency" })
  frequency?: string;

  /**
   * List of types of tobacco use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "types" })
  types?: DependentResultPersonDetailsTobaccoTypesEnum[];

  /**
   * True if the person uses tobacco of any kind
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: boolean;
}

/**
 * Additional personal details of the person
 */
export class DependentResultPersonDetails extends SpeakeasyBase {
  /**
   * American Indian status details (if applicable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "american_indian" })
  @Type(() => DependentResultPersonDetailsAmericanIndian)
  americanIndian?: DependentResultPersonDetailsAmericanIndian;

  /**
   * Disability details (if applicable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disability" })
  @Type(() => DependentResultPersonDetailsDisability)
  disability?: DependentResultPersonDetailsDisability;

  /**
   * True if the person is in the military
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_military" })
  isMilitary?: boolean;

  /**
   * True if the person is a student
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_student" })
  isStudent?: boolean;

  /**
   * Tobacco usage details (if applicable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tobacco" })
  @Type(() => DependentResultPersonDetailsTobacco)
  tobacco?: DependentResultPersonDetailsTobacco;
}

/**
 * State postal code of the address
 */
export enum DependentResultPersonHomeAddressStateEnum {
  Ak = "AK",
  Al = "AL",
  Ar = "AR",
  As = "AS",
  Az = "AZ",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  Dc = "DC",
  De = "DE",
  Fl = "FL",
  Fm = "FM",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Ia = "IA",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Ma = "MA",
  Md = "MD",
  Me = "ME",
  Mh = "MH",
  Mi = "MI",
  Mn = "MN",
  Mo = "MO",
  Mp = "MP",
  Ms = "MS",
  Mt = "MT",
  Nc = "NC",
  Nd = "ND",
  Ne = "NE",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Nv = "NV",
  Ny = "NY",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Pw = "PW",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Um = "UM",
  Ut = "UT",
  Va = "VA",
  Vi = "VI",
  Vt = "VT",
  Wa = "WA",
  Wi = "WI",
  Wv = "WV",
  Wy = "WY",
}

/**
 * Home address of the person
 */
export class DependentResultPersonHomeAddress extends SpeakeasyBase {
  /**
   * City of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * County of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "county" })
  county?: string;

  /**
   * State postal code of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: DependentResultPersonHomeAddressStateEnum;

  /**
   * Line one of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "street_one" })
  streetOne: string;

  /**
   * Line two of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "street_two" })
  streetTwo?: string;

  /**
   * Zip code of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip_code" })
  zipCode: string;
}

/**
 * State postal code of the address
 */
export enum DependentResultPersonMailingAddressStateEnum {
  Ak = "AK",
  Al = "AL",
  Ar = "AR",
  As = "AS",
  Az = "AZ",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  Dc = "DC",
  De = "DE",
  Fl = "FL",
  Fm = "FM",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Ia = "IA",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Ma = "MA",
  Md = "MD",
  Me = "ME",
  Mh = "MH",
  Mi = "MI",
  Mn = "MN",
  Mo = "MO",
  Mp = "MP",
  Ms = "MS",
  Mt = "MT",
  Nc = "NC",
  Nd = "ND",
  Ne = "NE",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Nv = "NV",
  Ny = "NY",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Pw = "PW",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Um = "UM",
  Ut = "UT",
  Va = "VA",
  Vi = "VI",
  Vt = "VT",
  Wa = "WA",
  Wi = "WI",
  Wv = "WV",
  Wy = "WY",
}

/**
 * Mailing address of the person
 */
export class DependentResultPersonMailingAddress extends SpeakeasyBase {
  /**
   * City of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * County of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "county" })
  county?: string;

  /**
   * State postal code of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: DependentResultPersonMailingAddressStateEnum;

  /**
   * Line one of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "street_one" })
  streetOne: string;

  /**
   * Line two of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "street_two" })
  streetTwo?: string;

  /**
   * Zip code of the address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip_code" })
  zipCode: string;
}

/**
 * Marital status of the person
 */
export enum DependentResultPersonMaritalStatusEnum {
  Divorced = "divorced",
  DomesticPartner = "domestic-partner",
  LegallySeparated = "legally-separated",
  Married = "married",
  Single = "single",
  Widowed = "widowed",
}

/**
 * Sex of the person
 */
export enum DependentResultPersonSexEnum {
  F = "F",
  M = "M",
  U = "U",
  X = "X",
}

/**
 * Personal information for the dependent
 */
export class DependentResultPerson extends SpeakeasyBase {
  /**
   * Contact information for the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contact" })
  @Type(() => DependentResultPersonContact)
  contact?: DependentResultPersonContact;

  /**
   * ISO-8601 date string for the date of birth of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  /**
   * Additional personal details of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "details" })
  @Type(() => DependentResultPersonDetails)
  details?: DependentResultPersonDetails;

  /**
   * First name of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  /**
   * Home address of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "home_address" })
  @Type(() => DependentResultPersonHomeAddress)
  homeAddress?: DependentResultPersonHomeAddress;

  /**
   * Last name of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  /**
   * Mailing address of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mailing_address" })
  @Type(() => DependentResultPersonMailingAddress)
  mailingAddress?: DependentResultPersonMailingAddress;

  /**
   * Marital status of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marital_status" })
  maritalStatus?: DependentResultPersonMaritalStatusEnum;

  /**
   * Middle name of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "middle_name" })
  middleName?: string;

  /**
   * Sex of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sex" })
  sex: DependentResultPersonSexEnum;

  /**
   * Social Security Number of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssn" })
  ssn?: string;

  /**
   * Suffix of the person
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suffix" })
  suffix?: string;
}

/**
 * Relationship of the dependent to the employee
 */
export enum DependentResultRelationshipEnum {
  AdoptedChild = "adopted-child",
  Child = "child",
  CivilUnion = "civil-union",
  DomesticPartner = "domestic-partner",
  ExSpouse = "ex-spouse",
  FosterChild = "foster-child",
  Grandchild = "grandchild",
  LegalGuardianship = "legal-guardianship",
  Other = "other",
  Spouse = "spouse",
  StepChild = "step-child",
}

/**
 * Successful Response - Returns a single Dependent
 */
export class DependentResult extends SpeakeasyBase {
  /**
   * The date the record was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: number;

  /**
   * Unique identifier of the employee in Noyo
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employee_id" })
  employeeId: string;

  /**
   * Unique identifier of the record in Noyo
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The date the record was last updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified" })
  modified: number;

  /**
   * Personal information for the dependent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "person" })
  @Type(() => DependentResultPerson)
  person: DependentResultPerson;

  /**
   * Relationship of the dependent to the employee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relationship" })
  relationship: DependentResultRelationshipEnum;

  /**
   * Current version of the record
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version: string;
}
