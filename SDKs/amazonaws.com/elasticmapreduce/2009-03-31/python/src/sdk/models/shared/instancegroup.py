"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autoscalingpolicydescription as shared_autoscalingpolicydescription
from ..shared import configuration as shared_configuration
from ..shared import ebsblockdevice as shared_ebsblockdevice
from ..shared import instancegroupstatus as shared_instancegroupstatus
from ..shared import instancegrouptype_enum as shared_instancegrouptype_enum
from ..shared import markettype_enum as shared_markettype_enum
from ..shared import shrinkpolicy as shared_shrinkpolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceGroup:
    r"""This entity represents an instance group, which is a group of instances that have common purpose. For example, CORE instance group is used for HDFS."""
    
    auto_scaling_policy: Optional[shared_autoscalingpolicydescription.AutoScalingPolicyDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoScalingPolicy'), 'exclude': lambda f: f is None }})  
    bid_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BidPrice'), 'exclude': lambda f: f is None }})  
    configurations: Optional[list[shared_configuration.Configuration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Configurations'), 'exclude': lambda f: f is None }})  
    configurations_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationsVersion'), 'exclude': lambda f: f is None }})  
    custom_ami_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomAmiId'), 'exclude': lambda f: f is None }})  
    ebs_block_devices: Optional[list[shared_ebsblockdevice.EbsBlockDevice]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsBlockDevices'), 'exclude': lambda f: f is None }})  
    ebs_optimized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsOptimized'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    instance_group_type: Optional[shared_instancegrouptype_enum.InstanceGroupTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceGroupType'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    last_successfully_applied_configurations: Optional[list[shared_configuration.Configuration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastSuccessfullyAppliedConfigurations'), 'exclude': lambda f: f is None }})  
    last_successfully_applied_configurations_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastSuccessfullyAppliedConfigurationsVersion'), 'exclude': lambda f: f is None }})  
    market: Optional[shared_markettype_enum.MarketTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Market'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    requested_instance_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedInstanceCount'), 'exclude': lambda f: f is None }})  
    running_instance_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunningInstanceCount'), 'exclude': lambda f: f is None }})  
    shrink_policy: Optional[shared_shrinkpolicy.ShrinkPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShrinkPolicy'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_instancegroupstatus.InstanceGroupStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    