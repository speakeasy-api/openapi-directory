/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Services {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create a Service.
   */
  monitoringServicesCreate(
    req: operations.MonitoringServicesCreateRequest,
    security: operations.MonitoringServicesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MonitoringServicesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MonitoringServicesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/services",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "serviceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MonitoringServicesCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MonitoringServicesCreateResponse =
        new operations.MonitoringServicesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.service = utils.objectToClass(httpRes?.data, shared.Service);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Services for this Metrics Scope.
   */
  monitoringServicesList(
    req: operations.MonitoringServicesListRequest,
    security: operations.MonitoringServicesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MonitoringServicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MonitoringServicesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/services",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MonitoringServicesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MonitoringServicesListResponse =
        new operations.MonitoringServicesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listServicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListServicesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a ServiceLevelObjective for the given Service.
   */
  monitoringServicesServiceLevelObjectivesCreate(
    req: operations.MonitoringServicesServiceLevelObjectivesCreateRequest,
    security: operations.MonitoringServicesServiceLevelObjectivesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MonitoringServicesServiceLevelObjectivesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.MonitoringServicesServiceLevelObjectivesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/serviceLevelObjectives",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "serviceLevelObjective",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.MonitoringServicesServiceLevelObjectivesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MonitoringServicesServiceLevelObjectivesCreateResponse =
        new operations.MonitoringServicesServiceLevelObjectivesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLevelObjective = utils.objectToClass(
              httpRes?.data,
              shared.ServiceLevelObjective
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete the given ServiceLevelObjective.
   */
  monitoringServicesServiceLevelObjectivesDelete(
    req: operations.MonitoringServicesServiceLevelObjectivesDeleteRequest,
    security: operations.MonitoringServicesServiceLevelObjectivesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MonitoringServicesServiceLevelObjectivesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.MonitoringServicesServiceLevelObjectivesDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.MonitoringServicesServiceLevelObjectivesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MonitoringServicesServiceLevelObjectivesDeleteResponse =
        new operations.MonitoringServicesServiceLevelObjectivesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a ServiceLevelObjective by name.
   */
  monitoringServicesServiceLevelObjectivesGet(
    req: operations.MonitoringServicesServiceLevelObjectivesGetRequest,
    security: operations.MonitoringServicesServiceLevelObjectivesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MonitoringServicesServiceLevelObjectivesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MonitoringServicesServiceLevelObjectivesGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.MonitoringServicesServiceLevelObjectivesGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MonitoringServicesServiceLevelObjectivesGetResponse =
        new operations.MonitoringServicesServiceLevelObjectivesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLevelObjective = utils.objectToClass(
              httpRes?.data,
              shared.ServiceLevelObjective
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the ServiceLevelObjectives for the given Service.
   */
  monitoringServicesServiceLevelObjectivesList(
    req: operations.MonitoringServicesServiceLevelObjectivesListRequest,
    security: operations.MonitoringServicesServiceLevelObjectivesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MonitoringServicesServiceLevelObjectivesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MonitoringServicesServiceLevelObjectivesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/{parent}/serviceLevelObjectives",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.MonitoringServicesServiceLevelObjectivesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MonitoringServicesServiceLevelObjectivesListResponse =
        new operations.MonitoringServicesServiceLevelObjectivesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listServiceLevelObjectivesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListServiceLevelObjectivesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the given ServiceLevelObjective.
   */
  monitoringServicesServiceLevelObjectivesPatch(
    req: operations.MonitoringServicesServiceLevelObjectivesPatchRequest,
    security: operations.MonitoringServicesServiceLevelObjectivesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MonitoringServicesServiceLevelObjectivesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MonitoringServicesServiceLevelObjectivesPatchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "serviceLevelObjective",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.MonitoringServicesServiceLevelObjectivesPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MonitoringServicesServiceLevelObjectivesPatchResponse =
        new operations.MonitoringServicesServiceLevelObjectivesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceLevelObjective = utils.objectToClass(
              httpRes?.data,
              shared.ServiceLevelObjective
            );
          }
          break;
      }

      return res;
    });
  }
}
