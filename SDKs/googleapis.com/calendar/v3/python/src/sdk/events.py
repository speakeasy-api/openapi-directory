"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Events:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def calendar_events_delete(self, request: operations.CalendarEventsDeleteRequest, security: operations.CalendarEventsDeleteSecurity) -> operations.CalendarEventsDeleteResponse:
        r"""Deletes an event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsDeleteRequest, base_url, '/calendars/{calendarId}/events/{eventId}', request)
        
        query_params = utils.get_query_params(operations.CalendarEventsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def calendar_events_get(self, request: operations.CalendarEventsGetRequest, security: operations.CalendarEventsGetSecurity) -> operations.CalendarEventsGetResponse:
        r"""Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsGetRequest, base_url, '/calendars/{calendarId}/events/{eventId}', request)
        
        query_params = utils.get_query_params(operations.CalendarEventsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Event])
                res.event = out

        return res

    def calendar_events_import(self, request: operations.CalendarEventsImportRequest, security: operations.CalendarEventsImportSecurity) -> operations.CalendarEventsImportResponse:
        r"""Imports an event. This operation is used to add a private copy of an existing event to a calendar."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsImportRequest, base_url, '/calendars/{calendarId}/events/import', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarEventsImportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Event])
                res.event = out

        return res

    def calendar_events_insert(self, request: operations.CalendarEventsInsertRequest, security: operations.CalendarEventsInsertSecurity) -> operations.CalendarEventsInsertResponse:
        r"""Creates an event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsInsertRequest, base_url, '/calendars/{calendarId}/events', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarEventsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Event])
                res.event = out

        return res

    def calendar_events_instances(self, request: operations.CalendarEventsInstancesRequest, security: operations.CalendarEventsInstancesSecurity) -> operations.CalendarEventsInstancesResponse:
        r"""Returns instances of the specified recurring event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsInstancesRequest, base_url, '/calendars/{calendarId}/events/{eventId}/instances', request)
        
        query_params = utils.get_query_params(operations.CalendarEventsInstancesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Events])
                res.events = out

        return res

    def calendar_events_list(self, request: operations.CalendarEventsListRequest, security: operations.CalendarEventsListSecurity) -> operations.CalendarEventsListResponse:
        r"""Returns events on the specified calendar."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsListRequest, base_url, '/calendars/{calendarId}/events', request)
        
        query_params = utils.get_query_params(operations.CalendarEventsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Events])
                res.events = out

        return res

    def calendar_events_move(self, request: operations.CalendarEventsMoveRequest, security: operations.CalendarEventsMoveSecurity) -> operations.CalendarEventsMoveResponse:
        r"""Moves an event to another calendar, i.e. changes an event's organizer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsMoveRequest, base_url, '/calendars/{calendarId}/events/{eventId}/move', request)
        
        query_params = utils.get_query_params(operations.CalendarEventsMoveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsMoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Event])
                res.event = out

        return res

    def calendar_events_patch(self, request: operations.CalendarEventsPatchRequest, security: operations.CalendarEventsPatchSecurity) -> operations.CalendarEventsPatchResponse:
        r"""Updates an event. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsPatchRequest, base_url, '/calendars/{calendarId}/events/{eventId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarEventsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Event])
                res.event = out

        return res

    def calendar_events_quick_add(self, request: operations.CalendarEventsQuickAddRequest, security: operations.CalendarEventsQuickAddSecurity) -> operations.CalendarEventsQuickAddResponse:
        r"""Creates an event based on a simple text string."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsQuickAddRequest, base_url, '/calendars/{calendarId}/events/quickAdd', request)
        
        query_params = utils.get_query_params(operations.CalendarEventsQuickAddRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsQuickAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Event])
                res.event = out

        return res

    def calendar_events_update(self, request: operations.CalendarEventsUpdateRequest, security: operations.CalendarEventsUpdateSecurity) -> operations.CalendarEventsUpdateResponse:
        r"""Updates an event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsUpdateRequest, base_url, '/calendars/{calendarId}/events/{eventId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarEventsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Event])
                res.event = out

        return res

    def calendar_events_watch(self, request: operations.CalendarEventsWatchRequest, security: operations.CalendarEventsWatchSecurity) -> operations.CalendarEventsWatchResponse:
        r"""Watch for changes to Events resources."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarEventsWatchRequest, base_url, '/calendars/{calendarId}/events/watch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarEventsWatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarEventsWatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    