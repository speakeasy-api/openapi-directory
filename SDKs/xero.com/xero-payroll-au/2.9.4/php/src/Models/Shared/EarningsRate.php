<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class EarningsRate
{
    /**
     * See Accounts
     * 
     * @var ?string $accountCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('AccountCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountCode = null;
    
    /**
     * Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
     * 
     * @var ?bool $accrueLeave
     */
	#[\JMS\Serializer\Annotation\SerializedName('AccrueLeave')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $accrueLeave = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('AllowanceType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AllowanceTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AllowanceTypeEnum $allowanceType = null;
    
    /**
     * Optional Amount for FIXEDAMOUNT RateType EarningsRate
     * 
     * @var ?float $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('Amount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $amount = null;
    
    /**
     * Is the current record
     * 
     * @var ?bool $currentRecord
     */
	#[\JMS\Serializer\Annotation\SerializedName('CurrentRecord')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $currentRecord = null;
    
    /**
     * Xero identifier
     * 
     * @var ?string $earningsRateID
     */
	#[\JMS\Serializer\Annotation\SerializedName('EarningsRateID')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $earningsRateID = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('EarningsType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EarningsTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?EarningsTypeEnum $earningsType = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('EmploymentTerminationPaymentType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EmploymentTerminationPaymentTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?EmploymentTerminationPaymentTypeEnum $employmentTerminationPaymentType = null;
    
    /**
     * See the ATO website for details of which payments are exempt from SGC
     * 
     * @var ?bool $isExemptFromSuper
     */
	#[\JMS\Serializer\Annotation\SerializedName('IsExemptFromSuper')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isExemptFromSuper = null;
    
    /**
     * Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
     * 
     * @var ?bool $isExemptFromTax
     */
	#[\JMS\Serializer\Annotation\SerializedName('IsExemptFromTax')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isExemptFromTax = null;
    
    /**
     * Boolean to determine if the earnings rate is reportable or exempt from W1
     * 
     * @var ?bool $isReportableAsW1
     */
	#[\JMS\Serializer\Annotation\SerializedName('IsReportableAsW1')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isReportableAsW1 = null;
    
    /**
     * This is the multiplier used to calculate the rate per unit, based on the employeeâ€™s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
     * 
     * @var ?float $multiplier
     */
	#[\JMS\Serializer\Annotation\SerializedName('Multiplier')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $multiplier = null;
    
    /**
     * Name of the earnings rate (max length = 100)
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
     * 
     * @var ?string $ratePerUnit
     */
	#[\JMS\Serializer\Annotation\SerializedName('RatePerUnit')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ratePerUnit = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('RateType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\RateTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RateTypeEnum $rateType = null;
    
    /**
     * Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT
     * 
     * @var ?string $typeOfUnits
     */
	#[\JMS\Serializer\Annotation\SerializedName('TypeOfUnits')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $typeOfUnits = null;
    
    /**
     * Last modified timestamp
     * 
     * @var ?string $updatedDateUTC
     */
	#[\JMS\Serializer\Annotation\SerializedName('UpdatedDateUTC')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updatedDateUTC = null;
    
	public function __construct()
	{
		$this->accountCode = null;
		$this->accrueLeave = null;
		$this->allowanceType = null;
		$this->amount = null;
		$this->currentRecord = null;
		$this->earningsRateID = null;
		$this->earningsType = null;
		$this->employmentTerminationPaymentType = null;
		$this->isExemptFromSuper = null;
		$this->isExemptFromTax = null;
		$this->isReportableAsW1 = null;
		$this->multiplier = null;
		$this->name = null;
		$this->ratePerUnit = null;
		$this->rateType = null;
		$this->typeOfUnits = null;
		$this->updatedDateUTC = null;
	}
}
