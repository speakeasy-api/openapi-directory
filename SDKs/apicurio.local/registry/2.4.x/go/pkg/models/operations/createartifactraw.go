// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateArtifactRawXRegistryHashAlgorithmEnum - The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
type CreateArtifactRawXRegistryHashAlgorithmEnum string

const (
	CreateArtifactRawXRegistryHashAlgorithmEnumSha256 CreateArtifactRawXRegistryHashAlgorithmEnum = "SHA256"
	CreateArtifactRawXRegistryHashAlgorithmEnumMd5    CreateArtifactRawXRegistryHashAlgorithmEnum = "MD5"
)

func (e CreateArtifactRawXRegistryHashAlgorithmEnum) ToPointer() *CreateArtifactRawXRegistryHashAlgorithmEnum {
	return &e
}

func (e *CreateArtifactRawXRegistryHashAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SHA256":
		fallthrough
	case "MD5":
		*e = CreateArtifactRawXRegistryHashAlgorithmEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateArtifactRawXRegistryHashAlgorithmEnum: %v", v)
	}
}

type CreateArtifactRawRequest struct {
	// The content of the artifact being created. This is often, but not always, JSON data
	// representing one of the supported artifact types:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	//
	RequestBody []byte `request:"mediaType=*/*"`
	// A client-provided, globally unique identifier for the new artifact.
	XRegistryArtifactID *string `header:"style=simple,explode=false,name=X-Registry-ArtifactId"`
	// Specifies the type of the artifact being added. Possible values include:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *string `header:"style=simple,explode=false,name=X-Registry-ArtifactType"`
	// Specifies the (optional) hash of the artifact to be verified.
	XRegistryContentHash *string `header:"style=simple,explode=false,name=X-Registry-Content-Hash"`
	// Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
	XRegistryDescription *string `header:"style=simple,explode=false,name=X-Registry-Description"`
	// Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
	XRegistryDescriptionEncoded *string `header:"style=simple,explode=false,name=X-Registry-Description-Encoded"`
	// The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
	XRegistryHashAlgorithm *CreateArtifactRawXRegistryHashAlgorithmEnum `header:"style=simple,explode=false,name=X-Registry-Hash-Algorithm"`
	// Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
	XRegistryName *string `header:"style=simple,explode=false,name=X-Registry-Name"`
	// Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
	XRegistryNameEncoded *string `header:"style=simple,explode=false,name=X-Registry-Name-Encoded"`
	// Specifies the version number of this initial version of the artifact content.  This would typically
	// be a simple integer or a SemVer value.  If not provided, the server will assign a version number
	// automatically (starting with version `1`).
	XRegistryVersion *string `header:"style=simple,explode=false,name=X-Registry-Version"`
	// Used only when the `ifExists` query parameter is set to `RETURN_OR_UPDATE`, this parameter can be set to `true` to indicate that the server should "canonicalize" the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
	Canonical *bool `queryParam:"style=form,explode=true,name=canonical"`
	// The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
	GroupID string `pathParam:"style=simple,explode=false,name=groupId"`
	// Set this option to instruct the server on what to do if the artifact already exists.
	IfExists *shared.IfExistsEnum `queryParam:"style=form,explode=true,name=ifExists"`
}

type CreateArtifactRawResponse struct {
	// Artifact was successfully created.
	ArtifactMetaData *shared.ArtifactMetaData
	ContentType      string
	// Common response for all operations that can return a `400` error.
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Common response used when an input conflicts with existing data.
	RuleViolationError *shared.RuleViolationError
}
