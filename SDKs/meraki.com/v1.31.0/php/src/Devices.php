<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Devices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Blink the LEDs on a device
     * 
     * Blink the LEDs on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BlinkDeviceLedsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BlinkDeviceLedsResponse
     */
	public function blinkDeviceLeds(
        \OpenAPI\OpenAPI\Models\Operations\BlinkDeviceLedsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BlinkDeviceLedsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/blinkLeds', \OpenAPI\OpenAPI\Models\Operations\BlinkDeviceLedsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BlinkDeviceLedsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->blinkDeviceLeds202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Force check-in a set of devices
     * 
     * Force check-in a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
     */
	public function checkinNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/checkin', \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkinNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * 
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse
     */
	public function claimNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * 
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse
     */
	public function cloneOrganizationSwitchDevices(
        \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/switch/devices/clone', \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloneOrganizationSwitchDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enqueue a job to ping a target host from the device
     * 
     * Enqueue a job to ping a target host from the device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingResponse
     */
	public function createDeviceLiveToolsPing(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/liveTools/ping', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceLiveToolsPing201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPing201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enqueue a job to check connectivity status to the device
     * 
     * Enqueue a job to check connectivity status to the device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingDeviceResponse
     */
	public function createDeviceLiveToolsPingDevice(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/liveTools/pingDevice', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceLiveToolsPingDevice201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateDeviceLiveToolsPingDevice201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single device
     * 
     * Return a single device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse
     */
	public function getDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the SIM and APN configurations for a cellular device.
     * 
     * Return the SIM and APN configurations for a cellular device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsResponse
     */
	public function getDeviceCellularSims(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellular/sims', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCellularSims200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the clients of a device, up to a maximum of a month ago
     * 
     * List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsResponse
     */
	public function getDeviceClients(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/clients', \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceClientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceClients200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a ping job
     * 
     * Return a ping job. Latency unit in response is in milliseconds. Size is in bytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingResponse
     */
	public function getDeviceLiveToolsPing(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/liveTools/ping/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceLiveToolsPing200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPing200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a ping device job
     * 
     * Return a ping device job. Latency unit in response is in milliseconds. Size is in bytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingDeviceResponse
     */
	public function getDeviceLiveToolsPingDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/liveTools/pingDevice/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceLiveToolsPingDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceLiveToolsPingDevice200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List LLDP and CDP information for a device
     * 
     * List LLDP and CDP information for a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpResponse
     */
	public function getDeviceLldpCdp(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/lldpCdp', \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceLldpCdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceLldpCdp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     * 
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryResponse
     */
	public function getDeviceLossAndLatencyHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/lossAndLatencyHistory', \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceLossAndLatencyHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceLossAndLatencyHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the management interface settings for a device
     * 
     * Return the management interface settings for a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceResponse
     */
	public function getDeviceManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/managementInterface', \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices in a network
     * 
     * List the devices in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse
     */
	public function getNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client's daily cellular data usage history
     * 
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse
     */
	public function getNetworkSmDeviceCellularUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/cellularUsageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceCellularUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the certs on a device
     * 
     * List the certs on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse
     */
	public function getNetworkSmDeviceCerts(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/certs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceCerts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCerts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse
     */
	public function getNetworkSmDeviceConnectivity(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/connectivity', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceConnectivity200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivity200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse
     */
	public function getNetworkSmDeviceDesktopLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/desktopLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDesktopLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of commands sent to Systems Manager devices
     * 
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse
     */
	public function getNetworkSmDeviceDeviceCommandLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDeviceCommandLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the installed profiles associated with a device
     * 
     * Get the installed profiles associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse
     */
	public function getNetworkSmDeviceDeviceProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDeviceProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the network adapters of a device
     * 
     * List the network adapters of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse
     */
	public function getNetworkSmDeviceNetworkAdapters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/networkAdapters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceNetworkAdapters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdapters200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse
     */
	public function getNetworkSmDevicePerformanceHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/performanceHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDevicePerformanceHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the restrictions on a device
     * 
     * List the restrictions on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse
     */
	public function getNetworkSmDeviceRestrictions(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/restrictions', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceRestrictions200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the security centers on a device
     * 
     * List the security centers on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse
     */
	public function getNetworkSmDeviceSecurityCenters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/securityCenters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceSecurityCenters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCenters200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of softwares associated with a device
     * 
     * Get a list of softwares associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse
     */
	public function getNetworkSmDeviceSoftwares(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/softwares', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceSoftwares200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwares200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the saved SSID names on a device
     * 
     * List the saved SSID names on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse
     */
	public function getNetworkSmDeviceWlanLists(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/wlanLists', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceWlanLists200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanLists200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
     */
	public function getNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network, grouped by node
     * 
     * Aggregated connectivity info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse
     */
	public function getNetworkWirelessDevicesConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/devices/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDevicesConnectionStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStats200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network, grouped by node
     * 
     * Aggregated latency info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse
     */
	public function getNetworkWirelessDevicesLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/devices/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDevicesLatencyStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices in an organization
     * 
     * List the devices in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
     */
	public function getOrganizationDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the availability information for devices in an organization
     * 
     * List the availability information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse
     */
	public function getOrganizationDevicesAvailabilities(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/availabilities', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesAvailabilities200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesAvailabilities200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the power status information for devices in an organization
     * 
     * List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
     */
	public function getOrganizationDevicesPowerModulesStatusesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/powerModules/statuses/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the status of every Meraki device in the organization
     * 
     * List the status of every Meraki device in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
     */
	public function getOrganizationDevicesStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatuses200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an overview of current device statuses
     * 
     * Return an overview of current device statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
     */
	public function getOrganizationDevicesStatusesOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/statuses/overview', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesStatusesOverview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesStatusesOverview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the current uplink addresses for devices in an organization.
     * 
     * List the current uplink addresses for devices in an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse
     */
	public function getOrganizationDevicesUplinksAddressesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/uplinks/addresses/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse
     */
	public function getOrganizationDevicesUplinksLossAndLatency(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices/uplinksLossAndLatency', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevicesUplinksLossAndLatency200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesUplinksLossAndLatency200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single device from the inventory of an organization
     * 
     * Return a single device from the inventory of an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse
     */
	public function getOrganizationInventoryDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevice200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the device inventory for an organization
     * 
     * Return the device inventory for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse
     */
	public function getOrganizationInventoryDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/devices', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 devices sorted by data usage over given time range
     * 
     * Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse
     */
	public function getOrganizationSummaryTopDevicesByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/devices/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopDevicesByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return metrics for organization's top 10 device models sorted by data usage over given time range
     * 
     * Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse
     */
	public function getOrganizationSummaryTopDevicesModelsByUsage(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/summary/top/devices/models/byUsage', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSummaryTopDevicesModelsByUsage200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSummaryTopDevicesModelsByUsage200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Endpoint to see power status for wireless devices
     * 
     * Endpoint to see power status for wireless devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
     */
	public function getOrganizationWirelessDevicesEthernetStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/wireless/devices/ethernet/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lock a set of devices
     * 
     * Lock a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
     */
	public function lockNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/lock', \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lockNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add, delete, or update the tags of a set of devices
     * 
     * Add, delete, or update the tags of a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse
     */
	public function modifyNetworkSmDevicesTags(
        \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/modifyTags', \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->modifyNetworkSmDevicesTags200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTags200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move a set of devices to a new network
     * 
     * Move a set of devices to a new network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse
     */
	public function moveNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/move', \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reboot a device
     * 
     * Reboot a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RebootDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RebootDeviceResponse
     */
	public function rebootDevice(
        \OpenAPI\OpenAPI\Models\Operations\RebootDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RebootDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/reboot', \OpenAPI\OpenAPI\Models\Operations\RebootDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RebootDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rebootDevice202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh the details of a device
     * 
     * Refresh the details of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
     */
	public function refreshNetworkSmDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/refreshDetails', \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Remove a single device
     * 
     * Remove a single device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesResponse
     */
	public function removeNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/remove', \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Unenroll a device
     * 
     * Unenroll a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
     */
	public function unenrollNetworkSmDevice(
        \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/unenroll', \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unenrollNetworkSmDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the attributes of a device
     * 
     * Update the attributes of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse
     */
	public function updateDevice(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the SIM and APN configurations for a cellular device.
     * 
     * Updates the SIM and APN configurations for a cellular device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsResponse
     */
	public function updateDeviceCellularSims(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellular/sims', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCellularSims200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the management interface settings for a device
     * 
     * Update the management interface settings for a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceResponse
     */
	public function updateDeviceManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/managementInterface', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the fields of a device
     * 
     * Modify the fields of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse
     */
	public function updateNetworkSmDevicesFields(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/fields', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSmDevicesFields200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFields200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim a vMX into a network
     * 
     * Claim a vMX into a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimResponse
     */
	public function vmxNetworkDevicesClaim(
        \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/claim/vmx', \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vmxNetworkDevicesClaim200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Wipe a device
     * 
     * Wipe a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse
     */
	public function wipeNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/wipe', \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wipeNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}