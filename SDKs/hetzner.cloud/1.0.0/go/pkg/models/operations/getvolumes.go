// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetVolumesSortEnum - Can be used multiple times.
type GetVolumesSortEnum string

const (
	GetVolumesSortEnumID          GetVolumesSortEnum = "id"
	GetVolumesSortEnumIDAsc       GetVolumesSortEnum = "id:asc"
	GetVolumesSortEnumIDDesc      GetVolumesSortEnum = "id:desc"
	GetVolumesSortEnumName        GetVolumesSortEnum = "name"
	GetVolumesSortEnumNameAsc     GetVolumesSortEnum = "name:asc"
	GetVolumesSortEnumNameDesc    GetVolumesSortEnum = "name:desc"
	GetVolumesSortEnumCreated     GetVolumesSortEnum = "created"
	GetVolumesSortEnumCreatedAsc  GetVolumesSortEnum = "created:asc"
	GetVolumesSortEnumCreatedDesc GetVolumesSortEnum = "created:desc"
)

func (e *GetVolumesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "name":
		fallthrough
	case "name:asc":
		fallthrough
	case "name:desc":
		fallthrough
	case "created":
		fallthrough
	case "created:asc":
		fallthrough
	case "created:desc":
		*e = GetVolumesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVolumesSortEnum: %s", s)
	}
}

// GetVolumesStatusEnum - Can be used multiple times. The response will only contain Volumes matching the status.
type GetVolumesStatusEnum string

const (
	GetVolumesStatusEnumAvailable GetVolumesStatusEnum = "available"
	GetVolumesStatusEnumCreating  GetVolumesStatusEnum = "creating"
)

func (e *GetVolumesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "creating":
		*e = GetVolumesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVolumesStatusEnum: %s", s)
	}
}

type GetVolumesQueryParams struct {
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times.
	Sort *GetVolumesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times. The response will only contain Volumes matching the status.
	Status *GetVolumesStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type GetVolumesRequest struct {
	QueryParams GetVolumesQueryParams
}

type GetVolumes200ApplicationJSONMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetVolumes200ApplicationJSONMeta struct {
	Pagination GetVolumes200ApplicationJSONMetaPagination `json:"pagination"`
}

// GetVolumes200ApplicationJSONVolumesLocation - Location of the Volume. Volume can only be attached to Servers in the same Location.
type GetVolumes200ApplicationJSONVolumesLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// GetVolumes200ApplicationJSONVolumesProtection - Protection configuration for the Resource
type GetVolumes200ApplicationJSONVolumesProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// GetVolumes200ApplicationJSONVolumesStatusEnum - Current status of the Volume
type GetVolumes200ApplicationJSONVolumesStatusEnum string

const (
	GetVolumes200ApplicationJSONVolumesStatusEnumCreating  GetVolumes200ApplicationJSONVolumesStatusEnum = "creating"
	GetVolumes200ApplicationJSONVolumesStatusEnumAvailable GetVolumes200ApplicationJSONVolumesStatusEnum = "available"
)

func (e *GetVolumes200ApplicationJSONVolumesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "creating":
		fallthrough
	case "available":
		*e = GetVolumes200ApplicationJSONVolumesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVolumes200ApplicationJSONVolumesStatusEnum: %s", s)
	}
}

type GetVolumes200ApplicationJSONVolumes struct {
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Filesystem of the Volume if formatted on creation, null if not formatted on creation
	Format string `json:"format"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Device path on the file system for the Volume
	LinuxDevice string `json:"linux_device"`
	// Location of the Volume. Volume can only be attached to Servers in the same Location.
	Location GetVolumes200ApplicationJSONVolumesLocation `json:"location"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection GetVolumes200ApplicationJSONVolumesProtection `json:"protection"`
	// ID of the Server the Volume is attached to, null if it is not attached at all
	Server int64 `json:"server"`
	// Size in GB of the Volume
	Size float64 `json:"size"`
	// Current status of the Volume
	Status GetVolumes200ApplicationJSONVolumesStatusEnum `json:"status"`
}

// GetVolumes200ApplicationJSON - The `volumes` key contains a list of volumes
type GetVolumes200ApplicationJSON struct {
	Meta    *GetVolumes200ApplicationJSONMeta     `json:"meta,omitempty"`
	Volumes []GetVolumes200ApplicationJSONVolumes `json:"volumes"`
}

type GetVolumesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `volumes` key contains a list of volumes
	GetVolumes200ApplicationJSONObject *GetVolumes200ApplicationJSON
}
