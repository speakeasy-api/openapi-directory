// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDeprovisionPublicIpv4PoolCidrActionEnum
type POSTDeprovisionPublicIpv4PoolCidrActionEnum string

const (
	POSTDeprovisionPublicIpv4PoolCidrActionEnumDeprovisionPublicIpv4PoolCidr POSTDeprovisionPublicIpv4PoolCidrActionEnum = "DeprovisionPublicIpv4PoolCidr"
)

func (e POSTDeprovisionPublicIpv4PoolCidrActionEnum) ToPointer() *POSTDeprovisionPublicIpv4PoolCidrActionEnum {
	return &e
}

func (e *POSTDeprovisionPublicIpv4PoolCidrActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeprovisionPublicIpv4PoolCidr":
		*e = POSTDeprovisionPublicIpv4PoolCidrActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDeprovisionPublicIpv4PoolCidrActionEnum: %v", v)
	}
}

// POSTDeprovisionPublicIpv4PoolCidrVersionEnum
type POSTDeprovisionPublicIpv4PoolCidrVersionEnum string

const (
	POSTDeprovisionPublicIpv4PoolCidrVersionEnumTwoThousandAndSixteen1115 POSTDeprovisionPublicIpv4PoolCidrVersionEnum = "2016-11-15"
)

func (e POSTDeprovisionPublicIpv4PoolCidrVersionEnum) ToPointer() *POSTDeprovisionPublicIpv4PoolCidrVersionEnum {
	return &e
}

func (e *POSTDeprovisionPublicIpv4PoolCidrVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = POSTDeprovisionPublicIpv4PoolCidrVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDeprovisionPublicIpv4PoolCidrVersionEnum: %v", v)
	}
}

type POSTDeprovisionPublicIpv4PoolCidrRequest struct {
	Action            POSTDeprovisionPublicIpv4PoolCidrActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody       []byte                                       `request:"mediaType=text/xml"`
	Version           POSTDeprovisionPublicIpv4PoolCidrVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDeprovisionPublicIpv4PoolCidrResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
