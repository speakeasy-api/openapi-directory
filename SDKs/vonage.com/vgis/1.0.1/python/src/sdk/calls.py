"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Calls:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def call_answer(self, request: operations.CallAnswerRequest) -> operations.CallAnswerResponse:
        r"""Answer call (On supported devices)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CallAnswerRequest, base_url, '/self/calls/{id}/answer', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CallAnswerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Call])
                res.call = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def call_hold(self, request: operations.CallHoldRequest) -> operations.CallHoldResponse:
        r"""Put call on hold"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CallHoldRequest, base_url, '/self/calls/{id}/hold', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CallHoldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Call])
                res.call = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def call_transfer(self, request: operations.CallTransferRequest) -> operations.CallTransferResponse:
        r"""Transfer call"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CallTransferRequest, base_url, '/self/calls/{id}/transfer', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "call_transfer", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CallTransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Call])
                res.call = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def call_unold(self, request: operations.CallUnoldRequest) -> operations.CallUnoldResponse:
        r"""Unhold"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CallUnoldRequest, base_url, '/self/calls/{id}/hold', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CallUnoldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Call])
                res.call = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def call_vm_transfer(self, request: operations.CallVMTransferRequest) -> operations.CallVMTransferResponse:
        r"""Send call to voicemail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CallVMTransferRequest, base_url, '/self/calls/{id}/vmtransfer', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CallVMTransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Call])
                res.call = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def create_call(self, request: shared.CallCreate) -> operations.CreateCallResponse:
        r"""Place a call"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/self/calls'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Call]])
                res.calls = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def destroy_call(self, request: operations.DestroyCallRequest) -> operations.DestroyCallResponse:
        r"""End a call"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DestroyCallRequest, base_url, '/self/calls/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DestroyCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Call]])
                res.calls = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def get_calls_count(self, request: operations.GetCallsCountRequest) -> operations.GetCallsCountResponse:
        r"""Get calls count"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/self/calls/count'
        
        query_params = utils.get_query_params(operations.GetCallsCountRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCallsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsCount])
                res.events_count = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def get_roles(self, request: operations.GetRolesRequest) -> operations.GetRolesResponse:
        r"""Get a call"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRolesRequest, base_url, '/self/calls/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Call]])
                res.calls = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def list_calls(self, request: operations.ListCallsRequest) -> operations.ListCallsResponse:
        r"""List active calls
        Lists currently active calls
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/self/calls'
        
        query_params = utils.get_query_params(operations.ListCallsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCallsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Call]])
                res.calls = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    