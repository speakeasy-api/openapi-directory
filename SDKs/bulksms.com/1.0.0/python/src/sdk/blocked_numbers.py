"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BlockedNumbers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_blocked_numbers(self, request: operations.GetBlockedNumbersRequest, security: operations.GetBlockedNumbersSecurity) -> operations.GetBlockedNumbersResponse:
        r"""List blocked numbers"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/blocked-numbers'
        
        query_params = utils.get_query_params(operations.GetBlockedNumbersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBlockedNumbersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BlockedNumber])
                res.blocked_number = out

        return res

    def post_blocked_numbers(self, request: list[str], security: operations.PostBlockedNumbersSecurity) -> operations.PostBlockedNumbersResponse:
        r"""Create a blocked number
        Blocked numbers are phone numbers to which your account is not permitted to send messages.
        The numbers can be created via this API, by a recipient replying with a STOP message to one
        of your previous SENT messages, or by a BulkSMS administrator.
        
        Sending a message to a blocked number will result in the message being assigned a status of
        `FAILED.BLOCKED`. Messages sent to blocked numbers are billed to your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/blocked-numbers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBlockedNumbersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    