"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceConfig = exports.ServiceConfigInput = exports.ServiceConfigVpcConnectorEgressSettingsEnum = exports.ServiceConfigSecurityLevelEnum = exports.ServiceConfigIngressSettingsEnum = void 0;
var utils_1 = require("../../../internal/utils");
var secretenvvar_1 = require("./secretenvvar");
var secretvolume_1 = require("./secretvolume");
var class_transformer_1 = require("class-transformer");
/**
 * The ingress settings for the function, controlling what traffic can reach it.
 */
var ServiceConfigIngressSettingsEnum;
(function (ServiceConfigIngressSettingsEnum) {
    ServiceConfigIngressSettingsEnum["IngressSettingsUnspecified"] = "INGRESS_SETTINGS_UNSPECIFIED";
    ServiceConfigIngressSettingsEnum["AllowAll"] = "ALLOW_ALL";
    ServiceConfigIngressSettingsEnum["AllowInternalOnly"] = "ALLOW_INTERNAL_ONLY";
    ServiceConfigIngressSettingsEnum["AllowInternalAndGclb"] = "ALLOW_INTERNAL_AND_GCLB";
})(ServiceConfigIngressSettingsEnum = exports.ServiceConfigIngressSettingsEnum || (exports.ServiceConfigIngressSettingsEnum = {}));
/**
 * Security level configure whether the function only accepts https. This configuration is only applicable to 1st Gen functions with Http trigger. By default https is optional for 1st Gen functions; 2nd Gen functions are https ONLY.
 */
var ServiceConfigSecurityLevelEnum;
(function (ServiceConfigSecurityLevelEnum) {
    ServiceConfigSecurityLevelEnum["SecurityLevelUnspecified"] = "SECURITY_LEVEL_UNSPECIFIED";
    ServiceConfigSecurityLevelEnum["SecureAlways"] = "SECURE_ALWAYS";
    ServiceConfigSecurityLevelEnum["SecureOptional"] = "SECURE_OPTIONAL";
})(ServiceConfigSecurityLevelEnum = exports.ServiceConfigSecurityLevelEnum || (exports.ServiceConfigSecurityLevelEnum = {}));
/**
 * The egress settings for the connector, controlling what traffic is diverted through it.
 */
var ServiceConfigVpcConnectorEgressSettingsEnum;
(function (ServiceConfigVpcConnectorEgressSettingsEnum) {
    ServiceConfigVpcConnectorEgressSettingsEnum["VpcConnectorEgressSettingsUnspecified"] = "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED";
    ServiceConfigVpcConnectorEgressSettingsEnum["PrivateRangesOnly"] = "PRIVATE_RANGES_ONLY";
    ServiceConfigVpcConnectorEgressSettingsEnum["AllTraffic"] = "ALL_TRAFFIC";
})(ServiceConfigVpcConnectorEgressSettingsEnum = exports.ServiceConfigVpcConnectorEgressSettingsEnum || (exports.ServiceConfigVpcConnectorEgressSettingsEnum = {}));
/**
 * Describes the Service being deployed. Currently Supported : Cloud Run (fully managed). Next tag: 23
 */
var ServiceConfigInput = /** @class */ (function (_super) {
    __extends(ServiceConfigInput, _super);
    function ServiceConfigInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allTrafficOnLatestRevision" }),
        __metadata("design:type", Boolean)
    ], ServiceConfigInput.prototype, "allTrafficOnLatestRevision", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availableCpu" }),
        __metadata("design:type", String)
    ], ServiceConfigInput.prototype, "availableCpu", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availableMemory" }),
        __metadata("design:type", String)
    ], ServiceConfigInput.prototype, "availableMemory", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "environmentVariables" }),
        __metadata("design:type", Object)
    ], ServiceConfigInput.prototype, "environmentVariables", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ingressSettings" }),
        __metadata("design:type", String)
    ], ServiceConfigInput.prototype, "ingressSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxInstanceCount" }),
        __metadata("design:type", Number)
    ], ServiceConfigInput.prototype, "maxInstanceCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxInstanceRequestConcurrency" }),
        __metadata("design:type", Number)
    ], ServiceConfigInput.prototype, "maxInstanceRequestConcurrency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minInstanceCount" }),
        __metadata("design:type", Number)
    ], ServiceConfigInput.prototype, "minInstanceCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: secretenvvar_1.SecretEnvVar }),
        (0, class_transformer_1.Expose)({ name: "secretEnvironmentVariables" }),
        (0, class_transformer_1.Type)(function () { return secretenvvar_1.SecretEnvVar; }),
        __metadata("design:type", Array)
    ], ServiceConfigInput.prototype, "secretEnvironmentVariables", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: secretvolume_1.SecretVolume }),
        (0, class_transformer_1.Expose)({ name: "secretVolumes" }),
        (0, class_transformer_1.Type)(function () { return secretvolume_1.SecretVolume; }),
        __metadata("design:type", Array)
    ], ServiceConfigInput.prototype, "secretVolumes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "securityLevel" }),
        __metadata("design:type", String)
    ], ServiceConfigInput.prototype, "securityLevel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceAccountEmail" }),
        __metadata("design:type", String)
    ], ServiceConfigInput.prototype, "serviceAccountEmail", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timeoutSeconds" }),
        __metadata("design:type", Number)
    ], ServiceConfigInput.prototype, "timeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpcConnector" }),
        __metadata("design:type", String)
    ], ServiceConfigInput.prototype, "vpcConnector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpcConnectorEgressSettings" }),
        __metadata("design:type", String)
    ], ServiceConfigInput.prototype, "vpcConnectorEgressSettings", void 0);
    return ServiceConfigInput;
}(utils_1.SpeakeasyBase));
exports.ServiceConfigInput = ServiceConfigInput;
/**
 * Describes the Service being deployed. Currently Supported : Cloud Run (fully managed). Next tag: 23
 */
var ServiceConfig = /** @class */ (function (_super) {
    __extends(ServiceConfig, _super);
    function ServiceConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allTrafficOnLatestRevision" }),
        __metadata("design:type", Boolean)
    ], ServiceConfig.prototype, "allTrafficOnLatestRevision", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availableCpu" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "availableCpu", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availableMemory" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "availableMemory", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "environmentVariables" }),
        __metadata("design:type", Object)
    ], ServiceConfig.prototype, "environmentVariables", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ingressSettings" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "ingressSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxInstanceCount" }),
        __metadata("design:type", Number)
    ], ServiceConfig.prototype, "maxInstanceCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxInstanceRequestConcurrency" }),
        __metadata("design:type", Number)
    ], ServiceConfig.prototype, "maxInstanceRequestConcurrency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minInstanceCount" }),
        __metadata("design:type", Number)
    ], ServiceConfig.prototype, "minInstanceCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "revision" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "revision", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: secretenvvar_1.SecretEnvVar }),
        (0, class_transformer_1.Expose)({ name: "secretEnvironmentVariables" }),
        (0, class_transformer_1.Type)(function () { return secretenvvar_1.SecretEnvVar; }),
        __metadata("design:type", Array)
    ], ServiceConfig.prototype, "secretEnvironmentVariables", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: secretvolume_1.SecretVolume }),
        (0, class_transformer_1.Expose)({ name: "secretVolumes" }),
        (0, class_transformer_1.Type)(function () { return secretvolume_1.SecretVolume; }),
        __metadata("design:type", Array)
    ], ServiceConfig.prototype, "secretVolumes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "securityLevel" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "securityLevel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "service" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "service", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceAccountEmail" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "serviceAccountEmail", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timeoutSeconds" }),
        __metadata("design:type", Number)
    ], ServiceConfig.prototype, "timeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "uri" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "uri", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpcConnector" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "vpcConnector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpcConnectorEgressSettings" }),
        __metadata("design:type", String)
    ], ServiceConfig.prototype, "vpcConnectorEgressSettings", void 0);
    return ServiceConfig;
}(utils_1.SpeakeasyBase));
exports.ServiceConfig = ServiceConfig;
