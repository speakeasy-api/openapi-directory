"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetCapabilitiesRequestEnum(str, Enum):
    GET_CAPABILITIES = 'GetCapabilities'

class GetCapabilitiesServiceEnum(str, Enum):
    WMS = 'WMS'

class GetCapabilitiesVersionEnum(str, Enum):
    r"""WMS service version"""
    ONE_1_1 = '1.1.1'

class GetCapabilitiesVersionNumberEnum(str, Enum):
    ONE = '1'


@dataclasses.dataclass
class GetCapabilitiesRequest:
    
    request: GetCapabilitiesRequestEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'request', 'style': 'form', 'explode': True }})  
    service: GetCapabilitiesServiceEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'service', 'style': 'form', 'explode': True }})  
    version_number: GetCapabilitiesVersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})  
    version: Optional[GetCapabilitiesVersionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'version', 'style': 'form', 'explode': True }})
    r"""WMS service version"""  
    

@dataclasses.dataclass
class GetCapabilitiesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    