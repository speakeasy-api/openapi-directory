// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum - The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
type UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum string

const (
	UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnumMinimizeClientDowntime UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum = "minimizeClientDowntime"
	UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnumMinimizeUpgradeTime    UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum = "minimizeUpgradeTime"
)

func (e UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum) ToPointer() *UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum {
	return &e
}

func (e *UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minimizeClientDowntime":
		fallthrough
	case "minimizeUpgradeTime":
		*e = UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum: %v", v)
	}
}

type UpdateNetworkWirelessSettingsRequestBody struct {
	// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
	Ipv6BridgeEnabled *bool `json:"ipv6BridgeEnabled,omitempty"`
	// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
	LedLightsOn *bool `json:"ledLightsOn,omitempty"`
	// Toggle for enabling or disabling location analytics for your network
	LocationAnalyticsEnabled *bool `json:"locationAnalyticsEnabled,omitempty"`
	// Toggle for enabling or disabling meshing in a network
	MeshingEnabled *bool `json:"meshingEnabled,omitempty"`
	// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
	UpgradeStrategy *UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum `json:"upgradeStrategy,omitempty"`
}

type UpdateNetworkWirelessSettingsRequest struct {
	RequestBody *UpdateNetworkWirelessSettingsRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                    `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring - Named VLAN Pool DHCP Monitoring settings.
type UpdateNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring struct {
	// The duration in minutes that devices will refrain from using dirty VLANs before adding them back to the pool.
	Duration *int64 `json:"duration,omitempty"`
	// Whether or not devices using named VLAN pools should remove dirty VLANs from the pool, thereby preventing clients from being assigned to VLANs where they would be unable to obtain an IP address via DHCP
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkWirelessSettings200ApplicationJSONNamedVlans - Named VLAN settings for wireless networks.
type UpdateNetworkWirelessSettings200ApplicationJSONNamedVlans struct {
	// Named VLAN Pool DHCP Monitoring settings.
	PoolDhcpMonitoring *UpdateNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring `json:"poolDhcpMonitoring,omitempty"`
}

// UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum - The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
type UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum string

const (
	UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnumMinimizeClientDowntime UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum = "minimizeClientDowntime"
	UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnumMinimizeUpgradeTime    UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum = "minimizeUpgradeTime"
)

func (e UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum) ToPointer() *UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum {
	return &e
}

func (e *UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minimizeClientDowntime":
		fallthrough
	case "minimizeUpgradeTime":
		*e = UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum: %v", v)
	}
}

// UpdateNetworkWirelessSettings200ApplicationJSON - Successful operation
type UpdateNetworkWirelessSettings200ApplicationJSON struct {
	// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
	Ipv6BridgeEnabled *bool `json:"ipv6BridgeEnabled,omitempty"`
	// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
	LedLightsOn *bool `json:"ledLightsOn,omitempty"`
	// Toggle for enabling or disabling location analytics for your network
	LocationAnalyticsEnabled *bool `json:"locationAnalyticsEnabled,omitempty"`
	// Toggle for enabling or disabling meshing in a network
	MeshingEnabled *bool `json:"meshingEnabled,omitempty"`
	// Named VLAN settings for wireless networks.
	NamedVlans *UpdateNetworkWirelessSettings200ApplicationJSONNamedVlans `json:"namedVlans,omitempty"`
	// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
	UpgradeStrategy *UpdateNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum `json:"upgradeStrategy,omitempty"`
}

type UpdateNetworkWirelessSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessSettings200ApplicationJSONObject *UpdateNetworkWirelessSettings200ApplicationJSON
}
