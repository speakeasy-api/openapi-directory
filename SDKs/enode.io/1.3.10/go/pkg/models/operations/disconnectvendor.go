// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DisconnectVendorSecurity struct {
	UserAccessToken string `security:"scheme,type=oauth2,name=Authorization"`
}

// DisconnectVendorVendorEnum - Vendor ID
type DisconnectVendorVendorEnum string

const (
	DisconnectVendorVendorEnumTesla      DisconnectVendorVendorEnum = "TESLA"
	DisconnectVendorVendorEnumBmw        DisconnectVendorVendorEnum = "BMW"
	DisconnectVendorVendorEnumAudi       DisconnectVendorVendorEnum = "AUDI"
	DisconnectVendorVendorEnumVolkswagen DisconnectVendorVendorEnum = "VOLKSWAGEN"
	DisconnectVendorVendorEnumHyundai    DisconnectVendorVendorEnum = "HYUNDAI"
	DisconnectVendorVendorEnumPeugeot    DisconnectVendorVendorEnum = "PEUGEOT"
	DisconnectVendorVendorEnumNissan     DisconnectVendorVendorEnum = "NISSAN"
)

func (e *DisconnectVendorVendorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TESLA":
		fallthrough
	case "BMW":
		fallthrough
	case "AUDI":
		fallthrough
	case "VOLKSWAGEN":
		fallthrough
	case "HYUNDAI":
		fallthrough
	case "PEUGEOT":
		fallthrough
	case "NISSAN":
		*e = DisconnectVendorVendorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisconnectVendorVendorEnum: %s", s)
	}
}

type DisconnectVendorRequest struct {
	// Vendor to be unlinked
	Vendor DisconnectVendorVendorEnum `pathParam:"style=simple,explode=false,name=vendor"`
}

type DisconnectVendorResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
