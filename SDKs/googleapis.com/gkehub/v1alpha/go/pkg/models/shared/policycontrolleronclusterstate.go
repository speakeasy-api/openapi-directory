// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PolicyControllerOnClusterStateStateEnum - The lifecycle state of this component.
type PolicyControllerOnClusterStateStateEnum string

const (
	PolicyControllerOnClusterStateStateEnumLifecycleStateUnspecified PolicyControllerOnClusterStateStateEnum = "LIFECYCLE_STATE_UNSPECIFIED"
	PolicyControllerOnClusterStateStateEnumNotInstalled              PolicyControllerOnClusterStateStateEnum = "NOT_INSTALLED"
	PolicyControllerOnClusterStateStateEnumInstalling                PolicyControllerOnClusterStateStateEnum = "INSTALLING"
	PolicyControllerOnClusterStateStateEnumActive                    PolicyControllerOnClusterStateStateEnum = "ACTIVE"
	PolicyControllerOnClusterStateStateEnumUpdating                  PolicyControllerOnClusterStateStateEnum = "UPDATING"
	PolicyControllerOnClusterStateStateEnumDecommissioning           PolicyControllerOnClusterStateStateEnum = "DECOMMISSIONING"
	PolicyControllerOnClusterStateStateEnumClusterError              PolicyControllerOnClusterStateStateEnum = "CLUSTER_ERROR"
	PolicyControllerOnClusterStateStateEnumHubError                  PolicyControllerOnClusterStateStateEnum = "HUB_ERROR"
	PolicyControllerOnClusterStateStateEnumSuspended                 PolicyControllerOnClusterStateStateEnum = "SUSPENDED"
)

func (e PolicyControllerOnClusterStateStateEnum) ToPointer() *PolicyControllerOnClusterStateStateEnum {
	return &e
}

func (e *PolicyControllerOnClusterStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIFECYCLE_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "INSTALLING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DECOMMISSIONING":
		fallthrough
	case "CLUSTER_ERROR":
		fallthrough
	case "HUB_ERROR":
		fallthrough
	case "SUSPENDED":
		*e = PolicyControllerOnClusterStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyControllerOnClusterStateStateEnum: %v", v)
	}
}

// PolicyControllerOnClusterState - OnClusterState represents the state of a sub-component of Policy Controller.
type PolicyControllerOnClusterState struct {
	// Surface potential errors or information logs.
	Details *string `json:"details,omitempty"`
	// The lifecycle state of this component.
	State *PolicyControllerOnClusterStateStateEnum `json:"state,omitempty"`
}
