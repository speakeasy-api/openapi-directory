// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GroupProperties struct {
	// Property name
	Name string `json:"name"`
	// Property value (can be a string or JSON object)
	Value interface{} `json:"value"`
}

// GroupQueryCompositionEnum - Boolean operator to use between each  `where` criteria.
type GroupQueryCompositionEnum string

const (
	GroupQueryCompositionEnumAnd GroupQueryCompositionEnum = "and"
	GroupQueryCompositionEnumOr  GroupQueryCompositionEnum = "or"
)

func (e *GroupQueryCompositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "and":
		fallthrough
	case "or":
		*e = GroupQueryCompositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupQueryCompositionEnum: %s", s)
	}
}

type GroupQueryWhere struct {
	// Attribute to compare
	Attribute *string `json:"attribute,omitempty"`
	// Comparator to use
	Comparator *string `json:"comparator,omitempty"`
	// Type of the object
	ObjectType *string `json:"objectType,omitempty"`
	// Value to compare against
	Value *string `json:"value,omitempty"`
}

// GroupQuery - The criteria defining the group
type GroupQuery struct {
	// Boolean operator to use between each  `where` criteria.
	Composition *GroupQueryCompositionEnum `json:"composition,omitempty"`
	// What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.
	Select *string `json:"select,omitempty"`
	// List of criteria
	Where []GroupQueryWhere `json:"where,omitempty"`
}

type Group struct {
	// Group description
	Description *string `json:"description,omitempty"`
	// Name of the group
	DisplayName *string `json:"displayName,omitempty"`
	// Should the group be dynamically refreshed (if not, it is a static group)
	Dynamic *bool `json:"dynamic,omitempty"`
	// Enable or disable the group
	Enabled    *bool    `json:"enabled,omitempty"`
	GroupClass []string `json:"groupClass,omitempty"`
	// Group id
	ID *string `json:"id,omitempty"`
	// List of nodes in the group
	NodeIds []string `json:"nodeIds,omitempty"`
	// Group properties
	Properties []GroupProperties `json:"properties,omitempty"`
	// The criteria defining the group
	Query *GroupQuery `json:"query,omitempty"`
}
