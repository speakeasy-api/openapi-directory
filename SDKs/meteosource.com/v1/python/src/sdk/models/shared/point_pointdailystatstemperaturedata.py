"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PointPointDailyStatsTemperatureData:
    
    avg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg'), 'exclude': lambda f: f is None }})
    r"""Long-term temperature average.
    Units: metric = °C, us = °F, uk = °C, ca = °C
    """  
    avg_max: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_max'), 'exclude': lambda f: f is None }})
    r"""Long-term daily maximum temperature average.
    Units: metric = °C, us = °F, uk = °C, ca = °C
    """  
    avg_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_min'), 'exclude': lambda f: f is None }})
    r"""Long-term daily minimum temperature average.
    Units: metric = °C, us = °F, uk = °C, ca = °C
    """  
    record_max: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record_max'), 'exclude': lambda f: f is None }})
    r"""Historical daily maximum.
    Units: metric = °C, us = °F, uk = °C, ca = °C
    """  
    record_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record_min'), 'exclude': lambda f: f is None }})
    r"""Historical daily minimum temperature.
    Units: metric = °C, us = °F, uk = °C, ca = °C
    """  
    