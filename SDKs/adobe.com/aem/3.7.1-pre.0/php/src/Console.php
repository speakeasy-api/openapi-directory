<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Console 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getAemProductInfo
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAemProductInfoResponse
     */
	public function getAemProductInfo(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAemProductInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/system/console/status-productinfo.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAemProductInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAemProductInfoDefaultApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBundleInfo
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBundleInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBundleInfoResponse
     */
	public function getBundleInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetBundleInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBundleInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/system/console/bundles/{name}.json', \OpenAPI\OpenAPI\Models\Operations\GetBundleInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBundleInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bundleInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BundleInfo', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getBundleInfoDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getConfigMgr
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConfigMgrResponse
     */
	public function getConfigMgr(
    ): \OpenAPI\OpenAPI\Models\Operations\GetConfigMgrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/system/console/configMgr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConfigMgrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->getConfigMgr200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
        }

        return $response;
    }
	
    /**
     * postBundle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostBundleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostBundleResponse
     */
	public function postBundle(
        \OpenAPI\OpenAPI\Models\Operations\PostBundleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostBundleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/system/console/bundles/{name}', \OpenAPI\OpenAPI\Models\Operations\PostBundleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostBundleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostBundleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postJmxRepository
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostJmxRepositoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostJmxRepositoryResponse
     */
	public function postJmxRepository(
        \OpenAPI\OpenAPI\Models\Operations\PostJmxRepositoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostJmxRepositoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}', \OpenAPI\OpenAPI\Models\Operations\PostJmxRepositoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostJmxRepositoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postSamlConfiguration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSamlConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSamlConfigurationResponse
     */
	public function postSamlConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\PostSamlConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSamlConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostSamlConfigurationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSamlConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->samlConfigurationInfo = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 302) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->postSamlConfiguration302TextPlainString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->postSamlConfigurationDefaultTextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}