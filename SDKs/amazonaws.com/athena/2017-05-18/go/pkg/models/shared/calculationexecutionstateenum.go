// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CalculationExecutionStateEnum string

const (
	CalculationExecutionStateEnumCreating  CalculationExecutionStateEnum = "CREATING"
	CalculationExecutionStateEnumCreated   CalculationExecutionStateEnum = "CREATED"
	CalculationExecutionStateEnumQueued    CalculationExecutionStateEnum = "QUEUED"
	CalculationExecutionStateEnumRunning   CalculationExecutionStateEnum = "RUNNING"
	CalculationExecutionStateEnumCanceling CalculationExecutionStateEnum = "CANCELING"
	CalculationExecutionStateEnumCanceled  CalculationExecutionStateEnum = "CANCELED"
	CalculationExecutionStateEnumCompleted CalculationExecutionStateEnum = "COMPLETED"
	CalculationExecutionStateEnumFailed    CalculationExecutionStateEnum = "FAILED"
)

func (e CalculationExecutionStateEnum) ToPointer() *CalculationExecutionStateEnum {
	return &e
}

func (e *CalculationExecutionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING":
		fallthrough
	case "CREATED":
		fallthrough
	case "QUEUED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "CANCELING":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILED":
		*e = CalculationExecutionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalculationExecutionStateEnum: %v", v)
	}
}
