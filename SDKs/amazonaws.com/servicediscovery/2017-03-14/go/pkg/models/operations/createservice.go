// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateServiceXAmzTargetEnum
type CreateServiceXAmzTargetEnum string

const (
	CreateServiceXAmzTargetEnumRoute53AutoNamingV20170314CreateService CreateServiceXAmzTargetEnum = "Route53AutoNaming_v20170314.CreateService"
)

func (e CreateServiceXAmzTargetEnum) ToPointer() *CreateServiceXAmzTargetEnum {
	return &e
}

func (e *CreateServiceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53AutoNaming_v20170314.CreateService":
		*e = CreateServiceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServiceXAmzTargetEnum: %v", v)
	}
}

type CreateServiceRequest struct {
	CreateServiceRequest shared.CreateServiceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           CreateServiceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateServiceResponse struct {
	ContentType string
	// Success
	CreateServiceResponse *shared.CreateServiceResponse
	// InvalidInput
	InvalidInput interface{}
	// NamespaceNotFound
	NamespaceNotFound interface{}
	StatusCode        int
	RawResponse       *http.Response
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
	// ServiceAlreadyExists
	ServiceAlreadyExists interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
