// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GbrCleanseNoMatchConfidenceEnum string

const (
	GbrCleanseNoMatchConfidenceEnumZero GbrCleanseNoMatchConfidenceEnum = "0"
)

func (e *GbrCleanseNoMatchConfidenceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		*e = GbrCleanseNoMatchConfidenceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchConfidenceEnum: %s", s)
	}
}

type GbrCleanseNoMatchCountEnum string

const (
	GbrCleanseNoMatchCountEnumZero GbrCleanseNoMatchCountEnum = "0"
)

func (e *GbrCleanseNoMatchCountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		*e = GbrCleanseNoMatchCountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchCountEnum: %s", s)
	}
}

type GbrCleanseNoMatchFitEnum string

const (
	GbrCleanseNoMatchFitEnumZero GbrCleanseNoMatchFitEnum = "0"
)

func (e *GbrCleanseNoMatchFitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		*e = GbrCleanseNoMatchFitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchFitEnum: %s", s)
	}
}

type GbrCleanseNoMatchLocalityMatchEnum string

const (
	GbrCleanseNoMatchLocalityMatchEnumNoMatch GbrCleanseNoMatchLocalityMatchEnum = "NO_MATCH"
)

func (e *GbrCleanseNoMatchLocalityMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_MATCH":
		*e = GbrCleanseNoMatchLocalityMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchLocalityMatchEnum: %s", s)
	}
}

// GbrCleanseNoMatchMatchEnum - Nearest matching address
type GbrCleanseNoMatchMatchEnum string

const (
	GbrCleanseNoMatchMatchEnumNull GbrCleanseNoMatchMatchEnum = "null"
)

func (e *GbrCleanseNoMatchMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = GbrCleanseNoMatchMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchMatchEnum: %s", s)
	}
}

type GbrCleanseNoMatchOrganisationMatchEnum string

const (
	GbrCleanseNoMatchOrganisationMatchEnumNoMatch GbrCleanseNoMatchOrganisationMatchEnum = "NO_MATCH"
)

func (e *GbrCleanseNoMatchOrganisationMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_MATCH":
		*e = GbrCleanseNoMatchOrganisationMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchOrganisationMatchEnum: %s", s)
	}
}

type GbrCleanseNoMatchPostTownMatchEnum string

const (
	GbrCleanseNoMatchPostTownMatchEnumNoMatch GbrCleanseNoMatchPostTownMatchEnum = "NO_MATCH"
)

func (e *GbrCleanseNoMatchPostTownMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_MATCH":
		*e = GbrCleanseNoMatchPostTownMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchPostTownMatchEnum: %s", s)
	}
}

type GbrCleanseNoMatchPostcodeMatchEnum string

const (
	GbrCleanseNoMatchPostcodeMatchEnumNoMatch GbrCleanseNoMatchPostcodeMatchEnum = "NO_MATCH"
)

func (e *GbrCleanseNoMatchPostcodeMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_MATCH":
		*e = GbrCleanseNoMatchPostcodeMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchPostcodeMatchEnum: %s", s)
	}
}

type GbrCleanseNoMatchPremiseMatchEnum string

const (
	GbrCleanseNoMatchPremiseMatchEnumNoMatch GbrCleanseNoMatchPremiseMatchEnum = "NO_MATCH"
)

func (e *GbrCleanseNoMatchPremiseMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_MATCH":
		*e = GbrCleanseNoMatchPremiseMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchPremiseMatchEnum: %s", s)
	}
}

type GbrCleanseNoMatchThoroughfareMatchEnum string

const (
	GbrCleanseNoMatchThoroughfareMatchEnumNoMatch GbrCleanseNoMatchThoroughfareMatchEnum = "NO_MATCH"
)

func (e *GbrCleanseNoMatchThoroughfareMatchEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_MATCH":
		*e = GbrCleanseNoMatchThoroughfareMatchEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GbrCleanseNoMatchThoroughfareMatchEnum: %s", s)
	}
}

type GbrCleanseNoMatch struct {
	Confidence    GbrCleanseNoMatchConfidenceEnum    `json:"confidence"`
	Count         GbrCleanseNoMatchCountEnum         `json:"count"`
	Fit           GbrCleanseNoMatchFitEnum           `json:"fit"`
	LocalityMatch GbrCleanseNoMatchLocalityMatchEnum `json:"locality_match"`
	// Nearest matching address
	Match             GbrCleanseNoMatchMatchEnum             `json:"match"`
	OrganisationMatch GbrCleanseNoMatchOrganisationMatchEnum `json:"organisation_match"`
	PostTownMatch     GbrCleanseNoMatchPostTownMatchEnum     `json:"post_town_match"`
	PostcodeMatch     GbrCleanseNoMatchPostcodeMatchEnum     `json:"postcode_match"`
	PremiseMatch      GbrCleanseNoMatchPremiseMatchEnum      `json:"premise_match"`
	// Originally submitted query
	Query             string                                 `json:"query"`
	ThoroughfareMatch GbrCleanseNoMatchThoroughfareMatchEnum `json:"thoroughfare_match"`
}
