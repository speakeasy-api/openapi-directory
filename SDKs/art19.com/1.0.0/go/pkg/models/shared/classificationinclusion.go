// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ClassificationInclusionAttributesClassificationTypeEnum - This will be replaced by the relationship `classification` in a future update.<br/>
type ClassificationInclusionAttributesClassificationTypeEnum string

const (
	ClassificationInclusionAttributesClassificationTypeEnumAlternateFeedType ClassificationInclusionAttributesClassificationTypeEnum = "AlternateFeedType"
	ClassificationInclusionAttributesClassificationTypeEnumGenre             ClassificationInclusionAttributesClassificationTypeEnum = "Genre"
	ClassificationInclusionAttributesClassificationTypeEnumIndustry          ClassificationInclusionAttributesClassificationTypeEnum = "Industry"
	ClassificationInclusionAttributesClassificationTypeEnumLanguage          ClassificationInclusionAttributesClassificationTypeEnum = "Language"
	ClassificationInclusionAttributesClassificationTypeEnumMediaRating       ClassificationInclusionAttributesClassificationTypeEnum = "MediaRating"
)

func (e *ClassificationInclusionAttributesClassificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AlternateFeedType":
		fallthrough
	case "Genre":
		fallthrough
	case "Industry":
		fallthrough
	case "Language":
		fallthrough
	case "MediaRating":
		*e = ClassificationInclusionAttributesClassificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ClassificationInclusionAttributesClassificationTypeEnum: %s", s)
	}
}

// ClassificationInclusionAttributesClassifiedTypeEnum - This will be replaced by the relationship `classified` in a future update.<br/>
type ClassificationInclusionAttributesClassifiedTypeEnum string

const (
	ClassificationInclusionAttributesClassifiedTypeEnumSeries  ClassificationInclusionAttributesClassifiedTypeEnum = "Series"
	ClassificationInclusionAttributesClassifiedTypeEnumSeason  ClassificationInclusionAttributesClassifiedTypeEnum = "Season"
	ClassificationInclusionAttributesClassifiedTypeEnumEpisode ClassificationInclusionAttributesClassifiedTypeEnum = "Episode"
)

func (e *ClassificationInclusionAttributesClassifiedTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Series":
		fallthrough
	case "Season":
		fallthrough
	case "Episode":
		*e = ClassificationInclusionAttributesClassifiedTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ClassificationInclusionAttributesClassifiedTypeEnum: %s", s)
	}
}

type ClassificationInclusionAttributes struct {
	// This will be replaced by the relationship `classification` in a future update.<br/>
	// The ID of the classification linked to the entity
	//
	ClassificationID *string `json:"classification_id,omitempty"`
	// This will be replaced by the relationship `classification` in a future update.<br/>
	ClassificationType *ClassificationInclusionAttributesClassificationTypeEnum `json:"classification_type,omitempty"`
	// This will be replaced by the relationship `classified` in a future update.<br/>
	// The ID of the entity linked to the classification
	//
	ClassifiedID *string `json:"classified_id,omitempty"`
	// This will be replaced by the relationship `classified` in a future update.<br/>
	ClassifiedType *ClassificationInclusionAttributesClassifiedTypeEnum `json:"classified_type,omitempty"`
	CreatedAt      *time.Time                                           `json:"created_at,omitempty"`
	// The position or order of the linked classification within the classified resource
	Position *int64 `json:"position,omitempty"`
	// When `true` it describes the best classification of a specific type for a given
	// classified item
	//
	Primary   *bool      `json:"primary,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type ClassificationInclusionRelationshipsClassification struct {
	Data *ResourceIdentifier `json:"data,omitempty"`
}

type ClassificationInclusionRelationships struct {
	Classification *ClassificationInclusionRelationshipsClassification `json:"classification,omitempty"`
}

// ClassificationInclusion - Connects a Classification with a classified item like a Series, Season or Episode.
type ClassificationInclusion struct {
	Attributes    *ClassificationInclusionAttributes    `json:"attributes,omitempty"`
	ID            *string                               `json:"id,omitempty"`
	Relationships *ClassificationInclusionRelationships `json:"relationships,omitempty"`
	// The type of resource. This is always `classification_inclusion`
	Type *string `json:"type,omitempty"`
}
