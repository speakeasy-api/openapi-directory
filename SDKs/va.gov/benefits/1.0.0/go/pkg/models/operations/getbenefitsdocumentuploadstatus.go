// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetBenefitsDocumentUploadStatusSecurity struct {
	Apikey string `security:"scheme,type=apiKey,subtype=header,name=apikey"`
}

type GetBenefitsDocumentUploadStatusRequest struct {
	// ID as returned by a previous create upload request
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// GetBenefitsDocumentUploadStatus500ApplicationJSON - Internal server error
type GetBenefitsDocumentUploadStatus500ApplicationJSON struct {
	// Unambiguous status code. Only present if status = "error"
	//
	// * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
	// * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
	// * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
	// * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
	// * `DOC105` - Invalid or unknown id
	// * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
	// * `DOC107` - Empty payload.
	// * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
	// * `DOC201` - Upload server error.
	// * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
	//
	Code *string `json:"code,omitempty"`
	// Human readable error detail. Only present if status = "error"
	Detail *string `json:"detail,omitempty"`
	// Unambiguous status code. Only present if status = "error"
	//
	// * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
	// * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
	// * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
	// * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
	// * `DOC105` - Invalid or unknown id
	// * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
	// * `DOC107` - Empty payload.
	// * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
	// * `DOC201` - Upload server error.
	// * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
	//
	Status *string `json:"status,omitempty"`
	// Human readable title description.
	Title *string `json:"title,omitempty"`
}

// GetBenefitsDocumentUploadStatus429ApplicationJSON - Too many requests
type GetBenefitsDocumentUploadStatus429ApplicationJSON struct {
	// message
	Message *string `json:"Message,omitempty"`
}

// GetBenefitsDocumentUploadStatus404ApplicationJSON - Not found
type GetBenefitsDocumentUploadStatus404ApplicationJSON struct {
	// Unambiguous status code. Only present if status = "error"
	//
	// * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
	// * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
	// * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
	// * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
	// * `DOC105` - Invalid or unknown id
	// * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
	// * `DOC107` - Empty payload.
	// * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
	// * `DOC201` - Upload server error.
	// * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
	//
	Code *string `json:"code,omitempty"`
	// Human readable error detail. Only present if status = "error"
	Detail *string `json:"detail,omitempty"`
	// Unambiguous status code. Only present if status = "error"
	//
	// * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
	// * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
	// * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
	// * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
	// * `DOC105` - Invalid or unknown id
	// * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
	// * `DOC107` - Empty payload.
	// * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
	// * `DOC201` - Upload server error.
	// * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
	//
	Status *string `json:"status,omitempty"`
	// Human readable title description.
	Title *string `json:"title,omitempty"`
}

// GetBenefitsDocumentUploadStatus403ApplicationJSON - Forbidden
type GetBenefitsDocumentUploadStatus403ApplicationJSON struct {
	// Error detail
	Message *string `json:"Message,omitempty"`
}

// GetBenefitsDocumentUploadStatus401ApplicationJSON - Unauthorized request
type GetBenefitsDocumentUploadStatus401ApplicationJSON struct {
	// Error detail
	Message *string `json:"Message,omitempty"`
}

// GetBenefitsDocumentUploadStatus200ApplicationJSON - Upload status retrieved successfully
type GetBenefitsDocumentUploadStatus200ApplicationJSON struct {
	// Status record for a previously initiated document submission.
	Data shared.DocumentUploadStatus `json:"data"`
}

type GetBenefitsDocumentUploadStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Upload status retrieved successfully
	GetBenefitsDocumentUploadStatus200ApplicationJSONObject *GetBenefitsDocumentUploadStatus200ApplicationJSON
	// Unauthorized request
	GetBenefitsDocumentUploadStatus401ApplicationJSONObject *GetBenefitsDocumentUploadStatus401ApplicationJSON
	// Forbidden
	GetBenefitsDocumentUploadStatus403ApplicationJSONObject *GetBenefitsDocumentUploadStatus403ApplicationJSON
	// Not found
	GetBenefitsDocumentUploadStatus404ApplicationJSONObject *GetBenefitsDocumentUploadStatus404ApplicationJSON
	// Too many requests
	GetBenefitsDocumentUploadStatus429ApplicationJSONObject *GetBenefitsDocumentUploadStatus429ApplicationJSON
	// Internal server error
	GetBenefitsDocumentUploadStatus500ApplicationJSONObject *GetBenefitsDocumentUploadStatus500ApplicationJSON
}
