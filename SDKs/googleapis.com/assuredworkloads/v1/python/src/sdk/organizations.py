"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Organizations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def assuredworkloads_organizations_locations_operations_list(self, request: operations.AssuredworkloadsOrganizationsLocationsOperationsListRequest, security: operations.AssuredworkloadsOrganizationsLocationsOperationsListSecurity) -> operations.AssuredworkloadsOrganizationsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    def assuredworkloads_organizations_locations_workloads_create(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse:
        r"""Creates Assured Workload."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest, base_url, '/v1/{parent}/workloads', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_assuredworkloads_v1_workload_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def assuredworkloads_organizations_locations_workloads_delete(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse:
        r"""Deletes the workload. Make sure that workload's direct children are already in a deleted state, otherwise the request will fail with a FAILED_PRECONDITION error."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def assuredworkloads_organizations_locations_workloads_list(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsListRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsListSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsListResponse:
        r"""Lists Assured Workloads under a CRM Node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsListRequest, base_url, '/v1/{parent}/workloads', request)
        
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudAssuredworkloadsV1ListWorkloadsResponse])
                res.google_cloud_assuredworkloads_v1_list_workloads_response = out

        return res

    def assuredworkloads_organizations_locations_workloads_mutate_partner_permissions(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse:
        r"""Update the permissions settings for an existing partner workload. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest, base_url, '/v1/{name}:mutatePartnerPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_assuredworkloads_v1_mutate_partner_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsMutatePartnerPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudAssuredworkloadsV1Workload])
                res.google_cloud_assuredworkloads_v1_workload = out

        return res

    def assuredworkloads_organizations_locations_workloads_patch(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse:
        r"""Updates an existing workload. Currently allows updating of workload display_name and labels. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_assuredworkloads_v1_workload_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudAssuredworkloadsV1Workload])
                res.google_cloud_assuredworkloads_v1_workload = out

        return res

    def assuredworkloads_organizations_locations_workloads_restrict_allowed_resources(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse:
        r"""Restrict the list of resources allowed in the Workload environment. The current list of allowed products can be found at https://cloud.google.com/assured-workloads/docs/supported-products In addition to assuredworkloads.workload.update permission, the user should also have orgpolicy.policy.set permission on the folder resource to use this functionality."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest, base_url, '/v1/{name}:restrictAllowedResources', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_assuredworkloads_v1_restrict_allowed_resources_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsRestrictAllowedResourcesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_cloud_assuredworkloads_v1_restrict_allowed_resources_response = out

        return res

    def assuredworkloads_organizations_locations_workloads_violations_acknowledge(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse:
        r"""Acknowledges an existing violation. By acknowledging a violation, users acknowledge the existence of a compliance violation in their workload and decide to ignore it due to a valid business justification. Acknowledgement is a permanent operation and it cannot be reverted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest, base_url, '/v1/{name}:acknowledge', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_assuredworkloads_v1_acknowledge_violation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsAcknowledgeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_cloud_assuredworkloads_v1_acknowledge_violation_response = out

        return res

    def assuredworkloads_organizations_locations_workloads_violations_get(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse:
        r"""Retrieves Assured Workload Violation based on ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudAssuredworkloadsV1Violation])
                res.google_cloud_assuredworkloads_v1_violation = out

        return res

    def assuredworkloads_organizations_locations_workloads_violations_list(self, request: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest, security: operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListSecurity) -> operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse:
        r"""Lists the Violations in the AssuredWorkload Environment. Callers may also choose to read across multiple Workloads as per [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash character) as a wildcard character instead of workload-id in the parent. Format `organizations/{org_id}/locations/{location}/workloads/-`"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest, base_url, '/v1/{parent}/violations', request)
        
        query_params = utils.get_query_params(operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssuredworkloadsOrganizationsLocationsWorkloadsViolationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudAssuredworkloadsV1ListViolationsResponse])
                res.google_cloud_assuredworkloads_v1_list_violations_response = out

        return res

    