// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StorageBucketsInsertSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type StorageBucketsInsertSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type StorageBucketsInsertSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type StorageBucketsInsertSecurity struct {
	Option1 *StorageBucketsInsertSecurityOption1 `security:"option"`
	Option2 *StorageBucketsInsertSecurityOption2 `security:"option"`
	Option3 *StorageBucketsInsertSecurityOption3 `security:"option"`
}

// StorageBucketsInsertPredefinedACLEnum - Apply a predefined set of access controls to this bucket.
type StorageBucketsInsertPredefinedACLEnum string

const (
	StorageBucketsInsertPredefinedACLEnumAuthenticatedRead StorageBucketsInsertPredefinedACLEnum = "authenticatedRead"
	StorageBucketsInsertPredefinedACLEnumPrivate           StorageBucketsInsertPredefinedACLEnum = "private"
	StorageBucketsInsertPredefinedACLEnumProjectPrivate    StorageBucketsInsertPredefinedACLEnum = "projectPrivate"
	StorageBucketsInsertPredefinedACLEnumPublicRead        StorageBucketsInsertPredefinedACLEnum = "publicRead"
	StorageBucketsInsertPredefinedACLEnumPublicReadWrite   StorageBucketsInsertPredefinedACLEnum = "publicReadWrite"
)

func (e StorageBucketsInsertPredefinedACLEnum) ToPointer() *StorageBucketsInsertPredefinedACLEnum {
	return &e
}

func (e *StorageBucketsInsertPredefinedACLEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authenticatedRead":
		fallthrough
	case "private":
		fallthrough
	case "projectPrivate":
		fallthrough
	case "publicRead":
		fallthrough
	case "publicReadWrite":
		*e = StorageBucketsInsertPredefinedACLEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageBucketsInsertPredefinedACLEnum: %v", v)
	}
}

// StorageBucketsInsertPredefinedDefaultObjectACLEnum - Apply a predefined set of default object access controls to this bucket.
type StorageBucketsInsertPredefinedDefaultObjectACLEnum string

const (
	StorageBucketsInsertPredefinedDefaultObjectACLEnumAuthenticatedRead      StorageBucketsInsertPredefinedDefaultObjectACLEnum = "authenticatedRead"
	StorageBucketsInsertPredefinedDefaultObjectACLEnumBucketOwnerFullControl StorageBucketsInsertPredefinedDefaultObjectACLEnum = "bucketOwnerFullControl"
	StorageBucketsInsertPredefinedDefaultObjectACLEnumBucketOwnerRead        StorageBucketsInsertPredefinedDefaultObjectACLEnum = "bucketOwnerRead"
	StorageBucketsInsertPredefinedDefaultObjectACLEnumPrivate                StorageBucketsInsertPredefinedDefaultObjectACLEnum = "private"
	StorageBucketsInsertPredefinedDefaultObjectACLEnumProjectPrivate         StorageBucketsInsertPredefinedDefaultObjectACLEnum = "projectPrivate"
	StorageBucketsInsertPredefinedDefaultObjectACLEnumPublicRead             StorageBucketsInsertPredefinedDefaultObjectACLEnum = "publicRead"
)

func (e StorageBucketsInsertPredefinedDefaultObjectACLEnum) ToPointer() *StorageBucketsInsertPredefinedDefaultObjectACLEnum {
	return &e
}

func (e *StorageBucketsInsertPredefinedDefaultObjectACLEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authenticatedRead":
		fallthrough
	case "bucketOwnerFullControl":
		fallthrough
	case "bucketOwnerRead":
		fallthrough
	case "private":
		fallthrough
	case "projectPrivate":
		fallthrough
	case "publicRead":
		*e = StorageBucketsInsertPredefinedDefaultObjectACLEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageBucketsInsertPredefinedDefaultObjectACLEnum: %v", v)
	}
}

// StorageBucketsInsertProjectionEnum - Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
type StorageBucketsInsertProjectionEnum string

const (
	StorageBucketsInsertProjectionEnumFull  StorageBucketsInsertProjectionEnum = "full"
	StorageBucketsInsertProjectionEnumNoACL StorageBucketsInsertProjectionEnum = "noAcl"
)

func (e StorageBucketsInsertProjectionEnum) ToPointer() *StorageBucketsInsertProjectionEnum {
	return &e
}

func (e *StorageBucketsInsertProjectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "full":
		fallthrough
	case "noAcl":
		*e = StorageBucketsInsertProjectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageBucketsInsertProjectionEnum: %v", v)
	}
}

type StorageBucketsInsertRequest struct {
	Bucket *shared.Bucket `request:"mediaType=application/json"`
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Apply a predefined set of access controls to this bucket.
	PredefinedACL *StorageBucketsInsertPredefinedACLEnum `queryParam:"style=form,explode=true,name=predefinedAcl"`
	// Apply a predefined set of default object access controls to this bucket.
	PredefinedDefaultObjectACL *StorageBucketsInsertPredefinedDefaultObjectACLEnum `queryParam:"style=form,explode=true,name=predefinedDefaultObjectAcl"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// A valid API project identifier.
	Project string `queryParam:"style=form,explode=true,name=project"`
	// Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
	Projection *StorageBucketsInsertProjectionEnum `queryParam:"style=form,explode=true,name=projection"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Upload protocol for media (e.g. "media", "multipart", "resumable").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
	// The project to be billed for this request.
	UserProject *string `queryParam:"style=form,explode=true,name=userProject"`
}

type StorageBucketsInsertResponse struct {
	// Successful response
	Bucket      *shared.Bucket
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
