/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetFacilitiesByLocationSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=apikey",
  })
  apikey: string;
}

/**
 * Optional facility type search filter
 */
export enum GetFacilitiesByLocationTypeEnum {
  Health = "health",
  Cemetery = "cemetery",
  Benefits = "benefits",
  VetCenter = "vet_center",
}

export class GetFacilitiesByLocationRequest extends SpeakeasyBase {
  /**
   * Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=bbox[]",
  })
  bbox?: number[];

  /**
   * List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ids" })
  ids?: string[];

  /**
   * Latitude of point to search for facilities, in WGS84 coordinate reference system.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=lat" })
  lat?: number;

  /**
   * Longitude of point to search for facilities, in WGS84 coordinate reference system.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=long" })
  long?: number;

  /**
   * Optional facility mobile search filter
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=mobile",
  })
  mobile?: boolean;

  /**
   * Page of results to return per paginated response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Number of results to return per paginated response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Optional facility service search filter
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=services[]",
  })
  services?: string[];

  /**
   * State in which to search for facilities. Except in rare cases, this is two characters.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: string;

  /**
   * Optional facility type search filter
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: GetFacilitiesByLocationTypeEnum;

  /**
   * VISN search of matching facilities.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=visn" })
  visn?: number;

  /**
   * Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=zip" })
  zip?: string;
}

export class GetFacilitiesByLocationResponse extends SpeakeasyBase {
  /**
   * Requested format unacceptable
   */
  @SpeakeasyMetadata()
  apiError?: shared.ApiError;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  facilitiesResponse?: shared.FacilitiesResponse;

  /**
   * Missing API token
   */
  @SpeakeasyMetadata()
  genericError?: shared.GenericError;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  geoFacilitiesResponse?: shared.GeoFacilitiesResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
