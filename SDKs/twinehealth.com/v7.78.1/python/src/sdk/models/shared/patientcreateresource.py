"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import archivehistory as shared_archivehistory
from ..shared import patientidentifier as shared_patientidentifier
from ..shared import phonenumber as shared_phonenumber
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PatientCreateResourceAttributesGenderEnum(str, Enum):
    MALE = 'male'
    FEMALE = 'female'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceAttributesInput:
    
    addresses: Optional[list[shared_address.Address]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})  
    archive_history: Optional[list[shared_archivehistory.ArchiveHistory]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archive_history'), 'exclude': lambda f: f is None }})  
    birth_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birth_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_address'), 'exclude': lambda f: f is None }})  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})  
    gender: Optional[PatientCreateResourceAttributesGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})  
    identifiers: Optional[list[shared_patientidentifier.PatientIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifiers'), 'exclude': lambda f: f is None }})  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""Coach's note about the patient. Not visible to the patient."""  
    phone_numbers: Optional[list[shared_phonenumber.PhoneNumber]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_numbers'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsCoachesDataMeta:
    
    primary: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary'), 'exclude': lambda f: f is None }})  
    
class PatientCreateResourceRelationshipsCoachesDataTypeEnum(str, Enum):
    COACH = 'coach'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsCoachesData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: PatientCreateResourceRelationshipsCoachesDataTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    meta: Optional[PatientCreateResourceRelationshipsCoachesDataMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsCoachesInput:
    
    data: list[PatientCreateResourceRelationshipsCoachesData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsGroupsDataMetaQuery:
    r"""1. If the query does not return any groups, a group with the specified name will be created and related to the patient.
    2. If the query returns one group, that group will be related to the patient.
    3. If the query returns more than one group, the creation of the patient will fail.
    """
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    organization: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsGroupsDataMeta:
    r"""Allows the specification of a query for a group rather than providing a group id directly"""
    
    query: PatientCreateResourceRelationshipsGroupsDataMetaQuery = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})
    r"""1. If the query does not return any groups, a group with the specified name will be created and related to the patient.
    2. If the query returns one group, that group will be related to the patient.
    3. If the query returns more than one group, the creation of the patient will fail.
    """  
    
class PatientCreateResourceRelationshipsGroupsDataTypeEnum(str, Enum):
    GROUP = 'group'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsGroupsData:
    
    type: PatientCreateResourceRelationshipsGroupsDataTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required if the `meta.query` is not defined."""  
    meta: Optional[PatientCreateResourceRelationshipsGroupsDataMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""Allows the specification of a query for a group rather than providing a group id directly"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsGroups:
    
    data: list[PatientCreateResourceRelationshipsGroupsData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceRelationshipsInput:
    
    groups: PatientCreateResourceRelationshipsGroups = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})  
    coaches: Optional[PatientCreateResourceRelationshipsCoachesInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coaches'), 'exclude': lambda f: f is None }})  
    
class PatientCreateResourceTypeEnum(str, Enum):
    PATIENT = 'patient'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCreateResourceInput:
    r"""Note that `data` can either be a single object or an array of objects matching the schema specified here
    (bulk create).
    """
    
    attributes: PatientCreateResourceAttributesInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})  
    type: PatientCreateResourceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[PatientCreateResourceRelationshipsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    