"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitymention as shared_entitymention
from ..shared import sentiment as shared_sentiment
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EntityTypeEnum(str, Enum):
    r"""The entity type."""
    UNKNOWN = 'UNKNOWN'
    PERSON = 'PERSON'
    LOCATION = 'LOCATION'
    ORGANIZATION = 'ORGANIZATION'
    EVENT = 'EVENT'
    WORK_OF_ART = 'WORK_OF_ART'
    CONSUMER_GOOD = 'CONSUMER_GOOD'
    OTHER = 'OTHER'
    PHONE_NUMBER = 'PHONE_NUMBER'
    ADDRESS = 'ADDRESS'
    DATE = 'DATE'
    NUMBER = 'NUMBER'
    PRICE = 'PRICE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Entity:
    r"""Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities."""
    
    mentions: Optional[list[shared_entitymention.EntityMention]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentions'), 'exclude': lambda f: f is None }})
    r"""The mentions of this entity in the input document. The API currently supports proper noun mentions."""  
    metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The representative name for the entity."""  
    salience: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salience'), 'exclude': lambda f: f is None }})
    r"""The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient."""  
    sentiment: Optional[shared_sentiment.Sentiment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentiment'), 'exclude': lambda f: f is None }})
    r"""Represents the feeling associated with the entire text or entities in the text. Next ID: 6"""  
    type: Optional[EntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The entity type."""  
    