// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
	"time"
)

type ReportMeetingsPathParams struct {
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// ReportMeetingsTypeEnum - The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.
type ReportMeetingsTypeEnum string

const (
	ReportMeetingsTypeEnumPast    ReportMeetingsTypeEnum = "past"
	ReportMeetingsTypeEnumPastOne ReportMeetingsTypeEnum = "pastOne"
)

func (e *ReportMeetingsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "pastOne":
		*e = ReportMeetingsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportMeetingsTypeEnum: %s", s)
	}
}

type ReportMeetingsQueryParams struct {
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
	// The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.
	Type *ReportMeetingsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ReportMeetingsRequest struct {
	PathParams  ReportMeetingsPathParams
	QueryParams ReportMeetingsQueryParams
}

type ReportMeetings200ApplicationXMLMeetingsCustomKeys struct {
	// Custom key associated with the user.
	Key *string
	// Value of the custom key associated with the user.
	Value *string
}

type ReportMeetings200ApplicationXMLMeetings struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []ReportMeetings200ApplicationXMLMeetingsCustomKeys
	// Meeting duration.
	Duration *int64
	// Meeting end time.
	EndTime *time.Time
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-):            Unique identifier of the meeting in "**long**" format(represented as int64
	// data type in JSON), also known as the meeting number.
	//
	ID *int64
	// Number of meeting participants.
	ParticipantsCount *int64
	// Indicates whether the meeting was created directly through Zoom or through an API request.
	Source *string
	// Meeting start time.
	StartTime *time.Time
	// Meeting topic.
	Topic *string
	// Sum of meeting minutes from all participants in the meeting.
	TotalMinutes *int64
	// Meeting Type:<br> `1` - Instant Meeting<br> `2` - Scheduled Meeting<br> `3` - Recurring Meeting with no fixed time.<br>
	// `4` - This value is returned if the meeting was started using a Personal Meeting ID. <br>
	// `8` - Recurring Meeting with a fixed time.
	Type *int64
	// User email.
	UserEmail *string
	// User display name.
	UserName *string
	// Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string
}

// ReportMeetings200ApplicationXML - Pagination Object.
type ReportMeetings200ApplicationXML struct {
	// Start date for this report.
	From *types.Date
	// Array of meeting objects.
	Meetings []ReportMeetings200ApplicationXMLMeetings
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// **Deprecated**: This field has been deprecated. Please use the "next_page_token" field for pagination instead of this field.
	//
	// The page number of the current results.
	PageNumber *int64
	// The number of records returned with a single API call.
	PageSize *int64
	// End date for this report.
	To *types.Date
	// The total number of all the records available across pages.
	TotalRecords *int64
}

type ReportMeetings200ApplicationJSONMeetingsCustomKeys struct {
	// Custom key associated with the user.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the user.
	Value *string `json:"value,omitempty"`
}

type ReportMeetings200ApplicationJSONMeetings struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []ReportMeetings200ApplicationJSONMeetingsCustomKeys `json:"custom_keys,omitempty"`
	// Meeting duration.
	Duration *int64 `json:"duration,omitempty"`
	// Meeting end time.
	EndTime *time.Time `json:"end_time,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-):            Unique identifier of the meeting in "**long**" format(represented as int64
	// data type in JSON), also known as the meeting number.
	//
	ID *int64 `json:"id,omitempty"`
	// Number of meeting participants.
	ParticipantsCount *int64 `json:"participants_count,omitempty"`
	// Indicates whether the meeting was created directly through Zoom or through an API request.
	Source *string `json:"source,omitempty"`
	// Meeting start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Sum of meeting minutes from all participants in the meeting.
	TotalMinutes *int64 `json:"total_minutes,omitempty"`
	// Meeting Type:<br> `1` - Instant Meeting<br> `2` - Scheduled Meeting<br> `3` - Recurring Meeting with no fixed time.<br>
	// `4` - This value is returned if the meeting was started using a Personal Meeting ID. <br>
	// `8` - Recurring Meeting with a fixed time.
	Type *int64 `json:"type,omitempty"`
	// User email.
	UserEmail *string `json:"user_email,omitempty"`
	// User display name.
	UserName *string `json:"user_name,omitempty"`
	// Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

// ReportMeetings200ApplicationJSON - Pagination Object.
type ReportMeetings200ApplicationJSON struct {
	// Start date for this report.
	From *types.Date `json:"from,omitempty"`
	// Array of meeting objects.
	Meetings []ReportMeetings200ApplicationJSONMeetings `json:"meetings,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// **Deprecated**: This field has been deprecated. Please use the "next_page_token" field for pagination instead of this field.
	//
	// The page number of the current results.
	PageNumber *int64 `json:"page_number,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// End date for this report.
	To *types.Date `json:"to,omitempty"`
	// The total number of all the records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type ReportMeetingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Active or inactive hosts report returned.<br>
	//
	ReportMeetings200ApplicationJSONObject *ReportMeetings200ApplicationJSON
}
