/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies, as a map, one or more property-based conditions that filter the results of a query for findings.
 */
export class GetFindingStatisticsRequestBodyFindingCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.CriterionAdditionalProperties })
  @Expose({ name: "criterion" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.CriterionAdditionalProperties> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.CriterionAdditionalProperties
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  criterion?: Record<string, shared.CriterionAdditionalProperties>;
}

/**
 * <p>The finding property to use to group the query results. Valid values are:</p> <ul><li><p>classificationDetails.jobId - The unique identifier for the classification job that produced the finding.</p></li> <li><p>resourcesAffected.s3Bucket.name - The name of the S3 bucket that the finding applies to.</p></li> <li><p>severity.description - The severity level of the finding, such as High or Medium.</p></li> <li><p>type - The type of finding, such as Policy:IAMUser/S3BucketPublic and SensitiveData:S3Object/Personal.</p></li></ul>
 */
export enum GetFindingStatisticsRequestBodyGroupByEnum {
  ResourcesAffectedS3BucketName = "resourcesAffected.s3Bucket.name",
  Type = "type",
  ClassificationDetailsJobId = "classificationDetails.jobId",
  SeverityDescription = "severity.description",
}

/**
 * Specifies criteria for sorting the results of a query that retrieves aggregated statistical data about findings.
 */
export class GetFindingStatisticsRequestBodySortCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributeName" })
  attributeName?: shared.FindingStatisticsSortAttributeNameEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "orderBy" })
  orderBy?: shared.OrderByEnum;
}

export class GetFindingStatisticsRequestBody extends SpeakeasyBase {
  /**
   * Specifies, as a map, one or more property-based conditions that filter the results of a query for findings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "findingCriteria" })
  @Type(() => GetFindingStatisticsRequestBodyFindingCriteria)
  findingCriteria?: GetFindingStatisticsRequestBodyFindingCriteria;

  /**
   * <p>The finding property to use to group the query results. Valid values are:</p> <ul><li><p>classificationDetails.jobId - The unique identifier for the classification job that produced the finding.</p></li> <li><p>resourcesAffected.s3Bucket.name - The name of the S3 bucket that the finding applies to.</p></li> <li><p>severity.description - The severity level of the finding, such as High or Medium.</p></li> <li><p>type - The type of finding, such as Policy:IAMUser/S3BucketPublic and SensitiveData:S3Object/Personal.</p></li></ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupBy" })
  groupBy: GetFindingStatisticsRequestBodyGroupByEnum;

  /**
   * The maximum number of items to include in each page of the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * Specifies criteria for sorting the results of a query that retrieves aggregated statistical data about findings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortCriteria" })
  @Type(() => GetFindingStatisticsRequestBodySortCriteria)
  sortCriteria?: GetFindingStatisticsRequestBodySortCriteria;
}

export class GetFindingStatisticsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetFindingStatisticsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GetFindingStatisticsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getFindingStatisticsResponse?: shared.GetFindingStatisticsResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
