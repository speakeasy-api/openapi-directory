"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bestpodcastsresponse as shared_bestpodcastsresponse
from ..shared import safemodeparam_enum as shared_safemodeparam_enum
from enum import Enum
from typing import Optional

class GetBestPodcastsSortEnum(str, Enum):
    r"""How do you want to sort these podcasts?
    If you'd like to sort by popularity, please use **listen_score**.
    """
    RECENT_ADDED_FIRST = 'recent_added_first'
    OLDEST_ADDED_FIRST = 'oldest_added_first'
    RECENT_PUBLISHED_FIRST = 'recent_published_first'
    OLDEST_PUBLISHED_FIRST = 'oldest_published_first'
    LISTEN_SCORE = 'listen_score'


@dataclasses.dataclass
class GetBestPodcastsRequest:
    
    x_listen_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-ListenAPI-Key', 'style': 'simple', 'explode': False }})
    r"""Get API Key on listennotes.com/api"""  
    genre_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'genre_id', 'style': 'form', 'explode': True }})
    r"""You can get the id from `GET /genres`. If not specified, it'll be the overall best podcasts, which can be considered as a special genre."""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""Filter best podcasts by language.
    You can get a list of supported languages (e.g., English, Chinese, Japanese...) from `GET /languages`.
    If not specified, you'll get \"best podcasts\" in any language.
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of those podcasts in this genre."""  
    publisher_region: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'publisher_region', 'style': 'form', 'explode': True }})
    r"""Filter best podcasts by the publisher's country/region.
    This is to narrow down the results to include \"best podcasts\" produced in a specific country/region.
    You can get the supported country codes (e.g., us, jp, gb...) from `GET /regions`.
    If not specified, you'll get \"best podcasts\" produced in any country/region.
    If you want to get a country/region's \"best podcasts\" that are also produced in that country/region,
    then you need to specify both **region** and **publisher_region**,
    e.g., `region=jp` and `publisher_region=jp`.
    """  
    region: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'region', 'style': 'form', 'explode': True }})
    r"""Filter best podcasts by country/region.
    Please note that podcasts that are \"best\" in a country/region may not be produced in that country/region.
    For example, a podcast from the US may be very popular in Canada.
    You can get the supported country codes (e.g., us, jp, gb...) from `GET /regions`.
    If not specified, you'll get \"best podcasts\" in United States.
    """  
    safe_mode: Optional[shared_safemodeparam_enum.SafeModeParamEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'safe_mode', 'style': 'form', 'explode': True }})
    r"""Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no."""  
    sort: Optional[GetBestPodcastsSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""How do you want to sort these podcasts?
    If you'd like to sort by popularity, please use **listen_score**.
    """  
    

@dataclasses.dataclass
class GetBestPodcastsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    best_podcasts_response: Optional[shared_bestpodcastsresponse.BestPodcastsResponse] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    