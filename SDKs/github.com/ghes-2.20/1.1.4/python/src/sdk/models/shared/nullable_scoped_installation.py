"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import app_permissions as shared_app_permissions
from ..shared import simple_user as shared_simple_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NullableScopedInstallationRepositorySelectionEnum(str, Enum):
    r"""Describe whether all repositories have been selected or there's a selection involved"""
    ALL = 'all'
    SELECTED = 'selected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NullableScopedInstallation:
    
    account: shared_simple_user.SimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})
    r"""Simple User"""  
    permissions: shared_app_permissions.AppPermissions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions') }})
    r"""The permissions granted to the user-to-server access token."""  
    repositories_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories_url') }})  
    repository_selection: NullableScopedInstallationRepositorySelectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_selection') }})
    r"""Describe whether all repositories have been selected or there's a selection involved"""  
    single_file_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file_name') }})  
    has_multiple_single_files: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_multiple_single_files'), 'exclude': lambda f: f is None }})  
    single_file_paths: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file_paths'), 'exclude': lambda f: f is None }})  
    