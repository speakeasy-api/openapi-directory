"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_customers_id_json(self, request: operations.DeleteCustomersIDJSONRequest) -> operations.DeleteCustomersIDJSONResponse:
        r"""Delete an existing Customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomersIDJSONRequest, base_url, '/customers/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteCustomersIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomersIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_customers_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_customers_json(self, request: operations.GetCustomersJSONRequest) -> operations.GetCustomersJSONResponse:
        r"""Retrieve all Customers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers.json'
        
        query_params = utils.get_query_params(operations.GetCustomersJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Customer]])
                res.customers = out

        return res

    def get_customers_count_json(self, request: operations.GetCustomersCountJSONRequest) -> operations.GetCustomersCountJSONResponse:
        r"""Count all Customers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers/count.json'
        
        query_params = utils.get_query_params(operations.GetCustomersCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomersCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out

        return res

    def get_customers_email_email_json(self, request: operations.GetCustomersEmailEmailJSONRequest) -> operations.GetCustomersEmailEmailJSONResponse:
        r"""Retrieve a single Customer by email."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomersEmailEmailJSONRequest, base_url, '/customers/email/{email}.json', request)
        
        query_params = utils.get_query_params(operations.GetCustomersEmailEmailJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomersEmailEmailJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Customer])
                res.customer = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_customers_id_json(self, request: operations.GetCustomersIDJSONRequest) -> operations.GetCustomersIDJSONResponse:
        r"""Retrieve a single Customer by id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomersIDJSONRequest, base_url, '/customers/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetCustomersIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomersIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Customer])
                res.customer = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_customers_json(self, request: operations.PostCustomersJSONRequest) -> operations.PostCustomersJSONResponse:
        r"""Create a new Customer."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_with_password_no_id", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostCustomersJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCustomersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Customer])
                res.customer = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def put_customers_id_json(self, request: operations.PutCustomersIDJSONRequest) -> operations.PutCustomersIDJSONResponse:
        r"""Update a new Customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCustomersIDJSONRequest, base_url, '/customers/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_with_password_no_id", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutCustomersIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCustomersIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Customer])
                res.customer = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    