"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Mylibrary:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def books_mylibrary_annotations_delete(self, request: operations.BooksMylibraryAnnotationsDeleteRequest, security: operations.BooksMylibraryAnnotationsDeleteSecurity) -> operations.BooksMylibraryAnnotationsDeleteResponse:
        r"""Deletes an annotation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryAnnotationsDeleteRequest, base_url, '/books/v1/mylibrary/annotations/{annotationId}', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryAnnotationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryAnnotationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def books_mylibrary_annotations_insert(self, request: operations.BooksMylibraryAnnotationsInsertRequest, security: operations.BooksMylibraryAnnotationsInsertSecurity) -> operations.BooksMylibraryAnnotationsInsertResponse:
        r"""Inserts a new annotation."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/books/v1/mylibrary/annotations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "annotation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BooksMylibraryAnnotationsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryAnnotationsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Annotation])
                res.annotation = out

        return res

    def books_mylibrary_annotations_list(self, request: operations.BooksMylibraryAnnotationsListRequest, security: operations.BooksMylibraryAnnotationsListSecurity) -> operations.BooksMylibraryAnnotationsListResponse:
        r"""Retrieves a list of annotations, possibly filtered."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/books/v1/mylibrary/annotations'
        
        query_params = utils.get_query_params(operations.BooksMylibraryAnnotationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryAnnotationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Annotations])
                res.annotations = out

        return res

    def books_mylibrary_annotations_summary(self, request: operations.BooksMylibraryAnnotationsSummaryRequest, security: operations.BooksMylibraryAnnotationsSummarySecurity) -> operations.BooksMylibraryAnnotationsSummaryResponse:
        r"""Gets the summary of specified layers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/books/v1/mylibrary/annotations/summary'
        
        query_params = utils.get_query_params(operations.BooksMylibraryAnnotationsSummaryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryAnnotationsSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AnnotationsSummary])
                res.annotations_summary = out

        return res

    def books_mylibrary_annotations_update(self, request: operations.BooksMylibraryAnnotationsUpdateRequest, security: operations.BooksMylibraryAnnotationsUpdateSecurity) -> operations.BooksMylibraryAnnotationsUpdateResponse:
        r"""Updates an existing annotation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryAnnotationsUpdateRequest, base_url, '/books/v1/mylibrary/annotations/{annotationId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "annotation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BooksMylibraryAnnotationsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryAnnotationsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Annotation])
                res.annotation = out

        return res

    def books_mylibrary_bookshelves_add_volume(self, request: operations.BooksMylibraryBookshelvesAddVolumeRequest, security: operations.BooksMylibraryBookshelvesAddVolumeSecurity) -> operations.BooksMylibraryBookshelvesAddVolumeResponse:
        r"""Adds a volume to a bookshelf."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryBookshelvesAddVolumeRequest, base_url, '/books/v1/mylibrary/bookshelves/{shelf}/addVolume', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryBookshelvesAddVolumeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryBookshelvesAddVolumeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def books_mylibrary_bookshelves_clear_volumes(self, request: operations.BooksMylibraryBookshelvesClearVolumesRequest, security: operations.BooksMylibraryBookshelvesClearVolumesSecurity) -> operations.BooksMylibraryBookshelvesClearVolumesResponse:
        r"""Clears all volumes from a bookshelf."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryBookshelvesClearVolumesRequest, base_url, '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryBookshelvesClearVolumesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryBookshelvesClearVolumesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def books_mylibrary_bookshelves_get(self, request: operations.BooksMylibraryBookshelvesGetRequest, security: operations.BooksMylibraryBookshelvesGetSecurity) -> operations.BooksMylibraryBookshelvesGetResponse:
        r"""Retrieves metadata for a specific bookshelf belonging to the authenticated user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryBookshelvesGetRequest, base_url, '/books/v1/mylibrary/bookshelves/{shelf}', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryBookshelvesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryBookshelvesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bookshelf])
                res.bookshelf = out

        return res

    def books_mylibrary_bookshelves_list(self, request: operations.BooksMylibraryBookshelvesListRequest, security: operations.BooksMylibraryBookshelvesListSecurity) -> operations.BooksMylibraryBookshelvesListResponse:
        r"""Retrieves a list of bookshelves belonging to the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/books/v1/mylibrary/bookshelves'
        
        query_params = utils.get_query_params(operations.BooksMylibraryBookshelvesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryBookshelvesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bookshelves])
                res.bookshelves = out

        return res

    def books_mylibrary_bookshelves_move_volume(self, request: operations.BooksMylibraryBookshelvesMoveVolumeRequest, security: operations.BooksMylibraryBookshelvesMoveVolumeSecurity) -> operations.BooksMylibraryBookshelvesMoveVolumeResponse:
        r"""Moves a volume within a bookshelf."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryBookshelvesMoveVolumeRequest, base_url, '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryBookshelvesMoveVolumeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryBookshelvesMoveVolumeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def books_mylibrary_bookshelves_remove_volume(self, request: operations.BooksMylibraryBookshelvesRemoveVolumeRequest, security: operations.BooksMylibraryBookshelvesRemoveVolumeSecurity) -> operations.BooksMylibraryBookshelvesRemoveVolumeResponse:
        r"""Removes a volume from a bookshelf."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryBookshelvesRemoveVolumeRequest, base_url, '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryBookshelvesRemoveVolumeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryBookshelvesRemoveVolumeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def books_mylibrary_bookshelves_volumes_list(self, request: operations.BooksMylibraryBookshelvesVolumesListRequest, security: operations.BooksMylibraryBookshelvesVolumesListSecurity) -> operations.BooksMylibraryBookshelvesVolumesListResponse:
        r"""Gets volume information for volumes on a bookshelf."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryBookshelvesVolumesListRequest, base_url, '/books/v1/mylibrary/bookshelves/{shelf}/volumes', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryBookshelvesVolumesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryBookshelvesVolumesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Volumes])
                res.volumes = out

        return res

    def books_mylibrary_readingpositions_get(self, request: operations.BooksMylibraryReadingpositionsGetRequest, security: operations.BooksMylibraryReadingpositionsGetSecurity) -> operations.BooksMylibraryReadingpositionsGetResponse:
        r"""Retrieves my reading position information for a volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryReadingpositionsGetRequest, base_url, '/books/v1/mylibrary/readingpositions/{volumeId}', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryReadingpositionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryReadingpositionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReadingPosition])
                res.reading_position = out

        return res

    def books_mylibrary_readingpositions_set_position(self, request: operations.BooksMylibraryReadingpositionsSetPositionRequest, security: operations.BooksMylibraryReadingpositionsSetPositionSecurity) -> operations.BooksMylibraryReadingpositionsSetPositionResponse:
        r"""Sets my reading position information for a volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksMylibraryReadingpositionsSetPositionRequest, base_url, '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition', request)
        
        query_params = utils.get_query_params(operations.BooksMylibraryReadingpositionsSetPositionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksMylibraryReadingpositionsSetPositionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    