"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import orderby as shared_orderby
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PivotMetricAggregationsEnum(str, Enum):
    METRIC_AGGREGATION_UNSPECIFIED = 'METRIC_AGGREGATION_UNSPECIFIED'
    TOTAL = 'TOTAL'
    MINIMUM = 'MINIMUM'
    MAXIMUM = 'MAXIMUM'
    COUNT = 'COUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Pivot:
    r"""Describes the visible dimension columns and rows in the report response."""
    
    field_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldNames'), 'exclude': lambda f: f is None }})
    r"""Dimension names for visible columns in the report response. Including \\"dateRange\\" produces a date range column; for each row in the response, dimension values in the date range column will indicate the corresponding date range from the request."""  
    limit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""The number of unique combinations of dimension values to return in this pivot. The `limit` parameter is required. A `limit` of 10,000 is common for single pivot requests. The product of the `limit` for each `pivot` in a `RunPivotReportRequest` must not exceed 100,000. For example, a two pivot request with `limit: 1000` in each pivot will fail because the product is `1,000,000`."""  
    metric_aggregations: Optional[list[PivotMetricAggregationsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricAggregations'), 'exclude': lambda f: f is None }})
    r"""Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations."""  
    offset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""The row count of the start row. The first row is counted as row 0."""  
    order_bys: Optional[list[shared_orderby.OrderBy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderBys'), 'exclude': lambda f: f is None }})
    r"""Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names."""  
    