"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2fileset as shared_googleprivacydlpv2fileset
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum(str, Enum):
    FILE_TYPE_UNSPECIFIED = 'FILE_TYPE_UNSPECIFIED'
    BINARY_FILE = 'BINARY_FILE'
    TEXT_FILE = 'TEXT_FILE'
    IMAGE = 'IMAGE'
    WORD = 'WORD'
    PDF = 'PDF'
    AVRO = 'AVRO'
    CSV = 'CSV'
    TSV = 'TSV'
    POWERPOINT = 'POWERPOINT'
    EXCEL = 'EXCEL'

class GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum(str, Enum):
    SAMPLE_METHOD_UNSPECIFIED = 'SAMPLE_METHOD_UNSPECIFIED'
    TOP = 'TOP'
    RANDOM_START = 'RANDOM_START'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2CloudStorageOptions:
    r"""Options defining a file or a set of files within a Cloud Storage bucket."""
    
    bytes_limit_per_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytesLimitPerFile'), 'exclude': lambda f: f is None }})
    r"""Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested."""  
    bytes_limit_per_file_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytesLimitPerFilePercent'), 'exclude': lambda f: f is None }})
    r"""Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested."""  
    file_set: Optional[shared_googleprivacydlpv2fileset.GooglePrivacyDlpV2FileSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileSet'), 'exclude': lambda f: f is None }})
    r"""Set of files to scan."""  
    files_limit_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filesLimitPercent'), 'exclude': lambda f: f is None }})
    r"""Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0."""  
    file_types: Optional[list[GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileTypes'), 'exclude': lambda f: f is None }})
    r"""List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'."""  
    sample_method: Optional[GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleMethod'), 'exclude': lambda f: f is None }})  
    