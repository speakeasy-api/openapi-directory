"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .cache import Cache
from .conversation import Conversation
from .events import Events
from .permissions import Permissions
from .restricted import Restricted
from .schemas import Schemas
from .sessions import Sessions
from .story import Story
from .story_collaborators import StoryCollaborators
from .views import Views
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "/story",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API"""
    cache: Cache
    conversation: Conversation
    events: Events
    permissions: Permissions
    r"""Permissions and Authorization"""
    restricted: Restricted
    schemas: Schemas
    sessions: Sessions
    story: Story
    r"""Story"""
    story_collaborators: StoryCollaborators
    r"""Story Collaborators"""
    views: Views

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.cache = Cache(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.conversation = Conversation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.events = Events(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.permissions = Permissions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.restricted = Restricted(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.schemas = Schemas(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sessions = Sessions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.story = Story(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.story_collaborators = StoryCollaborators(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.views = Views(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def get_environment(self) -> operations.GetEnvironmentResponse:
        r"""Environment: Get
        pass rendering metadata to the client-side scripts
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/environment/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_environment_200_application_json_object = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def spec_no_tags(self) -> operations.SpecNoTagsResponse:
        r"""Specification: No tags
        json-formatted version of this spec with the tags removed to help with codegen processes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/no_tags_spec'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpecNoTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    