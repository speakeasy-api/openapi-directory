/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * InterconnectAttachment - Represents an Interconnect Attachment (VLAN) resource. You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read Creating VLAN Attachments.
 */
public class InterconnectAttachment {
    /**
     * Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adminEnabled")
    public Boolean adminEnabled;

    public InterconnectAttachment withAdminEnabled(Boolean adminEnabled) {
        this.adminEnabled = adminEnabled;
        return this;
    }
    
    /**
     * Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bandwidth")
    public InterconnectAttachmentBandwidthEnum bandwidth;

    public InterconnectAttachment withBandwidth(InterconnectAttachmentBandwidthEnum bandwidth) {
        this.bandwidth = bandwidth;
        return this;
    }
    
    /**
     * This field is not available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidateIpv6Subnets")
    public String[] candidateIpv6Subnets;

    public InterconnectAttachment withCandidateIpv6Subnets(String[] candidateIpv6Subnets) {
        this.candidateIpv6Subnets = candidateIpv6Subnets;
        return this;
    }
    
    /**
     * Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidateSubnets")
    public String[] candidateSubnets;

    public InterconnectAttachment withCandidateSubnets(String[] candidateSubnets) {
        this.candidateSubnets = candidateSubnets;
        return this;
    }
    
    /**
     * [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudRouterIpAddress")
    public String cloudRouterIpAddress;

    public InterconnectAttachment withCloudRouterIpAddress(String cloudRouterIpAddress) {
        this.cloudRouterIpAddress = cloudRouterIpAddress;
        return this;
    }
    
    /**
     * [Output Only] IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudRouterIpv6Address")
    public String cloudRouterIpv6Address;

    public InterconnectAttachment withCloudRouterIpv6Address(String cloudRouterIpv6Address) {
        this.cloudRouterIpv6Address = cloudRouterIpv6Address;
        return this;
    }
    
    /**
     * This field is not available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudRouterIpv6InterfaceId")
    public String cloudRouterIpv6InterfaceId;

    public InterconnectAttachment withCloudRouterIpv6InterfaceId(String cloudRouterIpv6InterfaceId) {
        this.cloudRouterIpv6InterfaceId = cloudRouterIpv6InterfaceId;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;

    public InterconnectAttachment withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerRouterIpAddress")
    public String customerRouterIpAddress;

    public InterconnectAttachment withCustomerRouterIpAddress(String customerRouterIpAddress) {
        this.customerRouterIpAddress = customerRouterIpAddress;
        return this;
    }
    
    /**
     * [Output Only] IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerRouterIpv6Address")
    public String customerRouterIpv6Address;

    public InterconnectAttachment withCustomerRouterIpv6Address(String customerRouterIpv6Address) {
        this.customerRouterIpv6Address = customerRouterIpv6Address;
        return this;
    }
    
    /**
     * This field is not available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerRouterIpv6InterfaceId")
    public String customerRouterIpv6InterfaceId;

    public InterconnectAttachment withCustomerRouterIpv6InterfaceId(String customerRouterIpv6InterfaceId) {
        this.customerRouterIpv6InterfaceId = customerRouterIpv6InterfaceId;
        return this;
    }
    
    /**
     * [Output Only] Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates that the Dataplane is version 1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataplaneVersion")
    public Integer dataplaneVersion;

    public InterconnectAttachment withDataplaneVersion(Integer dataplaneVersion) {
        this.dataplaneVersion = dataplaneVersion;
        return this;
    }
    
    /**
     * An optional description of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public InterconnectAttachment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY - AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("edgeAvailabilityDomain")
    public InterconnectAttachmentEdgeAvailabilityDomainEnum edgeAvailabilityDomain;

    public InterconnectAttachment withEdgeAvailabilityDomain(InterconnectAttachmentEdgeAvailabilityDomainEnum edgeAvailabilityDomain) {
        this.edgeAvailabilityDomain = edgeAvailabilityDomain;
        return this;
    }
    
    /**
     * Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption")
    public InterconnectAttachmentEncryptionEnum encryption;

    public InterconnectAttachment withEncryption(InterconnectAttachmentEncryptionEnum encryption) {
        this.encryption = encryption;
        return this;
    }
    
    /**
     * [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googleReferenceId")
    public String googleReferenceId;

    public InterconnectAttachment withGoogleReferenceId(String googleReferenceId) {
        this.googleReferenceId = googleReferenceId;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public InterconnectAttachment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * URL of the underlying Interconnect object that this attachment's traffic will traverse through.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interconnect")
    public String interconnect;

    public InterconnectAttachment withInterconnect(String interconnect) {
        this.interconnect = interconnect;
        return this;
    }
    
    /**
     * A list of URLs of addresses that have been reserved for the VLAN attachment. Used only for the VLAN attachment that has the encryption option as IPSEC. The addresses must be regional internal IP address ranges. When creating an HA VPN gateway over the VLAN attachment, if the attachment is configured to use a regional internal IP address, then the VPN gateway's IP address is allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is paired to this VLAN attachment, then a regional internal IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this VLAN attachment. If this field is not specified when creating the VLAN attachment, then later on when creating an HA VPN gateway on this VLAN attachment, the HA VPN gateway's IP address is allocated from the regional external IP address pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipsecInternalAddresses")
    public String[] ipsecInternalAddresses;

    public InterconnectAttachment withIpsecInternalAddresses(String[] ipsecInternalAddresses) {
        this.ipsecInternalAddresses = ipsecInternalAddresses;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public InterconnectAttachment withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A fingerprint for the labels being applied to this InterconnectAttachment, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InterconnectAttachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labelFingerprint")
    public String labelFingerprint;

    public InterconnectAttachment withLabelFingerprint(String labelFingerprint) {
        this.labelFingerprint = labelFingerprint;
        return this;
    }
    
    /**
     * Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public InterconnectAttachment withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mtu")
    public Integer mtu;

    public InterconnectAttachment withMtu(Integer mtu) {
        this.mtu = mtu;
        return this;
    }
    
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public InterconnectAttachment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationalStatus")
    public InterconnectAttachmentOperationalStatusEnum operationalStatus;

    public InterconnectAttachment withOperationalStatus(InterconnectAttachmentOperationalStatusEnum operationalStatus) {
        this.operationalStatus = operationalStatus;
        return this;
    }
    
    /**
     * [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form "XXXXX/region/domain"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pairingKey")
    public String pairingKey;

    public InterconnectAttachment withPairingKey(String pairingKey) {
        this.pairingKey = pairingKey;
        return this;
    }
    
    /**
     * Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerAsn")
    public String partnerAsn;

    public InterconnectAttachment withPartnerAsn(String partnerAsn) {
        this.partnerAsn = partnerAsn;
        return this;
    }
    
    /**
     * Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerMetadata")
    public InterconnectAttachmentPartnerMetadata partnerMetadata;

    public InterconnectAttachment withPartnerMetadata(InterconnectAttachmentPartnerMetadata partnerMetadata) {
        this.partnerMetadata = partnerMetadata;
        return this;
    }
    
    /**
     * Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateInterconnectInfo")
    public InterconnectAttachmentPrivateInfo privateInterconnectInfo;

    public InterconnectAttachment withPrivateInterconnectInfo(InterconnectAttachmentPrivateInfo privateInterconnectInfo) {
        this.privateInterconnectInfo = privateInterconnectInfo;
        return this;
    }
    
    /**
     * [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;

    public InterconnectAttachment withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network &amp; region within which the Cloud Router is configured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("router")
    public String router;

    public InterconnectAttachment withRouter(String router) {
        this.router = router;
        return this;
    }
    
    /**
     * [Output Only] Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("satisfiesPzs")
    public Boolean satisfiesPzs;

    public InterconnectAttachment withSatisfiesPzs(Boolean satisfiesPzs) {
        this.satisfiesPzs = satisfiesPzs;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public InterconnectAttachment withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stackType")
    public InterconnectAttachmentStackTypeEnum stackType;

    public InterconnectAttachment withStackType(InterconnectAttachmentStackTypeEnum stackType) {
        this.stackType = stackType;
        return this;
    }
    
    /**
     * [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public InterconnectAttachmentStateEnum state;

    public InterconnectAttachment withState(InterconnectAttachmentStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public InterconnectAttachmentTypeEnum type;

    public InterconnectAttachment withType(InterconnectAttachmentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4093. Only specified at creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vlanTag8021q")
    public Integer vlanTag8021q;

    public InterconnectAttachment withVlanTag8021q(Integer vlanTag8021q) {
        this.vlanTag8021q = vlanTag8021q;
        return this;
    }
    
    public InterconnectAttachment(){}
}
