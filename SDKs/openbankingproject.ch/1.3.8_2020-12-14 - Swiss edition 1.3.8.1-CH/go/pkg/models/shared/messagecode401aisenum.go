// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageCode401AISEnum - Message codes defined for AIS for HTTP Error code 401 (UNAUTHORIZED).
type MessageCode401AISEnum string

const (
	MessageCode401AISEnumCertificateInvalid    MessageCode401AISEnum = "CERTIFICATE_INVALID"
	MessageCode401AISEnumRoleInvalid           MessageCode401AISEnum = "ROLE_INVALID"
	MessageCode401AISEnumCertificateExpired    MessageCode401AISEnum = "CERTIFICATE_EXPIRED"
	MessageCode401AISEnumCertificateBlocked    MessageCode401AISEnum = "CERTIFICATE_BLOCKED"
	MessageCode401AISEnumCertificateRevoke     MessageCode401AISEnum = "CERTIFICATE_REVOKE"
	MessageCode401AISEnumCertificateMissing    MessageCode401AISEnum = "CERTIFICATE_MISSING"
	MessageCode401AISEnumSignatureInvalid      MessageCode401AISEnum = "SIGNATURE_INVALID"
	MessageCode401AISEnumSignatureMissing      MessageCode401AISEnum = "SIGNATURE_MISSING"
	MessageCode401AISEnumCorporateIDInvalid    MessageCode401AISEnum = "CORPORATE_ID_INVALID"
	MessageCode401AISEnumPsuCredentialsInvalid MessageCode401AISEnum = "PSU_CREDENTIALS_INVALID"
	MessageCode401AISEnumConsentInvalid        MessageCode401AISEnum = "CONSENT_INVALID"
	MessageCode401AISEnumConsentExpired        MessageCode401AISEnum = "CONSENT_EXPIRED"
	MessageCode401AISEnumTokenUnknown          MessageCode401AISEnum = "TOKEN_UNKNOWN"
	MessageCode401AISEnumTokenInvalid          MessageCode401AISEnum = "TOKEN_INVALID"
	MessageCode401AISEnumTokenExpired          MessageCode401AISEnum = "TOKEN_EXPIRED"
)

func (e *MessageCode401AISEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CERTIFICATE_INVALID":
		fallthrough
	case "ROLE_INVALID":
		fallthrough
	case "CERTIFICATE_EXPIRED":
		fallthrough
	case "CERTIFICATE_BLOCKED":
		fallthrough
	case "CERTIFICATE_REVOKE":
		fallthrough
	case "CERTIFICATE_MISSING":
		fallthrough
	case "SIGNATURE_INVALID":
		fallthrough
	case "SIGNATURE_MISSING":
		fallthrough
	case "CORPORATE_ID_INVALID":
		fallthrough
	case "PSU_CREDENTIALS_INVALID":
		fallthrough
	case "CONSENT_INVALID":
		fallthrough
	case "CONSENT_EXPIRED":
		fallthrough
	case "TOKEN_UNKNOWN":
		fallthrough
	case "TOKEN_INVALID":
		fallthrough
	case "TOKEN_EXPIRED":
		*e = MessageCode401AISEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageCode401AISEnum: %s", s)
	}
}
