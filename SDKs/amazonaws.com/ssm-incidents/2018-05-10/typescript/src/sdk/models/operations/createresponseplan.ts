/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The Chatbot chat channel used for collaboration during an incident.
 */
export class CreateResponsePlanRequestBodyChatChannel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "chatbotSns" })
  chatbotSns?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "empty" })
  empty?: Record<string, any>;
}

/**
 * Basic details used in creating a response plan. The response plan is then used to create an incident record.
 */
export class CreateResponsePlanRequestBodyIncidentTemplate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "dedupeString" })
  dedupeString?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "impact" })
  impact?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "incidentTags" })
  incidentTags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: shared.NotificationTargetItem })
  @Expose({ name: "notificationTargets" })
  @Type(() => shared.NotificationTargetItem)
  notificationTargets?: shared.NotificationTargetItem[];

  @SpeakeasyMetadata()
  @Expose({ name: "summary" })
  summary?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class CreateResponsePlanRequestBody extends SpeakeasyBase {
  /**
   * The actions that the response plan starts at the beginning of an incident.
   */
  @SpeakeasyMetadata({ elemType: shared.Action })
  @Expose({ name: "actions" })
  @Type(() => shared.Action)
  actions?: shared.Action[];

  /**
   * The Chatbot chat channel used for collaboration during an incident.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chatChannel" })
  @Type(() => CreateResponsePlanRequestBodyChatChannel)
  chatChannel?: CreateResponsePlanRequestBodyChatChannel;

  /**
   * A token ensuring that the operation is called only once with the specified details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * The long format of the response plan name. This field can contain spaces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "engagements" })
  engagements?: string[];

  /**
   * Basic details used in creating a response plan. The response plan is then used to create an incident record.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incidentTemplate" })
  @Type(() => CreateResponsePlanRequestBodyIncidentTemplate)
  incidentTemplate: CreateResponsePlanRequestBodyIncidentTemplate;

  /**
   * Information about third-party services integrated into the response plan.
   */
  @SpeakeasyMetadata({ elemType: shared.Integration })
  @Expose({ name: "integrations" })
  @Type(() => shared.Integration)
  integrations?: shared.Integration[];

  /**
   * The short format name of the response plan. Can't include spaces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A list of tags that you are adding to the response plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateResponsePlanRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateResponsePlanRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateResponsePlanResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createResponsePlanOutput?: shared.CreateResponsePlanOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
