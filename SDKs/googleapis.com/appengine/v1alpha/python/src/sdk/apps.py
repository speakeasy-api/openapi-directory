"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Apps:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def appengine_apps_authorized_certificates_create(self, request: operations.AppengineAppsAuthorizedCertificatesCreateRequest, security: operations.AppengineAppsAuthorizedCertificatesCreateSecurity) -> operations.AppengineAppsAuthorizedCertificatesCreateResponse:
        r"""Uploads the specified SSL certificate."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsAuthorizedCertificatesCreateRequest, base_url, '/v1alpha/apps/{appsId}/authorizedCertificates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authorized_certificate", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AppengineAppsAuthorizedCertificatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsAuthorizedCertificatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthorizedCertificate])
                res.authorized_certificate = out

        return res

    def appengine_apps_authorized_certificates_delete(self, request: operations.AppengineAppsAuthorizedCertificatesDeleteRequest, security: operations.AppengineAppsAuthorizedCertificatesDeleteSecurity) -> operations.AppengineAppsAuthorizedCertificatesDeleteResponse:
        r"""Deletes the specified SSL certificate."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsAuthorizedCertificatesDeleteRequest, base_url, '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsAuthorizedCertificatesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsAuthorizedCertificatesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def appengine_apps_authorized_certificates_get(self, request: operations.AppengineAppsAuthorizedCertificatesGetRequest, security: operations.AppengineAppsAuthorizedCertificatesGetSecurity) -> operations.AppengineAppsAuthorizedCertificatesGetResponse:
        r"""Gets the specified SSL certificate."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsAuthorizedCertificatesGetRequest, base_url, '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsAuthorizedCertificatesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsAuthorizedCertificatesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthorizedCertificate])
                res.authorized_certificate = out

        return res

    def appengine_apps_authorized_certificates_list(self, request: operations.AppengineAppsAuthorizedCertificatesListRequest, security: operations.AppengineAppsAuthorizedCertificatesListSecurity) -> operations.AppengineAppsAuthorizedCertificatesListResponse:
        r"""Lists all SSL certificates the user is authorized to administer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsAuthorizedCertificatesListRequest, base_url, '/v1alpha/apps/{appsId}/authorizedCertificates', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsAuthorizedCertificatesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsAuthorizedCertificatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAuthorizedCertificatesResponse])
                res.list_authorized_certificates_response = out

        return res

    def appengine_apps_authorized_certificates_patch(self, request: operations.AppengineAppsAuthorizedCertificatesPatchRequest, security: operations.AppengineAppsAuthorizedCertificatesPatchSecurity) -> operations.AppengineAppsAuthorizedCertificatesPatchResponse:
        r"""Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsAuthorizedCertificatesPatchRequest, base_url, '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authorized_certificate", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AppengineAppsAuthorizedCertificatesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsAuthorizedCertificatesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthorizedCertificate])
                res.authorized_certificate = out

        return res

    def appengine_apps_authorized_domains_list(self, request: operations.AppengineAppsAuthorizedDomainsListRequest, security: operations.AppengineAppsAuthorizedDomainsListSecurity) -> operations.AppengineAppsAuthorizedDomainsListResponse:
        r"""Lists all domains the user is authorized to administer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsAuthorizedDomainsListRequest, base_url, '/v1alpha/apps/{appsId}/authorizedDomains', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsAuthorizedDomainsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsAuthorizedDomainsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAuthorizedDomainsResponse])
                res.list_authorized_domains_response = out

        return res

    def appengine_apps_domain_mappings_create(self, request: operations.AppengineAppsDomainMappingsCreateRequest, security: operations.AppengineAppsDomainMappingsCreateSecurity) -> operations.AppengineAppsDomainMappingsCreateResponse:
        r"""Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsDomainMappingsCreateRequest, base_url, '/v1alpha/apps/{appsId}/domainMappings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "domain_mapping", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AppengineAppsDomainMappingsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsDomainMappingsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_apps_domain_mappings_delete(self, request: operations.AppengineAppsDomainMappingsDeleteRequest, security: operations.AppengineAppsDomainMappingsDeleteSecurity) -> operations.AppengineAppsDomainMappingsDeleteResponse:
        r"""Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsDomainMappingsDeleteRequest, base_url, '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsDomainMappingsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsDomainMappingsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_apps_domain_mappings_get(self, request: operations.AppengineAppsDomainMappingsGetRequest, security: operations.AppengineAppsDomainMappingsGetSecurity) -> operations.AppengineAppsDomainMappingsGetResponse:
        r"""Gets the specified domain mapping."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsDomainMappingsGetRequest, base_url, '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsDomainMappingsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsDomainMappingsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DomainMapping])
                res.domain_mapping = out

        return res

    def appengine_apps_domain_mappings_list(self, request: operations.AppengineAppsDomainMappingsListRequest, security: operations.AppengineAppsDomainMappingsListSecurity) -> operations.AppengineAppsDomainMappingsListResponse:
        r"""Lists the domain mappings on an application."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsDomainMappingsListRequest, base_url, '/v1alpha/apps/{appsId}/domainMappings', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsDomainMappingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsDomainMappingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDomainMappingsResponse])
                res.list_domain_mappings_response = out

        return res

    def appengine_apps_domain_mappings_patch(self, request: operations.AppengineAppsDomainMappingsPatchRequest, security: operations.AppengineAppsDomainMappingsPatchSecurity) -> operations.AppengineAppsDomainMappingsPatchResponse:
        r"""Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsDomainMappingsPatchRequest, base_url, '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "domain_mapping", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AppengineAppsDomainMappingsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsDomainMappingsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_apps_locations_get(self, request: operations.AppengineAppsLocationsGetRequest, security: operations.AppengineAppsLocationsGetSecurity) -> operations.AppengineAppsLocationsGetResponse:
        r"""Gets information about a location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsLocationsGetRequest, base_url, '/v1alpha/apps/{appsId}/locations/{locationsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsLocationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsLocationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Location])
                res.location = out

        return res

    def appengine_apps_locations_list(self, request: operations.AppengineAppsLocationsListRequest, security: operations.AppengineAppsLocationsListSecurity) -> operations.AppengineAppsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsLocationsListRequest, base_url, '/v1alpha/apps/{appsId}/locations', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def appengine_apps_operations_get(self, request: operations.AppengineAppsOperationsGetRequest, security: operations.AppengineAppsOperationsGetSecurity) -> operations.AppengineAppsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsOperationsGetRequest, base_url, '/v1alpha/apps/{appsId}/operations/{operationsId}', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def appengine_apps_operations_list(self, request: operations.AppengineAppsOperationsListRequest, security: operations.AppengineAppsOperationsListSecurity) -> operations.AppengineAppsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppengineAppsOperationsListRequest, base_url, '/v1alpha/apps/{appsId}/operations', request)
        
        query_params = utils.get_query_params(operations.AppengineAppsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppengineAppsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    