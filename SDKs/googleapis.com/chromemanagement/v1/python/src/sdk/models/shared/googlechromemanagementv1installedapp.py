"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleChromeManagementV1InstalledAppAppInstallTypeEnum(str, Enum):
    r"""Output only. How the app was installed."""
    APP_INSTALL_TYPE_UNSPECIFIED = 'APP_INSTALL_TYPE_UNSPECIFIED'
    MULTIPLE = 'MULTIPLE'
    NORMAL = 'NORMAL'
    ADMIN = 'ADMIN'
    DEVELOPMENT = 'DEVELOPMENT'
    SIDELOAD = 'SIDELOAD'
    OTHER = 'OTHER'

class GoogleChromeManagementV1InstalledAppAppSourceEnum(str, Enum):
    r"""Output only. Source of the installed app."""
    APP_SOURCE_UNSPECIFIED = 'APP_SOURCE_UNSPECIFIED'
    CHROME_WEBSTORE = 'CHROME_WEBSTORE'
    PLAY_STORE = 'PLAY_STORE'

class GoogleChromeManagementV1InstalledAppAppTypeEnum(str, Enum):
    r"""Output only. Type of the app."""
    APP_TYPE_UNSPECIFIED = 'APP_TYPE_UNSPECIFIED'
    EXTENSION = 'EXTENSION'
    APP = 'APP'
    THEME = 'THEME'
    HOSTED_APP = 'HOSTED_APP'
    ANDROID_APP = 'ANDROID_APP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1InstalledApp:
    r"""Describes an installed app."""
    
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appId'), 'exclude': lambda f: f is None }})
    r"""Output only. Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote)."""  
    app_install_type: Optional[GoogleChromeManagementV1InstalledAppAppInstallTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appInstallType'), 'exclude': lambda f: f is None }})
    r"""Output only. How the app was installed."""  
    app_source: Optional[GoogleChromeManagementV1InstalledAppAppSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appSource'), 'exclude': lambda f: f is None }})
    r"""Output only. Source of the installed app."""  
    app_type: Optional[GoogleChromeManagementV1InstalledAppAppTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appType'), 'exclude': lambda f: f is None }})
    r"""Output only. Type of the app."""  
    browser_device_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserDeviceCount'), 'exclude': lambda f: f is None }})
    r"""Output only. Count of browser devices with this app installed."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Output only. Description of the installed app."""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the app is disabled."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. Name of the installed app."""  
    homepage_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepageUri'), 'exclude': lambda f: f is None }})
    r"""Output only. Homepage uri of the installed app."""  
    os_user_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osUserCount'), 'exclude': lambda f: f is None }})
    r"""Output only. Count of ChromeOS users with this app installed."""  
    permissions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""Output only. Permissions of the installed app."""  
    