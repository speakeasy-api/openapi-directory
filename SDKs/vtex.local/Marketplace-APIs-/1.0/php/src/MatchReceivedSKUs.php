<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MatchReceivedSKUs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Match Received SKUs individually
     * 
     * All SKUs sent from a seller to a marketplace must be reviewed and matched. Actions in the matching process are added in the request body through the [matchType] object. Match type actions include: 
     * 
     * 1. `newproduct`: match the SKU as a new product. 
     * 
     * 2. `itemMatch`: associate the received SKU to an existing SKU. 
     * 
     * 3. `productMatch`: associate the received SKU to an existing product. 
     * 
     * 4. `deny`: deny the received SKU. 
     * 
     * 5. `pending`: the received SKU requires attention. 
     * 
     * 6. `incomplete`: the received SKU is lacking information to be matched. 
     * 
     * 7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched. 
     * 
     * Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MatchResponse
     */
	public function match(
        \OpenAPI\OpenAPI\Models\Operations\MatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/{sellerId}/{sellerskuid}/versions/{version}/matches/{matchid}', \OpenAPI\OpenAPI\Models\Operations\MatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "matchRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MatchRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Match Multiple Received SKUs
     * 
     * This endpoint allows the user to bulk approve, deny, or associate received SKUs. In a single request, you can match up to 25 received SKUs from your sellers.
     * 
     * Through the `actionName` attribute you can select the operation you want to apply to the received SKU. 
     * 
     * Actions include: 
     * 
     * 1. `newproduct`: match the SKU as a new product. 
     * 
     * 2. `skuassociation`: associate the received SKU to an existing SKU. 
     * 
     * 3. `productassociation`: associate the received SKU to an existing product. 
     * 
     * 4. `deny`: deny the received SKU.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MatchMultipleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MatchMultipleResponse
     */
	public function matchMultiple(
        \OpenAPI\OpenAPI\Models\Operations\MatchMultipleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MatchMultipleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/matches/action/{actionName}', \OpenAPI\OpenAPI\Models\Operations\MatchMultipleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MatchMultipleRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MatchMultipleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}