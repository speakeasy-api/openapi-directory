"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Keys:
    r"""The `keys` resource contains the access keys used to authenticate requests to this API.
    
    Note that this resource is only accessible for administrator users logged into the Brain Management Console.
    It is not possible to access this resource using API key authentication.
    This resource is therefore irrelevant to most applications.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_key(self, request: shared.KeyInput, security: operations.AddKeySecurity) -> operations.AddKeyResponse:
        r"""Create key
        Can only be used by an **administrative** user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keys'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def delete_key(self, request: operations.DeleteKeyRequest, security: operations.DeleteKeySecurity) -> operations.DeleteKeyResponse:
        r"""Delete key
        Can only be used by an **administrative** user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteKeyRequest, base_url, '/keys/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def get_key_by_id(self, request: operations.GetKeyByIDRequest, security: operations.GetKeyByIDSecurity) -> operations.GetKeyByIDResponse:
        r"""Get key
        Can only be used by an **administrative** user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetKeyByIDRequest, base_url, '/keys/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKeyByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Key])
                res.key = out

        return res

    def get_keys(self, request: operations.GetKeysRequest, security: operations.GetKeysSecurity) -> operations.GetKeysResponse:
        r"""Get all keys
        Can only be used by an **administrative** user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/keys'
        
        query_params = utils.get_query_params(operations.GetKeysRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetKeys200ApplicationJSON])
                res.get_keys_200_application_json_object = out

        return res

    def update_key(self, request: operations.UpdateKeyRequest, security: operations.UpdateKeySecurity) -> operations.UpdateKeyResponse:
        r"""Update existing key
        Can only be used by an **administrative** user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateKeyRequest, base_url, '/keys/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "key_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    