// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DataReplicationInitiationStepNameEnum string

const (
	DataReplicationInitiationStepNameEnumWait                            DataReplicationInitiationStepNameEnum = "WAIT"
	DataReplicationInitiationStepNameEnumCreateSecurityGroup             DataReplicationInitiationStepNameEnum = "CREATE_SECURITY_GROUP"
	DataReplicationInitiationStepNameEnumLaunchReplicationServer         DataReplicationInitiationStepNameEnum = "LAUNCH_REPLICATION_SERVER"
	DataReplicationInitiationStepNameEnumBootReplicationServer           DataReplicationInitiationStepNameEnum = "BOOT_REPLICATION_SERVER"
	DataReplicationInitiationStepNameEnumAuthenticateWithService         DataReplicationInitiationStepNameEnum = "AUTHENTICATE_WITH_SERVICE"
	DataReplicationInitiationStepNameEnumDownloadReplicationSoftware     DataReplicationInitiationStepNameEnum = "DOWNLOAD_REPLICATION_SOFTWARE"
	DataReplicationInitiationStepNameEnumCreateStagingDisks              DataReplicationInitiationStepNameEnum = "CREATE_STAGING_DISKS"
	DataReplicationInitiationStepNameEnumAttachStagingDisks              DataReplicationInitiationStepNameEnum = "ATTACH_STAGING_DISKS"
	DataReplicationInitiationStepNameEnumPairReplicationServerWithAgent  DataReplicationInitiationStepNameEnum = "PAIR_REPLICATION_SERVER_WITH_AGENT"
	DataReplicationInitiationStepNameEnumConnectAgentToReplicationServer DataReplicationInitiationStepNameEnum = "CONNECT_AGENT_TO_REPLICATION_SERVER"
	DataReplicationInitiationStepNameEnumStartDataTransfer               DataReplicationInitiationStepNameEnum = "START_DATA_TRANSFER"
)

func (e *DataReplicationInitiationStepNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WAIT":
		fallthrough
	case "CREATE_SECURITY_GROUP":
		fallthrough
	case "LAUNCH_REPLICATION_SERVER":
		fallthrough
	case "BOOT_REPLICATION_SERVER":
		fallthrough
	case "AUTHENTICATE_WITH_SERVICE":
		fallthrough
	case "DOWNLOAD_REPLICATION_SOFTWARE":
		fallthrough
	case "CREATE_STAGING_DISKS":
		fallthrough
	case "ATTACH_STAGING_DISKS":
		fallthrough
	case "PAIR_REPLICATION_SERVER_WITH_AGENT":
		fallthrough
	case "CONNECT_AGENT_TO_REPLICATION_SERVER":
		fallthrough
	case "START_DATA_TRANSFER":
		*e = DataReplicationInitiationStepNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataReplicationInitiationStepNameEnum: %s", s)
	}
}
