/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * If specified, this subscription will only receive webhooks for Events with the specified `category`.
 */
export enum CreateAnEventSubscriptionParametersSelectedEventCategoryEnum {
  AccountCreated = "account.created",
  AccountUpdated = "account.updated",
  AccountNumberCreated = "account_number.created",
  AccountNumberUpdated = "account_number.updated",
  AccountStatementCreated = "account_statement.created",
  AccountTransferCreated = "account_transfer.created",
  AccountTransferUpdated = "account_transfer.updated",
  AchPrenotificationCreated = "ach_prenotification.created",
  AchPrenotificationUpdated = "ach_prenotification.updated",
  AchTransferCreated = "ach_transfer.created",
  AchTransferUpdated = "ach_transfer.updated",
  CardCreated = "card.created",
  CardUpdated = "card.updated",
  CardDisputeCreated = "card_dispute.created",
  CardDisputeUpdated = "card_dispute.updated",
  CheckDepositCreated = "check_deposit.created",
  CheckDepositUpdated = "check_deposit.updated",
  CheckTransferCreated = "check_transfer.created",
  CheckTransferUpdated = "check_transfer.updated",
  DeclinedTransactionCreated = "declined_transaction.created",
  DigitalWalletTokenCreated = "digital_wallet_token.created",
  DigitalWalletTokenUpdated = "digital_wallet_token.updated",
  DocumentCreated = "document.created",
  EntityCreated = "entity.created",
  EntityUpdated = "entity.updated",
  ExternalAccountCreated = "external_account.created",
  FileCreated = "file.created",
  GroupUpdated = "group.updated",
  GroupHeartbeat = "group.heartbeat",
  InboundAchTransferReturnCreated = "inbound_ach_transfer_return.created",
  InboundAchTransferReturnUpdated = "inbound_ach_transfer_return.updated",
  InboundWireDrawdownRequestCreated = "inbound_wire_drawdown_request.created",
  OauthConnectionCreated = "oauth_connection.created",
  OauthConnectionDeactivated = "oauth_connection.deactivated",
  PendingTransactionCreated = "pending_transaction.created",
  PendingTransactionUpdated = "pending_transaction.updated",
  RealTimeDecisionCardAuthorizationRequested = "real_time_decision.card_authorization_requested",
  RealTimeDecisionDigitalWalletTokenRequested = "real_time_decision.digital_wallet_token_requested",
  RealTimeDecisionDigitalWalletAuthenticationRequested = "real_time_decision.digital_wallet_authentication_requested",
  RealTimePaymentsTransferCreated = "real_time_payments_transfer.created",
  RealTimePaymentsTransferUpdated = "real_time_payments_transfer.updated",
  RealTimePaymentsRequestForPaymentCreated = "real_time_payments_request_for_payment.created",
  RealTimePaymentsRequestForPaymentUpdated = "real_time_payments_request_for_payment.updated",
  TransactionCreated = "transaction.created",
  WireDrawdownRequestCreated = "wire_drawdown_request.created",
  WireDrawdownRequestUpdated = "wire_drawdown_request.updated",
  WireTransferCreated = "wire_transfer.created",
  WireTransferUpdated = "wire_transfer.updated",
}

export class CreateAnEventSubscriptionParameters extends SpeakeasyBase {
  /**
   * If specified, this subscription will only receive webhooks for Events with the specified `category`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selected_event_category" })
  selectedEventCategory?: CreateAnEventSubscriptionParametersSelectedEventCategoryEnum;

  /**
   * The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shared_secret" })
  sharedSecret?: string;

  /**
   * The URL you'd like us to send webhooks to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
