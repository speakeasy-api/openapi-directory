// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ApproveAssignmentXAmzTargetEnum
type ApproveAssignmentXAmzTargetEnum string

const (
	ApproveAssignmentXAmzTargetEnumMTurkRequesterServiceV20170117ApproveAssignment ApproveAssignmentXAmzTargetEnum = "MTurkRequesterServiceV20170117.ApproveAssignment"
)

func (e ApproveAssignmentXAmzTargetEnum) ToPointer() *ApproveAssignmentXAmzTargetEnum {
	return &e
}

func (e *ApproveAssignmentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MTurkRequesterServiceV20170117.ApproveAssignment":
		*e = ApproveAssignmentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveAssignmentXAmzTargetEnum: %v", v)
	}
}

type ApproveAssignmentRequest struct {
	ApproveAssignmentRequest shared.ApproveAssignmentRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               ApproveAssignmentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ApproveAssignmentResponse struct {
	// Success
	ApproveAssignmentResponse map[string]interface{}
	ContentType               string
	// RequestError
	RequestError interface{}
	// ServiceFault
	ServiceFault interface{}
	StatusCode   int
	RawResponse  *http.Response
}
