// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetV2ActionsJSONRequest struct {
	// Filters actions by cadence_id. Multiple cadence ids can be applied
	CadenceID []int64 `queryParam:"style=form,explode=false,name=cadence_id"`
	// Equality filters that are applied to the due_on field. A single filter can be used by itself or combined with other filters to create a range.
	//
	// ---CUSTOM---
	// {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
	//
	DueOn []string `queryParam:"style=form,explode=false,name=due_on"`
	// IDs of actions to fetch.
	Ids []int64 `queryParam:"style=form,explode=false,name=ids"`
	// Whether to include total_pages and total_count in the metadata. Defaults to false
	IncludePagingCounts *bool `queryParam:"style=form,explode=true,name=include_paging_counts"`
	// Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
	LimitPagingCounts *bool `queryParam:"style=form,explode=true,name=limit_paging_counts"`
	// Filters actions by multitouch_group_id. Multiple multitouch group ids can be applied
	MultitouchGroupID []int64 `queryParam:"style=form,explode=false,name=multitouch_group_id"`
	// The current page to fetch results from. Defaults to 1
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// How many records to show per page in the range [1, 100]. Defaults to 25
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Filters actions by person_id. Multiple person ids can be applied
	PersonID []int64 `queryParam:"style=form,explode=false,name=person_id"`
	// Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at
	SortBy *string `queryParam:"style=form,explode=true,name=sort_by"`
	// Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
	SortDirection *string `queryParam:"style=form,explode=true,name=sort_direction"`
	// Fetch actions by step ID
	StepID *int64 `queryParam:"style=form,explode=true,name=step_id"`
	// Filter actions by type
	Type *string `queryParam:"style=form,explode=true,name=type"`
	// Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
	//
	// ---CUSTOM---
	// {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
	//
	UpdatedAt []string `queryParam:"style=form,explode=false,name=updated_at"`
	// Filters actions by the user's guid. Multiple user guids can be applied. The user must be a team admin to filter other users' actions
	UserGUID []string `queryParam:"style=form,explode=false,name=user_guid"`
}

type GetV2ActionsJSONResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
