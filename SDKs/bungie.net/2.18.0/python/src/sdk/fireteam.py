"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Fireteam:
    r"""fireteam"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def fireteam_get_active_private_clan_fireteam_count(self, request: operations.FireteamGetActivePrivateClanFireteamCountRequest, security: operations.FireteamGetActivePrivateClanFireteamCountSecurity) -> operations.FireteamGetActivePrivateClanFireteamCountResponse:
        r"""Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FireteamGetActivePrivateClanFireteamCountRequest, base_url, '/Fireteam/Clan/{groupId}/ActiveCount/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FireteamGetActivePrivateClanFireteamCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def fireteam_get_available_clan_fireteams(self, request: operations.FireteamGetAvailableClanFireteamsRequest, security: operations.FireteamGetAvailableClanFireteamsSecurity) -> operations.FireteamGetAvailableClanFireteamsResponse:
        r"""Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FireteamGetAvailableClanFireteamsRequest, base_url, '/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/', request)
        
        query_params = utils.get_query_params(operations.FireteamGetAvailableClanFireteamsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FireteamGetAvailableClanFireteamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def fireteam_get_clan_fireteam(self, request: operations.FireteamGetClanFireteamRequest, security: operations.FireteamGetClanFireteamSecurity) -> operations.FireteamGetClanFireteamResponse:
        r"""Gets a specific fireteam."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FireteamGetClanFireteamRequest, base_url, '/Fireteam/Clan/{groupId}/Summary/{fireteamId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FireteamGetClanFireteamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def fireteam_get_my_clan_fireteams(self, request: operations.FireteamGetMyClanFireteamsRequest, security: operations.FireteamGetMyClanFireteamsSecurity) -> operations.FireteamGetMyClanFireteamsResponse:
        r"""Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FireteamGetMyClanFireteamsRequest, base_url, '/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/', request)
        
        query_params = utils.get_query_params(operations.FireteamGetMyClanFireteamsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FireteamGetMyClanFireteamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def fireteam_search_public_available_clan_fireteams(self, request: operations.FireteamSearchPublicAvailableClanFireteamsRequest, security: operations.FireteamSearchPublicAvailableClanFireteamsSecurity) -> operations.FireteamSearchPublicAvailableClanFireteamsResponse:
        r"""Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FireteamSearchPublicAvailableClanFireteamsRequest, base_url, '/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/', request)
        
        query_params = utils.get_query_params(operations.FireteamSearchPublicAvailableClanFireteamsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FireteamSearchPublicAvailableClanFireteamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    