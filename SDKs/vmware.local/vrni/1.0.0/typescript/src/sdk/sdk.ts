/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Applications } from "./applications";
import { Authentication } from "./authentication";
import { DataSources } from "./datasources";
import { Entities } from "./entities";
import { Info } from "./info";
import { Infrastructure } from "./infrastructure";
import { Microsegmentation } from "./microsegmentation";
import { Search } from "./search";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://vmware.local",
  "https://vrni.example.com/api/ni",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * vRealize Network Insight API Reference
 */
export class SDK {
  /**
   * Applications APIs
   */
  public applications: Applications;
  /**
   * Authentication APIs
   */
  public authentication: Authentication;
  /**
   * Data source APIs
   */
  public dataSources: DataSources;
  /**
   * Entities APIs
   */
  public entities: Entities;
  /**
   * Info APIs
   */
  public info: Info;
  /**
   * Infra APIs
   */
  public infrastructure: Infrastructure;
  /**
   * Micro-segmentation APIs
   */
  public microsegmentation: Microsegmentation;
  /**
   * Search APIs
   */
  public search: Search;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.applications = new Applications(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.authentication = new Authentication(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.dataSources = new DataSources(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.entities = new Entities(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.info = new Info(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.infrastructure = new Infrastructure(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.microsegmentation = new Microsegmentation(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.search = new Search(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
