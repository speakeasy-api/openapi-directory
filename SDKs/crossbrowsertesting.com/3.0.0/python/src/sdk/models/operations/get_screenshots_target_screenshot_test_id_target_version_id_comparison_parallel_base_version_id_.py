"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import single_comparison_test as shared_single_comparison_test
from typing import Optional


@dataclasses.dataclass
class GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDRequest:
    
    base_version_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'base_version_id', 'style': 'simple', 'explode': False }})
    r"""version id of the base Screenshot Test"""  
    target_screenshot_test_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'target_screenshot_test_id', 'style': 'simple', 'explode': False }})
    r"""test id of the target Screenshot Test"""  
    target_version_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'target_version_id', 'style': 'simple', 'explode': False }})
    r"""version id of the target Screenshot Test"""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""Name of callback method for JSONP requests."""  
    format: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""The format of the returned data. Possible values are \\"json\\" or \\"jsonp\\"."""  
    tolerance: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tolerance', 'style': 'form', 'explode': True }})
    r"""Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences."""  
    

@dataclasses.dataclass
class GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    single_comparison_tests: Optional[list[shared_single_comparison_test.SingleComparisonTest]] = dataclasses.field(default=None)
    r"""An array of Configuration objects. Within each configuration is an array of browsers"""  
    