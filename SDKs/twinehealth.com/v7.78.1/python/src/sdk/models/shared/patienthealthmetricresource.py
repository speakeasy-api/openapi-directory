"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceAttributesCode:
    
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class PatientHealthMetricResourceAttributesTypeEnum(str, Enum):
    BLOOD_PRESSURE_SYSTOLIC = 'blood_pressure_systolic'
    BLOOD_PRESSURE_DIASTOLIC = 'blood_pressure_diastolic'
    HEMOGLOBIN_A1C = 'hemoglobin_a1c'
    HDL_CHOLESTEROL = 'hdl_cholesterol'
    LDL_CHOLESTEROL = 'ldl_cholesterol'
    TOTAL_CHOLESTEROL = 'total_cholesterol'
    TRIGLYCERIDES = 'triglycerides'
    BLOOD_UREA_NITROGEN = 'blood_urea_nitrogen'
    CREATININE = 'creatinine'
    HEMOGLOBIN = 'hemoglobin'
    HEMATOCRIT = 'hematocrit'
    TOTAL_SERUM_IRON = 'total_serum_iron'
    THYROID_STIMULATING_HORMONE = 'thyroid_stimulating_hormone'
    FREE_THYROXINE = 'free_thyroxine'
    FREE_TRIIODOTHYRONINE = 'free_triiodothyronine'
    TOTAL_TRIIODOTHYRONINE = 'total_triiodothyronine'
    CD4_CELL_COUNT = 'cd4_cell_count'
    HIV_VIRAL_LOAD = 'hiv_viral_load'
    INR = 'inr'
    FREE_TESTOSTERONE = 'free_testosterone'
    TOTAL_TESTOSTERONE = 'total_testosterone'
    C_REACTIVE_PROTEIN = 'c_reactive_protein'
    PROSTATE_SPECIFIC_ANTIGEN = 'prostate_specific_antigen'
    COTININE = 'cotinine'
    C_PEPTIDE = 'c_peptide'
    BLOOD_PRESSURE = 'blood_pressure'
    BLOOD_GLUCOSE = 'blood_glucose'
    WEIGHT = 'weight'
    HEART_RATE = 'heart_rate'
    BODY_FAT_PERCENTAGE = 'body_fat_percentage'
    BODY_MASS_INDEX = 'body_mass_index'
    BODY_TEMPERATURE = 'body_temperature'
    FORCED_EXPIRATORY_VOLUME1 = 'forced_expiratory_volume1'
    FORCED_VITAL_CAPACITY = 'forced_vital_capacity'
    LEAN_BODY_MASS = 'lean_body_mass'
    NAUSEA_LEVEL = 'nausea_level'
    OXYGEN_SATURATION = 'oxygen_saturation'
    PAIN_LEVEL = 'pain_level'
    PEAK_EXPIRATORY_FLOW_RATE = 'peak_expiratory_flow_rate'
    PERIPHERAL_PERFUSION_INDEX = 'peripheral_perfusion_index'
    RESPIRATORY_RATE = 'respiratory_rate'
    INHALER_USAGE = 'inhaler_usage'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceAttributes:
    
    code: Optional[PatientHealthMetricResourceAttributesCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    diastolic: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diastolic'), 'exclude': lambda f: f is None }})  
    occurred_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occurred_at'), 'exclude': lambda f: f is None }})  
    systolic: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systolic'), 'exclude': lambda f: f is None }})  
    type: Optional[PatientHealthMetricResourceAttributesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})  
    value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceRelationshipsPatientDataMetaQueryIdentifier:
    
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceRelationshipsPatientDataMetaQuery:
    r"""The query must return one and only one patient."""
    
    identifier: PatientHealthMetricResourceRelationshipsPatientDataMetaQueryIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})  
    groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})  
    organization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceRelationshipsPatientDataMeta:
    r"""Allows the specification of a query for a patient rather than providing a patient id directly"""
    
    query: PatientHealthMetricResourceRelationshipsPatientDataMetaQuery = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})
    r"""The query must return one and only one patient."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceRelationshipsPatientData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required if the `meta.query` is not defined."""  
    meta: Optional[PatientHealthMetricResourceRelationshipsPatientDataMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""Allows the specification of a query for a patient rather than providing a patient id directly"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceRelationshipsPatient:
    
    data: Optional[PatientHealthMetricResourceRelationshipsPatientData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResourceRelationships:
    
    patient: Optional[PatientHealthMetricResourceRelationshipsPatient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientHealthMetricResource:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[PatientHealthMetricResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    relationships: Optional[PatientHealthMetricResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    