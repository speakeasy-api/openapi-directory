"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instructioninput as shared_instructioninput
from ..shared import multioutputinfo as shared_multioutputinfo
from ..shared import sideinputinfo as shared_sideinputinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParDoInstruction:
    r"""An instruction that does a ParDo operation. Takes one main input and zero or more side inputs, and produces zero or more outputs. Runs user code."""
    
    input: Optional[shared_instructioninput.InstructionInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input'), 'exclude': lambda f: f is None }})
    r"""An input of an instruction, as a reference to an output of a producer instruction."""  
    multi_output_infos: Optional[list[shared_multioutputinfo.MultiOutputInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiOutputInfos'), 'exclude': lambda f: f is None }})
    r"""Information about each of the outputs, if user_fn is a MultiDoFn."""  
    num_outputs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numOutputs'), 'exclude': lambda f: f is None }})
    r"""The number of outputs."""  
    side_inputs: Optional[list[shared_sideinputinfo.SideInputInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sideInputs'), 'exclude': lambda f: f is None }})
    r"""Zero or more side inputs."""  
    user_fn: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userFn'), 'exclude': lambda f: f is None }})
    r"""The user function to invoke."""  
    