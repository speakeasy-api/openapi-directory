/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;

public class TimelineWeatherAPISingleDateRequest {
	
    /**
	 * GET_VISUAL_CROSSING_WEB_SERVICES_REST_SERVICES_TIMELINE_LOCATION_STARTDATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] GET_VISUAL_CROSSING_WEB_SERVICES_REST_SERVICES_TIMELINE_LOCATION_STARTDATE_SERVERS = {
        "https://weather.visualcrossing.com",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public TimelineWeatherAPISingleDateRequest(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Historical and Forecast Weather API
     * Seamless access to daily and hourly historical and forecast weather data plus weather alerts, events and current conditions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateResponse getVisualCrossingWebServicesRestServicesTimelineLocationStartdate(org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateRequest request) throws Exception {
        return this.getVisualCrossingWebServicesRestServicesTimelineLocationStartdate(request, null);
    }

    /**
     * Historical and Forecast Weather API
     * Seamless access to daily and hourly historical and forecast weather data plus weather alerts, events and current conditions.
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateResponse getVisualCrossingWebServicesRestServicesTimelineLocationStartdate(org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateRequest request, String serverURL) throws Exception {
        String baseUrl = GET_VISUAL_CROSSING_WEB_SERVICES_REST_SERVICES_TIMELINE_LOCATION_STARTDATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateRequest.class, baseUrl, "/VisualCrossingWebServices/rest/services/timeline/{location}/{startdate}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateResponse res = new org.openapis.openapi.models.operations.GetVisualCrossingWebServicesRestServicesTimelineLocationStartdateResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}