"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dialogflow_projects_locations_agents_changelogs_list(self, request: operations.DialogflowProjectsLocationsAgentsChangelogsListRequest, security: operations.DialogflowProjectsLocationsAgentsChangelogsListSecurity) -> operations.DialogflowProjectsLocationsAgentsChangelogsListResponse:
        r"""Returns the list of Changelogs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsChangelogsListRequest, base_url, '/v3/{parent}/changelogs', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsChangelogsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsChangelogsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListChangelogsResponse])
                res.google_cloud_dialogflow_cx_v3_list_changelogs_response = out

        return res

    def dialogflow_projects_locations_agents_create(self, request: operations.DialogflowProjectsLocationsAgentsCreateRequest, security: operations.DialogflowProjectsLocationsAgentsCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsCreateResponse:
        r"""Creates an agent in the specified location. Note: You should always train flows prior to sending them queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsCreateRequest, base_url, '/v3/{parent}/agents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_agent", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Agent])
                res.google_cloud_dialogflow_cx_v3_agent = out

        return res

    def dialogflow_projects_locations_agents_environments_continuous_test_results_list(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse:
        r"""Fetches a list of continuous test results for a given environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest, base_url, '/v3/{parent}/continuousTestResults', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListContinuousTestResultsResponse])
                res.google_cloud_dialogflow_cx_v3_list_continuous_test_results_response = out

        return res

    def dialogflow_projects_locations_agents_environments_create(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse:
        r"""Creates an Environment in the specified Agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest, base_url, '/v3/{parent}/environments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_environment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_environments_deploy_flow(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse:
        r"""Deploys a flow to the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployFlowMetadata - `response`: DeployFlowResponse"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest, base_url, '/v3/{environment}:deployFlow', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_deploy_flow_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_environments_deployments_list(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse:
        r"""Returns the list of all deployments in the specified Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest, base_url, '/v3/{parent}/deployments', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListDeploymentsResponse])
                res.google_cloud_dialogflow_cx_v3_list_deployments_response = out

        return res

    def dialogflow_projects_locations_agents_environments_experiments_create(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse:
        r"""Creates an Experiment in the specified Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest, base_url, '/v3/{parent}/experiments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_experiment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Experiment])
                res.google_cloud_dialogflow_cx_v3_experiment = out

        return res

    def dialogflow_projects_locations_agents_environments_experiments_list(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse:
        r"""Returns the list of all experiments in the specified Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest, base_url, '/v3/{parent}/experiments', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListExperimentsResponse])
                res.google_cloud_dialogflow_cx_v3_list_experiments_response = out

        return res

    def dialogflow_projects_locations_agents_environments_experiments_start(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse:
        r"""Starts the specified Experiment. This rpc only changes the state of experiment from PENDING to RUNNING."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest, base_url, '/v3/{name}:start', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Experiment])
                res.google_cloud_dialogflow_cx_v3_experiment = out

        return res

    def dialogflow_projects_locations_agents_environments_experiments_stop(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse:
        r"""Stops the specified Experiment. This rpc only changes the state of experiment from RUNNING to DONE."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest, base_url, '/v3/{name}:stop', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Experiment])
                res.google_cloud_dialogflow_cx_v3_experiment = out

        return res

    def dialogflow_projects_locations_agents_environments_list(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsListRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsListSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsListResponse:
        r"""Returns the list of all environments in the specified Agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsListRequest, base_url, '/v3/{parent}/environments', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListEnvironmentsResponse])
                res.google_cloud_dialogflow_cx_v3_list_environments_response = out

        return res

    def dialogflow_projects_locations_agents_environments_lookup_environment_history(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistorySecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse:
        r"""Looks up the history of the specified Environment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest, base_url, '/v3/{name}:lookupEnvironmentHistory', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3LookupEnvironmentHistoryResponse])
                res.google_cloud_dialogflow_cx_v3_lookup_environment_history_response = out

        return res

    def dialogflow_projects_locations_agents_environments_run_continuous_test(self, request: operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest, security: operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestSecurity) -> operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse:
        r"""Kicks off a continuous test under the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunContinuousTestMetadata - `response`: RunContinuousTestResponse"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest, base_url, '/v3/{environment}:runContinuousTest', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_flows_create(self, request: operations.DialogflowProjectsLocationsAgentsFlowsCreateRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsCreateResponse:
        r"""Creates a flow in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsCreateRequest, base_url, '/v3/{parent}/flows', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_flow_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Flow])
                res.google_cloud_dialogflow_cx_v3_flow = out

        return res

    def dialogflow_projects_locations_agents_flows_export(self, request: operations.DialogflowProjectsLocationsAgentsFlowsExportRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsExportSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsExportResponse:
        r"""Exports the specified flow to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportFlowResponse Note that resources (e.g. intents, entities, webhooks) that the flow references will also be exported."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsExportRequest, base_url, '/v3/{name}:export', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_export_flow_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsExportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_flows_import(self, request: operations.DialogflowProjectsLocationsAgentsFlowsImportRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsImportSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsImportResponse:
        r"""Imports the specified flow to the specified agent from a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ImportFlowResponse Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsImportRequest, base_url, '/v3/{parent}/flows:import', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_import_flow_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsImportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_flows_list(self, request: operations.DialogflowProjectsLocationsAgentsFlowsListRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsListSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsListResponse:
        r"""Returns the list of all flows in the specified agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsListRequest, base_url, '/v3/{parent}/flows', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListFlowsResponse])
                res.google_cloud_dialogflow_cx_v3_list_flows_response = out

        return res

    def dialogflow_projects_locations_agents_flows_pages_create(self, request: operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse:
        r"""Creates a page in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest, base_url, '/v3/{parent}/pages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_page_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Page])
                res.google_cloud_dialogflow_cx_v3_page = out

        return res

    def dialogflow_projects_locations_agents_flows_pages_list(self, request: operations.DialogflowProjectsLocationsAgentsFlowsPagesListRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsPagesListSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsPagesListResponse:
        r"""Returns the list of all pages in the specified flow."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsPagesListRequest, base_url, '/v3/{parent}/pages', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsPagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsPagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListPagesResponse])
                res.google_cloud_dialogflow_cx_v3_list_pages_response = out

        return res

    def dialogflow_projects_locations_agents_flows_train(self, request: operations.DialogflowProjectsLocationsAgentsFlowsTrainRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsTrainSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsTrainResponse:
        r"""Trains the specified flow. Note that only the flow in 'draft' environment is trained. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsTrainRequest, base_url, '/v3/{name}:train', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsTrainRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsTrainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_flows_transition_route_groups_create(self, request: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse:
        r"""Creates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest, base_url, '/v3/{parent}/transitionRouteGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_transition_route_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3TransitionRouteGroup])
                res.google_cloud_dialogflow_cx_v3_transition_route_group = out

        return res

    def dialogflow_projects_locations_agents_flows_transition_route_groups_list(self, request: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse:
        r"""Returns the list of all transition route groups in the specified flow."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest, base_url, '/v3/{parent}/transitionRouteGroups', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListTransitionRouteGroupsResponse])
                res.google_cloud_dialogflow_cx_v3_list_transition_route_groups_response = out

        return res

    def dialogflow_projects_locations_agents_flows_validate(self, request: operations.DialogflowProjectsLocationsAgentsFlowsValidateRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsValidateSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsValidateResponse:
        r"""Validates the specified flow and creates or updates validation results. Please call this API after the training is completed to get the complete validation results."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsValidateRequest, base_url, '/v3/{name}:validate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_validate_flow_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsValidateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsValidateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3FlowValidationResult])
                res.google_cloud_dialogflow_cx_v3_flow_validation_result = out

        return res

    def dialogflow_projects_locations_agents_flows_versions_compare_versions(self, request: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse:
        r"""Compares the specified base version with target version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest, base_url, '/v3/{baseVersion}:compareVersions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_compare_versions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3CompareVersionsResponse])
                res.google_cloud_dialogflow_cx_v3_compare_versions_response = out

        return res

    def dialogflow_projects_locations_agents_flows_versions_create(self, request: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse:
        r"""Creates a Version in the specified Flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateVersionOperationMetadata - `response`: Version"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest, base_url, '/v3/{parent}/versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_version_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_flows_versions_list(self, request: operations.DialogflowProjectsLocationsAgentsFlowsVersionsListRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsListSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsVersionsListResponse:
        r"""Returns the list of all versions in the specified Flow."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsVersionsListRequest, base_url, '/v3/{parent}/versions', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListVersionsResponse])
                res.google_cloud_dialogflow_cx_v3_list_versions_response = out

        return res

    def dialogflow_projects_locations_agents_flows_versions_load(self, request: operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest, security: operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadSecurity) -> operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse:
        r"""Loads resources in the specified version to the draft flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest, base_url, '/v3/{name}:load', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_load_version_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_intents_create(self, request: operations.DialogflowProjectsLocationsAgentsIntentsCreateRequest, security: operations.DialogflowProjectsLocationsAgentsIntentsCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsIntentsCreateResponse:
        r"""Creates an intent in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsIntentsCreateRequest, base_url, '/v3/{parent}/intents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_intent", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsIntentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsIntentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Intent])
                res.google_cloud_dialogflow_cx_v3_intent = out

        return res

    def dialogflow_projects_locations_agents_intents_list(self, request: operations.DialogflowProjectsLocationsAgentsIntentsListRequest, security: operations.DialogflowProjectsLocationsAgentsIntentsListSecurity) -> operations.DialogflowProjectsLocationsAgentsIntentsListResponse:
        r"""Returns the list of all intents in the specified agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsIntentsListRequest, base_url, '/v3/{parent}/intents', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsIntentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsIntentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListIntentsResponse])
                res.google_cloud_dialogflow_cx_v3_list_intents_response = out

        return res

    def dialogflow_projects_locations_agents_list(self, request: operations.DialogflowProjectsLocationsAgentsListRequest, security: operations.DialogflowProjectsLocationsAgentsListSecurity) -> operations.DialogflowProjectsLocationsAgentsListResponse:
        r"""Returns the list of all agents in the specified location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsListRequest, base_url, '/v3/{parent}/agents', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListAgentsResponse])
                res.google_cloud_dialogflow_cx_v3_list_agents_response = out

        return res

    def dialogflow_projects_locations_agents_restore(self, request: operations.DialogflowProjectsLocationsAgentsRestoreRequest, security: operations.DialogflowProjectsLocationsAgentsRestoreSecurity) -> operations.DialogflowProjectsLocationsAgentsRestoreResponse:
        r"""Restores the specified agent from a binary file. Replaces the current agent with a new one. Note that all existing resources in agent (e.g. intents, entity types, flows) will be removed. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train flows prior to sending them queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsRestoreRequest, base_url, '/v3/{name}:restore', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_restore_agent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsRestoreRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsRestoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_sessions_detect_intent(self, request: operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest, security: operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentSecurity) -> operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse:
        r"""Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest, base_url, '/v3/{session}:detectIntent', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_detect_intent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3DetectIntentResponse])
                res.google_cloud_dialogflow_cx_v3_detect_intent_response = out

        return res

    def dialogflow_projects_locations_agents_sessions_entity_types_create(self, request: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest, security: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse:
        r"""Creates a session entity type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest, base_url, '/v3/{parent}/entityTypes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_session_entity_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3SessionEntityType])
                res.google_cloud_dialogflow_cx_v3_session_entity_type = out

        return res

    def dialogflow_projects_locations_agents_sessions_entity_types_list(self, request: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest, security: operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListSecurity) -> operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse:
        r"""Returns the list of all session entity types in the specified session."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest, base_url, '/v3/{parent}/entityTypes', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListSessionEntityTypesResponse])
                res.google_cloud_dialogflow_cx_v3_list_session_entity_types_response = out

        return res

    def dialogflow_projects_locations_agents_sessions_fulfill_intent(self, request: operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest, security: operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentSecurity) -> operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse:
        r"""Fulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest, base_url, '/v3/{session}:fulfillIntent', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_fulfill_intent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3FulfillIntentResponse])
                res.google_cloud_dialogflow_cx_v3_fulfill_intent_response = out

        return res

    def dialogflow_projects_locations_agents_sessions_match_intent(self, request: operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest, security: operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentSecurity) -> operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse:
        r"""Returns preliminary intent match results, doesn't change the session status."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest, base_url, '/v3/{session}:matchIntent', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_match_intent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3MatchIntentResponse])
                res.google_cloud_dialogflow_cx_v3_match_intent_response = out

        return res

    def dialogflow_projects_locations_agents_test_cases_batch_delete(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse:
        r"""Batch deletes test cases."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest, base_url, '/v3/{parent}/testCases:batchDelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_batch_delete_test_cases_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def dialogflow_projects_locations_agents_test_cases_batch_run(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse:
        r"""Kicks off a batch run of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: BatchRunTestCasesMetadata - `response`: BatchRunTestCasesResponse"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest, base_url, '/v3/{parent}/testCases:batchRun', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_batch_run_test_cases_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_test_cases_calculate_coverage(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse:
        r"""Calculates the test coverage for an agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest, base_url, '/v3/{agent}/testCases:calculateCoverage', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3CalculateCoverageResponse])
                res.google_cloud_dialogflow_cx_v3_calculate_coverage_response = out

        return res

    def dialogflow_projects_locations_agents_test_cases_create(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesCreateRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesCreateResponse:
        r"""Creates a test case for the given agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesCreateRequest, base_url, '/v3/{parent}/testCases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_test_case_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3TestCase])
                res.google_cloud_dialogflow_cx_v3_test_case = out

        return res

    def dialogflow_projects_locations_agents_test_cases_export(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesExportRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesExportSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesExportResponse:
        r"""Exports the test cases under the agent to a Cloud Storage bucket or a local file. Filter can be applied to export a subset of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportTestCasesMetadata - `response`: ExportTestCasesResponse"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesExportRequest, base_url, '/v3/{parent}/testCases:export', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_export_test_cases_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesExportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_test_cases_import(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesImportRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesImportSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesImportResponse:
        r"""Imports the test cases from a Cloud Storage bucket or a local file. It always creates new test cases and won't overwrite any existing ones. The provided ID in the imported test case is neglected. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportTestCasesMetadata - `response`: ImportTestCasesResponse"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesImportRequest, base_url, '/v3/{parent}/testCases:import', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_import_test_cases_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesImportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_test_cases_list(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesListRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesListSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesListResponse:
        r"""Fetches a list of test cases for a given agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesListRequest, base_url, '/v3/{parent}/testCases', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListTestCasesResponse])
                res.google_cloud_dialogflow_cx_v3_list_test_cases_response = out

        return res

    def dialogflow_projects_locations_agents_test_cases_results_list(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesResultsListRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesResultsListSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesResultsListResponse:
        r"""Fetches a list of results for a given test case."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesResultsListRequest, base_url, '/v3/{parent}/results', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesResultsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesResultsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListTestCaseResultsResponse])
                res.google_cloud_dialogflow_cx_v3_list_test_case_results_response = out

        return res

    def dialogflow_projects_locations_agents_test_cases_run(self, request: operations.DialogflowProjectsLocationsAgentsTestCasesRunRequest, security: operations.DialogflowProjectsLocationsAgentsTestCasesRunSecurity) -> operations.DialogflowProjectsLocationsAgentsTestCasesRunResponse:
        r"""Kicks off a test case run. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunTestCaseMetadata - `response`: RunTestCaseResponse"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsTestCasesRunRequest, base_url, '/v3/{name}:run', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_run_test_case_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsTestCasesRunRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsTestCasesRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_locations_agents_webhooks_create(self, request: operations.DialogflowProjectsLocationsAgentsWebhooksCreateRequest, security: operations.DialogflowProjectsLocationsAgentsWebhooksCreateSecurity) -> operations.DialogflowProjectsLocationsAgentsWebhooksCreateResponse:
        r"""Creates a webhook in the specified agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsWebhooksCreateRequest, base_url, '/v3/{parent}/webhooks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_webhook", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsWebhooksCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsWebhooksCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3Webhook])
                res.google_cloud_dialogflow_cx_v3_webhook = out

        return res

    def dialogflow_projects_locations_agents_webhooks_list(self, request: operations.DialogflowProjectsLocationsAgentsWebhooksListRequest, security: operations.DialogflowProjectsLocationsAgentsWebhooksListSecurity) -> operations.DialogflowProjectsLocationsAgentsWebhooksListResponse:
        r"""Returns the list of all webhooks in the specified agent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsAgentsWebhooksListRequest, base_url, '/v3/{parent}/webhooks', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsAgentsWebhooksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsAgentsWebhooksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListWebhooksResponse])
                res.google_cloud_dialogflow_cx_v3_list_webhooks_response = out

        return res

    def dialogflow_projects_locations_list(self, request: operations.DialogflowProjectsLocationsListRequest, security: operations.DialogflowProjectsLocationsListSecurity) -> operations.DialogflowProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsListRequest, base_url, '/v3/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudLocationListLocationsResponse])
                res.google_cloud_location_list_locations_response = out

        return res

    def dialogflow_projects_locations_security_settings_create(self, request: operations.DialogflowProjectsLocationsSecuritySettingsCreateRequest, security: operations.DialogflowProjectsLocationsSecuritySettingsCreateSecurity) -> operations.DialogflowProjectsLocationsSecuritySettingsCreateResponse:
        r"""Create security settings in the specified location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsSecuritySettingsCreateRequest, base_url, '/v3/{parent}/securitySettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_security_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsSecuritySettingsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsSecuritySettingsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3SecuritySettings])
                res.google_cloud_dialogflow_cx_v3_security_settings = out

        return res

    def dialogflow_projects_locations_security_settings_delete(self, request: operations.DialogflowProjectsLocationsSecuritySettingsDeleteRequest, security: operations.DialogflowProjectsLocationsSecuritySettingsDeleteSecurity) -> operations.DialogflowProjectsLocationsSecuritySettingsDeleteResponse:
        r"""Deletes the specified SecuritySettings."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsSecuritySettingsDeleteRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsSecuritySettingsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsSecuritySettingsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def dialogflow_projects_locations_security_settings_list(self, request: operations.DialogflowProjectsLocationsSecuritySettingsListRequest, security: operations.DialogflowProjectsLocationsSecuritySettingsListSecurity) -> operations.DialogflowProjectsLocationsSecuritySettingsListResponse:
        r"""Returns the list of all security settings in the specified location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsSecuritySettingsListRequest, base_url, '/v3/{parent}/securitySettings', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsSecuritySettingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsSecuritySettingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3ListSecuritySettingsResponse])
                res.google_cloud_dialogflow_cx_v3_list_security_settings_response = out

        return res

    def dialogflow_projects_locations_security_settings_patch(self, request: operations.DialogflowProjectsLocationsSecuritySettingsPatchRequest, security: operations.DialogflowProjectsLocationsSecuritySettingsPatchSecurity) -> operations.DialogflowProjectsLocationsSecuritySettingsPatchResponse:
        r"""Updates the specified SecuritySettings."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsLocationsSecuritySettingsPatchRequest, base_url, '/v3/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_dialogflow_cx_v3_security_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DialogflowProjectsLocationsSecuritySettingsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsLocationsSecuritySettingsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDialogflowCxV3SecuritySettings])
                res.google_cloud_dialogflow_cx_v3_security_settings = out

        return res

    def dialogflow_projects_operations_cancel(self, request: operations.DialogflowProjectsOperationsCancelRequest, security: operations.DialogflowProjectsOperationsCancelSecurity) -> operations.DialogflowProjectsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsOperationsCancelRequest, base_url, '/v3/{name}:cancel', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def dialogflow_projects_operations_get(self, request: operations.DialogflowProjectsOperationsGetRequest, security: operations.DialogflowProjectsOperationsGetSecurity) -> operations.DialogflowProjectsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsOperationsGetRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def dialogflow_projects_operations_list(self, request: operations.DialogflowProjectsOperationsListRequest, security: operations.DialogflowProjectsOperationsListSecurity) -> operations.DialogflowProjectsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DialogflowProjectsOperationsListRequest, base_url, '/v3/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.DialogflowProjectsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DialogflowProjectsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    