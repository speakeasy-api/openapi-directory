/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The piece of software on the Greengrass core that will be updated.
 */
export enum CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum {
  Core = "core",
  OtaAgent = "ota_agent",
}

/**
 * The minimum level of log statements that should be logged by the OTA Agent during an update.
 */
export enum CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum {
  None = "NONE",
  Trace = "TRACE",
  Debug = "DEBUG",
  Verbose = "VERBOSE",
  Info = "INFO",
  Warn = "WARN",
  Error = "ERROR",
  Fatal = "FATAL",
}

/**
 * The architecture of the cores which are the targets of an update.
 */
export enum CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum {
  Armv6l = "armv6l",
  Armv7l = "armv7l",
  X8664 = "x86_64",
  Aarch64 = "aarch64",
}

/**
 * The operating system of the cores which are the targets of an update.
 */
export enum CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum {
  Ubuntu = "ubuntu",
  Raspbian = "raspbian",
  AmazonLinux = "amazon_linux",
  Openwrt = "openwrt",
}

export class CreateSoftwareUpdateJobRequestBody extends SpeakeasyBase {
  /**
   * The IAM Role that Greengrass will use to create pre-signed URLs pointing towards the update artifact.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "S3UrlSignerRole" })
  s3UrlSignerRole: string;

  /**
   * The piece of software on the Greengrass core that will be updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SoftwareToUpdate" })
  softwareToUpdate: CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum;

  /**
   * The minimum level of log statements that should be logged by the OTA Agent during an update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdateAgentLogLevel" })
  updateAgentLogLevel?: CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum;

  /**
   * The ARNs of the targets (IoT things or IoT thing groups) that this update will be applied to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdateTargets" })
  updateTargets: string[];

  /**
   * The architecture of the cores which are the targets of an update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdateTargetsArchitecture" })
  updateTargetsArchitecture: CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum;

  /**
   * The operating system of the cores which are the targets of an update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdateTargetsOperatingSystem" })
  updateTargetsOperatingSystem: CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum;
}

export class CreateSoftwareUpdateJobRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSoftwareUpdateJobRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * A client token used to correlate requests and responses.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amzn-Client-Token",
  })
  xAmznClientToken?: string;
}

export class CreateSoftwareUpdateJobResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSoftwareUpdateJobResponse?: shared.CreateSoftwareUpdateJobResponse;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
