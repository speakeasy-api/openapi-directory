<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Export 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Top asset hardware products as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopHWCSVResponse
     */
	public function exportAssetTopHWCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopHWCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/top.hw.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopHWCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportAssetTopHWCSV200TextCsvBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Top asset operating systems as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopOSCSVResponse
     */
	public function exportAssetTopOSCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopOSCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/top.os.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopOSCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportAssetTopOSCSV200TextCsvBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Top asset tags as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopTagsCSVResponse
     */
	public function exportAssetTopTagsCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopTagsCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/top.tags.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopTagsCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportAssetTopTagsCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Top asset types as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopTypesCSVResponse
     */
	public function exportAssetTopTypesCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopTypesCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/top.types.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetTopTypesCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportAssetTopTypesCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Asset inventory as CSV
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVResponse
     */
	public function exportAssetsCSV(
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/assets.csv');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetsCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportAssetsCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Exports the asset inventory
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONResponse
     */
	public function exportAssetsJSON(
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/assets.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Asset>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Asset inventory as JSON line-delimited
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLResponse
     */
	public function exportAssetsJSONL(
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/assets.jsonl');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetsJSONLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportAssetsJSONL200ApplicationJSONBinaryString = $serializer->deserialize((string)$httpResponse->getBody(), 'string', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Asset inventory as Nmap-style XML
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLResponse
     */
	public function exportAssetsNmapXML(
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/assets.nmap.xml');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAssetsNmapXMLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->exportAssetsNmapXML200TextXMLBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Service inventory as CSV
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVResponse
     */
	public function exportServicesCSV(
        \OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/services.csv');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportServicesCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportServicesCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Service inventory as JSON
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONResponse
     */
	public function exportServicesJSON(
        \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/services.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->services = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Service>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Service inventory as JSON line-delimited
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLResponse
     */
	public function exportServicesJSONL(
        \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/services.jsonl');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportServicesJSONLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportServicesJSONL200ApplicationJSONBinaryString = $serializer->deserialize((string)$httpResponse->getBody(), 'string', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Top service products as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopProductsCSVResponse
     */
	public function exportServicesTopProductsCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopProductsCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services/top.products.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopProductsCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportServicesTopProductsCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Top service protocols as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopProtocolsCSVResponse
     */
	public function exportServicesTopProtocolsCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopProtocolsCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services/top.protocols.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopProtocolsCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportServicesTopProtocolsCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Top TCP services as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopTCPCSVResponse
     */
	public function exportServicesTopTCPCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopTCPCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services/top.tcp.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopTCPCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportServicesTopTCPCSV200TextCsvBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Top UDP services as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopUDPCSVResponse
     */
	public function exportServicesTopUDPCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopUDPCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services/top.udp.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportServicesTopUDPCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportServicesTopUDPCSV200TextCsvBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Site list as CSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSitesCSVResponse
     */
	public function exportSitesCSV(
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSitesCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/sites.csv');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSitesCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportSitesCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Export all sites
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONResponse
     */
	public function exportSitesJSON(
        \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/sites.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sites = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Site>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Site list as JSON line-delimited
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLResponse
     */
	public function exportSitesJSONL(
        \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/sites.jsonl');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSitesJSONLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportSitesJSONL200ApplicationJSONBinaryString = $serializer->deserialize((string)$httpResponse->getBody(), 'string', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Subnet utilization statistics as as CSV
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVResponse
     */
	public function exportSubnetUtilizationStatsCSV(
        \OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services/subnet.stats.csv');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSubnetUtilizationStatsCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportSubnetUtilizationStatsCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Wireless inventory as CSV
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVResponse
     */
	public function exportWirelessCSV(
        \OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/wireless.csv');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportWirelessCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportWirelessCSV200TextCSVBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Wireless inventory as JSON
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONResponse
     */
	public function exportWirelessJSON(
        \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/wireless.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelesses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Wireless>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Wireless inventory as JSON line-delimited
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLResponse
     */
	public function exportWirelessJSONL(
        \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export/org/wireless.jsonl');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportWirelessJSONLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportWirelessJSONL200ApplicationJSONBinaryString = $serializer->deserialize((string)$httpResponse->getBody(), 'string', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}