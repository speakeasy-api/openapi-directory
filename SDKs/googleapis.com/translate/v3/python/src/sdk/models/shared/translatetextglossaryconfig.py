"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranslateTextGlossaryConfig:
    r"""Configures which glossary is used for a specific target language and defines options for applying that glossary."""
    
    glossary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('glossary'), 'exclude': lambda f: f is None }})
    r"""Required. The `glossary` to be applied for this translation. The format depends on the glossary: - User-provided custom glossary: `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`"""  
    ignore_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreCase'), 'exclude': lambda f: f is None }})
    r"""Optional. Indicates match is case insensitive. The default value is `false` if missing."""  
    