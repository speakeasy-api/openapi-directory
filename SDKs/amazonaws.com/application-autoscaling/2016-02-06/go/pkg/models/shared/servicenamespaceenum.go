// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ServiceNamespaceEnum string

const (
	ServiceNamespaceEnumEcs              ServiceNamespaceEnum = "ecs"
	ServiceNamespaceEnumElasticmapreduce ServiceNamespaceEnum = "elasticmapreduce"
	ServiceNamespaceEnumEc2              ServiceNamespaceEnum = "ec2"
	ServiceNamespaceEnumAppstream        ServiceNamespaceEnum = "appstream"
	ServiceNamespaceEnumDynamodb         ServiceNamespaceEnum = "dynamodb"
	ServiceNamespaceEnumRds              ServiceNamespaceEnum = "rds"
	ServiceNamespaceEnumSagemaker        ServiceNamespaceEnum = "sagemaker"
	ServiceNamespaceEnumCustomResource   ServiceNamespaceEnum = "custom-resource"
	ServiceNamespaceEnumComprehend       ServiceNamespaceEnum = "comprehend"
	ServiceNamespaceEnumLambda           ServiceNamespaceEnum = "lambda"
	ServiceNamespaceEnumCassandra        ServiceNamespaceEnum = "cassandra"
	ServiceNamespaceEnumKafka            ServiceNamespaceEnum = "kafka"
	ServiceNamespaceEnumElasticache      ServiceNamespaceEnum = "elasticache"
	ServiceNamespaceEnumNeptune          ServiceNamespaceEnum = "neptune"
)

func (e ServiceNamespaceEnum) ToPointer() *ServiceNamespaceEnum {
	return &e
}

func (e *ServiceNamespaceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ecs":
		fallthrough
	case "elasticmapreduce":
		fallthrough
	case "ec2":
		fallthrough
	case "appstream":
		fallthrough
	case "dynamodb":
		fallthrough
	case "rds":
		fallthrough
	case "sagemaker":
		fallthrough
	case "custom-resource":
		fallthrough
	case "comprehend":
		fallthrough
	case "lambda":
		fallthrough
	case "cassandra":
		fallthrough
	case "kafka":
		fallthrough
	case "elasticache":
		fallthrough
	case "neptune":
		*e = ServiceNamespaceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceNamespaceEnum: %v", v)
	}
}
