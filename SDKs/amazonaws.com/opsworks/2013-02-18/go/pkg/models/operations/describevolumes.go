// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeVolumesXAmzTargetEnum
type DescribeVolumesXAmzTargetEnum string

const (
	DescribeVolumesXAmzTargetEnumOpsWorks20130218DescribeVolumes DescribeVolumesXAmzTargetEnum = "OpsWorks_20130218.DescribeVolumes"
)

func (e DescribeVolumesXAmzTargetEnum) ToPointer() *DescribeVolumesXAmzTargetEnum {
	return &e
}

func (e *DescribeVolumesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OpsWorks_20130218.DescribeVolumes":
		*e = DescribeVolumesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVolumesXAmzTargetEnum: %v", v)
	}
}

type DescribeVolumesRequest struct {
	DescribeVolumesRequest shared.DescribeVolumesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             DescribeVolumesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeVolumesResponse struct {
	ContentType string
	// Success
	DescribeVolumesResult *shared.DescribeVolumesResult
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
