// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartDeliveryStreamEncryptionXAmzTargetEnum
type StartDeliveryStreamEncryptionXAmzTargetEnum string

const (
	StartDeliveryStreamEncryptionXAmzTargetEnumFirehose20150804StartDeliveryStreamEncryption StartDeliveryStreamEncryptionXAmzTargetEnum = "Firehose_20150804.StartDeliveryStreamEncryption"
)

func (e *StartDeliveryStreamEncryptionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Firehose_20150804.StartDeliveryStreamEncryption":
		*e = StartDeliveryStreamEncryptionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartDeliveryStreamEncryptionXAmzTargetEnum: %s", s)
	}
}

type StartDeliveryStreamEncryptionHeaders struct {
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartDeliveryStreamEncryptionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartDeliveryStreamEncryptionRequest struct {
	Headers StartDeliveryStreamEncryptionHeaders
	Request shared.StartDeliveryStreamEncryptionInput `request:"mediaType=application/json"`
}

type StartDeliveryStreamEncryptionResponse struct {
	ContentType string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidKMSResourceException
	InvalidKMSResourceException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	StartDeliveryStreamEncryptionOutput map[string]interface{}
	StatusCode                          int
	RawResponse                         *http.Response
}
