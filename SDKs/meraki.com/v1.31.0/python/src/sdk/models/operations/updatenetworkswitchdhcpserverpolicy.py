"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlertsEmail:
    r"""Email alert settings for DHCP servers"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""When enabled, send an email if a new DHCP server is seen. Default value is false."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlerts:
    r"""Alert settings for DHCP servers"""
    
    email: Optional[UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlertsEmail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email alert settings for DHCP servers"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchDhcpServerPolicyRequestBodyArpInspection:
    r"""Dynamic ARP Inspection settings"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable or disable Dynamic ARP Inspection on the network. Default value is false."""  
    
class UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum(str, Enum):
    r"""'allow' or 'block' new DHCP servers. Default value is 'allow'."""
    ALLOW = 'allow'
    BLOCK = 'block'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchDhcpServerPolicyRequestBody:
    
    alerts: Optional[UpdateNetworkSwitchDhcpServerPolicyRequestBodyAlerts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alerts'), 'exclude': lambda f: f is None }})
    r"""Alert settings for DHCP servers"""  
    allowed_servers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedServers'), 'exclude': lambda f: f is None }})
    r"""List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set to block. An empty array will clear the entries."""  
    arp_inspection: Optional[UpdateNetworkSwitchDhcpServerPolicyRequestBodyArpInspection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arpInspection'), 'exclude': lambda f: f is None }})
    r"""Dynamic ARP Inspection settings"""  
    blocked_servers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockedServers'), 'exclude': lambda f: f is None }})
    r"""List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set to allow. An empty array will clear the entries."""  
    default_policy: Optional[UpdateNetworkSwitchDhcpServerPolicyRequestBodyDefaultPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultPolicy'), 'exclude': lambda f: f is None }})
    r"""'allow' or 'block' new DHCP servers. Default value is 'allow'."""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchDhcpServerPolicyRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkSwitchDhcpServerPolicyRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkSwitchDhcpServerPolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_dhcp_server_policy_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    