<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WalletRequests 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * createWallet
     * 
     * createWallet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatewalletRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatewalletResponse
     */
	public function createwallet(
        \OpenAPI\OpenAPI\Models\Operations\CreatewalletRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatewalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatewalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createwallet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Createwallet200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWalletAddress
     * 
     * createWalletAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressResponse
     */
	public function createwalletaddress(
        \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{wallet_name}/addresses', \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createwalletaddress200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Createwalletaddress200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createwalletaddress422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Createwalletaddress422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteWallet
     * 
     * deleteWallet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletewalletRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletewalletResponse
     */
	public function deletewallet(
        \OpenAPI\OpenAPI\Models\Operations\DeletewalletRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletewalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{walletname}', \OpenAPI\OpenAPI\Models\Operations\DeletewalletRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletewalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletewallet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Deletewallet200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * exportAddressPrivateKey
     * 
     * exportAddressPrivateKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyResponse
     */
	public function exportaddressprivatekey(
        \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{name}/addresses/{address}/export', \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportaddressprivatekey200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Exportaddressprivatekey200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportaddressprivatekey422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Exportaddressprivatekey422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getWallet
     * 
     * getWallet
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetwalletResponse
     */
	public function getwallet(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetwalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetwalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getwallet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getwallet200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getWalletAddresses
     * 
     * getWalletAddresses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesResponse
     */
	public function getwalletaddresses(
        \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{wallet_name}/addresses', \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getwalletaddresses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getwalletaddresses200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getwalletaddresses422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getwalletaddresses422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}