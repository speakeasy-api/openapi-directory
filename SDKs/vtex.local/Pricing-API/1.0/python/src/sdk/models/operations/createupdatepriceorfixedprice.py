"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePriceOrFixedPriceRequestBodyFixedPricesDateRange:
    r"""Period of time when the fixed price will be applied to the SKU."""
    
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""Start date of the price."""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""End date of the price."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePriceOrFixedPriceRequestBodyFixedPrices:
    r"""Array with general information about the SKU's fixed prices."""
    
    min_quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minQuantity') }})
    r"""Minimum quantity of the SKU for the fixed price to be applied."""  
    trade_policy_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradePolicyId') }})
    r"""Trade policy name or ID that will have the fixed price configured."""  
    value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Fixed price value."""  
    date_range: Optional[CreateUpdatePriceOrFixedPriceRequestBodyFixedPricesDateRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateRange'), 'exclude': lambda f: f is None }})
    r"""Period of time when the fixed price will be applied to the SKU."""  
    list_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""SKU List Fixed Price."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdatePriceOrFixedPriceRequestBody:
    
    base_price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basePrice') }})
    r"""SKU selling base price. If you decide to fill only the `basePrice` item, the `markup` and `costPrice` will be automatically generated to adapt to the number inserted in `basePrice`."""  
    list_price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice') }})
    r"""SKU's suggested selling price."""  
    markup: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('markup') }})
    r"""The profit percentage that is to be obtained from the sale of that SKU. If you decide to fill the `markup` item, you must also fill the `costPrice`. The `basePrice` will be automatically generated based on both values."""  
    cost_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costPrice'), 'exclude': lambda f: f is None }})
    r"""SKU selling cost price. If you decide to fill the `costPrice` item, you must also fill the `markup` and `basePrice` will be automatically generated based on both values."""  
    fixed_prices: Optional[list[CreateUpdatePriceOrFixedPriceRequestBodyFixedPrices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedPrices'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateUpdatePriceOrFixedPriceRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Describes the type of the content being sent."""  
    item_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'itemId', 'style': 'simple', 'explode': False }})
    r"""SKU unique identifier number."""  
    request_body: Optional[CreateUpdatePriceOrFixedPriceRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateUpdatePriceOrFixedPriceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    