/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NamedPort } from "./namedport";
import { Expose, Type } from "class-transformer";

/**
 * Represents an Instance Group resource. Instance Groups can be used to configure a target for load balancing. Instance groups can either be managed or unmanaged. To create managed instance groups, use the instanceGroupManager or regionInstanceGroupManager resource instead. Use zonal unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. You cannot create regional unmanaged instance groups. For more information, read Instance groups.
 */
export class InstanceGroup extends SpeakeasyBase {
  /**
   * [Output Only] The creation timestamp for this instance group in RFC3339 text format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTimestamp" })
  creationTimestamp?: string;

  /**
   * An optional description of this resource. Provide this property when you create the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * [Output Only] A unique identifier for this instance group, generated by the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * [Output Only] The resource type, which is always compute#instanceGroup for instance groups.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   *  Assigns a name to a port number. For example: {name: "http", port: 80} This allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: "app1", port: 8080}, {name: "app1", port: 8081}, {name: "app2", port: 8082}] Named ports apply to all instances in this instance group.
   */
  @SpeakeasyMetadata({ elemType: NamedPort })
  @Expose({ name: "namedPorts" })
  @Type(() => NamedPort)
  namedPorts?: NamedPort[];

  /**
   * [Output Only] The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * [Output Only] The URL of the region where the instance group is located (for regional resources).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region?: string;

  /**
   * [Output Only] The URL for this instance group. The server generates this URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * [Output Only] Server-defined URL for this resource with the resource id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLinkWithId" })
  selfLinkWithId?: string;

  /**
   * [Output Only] The total number of instances in the instance group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * [Output Only] The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnetwork" })
  subnetwork?: string;

  /**
   * [Output Only] The URL of the zone where the instance group is located (for zonal resources).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zone" })
  zone?: string;
}
