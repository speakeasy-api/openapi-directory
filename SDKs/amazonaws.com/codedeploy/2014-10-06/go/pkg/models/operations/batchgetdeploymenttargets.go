// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetDeploymentTargetsXAmzTargetEnum
type BatchGetDeploymentTargetsXAmzTargetEnum string

const (
	BatchGetDeploymentTargetsXAmzTargetEnumCodeDeploy20141006BatchGetDeploymentTargets BatchGetDeploymentTargetsXAmzTargetEnum = "CodeDeploy_20141006.BatchGetDeploymentTargets"
)

func (e *BatchGetDeploymentTargetsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.BatchGetDeploymentTargets":
		*e = BatchGetDeploymentTargetsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetDeploymentTargetsXAmzTargetEnum: %s", s)
	}
}

type BatchGetDeploymentTargetsHeaders struct {
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        BatchGetDeploymentTargetsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetDeploymentTargetsRequest struct {
	Headers BatchGetDeploymentTargetsHeaders
	Request shared.BatchGetDeploymentTargetsInput `request:"mediaType=application/json"`
}

type BatchGetDeploymentTargetsResponse struct {
	// Success
	BatchGetDeploymentTargetsOutput *shared.BatchGetDeploymentTargetsOutput
	ContentType                     string
	// DeploymentDoesNotExistException
	DeploymentDoesNotExistException interface{}
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// DeploymentNotStartedException
	DeploymentNotStartedException interface{}
	// DeploymentTargetDoesNotExistException
	DeploymentTargetDoesNotExistException interface{}
	// DeploymentTargetIdRequiredException
	DeploymentTargetIDRequiredException interface{}
	// DeploymentTargetListSizeExceededException
	DeploymentTargetListSizeExceededException interface{}
	// InstanceDoesNotExistException
	InstanceDoesNotExistException interface{}
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	// InvalidDeploymentTargetIdException
	InvalidDeploymentTargetIDException interface{}
	StatusCode                         int
	RawResponse                        *http.Response
}
