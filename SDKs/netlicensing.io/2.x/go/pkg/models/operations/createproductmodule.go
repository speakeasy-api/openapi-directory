// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateProductModuleSecurity struct {
	BasicAuth shared.SchemeBasicAuth `security:"scheme,type=http,subtype=basic"`
}

type CreateProductModuleRequestBodyLicenseTemplateEnum string

const (
	CreateProductModuleRequestBodyLicenseTemplateEnumTimevolume CreateProductModuleRequestBodyLicenseTemplateEnum = "TIMEVOLUME"
	CreateProductModuleRequestBodyLicenseTemplateEnumFeature    CreateProductModuleRequestBodyLicenseTemplateEnum = "FEATURE"
)

func (e *CreateProductModuleRequestBodyLicenseTemplateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TIMEVOLUME":
		fallthrough
	case "FEATURE":
		*e = CreateProductModuleRequestBodyLicenseTemplateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProductModuleRequestBodyLicenseTemplateEnum: %s", s)
	}
}

type CreateProductModuleRequestBodyNodeSecretModeEnum string

const (
	CreateProductModuleRequestBodyNodeSecretModeEnumPredefined CreateProductModuleRequestBodyNodeSecretModeEnum = "PREDEFINED"
	CreateProductModuleRequestBodyNodeSecretModeEnumClient     CreateProductModuleRequestBodyNodeSecretModeEnum = "CLIENT"
)

func (e *CreateProductModuleRequestBodyNodeSecretModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PREDEFINED":
		fallthrough
	case "CLIENT":
		*e = CreateProductModuleRequestBodyNodeSecretModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProductModuleRequestBodyNodeSecretModeEnum: %s", s)
	}
}

type CreateProductModuleRequestBody struct {
	// If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.
	Active bool `form:"name=active"`
	// License Template. Mandatory for 'Try &amp; Buy' licensing model.
	LicenseTemplate []CreateProductModuleRequestBodyLicenseTemplateEnum `form:"name=licenseTemplate"`
	// Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.
	LicensingModel string `form:"name=licensingModel"`
	// Maximum checkout validity (days). Mandatory for 'Floating' licensing model.
	MaxCheckoutValidity *int `form:"name=maxCheckoutValidity"`
	// Product Module name that is visible to the end customers in NetLicensing Shop.
	Name string `form:"name=name"`
	// Secret Mode. Mandatory for 'Node-Locked' licensing model.
	NodeSecretMode []CreateProductModuleRequestBodyNodeSecretModeEnum `form:"name=nodeSecretMode"`
	// Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
	Number *string `form:"name=number"`
	// Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
	ProductNumber string `form:"name=productNumber"`
	// Remaining time volume for red level. Mandatory for 'Rental' licensing model.
	RedThreshold *int `form:"name=redThreshold"`
	// Remaining time volume for yellow level. Mandatory for 'Rental' licensing model.
	YellowThreshold *int `form:"name=yellowThreshold"`
}

type CreateProductModuleRequest struct {
	Request  CreateProductModuleRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	Security CreateProductModuleSecurity
}

type CreateProductModuleResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful request
	Netlicensing *shared.Netlicensing
}
