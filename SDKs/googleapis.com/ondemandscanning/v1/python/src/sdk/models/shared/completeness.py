"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Completeness:
    r"""Indicates that the builder claims certain fields in this message to be complete."""
    
    arguments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arguments'), 'exclude': lambda f: f is None }})
    r"""If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe."""  
    environment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""If true, the builder claims that recipe.environment is claimed to be complete."""  
    materials: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('materials'), 'exclude': lambda f: f is None }})
    r"""If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \\"hermetic\\"."""  
    