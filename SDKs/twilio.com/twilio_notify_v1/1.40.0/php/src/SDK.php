<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const CREATE_BINDING_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const CREATE_CREDENTIAL_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const CREATE_NOTIFICATION_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const DELETE_BINDING_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const DELETE_CREDENTIAL_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const FETCH_BINDING_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const FETCH_CREDENTIAL_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const LIST_BINDING_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const LIST_CREDENTIAL_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const UPDATE_CREDENTIAL_SERVERS = [
		'https://notify.twilio.com',
	];
	
	public const UPDATE_SERVICE_SERVERS = [
		'https://notify.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createBinding
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBindingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBindingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBindingResponse
     */
	public function createBinding(
        \OpenAPI\OpenAPI\Models\Operations\CreateBindingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateBindingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBindingResponse
    {
        $baseUrl = SDK::CREATE_BINDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Bindings', \OpenAPI\OpenAPI\Models\Operations\CreateBindingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBindingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1ServiceBinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1ServiceBinding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialCreateCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse
     */
	public function createCredential(
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialCreateCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse
    {
        $baseUrl = SDK::CREATE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createNotification
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNotificationResponse
     */
	public function createNotification(
        \OpenAPI\OpenAPI\Models\Operations\CreateNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateNotificationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNotificationResponse
    {
        $baseUrl = SDK::CREATE_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Notifications', \OpenAPI\OpenAPI\Models\Operations\CreateNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1ServiceNotification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1ServiceNotification', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteBinding
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBindingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBindingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBindingResponse
     */
	public function deleteBinding(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBindingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteBindingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBindingResponse
    {
        $baseUrl = SDK::DELETE_BINDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Bindings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteBindingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBindingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse
     */
	public function deleteCredential(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse
    {
        $baseUrl = SDK::DELETE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchBinding
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBindingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBindingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBindingResponse
     */
	public function fetchBinding(
        \OpenAPI\OpenAPI\Models\Operations\FetchBindingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBindingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBindingResponse
    {
        $baseUrl = SDK::FETCH_BINDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Bindings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchBindingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBindingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1ServiceBinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1ServiceBinding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse
     */
	public function fetchCredential(
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse
    {
        $baseUrl = SDK::FETCH_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listBinding
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBindingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBindingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBindingResponse
     */
	public function listBinding(
        \OpenAPI\OpenAPI\Models\Operations\ListBindingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBindingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBindingResponse
    {
        $baseUrl = SDK::LIST_BINDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Bindings', \OpenAPI\OpenAPI\Models\Operations\ListBindingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBindingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBindingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBindingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBindingListBindingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse
     */
	public function listCredential(
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse
    {
        $baseUrl = SDK::LIST_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCredentialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCredentialListCredentialResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse
     */
	public function updateCredential(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse
    {
        $baseUrl = SDK::UPDATE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifyV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotifyV1Service', 'json');
            }
        }

        return $response;
    }
}