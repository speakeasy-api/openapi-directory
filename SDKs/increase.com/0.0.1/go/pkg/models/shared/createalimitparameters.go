// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateALimitParametersIntervalEnum - The interval for the metric. Required if `metric` is `count` or `volume`.
type CreateALimitParametersIntervalEnum string

const (
	CreateALimitParametersIntervalEnumTransaction CreateALimitParametersIntervalEnum = "transaction"
	CreateALimitParametersIntervalEnumDay         CreateALimitParametersIntervalEnum = "day"
	CreateALimitParametersIntervalEnumWeek        CreateALimitParametersIntervalEnum = "week"
	CreateALimitParametersIntervalEnumMonth       CreateALimitParametersIntervalEnum = "month"
	CreateALimitParametersIntervalEnumYear        CreateALimitParametersIntervalEnum = "year"
	CreateALimitParametersIntervalEnumAllTime     CreateALimitParametersIntervalEnum = "all_time"
)

func (e CreateALimitParametersIntervalEnum) ToPointer() *CreateALimitParametersIntervalEnum {
	return &e
}

func (e *CreateALimitParametersIntervalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transaction":
		fallthrough
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "month":
		fallthrough
	case "year":
		fallthrough
	case "all_time":
		*e = CreateALimitParametersIntervalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateALimitParametersIntervalEnum: %v", v)
	}
}

// CreateALimitParametersMetricEnum - The metric for the limit.
type CreateALimitParametersMetricEnum string

const (
	CreateALimitParametersMetricEnumCount  CreateALimitParametersMetricEnum = "count"
	CreateALimitParametersMetricEnumVolume CreateALimitParametersMetricEnum = "volume"
)

func (e CreateALimitParametersMetricEnum) ToPointer() *CreateALimitParametersMetricEnum {
	return &e
}

func (e *CreateALimitParametersMetricEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "count":
		fallthrough
	case "volume":
		*e = CreateALimitParametersMetricEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateALimitParametersMetricEnum: %v", v)
	}
}

type CreateALimitParameters struct {
	// The interval for the metric. Required if `metric` is `count` or `volume`.
	Interval *CreateALimitParametersIntervalEnum `json:"interval,omitempty"`
	// The metric for the limit.
	Metric CreateALimitParametersMetricEnum `json:"metric"`
	// The identifier of the Account or Account Number you wish to associate the limit with.
	ModelID string `json:"model_id"`
	// The value to test the limit against.
	Value int64 `json:"value"`
}
