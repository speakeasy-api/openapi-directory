// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GroupsGetDatapointsSummaryPathParams struct {
	// Filter by this group id
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// GroupsGetDatapointsSummarySortDirectionEnum - Direction of sort "asc" or "desc"
type GroupsGetDatapointsSummarySortDirectionEnum string

const (
	GroupsGetDatapointsSummarySortDirectionEnumAsc  GroupsGetDatapointsSummarySortDirectionEnum = "asc"
	GroupsGetDatapointsSummarySortDirectionEnumDesc GroupsGetDatapointsSummarySortDirectionEnum = "desc"
)

func (e *GroupsGetDatapointsSummarySortDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GroupsGetDatapointsSummarySortDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetDatapointsSummarySortDirectionEnum: %s", s)
	}
}

// GroupsGetDatapointsSummaryStatusEnum - Status of datapoint ("deleted"/"active"/"paused"/"spam")
type GroupsGetDatapointsSummaryStatusEnum string

const (
	GroupsGetDatapointsSummaryStatusEnumDeleted GroupsGetDatapointsSummaryStatusEnum = "deleted"
	GroupsGetDatapointsSummaryStatusEnumActive  GroupsGetDatapointsSummaryStatusEnum = "active"
)

func (e *GroupsGetDatapointsSummaryStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deleted":
		fallthrough
	case "active":
		*e = GroupsGetDatapointsSummaryStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetDatapointsSummaryStatusEnum: %s", s)
	}
}

// GroupsGetDatapointsSummaryTimeFrameEnum - Timeframe of the request. See list at $timeframeList
type GroupsGetDatapointsSummaryTimeFrameEnum string

const (
	GroupsGetDatapointsSummaryTimeFrameEnumToday         GroupsGetDatapointsSummaryTimeFrameEnum = "today"
	GroupsGetDatapointsSummaryTimeFrameEnumYesterday     GroupsGetDatapointsSummaryTimeFrameEnum = "yesterday"
	GroupsGetDatapointsSummaryTimeFrameEnumLast7         GroupsGetDatapointsSummaryTimeFrameEnum = "last7"
	GroupsGetDatapointsSummaryTimeFrameEnumLast30        GroupsGetDatapointsSummaryTimeFrameEnum = "last30"
	GroupsGetDatapointsSummaryTimeFrameEnumLastmonth     GroupsGetDatapointsSummaryTimeFrameEnum = "lastmonth"
	GroupsGetDatapointsSummaryTimeFrameEnumCurrentmonth  GroupsGetDatapointsSummaryTimeFrameEnum = "currentmonth"
	GroupsGetDatapointsSummaryTimeFrameEnumPreviousmonth GroupsGetDatapointsSummaryTimeFrameEnum = "previousmonth"
	GroupsGetDatapointsSummaryTimeFrameEnumLast90        GroupsGetDatapointsSummaryTimeFrameEnum = "last90"
	GroupsGetDatapointsSummaryTimeFrameEnumLast120       GroupsGetDatapointsSummaryTimeFrameEnum = "last120"
	GroupsGetDatapointsSummaryTimeFrameEnumLast180       GroupsGetDatapointsSummaryTimeFrameEnum = "last180"
	GroupsGetDatapointsSummaryTimeFrameEnumLast12months  GroupsGetDatapointsSummaryTimeFrameEnum = "last12months"
	GroupsGetDatapointsSummaryTimeFrameEnumLastyear      GroupsGetDatapointsSummaryTimeFrameEnum = "lastyear"
	GroupsGetDatapointsSummaryTimeFrameEnumCurrentyear   GroupsGetDatapointsSummaryTimeFrameEnum = "currentyear"
	GroupsGetDatapointsSummaryTimeFrameEnumBeginning     GroupsGetDatapointsSummaryTimeFrameEnum = "beginning"
	GroupsGetDatapointsSummaryTimeFrameEnumCustom        GroupsGetDatapointsSummaryTimeFrameEnum = "custom"
)

func (e *GroupsGetDatapointsSummaryTimeFrameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "today":
		fallthrough
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "last12months":
		fallthrough
	case "lastyear":
		fallthrough
	case "currentyear":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = GroupsGetDatapointsSummaryTimeFrameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetDatapointsSummaryTimeFrameEnum: %s", s)
	}
}

// GroupsGetDatapointsSummaryTypeEnum - Type of datapoint ("tl"/"tp")
type GroupsGetDatapointsSummaryTypeEnum string

const (
	GroupsGetDatapointsSummaryTypeEnumTp GroupsGetDatapointsSummaryTypeEnum = "tp"
	GroupsGetDatapointsSummaryTypeEnumTl GroupsGetDatapointsSummaryTypeEnum = "tl"
)

func (e *GroupsGetDatapointsSummaryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tp":
		fallthrough
	case "tl":
		*e = GroupsGetDatapointsSummaryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetDatapointsSummaryTypeEnum: %s", s)
	}
}

type GroupsGetDatapointsSummaryQueryParams struct {
	// Is the datapoint marked as favourite
	Favourite *bool `queryParam:"style=form,explode=true,name=favourite"`
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// Limit results to this number
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Offset where to start from
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Field to sort by
	SortBy *string `queryParam:"style=form,explode=true,name=sortBy"`
	// Direction of sort "asc" or "desc"
	SortDirection *GroupsGetDatapointsSummarySortDirectionEnum `queryParam:"style=form,explode=true,name=sortDirection"`
	// Status of datapoint ("deleted"/"active"/"paused"/"spam")
	Status *GroupsGetDatapointsSummaryStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// A comma separated list of tags you want to filter with.
	Tag *string `queryParam:"style=form,explode=true,name=tag"`
	// Filter fields by this pattern
	TextSearch *string `queryParam:"style=form,explode=true,name=textSearch"`
	// Timeframe of the request. See list at $timeframeList
	TimeFrame GroupsGetDatapointsSummaryTimeFrameEnum `queryParam:"style=form,explode=true,name=timeFrame"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
	// Type of datapoint ("tl"/"tp")
	Type *GroupsGetDatapointsSummaryTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GroupsGetDatapointsSummaryRequest struct {
	PathParams  GroupsGetDatapointsSummaryPathParams
	QueryParams GroupsGetDatapointsSummaryQueryParams
}

type GroupsGetDatapointsSummaryResponse struct {
	APICoreDtoAggregatedAggregatedSummaryResult *shared.APICoreDtoAggregatedAggregatedSummaryResult
	ContentType                                 string
	StatusCode                                  int
	RawResponse                                 *http.Response
}
