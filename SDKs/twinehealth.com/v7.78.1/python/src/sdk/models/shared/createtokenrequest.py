"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateTokenRequestDataAttributesGrantTypeEnum(str, Enum):
    REFRESH_TOKEN = 'refresh_token'
    CLIENT_CREDENTIALS = 'client_credentials'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTokenRequestDataAttributes:
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""Contact Fitbit Plus API Support to get a client id and secret."""  
    grant_type: CreateTokenRequestDataAttributesGrantTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_type') }})  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret'), 'exclude': lambda f: f is None }})
    r"""Contact Fitbit Plus API Support to get a client id and secret. Secret is required if grant_type is \\"client_credentials\\" """  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token'), 'exclude': lambda f: f is None }})
    r"""Required if grant_type is \\"refresh_token\\" """  
    
class CreateTokenRequestDataTypeEnum(str, Enum):
    TOKEN = 'token'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTokenRequestData:
    
    attributes: CreateTokenRequestDataAttributes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})  
    type: Optional[CreateTokenRequestDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTokenRequest:
    
    data: CreateTokenRequestData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    