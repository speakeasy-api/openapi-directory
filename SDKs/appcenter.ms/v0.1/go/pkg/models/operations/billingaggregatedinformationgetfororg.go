// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BillingAggregatedInformationGetForOrgSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// BillingAggregatedInformationGetForOrgPeriodEnum - Type of period that should be included in the Billing Information
type BillingAggregatedInformationGetForOrgPeriodEnum string

const (
	BillingAggregatedInformationGetForOrgPeriodEnumPrevious BillingAggregatedInformationGetForOrgPeriodEnum = "Previous"
	BillingAggregatedInformationGetForOrgPeriodEnumCurrent  BillingAggregatedInformationGetForOrgPeriodEnum = "Current"
	BillingAggregatedInformationGetForOrgPeriodEnumNext     BillingAggregatedInformationGetForOrgPeriodEnum = "Next"
)

func (e BillingAggregatedInformationGetForOrgPeriodEnum) ToPointer() *BillingAggregatedInformationGetForOrgPeriodEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrgPeriodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Previous":
		fallthrough
	case "Current":
		fallthrough
	case "Next":
		*e = BillingAggregatedInformationGetForOrgPeriodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrgPeriodEnum: %v", v)
	}
}

// BillingAggregatedInformationGetForOrgServiceEnum - Type of service that should be included in the Billing Information
type BillingAggregatedInformationGetForOrgServiceEnum string

const (
	BillingAggregatedInformationGetForOrgServiceEnumTest  BillingAggregatedInformationGetForOrgServiceEnum = "Test"
	BillingAggregatedInformationGetForOrgServiceEnumBuild BillingAggregatedInformationGetForOrgServiceEnum = "Build"
)

func (e BillingAggregatedInformationGetForOrgServiceEnum) ToPointer() *BillingAggregatedInformationGetForOrgServiceEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrgServiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Test":
		fallthrough
	case "Build":
		*e = BillingAggregatedInformationGetForOrgServiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrgServiceEnum: %v", v)
	}
}

type BillingAggregatedInformationGetForOrgRequest struct {
	// The name of the Organization
	OrgName string `pathParam:"style=simple,explode=false,name=orgName"`
	// Type of period that should be included in the Billing Information
	Period *BillingAggregatedInformationGetForOrgPeriodEnum `queryParam:"style=form,explode=true,name=period"`
	// Type of service that should be included in the Billing Information
	Service *BillingAggregatedInformationGetForOrgServiceEnum `queryParam:"style=form,explode=true,name=service"`
	// Controls whether the API should show the original plan when Azure Subscription is not enabled
	ShowOriginalPlans *bool `queryParam:"style=form,explode=true,name=showOriginalPlans"`
}

// BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum int64

const (
	BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnumFourHundred         BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum = 400
	BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnumFourHundredAndThree BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum = 403
	BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnumFiveHundred         BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum = 500
)

func (e BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum) ToPointer() *BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type BillingAggregatedInformationGetForOrgDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *BillingAggregatedInformationGetForOrgDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed
	Message *string `json:"message,omitempty"`
}

// BillingAggregatedInformationGetForOrgDefaultApplicationJSON - Error
type BillingAggregatedInformationGetForOrgDefaultApplicationJSON struct {
	Error *BillingAggregatedInformationGetForOrgDefaultApplicationJSONError `json:"error,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum - State of the Azure subscription used for billing
type BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum string

const (
	BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnumEnabled  BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum = "Enabled"
	BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnumDisabled BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum = "Disabled"
	BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnumNotSet   BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum = "NotSet"
)

func (e BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum) ToPointer() *BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Enabled":
		fallthrough
	case "Disabled":
		fallthrough
	case "NotSet":
		*e = BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum: %v", v)
	}
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum - Service that receives payments for this billing plan.
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum string

const (
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumNone      BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "None"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumAppCenter BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "AppCenter"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumGitHub    BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "GitHub"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumXtc       BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "Xtc"
)

func (e BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum) ToPointer() *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "AppCenter":
		fallthrough
	case "GitHub":
		fallthrough
	case "Xtc":
		*e = BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum: %v", v)
	}
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum - Name of the service that the plan applies to.
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum string

const (
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnumBuild BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Build"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnumTest  BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Test"
)

func (e BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum) ToPointer() *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Build":
		fallthrough
	case "Test":
		*e = BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum: %v", v)
	}
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan - Billing Plan
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan struct {
	// Collection of attribute values.
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	// The Billing Plan ID
	ID *string `json:"id,omitempty"`
	// A collection of named numeric values
	Limits   map[string]float64 `json:"limits,omitempty"`
	ParentID *string            `json:"parentId,omitempty"`
	// Service that receives payments for this billing plan.
	PaymentSource *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum `json:"paymentSource,omitempty"`
	// Price of the Billing Plan
	Price *float64 `json:"price,omitempty"`
	// Name of the service that the plan applies to.
	Service *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum `json:"service,omitempty"`
	// Version of the Billing Plan schema
	Version *string `json:"version,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccount - Selection of a billing plan
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccount struct {
	// Number of instances of the billing plan.
	Count *int64 `json:"count,omitempty"`
	// Billing Plan
	Plan *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan `json:"plan,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriod - Billing plans for a given period
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriod struct {
	// Selection of a billing plan
	ByAccount *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriodByAccount `json:"byAccount,omitempty"`
	// Exclusive end of the period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start of the period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildService - Billing Plans for a single service
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildService struct {
	// Can customer select trial plan for that service (if it exists)?
	CanSelectTrialPlan *bool `json:"canSelectTrialPlan,omitempty"`
	// Billing plans for a given period
	CurrentBillingPeriod *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildServiceCurrentBillingPeriod `json:"currentBillingPeriod,omitempty"`
	// Expiration time of the last selected trial plan. Will be null if trial plan was not used.
	LastTrialPlanExpirationTime *string `json:"lastTrialPlanExpirationTime,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum - Service that receives payments for this billing plan.
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum string

const (
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumNone      BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "None"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumAppCenter BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "AppCenter"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumGitHub    BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "GitHub"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumXtc       BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "Xtc"
)

func (e BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum) ToPointer() *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "AppCenter":
		fallthrough
	case "GitHub":
		fallthrough
	case "Xtc":
		*e = BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum: %v", v)
	}
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum - Name of the service that the plan applies to.
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum string

const (
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnumBuild BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Build"
	BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnumTest  BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Test"
)

func (e BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum) ToPointer() *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum {
	return &e
}

func (e *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Build":
		fallthrough
	case "Test":
		*e = BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum: %v", v)
	}
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlan - Billing Plan
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlan struct {
	// Collection of attribute values.
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	// The Billing Plan ID
	ID *string `json:"id,omitempty"`
	// A collection of named numeric values
	Limits   map[string]float64 `json:"limits,omitempty"`
	ParentID *string            `json:"parentId,omitempty"`
	// Service that receives payments for this billing plan.
	PaymentSource *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum `json:"paymentSource,omitempty"`
	// Price of the Billing Plan
	Price *float64 `json:"price,omitempty"`
	// Name of the service that the plan applies to.
	Service *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum `json:"service,omitempty"`
	// Version of the Billing Plan schema
	Version *string `json:"version,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccount - Selection of a billing plan
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccount struct {
	// Number of instances of the billing plan.
	Count *int64 `json:"count,omitempty"`
	// Billing Plan
	Plan *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccountPlan `json:"plan,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriod - Billing plans for a given period
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriod struct {
	// Selection of a billing plan
	ByAccount *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriodByAccount `json:"byAccount,omitempty"`
	// Exclusive end of the period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start of the period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestService - Billing Plans for a single service
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestService struct {
	// Can customer select trial plan for that service (if it exists)?
	CanSelectTrialPlan *bool `json:"canSelectTrialPlan,omitempty"`
	// Billing plans for a given period
	CurrentBillingPeriod *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestServiceCurrentBillingPeriod `json:"currentBillingPeriod,omitempty"`
	// Expiration time of the last selected trial plan. Will be null if trial plan was not used.
	LastTrialPlanExpirationTime *string `json:"lastTrialPlanExpirationTime,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlans - Billing Plans section in the Billing Information
type BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlans struct {
	// Billing Plans for a single service
	BuildService *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansBuildService `json:"buildService,omitempty"`
	// Billing Plans for a single service
	TestService *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlansTestService `json:"testService,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONUsageBuildServiceCurrentUsagePeriod - Usage for a single period
type BillingAggregatedInformationGetForOrg200ApplicationJSONUsageBuildServiceCurrentUsagePeriod struct {
	// A collection of named numeric values
	ByAccount map[string]float64 `json:"byAccount,omitempty"`
	// A collection of  named numeric values grouped by app
	ByApp map[string]map[string]float64 `json:"byApp,omitempty"`
	// Exclusive end time of the usage period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start time of the usage period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONUsageBuildService - Resource usage for a single Mobile Center service
type BillingAggregatedInformationGetForOrg200ApplicationJSONUsageBuildService struct {
	// Usage for a single period
	CurrentUsagePeriod *BillingAggregatedInformationGetForOrg200ApplicationJSONUsageBuildServiceCurrentUsagePeriod `json:"currentUsagePeriod,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONUsageTestServiceCurrentUsagePeriod - Usage for a single period
type BillingAggregatedInformationGetForOrg200ApplicationJSONUsageTestServiceCurrentUsagePeriod struct {
	// A collection of named numeric values
	ByAccount map[string]float64 `json:"byAccount,omitempty"`
	// A collection of  named numeric values grouped by app
	ByApp map[string]map[string]float64 `json:"byApp,omitempty"`
	// Exclusive end time of the usage period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start time of the usage period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONUsageTestService - Resource usage for a single Mobile Center service
type BillingAggregatedInformationGetForOrg200ApplicationJSONUsageTestService struct {
	// Usage for a single period
	CurrentUsagePeriod *BillingAggregatedInformationGetForOrg200ApplicationJSONUsageTestServiceCurrentUsagePeriod `json:"currentUsagePeriod,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSONUsage - Usage section in the Billing Information
type BillingAggregatedInformationGetForOrg200ApplicationJSONUsage struct {
	// Resource usage for a single Mobile Center service
	BuildService *BillingAggregatedInformationGetForOrg200ApplicationJSONUsageBuildService `json:"buildService,omitempty"`
	// Resource usage for a single Mobile Center service
	TestService *BillingAggregatedInformationGetForOrg200ApplicationJSONUsageTestService `json:"testService,omitempty"`
}

// BillingAggregatedInformationGetForOrg200ApplicationJSON - Aggregated Billing Information for a user or an organization
type BillingAggregatedInformationGetForOrg200ApplicationJSON struct {
	// Unique identifier for the Azure subscription used for billing
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty"`
	// State of the Azure subscription used for billing
	AzureSubscriptionState *BillingAggregatedInformationGetForOrg200ApplicationJSONAzureSubscriptionStateEnum `json:"azureSubscriptionState,omitempty"`
	// Billing Plans section in the Billing Information
	BillingPlans *BillingAggregatedInformationGetForOrg200ApplicationJSONBillingPlans `json:"billingPlans,omitempty"`
	// ID of the user or organization
	ID *string `json:"id,omitempty"`
	// The ISO 8601 datetime of last modification
	Timestamp *string `json:"timestamp,omitempty"`
	// Usage section in the Billing Information
	Usage *BillingAggregatedInformationGetForOrg200ApplicationJSONUsage `json:"usage,omitempty"`
	// Version of the Billing Information schema
	Version *string `json:"version,omitempty"`
}

type BillingAggregatedInformationGetForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Aggregated Billing Information for a given Organization
	BillingAggregatedInformationGetForOrg200ApplicationJSONObject *BillingAggregatedInformationGetForOrg200ApplicationJSON
	// Error code with reason
	BillingAggregatedInformationGetForOrgDefaultApplicationJSONObject *BillingAggregatedInformationGetForOrgDefaultApplicationJSON
}
