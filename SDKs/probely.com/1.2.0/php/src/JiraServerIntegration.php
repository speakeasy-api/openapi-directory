<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class JiraServerIntegration 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List Jira Projects
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsResponse
     */
	public function getIntegrationsJiraServerProjects(
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-server/projects/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraProjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraProject>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjects401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjects401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjects403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjects403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve project issue types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesResponse
     */
	public function getIntegrationsJiraServerProjectsProjectIdIssueTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-server/projects/{project_id}/issue_types/', \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraIssueTypes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraIssueType>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypes401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypes401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypes403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypes403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypes404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypes404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve issue priorities
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse
     */
	public function getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities(
        \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/priorities/', \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPrioritiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraIssuePriorities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraIssuePriority>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdPriorities403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve issue statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusResponse
     */
	public function getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/status/', \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraIssueStatuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\JiraIssueStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetIntegrationsJiraServerProjectsProjectIdIssueTypesIssueTypeIdStatus404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Jira Server finding configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServerResponse
     */
	public function getTargetsTargetIdFindingsIdIntegrationsJiraServer(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/findings/{id}/integrations/jira-server/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraFinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraFinding', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Jira Server Target configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServerResponse
     */
	public function getTargetsTargetIdIntegrationsJiraServer(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/integrations/jira-server/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraScope = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraScope', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdIntegrationsJiraServer401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServer401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdIntegrationsJiraServer403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdIntegrationsJiraServer403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Server finding configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServerResponse
     */
	public function patchTargetsTargetIdFindingsIdIntegrationsJiraServer(
        \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/findings/{id}/integrations/jira-server/', \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraFinding", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraFinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraFinding', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Server target configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServerResponse
     */
	public function patchTargetsTargetIdIntegrationsJiraServer(
        \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/integrations/jira-server/', \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraScope", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraScope = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraScope', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdIntegrationsJiraServer401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServer401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdIntegrationsJiraServer403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServer403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchTargetsTargetIdIntegrationsJiraServer404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchTargetsTargetIdIntegrationsJiraServer404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Server finding configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServerResponse
     */
	public function putTargetsTargetIdFindingsIdIntegrationsJiraServer(
        \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/findings/{id}/integrations/jira-server/', \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraFinding", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraFinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraFinding', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServer401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServer403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdFindingsIdIntegrationsJiraServer404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Jira Server target configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServerResponse
     */
	public function putTargetsTargetIdIntegrationsJiraServer(
        \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/integrations/jira-server/', \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jiraScope", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jiraScope = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JiraScope', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdIntegrationsJiraServer401ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServer401ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdIntegrationsJiraServer403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServer403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putTargetsTargetIdIntegrationsJiraServer404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutTargetsTargetIdIntegrationsJiraServer404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}