// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsErrorAttachmentsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsErrorAttachmentsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error
	ErrorID string `pathParam:"style=simple,explode=false,name=errorId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsErrorAttachmentsDefaultApplicationJSONError struct {
	Code    ErrorsErrorAttachmentsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                    `json:"message"`
}

// ErrorsErrorAttachmentsDefaultApplicationJSON - Error code with reason
type ErrorsErrorAttachmentsDefaultApplicationJSON struct {
	Error ErrorsErrorAttachmentsDefaultApplicationJSONError `json:"error"`
}

type ErrorsErrorAttachments200ApplicationJSON struct {
	AppID        *string    `json:"appId,omitempty"`
	AttachmentID *string    `json:"attachmentId,omitempty"`
	BlobLocation *string    `json:"blobLocation,omitempty"`
	ContentType  *string    `json:"contentType,omitempty"`
	CrashID      *string    `json:"crashId,omitempty"`
	CreatedTime  *time.Time `json:"createdTime,omitempty"`
	FileName     *string    `json:"fileName,omitempty"`
	Size         *int64     `json:"size,omitempty"`
}

type ErrorsErrorAttachmentsResponse struct {
	ContentType string
	// List of error attachments.
	ErrorsErrorAttachments200ApplicationJSONObjects []ErrorsErrorAttachments200ApplicationJSON
	// Error code with reason
	ErrorsErrorAttachmentsDefaultApplicationJSONObject *ErrorsErrorAttachmentsDefaultApplicationJSON
	StatusCode                                         int
	RawResponse                                        *http.Response
}
