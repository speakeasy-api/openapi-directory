/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * User - User represents a user
 */
public class User {
    /**
     * Is user active
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;

    public User withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * URL to the user's avatar
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_url")
    public String avatarUrl;

    public User withAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;

    public User withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    /**
     * the user's description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public User withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public User withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * user counts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers_count")
    public Long followersCount;

    public User withFollowersCount(Long followersCount) {
        this.followersCount = followersCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("following_count")
    public Long followingCount;

    public User withFollowingCount(Long followingCount) {
        this.followingCount = followingCount;
        return this;
    }
    
    /**
     * the user's full name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_name")
    public String fullName;

    public User withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }
    
    /**
     * the user's id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public User withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Is the user an administrator
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_admin")
    public Boolean isAdmin;

    public User withIsAdmin(Boolean isAdmin) {
        this.isAdmin = isAdmin;
        return this;
    }
    
    /**
     * User locale
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public User withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_login")
    public OffsetDateTime lastLogin;

    public User withLastLogin(OffsetDateTime lastLogin) {
        this.lastLogin = lastLogin;
        return this;
    }
    
    /**
     * the user's location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public User withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * the user's username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login")
    public String login;

    public User withLogin(String login) {
        this.login = login;
        return this;
    }
    
    /**
     * the user's authentication sign-in name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login_name")
    public String loginName;

    public User withLoginName(String loginName) {
        this.loginName = loginName;
        return this;
    }
    
    /**
     * Is user login prohibited
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prohibit_login")
    public Boolean prohibitLogin;

    public User withProhibitLogin(Boolean prohibitLogin) {
        this.prohibitLogin = prohibitLogin;
        return this;
    }
    
    /**
     * Is user restricted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restricted")
    public Boolean restricted;

    public User withRestricted(Boolean restricted) {
        this.restricted = restricted;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("starred_repos_count")
    public Long starredReposCount;

    public User withStarredReposCount(Long starredReposCount) {
        this.starredReposCount = starredReposCount;
        return this;
    }
    
    /**
     * User visibility level option: public, limited, private
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public String visibility;

    public User withVisibility(String visibility) {
        this.visibility = visibility;
        return this;
    }
    
    /**
     * the user's website
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public String website;

    public User withWebsite(String website) {
        this.website = website;
        return this;
    }
    
    public User(){}
}
