// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var UpdateServiceServerList = []string{
	"https://ip-messaging.twilio.com",
}

type UpdateServiceSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type UpdateServiceUpdateServiceRequestWebhookMethodEnum string

const (
	UpdateServiceUpdateServiceRequestWebhookMethodEnumHead   UpdateServiceUpdateServiceRequestWebhookMethodEnum = "HEAD"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumGet    UpdateServiceUpdateServiceRequestWebhookMethodEnum = "GET"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumPost   UpdateServiceUpdateServiceRequestWebhookMethodEnum = "POST"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumPatch  UpdateServiceUpdateServiceRequestWebhookMethodEnum = "PATCH"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumPut    UpdateServiceUpdateServiceRequestWebhookMethodEnum = "PUT"
	UpdateServiceUpdateServiceRequestWebhookMethodEnumDelete UpdateServiceUpdateServiceRequestWebhookMethodEnum = "DELETE"
)

func (e UpdateServiceUpdateServiceRequestWebhookMethodEnum) ToPointer() *UpdateServiceUpdateServiceRequestWebhookMethodEnum {
	return &e
}

func (e *UpdateServiceUpdateServiceRequestWebhookMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateServiceUpdateServiceRequestWebhookMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServiceUpdateServiceRequestWebhookMethodEnum: %v", v)
	}
}

type UpdateServiceUpdateServiceRequest struct {
	ConsumptionReportInterval                *int64                                              `form:"name=ConsumptionReportInterval"`
	DefaultChannelCreatorRoleSid             *string                                             `form:"name=DefaultChannelCreatorRoleSid"`
	DefaultChannelRoleSid                    *string                                             `form:"name=DefaultChannelRoleSid"`
	DefaultServiceRoleSid                    *string                                             `form:"name=DefaultServiceRoleSid"`
	FriendlyName                             *string                                             `form:"name=FriendlyName"`
	LimitsChannelMembers                     *int64                                              `form:"name=Limits.ChannelMembers"`
	LimitsUserChannels                       *int64                                              `form:"name=Limits.UserChannels"`
	MediaCompatibilityMessage                *string                                             `form:"name=Media.CompatibilityMessage"`
	NotificationsAddedToChannelEnabled       *bool                                               `form:"name=Notifications.AddedToChannel.Enabled"`
	NotificationsAddedToChannelSound         *string                                             `form:"name=Notifications.AddedToChannel.Sound"`
	NotificationsAddedToChannelTemplate      *string                                             `form:"name=Notifications.AddedToChannel.Template"`
	NotificationsInvitedToChannelEnabled     *bool                                               `form:"name=Notifications.InvitedToChannel.Enabled"`
	NotificationsInvitedToChannelSound       *string                                             `form:"name=Notifications.InvitedToChannel.Sound"`
	NotificationsInvitedToChannelTemplate    *string                                             `form:"name=Notifications.InvitedToChannel.Template"`
	NotificationsLogEnabled                  *bool                                               `form:"name=Notifications.LogEnabled"`
	NotificationsNewMessageBadgeCountEnabled *bool                                               `form:"name=Notifications.NewMessage.BadgeCountEnabled"`
	NotificationsNewMessageEnabled           *bool                                               `form:"name=Notifications.NewMessage.Enabled"`
	NotificationsNewMessageSound             *string                                             `form:"name=Notifications.NewMessage.Sound"`
	NotificationsNewMessageTemplate          *string                                             `form:"name=Notifications.NewMessage.Template"`
	NotificationsRemovedFromChannelEnabled   *bool                                               `form:"name=Notifications.RemovedFromChannel.Enabled"`
	NotificationsRemovedFromChannelSound     *string                                             `form:"name=Notifications.RemovedFromChannel.Sound"`
	NotificationsRemovedFromChannelTemplate  *string                                             `form:"name=Notifications.RemovedFromChannel.Template"`
	PostWebhookRetryCount                    *int64                                              `form:"name=PostWebhookRetryCount"`
	PostWebhookURL                           *string                                             `form:"name=PostWebhookUrl"`
	PreWebhookRetryCount                     *int64                                              `form:"name=PreWebhookRetryCount"`
	PreWebhookURL                            *string                                             `form:"name=PreWebhookUrl"`
	ReachabilityEnabled                      *bool                                               `form:"name=ReachabilityEnabled"`
	ReadStatusEnabled                        *bool                                               `form:"name=ReadStatusEnabled"`
	TypingIndicatorTimeout                   *int64                                              `form:"name=TypingIndicatorTimeout"`
	WebhookFilters                           []string                                            `form:"name=WebhookFilters"`
	WebhookMethod                            *UpdateServiceUpdateServiceRequestWebhookMethodEnum `form:"name=WebhookMethod"`
}

type UpdateServiceRequest struct {
	RequestBody *UpdateServiceUpdateServiceRequest `request:"mediaType=application/x-www-form-urlencoded"`
	Sid         string                             `pathParam:"style=simple,explode=false,name=Sid"`
}

type UpdateServiceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	IPMessagingV2Service *shared.IPMessagingV2Service
}
