// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// PatternsGetPatternByRunRouteTypeEnum - Number identifying transport mode; values returned via RouteTypes API
type PatternsGetPatternByRunRouteTypeEnum string

const (
	PatternsGetPatternByRunRouteTypeEnumZero  PatternsGetPatternByRunRouteTypeEnum = "0"
	PatternsGetPatternByRunRouteTypeEnumOne   PatternsGetPatternByRunRouteTypeEnum = "1"
	PatternsGetPatternByRunRouteTypeEnumTwo   PatternsGetPatternByRunRouteTypeEnum = "2"
	PatternsGetPatternByRunRouteTypeEnumThree PatternsGetPatternByRunRouteTypeEnum = "3"
	PatternsGetPatternByRunRouteTypeEnumFour  PatternsGetPatternByRunRouteTypeEnum = "4"
)

func (e *PatternsGetPatternByRunRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = PatternsGetPatternByRunRouteTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatternsGetPatternByRunRouteTypeEnum: %s", s)
	}
}

type PatternsGetPatternByRunPathParams struct {
	// Number identifying transport mode; values returned via RouteTypes API
	RouteType PatternsGetPatternByRunRouteTypeEnum `pathParam:"style=simple,explode=false,name=route_type"`
	// The run_ref is the identifier of a run as returned by the departures/* and runs/* endpoints. WARNING, run_id is deprecated. Use run_ref instead.
	RunRef string `pathParam:"style=simple,explode=false,name=run_ref"`
}

type PatternsGetPatternByRunExpandEnum string

const (
	PatternsGetPatternByRunExpandEnumAll               PatternsGetPatternByRunExpandEnum = "All"
	PatternsGetPatternByRunExpandEnumStop              PatternsGetPatternByRunExpandEnum = "Stop"
	PatternsGetPatternByRunExpandEnumRoute             PatternsGetPatternByRunExpandEnum = "Route"
	PatternsGetPatternByRunExpandEnumRun               PatternsGetPatternByRunExpandEnum = "Run"
	PatternsGetPatternByRunExpandEnumDirection         PatternsGetPatternByRunExpandEnum = "Direction"
	PatternsGetPatternByRunExpandEnumDisruption        PatternsGetPatternByRunExpandEnum = "Disruption"
	PatternsGetPatternByRunExpandEnumVehicleDescriptor PatternsGetPatternByRunExpandEnum = "VehicleDescriptor"
	PatternsGetPatternByRunExpandEnumVehiclePosition   PatternsGetPatternByRunExpandEnum = "VehiclePosition"
	PatternsGetPatternByRunExpandEnumNone              PatternsGetPatternByRunExpandEnum = "None"
)

func (e *PatternsGetPatternByRunExpandEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "All":
		fallthrough
	case "Stop":
		fallthrough
	case "Route":
		fallthrough
	case "Run":
		fallthrough
	case "Direction":
		fallthrough
	case "Disruption":
		fallthrough
	case "VehicleDescriptor":
		fallthrough
	case "VehiclePosition":
		fallthrough
	case "None":
		*e = PatternsGetPatternByRunExpandEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatternsGetPatternByRunExpandEnum: %s", s)
	}
}

type PatternsGetPatternByRunQueryParams struct {
	// Filter by the date and time of the request (ISO 8601 UTC format)
	DateUtc *time.Time `queryParam:"style=form,explode=true,name=date_utc"`
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// List of objects to be returned in full (i.e. expanded) - options include: All, Stop, Route, Run, Direction, Disruption, VehiclePosition, VehicleDescriptor and None. Default is Disruption. Run must be expanded to receive VehiclePosition and VehicleDescriptor information.
	Expand []PatternsGetPatternByRunExpandEnum `queryParam:"style=form,explode=true,name=expand"`
	// Indicates if geopath data will be returned (default = false)
	IncludeGeopath *bool `queryParam:"style=form,explode=true,name=include_geopath"`
	// Include any skipped stops in a stopping pattern. Defaults to false.
	IncludeSkippedStops *bool `queryParam:"style=form,explode=true,name=include_skipped_stops"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Filter by stop_id; values returned by Stops API
	StopID *int `queryParam:"style=form,explode=true,name=stop_id"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type PatternsGetPatternByRunRequest struct {
	PathParams  PatternsGetPatternByRunPathParams
	QueryParams PatternsGetPatternByRunQueryParams
}

type PatternsGetPatternByRunResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
	// The stopping pattern of the specified run_ref and route type. (NOTE: the departure sequence field should be used to sort departures in chronological order, however it is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4)
	V3StoppingPattern *shared.V3StoppingPattern
}
