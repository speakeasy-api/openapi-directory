// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SmcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SmcerRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// SmcerRequestBodyFormatEnum - The format of the certificate in response.
type SmcerRequestBodyFormatEnum string

const (
	SmcerRequestBodyFormatEnumPdf SmcerRequestBodyFormatEnum = "pdf"
)

func (e *SmcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SmcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmcerRequestBodyFormatEnum: %s", s)
	}
}

// SmcerRequestBody - Request format
type SmcerRequestBody struct {
	CertificateParameters *SmcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SmcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Smcer504ApplicationJSONErrorEnum string

const (
	Smcer504ApplicationJSONErrorEnumGatewayTimeout Smcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Smcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Smcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Smcer504ApplicationJSONErrorDescriptionEnum string

const (
	Smcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Smcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Smcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Smcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Smcer504ApplicationJSON - Gateway timeout
type Smcer504ApplicationJSON struct {
	Error            *Smcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Smcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Smcer503ApplicationJSONErrorEnum string

const (
	Smcer503ApplicationJSONErrorEnumServiceUnavailable Smcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Smcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Smcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Smcer503ApplicationJSONErrorDescriptionEnum string

const (
	Smcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Smcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Smcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Smcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Smcer503ApplicationJSON - Service unavailable
type Smcer503ApplicationJSON struct {
	Error            *Smcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Smcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Smcer502ApplicationJSONErrorEnum string

const (
	Smcer502ApplicationJSONErrorEnumBadGatewy Smcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Smcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Smcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Smcer502ApplicationJSONErrorDescriptionEnum string

const (
	Smcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Smcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Smcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Smcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Smcer502ApplicationJSON - Bad gateway
type Smcer502ApplicationJSON struct {
	Error            *Smcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Smcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Smcer500ApplicationJSONErrorEnum string

const (
	Smcer500ApplicationJSONErrorEnumInternalServerError Smcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Smcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Smcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Smcer500ApplicationJSONErrorDescriptionEnum string

const (
	Smcer500ApplicationJSONErrorDescriptionEnumInternalServerError Smcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Smcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Smcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Smcer500ApplicationJSON - Internal server error
type Smcer500ApplicationJSON struct {
	Error            *Smcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Smcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Smcer404ApplicationJSONErrorEnum string

const (
	Smcer404ApplicationJSONErrorEnumRecordNotFound Smcer404ApplicationJSONErrorEnum = "record_not_found"
	Smcer404ApplicationJSONErrorEnumURLNotFound    Smcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Smcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Smcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Smcer404ApplicationJSONErrorDescriptionEnum string

const (
	Smcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Smcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Smcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Smcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Smcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Smcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Smcer404ApplicationJSON - No record found
type Smcer404ApplicationJSON struct {
	Error            *Smcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Smcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Smcer401ApplicationJSONErrorEnum string

const (
	Smcer401ApplicationJSONErrorEnumInvalidAuthentication Smcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Smcer401ApplicationJSONErrorEnumInvalidAuthorization  Smcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Smcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Smcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Smcer401ApplicationJSONErrorDescriptionEnum string

const (
	Smcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Smcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Smcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Smcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Smcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Smcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Smcer401ApplicationJSON - Unauthorized access
type Smcer401ApplicationJSON struct {
	Error            *Smcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Smcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Smcer400ApplicationJSONErrorEnum string

const (
	Smcer400ApplicationJSONErrorEnumMissingParameter Smcer400ApplicationJSONErrorEnum = "missing_parameter"
	Smcer400ApplicationJSONErrorEnumInvalidParameter Smcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Smcer400ApplicationJSONErrorEnumInvalidFormat    Smcer400ApplicationJSONErrorEnum = "invalid_format"
	Smcer400ApplicationJSONErrorEnumInvalidTxnid     Smcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Smcer400ApplicationJSONErrorEnumInvalidConsentid Smcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Smcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Smcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Smcer400ApplicationJSONErrorDescriptionEnum string

const (
	Smcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Smcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Smcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Smcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Smcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Smcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Smcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Smcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Smcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Smcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Smcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Smcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Smcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Smcer400ApplicationJSON - Bad request
type Smcer400ApplicationJSON struct {
	Error            *Smcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Smcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SmcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Smcer400ApplicationJSONObject *Smcer400ApplicationJSON
	// Unauthorized access
	Smcer401ApplicationJSONObject *Smcer401ApplicationJSON
	// No record found
	Smcer404ApplicationJSONObject *Smcer404ApplicationJSON
	// Internal server error
	Smcer500ApplicationJSONObject *Smcer500ApplicationJSON
	// Bad gateway
	Smcer502ApplicationJSONObject *Smcer502ApplicationJSON
	// Service unavailable
	Smcer503ApplicationJSONObject *Smcer503ApplicationJSON
	// Gateway timeout
	Smcer504ApplicationJSONObject *Smcer504ApplicationJSON
}
