/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * During the scans we run fingerprinters against the target and record the
 *
 * @remarks
 * result on the site and assets.
 * You can access our list of frameworks/software here.
 *
 */
export class Frameworks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List frameworks
   */
  getFrameworks(
    req: operations.GetFrameworksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFrameworksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFrameworksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/frameworks/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFrameworksResponse =
        new operations.GetFrameworksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getFrameworks200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetFrameworks200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getFrameworks401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetFrameworks401ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve framework
   */
  getFrameworksId(
    req: operations.GetFrameworksIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFrameworksIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFrameworksIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/frameworks/{id}/", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFrameworksIdResponse =
        new operations.GetFrameworksIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.framework = utils.objectToClass(
              httpRes?.data,
              shared.Framework
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getFrameworksId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetFrameworksId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getFrameworksId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetFrameworksId404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
