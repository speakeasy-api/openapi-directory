"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudServicebrokerV1beta1ServiceInstance:
    r"""Message describing inputs to Provision and Update Service instance requests."""
    
    context: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""Platform specific contextual information under which the service instance
    is to be provisioned. This replaces organization_guid and space_guid.
    But can also contain anything.
    Currently only used for logging context information.
    """  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp for when the instance was created."""  
    deployment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentName'), 'exclude': lambda f: f is None }})
    r"""Output only. String containing the Deployment Manager deployment name that was created
    for this instance,
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""To return errors when GetInstance call is done via HTTP to be unified with
    other methods.
    """  
    instance_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance_id'), 'exclude': lambda f: f is None }})
    r"""The id of the service instance. Must be unique within GCP project.
    Maximum length is 64, GUID recommended.
    Required.
    """  
    organization_guid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_guid'), 'exclude': lambda f: f is None }})
    r"""The platform GUID for the organization under which the service is to be
    provisioned.
    Required.
    """  
    parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Configuration options for the service instance.
    Parameters is JSON object serialized to string.
    """  
    plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the plan. See `Service` and `Plan` resources for details.
    Maximum length is 64, GUID recommended.
    Required.
    """  
    previous_values: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_values'), 'exclude': lambda f: f is None }})
    r"""Used only in UpdateServiceInstance request to optionally specify previous
    fields.
    """  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the instance, e.g.
    projects/project_id/brokers/broker_id/service_instances/instance_id
    """  
    service_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_id'), 'exclude': lambda f: f is None }})
    r"""The id of the service. Must be a valid identifier of a service
    contained in the list from a `ListServices()` call.
    Maximum length is 64, GUID recommended.
    Required.
    """  
    space_guid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space_guid'), 'exclude': lambda f: f is None }})
    r"""The identifier for the project space within the platform organization.
    Required.
    """  
    