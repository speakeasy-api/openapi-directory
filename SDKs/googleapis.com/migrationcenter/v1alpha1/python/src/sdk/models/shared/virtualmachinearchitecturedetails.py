"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import biosdetails as shared_biosdetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VirtualMachineArchitectureDetailsHyperthreadingEnum(str, Enum):
    r"""CPU hyperthreading support."""
    HYPER_THREADING_UNSPECIFIED = 'HYPER_THREADING_UNSPECIFIED'
    HYPER_THREADING_DISABLED = 'HYPER_THREADING_DISABLED'
    HYPER_THREADING_ENABLED = 'HYPER_THREADING_ENABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualMachineArchitectureDetails:
    r"""Details of the VM architecture."""
    
    bios: Optional[shared_biosdetails.BiosDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bios'), 'exclude': lambda f: f is None }})
    r"""Details about the BIOS."""  
    cpu_architecture: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuArchitecture'), 'exclude': lambda f: f is None }})
    r"""CPU architecture, e.g., \\"x64-based PC\\", \\"x86_64\\", \\"i686\\" etc."""  
    cpu_manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuManufacturer'), 'exclude': lambda f: f is None }})
    r"""CPU manufacturer, e.g., \\"Intel\\", \\"AMD\\"."""  
    cpu_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuName'), 'exclude': lambda f: f is None }})
    r"""CPU name, e.g., \\"Intel Xeon E5-2690\\", \\"AMD EPYC 7571\\" etc."""  
    cpu_socket_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuSocketCount'), 'exclude': lambda f: f is None }})
    r"""Number of processor sockets allocated to the machine."""  
    cpu_thread_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuThreadCount'), 'exclude': lambda f: f is None }})
    r"""Number of CPU threads allocated to the machine."""  
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Firmware (BIOS/efi)."""  
    hyperthreading: Optional[VirtualMachineArchitectureDetailsHyperthreadingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperthreading'), 'exclude': lambda f: f is None }})
    r"""CPU hyperthreading support."""  
    vendor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor'), 'exclude': lambda f: f is None }})
    r"""Hardware vendor."""  
    