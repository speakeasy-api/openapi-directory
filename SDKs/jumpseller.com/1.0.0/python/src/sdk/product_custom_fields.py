"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProductCustomFields:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_products_product_id_fields_field_id_json(self, request: operations.DeleteProductsProductIDFieldsFieldIDJSONRequest) -> operations.DeleteProductsProductIDFieldsFieldIDJSONResponse:
        r"""Delete value of Product Custom Field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductsProductIDFieldsFieldIDJSONRequest, base_url, '/products/{product_id}/fields/{field_id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteProductsProductIDFieldsFieldIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductsProductIDFieldsFieldIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageObject])
                res.message_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_id_fields_json(self, request: operations.GetProductsIDFieldsJSONRequest) -> operations.GetProductsIDFieldsJSONResponse:
        r"""Retrieve all Product Custom Fields"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsIDFieldsJSONRequest, base_url, '/products/{id}/fields.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsIDFieldsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsIDFieldsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProductCustomField]])
                res.product_custom_fields = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_id_fields_count_json(self, request: operations.GetProductsIDFieldsCountJSONRequest) -> operations.GetProductsIDFieldsCountJSONResponse:
        r"""Count all Product Custom Fields."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsIDFieldsCountJSONRequest, base_url, '/products/{id}/fields/count.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsIDFieldsCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsIDFieldsCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_products_id_fields_json(self, request: operations.PostProductsIDFieldsJSONRequest) -> operations.PostProductsIDFieldsJSONResponse:
        r"""Add an existing Custom Field to a Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostProductsIDFieldsJSONRequest, base_url, '/products/{id}/fields.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_product_custom_field", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostProductsIDFieldsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostProductsIDFieldsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Product])
                res.product = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def put_products_product_id_fields_field_id_json(self, request: operations.PutProductsProductIDFieldsFieldIDJSONRequest) -> operations.PutProductsProductIDFieldsFieldIDJSONResponse:
        r"""Update value of Product Custom Field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutProductsProductIDFieldsFieldIDJSONRequest, base_url, '/products/{product_id}/fields/{field_id}.json', request)
        
        query_params = utils.get_query_params(operations.PutProductsProductIDFieldsFieldIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutProductsProductIDFieldsFieldIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductCustomField])
                res.product_custom_field = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    