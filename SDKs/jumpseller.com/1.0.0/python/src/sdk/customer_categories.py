"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomerCategories:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_customer_categories_id_json(self, request: operations.DeleteCustomerCategoriesIDJSONRequest) -> operations.DeleteCustomerCategoriesIDJSONResponse:
        r"""Delete an existing CustomerCategory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomerCategoriesIDJSONRequest, base_url, '/customer_categories/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteCustomerCategoriesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerCategoriesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_customer_categories_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def delete_customer_categories_id_customers_json(self, request: operations.DeleteCustomerCategoriesIDCustomersJSONRequest) -> operations.DeleteCustomerCategoriesIDCustomersJSONResponse:
        r"""Delete Customers from an existing CustomerCategory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomerCategoriesIDCustomersJSONRequest, base_url, '/customer_categories/{id}/customers.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customers_to_customer_category", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.DeleteCustomerCategoriesIDCustomersJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerCategoriesIDCustomersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_customer_categories_id_customers_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_customer_categories_json(self, request: operations.GetCustomerCategoriesJSONRequest) -> operations.GetCustomerCategoriesJSONResponse:
        r"""Retrieve all Customer Categories."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customer_categories.json'
        
        query_params = utils.get_query_params(operations.GetCustomerCategoriesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomerCategoriesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomerCategory]])
                res.customer_categories = out

        return res

    def get_customer_categories_id_json(self, request: operations.GetCustomerCategoriesIDJSONRequest) -> operations.GetCustomerCategoriesIDJSONResponse:
        r"""Retrieve a single CustomerCategory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomerCategoriesIDJSONRequest, base_url, '/customer_categories/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetCustomerCategoriesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomerCategoriesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerCategory])
                res.customer_category = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_customer_categories_id_customers_json(self, request: operations.GetCustomerCategoriesIDCustomersJSONRequest) -> operations.GetCustomerCategoriesIDCustomersJSONResponse:
        r"""Retrieves the customers in a CustomerCategory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomerCategoriesIDCustomersJSONRequest, base_url, '/customer_categories/{id}/customers.json', request)
        
        query_params = utils.get_query_params(operations.GetCustomerCategoriesIDCustomersJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomerCategoriesIDCustomersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Customer]])
                res.customers = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_customer_categories_json(self, request: operations.PostCustomerCategoriesJSONRequest) -> operations.PostCustomerCategoriesJSONResponse:
        r"""Create a new CustomerCategory."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customer_categories.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_category_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostCustomerCategoriesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCustomerCategoriesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerCategory])
                res.customer_category = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_customer_categories_id_customers_json(self, request: operations.PostCustomerCategoriesIDCustomersJSONRequest) -> operations.PostCustomerCategoriesIDCustomersJSONResponse:
        r"""Adds Customers to a CustomerCategory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCustomerCategoriesIDCustomersJSONRequest, base_url, '/customer_categories/{id}/customers.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customers_to_customer_category", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostCustomerCategoriesIDCustomersJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCustomerCategoriesIDCustomersJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Customer]])
                res.customers = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def put_customer_categories_id_json(self, request: operations.PutCustomerCategoriesIDJSONRequest) -> operations.PutCustomerCategoriesIDJSONResponse:
        r"""Update a CustomerCategory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCustomerCategoriesIDJSONRequest, base_url, '/customer_categories/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_category_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutCustomerCategoriesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCustomerCategoriesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerCategory])
                res.customer_category = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    