// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ResourceTypeEnum string

const (
	ResourceTypeEnumDeviceCertificate   ResourceTypeEnum = "DEVICE_CERTIFICATE"
	ResourceTypeEnumCaCertificate       ResourceTypeEnum = "CA_CERTIFICATE"
	ResourceTypeEnumIotPolicy           ResourceTypeEnum = "IOT_POLICY"
	ResourceTypeEnumCognitoIdentityPool ResourceTypeEnum = "COGNITO_IDENTITY_POOL"
	ResourceTypeEnumClientID            ResourceTypeEnum = "CLIENT_ID"
	ResourceTypeEnumAccountSettings     ResourceTypeEnum = "ACCOUNT_SETTINGS"
	ResourceTypeEnumRoleAlias           ResourceTypeEnum = "ROLE_ALIAS"
	ResourceTypeEnumIamRole             ResourceTypeEnum = "IAM_ROLE"
	ResourceTypeEnumIssuerCertificate   ResourceTypeEnum = "ISSUER_CERTIFICATE"
)

func (e ResourceTypeEnum) ToPointer() *ResourceTypeEnum {
	return &e
}

func (e *ResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEVICE_CERTIFICATE":
		fallthrough
	case "CA_CERTIFICATE":
		fallthrough
	case "IOT_POLICY":
		fallthrough
	case "COGNITO_IDENTITY_POOL":
		fallthrough
	case "CLIENT_ID":
		fallthrough
	case "ACCOUNT_SETTINGS":
		fallthrough
	case "ROLE_ALIAS":
		fallthrough
	case "IAM_ROLE":
		fallthrough
	case "ISSUER_CERTIFICATE":
		*e = ResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceTypeEnum: %v", v)
	}
}
