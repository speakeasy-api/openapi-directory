/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Specifies the type of the artifact being added.  Possible values include:
 *
 * @remarks
 *
 * * Avro (`AVRO`)
 * * Protobuf (`PROTOBUF`)
 * * Protobuf File Descriptor (`PROTOBUF_FD`)
 * * JSON Schema (`JSON`)
 * * Kafka Connect (`KCONNECT`)
 * * OpenAPI (`OPENAPI`)
 * * AsyncAPI (`ASYNCAPI`)
 * * GraphQL (`GRAPHQL`)
 * * Web Services Description Language (`WSDL`)
 * * XML Schema (`XSD`)
 */
export enum UpdateArtifactXRegistryArtifactTypeEnum {
  Avro = "AVRO",
  Protobuf = "PROTOBUF",
  ProtobufFd = "PROTOBUF_FD",
  Json = "JSON",
  Openapi = "OPENAPI",
  Asyncapi = "ASYNCAPI",
  Graphql = "GRAPHQL",
  Kconnect = "KCONNECT",
  Wsdl = "WSDL",
  Xsd = "XSD",
  Xml = "XML",
}

export class UpdateArtifactRequest extends SpeakeasyBase {
  /**
   * The new content of the artifact being updated. This is often, but not always, JSON data
   *
   * @remarks
   * representing one of the supported artifact types:
   *
   * * Avro (`AVRO`)
   * * Protobuf (`PROTOBUF`)
   * * Protobuf File Descriptor (`PROTOBUF_FD`)
   * * JSON Schema (`JSON`)
   * * Kafka Connect (`KCONNECT`)
   * * OpenAPI (`OPENAPI`)
   * * AsyncAPI (`ASYNCAPI`)
   * * GraphQL (`GRAPHQL`)
   * * Web Services Description Language (`WSDL`)
   * * XML Schema (`XSD`)
   *
   */
  @SpeakeasyMetadata({ data: "request, media_type=*/*" })
  requestBody: Uint8Array;

  /**
   * Specifies the type of the artifact being added.  Possible values include:
   *
   * @remarks
   *
   * * Avro (`AVRO`)
   * * Protobuf (`PROTOBUF`)
   * * Protobuf File Descriptor (`PROTOBUF_FD`)
   * * JSON Schema (`JSON`)
   * * Kafka Connect (`KCONNECT`)
   * * OpenAPI (`OPENAPI`)
   * * AsyncAPI (`ASYNCAPI`)
   * * GraphQL (`GRAPHQL`)
   * * Web Services Description Language (`WSDL`)
   * * XML Schema (`XSD`)
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Registry-ArtifactType",
  })
  xRegistryArtifactType?: UpdateArtifactXRegistryArtifactTypeEnum;

  /**
   * The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=artifactId",
  })
  artifactId: string;
}

export class UpdateArtifactResponse extends SpeakeasyBase {
  /**
   * When successful, returns the updated artifact metadata.
   */
  @SpeakeasyMetadata()
  artifactMetaData?: shared.ArtifactMetaData;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Common response for all operations that can return a `404` error.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
