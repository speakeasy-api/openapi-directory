// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetSnippetsWorkspaceSecurity struct {
	APIKey *string             `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	Basic  *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	Oauth2 *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// GetSnippetsWorkspaceRoleEnum - Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).
type GetSnippetsWorkspaceRoleEnum string

const (
	GetSnippetsWorkspaceRoleEnumOwner       GetSnippetsWorkspaceRoleEnum = "owner"
	GetSnippetsWorkspaceRoleEnumContributor GetSnippetsWorkspaceRoleEnum = "contributor"
	GetSnippetsWorkspaceRoleEnumMember      GetSnippetsWorkspaceRoleEnum = "member"
)

func (e GetSnippetsWorkspaceRoleEnum) ToPointer() *GetSnippetsWorkspaceRoleEnum {
	return &e
}

func (e *GetSnippetsWorkspaceRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owner":
		fallthrough
	case "contributor":
		fallthrough
	case "member":
		*e = GetSnippetsWorkspaceRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSnippetsWorkspaceRoleEnum: %v", v)
	}
}

type GetSnippetsWorkspaceRequest struct {
	// Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).
	Role *GetSnippetsWorkspaceRoleEnum `queryParam:"style=form,explode=true,name=role"`
	// This can either be the workspace ID (slug) or the workspace UUID
	// surrounded by curly-braces, for example: `{workspace UUID}`.
	//
	Workspace string `pathParam:"style=simple,explode=false,name=workspace"`
}

type GetSnippetsWorkspaceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// If the user does not exist.
	Error map[string]interface{}
	// A paginated list of snippets.
	PaginatedSnippets *shared.PaginatedSnippets
}
