"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import notesbookedroom as shared_notesbookedroom
from ..shared import notesbooking as shared_notesbooking
from ..shared import personinfo as shared_personinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class BookingRequestPaymentTypeEnum(str, Enum):
    r"""How will the guest make payment for this booking?"""
    API = 'API'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingRequestRooms:
    
    adults: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adults') }})
    r"""The number of adult guests staying in the room."""  
    rate_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateId') }})
    r"""The unique identifier of this rate within Impala. Every rate returned in the `roomTypes[].rates[]` array when retrieving hotel availability includes this id."""  
    notes: Optional[shared_notesbookedroom.NotesBookedRoom] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Notes about this booked room. These might be requests for room setup (e.g. extra beds or requests to remove alcoholic beverages from the minibar) or other requests related to this particular booked room.
    These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingRequest:
    r"""Specifies the room you want to book for your guest."""
    
    booking_contact: shared_personinfo.PersonInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingContact') }})
    r"""Details of your guest (will be provided to the hotel in case of questions)."""  
    end: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The last day of the desired stay range in ISO 8601 format YYYY-MM-DD."""  
    rooms: list[BookingRequestRooms] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rooms') }})
    r"""List of room type identifiers to be booked."""  
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The first day of the desired stay range in ISO 8601 format YYYY-MM-DD."""  
    notes: Optional[shared_notesbooking.NotesBooking] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Notes allow sellers to their guests to communicate relevant information to the hotel."""  
    payment_type: Optional[BookingRequestPaymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentType'), 'exclude': lambda f: f is None }})
    r"""How will the guest make payment for this booking?"""  
    