// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImageStatusEnum - The status of the image. @OutputOnly
type ImageStatusEnum string

const (
	ImageStatusEnumStatusUnspecified ImageStatusEnum = "STATUS_UNSPECIFIED"
	ImageStatusEnumPendingProcessing ImageStatusEnum = "PENDING_PROCESSING"
	ImageStatusEnumPendingCrawl      ImageStatusEnum = "PENDING_CRAWL"
	ImageStatusEnumOk                ImageStatusEnum = "OK"
	ImageStatusEnumRoboted           ImageStatusEnum = "ROBOTED"
	ImageStatusEnumXroboted          ImageStatusEnum = "XROBOTED"
	ImageStatusEnumCrawlError        ImageStatusEnum = "CRAWL_ERROR"
	ImageStatusEnumProcessingError   ImageStatusEnum = "PROCESSING_ERROR"
	ImageStatusEnumDecodingError     ImageStatusEnum = "DECODING_ERROR"
	ImageStatusEnumTooBig            ImageStatusEnum = "TOO_BIG"
	ImageStatusEnumCrawlSkipped      ImageStatusEnum = "CRAWL_SKIPPED"
	ImageStatusEnumHostloaded        ImageStatusEnum = "HOSTLOADED"
	ImageStatusEnumHttp404           ImageStatusEnum = "HTTP_404"
)

func (e ImageStatusEnum) ToPointer() *ImageStatusEnum {
	return &e
}

func (e *ImageStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATUS_UNSPECIFIED":
		fallthrough
	case "PENDING_PROCESSING":
		fallthrough
	case "PENDING_CRAWL":
		fallthrough
	case "OK":
		fallthrough
	case "ROBOTED":
		fallthrough
	case "XROBOTED":
		fallthrough
	case "CRAWL_ERROR":
		fallthrough
	case "PROCESSING_ERROR":
		fallthrough
	case "DECODING_ERROR":
		fallthrough
	case "TOO_BIG":
		fallthrough
	case "CRAWL_SKIPPED":
		fallthrough
	case "HOSTLOADED":
		fallthrough
	case "HTTP_404":
		*e = ImageStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageStatusEnum: %v", v)
	}
}

// ImageTypeEnum - The type of the image, i.e., crawled or uploaded. @OutputOnly
type ImageTypeEnum string

const (
	ImageTypeEnumTypeUnspecified ImageTypeEnum = "TYPE_UNSPECIFIED"
	ImageTypeEnumCrawled         ImageTypeEnum = "CRAWLED"
	ImageTypeEnumUploaded        ImageTypeEnum = "UPLOADED"
)

func (e ImageTypeEnum) ToPointer() *ImageTypeEnum {
	return &e
}

func (e *ImageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "CRAWLED":
		fallthrough
	case "UPLOADED":
		*e = ImageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageTypeEnum: %v", v)
	}
}

// Image - An image.
type Image struct {
	// The URL of the image. For crawled images, this is the provided URL. For uploaded images, this is a serving URL from Google if the image has been processed successfully.
	ImageURL *string `json:"imageUrl,omitempty"`
	// The status of the image. @OutputOnly
	Status *ImageStatusEnum `json:"status,omitempty"`
	// The type of the image, i.e., crawled or uploaded. @OutputOnly
	Type *ImageTypeEnum `json:"type,omitempty"`
}
