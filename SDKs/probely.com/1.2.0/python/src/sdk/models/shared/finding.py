"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import assignee as shared_assignee
from ..shared import changedby as shared_changedby
from ..shared import definition as shared_definition
from ..shared import findinginsertionpoint_enum as shared_findinginsertionpoint_enum
from ..shared import findingseverity_enum as shared_findingseverity_enum
from ..shared import findingstate_enum as shared_findingstate_enum
from ..shared import method_enum as shared_method_enum
from ..shared import reporter as shared_reporter
from ..shared import requests as shared_requests
from ..shared import targetsimple as shared_targetsimple
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Finding:
    r"""Event object."""
    
    assignee: Optional[shared_assignee.Assignee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee'), 'exclude': lambda f: f is None }})
    r"""Assigned user"""  
    changed: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of the last change"""  
    changed_by: Optional[shared_changedby.ChangedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed_by'), 'exclude': lambda f: f is None }})
    r"""User that last modified the object"""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""User comment left on the finding."""  
    cvss_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvss_score'), 'exclude': lambda f: f is None }})
    r"""CVSS score"""  
    cvss_vector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvss_vector'), 'exclude': lambda f: f is None }})
    r"""CVSS vector"""  
    definition: Optional[shared_definition.Definition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})  
    evidence: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evidence'), 'exclude': lambda f: f is None }})
    r"""Evidence for the finding."""  
    extra: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra'), 'exclude': lambda f: f is None }})
    r"""Extra data for the finding."""  
    fix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fix'), 'exclude': lambda f: f is None }})
    r"""Fix sugestion for the vulnerability and framework"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Object id."""  
    insertion_point: Optional[shared_findinginsertionpoint_enum.FindingInsertionPointEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertion_point'), 'exclude': lambda f: f is None }})
    r"""An insertion point is the place in the HTTP request where the
    malicious payload is injected to exploit the vulnerability.
      * cookie - Payload injected into the value of an HTTP cookie
      * header - Payload injected into the header of an HTTP request
      * parameter - Payload injected into the value of a query string
      parameter
      * arbitrary_url_param - Payload injected into the value of an
      arbitrarily added query string parameter
      * url_filename - Payload injected into the URL filename part
      * url_folder - Payload injected into the URL folder part
      * multipart_parameter - Payload is inserted into the value of a
      parameter attribute within a multi-part message body (such as
      the name of an uploaded file).
      * <empty> - No payload to inject.
    """  
    labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User labels for the finding."""  
    last_found: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_found'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of the last time the vulnerability was found."""  
    method: Optional[shared_method_enum.MethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""HTTP method"""  
    parameter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameter'), 'exclude': lambda f: f is None }})
    r"""Vulnerable paramenter."""  
    params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('params'), 'exclude': lambda f: f is None }})
    r"""Request parameters"""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Finding path."""  
    reporter: Optional[shared_reporter.Reporter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reporter'), 'exclude': lambda f: f is None }})
    r"""Reporting user"""  
    requests: Optional[list[shared_requests.Requests]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requests'), 'exclude': lambda f: f is None }})
    r"""Request response pairs that produced the finding"""  
    scans: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scans'), 'exclude': lambda f: f is None }})
    r"""Scan ids where this finding was present."""  
    severity: Optional[shared_findingseverity_enum.FindingSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Severity, how serious the issue is considered:
      * 10 - low
      * 20 - medium
      * 30 - high
    """  
    state: Optional[shared_findingstate_enum.FindingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Finding state:
      * notfixed - Issue can still be exploited
      * invalid - Issue determined to be a false positive
      * accepted - Issue will not be solved and the risk was accepted
      * fixed - No problem here anymore
    """  
    target: Optional[shared_targetsimple.TargetSimple] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Full finding URL"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value for parameter."""  
    