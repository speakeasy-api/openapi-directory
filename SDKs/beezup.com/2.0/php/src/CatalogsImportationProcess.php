<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CatalogsImportationProcess 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancel importation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationCancelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationCancelResponse
     */
	public function importationCancel(
        \OpenAPI\OpenAPI\Models\Operations\ImportationCancelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/cancel', \OpenAPI\OpenAPI\Models\Operations\ImportationCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commit Importation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationCommitRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationCommitResponse
     */
	public function importationCommit(
        \OpenAPI\OpenAPI\Models\Operations\ImportationCommitRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationCommitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/commit', \OpenAPI\OpenAPI\Models\Operations\ImportationCommitRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationCommitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commit columns
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationCommitColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationCommitColumnsResponse
     */
	public function importationCommitColumns(
        \OpenAPI\OpenAPI\Models\Operations\ImportationCommitColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationCommitColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns', \OpenAPI\OpenAPI\Models\Operations\ImportationCommitColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationCommitColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Configure remaining catalog columns
     * 
     * This operation should be used after you have mapped the required BeezUP Columns
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureRemainingCatalogColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureRemainingCatalogColumnsResponse
     */
	public function importationConfigureRemainingCatalogColumns(
        \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureRemainingCatalogColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureRemainingCatalogColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns', \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureRemainingCatalogColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationConfigureRemainingCatalogColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 409) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the importation status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetImportationMonitoringRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetImportationMonitoringResponse
     */
	public function importationGetImportationMonitoring(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetImportationMonitoringRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetImportationMonitoringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}', \OpenAPI\OpenAPI\Models\Operations\ImportationGetImportationMonitoringRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetImportationMonitoringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importationMonitoring = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportationMonitoring', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Importation Get Products Report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductsReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductsReportResponse
     */
	public function importationGetProductsReport(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductsReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductsReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/products/list', \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductsReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getImportationProductsReportRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetProductsReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getImportationProductsReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetImportationProductsReportResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }

        return $response;
    }
	
    /**
     * Importation Get Report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportResponse
     */
	public function importationGetReport(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/report', \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getImportationReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetImportationReportResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }

        return $response;
    }
	
    /**
     * Get the latest catalog importation reporting
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsResponse
     */
	public function importationGetReportings(
        \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations', \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportationsResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the latest catalog importation reporting for all your stores
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsAllStoresResponse
     */
	public function importationGetReportingsAllStores(
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsAllStoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/importations');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationGetReportingsAllStoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importationsPerStoreResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\ImportationsResponse>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start Manual Import
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationStartManualUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationStartManualUpdateResponse
     */
	public function importationStartManualUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ImportationStartManualUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationStartManualUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/start', \OpenAPI\OpenAPI\Models\Operations\ImportationStartManualUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startManualImportRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationStartManualUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linksImportationGetImportationMonitoringLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinksImportationGetImportationMonitoringLink', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importAlreadyInProgressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportAlreadyInProgressResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get technical progression
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportationTechnicalProgressionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportationTechnicalProgressionResponse
     */
	public function importationTechnicalProgression(
        \OpenAPI\OpenAPI\Models\Operations\ImportationTechnicalProgressionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportationTechnicalProgressionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression', \OpenAPI\OpenAPI\Models\Operations\ImportationTechnicalProgressionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportationTechnicalProgressionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importationTechnicalProgression = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportationTechnicalProgression', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}