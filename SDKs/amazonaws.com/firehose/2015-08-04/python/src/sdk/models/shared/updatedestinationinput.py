"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amazonopensearchserverlessdestinationupdate as shared_amazonopensearchserverlessdestinationupdate
from ..shared import amazonopensearchservicedestinationupdate as shared_amazonopensearchservicedestinationupdate
from ..shared import bufferinghints as shared_bufferinghints
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import compressionformat_enum as shared_compressionformat_enum
from ..shared import elasticsearchdestinationupdate as shared_elasticsearchdestinationupdate
from ..shared import encryptionconfiguration as shared_encryptionconfiguration
from ..shared import extendeds3destinationupdate as shared_extendeds3destinationupdate
from ..shared import httpendpointdestinationupdate as shared_httpendpointdestinationupdate
from ..shared import redshiftdestinationupdate as shared_redshiftdestinationupdate
from ..shared import splunkdestinationupdate as shared_splunkdestinationupdate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDestinationInputS3DestinationUpdate:
    r"""[Deprecated] Describes an update for a destination in Amazon S3."""
    
    bucket_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketARN'), 'exclude': lambda f: f is None }})  
    buffering_hints: Optional[shared_bufferinghints.BufferingHints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BufferingHints'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})  
    compression_format: Optional[shared_compressionformat_enum.CompressionFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompressionFormat'), 'exclude': lambda f: f is None }})  
    encryption_configuration: Optional[shared_encryptionconfiguration.EncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    error_output_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorOutputPrefix'), 'exclude': lambda f: f is None }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Prefix'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleARN'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDestinationInput:
    
    current_delivery_stream_version_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentDeliveryStreamVersionId') }})  
    delivery_stream_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryStreamName') }})  
    destination_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationId') }})  
    amazon_open_search_serverless_destination_update: Optional[shared_amazonopensearchserverlessdestinationupdate.AmazonOpenSearchServerlessDestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmazonOpenSearchServerlessDestinationUpdate'), 'exclude': lambda f: f is None }})  
    amazonopensearchservice_destination_update: Optional[shared_amazonopensearchservicedestinationupdate.AmazonopensearchserviceDestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmazonopensearchserviceDestinationUpdate'), 'exclude': lambda f: f is None }})  
    elasticsearch_destination_update: Optional[shared_elasticsearchdestinationupdate.ElasticsearchDestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticsearchDestinationUpdate'), 'exclude': lambda f: f is None }})  
    extended_s3_destination_update: Optional[shared_extendeds3destinationupdate.ExtendedS3DestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtendedS3DestinationUpdate'), 'exclude': lambda f: f is None }})  
    http_endpoint_destination_update: Optional[shared_httpendpointdestinationupdate.HTTPEndpointDestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HttpEndpointDestinationUpdate'), 'exclude': lambda f: f is None }})  
    redshift_destination_update: Optional[shared_redshiftdestinationupdate.RedshiftDestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedshiftDestinationUpdate'), 'exclude': lambda f: f is None }})  
    s3_destination_update: Optional[UpdateDestinationInputS3DestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DestinationUpdate'), 'exclude': lambda f: f is None }})  
    splunk_destination_update: Optional[shared_splunkdestinationupdate.SplunkDestinationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SplunkDestinationUpdate'), 'exclude': lambda f: f is None }})  
    