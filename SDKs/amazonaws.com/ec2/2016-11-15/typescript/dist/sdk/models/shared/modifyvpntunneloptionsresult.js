"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifyVpnTunnelOptionsResult = exports.ModifyVpnTunnelOptionsResultVpnConnection = exports.ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry = exports.ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionTypeEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionTags = exports.ModifyVpnTunnelOptionsResultVpnConnectionStateEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutes = exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutesSourceEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptions = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The current state of the gateway association.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum;
(function (ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum) {
    ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum["Associated"] = "associated";
    ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum["NotAssociated"] = "not-associated";
    ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum["Associating"] = "associating";
    ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum["Disassociating"] = "disassociating";
})(ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum || (exports.ModifyVpnTunnelOptionsResultVpnConnectionGatewayAssociationStateEnum = {}));
/**
 * Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum;
(function (ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum) {
    ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv4"] = "ipv4";
    ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum["Ipv6"] = "ipv6";
})(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum || (exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelInsideIpVersionEnum = {}));
/**
 * The internet key exchange (IKE) version permitted for the VPN tunnel.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions;
/**
 * Options for sending VPN tunnel logs to CloudWatch.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logGroupArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logOutputFormat", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
/**
 * Options for logging VPN tunnel activity.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions.prototype, "cloudWatchLogOptions", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions;
/**
 * The Diffie-Hellmann group number for phase 1 IKE negotiations.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers;
/**
 * The encryption algorithm for phase 1 IKE negotiations.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 1 IKE negotiations.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms;
/**
 * The Diffie-Hellmann group number for phase 2 IKE negotiations.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers;
/**
 * The encryption algorithm for phase 2 IKE negotiations.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 2 IKE negotiations.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms;
/**
 * The VPN tunnel options.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "dpdTimeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsIkeVersions,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "ikeVersions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsLogOptions)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "logOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase1DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase1EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase1IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase1LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase2DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase2EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase2IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "phase2LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "preSharedKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyFuzzPercentage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "rekeyMarginTimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "replayWindowSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "startupAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions.prototype, "tunnelInsideIpv6Cidr", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions = ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions;
/**
 * The VPN connection options.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionOptions = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionOptions, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "enableAcceleration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "localIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "localIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "outsideIpAddressType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "remoteIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "remoteIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "staticRoutesOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "transportTransitGatewayAttachmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "tunnelInsideIpVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionOptionsTunnelOptions,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnectionOptions.prototype, "tunnelOptions", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionOptions;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionOptions = ModifyVpnTunnelOptionsResultVpnConnectionOptions;
/**
 * Indicates how the routes were provided.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionRoutesSourceEnum;
(function (ModifyVpnTunnelOptionsResultVpnConnectionRoutesSourceEnum) {
    ModifyVpnTunnelOptionsResultVpnConnectionRoutesSourceEnum["Static"] = "Static";
})(ModifyVpnTunnelOptionsResultVpnConnectionRoutesSourceEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutesSourceEnum || (exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutesSourceEnum = {}));
/**
 * The current state of the static route.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum;
(function (ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum) {
    ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum["Pending"] = "pending";
    ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum["Available"] = "available";
    ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum["Deleting"] = "deleting";
    ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum["Deleted"] = "deleted";
})(ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum || (exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutesStateEnum = {}));
/**
 * Describes a static route for a VPN connection.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionRoutes = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionRoutes, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionRoutes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionRoutes.prototype, "destinationCidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionRoutes.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionRoutes.prototype, "state", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionRoutes;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionRoutes = ModifyVpnTunnelOptionsResultVpnConnectionRoutes;
/**
 * The current state of the VPN connection.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionStateEnum;
(function (ModifyVpnTunnelOptionsResultVpnConnectionStateEnum) {
    ModifyVpnTunnelOptionsResultVpnConnectionStateEnum["Pending"] = "pending";
    ModifyVpnTunnelOptionsResultVpnConnectionStateEnum["Available"] = "available";
    ModifyVpnTunnelOptionsResultVpnConnectionStateEnum["Deleting"] = "deleting";
    ModifyVpnTunnelOptionsResultVpnConnectionStateEnum["Deleted"] = "deleted";
})(ModifyVpnTunnelOptionsResultVpnConnectionStateEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionStateEnum || (exports.ModifyVpnTunnelOptionsResultVpnConnectionStateEnum = {}));
/**
 * Describes a tag.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionTags = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionTags, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionTags.prototype, "value", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionTags;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionTags = ModifyVpnTunnelOptionsResultVpnConnectionTags;
/**
 * The type of VPN connection.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionTypeEnum;
(function (ModifyVpnTunnelOptionsResultVpnConnectionTypeEnum) {
    ModifyVpnTunnelOptionsResultVpnConnectionTypeEnum["Ipsec1"] = "ipsec.1";
})(ModifyVpnTunnelOptionsResultVpnConnectionTypeEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionTypeEnum || (exports.ModifyVpnTunnelOptionsResultVpnConnectionTypeEnum = {}));
/**
 * The status of the VPN tunnel.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum;
(function (ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum) {
    ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum["Up"] = "UP";
    ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum["Down"] = "DOWN";
})(ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum = exports.ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum || (exports.ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetryStatusEnum = {}));
/**
 * Describes telemetry for a VPN tunnel.
 */
var ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry, _super);
    function ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry.prototype, "acceptedRouteCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry.prototype, "certificateArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry.prototype, "lastStatusChange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry.prototype, "statusMessage", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry = ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry;
/**
 * Information about the VPN connection.
 */
var ModifyVpnTunnelOptionsResultVpnConnection = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResultVpnConnection, _super);
    function ModifyVpnTunnelOptionsResultVpnConnection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "coreNetworkArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "coreNetworkAttachmentArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "customerGatewayConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "customerGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "gatewayAssociationState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelOptionsResultVpnConnectionOptions)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionRoutes,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "routes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionTags,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "transitGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyVpnTunnelOptionsResultVpnConnectionVgwTelemetry,
        }),
        __metadata("design:type", Array)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "vgwTelemetry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "vpnConnectionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyVpnTunnelOptionsResultVpnConnection.prototype, "vpnGatewayId", void 0);
    return ModifyVpnTunnelOptionsResultVpnConnection;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResultVpnConnection = ModifyVpnTunnelOptionsResultVpnConnection;
/**
 * Success
 */
var ModifyVpnTunnelOptionsResult = /** @class */ (function (_super) {
    __extends(ModifyVpnTunnelOptionsResult, _super);
    function ModifyVpnTunnelOptionsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyVpnTunnelOptionsResultVpnConnection)
    ], ModifyVpnTunnelOptionsResult.prototype, "vpnConnection", void 0);
    return ModifyVpnTunnelOptionsResult;
}(utils_1.SpeakeasyBase));
exports.ModifyVpnTunnelOptionsResult = ModifyVpnTunnelOptionsResult;
