"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETCreateNetworkACLEntryActionEnum(str, Enum):
    CREATE_NETWORK_ACL_ENTRY = 'CreateNetworkAclEntry'


@dataclasses.dataclass
class GETCreateNetworkACLEntryIcmp:
    r"""Describes the ICMP type and code."""
    
    code: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Code' }})  
    type: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Type' }})  
    

@dataclasses.dataclass
class GETCreateNetworkACLEntryPortRange:
    r"""Describes a range of ports."""
    
    from_: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'From' }})  
    to: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'To' }})  
    
class GETCreateNetworkACLEntryRuleActionEnum(str, Enum):
    r"""Indicates whether to allow or deny the traffic that matches the rule."""
    ALLOW = 'allow'
    DENY = 'deny'

class GETCreateNetworkACLEntryVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETCreateNetworkACLEntryRequest:
    
    action: GETCreateNetworkACLEntryActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    egress: bool = dataclasses.field(metadata={'query_param': { 'field_name': 'Egress', 'style': 'form', 'explode': True }})
    r"""Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet)."""  
    network_acl_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'NetworkAclId', 'style': 'form', 'explode': True }})
    r"""The ID of the network ACL."""  
    protocol: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Protocol', 'style': 'form', 'explode': True }})
    r"""The protocol number. A value of \\"-1\\" means all protocols. If you specify \\"-1\\" or a protocol number other than \\"6\\" (TCP), \\"17\\" (UDP), or \\"1\\" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol \\"58\\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol \\"58\\" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code."""  
    rule_action: GETCreateNetworkACLEntryRuleActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'RuleAction', 'style': 'form', 'explode': True }})
    r"""Indicates whether to allow or deny the traffic that matches the rule."""  
    rule_number: int = dataclasses.field(metadata={'query_param': { 'field_name': 'RuleNumber', 'style': 'form', 'explode': True }})
    r"""<p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>"""  
    version: GETCreateNetworkACLEntryVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CidrBlock', 'style': 'form', 'explode': True }})
    r"""The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    icmp: Optional[GETCreateNetworkACLEntryIcmp] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Icmp', 'style': 'form', 'explode': True }})
    r"""ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block."""  
    ipv6_cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Ipv6CidrBlock', 'style': 'form', 'explode': True }})
    r"""The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>)."""  
    port_range: Optional[GETCreateNetworkACLEntryPortRange] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PortRange', 'style': 'form', 'explode': True }})
    r"""TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP)."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETCreateNetworkACLEntryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    