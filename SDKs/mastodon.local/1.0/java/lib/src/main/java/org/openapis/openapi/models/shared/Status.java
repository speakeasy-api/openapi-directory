/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Status - Represents a status posted by an account.
 * https://docs.joinmastodon.org/entities/status/
 */
public class Status {
    /**
     * Represents a user of Mastodon and their associated profile.
     * https://docs.joinmastodon.org/entities/account/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    public Account account;

    public Status withAccount(Account account) {
        this.account = account;
        return this;
    }
    
    /**
     * Represents an application that interfaces with the REST API to access accounts or post statuses.
     * https://docs.joinmastodon.org/entities/application/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application")
    public Application application;

    public Status withApplication(Application application) {
        this.application = application;
        return this;
    }
    
    /**
     * Have you bookmarked this status?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookmarked")
    public Boolean bookmarked;

    public Status withBookmarked(Boolean bookmarked) {
        this.bookmarked = bookmarked;
        return this;
    }
    
    /**
     * Represents a rich preview card that is generated using OpenGraph tags from a URL.
     * https://docs.joinmastodon.org/entities/card/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card")
    public Card card;

    public Status withCard(Card card) {
        this.card = card;
        return this;
    }
    
    /**
     * HTML-encoded status content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;

    public Status withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The date when this status was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Status withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Custom emoji to be used when rendering status content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emojis")
    public Emoji[] emojis;

    public Status withEmojis(Emoji[] emojis) {
        this.emojis = emojis;
        return this;
    }
    
    /**
     * Have you favourited this status?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("favourited")
    public Boolean favourited;

    public Status withFavourited(Boolean favourited) {
        this.favourited = favourited;
        return this;
    }
    
    /**
     * How many favourites this status has received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("favourites_count")
    public Long favouritesCount;

    public Status withFavouritesCount(Long favouritesCount) {
        this.favouritesCount = favouritesCount;
        return this;
    }
    
    /**
     * ID of the status in the database. Cast from an integer but not guaranteed to be a number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Status withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the account being replied to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("in_reply_to_account_id")
    public String inReplyToAccountId;

    public Status withInReplyToAccountId(String inReplyToAccountId) {
        this.inReplyToAccountId = inReplyToAccountId;
        return this;
    }
    
    /**
     * ID of the status being replied. Cast from an integer but not guaranteed to be a number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("in_reply_to_id")
    public String inReplyToId;

    public Status withInReplyToId(String inReplyToId) {
        this.inReplyToId = inReplyToId;
        return this;
    }
    
    /**
     * Primary language of this status. ISO 639 Part 1 two-letter language code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public Status withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * Media that is attached to this status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media_attachments")
    public Attachment[] mediaAttachments;

    public Status withMediaAttachments(Attachment[] mediaAttachments) {
        this.mediaAttachments = mediaAttachments;
        return this;
    }
    
    /**
     * Mentions of users within the status content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mentions")
    public Mention[] mentions;

    public Status withMentions(Mention[] mentions) {
        this.mentions = mentions;
        return this;
    }
    
    /**
     * Have you muted notifications for this status's conversation?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("muted")
    public Boolean muted;

    public Status withMuted(Boolean muted) {
        this.muted = muted;
        return this;
    }
    
    /**
     * Have you pinned this status? Only appears if the status is pinnable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pinned")
    public Boolean pinned;

    public Status withPinned(Boolean pinned) {
        this.pinned = pinned;
        return this;
    }
    
    /**
     * Represents a poll attached to a status.
     * https://docs.joinmastodon.org/entities/poll/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poll")
    public Poll poll;

    public Status withPoll(Poll poll) {
        this.poll = poll;
        return this;
    }
    
    /**
     * Represents a status posted by an account.
     * https://docs.joinmastodon.org/entities/status/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reblog")
    public Status reblog;

    public Status withReblog(Status reblog) {
        this.reblog = reblog;
        return this;
    }
    
    /**
     * Have you boosted this status?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reblogged")
    public Boolean reblogged;

    public Status withReblogged(Boolean reblogged) {
        this.reblogged = reblogged;
        return this;
    }
    
    /**
     * How many boosts this status has received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reblogs_count")
    public Long reblogsCount;

    public Status withReblogsCount(Long reblogsCount) {
        this.reblogsCount = reblogsCount;
        return this;
    }
    
    /**
     * How many replies this status has received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replies_count")
    public Long repliesCount;

    public Status withRepliesCount(Long repliesCount) {
        this.repliesCount = repliesCount;
        return this;
    }
    
    /**
     * Is this status marked as sensitive content?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sensitive")
    public Boolean sensitive;

    public Status withSensitive(Boolean sensitive) {
        this.sensitive = sensitive;
        return this;
    }
    
    /**
     * Subject or summary line, below which status content is collapsed until expanded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spoiler_text")
    public String spoilerText;

    public Status withSpoilerText(String spoilerText) {
        this.spoilerText = spoilerText;
        return this;
    }
    
    /**
     * Hashtags used within the status content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;

    public Status withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;

    public Status withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * URI of the status used for federation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    public String uri;

    public Status withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
    /**
     * A link to the status's HTML representation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Status withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Visibility of this status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public StatusVisibilityEnum visibility;

    public Status withVisibility(StatusVisibilityEnum visibility) {
        this.visibility = visibility;
        return this;
    }
    
    public Status(){}
}
