<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Blobs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create binary large object (blob) metadata
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BlobInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddBlobResponse
     */
	public function addBlob(
        \OpenAPI\OpenAPI\Models\Shared\BlobInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddBlobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddBlobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete binary large object (blob)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBlobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBlobResponse
     */
	public function deleteBlob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBlobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBlobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blobs/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteBlobRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBlobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download a binary large object (blob)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlobByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlobByIdResponse
     */
	public function getBlobById(
        \OpenAPI\OpenAPI\Models\Operations\GetBlobByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlobByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blobs/{id}/download/{filename}', \OpenAPI\OpenAPI\Models\Operations\GetBlobByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlobByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/*')) {
                $response->getBlobById200ImageWildcardBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get binary large object (blob)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlobMetadataByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlobMetadataByIdResponse
     */
	public function getBlobMetadataById(
        \OpenAPI\OpenAPI\Models\Operations\GetBlobMetadataByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlobMetadataByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blobs/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBlobMetadataByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlobMetadataByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->blob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Blob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all binary large objects (blob)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlobsResponse
     */
	public function getBlobs(
        \OpenAPI\OpenAPI\Models\Operations\GetBlobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBlobsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlobs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBlobs200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create binary large object (blob)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadBlobByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadBlobByIdResponse
     */
	public function uploadBlobById(
        \OpenAPI\OpenAPI\Models\Operations\UploadBlobByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadBlobByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/blobs/{id}/upload', \OpenAPI\OpenAPI\Models\Operations\UploadBlobByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadBlobByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}