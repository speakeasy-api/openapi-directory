"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dynamokeytype_enum as shared_dynamokeytype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DynamoDBAction:
    r"""<p>Describes an action to write to a DynamoDB table.</p> <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p> <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p> <p> <code>\\"hashKeyValue\\": \\"${topic(3)}\\"</code> </p> <p>The following field uses the timestamp:</p> <p> <code>\\"rangeKeyValue\\": \\"${timestamp()}\\"</code> </p>"""
    
    hash_key_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashKeyField') }})  
    hash_key_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashKeyValue') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableName') }})  
    hash_key_type: Optional[shared_dynamokeytype_enum.DynamoKeyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashKeyType'), 'exclude': lambda f: f is None }})  
    operation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation'), 'exclude': lambda f: f is None }})  
    payload_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payloadField'), 'exclude': lambda f: f is None }})  
    range_key_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeKeyField'), 'exclude': lambda f: f is None }})  
    range_key_type: Optional[shared_dynamokeytype_enum.DynamoKeyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeKeyType'), 'exclude': lambda f: f is None }})  
    range_key_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeKeyValue'), 'exclude': lambda f: f is None }})  
    