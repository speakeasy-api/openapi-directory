// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNetworkEventsProductTypeEnum - The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
type GetNetworkEventsProductTypeEnum string

const (
	GetNetworkEventsProductTypeEnumAppliance       GetNetworkEventsProductTypeEnum = "appliance"
	GetNetworkEventsProductTypeEnumCamera          GetNetworkEventsProductTypeEnum = "camera"
	GetNetworkEventsProductTypeEnumCellularGateway GetNetworkEventsProductTypeEnum = "cellularGateway"
	GetNetworkEventsProductTypeEnumSwitch          GetNetworkEventsProductTypeEnum = "switch"
	GetNetworkEventsProductTypeEnumSystemsManager  GetNetworkEventsProductTypeEnum = "systemsManager"
	GetNetworkEventsProductTypeEnumWireless        GetNetworkEventsProductTypeEnum = "wireless"
)

func (e *GetNetworkEventsProductTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetNetworkEventsProductTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkEventsProductTypeEnum: %s", s)
	}
}

type GetNetworkEventsRequest struct {
	// The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
	ClientIP *string `queryParam:"style=form,explode=true,name=clientIp"`
	// The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
	ClientMac *string `queryParam:"style=form,explode=true,name=clientMac"`
	// The name, or partial name, of the client which the list of events will be filtered with
	ClientName *string `queryParam:"style=form,explode=true,name=clientName"`
	// The MAC address of the Meraki device which the list of events will be filtered with
	DeviceMac *string `queryParam:"style=form,explode=true,name=deviceMac"`
	// The name of the Meraki device which the list of events will be filtered with
	DeviceName *string `queryParam:"style=form,explode=true,name=deviceName"`
	// The serial of the Meraki device which the list of events will be filtered with
	DeviceSerial *string `queryParam:"style=form,explode=true,name=deviceSerial"`
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// A list of event types. The returned events will be filtered to exclude events with these types.
	ExcludedEventTypes []string `queryParam:"style=form,explode=false,name=excludedEventTypes"`
	// A list of event types. The returned events will be filtered to only include events with these types.
	IncludedEventTypes []string `queryParam:"style=form,explode=false,name=includedEventTypes"`
	NetworkID          string   `pathParam:"style=simple,explode=false,name=networkId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
	ProductType *GetNetworkEventsProductTypeEnum `queryParam:"style=form,explode=true,name=productType"`
	// The MAC address of the Systems Manager device which the list of events will be filtered with
	SmDeviceMac *string `queryParam:"style=form,explode=true,name=smDeviceMac"`
	// The name of the Systems Manager device which the list of events will be filtered with
	SmDeviceName *string `queryParam:"style=form,explode=true,name=smDeviceName"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
}

// GetNetworkEvents200ApplicationJSONEventsEventData - An object containing more data related to the event.
type GetNetworkEvents200ApplicationJSONEventsEventData struct {
	// The association ID of the client.
	Aid *string `json:"aid,omitempty"`
	// The radio channel the client is connecting to.
	Channel *string `json:"channel,omitempty"`
	// The client's IP address
	ClientIP *string `json:"client_ip,omitempty"`
	// The client's MAC address
	ClientMac *string `json:"client_mac,omitempty"`
	// The radio band number the client is trying to connect to.
	Radio *string `json:"radio,omitempty"`
	// The current received signal strength indication (RSSI) of the client connected to an AP.
	Rssi *string `json:"rssi,omitempty"`
	// The virtual access point (VAP) number the client is connecting to.
	Vap *string `json:"vap,omitempty"`
}

type GetNetworkEvents200ApplicationJSONEvents struct {
	// A description of the client. This is usually the client's device name.
	ClientDescription *string `json:"clientDescription,omitempty"`
	// A string identifying the client. This could be a client's MAC or IP address
	ClientID *string `json:"clientId,omitempty"`
	// The client's MAC address.
	ClientMac *string `json:"clientMac,omitempty"`
	// A description of the event the happened.
	Description *string `json:"description,omitempty"`
	// The name of the device. Only shown if the device is an access point.
	DeviceName *string `json:"deviceName,omitempty"`
	// The serial number of the device. Only shown if the device is an access point.
	DeviceSerial *string `json:"deviceSerial,omitempty"`
	// An object containing more data related to the event.
	EventData *GetNetworkEvents200ApplicationJSONEventsEventData `json:"eventData,omitempty"`
	// The ID of the network.
	NetworkID *string `json:"networkId,omitempty"`
	// An UTC ISO8601 string of the time the event occurred at.
	OccurredAt *string `json:"occurredAt,omitempty"`
	// The SSID number of the device.
	SsidNumber *int64 `json:"ssidNumber,omitempty"`
	// The type of event being listed.
	Type *string `json:"type,omitempty"`
}

// GetNetworkEvents200ApplicationJSON - Successful operation
type GetNetworkEvents200ApplicationJSON struct {
	// An array of events that took place in the network.
	Events []GetNetworkEvents200ApplicationJSONEvents `json:"events,omitempty"`
	// A message regarding the events sent. Usually 'null' unless there are no events
	Message *string `json:"message,omitempty"`
	// An UTC ISO8601 string of the latest occured at time of the listed events of the page.
	PageEndAt *string `json:"pageEndAt,omitempty"`
	// An UTC ISO8601 string of the earliest occured at time of the listed events of the page.
	PageStartAt *string `json:"pageStartAt,omitempty"`
}

type GetNetworkEventsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkEvents200ApplicationJSONObject *GetNetworkEvents200ApplicationJSON
}
