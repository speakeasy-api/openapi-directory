/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class GetAssociationFilterRequest extends SpeakeasyBase {
  /**
   * Data source to consider.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=datasource",
  })
  datasource?: string;

  /**
   * Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=datastructure",
  })
  datastructure?: string;

  /**
   * Data type to consider.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=datatype",
  })
  datatype?: string;

  /**
   * If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direct",
  })
  direct?: boolean;

  /**
   * An EFO code listed as disease.id.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=disease",
  })
  disease?: string;

  /**
   * Returns facets
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=facets",
  })
  facets?: boolean;

  /**
   * Fields you want to retrieve. This will get priority over the data structure requested.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format?: string;

  /**
   * How many initial results should be skipped. Defaults to 0.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=from" })
  from?: number;

  /**
   * A Reactome pathway identifier (returning only those targets linked to the specified pathway).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pathway",
  })
  pathway?: string;

  /**
   * Filter by maximum score value.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scorevalue_max",
  })
  scorevalueMax?: number;

  /**
   * Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scorevalue_min",
  })
  scorevalueMin?: number;

  /**
   * Score types to apply the score value min and max filters. The default is `overall`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scorevalue_types",
  })
  scorevalueTypes?: string;

  /**
   * Restrict the filtered results to those matching the passed string. The matching is done with a
   *
   * @remarks
   * phrase match prefix.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search",
  })
  search?: string;

  /**
   * Maximum amount of results to return. Defaults to 10, max is 10000.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: number;

  /**
   * Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending
   *
   * @remarks
   * order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as
   * 'datasources.gwas'. Supports multiple entries.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * A target identifier listed as target.id.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=target",
  })
  target?: string;

  /**
   * A ChEMBL target class identifier (returning only those targets belonging to the specified class).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=target_class",
  })
  targetClass?: string;

  /**
   * An EFO code of a therapeutic area.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=therapeutic_area",
  })
  therapeuticArea?: string;

  /**
   * A UniProt keyword (meaning all the targets linked to that keyword).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uniprotkw",
  })
  uniprotkw?: string;
}

export class GetAssociationFilterResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
