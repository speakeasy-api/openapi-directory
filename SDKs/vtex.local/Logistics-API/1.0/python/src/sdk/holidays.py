"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Holidays:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_holidays(self, request: operations.AllHolidaysRequest) -> operations.AllHolidaysResponse:
        r"""List all holidays
        Lists information of all holidays.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/logistics/pvt/configuration/holidays'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllHolidaysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_update_holiday(self, request: operations.CreateUpdateHolidayRequest) -> operations.CreateUpdateHolidayResponse:
        r"""Create/update holiday
        Creates or updates holidays through holiday ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateUpdateHolidayRequest, base_url, '/api/logistics/pvt/configuration/holidays/{holidayId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUpdateHolidayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def holiday(self, request: operations.HolidayRequest) -> operations.HolidayResponse:
        r"""Delete holiday
        Deletes given holidays set up in your store.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.HolidayRequest, base_url, '/api/logistics/pvt/configuration/holidays/{holidayId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HolidayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def holiday_by_id(self, request: operations.HolidayByIDRequest) -> operations.HolidayByIDResponse:
        r"""List holiday by ID
        Lists holiday's information by holiday ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.HolidayByIDRequest, base_url, '/api/logistics/pvt/configuration/holidays/{holidayId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HolidayByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    