/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Crash {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Crash(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Gets a specific group.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashGroupsGetResponse crashGroupsGet(org.openapis.openapi.models.operations.CrashGroupsGetRequest request, org.openapis.openapi.models.operations.CrashGroupsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashGroupsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashGroupsGetResponse res = new org.openapis.openapi.models.operations.CrashGroupsGetResponse() {{
            crashGroupsGet200ApplicationJSONObject = null;
            crashGroupsGetDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashGroupsGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashGroupsGet200ApplicationJSON.class);
                res.crashGroupsGet200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashGroupsGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashGroupsGetDefaultApplicationJSON.class);
                res.crashGroupsGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets a stacktrace for a specific crash.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashGroupsGetStacktraceResponse crashGroupsGetStacktrace(org.openapis.openapi.models.operations.CrashGroupsGetStacktraceRequest request, org.openapis.openapi.models.operations.CrashGroupsGetStacktraceSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashGroupsGetStacktraceRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CrashGroupsGetStacktraceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashGroupsGetStacktraceResponse res = new org.openapis.openapi.models.operations.CrashGroupsGetStacktraceResponse() {{
            stacktrace = null;
            crashGroupsGetStacktraceDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Stacktrace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Stacktrace.class);
                res.stacktrace = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashGroupsGetStacktraceDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashGroupsGetStacktraceDefaultApplicationJSON.class);
                res.crashGroupsGetStacktraceDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of crash groups and whether the list contains all available groups.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashGroupsListResponse crashGroupsList(org.openapis.openapi.models.operations.CrashGroupsListRequest request, org.openapis.openapi.models.operations.CrashGroupsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashGroupsListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CrashGroupsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashGroupsListResponse res = new org.openapis.openapi.models.operations.CrashGroupsListResponse() {{
            crashGroupsList200ApplicationJSONObject = null;
            crashGroupsListDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashGroupsList200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashGroupsList200ApplicationJSON.class);
                res.crashGroupsList200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashGroupsListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashGroupsListDefaultApplicationJSON.class);
                res.crashGroupsListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Updates a group.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashGroupsUpdateResponse crashGroupsUpdate(org.openapis.openapi.models.operations.CrashGroupsUpdateRequest request, org.openapis.openapi.models.operations.CrashGroupsUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashGroupsUpdateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashGroupsUpdateResponse res = new org.openapis.openapi.models.operations.CrashGroupsUpdateResponse() {{
            crashGroupsUpdate200ApplicationJSONObject = null;
            crashGroupsUpdateDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashGroupsUpdate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashGroupsUpdate200ApplicationJSON.class);
                res.crashGroupsUpdate200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashGroupsUpdateDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashGroupsUpdateDefaultApplicationJSON.class);
                res.crashGroupsUpdateDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete a specific crash and related attachments and blobs for an app.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesDeleteResponse crashesDelete(org.openapis.openapi.models.operations.CrashesDeleteRequest request, org.openapis.openapi.models.operations.CrashesDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CrashesDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesDeleteResponse res = new org.openapis.openapi.models.operations.CrashesDeleteResponse() {{
            crashesDelete200ApplicationJSONObject = null;
            crashesDeleteDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesDelete200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesDelete200ApplicationJSON.class);
                res.crashesDelete200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesDeleteDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesDeleteDefaultApplicationJSON.class);
                res.crashesDeleteDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets a specific crash for an app.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetResponse crashesGet(org.openapis.openapi.models.operations.CrashesGetRequest request, org.openapis.openapi.models.operations.CrashesGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CrashesGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetResponse res = new org.openapis.openapi.models.operations.CrashesGetResponse() {{
            crash = null;
            crashesGetDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Crash out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Crash.class);
                res.crash = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetDefaultApplicationJSON.class);
                res.crashesGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets whether the application has any crashes.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoResponse crashesGetAppCrashesInfo(org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoRequest request, org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crashes_info", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoResponse res = new org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoResponse() {{
            crashesGetAppCrashesInfo200ApplicationJSONObject = null;
            crashesGetAppCrashesInfoDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetAppCrashesInfo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetAppCrashesInfo200ApplicationJSON.class);
                res.crashesGetAppCrashesInfo200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetAppCrashesInfoDefaultApplicationJSON.class);
                res.crashesGetAppCrashesInfoDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of application versions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetAppVersionsResponse crashesGetAppVersions(org.openapis.openapi.models.operations.CrashesGetAppVersionsRequest request, org.openapis.openapi.models.operations.CrashesGetAppVersionsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetAppVersionsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetAppVersionsResponse res = new org.openapis.openapi.models.operations.CrashesGetAppVersionsResponse() {{
            crashesGetAppVersions200ApplicationJSONObjects = null;
            crashesGetAppVersionsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetAppVersions200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetAppVersions200ApplicationJSON[].class);
                res.crashesGetAppVersions200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetAppVersionsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetAppVersionsDefaultApplicationJSON.class);
                res.crashesGetAppVersionsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the URI location to download crash attachment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationResponse crashesGetCrashAttachmentLocation(org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationRequest request, org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationResponse res = new org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationResponse() {{
            crashesGetCrashAttachmentLocation200ApplicationJSONObject = null;
            crashesGetCrashAttachmentLocationDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocation200ApplicationJSON.class);
                res.crashesGetCrashAttachmentLocation200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetCrashAttachmentLocationDefaultApplicationJSON.class);
                res.crashesGetCrashAttachmentLocationDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets content of the text attachment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentResponse crashesGetCrashTextAttachmentContent(org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentRequest request, org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentResponse res = new org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentResponse() {{
            crashesGetCrashTextAttachmentContent200ApplicationJSONString = null;
            crashesGetCrashTextAttachmentContentDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.crashesGetCrashTextAttachmentContent200ApplicationJSONString = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetCrashTextAttachmentContentDefaultApplicationJSON.class);
                res.crashesGetCrashTextAttachmentContentDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the native log of a specific crash.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetNativeCrashResponse crashesGetNativeCrash(org.openapis.openapi.models.operations.CrashesGetNativeCrashRequest request, org.openapis.openapi.models.operations.CrashesGetNativeCrashSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetNativeCrashRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetNativeCrashResponse res = new org.openapis.openapi.models.operations.CrashesGetNativeCrashResponse() {{
            crashesGetNativeCrash200ApplicationJSONString = null;
            crashesGetNativeCrashDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.crashesGetNativeCrash200ApplicationJSONString = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetNativeCrashDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetNativeCrashDefaultApplicationJSON.class);
                res.crashesGetNativeCrashDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the native log of a specific crash as a text attachment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadResponse crashesGetNativeCrashDownload(org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadRequest request, org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadResponse res = new org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadResponse() {{
            crashesGetNativeCrashDownload200ApplicationJSONString = null;
            crashesGetNativeCrashDownloadDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.crashesGetNativeCrashDownload200ApplicationJSONString = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetNativeCrashDownloadDefaultApplicationJSON.class);
                res.crashesGetNativeCrashDownloadDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the URI location to download json of a specific crash.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetRawCrashLocationResponse crashesGetRawCrashLocation(org.openapis.openapi.models.operations.CrashesGetRawCrashLocationRequest request, org.openapis.openapi.models.operations.CrashesGetRawCrashLocationSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetRawCrashLocationRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetRawCrashLocationResponse res = new org.openapis.openapi.models.operations.CrashesGetRawCrashLocationResponse() {{
            crashesGetRawCrashLocation200ApplicationJSONObject = null;
            crashesGetRawCrashLocationDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetRawCrashLocation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetRawCrashLocation200ApplicationJSON.class);
                res.crashesGetRawCrashLocation200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetRawCrashLocationDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetRawCrashLocationDefaultApplicationJSON.class);
                res.crashesGetRawCrashLocationDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets a stacktrace for a specific crash.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesGetStacktraceResponse crashesGetStacktrace(org.openapis.openapi.models.operations.CrashesGetStacktraceRequest request, org.openapis.openapi.models.operations.CrashesGetStacktraceSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesGetStacktraceRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CrashesGetStacktraceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesGetStacktraceResponse res = new org.openapis.openapi.models.operations.CrashesGetStacktraceResponse() {{
            stacktrace = null;
            crashesGetStacktraceDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Stacktrace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Stacktrace.class);
                res.stacktrace = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesGetStacktraceDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesGetStacktraceDefaultApplicationJSON.class);
                res.crashesGetStacktraceDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets all crashes of a group.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesListResponse crashesList(org.openapis.openapi.models.operations.CrashesListRequest request, org.openapis.openapi.models.operations.CrashesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CrashesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesListResponse res = new org.openapis.openapi.models.operations.CrashesListResponse() {{
            crashes = null;
            crashesListDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Crash[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Crash[].class);
                res.crashes = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesListDefaultApplicationJSON.class);
                res.crashesListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets all attachments for a specific crash.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CrashesListAttachmentsResponse crashesListAttachments(org.openapis.openapi.models.operations.CrashesListAttachmentsRequest request, org.openapis.openapi.models.operations.CrashesListAttachmentsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CrashesListAttachmentsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CrashesListAttachmentsResponse res = new org.openapis.openapi.models.operations.CrashesListAttachmentsResponse() {{
            crashesListAttachments200ApplicationJSONObjects = null;
            crashesListAttachmentsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesListAttachments200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesListAttachments200ApplicationJSON[].class);
                res.crashesListAttachments200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CrashesListAttachmentsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CrashesListAttachmentsDefaultApplicationJSON.class);
                res.crashesListAttachmentsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets missing symbol crash group by its id
     * Gets missing symbol crash group by its id
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.MissingSymbolGroupsGetResponse missingSymbolGroupsGet(org.openapis.openapi.models.operations.MissingSymbolGroupsGetRequest request, org.openapis.openapi.models.operations.MissingSymbolGroupsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.MissingSymbolGroupsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MissingSymbolGroupsGetResponse res = new org.openapis.openapi.models.operations.MissingSymbolGroupsGetResponse() {{
            missingSymbolGroupsGet200ApplicationJSONObject = null;
            missingSymbolGroupsGetDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MissingSymbolGroupsGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MissingSymbolGroupsGet200ApplicationJSON.class);
                res.missingSymbolGroupsGet200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MissingSymbolGroupsGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MissingSymbolGroupsGetDefaultApplicationJSON.class);
                res.missingSymbolGroupsGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets application level statistics for all missing symbol groups
     * Gets application level statistics for all missing symbol groups
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.MissingSymbolGroupsInfoResponse missingSymbolGroupsInfo(org.openapis.openapi.models.operations.MissingSymbolGroupsInfoRequest request, org.openapis.openapi.models.operations.MissingSymbolGroupsInfoSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.MissingSymbolGroupsInfoRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MissingSymbolGroupsInfoResponse res = new org.openapis.openapi.models.operations.MissingSymbolGroupsInfoResponse() {{
            missingSymbolGroupsInfo200ApplicationJSONObject = null;
            missingSymbolGroupsInfoDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MissingSymbolGroupsInfo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MissingSymbolGroupsInfo200ApplicationJSON.class);
                res.missingSymbolGroupsInfo200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MissingSymbolGroupsInfoDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MissingSymbolGroupsInfoDefaultApplicationJSON.class);
                res.missingSymbolGroupsInfoDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.MissingSymbolGroupsListResponse missingSymbolGroupsList(org.openapis.openapi.models.operations.MissingSymbolGroupsListRequest request, org.openapis.openapi.models.operations.MissingSymbolGroupsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.MissingSymbolGroupsListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.MissingSymbolGroupsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MissingSymbolGroupsListResponse res = new org.openapis.openapi.models.operations.MissingSymbolGroupsListResponse() {{
            missingSymbolGroupsList200ApplicationJSONObject = null;
            missingSymbolGroupsListDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MissingSymbolGroupsList200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MissingSymbolGroupsList200ApplicationJSON.class);
                res.missingSymbolGroupsList200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MissingSymbolGroupsListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MissingSymbolGroupsListDefaultApplicationJSON.class);
                res.missingSymbolGroupsListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for the specified application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolUploadsCompleteResponse symbolUploadsComplete(org.openapis.openapi.models.operations.SymbolUploadsCompleteRequest request, org.openapis.openapi.models.operations.SymbolUploadsCompleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolUploadsCompleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolUploadsCompleteResponse res = new org.openapis.openapi.models.operations.SymbolUploadsCompleteResponse() {{
            symbolUploadsComplete200ApplicationJSONObject = null;
            symbolUploadsComplete400ApplicationJSONObject = null;
            symbolUploadsComplete403ApplicationJSONObject = null;
            symbolUploadsComplete500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsComplete200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsComplete200ApplicationJSON.class);
                res.symbolUploadsComplete200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsComplete400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsComplete400ApplicationJSON.class);
                res.symbolUploadsComplete400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsComplete403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsComplete403ApplicationJSON.class);
                res.symbolUploadsComplete403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsComplete500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsComplete500ApplicationJSON.class);
                res.symbolUploadsComplete500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Begins the symbol upload process for a new set of symbols for the specified application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolUploadsCreateResponse symbolUploadsCreate(org.openapis.openapi.models.operations.SymbolUploadsCreateRequest request, org.openapis.openapi.models.operations.SymbolUploadsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolUploadsCreateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolUploadsCreateResponse res = new org.openapis.openapi.models.operations.SymbolUploadsCreateResponse() {{
            symbolUploadsCreate200ApplicationJSONObject = null;
            symbolUploadsCreate400ApplicationJSONObject = null;
            symbolUploadsCreate403ApplicationJSONObject = null;
            symbolUploadsCreate500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsCreate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsCreate200ApplicationJSON.class);
                res.symbolUploadsCreate200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsCreate400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsCreate400ApplicationJSON.class);
                res.symbolUploadsCreate400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsCreate403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsCreate403ApplicationJSON.class);
                res.symbolUploadsCreate403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsCreate500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsCreate500ApplicationJSON.class);
                res.symbolUploadsCreate500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Deletes a symbol upload by id for the specified application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolUploadsDeleteResponse symbolUploadsDelete(org.openapis.openapi.models.operations.SymbolUploadsDeleteRequest request, org.openapis.openapi.models.operations.SymbolUploadsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolUploadsDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolUploadsDeleteResponse res = new org.openapis.openapi.models.operations.SymbolUploadsDeleteResponse() {{
            symbolUploadsDelete200ApplicationJSONObject = null;
            symbolUploadsDelete403ApplicationJSONObject = null;
            symbolUploadsDelete404ApplicationJSONObject = null;
            symbolUploadsDelete500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsDelete200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsDelete200ApplicationJSON.class);
                res.symbolUploadsDelete200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsDelete403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsDelete403ApplicationJSON.class);
                res.symbolUploadsDelete403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsDelete404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsDelete404ApplicationJSON.class);
                res.symbolUploadsDelete404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsDelete500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsDelete500ApplicationJSON.class);
                res.symbolUploadsDelete500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets a symbol upload by id for the specified application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolUploadsGetResponse symbolUploadsGet(org.openapis.openapi.models.operations.SymbolUploadsGetRequest request, org.openapis.openapi.models.operations.SymbolUploadsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolUploadsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolUploadsGetResponse res = new org.openapis.openapi.models.operations.SymbolUploadsGetResponse() {{
            symbolUploadsGet200ApplicationJSONObject = null;
            symbolUploadsGet403ApplicationJSONObject = null;
            symbolUploadsGet404ApplicationJSONObject = null;
            symbolUploadsGet500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGet200ApplicationJSON.class);
                res.symbolUploadsGet200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGet403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGet403ApplicationJSON.class);
                res.symbolUploadsGet403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGet404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGet404ApplicationJSON.class);
                res.symbolUploadsGet404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGet500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGet500ApplicationJSON.class);
                res.symbolUploadsGet500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the URL to download the symbol upload
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolUploadsGetLocationResponse symbolUploadsGetLocation(org.openapis.openapi.models.operations.SymbolUploadsGetLocationRequest request, org.openapis.openapi.models.operations.SymbolUploadsGetLocationSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolUploadsGetLocationRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolUploadsGetLocationResponse res = new org.openapis.openapi.models.operations.SymbolUploadsGetLocationResponse() {{
            symbolUploadsGetLocation200ApplicationJSONObject = null;
            symbolUploadsGetLocation403ApplicationJSONObject = null;
            symbolUploadsGetLocation404ApplicationJSONObject = null;
            symbolUploadsGetLocation500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGetLocation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGetLocation200ApplicationJSON.class);
                res.symbolUploadsGetLocation200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGetLocation403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGetLocation403ApplicationJSON.class);
                res.symbolUploadsGetLocation403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGetLocation404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGetLocation404ApplicationJSON.class);
                res.symbolUploadsGetLocation404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsGetLocation500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsGetLocation500ApplicationJSON.class);
                res.symbolUploadsGetLocation500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of all uploads for the specified application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolUploadsListResponse symbolUploadsList(org.openapis.openapi.models.operations.SymbolUploadsListRequest request, org.openapis.openapi.models.operations.SymbolUploadsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolUploadsListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.SymbolUploadsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolUploadsListResponse res = new org.openapis.openapi.models.operations.SymbolUploadsListResponse() {{
            symbolUploadsList200ApplicationJSONObjects = null;
            symbolUploadsList403ApplicationJSONObject = null;
            symbolUploadsList500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsList200ApplicationJSON[].class);
                res.symbolUploadsList200ApplicationJSONObjects = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsList403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsList403ApplicationJSON.class);
                res.symbolUploadsList403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolUploadsList500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolUploadsList500ApplicationJSON.class);
                res.symbolUploadsList500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolsGetResponse symbolsGet(org.openapis.openapi.models.operations.SymbolsGetRequest request, org.openapis.openapi.models.operations.SymbolsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolsGetResponse res = new org.openapis.openapi.models.operations.SymbolsGetResponse() {{
            symbolsGet200ApplicationJSONObject = null;
            symbolsGet403ApplicationJSONObject = null;
            symbolsGet404ApplicationJSONObject = null;
            symbolsGet500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGet200ApplicationJSON.class);
                res.symbolsGet200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGet403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGet403ApplicationJSON.class);
                res.symbolsGet403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGet404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGet404ApplicationJSON.class);
                res.symbolsGet404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGet500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGet500ApplicationJSON.class);
                res.symbolsGet500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the URL to download the symbol
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolsGetLocationResponse symbolsGetLocation(org.openapis.openapi.models.operations.SymbolsGetLocationRequest request, org.openapis.openapi.models.operations.SymbolsGetLocationSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolsGetLocationRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolsGetLocationResponse res = new org.openapis.openapi.models.operations.SymbolsGetLocationResponse() {{
            symbolsGetLocation200ApplicationJSONObject = null;
            symbolsGetLocation403ApplicationJSONObject = null;
            symbolsGetLocation404ApplicationJSONObject = null;
            symbolsGetLocation500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetLocation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetLocation200ApplicationJSON.class);
                res.symbolsGetLocation200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetLocation403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetLocation403ApplicationJSON.class);
                res.symbolsGetLocation403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetLocation404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetLocation404ApplicationJSON.class);
                res.symbolsGetLocation404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetLocation500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetLocation500ApplicationJSON.class);
                res.symbolsGetLocation500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolsGetStatusResponse symbolsGetStatus(org.openapis.openapi.models.operations.SymbolsGetStatusRequest request, org.openapis.openapi.models.operations.SymbolsGetStatusSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolsGetStatusRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolsGetStatusResponse res = new org.openapis.openapi.models.operations.SymbolsGetStatusResponse() {{
            symbolsGetStatus200ApplicationJSONObject = null;
            symbolsGetStatus403ApplicationJSONObject = null;
            symbolsGetStatus404ApplicationJSONObject = null;
            symbolsGetStatus500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetStatus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetStatus200ApplicationJSON.class);
                res.symbolsGetStatus200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetStatus403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetStatus403ApplicationJSON.class);
                res.symbolsGetStatus403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetStatus404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetStatus404ApplicationJSON.class);
                res.symbolsGetStatus404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsGetStatus500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsGetStatus500ApplicationJSON.class);
                res.symbolsGetStatus500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Marks a symbol by id (uuid) as ignored
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolsIgnoreResponse symbolsIgnore(org.openapis.openapi.models.operations.SymbolsIgnoreRequest request, org.openapis.openapi.models.operations.SymbolsIgnoreSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolsIgnoreRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolsIgnoreResponse res = new org.openapis.openapi.models.operations.SymbolsIgnoreResponse() {{
            symbolsIgnore200ApplicationJSONObject = null;
            symbolsIgnore403ApplicationJSONObject = null;
            symbolsIgnore404ApplicationJSONObject = null;
            symbolsIgnore500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsIgnore200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsIgnore200ApplicationJSON.class);
                res.symbolsIgnore200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsIgnore403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsIgnore403ApplicationJSON.class);
                res.symbolsIgnore403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsIgnore404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsIgnore404ApplicationJSON.class);
                res.symbolsIgnore404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsIgnore500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsIgnore500ApplicationJSON.class);
                res.symbolsIgnore500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the list of all symbols for the provided application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SymbolsListResponse symbolsList(org.openapis.openapi.models.operations.SymbolsListRequest request, org.openapis.openapi.models.operations.SymbolsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SymbolsListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/symbols", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SymbolsListResponse res = new org.openapis.openapi.models.operations.SymbolsListResponse() {{
            symbolsList200ApplicationJSONObjects = null;
            symbolsList403ApplicationJSONObject = null;
            symbolsList500ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsList200ApplicationJSON[].class);
                res.symbolsList200ApplicationJSONObjects = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsList403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsList403ApplicationJSON.class);
                res.symbolsList403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SymbolsList500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SymbolsList500ApplicationJSON.class);
                res.symbolsList500ApplicationJSONObject = out;
            }
        }

        return res;
    }
}