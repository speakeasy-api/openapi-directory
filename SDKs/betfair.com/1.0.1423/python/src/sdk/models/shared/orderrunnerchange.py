"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import order as shared_order
from ..shared import strategymatchchange as shared_strategymatchchange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderRunnerChange:
    
    full_image: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullImage'), 'exclude': lambda f: f is None }})  
    hc: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hc'), 'exclude': lambda f: f is None }})
    r"""Handicap - the handicap of the runner (selection) (null if not applicable)"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Selection Id - the id of the runner (selection)"""  
    mb: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mb'), 'exclude': lambda f: f is None }})
    r"""Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)"""  
    ml: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ml'), 'exclude': lambda f: f is None }})
    r"""Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)"""  
    smc: Optional[dict[str, shared_strategymatchchange.StrategyMatchChange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smc'), 'exclude': lambda f: f is None }})
    r"""Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference"""  
    uo: Optional[list[shared_order.Order]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uo'), 'exclude': lambda f: f is None }})
    r"""Unmatched Orders - orders on this runner (selection) that are not fully matched"""  
    