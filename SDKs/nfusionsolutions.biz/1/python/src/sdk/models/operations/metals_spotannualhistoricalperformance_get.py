"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import intervalcollectionresponse as shared_intervalcollectionresponse
from enum import Enum
from typing import Optional

class MetalsSpotAnnualHistoricalPerformanceGETFormatEnum(str, Enum):
    r"""to override content negotiation specify a value of json or xml"""
    JSON = 'json'
    XML = 'xml'

class MetalsSpotAnnualHistoricalPerformanceGETUnitofmeasureEnum(str, Enum):
    r"""unit of meaure, defaults to troy ounces. allowed values are:
    mg=milligram
    g=gram
    kg=kilogram
    gr=grain
    oz=ounce
    toz=troy ounce
    ct=carat
    dwt=pennyweight
    """
    MG = 'mg'
    G = 'g'
    KG = 'kg'
    GR = 'gr'
    OZ = 'oz'
    TOZ = 'toz'
    CT = 'ct'
    DWT = 'dwt'


@dataclasses.dataclass
class MetalsSpotAnnualHistoricalPerformanceGETRequest:
    
    metals: str = dataclasses.field(metadata={'query_param': { 'field_name': 'metals', 'style': 'form', 'explode': True }})
    r"""comma separated list of metals"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'currency', 'style': 'form', 'explode': True }})
    r"""comma separated list of conversion currencies, defaults to USD"""  
    format: Optional[MetalsSpotAnnualHistoricalPerformanceGETFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""to override content negotiation specify a value of json or xml"""  
    unitofmeasure: Optional[MetalsSpotAnnualHistoricalPerformanceGETUnitofmeasureEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unitofmeasure', 'style': 'form', 'explode': True }})
    r"""unit of meaure, defaults to troy ounces. allowed values are:
    mg=milligram
    g=gram
    kg=kilogram
    gr=grain
    oz=ounce
    toz=troy ounce
    ct=carat
    dwt=pennyweight
    """  
    years: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'years', 'style': 'form', 'explode': True }})
    r"""Number of years of history to return. Defaults to 10."""  
    

@dataclasses.dataclass
class MetalsSpotAnnualHistoricalPerformanceGETResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    interval_collection_responses: Optional[list[shared_intervalcollectionresponse.IntervalCollectionResponse]] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    