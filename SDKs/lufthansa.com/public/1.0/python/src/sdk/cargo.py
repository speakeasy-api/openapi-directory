"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Cargo:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cargo_get_route_from_date_product_code_by_origin_and_destination_get(self, request: operations.CargoGetRouteFromDateProductCodeByOriginAndDestinationGetRequest, security: operations.CargoGetRouteFromDateProductCodeByOriginAndDestinationGetSecurity) -> operations.CargoGetRouteFromDateProductCodeByOriginAndDestinationGetResponse:
        r"""Retrieve all flights
        Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CargoGetRouteFromDateProductCodeByOriginAndDestinationGetRequest, base_url, '/cargo/getRoute/{origin}-{destination}/{fromDate}/{productCode}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CargoGetRouteFromDateProductCodeByOriginAndDestinationGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cargo_get_route_from_date_product_code_by_origin_and_destination_get_200_application_json_object = out

        return res

    def cargo_shipment_tracking_by_awb_prefix_and_awb_number_get(self, request: operations.CargoShipmentTrackingByAWBPrefixAndAWBNumberGetRequest, security: operations.CargoShipmentTrackingByAWBPrefixAndAWBNumberGetSecurity) -> operations.CargoShipmentTrackingByAWBPrefixAndAWBNumberGetResponse:
        r"""Shipment Tracking
        With this tracking service you can easily retrieve your shipment or flight status information.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CargoShipmentTrackingByAWBPrefixAndAWBNumberGetRequest, base_url, '/cargo/shipmentTracking/{aWBPrefix}-{aWBNumber}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CargoShipmentTrackingByAWBPrefixAndAWBNumberGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cargo_shipment_tracking_by_awb_prefix_and_awb_number_get_200_application_json_object = out

        return res

    