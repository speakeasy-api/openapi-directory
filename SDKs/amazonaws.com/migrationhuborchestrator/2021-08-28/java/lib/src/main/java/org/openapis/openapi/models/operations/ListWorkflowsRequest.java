/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ListWorkflowsRequest {
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;

    public ListWorkflowsRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;

    public ListWorkflowsRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;

    public ListWorkflowsRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;

    public ListWorkflowsRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;

    public ListWorkflowsRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;

    public ListWorkflowsRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;

    public ListWorkflowsRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
    /**
     * The name of the application configured in Application Discovery Service.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=adsApplicationConfigurationName")
    public String adsApplicationConfigurationName;

    public ListWorkflowsRequest withAdsApplicationConfigurationName(String adsApplicationConfigurationName) {
        this.adsApplicationConfigurationName = adsApplicationConfigurationName;
        return this;
    }
    
    /**
     * The maximum number of results that can be returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;

    public ListWorkflowsRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * The name of the migration workflow.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;

    public ListWorkflowsRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The pagination token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nextToken")
    public String nextToken;

    public ListWorkflowsRequest withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * The status of the migration workflow.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    public ListWorkflowsStatusEnum status;

    public ListWorkflowsRequest withStatus(ListWorkflowsStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The ID of the template.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=templateId")
    public String templateId;

    public ListWorkflowsRequest withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    public ListWorkflowsRequest(){}
}
