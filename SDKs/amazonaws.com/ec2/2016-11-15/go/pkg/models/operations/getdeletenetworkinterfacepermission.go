// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteNetworkInterfacePermissionActionEnum
type GETDeleteNetworkInterfacePermissionActionEnum string

const (
	GETDeleteNetworkInterfacePermissionActionEnumDeleteNetworkInterfacePermission GETDeleteNetworkInterfacePermissionActionEnum = "DeleteNetworkInterfacePermission"
)

func (e *GETDeleteNetworkInterfacePermissionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteNetworkInterfacePermission":
		*e = GETDeleteNetworkInterfacePermissionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteNetworkInterfacePermissionActionEnum: %s", s)
	}
}

// GETDeleteNetworkInterfacePermissionVersionEnum
type GETDeleteNetworkInterfacePermissionVersionEnum string

const (
	GETDeleteNetworkInterfacePermissionVersionEnumTwoThousandAndSixteen1115 GETDeleteNetworkInterfacePermissionVersionEnum = "2016-11-15"
)

func (e *GETDeleteNetworkInterfacePermissionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeleteNetworkInterfacePermissionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteNetworkInterfacePermissionVersionEnum: %s", s)
	}
}

type GETDeleteNetworkInterfacePermissionQueryParams struct {
	Action GETDeleteNetworkInterfacePermissionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// Specify <code>true</code> to remove the permission even if the network interface is attached to an instance.
	Force *bool `queryParam:"style=form,explode=true,name=Force"`
	// The ID of the network interface permission.
	NetworkInterfacePermissionID string                                         `queryParam:"style=form,explode=true,name=NetworkInterfacePermissionId"`
	Version                      GETDeleteNetworkInterfacePermissionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteNetworkInterfacePermissionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteNetworkInterfacePermissionRequest struct {
	QueryParams GETDeleteNetworkInterfacePermissionQueryParams
	Headers     GETDeleteNetworkInterfacePermissionHeaders
}

type GETDeleteNetworkInterfacePermissionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
