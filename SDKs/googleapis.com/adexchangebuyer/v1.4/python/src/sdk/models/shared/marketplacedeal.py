"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contactinformation as shared_contactinformation
from ..shared import dealservingmetadata as shared_dealservingmetadata
from ..shared import dealterms as shared_dealterms
from ..shared import deliverycontrol as shared_deliverycontrol
from ..shared import privatedata as shared_privatedata
from ..shared import sharedtargeting as shared_sharedtargeting
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarketplaceDeal:
    r"""A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving."""
    
    buyer_private_data: Optional[shared_privatedata.PrivateData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyerPrivateData'), 'exclude': lambda f: f is None }})  
    creation_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTimeMs'), 'exclude': lambda f: f is None }})
    r"""The time (ms since epoch) of the deal creation. (readonly)"""  
    creative_pre_approval_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativePreApprovalPolicy'), 'exclude': lambda f: f is None }})
    r"""Specifies the creative pre-approval policy (buyer-readonly)"""  
    creative_safe_frame_compatibility: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeSafeFrameCompatibility'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the creative is safeFrame compatible (buyer-readonly)"""  
    deal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealId'), 'exclude': lambda f: f is None }})
    r"""A unique deal-id for the deal (readonly)."""  
    deal_serving_metadata: Optional[shared_dealservingmetadata.DealServingMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealServingMetadata'), 'exclude': lambda f: f is None }})  
    delivery_control: Optional[shared_deliverycontrol.DeliveryControl] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryControl'), 'exclude': lambda f: f is None }})  
    external_deal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalDealId'), 'exclude': lambda f: f is None }})
    r"""The external deal id assigned to this deal once the deal is finalized. This is the deal-id that shows up in serving/reporting etc. (readonly)"""  
    flight_end_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightEndTimeMs'), 'exclude': lambda f: f is None }})
    r"""Proposed flight end time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)"""  
    flight_start_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightStartTimeMs'), 'exclude': lambda f: f is None }})
    r"""Proposed flight start time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)"""  
    inventory_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventoryDescription'), 'exclude': lambda f: f is None }})
    r"""Description for the deal terms. (buyer-readonly)"""  
    is_rfp_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRfpTemplate'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the current deal is a RFP template. RFP template is created by buyer and not based on seller created products."""  
    is_setup_complete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSetupComplete'), 'exclude': lambda f: f is None }})
    r"""True, if the buyside inventory setup is complete for this deal. (readonly, except via OrderSetupCompleted action)"""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"adexchangebuyer#marketplaceDeal\\"."""  
    last_update_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdateTimeMs'), 'exclude': lambda f: f is None }})
    r"""The time (ms since epoch) when the deal was last updated. (readonly)"""  
    makegood_requested_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('makegoodRequestedReason'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the deal. (updatable)"""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""The product-id from which this deal was created. (readonly, except on create)"""  
    product_revision_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productRevisionNumber'), 'exclude': lambda f: f is None }})
    r"""The revision number of the product that the deal was created from (readonly, except on create)"""  
    programmatic_creative_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('programmaticCreativeSource'), 'exclude': lambda f: f is None }})
    r"""Specifies the creative source for programmatic deals, PUBLISHER means creative is provided by seller and ADVERTISR means creative is provided by buyer. (buyer-readonly)"""  
    proposal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proposalId'), 'exclude': lambda f: f is None }})  
    seller_contacts: Optional[list[shared_contactinformation.ContactInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerContacts'), 'exclude': lambda f: f is None }})
    r"""Optional Seller contact information for the deal (buyer-readonly)"""  
    shared_targetings: Optional[list[shared_sharedtargeting.SharedTargeting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedTargetings'), 'exclude': lambda f: f is None }})
    r"""The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together. (updatable)"""  
    syndication_product: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syndicationProduct'), 'exclude': lambda f: f is None }})
    r"""The syndication product associated with the deal. (readonly, except on create)"""  
    terms: Optional[shared_dealterms.DealTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terms'), 'exclude': lambda f: f is None }})  
    web_property_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webPropertyCode'), 'exclude': lambda f: f is None }})  
    