"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Forms:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def forms_forms_batch_update(self, request: operations.FormsFormsBatchUpdateRequest, security: operations.FormsFormsBatchUpdateSecurity) -> operations.FormsFormsBatchUpdateResponse:
        r"""Change the form with a batch of updates."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsBatchUpdateRequest, base_url, '/v1/forms/{formId}:batchUpdate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_update_form_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FormsFormsBatchUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsBatchUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchUpdateFormResponse])
                res.batch_update_form_response = out

        return res

    def forms_forms_create(self, request: operations.FormsFormsCreateRequest, security: operations.FormsFormsCreateSecurity) -> operations.FormsFormsCreateResponse:
        r"""Create a new form using the title given in the provided form message in the request. *Important:* Only the form.info.title and form.info.document_title fields are copied to the new form. All other fields including the form description, items and settings are disallowed. To create a new form and add items, you must first call forms.create to create an empty form with a title and (optional) document title, and then call forms.update to add the items."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/forms'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "form_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FormsFormsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Form])
                res.form = out

        return res

    def forms_forms_get(self, request: operations.FormsFormsGetRequest, security: operations.FormsFormsGetSecurity) -> operations.FormsFormsGetResponse:
        r"""Get a form."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsGetRequest, base_url, '/v1/forms/{formId}', request)
        
        query_params = utils.get_query_params(operations.FormsFormsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Form])
                res.form = out

        return res

    def forms_forms_responses_get(self, request: operations.FormsFormsResponsesGetRequest, security: operations.FormsFormsResponsesGetSecurity) -> operations.FormsFormsResponsesGetResponse:
        r"""Get one response from the form."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsResponsesGetRequest, base_url, '/v1/forms/{formId}/responses/{responseId}', request)
        
        query_params = utils.get_query_params(operations.FormsFormsResponsesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsResponsesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FormResponse])
                res.form_response = out

        return res

    def forms_forms_responses_list(self, request: operations.FormsFormsResponsesListRequest, security: operations.FormsFormsResponsesListSecurity) -> operations.FormsFormsResponsesListResponse:
        r"""List a form's responses."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsResponsesListRequest, base_url, '/v1/forms/{formId}/responses', request)
        
        query_params = utils.get_query_params(operations.FormsFormsResponsesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsResponsesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFormResponsesResponse])
                res.list_form_responses_response = out

        return res

    def forms_forms_watches_create(self, request: operations.FormsFormsWatchesCreateRequest, security: operations.FormsFormsWatchesCreateSecurity) -> operations.FormsFormsWatchesCreateResponse:
        r"""Create a new watch. If a watch ID is provided, it must be unused. For each invoking project, the per form limit is one watch per Watch.EventType. A watch expires seven days after it is created (see Watch.expire_time)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsWatchesCreateRequest, base_url, '/v1/forms/{formId}/watches', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_watch_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FormsFormsWatchesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsWatchesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Watch])
                res.watch = out

        return res

    def forms_forms_watches_delete(self, request: operations.FormsFormsWatchesDeleteRequest, security: operations.FormsFormsWatchesDeleteSecurity) -> operations.FormsFormsWatchesDeleteResponse:
        r"""Delete a watch."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsWatchesDeleteRequest, base_url, '/v1/forms/{formId}/watches/{watchId}', request)
        
        query_params = utils.get_query_params(operations.FormsFormsWatchesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsWatchesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def forms_forms_watches_list(self, request: operations.FormsFormsWatchesListRequest, security: operations.FormsFormsWatchesListSecurity) -> operations.FormsFormsWatchesListResponse:
        r"""Return a list of the watches owned by the invoking project. The maximum number of watches is two: For each invoker, the limit is one for each event type per form."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsWatchesListRequest, base_url, '/v1/forms/{formId}/watches', request)
        
        query_params = utils.get_query_params(operations.FormsFormsWatchesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsWatchesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWatchesResponse])
                res.list_watches_response = out

        return res

    def forms_forms_watches_renew(self, request: operations.FormsFormsWatchesRenewRequest, security: operations.FormsFormsWatchesRenewSecurity) -> operations.FormsFormsWatchesRenewResponse:
        r"""Renew an existing watch for seven days. The state of the watch after renewal is `ACTIVE`, and the `expire_time` is seven days from the renewal. Renewing a watch in an error state (e.g. `SUSPENDED`) succeeds if the error is no longer present, but fail otherwise. After a watch has expired, RenewWatch returns `NOT_FOUND`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FormsFormsWatchesRenewRequest, base_url, '/v1/forms/{formId}/watches/{watchId}:renew', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FormsFormsWatchesRenewRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FormsFormsWatchesRenewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Watch])
                res.watch = out

        return res

    