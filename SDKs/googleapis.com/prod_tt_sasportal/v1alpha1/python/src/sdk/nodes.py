"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Nodes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def prod_tt_sasportal_nodes_devices_sign_device(self, request: operations.ProdTtSasportalNodesDevicesSignDeviceRequest, security: operations.ProdTtSasportalNodesDevicesSignDeviceSecurity) -> operations.ProdTtSasportalNodesDevicesSignDeviceResponse:
        r"""Signs a device."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesDevicesSignDeviceRequest, base_url, '/v1alpha1/{name}:signDevice', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_sign_device_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesDevicesSignDeviceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesDevicesSignDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sas_portal_empty = out

        return res

    def prod_tt_sasportal_nodes_devices_update_signed(self, request: operations.ProdTtSasportalNodesDevicesUpdateSignedRequest, security: operations.ProdTtSasportalNodesDevicesUpdateSignedSecurity) -> operations.ProdTtSasportalNodesDevicesUpdateSignedResponse:
        r"""Updates a signed device."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesDevicesUpdateSignedRequest, base_url, '/v1alpha1/{name}:updateSigned', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_update_signed_device_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesDevicesUpdateSignedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesDevicesUpdateSignedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDevice])
                res.sas_portal_device = out

        return res

    def prod_tt_sasportal_nodes_nodes_delete(self, request: operations.ProdTtSasportalNodesNodesDeleteRequest, security: operations.ProdTtSasportalNodesNodesDeleteSecurity) -> operations.ProdTtSasportalNodesNodesDeleteResponse:
        r"""Deletes a node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesDeleteRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sas_portal_empty = out

        return res

    def prod_tt_sasportal_nodes_nodes_deployments_create(self, request: operations.ProdTtSasportalNodesNodesDeploymentsCreateRequest, security: operations.ProdTtSasportalNodesNodesDeploymentsCreateSecurity) -> operations.ProdTtSasportalNodesNodesDeploymentsCreateResponse:
        r"""Creates a new deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesDeploymentsCreateRequest, base_url, '/v1alpha1/{parent}/deployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_deployment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesDeploymentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesDeploymentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDeployment])
                res.sas_portal_deployment = out

        return res

    def prod_tt_sasportal_nodes_nodes_deployments_list(self, request: operations.ProdTtSasportalNodesNodesDeploymentsListRequest, security: operations.ProdTtSasportalNodesNodesDeploymentsListSecurity) -> operations.ProdTtSasportalNodesNodesDeploymentsListResponse:
        r"""Lists deployments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesDeploymentsListRequest, base_url, '/v1alpha1/{parent}/deployments', request)
        
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesDeploymentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesDeploymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalListDeploymentsResponse])
                res.sas_portal_list_deployments_response = out

        return res

    def prod_tt_sasportal_nodes_nodes_devices_create(self, request: operations.ProdTtSasportalNodesNodesDevicesCreateRequest, security: operations.ProdTtSasportalNodesNodesDevicesCreateSecurity) -> operations.ProdTtSasportalNodesNodesDevicesCreateResponse:
        r"""Creates a device under a node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesDevicesCreateRequest, base_url, '/v1alpha1/{parent}/devices', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_device_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesDevicesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesDevicesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDevice])
                res.sas_portal_device = out

        return res

    def prod_tt_sasportal_nodes_nodes_devices_create_signed(self, request: operations.ProdTtSasportalNodesNodesDevicesCreateSignedRequest, security: operations.ProdTtSasportalNodesNodesDevicesCreateSignedSecurity) -> operations.ProdTtSasportalNodesNodesDevicesCreateSignedResponse:
        r"""Creates a signed device under a node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesDevicesCreateSignedRequest, base_url, '/v1alpha1/{parent}/devices:createSigned', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_create_signed_device_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesDevicesCreateSignedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesDevicesCreateSignedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDevice])
                res.sas_portal_device = out

        return res

    def prod_tt_sasportal_nodes_nodes_devices_list(self, request: operations.ProdTtSasportalNodesNodesDevicesListRequest, security: operations.ProdTtSasportalNodesNodesDevicesListSecurity) -> operations.ProdTtSasportalNodesNodesDevicesListResponse:
        r"""Lists devices under a node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesDevicesListRequest, base_url, '/v1alpha1/{parent}/devices', request)
        
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesDevicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesDevicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalListDevicesResponse])
                res.sas_portal_list_devices_response = out

        return res

    def prod_tt_sasportal_nodes_nodes_get(self, request: operations.ProdTtSasportalNodesNodesGetRequest, security: operations.ProdTtSasportalNodesNodesGetSecurity) -> operations.ProdTtSasportalNodesNodesGetResponse:
        r"""Returns a requested node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesGetRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalNode])
                res.sas_portal_node = out

        return res

    def prod_tt_sasportal_nodes_nodes_move(self, request: operations.ProdTtSasportalNodesNodesMoveRequest, security: operations.ProdTtSasportalNodesNodesMoveSecurity) -> operations.ProdTtSasportalNodesNodesMoveResponse:
        r"""Moves a node under another node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesMoveRequest, base_url, '/v1alpha1/{name}:move', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_move_node_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesMoveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesMoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalOperation])
                res.sas_portal_operation = out

        return res

    def prod_tt_sasportal_nodes_nodes_nodes_create(self, request: operations.ProdTtSasportalNodesNodesNodesCreateRequest, security: operations.ProdTtSasportalNodesNodesNodesCreateSecurity) -> operations.ProdTtSasportalNodesNodesNodesCreateResponse:
        r"""Creates a new node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesNodesCreateRequest, base_url, '/v1alpha1/{parent}/nodes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_node", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesNodesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesNodesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalNode])
                res.sas_portal_node = out

        return res

    def prod_tt_sasportal_nodes_nodes_nodes_list(self, request: operations.ProdTtSasportalNodesNodesNodesListRequest, security: operations.ProdTtSasportalNodesNodesNodesListSecurity) -> operations.ProdTtSasportalNodesNodesNodesListResponse:
        r"""Lists nodes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesNodesListRequest, base_url, '/v1alpha1/{parent}/nodes', request)
        
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesNodesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesNodesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalListNodesResponse])
                res.sas_portal_list_nodes_response = out

        return res

    def prod_tt_sasportal_nodes_nodes_patch(self, request: operations.ProdTtSasportalNodesNodesPatchRequest, security: operations.ProdTtSasportalNodesNodesPatchSecurity) -> operations.ProdTtSasportalNodesNodesPatchResponse:
        r"""Updates an existing node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProdTtSasportalNodesNodesPatchRequest, base_url, '/v1alpha1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_node", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ProdTtSasportalNodesNodesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProdTtSasportalNodesNodesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalNode])
                res.sas_portal_node = out

        return res

    