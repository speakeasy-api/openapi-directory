"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import principal as shared_principal
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InteractionTypeEnum(str, Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    VIEW = 'VIEW'
    EDIT = 'EDIT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Interaction:
    r"""Represents an interaction between a user and an item."""
    
    interaction_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactionTime'), 'exclude': lambda f: f is None }})
    r"""The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded."""  
    principal: Optional[shared_principal.Principal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('principal'), 'exclude': lambda f: f is None }})
    r"""Reference to a user, group, or domain."""  
    type: Optional[InteractionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    