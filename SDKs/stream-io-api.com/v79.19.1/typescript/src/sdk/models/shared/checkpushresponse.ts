/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DeviceErrorInfo } from "./deviceerrorinfo";
import { Expose, Transform } from "class-transformer";

/**
 * Successful response
 */
export class CheckPushResponse extends SpeakeasyBase {
  /**
   * Object with device errors
   */
  @SpeakeasyMetadata({ elemType: DeviceErrorInfo })
  @Expose({ name: "device_errors" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DeviceErrorInfo> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DeviceErrorInfo);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  deviceErrors?: Record<string, DeviceErrorInfo>;

  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration: string;

  /**
   * List of general errors
   */
  @SpeakeasyMetadata()
  @Expose({ name: "general_errors" })
  generalErrors?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "rendered_apn_template" })
  renderedApnTemplate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "rendered_firebase_template" })
  renderedFirebaseTemplate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "rendered_message" })
  renderedMessage?: Record<string, string>;

  /**
   * Don't require existing devices to render templates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skip_devices" })
  skipDevices?: boolean;
}
