// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// StopsStopsForRouteRouteTypeEnum - Number identifying transport mode; values returned via RouteTypes API
type StopsStopsForRouteRouteTypeEnum int

const (
	StopsStopsForRouteRouteTypeEnumZero  StopsStopsForRouteRouteTypeEnum = 0
	StopsStopsForRouteRouteTypeEnumOne   StopsStopsForRouteRouteTypeEnum = 1
	StopsStopsForRouteRouteTypeEnumTwo   StopsStopsForRouteRouteTypeEnum = 2
	StopsStopsForRouteRouteTypeEnumThree StopsStopsForRouteRouteTypeEnum = 3
	StopsStopsForRouteRouteTypeEnumFour  StopsStopsForRouteRouteTypeEnum = 4
)

func (e StopsStopsForRouteRouteTypeEnum) ToPointer() *StopsStopsForRouteRouteTypeEnum {
	return &e
}

func (e *StopsStopsForRouteRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = StopsStopsForRouteRouteTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopsStopsForRouteRouteTypeEnum: %v", v)
	}
}

type StopsStopsForRouteRequest struct {
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.
	DirectionID *int `queryParam:"style=form,explode=true,name=direction_id"`
	// Filter geopaths by date (ISO 8601 UTC format) (default = current date)
	GeopathUtc *time.Time `queryParam:"style=form,explode=true,name=geopath_utc"`
	// Indicates if geopath data will be returned (default = false)
	IncludeGeopath *bool `queryParam:"style=form,explode=true,name=include_geopath"`
	// Identifier of route; values returned by Routes API - v3/routes
	RouteID int `pathParam:"style=simple,explode=false,name=route_id"`
	// Number identifying transport mode; values returned via RouteTypes API
	RouteType StopsStopsForRouteRouteTypeEnum `pathParam:"style=simple,explode=false,name=route_type"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Indicates if stop disruption information will be returned (default = false)
	StopDisruptions *bool `queryParam:"style=form,explode=true,name=stop_disruptions"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type StopsStopsForRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
	// All stops on the specified route.
	V3StopsOnRouteResponse *shared.V3StopsOnRouteResponse
}
