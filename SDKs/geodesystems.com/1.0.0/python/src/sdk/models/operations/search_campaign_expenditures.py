"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class SearchCampaignExpendituresRequest:
    
    changedate_from: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'changedate.from', 'style': 'form', 'explode': True }})
    r"""Archive change date from"""  
    changedate_to: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'changedate.to', 'style': 'form', 'explode': True }})
    r"""Archive change date to"""  
    createdate_from: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdate.from', 'style': 'form', 'explode': True }})
    r"""Archive create date from"""  
    createdate_to: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdate.to', 'style': 'form', 'explode': True }})
    r"""Archive create date to"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description', 'style': 'form', 'explode': True }})
    r"""Search description"""  
    filesuffix: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filesuffix', 'style': 'form', 'explode': True }})
    r"""File suffix"""  
    fromdate: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fromdate', 'style': 'form', 'explode': True }})
    r"""From date"""  
    group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group', 'style': 'form', 'explode': True }})
    r"""Parent entry"""  
    max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max', 'style': 'form', 'explode': True }})
    r"""Max number of results"""  
    maxlatitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxlatitude', 'style': 'form', 'explode': True }})
    r"""Northern bounds of search"""  
    maxlongitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxlongitude', 'style': 'form', 'explode': True }})
    r"""Eastern bounds of search"""  
    minlatitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minlatitude', 'style': 'form', 'explode': True }})
    r"""Southern bounds of search"""  
    minlongitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minlongitude', 'style': 'form', 'explode': True }})
    r"""Western bounds of search"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Search name"""  
    search_db_campaign_expenditures_amount: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.amount', 'style': 'form', 'explode': True }})
    r"""Amount"""  
    search_db_campaign_expenditures_city: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.city', 'style': 'form', 'explode': True }})
    r"""City"""  
    search_db_campaign_expenditures_committee: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.committee', 'style': 'form', 'explode': True }})
    r"""Committee"""  
    search_db_campaign_expenditures_location: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.location', 'style': 'form', 'explode': True }})
    r"""Location"""  
    search_db_campaign_expenditures_memo_text: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.memo_text', 'style': 'form', 'explode': True }})
    r"""Memo Text"""  
    search_db_campaign_expenditures_party: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.party', 'style': 'form', 'explode': True }})
    r"""Party"""  
    search_db_campaign_expenditures_purpose: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.purpose', 'style': 'form', 'explode': True }})
    r"""Purpose"""  
    search_db_campaign_expenditures_recipient: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.recipient', 'style': 'form', 'explode': True }})
    r"""Recipient"""  
    search_db_campaign_expenditures_state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.state', 'style': 'form', 'explode': True }})
    r"""State"""  
    search_db_campaign_expenditures_transaction_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.transaction_date', 'style': 'form', 'explode': True }})
    r"""Transaction Date"""  
    search_db_campaign_expenditures_zip_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_campaign_expenditures.zip_code', 'style': 'form', 'explode': True }})
    r"""Zip Code"""  
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""Number to skip"""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'text', 'style': 'form', 'explode': True }})
    r"""Search text"""  
    todate: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'todate', 'style': 'form', 'explode': True }})
    r"""To date"""  
    

@dataclasses.dataclass
class SearchCampaignExpendituresResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    