<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Mock 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete Service
     * 
     * Delete a Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse
     */
	public function getService(
        \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services/{id}', \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getService200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Services and APIs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServicesResponse
     */
	public function getServices(
        \OpenAPI\OpenAPI\Models\Operations\GetServicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetServicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetServicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Services counter
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServicesCounterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServicesCounterResponse
     */
	public function getServicesCounter(
        \OpenAPI\OpenAPI\Models\Operations\GetServicesCounterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServicesCounterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services/count');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServicesCounterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->counter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Counter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the already used labels for Services
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServicesLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServicesLabelsResponse
     */
	public function getServicesLabels(
        \OpenAPI\OpenAPI\Models\Operations\GetServicesLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServicesLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services/labels');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServicesLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labelsMap = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, array<string>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Override Service Operation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationResponse
     */
	public function overrideServiceOperation(
        \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services/{id}/operation', \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "operationOverrideDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OverrideServiceOperationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Search for Services and APIs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchServicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchServicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchServicesResponse
     */
	public function searchServices(
        \OpenAPI\OpenAPI\Models\Operations\SearchServicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchServicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchServicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->services = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Service>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Service Metadata
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataResponse
     */
	public function updateServiceMetadata(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/services/{id}/metadata', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "metadata", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Export a snapshot
     * 
     * Export a repostiory snapshot with requested services
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSnapshotResponse
     */
	public function exportSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\ExportSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/export');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->exportSnapshot200ApplicationJSONBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Import a snapshot
     * 
     * Import a repository snapshot previsouly exported into Microcks
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SnapshotUpload $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportSnapshotResponse
     */
	public function importSnapshot(
        \OpenAPI\OpenAPI\Models\Shared\SnapshotUpload $request,
        \OpenAPI\OpenAPI\Models\Operations\ImportSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/import');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
}