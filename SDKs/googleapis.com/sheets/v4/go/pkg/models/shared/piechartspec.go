// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PieChartSpecLegendPositionEnum - Where the legend of the pie chart should be drawn.
type PieChartSpecLegendPositionEnum string

const (
	PieChartSpecLegendPositionEnumPieChartLegendPositionUnspecified PieChartSpecLegendPositionEnum = "PIE_CHART_LEGEND_POSITION_UNSPECIFIED"
	PieChartSpecLegendPositionEnumBottomLegend                      PieChartSpecLegendPositionEnum = "BOTTOM_LEGEND"
	PieChartSpecLegendPositionEnumLeftLegend                        PieChartSpecLegendPositionEnum = "LEFT_LEGEND"
	PieChartSpecLegendPositionEnumRightLegend                       PieChartSpecLegendPositionEnum = "RIGHT_LEGEND"
	PieChartSpecLegendPositionEnumTopLegend                         PieChartSpecLegendPositionEnum = "TOP_LEGEND"
	PieChartSpecLegendPositionEnumNoLegend                          PieChartSpecLegendPositionEnum = "NO_LEGEND"
	PieChartSpecLegendPositionEnumLabeledLegend                     PieChartSpecLegendPositionEnum = "LABELED_LEGEND"
)

func (e PieChartSpecLegendPositionEnum) ToPointer() *PieChartSpecLegendPositionEnum {
	return &e
}

func (e *PieChartSpecLegendPositionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PIE_CHART_LEGEND_POSITION_UNSPECIFIED":
		fallthrough
	case "BOTTOM_LEGEND":
		fallthrough
	case "LEFT_LEGEND":
		fallthrough
	case "RIGHT_LEGEND":
		fallthrough
	case "TOP_LEGEND":
		fallthrough
	case "NO_LEGEND":
		fallthrough
	case "LABELED_LEGEND":
		*e = PieChartSpecLegendPositionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PieChartSpecLegendPositionEnum: %v", v)
	}
}

// PieChartSpec - A pie chart.
type PieChartSpec struct {
	// The data included in a domain or series.
	Domain *ChartData `json:"domain,omitempty"`
	// Where the legend of the pie chart should be drawn.
	LegendPosition *PieChartSpecLegendPositionEnum `json:"legendPosition,omitempty"`
	// The size of the hole in the pie chart.
	PieHole *float64 `json:"pieHole,omitempty"`
	// The data included in a domain or series.
	Series *ChartData `json:"series,omitempty"`
	// True if the pie is three dimensional.
	ThreeDimensional *bool `json:"threeDimensional,omitempty"`
}
