/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ListDigitalSignageContentRequest extends SpeakeasyBase {
  /**
   * Unique identifier of the folder where the content is located. Provide this field if you would like to filter the response by contents that are only available in a specific folder.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=folder_id",
  })
  folderId?: string;

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * Specify the type of digital signane resource. The value can be one of the following:
   *
   * @remarks
   * * `content`: Returns information about content files.
   * * `folder`: Returns information about the folder where the content files are located.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: string;
}

export class ListDigitalSignageContent200ApplicationXMLContents extends SpeakeasyBase {
  /**
   * Unique identifier of the content or the folder.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Name of the content file or the folder.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * List returned.
 */
export class ListDigitalSignageContent200ApplicationXML extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ListDigitalSignageContent200ApplicationXMLContents,
  })
  contents?: ListDigitalSignageContent200ApplicationXMLContents[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  pageSize?: number;
}

export class ListDigitalSignageContent200ApplicationJSONContents extends SpeakeasyBase {
  /**
   * Unique identifier of the content or the folder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the content file or the folder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * List returned.
 */
export class ListDigitalSignageContent200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ListDigitalSignageContent200ApplicationJSONContents,
  })
  @Expose({ name: "contents" })
  @Type(() => ListDigitalSignageContent200ApplicationJSONContents)
  contents?: ListDigitalSignageContent200ApplicationJSONContents[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;
}

export class ListDigitalSignageContentResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK**<br>
   *
   * @remarks
   * List returned.
   */
  @SpeakeasyMetadata()
  listDigitalSignageContent200ApplicationJSONObject?: ListDigitalSignageContent200ApplicationJSON;
}
