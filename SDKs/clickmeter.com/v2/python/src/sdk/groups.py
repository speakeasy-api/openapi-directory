"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Groups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def groups_count(self, request: operations.GroupsCountRequest) -> operations.GroupsCountResponse:
        r"""Count the groups associated to the user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups/count'
        
        query_params = utils.get_query_params(operations.GroupsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def groups_delete(self, request: operations.GroupsDeleteRequest) -> operations.GroupsDeleteResponse:
        r"""Delete group specified by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsDeleteRequest, base_url, '/groups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def groups_get(self, request: operations.GroupsGetRequest) -> operations.GroupsGetResponse:
        r"""List of all the groups associated to the user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups'
        
        query_params = utils.get_query_params(operations.GroupsGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def groups_get_datapoints(self, request: operations.GroupsGetDatapointsRequest) -> operations.GroupsGetDatapointsResponse:
        r"""List of all the datapoints associated to the user in this group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetDatapointsRequest, base_url, '/groups/{id}/datapoints', request)
        
        query_params = utils.get_query_params(operations.GroupsGetDatapointsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetDatapointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def groups_get_datapoints_count(self, request: operations.GroupsGetDatapointsCountRequest) -> operations.GroupsGetDatapointsCountResponse:
        r"""Count the datapoints associated to the user in this group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetDatapointsCountRequest, base_url, '/groups/{id}/datapoints/count', request)
        
        query_params = utils.get_query_params(operations.GroupsGetDatapointsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetDatapointsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def groups_get_datapoints_summary(self, request: operations.GroupsGetDatapointsSummaryRequest) -> operations.GroupsGetDatapointsSummaryResponse:
        r"""Retrieve statistics about a subset of datapoints for a timeframe with datapoints data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetDatapointsSummaryRequest, base_url, '/groups/{id}/aggregated/summary', request)
        
        query_params = utils.get_query_params(operations.GroupsGetDatapointsSummaryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetDatapointsSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedSummaryResult])
                res.api_core_dto_aggregated_aggregated_summary_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def groups_get_hits(self, request: operations.GroupsGetHitsRequest) -> operations.GroupsGetHitsResponse:
        r"""Retrieve the list of events related to this group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetHitsRequest, base_url, '/groups/{id}/hits', request)
        
        query_params = utils.get_query_params(operations.GroupsGetHitsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetHitsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoClickStreamHitListPage])
                res.api_core_dto_click_stream_hit_list_page = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoClickStreamHitListPage])
                res.api_core_dto_click_stream_hit_list_page = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def groups_get_statistics_aggregated_single(self, request: operations.GroupsGetStatisticsAggregatedSingleRequest) -> operations.GroupsGetStatisticsAggregatedSingleResponse:
        r"""Retrieve statistics about this customer for a timeframe by groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups/aggregated'
        
        query_params = utils.get_query_params(operations.GroupsGetStatisticsAggregatedSingleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetStatisticsAggregatedSingleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def groups_get_statistics_all_list(self, request: operations.GroupsGetStatisticsAllListRequest) -> operations.GroupsGetStatisticsAllListResponse:
        r"""Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups/aggregated/list'
        
        query_params = utils.get_query_params(operations.GroupsGetStatisticsAllListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetStatisticsAllListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def groups_get_statistics_list(self, request: operations.GroupsGetStatisticsListRequest) -> operations.GroupsGetStatisticsListResponse:
        r"""Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetStatisticsListRequest, base_url, '/groups/{id}/aggregated/list', request)
        
        query_params = utils.get_query_params(operations.GroupsGetStatisticsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetStatisticsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def groups_get_statistics_single(self, request: operations.GroupsGetStatisticsSingleRequest) -> operations.GroupsGetStatisticsSingleResponse:
        r"""Retrieve statistics about this group for a timeframe"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsGetStatisticsSingleRequest, base_url, '/groups/{id}/aggregated', request)
        
        query_params = utils.get_query_params(operations.GroupsGetStatisticsSingleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsGetStatisticsSingleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def groups_patch_favourite(self, request: operations.GroupsPatchFavouriteRequest) -> operations.GroupsPatchFavouriteResponse:
        r"""Fast switch the \\"favourite\\" field of a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsPatchFavouriteRequest, base_url, '/groups/{id}/favourite', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsPatchFavouriteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def groups_patch_notes_form(self, request: operations.GroupsPatchNotesFormRequest) -> operations.GroupsPatchNotesFormResponse:
        r"""Fast patch the \\"notes\\" field of a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsPatchNotesFormRequest, base_url, '/groups/{id}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_generic_text_patch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsPatchNotesFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def groups_patch_notes_json(self, request: operations.GroupsPatchNotesJSONRequest) -> operations.GroupsPatchNotesJSONResponse:
        r"""Fast patch the \\"notes\\" field of a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsPatchNotesJSONRequest, base_url, '/groups/{id}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_generic_text_patch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsPatchNotesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def groups_patch_notes_raw(self, request: operations.GroupsPatchNotesRawRequest) -> operations.GroupsPatchNotesRawResponse:
        r"""Fast patch the \\"notes\\" field of a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsPatchNotesRawRequest, base_url, '/groups/{id}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsPatchNotesRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def groups_post(self, request: operations.GroupsPostRequest) -> operations.GroupsPostResponse:
        r"""Update a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsPostRequest, base_url, '/groups/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_groups_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def groups_put(self, request: shared.APICoreDtoGroupsGroup) -> operations.GroupsPutResponse:
        r"""Create a group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def groups_put_datapoint(self, request: operations.GroupsPutDatapointRequest) -> operations.GroupsPutDatapointResponse:
        r"""Create a datapoint in this group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GroupsPutDatapointRequest, base_url, '/groups/{id}/datapoints', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_datapoints_datapoint", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GroupsPutDatapointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_groups_id_(self, request: operations.GetGroupsIDRequest) -> operations.GetGroupsIDResponse:
        r"""Get a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupsIDRequest, base_url, '/groups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoGroupsGroup])
                res.api_core_dto_groups_group = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoGroupsGroup])
                res.api_core_dto_groups_group = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    