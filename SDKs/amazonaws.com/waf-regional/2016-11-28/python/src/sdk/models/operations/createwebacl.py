"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createwebaclrequest as shared_createwebaclrequest
from ..shared import createwebaclresponse as shared_createwebaclresponse
from enum import Enum
from typing import Any, Optional

class CreateWebACLXAmzTargetEnum(str, Enum):
    AWSWAF_REGIONAL_20161128_CREATE_WEB_ACL = 'AWSWAF_Regional_20161128.CreateWebACL'


@dataclasses.dataclass
class CreateWebACLRequest:
    
    create_web_acl_request: shared_createwebaclrequest.CreateWebACLRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateWebACLXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateWebACLResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_web_acl_response: Optional[shared_createwebaclresponse.CreateWebACLResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    waf_bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFBadRequestException"""  
    waf_disallowed_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFDisallowedNameException"""  
    waf_internal_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFInternalErrorException"""  
    waf_invalid_account_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFInvalidAccountException"""  
    waf_invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFInvalidParameterException"""  
    waf_limits_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFLimitsExceededException"""  
    waf_stale_data_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFStaleDataException"""  
    waf_tag_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFTagOperationException"""  
    waf_tag_operation_internal_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""WAFTagOperationInternalErrorException"""  
    