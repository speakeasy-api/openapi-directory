<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ServiceGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete Service Group
     * 
     * <p>Use this endpoint to <b>Delete</b> a Service Group object. A valid <b>serviceGroup id</b> is required. The service group is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/servicegroups​/{id}​/recover</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ServicegroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ServicegroupsIdResponse
     */
	public function deleteSetupV1ServicegroupsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ServicegroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ServicegroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/servicegroups/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ServicegroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSetupV1ServicegroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Service Groups
     * 
     * <p>Use this endpoint to return a list of <b>Service Groups</b> for the requested location. If no business location is specified it will default to the Primary Business Location of the company. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the other query parameters to filter the results further.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsResponse
     */
	public function getSetupV1Servicegroups(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/servicegroups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroupListViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceGroupListViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Service Group
     * 
     * <p>Use this endpoint to return a <b>Service Group</b> object. A valid <b>serviceGroup id</b> is required. Find service group id's by using the <i>GET /setup/v1/serviceGroups</i> endpoint.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsIdResponse
     */
	public function getSetupV1ServicegroupsId(
        \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/servicegroups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSetupV1ServicegroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Service Group
     * 
     * <p>Use this endpoint to <b>Create</b> a Service Group. If no locationId is specified in the body, the business location will default to the primary business location. Service groups are used to categorize services. Service groups are optional and only make sense if you have multiple services that will be easier read if categorized. Only the service group Type of 0 is supported by the API. It defaults to 0 if not supplied.</p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ServiceGroupInputModel $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSetupV1ServicegroupsResponse
     */
	public function postSetupV1Servicegroups(
        \OpenAPI\OpenAPI\Models\Shared\ServiceGroupInputModel $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSetupV1ServicegroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/servicegroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSetupV1ServicegroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Service Group
     * 
     * <p>Use this endpoint to <b>Update</b> a Service Group object. A valid <b>serviceGroup id</b> is required. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdResponse
     */
	public function putSetupV1ServicegroupsId(
        \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/servicegroups/{id}', \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceGroupInputModel", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceGroupViewModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Recover Service Group
     * 
     * <p>Use this endpoint to <b>Recover</b> a deleted Service Group. A valid <b>serviceGroup id</b> is required. </p>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRecoverRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRecoverResponse
     */
	public function putSetupV1ServicegroupsIdRecover(
        \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRecoverRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRecoverResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setup/v1/servicegroups/{id}/recover', \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRecoverRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSetupV1ServicegroupsIdRecoverResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroupViewModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceGroupViewModel', 'json');
            }
        }

        return $response;
    }
}