/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
 */
export enum FrequencyCapTimeUnitTypeEnum {
  TimeUnitTypeUnspecified = "TIME_UNIT_TYPE_UNSPECIFIED",
  Minute = "MINUTE",
  Hour = "HOUR",
  Day = "DAY",
  Week = "WEEK",
  Month = "MONTH",
  Lifetime = "LIFETIME",
  Pod = "POD",
  Stream = "STREAM",
}

/**
 * Frequency cap.
 */
export class FrequencyCap extends SpeakeasyBase {
  /**
   * The maximum number of impressions that can be served to a user within the specified time period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxImpressions" })
  maxImpressions?: number;

  /**
   * The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numTimeUnits" })
  numTimeUnits?: number;

  /**
   * The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeUnitType" })
  timeUnitType?: FrequencyCapTimeUnitTypeEnum;
}
