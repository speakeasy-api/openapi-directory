/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StandardSchedulerSettings - Scheduler settings for standard environment.
 */
public class StandardSchedulerSettings {
    /**
     * Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxInstances")
    public Integer maxInstances;

    public StandardSchedulerSettings withMaxInstances(Integer maxInstances) {
        this.maxInstances = maxInstances;
        return this;
    }
    
    /**
     * Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minInstances")
    public Integer minInstances;

    public StandardSchedulerSettings withMinInstances(Integer minInstances) {
        this.minInstances = minInstances;
        return this;
    }
    
    /**
     * Target CPU utilization ratio to maintain when scaling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetCpuUtilization")
    public Double targetCpuUtilization;

    public StandardSchedulerSettings withTargetCpuUtilization(Double targetCpuUtilization) {
        this.targetCpuUtilization = targetCpuUtilization;
        return this;
    }
    
    /**
     * Target throughput utilization ratio to maintain when scaling
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetThroughputUtilization")
    public Double targetThroughputUtilization;

    public StandardSchedulerSettings withTargetThroughputUtilization(Double targetThroughputUtilization) {
        this.targetThroughputUtilization = targetThroughputUtilization;
        return this;
    }
    
    public StandardSchedulerSettings(){}
}
