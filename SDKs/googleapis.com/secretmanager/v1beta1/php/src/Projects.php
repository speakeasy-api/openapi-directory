<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListResponse
     */
	public function secretmanagerProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new SecretVersion containing secret data and attaches it to an existing Secret.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionResponse
     */
	public function secretmanagerProjectsSecretsAddVersion(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}:addVersion', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addSecretVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsAddVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecretVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Secret containing no SecretVersions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateResponse
     */
	public function secretmanagerProjectsSecretsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/secrets', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "secretInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Secret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Secret.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteResponse
     */
	public function secretmanagerProjectsSecretsDelete(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicyResponse
     */
	public function secretmanagerProjectsSecretsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Secrets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListResponse
     */
	public function secretmanagerProjectsSecretsList(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/secrets', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSecretsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSecretsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates metadata of an existing Secret.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchResponse
     */
	public function secretmanagerProjectsSecretsPatch(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "secretInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Secret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicyResponse
     */
	public function secretmanagerProjectsSecretsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsResponse
     */
	public function secretmanagerProjectsSecretsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accesses a SecretVersion. This call returns the secret data. `projects/* /secrets/* /versions/latest` is an alias to the `latest` SecretVersion.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessResponse
     */
	public function secretmanagerProjectsSecretsVersionsAccess(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:access', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsAccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accessSecretVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccessSecretVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroyResponse
     */
	public function secretmanagerProjectsSecretsVersionsDestroy(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:destroy', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDestroyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecretVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableResponse
     */
	public function secretmanagerProjectsSecretsVersionsDisable(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:disable', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecretVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableResponse
     */
	public function secretmanagerProjectsSecretsVersionsEnable(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:enable', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecretVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets metadata for a SecretVersion. `projects/* /secrets/* /versions/latest` is an alias to the `latest` SecretVersion.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetResponse
     */
	public function secretmanagerProjectsSecretsVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecretVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists SecretVersions. This call does not return secret data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListResponse
     */
	public function secretmanagerProjectsSecretsVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretmanagerProjectsSecretsVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSecretVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSecretVersionsResponse', 'json');
            }
        }

        return $response;
    }
}