// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeApplicationsActionEnum
type GETDescribeApplicationsActionEnum string

const (
	GETDescribeApplicationsActionEnumDescribeApplications GETDescribeApplicationsActionEnum = "DescribeApplications"
)

func (e GETDescribeApplicationsActionEnum) ToPointer() *GETDescribeApplicationsActionEnum {
	return &e
}

func (e *GETDescribeApplicationsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeApplications":
		*e = GETDescribeApplicationsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeApplicationsActionEnum: %v", v)
	}
}

// GETDescribeApplicationsVersionEnum
type GETDescribeApplicationsVersionEnum string

const (
	GETDescribeApplicationsVersionEnumTwoThousandAndTen1201 GETDescribeApplicationsVersionEnum = "2010-12-01"
)

func (e GETDescribeApplicationsVersionEnum) ToPointer() *GETDescribeApplicationsVersionEnum {
	return &e
}

func (e *GETDescribeApplicationsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-12-01":
		*e = GETDescribeApplicationsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeApplicationsVersionEnum: %v", v)
	}
}

type GETDescribeApplicationsRequest struct {
	Action GETDescribeApplicationsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names.
	ApplicationNames  []string                           `queryParam:"style=form,explode=true,name=ApplicationNames"`
	Version           GETDescribeApplicationsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeApplicationsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
