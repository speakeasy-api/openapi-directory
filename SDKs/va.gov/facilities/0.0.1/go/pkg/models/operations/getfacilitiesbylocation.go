// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetFacilitiesByLocationSecurity struct {
	Apikey shared.SchemeApikey `security:"scheme,type=apiKey,subtype=header"`
}

// GetFacilitiesByLocationTypeEnum - Optional facility type search filter
type GetFacilitiesByLocationTypeEnum string

const (
	GetFacilitiesByLocationTypeEnumHealth    GetFacilitiesByLocationTypeEnum = "health"
	GetFacilitiesByLocationTypeEnumCemetery  GetFacilitiesByLocationTypeEnum = "cemetery"
	GetFacilitiesByLocationTypeEnumBenefits  GetFacilitiesByLocationTypeEnum = "benefits"
	GetFacilitiesByLocationTypeEnumVetCenter GetFacilitiesByLocationTypeEnum = "vet_center"
)

func (e *GetFacilitiesByLocationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "health":
		fallthrough
	case "cemetery":
		fallthrough
	case "benefits":
		fallthrough
	case "vet_center":
		*e = GetFacilitiesByLocationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFacilitiesByLocationTypeEnum: %s", s)
	}
}

type GetFacilitiesByLocationQueryParams struct {
	// Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system)
	Bbox []float32 `queryParam:"style=form,explode=true,name=bbox[]"`
	// List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location.
	Ids []string `queryParam:"style=form,explode=true,name=ids"`
	// Latitude of point to search for facilities, in WGS84 coordinate reference system.
	Lat *float32 `queryParam:"style=form,explode=true,name=lat"`
	// Longitude of point to search for facilities, in WGS84 coordinate reference system.
	Long *float32 `queryParam:"style=form,explode=true,name=long"`
	// Optional facility mobile search filter
	Mobile *bool `queryParam:"style=form,explode=true,name=mobile"`
	// Page of results to return per paginated response.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Number of results to return per paginated response.
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Optional facility service search filter
	Services []string `queryParam:"style=form,explode=true,name=services[]"`
	// State in which to search for facilities. Except in rare cases, this is two characters.
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Optional facility type search filter
	Type *GetFacilitiesByLocationTypeEnum `queryParam:"style=form,explode=true,name=type"`
	// VISN search of matching facilities.
	Visn *float64 `queryParam:"style=form,explode=true,name=visn"`
	// Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return.
	Zip *string `queryParam:"style=form,explode=true,name=zip"`
}

type GetFacilitiesByLocationRequest struct {
	QueryParams GetFacilitiesByLocationQueryParams
	Security    GetFacilitiesByLocationSecurity
}

type GetFacilitiesByLocationResponse struct {
	// Requested format unacceptable
	APIError    *shared.APIError
	ContentType string
	// Success
	FacilitiesResponse *shared.FacilitiesResponse
	// Missing API token
	GenericError *shared.GenericError
	// Success
	GeoFacilitiesResponse *shared.GeoFacilitiesResponse
	StatusCode            int
	RawResponse           *http.Response
}
