// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EncryptionInfoDataSpaceKeyStateEnum - DRACOON key state
type EncryptionInfoDataSpaceKeyStateEnum string

const (
	EncryptionInfoDataSpaceKeyStateEnumNone      EncryptionInfoDataSpaceKeyStateEnum = "none"
	EncryptionInfoDataSpaceKeyStateEnumAvailable EncryptionInfoDataSpaceKeyStateEnum = "available"
	EncryptionInfoDataSpaceKeyStateEnumPending   EncryptionInfoDataSpaceKeyStateEnum = "pending"
)

func (e *EncryptionInfoDataSpaceKeyStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "available":
		fallthrough
	case "pending":
		*e = EncryptionInfoDataSpaceKeyStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EncryptionInfoDataSpaceKeyStateEnum: %s", s)
	}
}

// EncryptionInfoRoomKeyStateEnum - Room key state
type EncryptionInfoRoomKeyStateEnum string

const (
	EncryptionInfoRoomKeyStateEnumNone      EncryptionInfoRoomKeyStateEnum = "none"
	EncryptionInfoRoomKeyStateEnumAvailable EncryptionInfoRoomKeyStateEnum = "available"
	EncryptionInfoRoomKeyStateEnumPending   EncryptionInfoRoomKeyStateEnum = "pending"
)

func (e *EncryptionInfoRoomKeyStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "available":
		fallthrough
	case "pending":
		*e = EncryptionInfoRoomKeyStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EncryptionInfoRoomKeyStateEnum: %s", s)
	}
}

// EncryptionInfoUserKeyStateEnum - User key state
type EncryptionInfoUserKeyStateEnum string

const (
	EncryptionInfoUserKeyStateEnumNone      EncryptionInfoUserKeyStateEnum = "none"
	EncryptionInfoUserKeyStateEnumAvailable EncryptionInfoUserKeyStateEnum = "available"
	EncryptionInfoUserKeyStateEnumPending   EncryptionInfoUserKeyStateEnum = "pending"
)

func (e *EncryptionInfoUserKeyStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "available":
		fallthrough
	case "pending":
		*e = EncryptionInfoUserKeyStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EncryptionInfoUserKeyStateEnum: %s", s)
	}
}

// EncryptionInfo - Encryption states
type EncryptionInfo struct {
	// DRACOON key state
	DataSpaceKeyState EncryptionInfoDataSpaceKeyStateEnum `json:"dataSpaceKeyState"`
	// Room key state
	RoomKeyState EncryptionInfoRoomKeyStateEnum `json:"roomKeyState"`
	// User key state
	UserKeyState EncryptionInfoUserKeyStateEnum `json:"userKeyState"`
}
