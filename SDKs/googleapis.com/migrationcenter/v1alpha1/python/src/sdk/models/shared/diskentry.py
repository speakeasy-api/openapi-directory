"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import diskpartitionlist as shared_diskpartitionlist
from ..shared import vmwarediskconfig as shared_vmwarediskconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DiskEntry:
    r"""Single disk entry."""
    
    disk_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskLabel'), 'exclude': lambda f: f is None }})
    r"""Disk label."""  
    disk_label_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskLabelType'), 'exclude': lambda f: f is None }})
    r"""Disk label type (e.g. BIOS/GPT)"""  
    hw_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hwAddress'), 'exclude': lambda f: f is None }})
    r"""Disk hardware address (e.g. 0:1 for SCSI)."""  
    interface_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaceType'), 'exclude': lambda f: f is None }})
    r"""Disks interface type (e.g. SATA/SCSI)"""  
    partitions: Optional[shared_diskpartitionlist.DiskPartitionList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partitions'), 'exclude': lambda f: f is None }})
    r"""Disk partition list."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Disk status (e.g. online)."""  
    total_capacity_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCapacityBytes'), 'exclude': lambda f: f is None }})
    r"""Disk capacity."""  
    total_free_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalFreeBytes'), 'exclude': lambda f: f is None }})
    r"""Disk free space."""  
    vmware_config: Optional[shared_vmwarediskconfig.VmwareDiskConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmwareConfig'), 'exclude': lambda f: f is None }})
    r"""VMware disk config details."""  
    