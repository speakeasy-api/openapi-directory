// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CoprgSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CoprgRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// CoprgRequestBodyFormatEnum - The format of the certificate in response.
type CoprgRequestBodyFormatEnum string

const (
	CoprgRequestBodyFormatEnumPdf CoprgRequestBodyFormatEnum = "pdf"
)

func (e CoprgRequestBodyFormatEnum) ToPointer() *CoprgRequestBodyFormatEnum {
	return &e
}

func (e *CoprgRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = CoprgRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CoprgRequestBodyFormatEnum: %v", v)
	}
}

// CoprgRequestBody - Request format
type CoprgRequestBody struct {
	CertificateParameters *CoprgRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CoprgRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Coprg504ApplicationJSONErrorEnum string

const (
	Coprg504ApplicationJSONErrorEnumGatewayTimeout Coprg504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Coprg504ApplicationJSONErrorEnum) ToPointer() *Coprg504ApplicationJSONErrorEnum {
	return &e
}

func (e *Coprg504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Coprg504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg504ApplicationJSONErrorEnum: %v", v)
	}
}

type Coprg504ApplicationJSONErrorDescriptionEnum string

const (
	Coprg504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Coprg504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Coprg504ApplicationJSONErrorDescriptionEnum) ToPointer() *Coprg504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Coprg504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Coprg504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Coprg504ApplicationJSON - Gateway timeout
type Coprg504ApplicationJSON struct {
	Error            *Coprg504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Coprg504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Coprg503ApplicationJSONErrorEnum string

const (
	Coprg503ApplicationJSONErrorEnumServiceUnavailable Coprg503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Coprg503ApplicationJSONErrorEnum) ToPointer() *Coprg503ApplicationJSONErrorEnum {
	return &e
}

func (e *Coprg503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Coprg503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg503ApplicationJSONErrorEnum: %v", v)
	}
}

type Coprg503ApplicationJSONErrorDescriptionEnum string

const (
	Coprg503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Coprg503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Coprg503ApplicationJSONErrorDescriptionEnum) ToPointer() *Coprg503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Coprg503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Coprg503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Coprg503ApplicationJSON - Service unavailable
type Coprg503ApplicationJSON struct {
	Error            *Coprg503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Coprg503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Coprg502ApplicationJSONErrorEnum string

const (
	Coprg502ApplicationJSONErrorEnumBadGatewy Coprg502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Coprg502ApplicationJSONErrorEnum) ToPointer() *Coprg502ApplicationJSONErrorEnum {
	return &e
}

func (e *Coprg502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Coprg502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg502ApplicationJSONErrorEnum: %v", v)
	}
}

type Coprg502ApplicationJSONErrorDescriptionEnum string

const (
	Coprg502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Coprg502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Coprg502ApplicationJSONErrorDescriptionEnum) ToPointer() *Coprg502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Coprg502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Coprg502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Coprg502ApplicationJSON - Bad gateway
type Coprg502ApplicationJSON struct {
	Error            *Coprg502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Coprg502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Coprg500ApplicationJSONErrorEnum string

const (
	Coprg500ApplicationJSONErrorEnumInternalServerError Coprg500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Coprg500ApplicationJSONErrorEnum) ToPointer() *Coprg500ApplicationJSONErrorEnum {
	return &e
}

func (e *Coprg500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Coprg500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg500ApplicationJSONErrorEnum: %v", v)
	}
}

type Coprg500ApplicationJSONErrorDescriptionEnum string

const (
	Coprg500ApplicationJSONErrorDescriptionEnumInternalServerError Coprg500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Coprg500ApplicationJSONErrorDescriptionEnum) ToPointer() *Coprg500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Coprg500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Coprg500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Coprg500ApplicationJSON - Internal server error
type Coprg500ApplicationJSON struct {
	Error            *Coprg500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Coprg500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Coprg404ApplicationJSONErrorEnum string

const (
	Coprg404ApplicationJSONErrorEnumRecordNotFound Coprg404ApplicationJSONErrorEnum = "record_not_found"
	Coprg404ApplicationJSONErrorEnumURLNotFound    Coprg404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Coprg404ApplicationJSONErrorEnum) ToPointer() *Coprg404ApplicationJSONErrorEnum {
	return &e
}

func (e *Coprg404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Coprg404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg404ApplicationJSONErrorEnum: %v", v)
	}
}

type Coprg404ApplicationJSONErrorDescriptionEnum string

const (
	Coprg404ApplicationJSONErrorDescriptionEnumNoRecordFound               Coprg404ApplicationJSONErrorDescriptionEnum = "No record found"
	Coprg404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Coprg404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Coprg404ApplicationJSONErrorDescriptionEnum) ToPointer() *Coprg404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Coprg404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Coprg404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Coprg404ApplicationJSON - No record found
type Coprg404ApplicationJSON struct {
	Error            *Coprg404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Coprg404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Coprg401ApplicationJSONErrorEnum string

const (
	Coprg401ApplicationJSONErrorEnumInvalidAuthentication Coprg401ApplicationJSONErrorEnum = "invalid_authentication"
	Coprg401ApplicationJSONErrorEnumInvalidAuthorization  Coprg401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Coprg401ApplicationJSONErrorEnum) ToPointer() *Coprg401ApplicationJSONErrorEnum {
	return &e
}

func (e *Coprg401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Coprg401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg401ApplicationJSONErrorEnum: %v", v)
	}
}

type Coprg401ApplicationJSONErrorDescriptionEnum string

const (
	Coprg401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Coprg401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Coprg401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Coprg401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Coprg401ApplicationJSONErrorDescriptionEnum) ToPointer() *Coprg401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Coprg401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Coprg401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Coprg401ApplicationJSON - Unauthorized access
type Coprg401ApplicationJSON struct {
	Error            *Coprg401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Coprg401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Coprg400ApplicationJSONErrorEnum string

const (
	Coprg400ApplicationJSONErrorEnumMissingParameter Coprg400ApplicationJSONErrorEnum = "missing_parameter"
	Coprg400ApplicationJSONErrorEnumInvalidParameter Coprg400ApplicationJSONErrorEnum = "invalid_parameter"
	Coprg400ApplicationJSONErrorEnumInvalidFormat    Coprg400ApplicationJSONErrorEnum = "invalid_format"
	Coprg400ApplicationJSONErrorEnumInvalidTxnid     Coprg400ApplicationJSONErrorEnum = "invalid_txnid"
	Coprg400ApplicationJSONErrorEnumInvalidConsentid Coprg400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Coprg400ApplicationJSONErrorEnum) ToPointer() *Coprg400ApplicationJSONErrorEnum {
	return &e
}

func (e *Coprg400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Coprg400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg400ApplicationJSONErrorEnum: %v", v)
	}
}

type Coprg400ApplicationJSONErrorDescriptionEnum string

const (
	Coprg400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Coprg400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Coprg400ApplicationJSONErrorDescriptionEnumBadRequest                              Coprg400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Coprg400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Coprg400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Coprg400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Coprg400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Coprg400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Coprg400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Coprg400ApplicationJSONErrorDescriptionEnum) ToPointer() *Coprg400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Coprg400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Coprg400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Coprg400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Coprg400ApplicationJSON - Bad request
type Coprg400ApplicationJSON struct {
	Error            *Coprg400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Coprg400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CoprgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Coprg400ApplicationJSONObject *Coprg400ApplicationJSON
	// Unauthorized access
	Coprg401ApplicationJSONObject *Coprg401ApplicationJSON
	// No record found
	Coprg404ApplicationJSONObject *Coprg404ApplicationJSON
	// Internal server error
	Coprg500ApplicationJSONObject *Coprg500ApplicationJSON
	// Bad gateway
	Coprg502ApplicationJSONObject *Coprg502ApplicationJSON
	// Service unavailable
	Coprg503ApplicationJSONObject *Coprg503ApplicationJSON
	// Gateway timeout
	Coprg504ApplicationJSONObject *Coprg504ApplicationJSON
}
