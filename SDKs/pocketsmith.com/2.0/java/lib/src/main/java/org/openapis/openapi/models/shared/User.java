/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * User - Success
 */
public class User {
    /**
     * Whether the user wants to see all accounts in their base currency instead of the native account currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("always_show_base_currency")
    public Boolean alwaysShowBaseCurrency;

    public User withAlwaysShowBaseCurrency(Boolean alwaysShowBaseCurrency) {
        this.alwaysShowBaseCurrency = alwaysShowBaseCurrency;
        return this;
    }
    
    /**
     * The user's total number of available accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_accounts")
    public Long availableAccounts;

    public User withAvailableAccounts(Long availableAccounts) {
        this.availableAccounts = availableAccounts;
        return this;
    }
    
    /**
     * The user's total number of available budgets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_budgets")
    public Long availableBudgets;

    public User withAvailableBudgets(Long availableBudgets) {
        this.availableBudgets = availableBudgets;
        return this;
    }
    
    /**
     * The URL to the user's avatar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_url")
    public String avatarUrl;

    public User withAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
        return this;
    }
    
    /**
     * The user's base currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_currency_code")
    public String baseCurrencyCode;

    public User withBaseCurrencyCode(String baseCurrencyCode) {
        this.baseCurrencyCode = baseCurrencyCode;
        return this;
    }
    
    /**
     * Whether the user has opted in to beta features.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beta_user")
    public Boolean betaUser;

    public User withBetaUser(Boolean betaUser) {
        this.betaUser = betaUser;
        return this;
    }
    
    /**
     * When the user signed up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public User withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The user's email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public User withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Whether the user's forecast recalculation should be deferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forecast_defer_recalculate")
    public Boolean forecastDeferRecalculate;

    public User withForecastDeferRecalculate(Boolean forecastDeferRecalculate) {
        this.forecastDeferRecalculate = forecastDeferRecalculate;
        return this;
    }
    
    /**
     * The date that the user's forecast ends.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forecast_end_date")
    public String forecastEndDate;

    public User withForecastEndDate(String forecastEndDate) {
        this.forecastEndDate = forecastEndDate;
        return this;
    }
    
    /**
     * When the user's forecast was last accessed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forecast_last_accessed_at")
    public String forecastLastAccessedAt;

    public User withForecastLastAccessedAt(String forecastLastAccessedAt) {
        this.forecastLastAccessedAt = forecastLastAccessedAt;
        return this;
    }
    
    /**
     * When the user's forecast was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forecast_last_updated_at")
    public String forecastLastUpdatedAt;

    public User withForecastLastUpdatedAt(String forecastLastUpdatedAt) {
        this.forecastLastUpdatedAt = forecastLastUpdatedAt;
        return this;
    }
    
    /**
     * Whether the user's forecast needs to be recalculated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forecast_needs_recalculate")
    public Boolean forecastNeedsRecalculate;

    public User withForecastNeedsRecalculate(Boolean forecastNeedsRecalculate) {
        this.forecastNeedsRecalculate = forecastNeedsRecalculate;
        return this;
    }
    
    /**
     * The date that the user's forecast starts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forecast_start_date")
    public String forecastStartDate;

    public User withForecastStartDate(String forecastStartDate) {
        this.forecastStartDate = forecastStartDate;
        return this;
    }
    
    /**
     * The unique identifier of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public User withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether the user wants to review new transactions, transfer transactions or categorisation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_reviewing_transactions")
    public Boolean isReviewingTransactions;

    public User withIsReviewingTransactions(Boolean isReviewingTransactions) {
        this.isReviewingTransactions = isReviewingTransactions;
        return this;
    }
    
    /**
     * When the user last interacted with PocketSmith, via any application or the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_activity_at")
    public String lastActivityAt;

    public User withLastActivityAt(String lastActivityAt) {
        this.lastActivityAt = lastActivityAt;
        return this;
    }
    
    /**
     * When the user last logged into PocketSmith.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_logged_in_at")
    public String lastLoggedInAt;

    public User withLastLoggedInAt(String lastLoggedInAt) {
        this.lastLoggedInAt = lastLoggedInAt;
        return this;
    }
    
    /**
     * The user's username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login")
    public String login;

    public User withLogin(String login) {
        this.login = login;
        return this;
    }
    
    /**
     * The full name of the user, although not all users will have a name set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public User withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The user's time zone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_zone")
    public String timeZone;

    public User withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * When the user was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public User withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Whether the user has multiple currencies in use across their account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("using_multiple_currencies")
    public Boolean usingMultipleCurrencies;

    public User withUsingMultipleCurrencies(Boolean usingMultipleCurrencies) {
        this.usingMultipleCurrencies = usingMultipleCurrencies;
        return this;
    }
    
    /**
     * The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("week_start_day")
    public Long weekStartDay;

    public User withWeekStartDay(Long weekStartDay) {
        this.weekStartDay = weekStartDay;
        return this;
    }
    
    public User(){}
}
