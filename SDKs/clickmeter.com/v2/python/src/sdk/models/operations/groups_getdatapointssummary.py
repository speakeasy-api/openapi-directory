"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_core_dto_aggregated_aggregatedsummaryresult as shared_api_core_dto_aggregated_aggregatedsummaryresult
from enum import Enum
from typing import Optional

class GroupsGetDatapointsSummarySortDirectionEnum(str, Enum):
    r"""Direction of sort \\"asc\\" or \\"desc\\" """
    ASC = 'asc'
    DESC = 'desc'

class GroupsGetDatapointsSummaryStatusEnum(str, Enum):
    r"""Status of datapoint (\\"deleted\\"/\\"active\\"/\\"paused\\"/\\"spam\\")"""
    DELETED = 'deleted'
    ACTIVE = 'active'

class GroupsGetDatapointsSummaryTimeFrameEnum(str, Enum):
    r"""Timeframe of the request. See list at $timeframeList"""
    TODAY = 'today'
    YESTERDAY = 'yesterday'
    LAST7 = 'last7'
    LAST30 = 'last30'
    LASTMONTH = 'lastmonth'
    CURRENTMONTH = 'currentmonth'
    PREVIOUSMONTH = 'previousmonth'
    LAST90 = 'last90'
    LAST120 = 'last120'
    LAST180 = 'last180'
    LAST12MONTHS = 'last12months'
    LASTYEAR = 'lastyear'
    CURRENTYEAR = 'currentyear'
    BEGINNING = 'beginning'
    CUSTOM = 'custom'

class GroupsGetDatapointsSummaryTypeEnum(str, Enum):
    r"""Type of datapoint (\\"tl\\"/\\"tp\\")"""
    TP = 'tp'
    TL = 'tl'


@dataclasses.dataclass
class GroupsGetDatapointsSummaryRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Filter by this group id"""  
    time_frame: GroupsGetDatapointsSummaryTimeFrameEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'timeFrame', 'style': 'form', 'explode': True }})
    r"""Timeframe of the request. See list at $timeframeList"""  
    favourite: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'favourite', 'style': 'form', 'explode': True }})
    r"""Is the datapoint marked as favourite"""  
    from_day: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fromDay', 'style': 'form', 'explode': True }})
    r"""If using a \\"custom\\" timeFrame you can specify the starting day (YYYYMMDD)"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limit results to this number"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Offset where to start from"""  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortBy', 'style': 'form', 'explode': True }})
    r"""Field to sort by"""  
    sort_direction: Optional[GroupsGetDatapointsSummarySortDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortDirection', 'style': 'form', 'explode': True }})
    r"""Direction of sort \\"asc\\" or \\"desc\\" """  
    status: Optional[GroupsGetDatapointsSummaryStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Status of datapoint (\\"deleted\\"/\\"active\\"/\\"paused\\"/\\"spam\\")"""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag', 'style': 'form', 'explode': True }})
    r"""A comma separated list of tags you want to filter with."""  
    text_search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'textSearch', 'style': 'form', 'explode': True }})
    r"""Filter fields by this pattern"""  
    to_day: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'toDay', 'style': 'form', 'explode': True }})
    r"""If using a \\"custom\\" timeFrame you can specify the ending day (YYYYMMDD)"""  
    type: Optional[GroupsGetDatapointsSummaryTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Type of datapoint (\\"tl\\"/\\"tp\\")"""  
    

@dataclasses.dataclass
class GroupsGetDatapointsSummaryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_core_dto_aggregated_aggregated_summary_result: Optional[shared_api_core_dto_aggregated_aggregatedsummaryresult.APICoreDtoAggregatedAggregatedSummaryResult] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    