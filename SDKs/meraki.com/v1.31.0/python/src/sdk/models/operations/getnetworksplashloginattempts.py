"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Any, Optional

class GetNetworkSplashLoginAttemptsSsidNumberEnum(str, Enum):
    r"""Only return the login attempts for the specified SSID"""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    TEN = '10'
    ELEVEN = '11'
    TWELVE = '12'
    THIRTEEN = '13'
    FOURTEEN = '14'


@dataclasses.dataclass
class GetNetworkSplashLoginAttemptsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    login_identifier: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'loginIdentifier', 'style': 'form', 'explode': True }})
    r"""The username, email, or phone number used during login"""  
    ssid_number: Optional[GetNetworkSplashLoginAttemptsSsidNumberEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ssidNumber', 'style': 'form', 'explode': True }})
    r"""Only return the login attempts for the specified SSID"""  
    timespan: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timespan', 'style': 'form', 'explode': True }})
    r"""The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months"""  
    

@dataclasses.dataclass
class GetNetworkSplashLoginAttemptsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_splash_login_attempts_200_application_json_objects: Optional[list[dict[str, Any]]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    