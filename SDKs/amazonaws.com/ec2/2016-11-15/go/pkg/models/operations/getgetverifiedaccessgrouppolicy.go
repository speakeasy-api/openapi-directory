// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETVerifiedAccessGroupPolicyActionEnum
type GETGETVerifiedAccessGroupPolicyActionEnum string

const (
	GETGETVerifiedAccessGroupPolicyActionEnumGetVerifiedAccessGroupPolicy GETGETVerifiedAccessGroupPolicyActionEnum = "GetVerifiedAccessGroupPolicy"
)

func (e GETGETVerifiedAccessGroupPolicyActionEnum) ToPointer() *GETGETVerifiedAccessGroupPolicyActionEnum {
	return &e
}

func (e *GETGETVerifiedAccessGroupPolicyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GetVerifiedAccessGroupPolicy":
		*e = GETGETVerifiedAccessGroupPolicyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETVerifiedAccessGroupPolicyActionEnum: %v", v)
	}
}

// GETGETVerifiedAccessGroupPolicyVersionEnum
type GETGETVerifiedAccessGroupPolicyVersionEnum string

const (
	GETGETVerifiedAccessGroupPolicyVersionEnumTwoThousandAndSixteen1115 GETGETVerifiedAccessGroupPolicyVersionEnum = "2016-11-15"
)

func (e GETGETVerifiedAccessGroupPolicyVersionEnum) ToPointer() *GETGETVerifiedAccessGroupPolicyVersionEnum {
	return &e
}

func (e *GETGETVerifiedAccessGroupPolicyVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETGETVerifiedAccessGroupPolicyVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETVerifiedAccessGroupPolicyVersionEnum: %v", v)
	}
}

type GETGETVerifiedAccessGroupPolicyRequest struct {
	Action GETGETVerifiedAccessGroupPolicyActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the Verified Access group.
	VerifiedAccessGroupID string                                     `queryParam:"style=form,explode=true,name=VerifiedAccessGroupId"`
	Version               GETGETVerifiedAccessGroupPolicyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm         *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETVerifiedAccessGroupPolicyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
