/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CodeReferenceRequest {
    /**
     * The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeBranches")
    public String[] activeBranches;
    public CodeReferenceRequest withActiveBranches(String[] activeBranches) {
        this.activeBranches = activeBranches;
        return this;
    }
    
    /**
     * The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)
     */
    @JsonProperty("branch")
    public String branch;
    public CodeReferenceRequest withBranch(String branch) {
        this.branch = branch;
        return this;
    }
    
    /**
     * The related commit's hash. (Appears on the ConfigCat Dashboard)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commitHash")
    public String commitHash;
    public CodeReferenceRequest withCommitHash(String commitHash) {
        this.commitHash = commitHash;
        return this;
    }
    
    /**
     * The related commit's URL. (Appears on the ConfigCat Dashboard)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commitUrl")
    public String commitUrl;
    public CodeReferenceRequest withCommitUrl(String commitUrl) {
        this.commitUrl = commitUrl;
        return this;
    }
    
    /**
     * The Config's identifier the scanning was performed against.
     */
    @JsonProperty("configId")
    public String configId;
    public CodeReferenceRequest withConfigId(String configId) {
        this.configId = configId;
        return this;
    }
    
    /**
     * The actual code reference collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flagReferences")
    public FlagReference[] flagReferences;
    public CodeReferenceRequest withFlagReferences(FlagReference[] flagReferences) {
        this.flagReferences = flagReferences;
        return this;
    }
    
    /**
     * The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)
     */
    @JsonProperty("repository")
    public String repository;
    public CodeReferenceRequest withRepository(String repository) {
        this.repository = repository;
        return this;
    }
    
    /**
     * The scanning tool's name. (Appears on the ConfigCat Dashboard)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploader")
    public String uploader;
    public CodeReferenceRequest withUploader(String uploader) {
        this.uploader = uploader;
        return this;
    }
    
}
