// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type CrashGroupsUpdateSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type CrashGroupsUpdateRequestBodyStatusEnum string

const (
	CrashGroupsUpdateRequestBodyStatusEnumOpen    CrashGroupsUpdateRequestBodyStatusEnum = "open"
	CrashGroupsUpdateRequestBodyStatusEnumClosed  CrashGroupsUpdateRequestBodyStatusEnum = "closed"
	CrashGroupsUpdateRequestBodyStatusEnumIgnored CrashGroupsUpdateRequestBodyStatusEnum = "ignored"
)

func (e CrashGroupsUpdateRequestBodyStatusEnum) ToPointer() *CrashGroupsUpdateRequestBodyStatusEnum {
	return &e
}

func (e *CrashGroupsUpdateRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = CrashGroupsUpdateRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrashGroupsUpdateRequestBodyStatusEnum: %v", v)
	}
}

// CrashGroupsUpdateRequestBody - Group change object. All fields are optional and only provided fields will get updated.
type CrashGroupsUpdateRequestBody struct {
	Annotation *string                                 `json:"annotation,omitempty"`
	Status     *CrashGroupsUpdateRequestBodyStatusEnum `json:"status,omitempty"`
}

type CrashGroupsUpdateRequest struct {
	// Group change object. All fields are optional and only provided fields will get updated.
	RequestBody CrashGroupsUpdateRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// id of a specific group
	CrashGroupID string `pathParam:"style=simple,explode=false,name=crash_group_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// CrashGroupsUpdateDefaultApplicationJSON - Error
type CrashGroupsUpdateDefaultApplicationJSON struct {
	Message string `json:"message"`
}

// CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum - programming language of the frame
type CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum string

const (
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumJavaScript   CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "JavaScript"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumCSharp       CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "CSharp"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumObjectiveC   CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "Objective-C"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumObjectiveCpp CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "Objective-Cpp"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumCpp          CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "Cpp"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumC            CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "C"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumSwift        CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "Swift"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumJava         CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "Java"
	CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnumUnknown      CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum = "Unknown"
)

func (e CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum) ToPointer() *CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum {
	return &e
}

func (e *CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum: %v", v)
	}
}

// CrashGroupsUpdate200ApplicationJSONReasonFrame - frame belonging to the reason of the crash
type CrashGroupsUpdate200ApplicationJSONReasonFrame struct {
	// this line isn't from any framework
	AppCode *bool `json:"app_code,omitempty"`
	// is a class method
	ClassMethod *bool `json:"class_method,omitempty"`
	// name of the class
	ClassName *string `json:"class_name,omitempty"`
	// Formatted frame string
	CodeFormatted *string `json:"code_formatted,omitempty"`
	// Unformatted Frame string
	CodeRaw *string `json:"code_raw,omitempty"`
	// Exception type.
	ExceptionType *string `json:"exception_type,omitempty"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"framework_name,omitempty"`
	// programming language of the frame
	Language *CrashGroupsUpdate200ApplicationJSONReasonFrameLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"method_params,omitempty"`
	// OS exception type. (aka. SIGNAL)
	OsExceptionType *string `json:"os_exception_type,omitempty"`
}

type CrashGroupsUpdate200ApplicationJSONStatusEnum string

const (
	CrashGroupsUpdate200ApplicationJSONStatusEnumOpen    CrashGroupsUpdate200ApplicationJSONStatusEnum = "open"
	CrashGroupsUpdate200ApplicationJSONStatusEnumClosed  CrashGroupsUpdate200ApplicationJSONStatusEnum = "closed"
	CrashGroupsUpdate200ApplicationJSONStatusEnumIgnored CrashGroupsUpdate200ApplicationJSONStatusEnum = "ignored"
)

func (e CrashGroupsUpdate200ApplicationJSONStatusEnum) ToPointer() *CrashGroupsUpdate200ApplicationJSONStatusEnum {
	return &e
}

func (e *CrashGroupsUpdate200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = CrashGroupsUpdate200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrashGroupsUpdate200ApplicationJSONStatusEnum: %v", v)
	}
}

// CrashGroupsUpdate200ApplicationJSON - Success
type CrashGroupsUpdate200ApplicationJSON struct {
	Annotation   string  `json:"annotation"`
	AppVersion   string  `json:"app_version"`
	Build        string  `json:"build"`
	Count        int64   `json:"count"`
	CrashGroupID string  `json:"crash_group_id"`
	CrashReason  string  `json:"crash_reason"`
	DisplayID    string  `json:"display_id"`
	Exception    *string `json:"exception,omitempty"`
	// Crash or handled exception
	Fatal           bool      `json:"fatal"`
	FirstOccurrence time.Time `json:"first_occurrence"`
	ImpactedUsers   *int64    `json:"impacted_users,omitempty"`
	LastOccurrence  time.Time `json:"last_occurrence"`
	NewCrashGroupID string    `json:"new_crash_group_id"`
	// frame belonging to the reason of the crash
	ReasonFrame *CrashGroupsUpdate200ApplicationJSONReasonFrame `json:"reason_frame,omitempty"`
	Status      CrashGroupsUpdate200ApplicationJSONStatusEnum   `json:"status"`
}

type CrashGroupsUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	CrashGroupsUpdate200ApplicationJSONObject *CrashGroupsUpdate200ApplicationJSON
	// Error
	CrashGroupsUpdateDefaultApplicationJSONObject *CrashGroupsUpdateDefaultApplicationJSON
}
