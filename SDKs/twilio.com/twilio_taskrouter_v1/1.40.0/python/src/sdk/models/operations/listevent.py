"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taskrouter_v1_workspace_event as shared_taskrouter_v1_workspace_event
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from sdk import utils
from typing import Optional

LIST_EVENT_SERVERS = [
	"https://taskrouter.twilio.com",
]


@dataclasses.dataclass
class ListEventSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class ListEventRequest:
    
    workspace_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkspaceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace."""  
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EndDate', 'style': 'form', 'explode': True }})
    r"""Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time."""  
    event_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EventType', 'style': 'form', 'explode': True }})
    r"""The type of Events to read. Returns only Events of the type specified."""  
    minutes: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Minutes', 'style': 'form', 'explode': True }})
    r"""The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is `15` minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Page', 'style': 'form', 'explode': True }})
    r"""The page index. This value is simply for client state."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageToken', 'style': 'form', 'explode': True }})
    r"""The page token. This is provided by the API."""  
    reservation_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ReservationSid', 'style': 'form', 'explode': True }})
    r"""The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation."""  
    sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Sid', 'style': 'form', 'explode': True }})
    r"""The SID of the Event resource to read."""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'StartDate', 'style': 'form', 'explode': True }})
    r"""Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted."""  
    task_channel: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TaskChannel', 'style': 'form', 'explode': True }})
    r"""The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel."""  
    task_queue_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TaskQueueSid', 'style': 'form', 'explode': True }})
    r"""The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue."""  
    task_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TaskSid', 'style': 'form', 'explode': True }})
    r"""The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task."""  
    worker_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'WorkerSid', 'style': 'form', 'explode': True }})
    r"""The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker."""  
    workflow_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'WorkflowSid', 'style': 'form', 'explode': True }})
    r"""The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListEventListEventResponseMeta:
    
    first_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_page_url'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    next_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_url'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})  
    previous_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page_url'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListEventListEventResponse:
    r"""OK"""
    
    events: Optional[list[shared_taskrouter_v1_workspace_event.TaskrouterV1WorkspaceEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})  
    meta: Optional[ListEventListEventResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListEventResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_event_response: Optional[ListEventListEventResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    