/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Relyingparty {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Relyingparty(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Creates the URI used by the IdP to authenticate the user.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyCreateAuthUriResponse identitytoolkitRelyingpartyCreateAuthUri(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyCreateAuthUriRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyCreateAuthUriSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/createAuthUri");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyCreateAuthUriRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyCreateAuthUriRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyCreateAuthUriResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyCreateAuthUriResponse() {{
            createAuthUriResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreateAuthUriResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreateAuthUriResponse.class);
                res.createAuthUriResponse = out;
            }
        }

        return res;
    }

    /**
     * Delete user account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDeleteAccountResponse identitytoolkitRelyingpartyDeleteAccount(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDeleteAccountRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDeleteAccountSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/deleteAccount");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyDeleteAccountRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDeleteAccountRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDeleteAccountResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDeleteAccountResponse() {{
            deleteAccountResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DeleteAccountResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DeleteAccountResponse.class);
                res.deleteAccountResponse = out;
            }
        }

        return res;
    }

    /**
     * Batch download user accounts.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDownloadAccountResponse identitytoolkitRelyingpartyDownloadAccount(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDownloadAccountRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDownloadAccountSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/downloadAccount");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyDownloadAccountRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDownloadAccountRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDownloadAccountResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyDownloadAccountResponse() {{
            downloadAccountResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DownloadAccountResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DownloadAccountResponse.class);
                res.downloadAccountResponse = out;
            }
        }

        return res;
    }

    /**
     * Reset password for a user.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyEmailLinkSigninResponse identitytoolkitRelyingpartyEmailLinkSignin(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyEmailLinkSigninRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyEmailLinkSigninSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/emailLinkSignin");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyEmailLinkSigninRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyEmailLinkSigninRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyEmailLinkSigninResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyEmailLinkSigninResponse() {{
            emailLinkSigninResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EmailLinkSigninResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EmailLinkSigninResponse.class);
                res.emailLinkSigninResponse = out;
            }
        }

        return res;
    }

    /**
     * Returns the account info.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetAccountInfoResponse identitytoolkitRelyingpartyGetAccountInfo(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetAccountInfoRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetAccountInfoSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/getAccountInfo");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyGetAccountInfoRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetAccountInfoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetAccountInfoResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetAccountInfoResponse() {{
            getAccountInfoResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetAccountInfoResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetAccountInfoResponse.class);
                res.getAccountInfoResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a code for user action confirmation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse identitytoolkitRelyingpartyGetOobConfirmationCode(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/getOobConfirmationCode");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "relyingparty", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse() {{
            getOobConfirmationCodeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetOobConfirmationCodeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetOobConfirmationCodeResponse.class);
                res.getOobConfirmationCodeResponse = out;
            }
        }

        return res;
    }

    /**
     * Get project configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetProjectConfigResponse identitytoolkitRelyingpartyGetProjectConfig(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetProjectConfigRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetProjectConfigSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/getProjectConfig");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetProjectConfigRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetProjectConfigResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetProjectConfigResponse() {{
            identitytoolkitRelyingpartyGetProjectConfigResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartyGetProjectConfigResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartyGetProjectConfigResponse.class);
                res.identitytoolkitRelyingpartyGetProjectConfigResponse = out;
            }
        }

        return res;
    }

    /**
     * Get token signing public key.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetPublicKeysResponse identitytoolkitRelyingpartyGetPublicKeys(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetPublicKeysRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetPublicKeysSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/publicKeys");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetPublicKeysRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetPublicKeysResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetPublicKeysResponse() {{
            identitytoolkitRelyingpartyGetPublicKeysResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, String> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, String>>() {});
                res.identitytoolkitRelyingpartyGetPublicKeysResponse = out;
            }
        }

        return res;
    }

    /**
     * Get recaptcha secure param.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetRecaptchaParamResponse identitytoolkitRelyingpartyGetRecaptchaParam(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetRecaptchaParamRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetRecaptchaParamSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/getRecaptchaParam");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetRecaptchaParamRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetRecaptchaParamResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyGetRecaptchaParamResponse() {{
            getRecaptchaParamResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GetRecaptchaParamResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GetRecaptchaParamResponse.class);
                res.getRecaptchaParamResponse = out;
            }
        }

        return res;
    }

    /**
     * Reset password for a user.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyResetPasswordResponse identitytoolkitRelyingpartyResetPassword(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyResetPasswordRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyResetPasswordSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/resetPassword");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyResetPasswordRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyResetPasswordRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyResetPasswordResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyResetPasswordResponse() {{
            resetPasswordResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ResetPasswordResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ResetPasswordResponse.class);
                res.resetPasswordResponse = out;
            }
        }

        return res;
    }

    /**
     * Send SMS verification code.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySendVerificationCodeResponse identitytoolkitRelyingpartySendVerificationCode(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySendVerificationCodeRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySendVerificationCodeSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/sendVerificationCode");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartySendVerificationCodeRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySendVerificationCodeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySendVerificationCodeResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySendVerificationCodeResponse() {{
            identitytoolkitRelyingpartySendVerificationCodeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartySendVerificationCodeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartySendVerificationCodeResponse.class);
                res.identitytoolkitRelyingpartySendVerificationCodeResponse = out;
            }
        }

        return res;
    }

    /**
     * Set account info for a user.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetAccountInfoResponse identitytoolkitRelyingpartySetAccountInfo(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetAccountInfoRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetAccountInfoSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/setAccountInfo");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartySetAccountInfoRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetAccountInfoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetAccountInfoResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetAccountInfoResponse() {{
            setAccountInfoResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SetAccountInfoResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SetAccountInfoResponse.class);
                res.setAccountInfoResponse = out;
            }
        }

        return res;
    }

    /**
     * Set project configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetProjectConfigResponse identitytoolkitRelyingpartySetProjectConfig(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetProjectConfigRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetProjectConfigSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/setProjectConfig");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartySetProjectConfigRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetProjectConfigRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetProjectConfigResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySetProjectConfigResponse() {{
            identitytoolkitRelyingpartySetProjectConfigResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartySetProjectConfigResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartySetProjectConfigResponse.class);
                res.identitytoolkitRelyingpartySetProjectConfigResponse = out;
            }
        }

        return res;
    }

    /**
     * Sign out user.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignOutUserResponse identitytoolkitRelyingpartySignOutUser(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignOutUserRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignOutUserSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/signOutUser");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartySignOutUserRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignOutUserRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignOutUserResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignOutUserResponse() {{
            identitytoolkitRelyingpartySignOutUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartySignOutUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartySignOutUserResponse.class);
                res.identitytoolkitRelyingpartySignOutUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Signup new user.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignupNewUserResponse identitytoolkitRelyingpartySignupNewUser(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignupNewUserRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignupNewUserSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/signupNewUser");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartySignupNewUserRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignupNewUserRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignupNewUserResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartySignupNewUserResponse() {{
            signupNewUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SignupNewUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SignupNewUserResponse.class);
                res.signupNewUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Batch upload existing user accounts.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyUploadAccountResponse identitytoolkitRelyingpartyUploadAccount(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyUploadAccountRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyUploadAccountSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/uploadAccount");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyUploadAccountRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyUploadAccountRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyUploadAccountResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyUploadAccountResponse() {{
            uploadAccountResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UploadAccountResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UploadAccountResponse.class);
                res.uploadAccountResponse = out;
            }
        }

        return res;
    }

    /**
     * Verifies the assertion returned by the IdP.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyAssertionResponse identitytoolkitRelyingpartyVerifyAssertion(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyAssertionRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyAssertionSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/verifyAssertion");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyVerifyAssertionRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyAssertionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyAssertionResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyAssertionResponse() {{
            verifyAssertionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyAssertionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyAssertionResponse.class);
                res.verifyAssertionResponse = out;
            }
        }

        return res;
    }

    /**
     * Verifies the developer asserted ID token.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyCustomTokenResponse identitytoolkitRelyingpartyVerifyCustomToken(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyCustomTokenRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyCustomTokenSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/verifyCustomToken");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyVerifyCustomTokenRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyCustomTokenRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyCustomTokenResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyCustomTokenResponse() {{
            verifyCustomTokenResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyCustomTokenResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyCustomTokenResponse.class);
                res.verifyCustomTokenResponse = out;
            }
        }

        return res;
    }

    /**
     * Verifies the user entered password.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPasswordResponse identitytoolkitRelyingpartyVerifyPassword(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPasswordRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPasswordSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/verifyPassword");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyVerifyPasswordRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPasswordRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPasswordResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPasswordResponse() {{
            verifyPasswordResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyPasswordResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyPasswordResponse.class);
                res.verifyPasswordResponse = out;
            }
        }

        return res;
    }

    /**
     * Verifies ownership of a phone number and creates/updates the user account accordingly.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse identitytoolkitRelyingpartyVerifyPhoneNumber(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest request, org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/verifyPhoneNumber");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "identitytoolkitRelyingpartyVerifyPhoneNumberRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse res = new org.openapis.openapi.models.operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse() {{
            identitytoolkitRelyingpartyVerifyPhoneNumberResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.class);
                res.identitytoolkitRelyingpartyVerifyPhoneNumberResponse = out;
            }
        }

        return res;
    }
}