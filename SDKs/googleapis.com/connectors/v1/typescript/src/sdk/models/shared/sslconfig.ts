/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConfigVariable } from "./configvariable";
import { Secret } from "./secret";
import { Expose, Type } from "class-transformer";

/**
 * Type of Client Cert (PEM/JKS/.. etc.)
 */
export enum SslConfigClientCertTypeEnum {
  CertTypeUnspecified = "CERT_TYPE_UNSPECIFIED",
  Pem = "PEM",
}

/**
 * Type of Server Cert (PEM/JKS/.. etc.)
 */
export enum SslConfigServerCertTypeEnum {
  CertTypeUnspecified = "CERT_TYPE_UNSPECIFIED",
  Pem = "PEM",
}

/**
 * Trust Model of the SSL connection
 */
export enum SslConfigTrustModelEnum {
  Public = "PUBLIC",
  Private = "PRIVATE",
  Insecure = "INSECURE",
}

/**
 * Controls the ssl type for the given connector version.
 */
export enum SslConfigTypeEnum {
  SslTypeUnspecified = "SSL_TYPE_UNSPECIFIED",
  Tls = "TLS",
  Mtls = "MTLS",
}

/**
 * SSL Configuration of a connection
 */
export class SslConfig extends SpeakeasyBase {
  /**
   * Additional SSL related field values
   */
  @SpeakeasyMetadata({ elemType: ConfigVariable })
  @Expose({ name: "additionalVariables" })
  @Type(() => ConfigVariable)
  additionalVariables?: ConfigVariable[];

  /**
   * Type of Client Cert (PEM/JKS/.. etc.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientCertType" })
  clientCertType?: SslConfigClientCertTypeEnum;

  /**
   * Secret provides a reference to entries in Secret Manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientCertificate" })
  @Type(() => Secret)
  clientCertificate?: Secret;

  /**
   * Secret provides a reference to entries in Secret Manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientPrivateKey" })
  @Type(() => Secret)
  clientPrivateKey?: Secret;

  /**
   * Secret provides a reference to entries in Secret Manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientPrivateKeyPass" })
  @Type(() => Secret)
  clientPrivateKeyPass?: Secret;

  /**
   * Secret provides a reference to entries in Secret Manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateServerCertificate" })
  @Type(() => Secret)
  privateServerCertificate?: Secret;

  /**
   * Type of Server Cert (PEM/JKS/.. etc.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serverCertType" })
  serverCertType?: SslConfigServerCertTypeEnum;

  /**
   * Trust Model of the SSL connection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trustModel" })
  trustModel?: SslConfigTrustModelEnum;

  /**
   * Controls the ssl type for the given connector version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: SslConfigTypeEnum;

  /**
   * Bool for enabling SSL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useSsl" })
  useSsl?: boolean;
}
