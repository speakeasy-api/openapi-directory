/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Articles {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Publish article
   *
   * @remarks
   * This endpoint allows the client to create a new article.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   */
  createArticle(
    req: shared.Article,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateArticleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Article(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/articles";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateArticleResponse =
        new operations.CreateArticleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [201, 401, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Published article by id
   *
   * @remarks
   * This endpoint allows the client to retrieve a single published article given its `id`.
   */
  getArticleById(
    req: operations.GetArticleByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetArticleByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetArticleByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/articles/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetArticleByIdResponse =
        new operations.GetArticleByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getArticleById200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Published article by path
   *
   * @remarks
   * This endpoint allows the client to retrieve a single published article given its `path`.
   */
  getArticleByPath(
    req: operations.GetArticleByPathRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetArticleByPathResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetArticleByPathRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/articles/{username}/{slug}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetArticleByPathResponse =
        new operations.GetArticleByPathResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getArticleByPath200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Published articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of articles.
   *
   * "Articles" are all the posts that users create on DEV that typically
   * show up in the feed. They can be a blog post, a discussion question,
   * a help thread etc. but is referred to as article within the code.
   *
   * By default it will return featured, published articles ordered
   * by descending popularity.
   *
   * It supports pagination, each page will contain `30` articles by default.
   */
  getArticles(
    req: operations.GetArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/articles";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetArticlesResponse =
        new operations.GetArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Published articles sorted by published date
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.
   *
   * It supports pagination, each page will contain 30 articles by default.
   */
  getLatestArticles(
    req: operations.GetLatestArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLatestArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLatestArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/articles/latest";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLatestArticlesResponse =
        new operations.GetLatestArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Organization's Articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of Articles belonging to the organization
   *
   * It supports pagination, each page will contain `30` users by default.
   */
  getOrgArticles(
    req: operations.GetOrgArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrgArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrgArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/organizations/{username}/articles",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrgArticlesResponse =
        new operations.GetOrgArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * User's all articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * It will return both published and unpublished articles with pagination.
   *
   * Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.
   *
   * By default a page will contain 30 articles.
   */
  getUserAllArticles(
    req: operations.GetUserAllArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserAllArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserAllArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/articles/me/all";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserAllArticlesResponse =
        new operations.GetUserAllArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * User's articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Published articles will be in reverse chronological publication order.
   *
   * It will return published articles with pagination. By default a page will contain 30 articles.
   */
  getUserArticles(
    req: operations.GetUserArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/articles/me";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserArticlesResponse =
        new operations.GetUserArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * User's published articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Published articles will be in reverse chronological publication order.
   *
   * It will return published articles with pagination. By default a page will contain 30 articles.
   */
  getUserPublishedArticles(
    req: operations.GetUserPublishedArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserPublishedArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserPublishedArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/articles/me/published";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserPublishedArticlesResponse =
        new operations.GetUserPublishedArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * User's unpublished articles
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   *
   * Unpublished articles will be in reverse chronological creation order.
   *
   * It will return unpublished articles with pagination. By default a page will contain 30 articles.
   */
  getUserUnpublishedArticles(
    req: operations.GetUserUnpublishedArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUserUnpublishedArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUserUnpublishedArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/articles/me/unpublished";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUserUnpublishedArticlesResponse =
        new operations.GetUserUnpublishedArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articleIndices = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articleIndices = utils.objectToClass(
              httpRes?.data,
              shared.ArticleIndex,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Unpublish an article
   *
   * @remarks
   * This endpoint allows the client to unpublish an article.
   *
   * The user associated with the API key must have any 'admin' or 'moderator' role.
   *
   * The article will be unpublished and will no longer be visible to the public. It will remain
   * in the database and will set back to draft status on the author's posts dashboard. Any
   * notifications associated with the article will be deleted. Any comments on the article
   * will remain.
   */
  unpublishArticle(
    req: operations.UnpublishArticleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UnpublishArticleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnpublishArticleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/articles/{id}/unpublish",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnpublishArticleResponse =
        new operations.UnpublishArticleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update an article by id
   *
   * @remarks
   * This endpoint allows the client to update an existing article.
   *
   * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
   */
  updateArticle(
    req: operations.UpdateArticleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateArticleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateArticleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/articles/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "article",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateArticleResponse =
        new operations.UpdateArticleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Articles with a video
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.
   *
   * It will only return published video articles ordered by descending popularity.
   *
   * It supports pagination, each page will contain 24 articles by default.
   */
  videos(
    req: operations.VideosRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VideosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VideosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/videos";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VideosResponse = new operations.VideosResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videoArticles = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videoArticles = utils.objectToClass(
              httpRes?.data,
              shared.VideoArticle,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
