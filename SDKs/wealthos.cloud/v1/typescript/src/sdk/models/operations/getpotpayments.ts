/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetPotPaymentsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiSecretKey: string;
}

export class GetPotPaymentsRequest extends SpeakeasyBase {
  /**
   * Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_number",
  })
  pageNumber?: string;

  /**
   * Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: string;

  /**
   * Payment type of the payment to be retrieved from the API (electronic_fund_transfer, card)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=payment_type",
  })
  paymentType?: string;

  /**
   * Pot Id
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=pot_id",
  })
  potId: string;

  /**
   * Purpose of the payment to be retrieved from the API (cash, invest)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=purpose",
  })
  purpose?: string;

  /**
   * Service provider of the payment to be retrieved from the API (truelayer, stripe, none)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=service_provider",
  })
  serviceProvider?: string;

  /**
   * ApiSecretKey
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-api-key",
  })
  xApiKey: string;
}

/**
 * System error. Retry later. If the error persist, contact WOS support
 */
export class GetPotPayments500ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
 */
export class GetPotPayments429ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * The specified resource was not found
 */
export class GetPotPayments404ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
 */
export class GetPotPayments403ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You do not have permissions to access this resource.
 */
export class GetPotPayments401ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class GetPotPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "investment_product_id" })
  investmentProductId: string;

  /**
   * Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: string;

  /**
   * Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export enum GetPotPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum {
  Card = "card",
  ElectronicFundTransfer = "electronic_fund_transfer",
}

export enum GetPotPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum {
  Cash = "cash",
  Invest = "invest",
}

export enum GetPotPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum {
  Stripe = "stripe",
  Truelayer = "truelayer",
  None = "none",
}

/**
 * Status of the payment
 *
 * @remarks
 *
 * - `pending_confirmation`: Payment is pending approvals and confirmation
 * - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
 * - `succeeded`: Payment is successful. Cash is cleaned in account.
 * - `cancelled`: Payment cancelled, and any held funds have been returned.
 * - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
 */
export enum GetPotPayments200ApplicationJSONRootTypeForPaymentsStatusEnum {
  PendingConfirmation = "pending_confirmation",
  Processing = "processing",
  Succeeded = "succeeded",
  Cancelled = "cancelled",
  Failed = "failed",
}

export class GetPotPayments200ApplicationJSONRootTypeForPayments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: string;

  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)
   */
  @SpeakeasyMetadata({
    elemType:
      GetPotPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions,
  })
  @Expose({ name: "investment_instructions" })
  @Type(
    () =>
      GetPotPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions
  )
  investmentInstructions?: GetPotPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions[];

  @SpeakeasyMetadata()
  @Expose({ name: "payment_type" })
  paymentType: GetPotPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "purpose" })
  purpose: GetPotPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "service_provider" })
  serviceProvider: GetPotPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum;

  /**
   * Status of the payment
   *
   * @remarks
   *
   * - `pending_confirmation`: Payment is pending approvals and confirmation
   * - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
   * - `succeeded`: Payment is successful. Cash is cleaned in account.
   * - `cancelled`: Payment cancelled, and any held funds have been returned.
   * - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetPotPayments200ApplicationJSONRootTypeForPaymentsStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;
}

/**
 * success
 */
export class GetPotPayments200ApplicationJSON extends SpeakeasyBase {
  /**
   * This indicates the availability of the next page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_available" })
  nextPageAvailable: boolean;

  @SpeakeasyMetadata({
    elemType: GetPotPayments200ApplicationJSONRootTypeForPayments,
  })
  @Expose({ name: "payments" })
  @Type(() => GetPotPayments200ApplicationJSONRootTypeForPayments)
  payments: GetPotPayments200ApplicationJSONRootTypeForPayments[];

  @SpeakeasyMetadata()
  @Expose({ name: "pot_id" })
  potId: string;
}

export class GetPotPaymentsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * success
   */
  @SpeakeasyMetadata()
  getPotPayments200ApplicationJSONObject?: GetPotPayments200ApplicationJSON;

  /**
   * You do not have permissions to access this resource.
   */
  @SpeakeasyMetadata()
  getPotPayments401ApplicationJSONObject?: GetPotPayments401ApplicationJSON;

  /**
   * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
   */
  @SpeakeasyMetadata()
  getPotPayments403ApplicationJSONObject?: GetPotPayments403ApplicationJSON;

  /**
   * The specified resource was not found
   */
  @SpeakeasyMetadata()
  getPotPayments404ApplicationJSONObject?: GetPotPayments404ApplicationJSON;

  /**
   * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
   */
  @SpeakeasyMetadata()
  getPotPayments429ApplicationJSONObject?: GetPotPayments429ApplicationJSON;

  /**
   * System error. Retry later. If the error persist, contact WOS support
   */
  @SpeakeasyMetadata()
  getPotPayments500ApplicationJSONObject?: GetPotPayments500ApplicationJSON;
}
