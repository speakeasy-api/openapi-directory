"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetWorkspaceSlugMembersFindSecurity:
    
    bearer: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetWorkspaceSlugMembersFindRequest:
    
    workspace_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace_slug', 'style': 'simple', 'explode': False }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})  
    github: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'github', 'style': 'form', 'explode': True }})
    r"""Deprecated, please use source=github and username=<username> instead"""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})  
    source_host: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source_host', 'style': 'form', 'explode': True }})  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uid', 'style': 'form', 'explode': True }})  
    username: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'username', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class GetWorkspaceSlugMembersFindResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    