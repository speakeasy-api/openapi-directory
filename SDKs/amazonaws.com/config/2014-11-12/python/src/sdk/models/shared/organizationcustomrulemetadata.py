"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import maximumexecutionfrequency_enum as shared_maximumexecutionfrequency_enum
from ..shared import organizationconfigruletriggertype_enum as shared_organizationconfigruletriggertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrganizationCustomRuleMetadata:
    r"""An object that specifies organization custom rule metadata such as resource type, resource ID of Amazon Web Services resource, Lambda function ARN, and organization trigger types that trigger Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic."""
    
    lambda_function_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LambdaFunctionArn') }})  
    organization_config_rule_trigger_types: list[shared_organizationconfigruletriggertype_enum.OrganizationConfigRuleTriggerTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationConfigRuleTriggerTypes') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    input_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputParameters'), 'exclude': lambda f: f is None }})  
    maximum_execution_frequency: Optional[shared_maximumexecutionfrequency_enum.MaximumExecutionFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumExecutionFrequency'), 'exclude': lambda f: f is None }})  
    resource_id_scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceIdScope'), 'exclude': lambda f: f is None }})  
    resource_types_scope: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceTypesScope'), 'exclude': lambda f: f is None }})  
    tag_key_scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TagKeyScope'), 'exclude': lambda f: f is None }})  
    tag_value_scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TagValueScope'), 'exclude': lambda f: f is None }})  
    