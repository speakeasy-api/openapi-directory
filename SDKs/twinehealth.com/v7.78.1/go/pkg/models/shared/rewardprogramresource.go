// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RewardProgramResourceAttributesBudgetUnitEnum - Unit of the budget for the reard program.
type RewardProgramResourceAttributesBudgetUnitEnum string

const (
	RewardProgramResourceAttributesBudgetUnitEnumDollar RewardProgramResourceAttributesBudgetUnitEnum = "dollar"
	RewardProgramResourceAttributesBudgetUnitEnumPoint  RewardProgramResourceAttributesBudgetUnitEnum = "point"
	RewardProgramResourceAttributesBudgetUnitEnumCredit RewardProgramResourceAttributesBudgetUnitEnum = "credit"
)

func (e RewardProgramResourceAttributesBudgetUnitEnum) ToPointer() *RewardProgramResourceAttributesBudgetUnitEnum {
	return &e
}

func (e *RewardProgramResourceAttributesBudgetUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dollar":
		fallthrough
	case "point":
		fallthrough
	case "credit":
		*e = RewardProgramResourceAttributesBudgetUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RewardProgramResourceAttributesBudgetUnitEnum: %v", v)
	}
}

type RewardProgramResourceAttributes struct {
	// Unit of the budget for the reard program.
	BudgetUnit *RewardProgramResourceAttributesBudgetUnitEnum `json:"budget_unit,omitempty"`
	// Value of the budget for the reward program. (Must be greater than 0)
	BudgetValue float64 `json:"budget_value"`
	// Description of the reward program - designed to be a comprehensive text description
	Description *string `json:"description,omitempty"`
	// Number of days that a program can be active after it has been activated for a patient. (Must be greater than 0)
	DurationActive *float64 `json:"duration_active,omitempty"`
	// Date at which the reward program ends. (Must be after the start_at)
	EndAt string `json:"end_at"`
	// If true, the reward program cannot be activated for a patient and new rewards cannot be created for the program.
	Frozen *bool `json:"frozen,omitempty"`
	// If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated.
	FulfillAsEarned *bool `json:"fulfill_as_earned,omitempty"`
	// Name of the reward program
	Name string `json:"name"`
	// Date at which the reward program starts.
	StartAt string `json:"start_at"`
	// Tagline of the reward program - designed to be one line
	Tagline *string `json:"tagline,omitempty"`
}

type RewardProgramResourceRelationshipsGroupData struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

type RewardProgramResourceRelationshipsGroup struct {
	Data RewardProgramResourceRelationshipsGroupData `json:"data"`
}

type RewardProgramResourceRelationships struct {
	Group RewardProgramResourceRelationshipsGroup `json:"group"`
}

type RewardProgramResource struct {
	Attributes    *RewardProgramResourceAttributes    `json:"attributes,omitempty"`
	ID            *string                             `json:"id,omitempty"`
	Relationships *RewardProgramResourceRelationships `json:"relationships,omitempty"`
	Type          string                              `json:"type"`
}
