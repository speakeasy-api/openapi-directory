// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateKeyXAmzTargetEnum
type CreateKeyXAmzTargetEnum string

const (
	CreateKeyXAmzTargetEnumTrentServiceCreateKey CreateKeyXAmzTargetEnum = "TrentService.CreateKey"
)

func (e CreateKeyXAmzTargetEnum) ToPointer() *CreateKeyXAmzTargetEnum {
	return &e
}

func (e *CreateKeyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TrentService.CreateKey":
		*e = CreateKeyXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateKeyXAmzTargetEnum: %v", v)
	}
}

type CreateKeyRequest struct {
	CreateKeyRequest  shared.CreateKeyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateKeyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateKeyResponse struct {
	// CloudHsmClusterInvalidConfigurationException
	CloudHsmClusterInvalidConfigurationException interface{}
	ContentType                                  string
	// Success
	CreateKeyResponse *shared.CreateKeyResponse
	// CustomKeyStoreInvalidStateException
	CustomKeyStoreInvalidStateException interface{}
	// CustomKeyStoreNotFoundException
	CustomKeyStoreNotFoundException interface{}
	// DependencyTimeoutException
	DependencyTimeoutException interface{}
	// InvalidArnException
	InvalidArnException interface{}
	// KMSInternalException
	KMSInternalException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// MalformedPolicyDocumentException
	MalformedPolicyDocumentException interface{}
	StatusCode                       int
	RawResponse                      *http.Response
	// TagException
	TagException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
	// XksKeyAlreadyInUseException
	XksKeyAlreadyInUseException interface{}
	// XksKeyInvalidConfigurationException
	XksKeyInvalidConfigurationException interface{}
	// XksKeyNotFoundException
	XksKeyNotFoundException interface{}
}
