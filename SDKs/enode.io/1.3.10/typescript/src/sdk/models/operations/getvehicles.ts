/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetVehiclesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  userAccessToken?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  userAccessToken1?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  userAccessToken2?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  userAccessToken3?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  userAccessToken4?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  userAccessToken5?: string;
}

export class GetVehiclesRequest extends SpeakeasyBase {
  /**
   * An optional array of Vehicle fields that should be included in the response, for example: `?field[]=information&field[]=location`
   *
   * @remarks
   *
   * By default, no fields are included and only the Vehicle ID will be returned. Response time may be impacted by which fields you request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=field[]",
  })
  field?: any[];
}

export class GetVehiclesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful
   */
  @SpeakeasyMetadata({
    elemType:
      shared.Onevehicles1Percent7BvehicleIdPercent7DGetResponses200ContentApplication1jsonSchema,
  })
  onevehicles1Percent7BvehicleIdPercent7DGetResponses200ContentApplication1jsonSchemas?: shared.Onevehicles1Percent7BvehicleIdPercent7DGetResponses200ContentApplication1jsonSchema[];
}
