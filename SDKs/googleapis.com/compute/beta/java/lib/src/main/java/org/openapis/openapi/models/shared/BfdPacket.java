/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class BfdPacket {
    /**
     * The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authenticationPresent")
    public Boolean authenticationPresent;

    public BfdPacket withAuthenticationPresent(Boolean authenticationPresent) {
        this.authenticationPresent = authenticationPresent;
        return this;
    }
    
    /**
     * The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("controlPlaneIndependent")
    public Boolean controlPlaneIndependent;

    public BfdPacket withControlPlaneIndependent(Boolean controlPlaneIndependent) {
        this.controlPlaneIndependent = controlPlaneIndependent;
        return this;
    }
    
    /**
     * The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("demand")
    public Boolean demand;

    public BfdPacket withDemand(Boolean demand) {
        this.demand = demand;
        return this;
    }
    
    /**
     * The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diagnostic")
    public BfdPacketDiagnosticEnum diagnostic;

    public BfdPacket withDiagnostic(BfdPacketDiagnosticEnum diagnostic) {
        this.diagnostic = diagnostic;
        return this;
    }
    
    /**
     * The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("final")
    public Boolean final_;

    public BfdPacket withFinal(Boolean final_) {
        this.final_ = final_;
        return this;
    }
    
    /**
     * The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    public Long length;

    public BfdPacket withLength(Long length) {
        this.length = length;
        return this;
    }
    
    /**
     * The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minEchoRxIntervalMs")
    public Long minEchoRxIntervalMs;

    public BfdPacket withMinEchoRxIntervalMs(Long minEchoRxIntervalMs) {
        this.minEchoRxIntervalMs = minEchoRxIntervalMs;
        return this;
    }
    
    /**
     * The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minRxIntervalMs")
    public Long minRxIntervalMs;

    public BfdPacket withMinRxIntervalMs(Long minRxIntervalMs) {
        this.minRxIntervalMs = minRxIntervalMs;
        return this;
    }
    
    /**
     * The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minTxIntervalMs")
    public Long minTxIntervalMs;

    public BfdPacket withMinTxIntervalMs(Long minTxIntervalMs) {
        this.minTxIntervalMs = minTxIntervalMs;
        return this;
    }
    
    /**
     * The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiplier")
    public Long multiplier;

    public BfdPacket withMultiplier(Long multiplier) {
        this.multiplier = multiplier;
        return this;
    }
    
    /**
     * The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multipoint")
    public Boolean multipoint;

    public BfdPacket withMultipoint(Boolean multipoint) {
        this.multipoint = multipoint;
        return this;
    }
    
    /**
     * The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("myDiscriminator")
    public Long myDiscriminator;

    public BfdPacket withMyDiscriminator(Long myDiscriminator) {
        this.myDiscriminator = myDiscriminator;
        return this;
    }
    
    /**
     * The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poll")
    public Boolean poll;

    public BfdPacket withPoll(Boolean poll) {
        this.poll = poll;
        return this;
    }
    
    /**
     * The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public BfdPacketStateEnum state;

    public BfdPacket withState(BfdPacketStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The version number of the BFD protocol, as specified in section 4.1 of RFC5880.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;

    public BfdPacket withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    /**
     * The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yourDiscriminator")
    public Long yourDiscriminator;

    public BfdPacket withYourDiscriminator(Long yourDiscriminator) {
        this.yourDiscriminator = yourDiscriminator;
        return this;
    }
    
    public BfdPacket(){}
}
