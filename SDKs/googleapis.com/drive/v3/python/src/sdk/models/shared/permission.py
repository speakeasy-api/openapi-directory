"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionInput:
    r"""A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy."""
    
    allow_file_discovery: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowFileDiscovery'), 'exclude': lambda f: f is None }})
    r"""Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type domain or anyone."""  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The \\"pretty\\" name of the value of the permission. The following is a list of examples for each type of permission:
    - user - User's full name, as defined for their Google Account, such as \"Joe Smith.\" 
    - group - Name of the Google Group, such as \"The Company Administrators.\" 
    - domain - String domain name, such as \"your-company.com.\" 
    - anyone - No displayName is present.
    """  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The domain to which this permission refers. The following options are currently allowed:
    - The entire domain, such as \"your-company.com.\" 
    - A target audience, such as \"ID.audience.googledomains.com.\" 
    """  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""The email address of the user or group to which this permission refers."""  
    expiration_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions:
    - They cannot be set on shared drive items. 
    - They can only be set on user and group permissions. 
    - The time must be in the future. 
    - The time cannot be more than one year in the future.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as permissionId. IDs should be treated as opaque values."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"drive#permission\\"."""  
    pending_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingOwner'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission is a pending owner. Only populated for user type permissions for files that aren't in a shared drive."""  
    photo_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoLink'), 'exclude': lambda f: f is None }})
    r"""A link to the user's profile photo, if available."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role granted by this permission. While new values may be supported in the future, the following are currently allowed:
    - owner 
    - organizer 
    - fileOrganizer 
    - writer 
    - commenter 
    - reader
    """  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the grantee. Valid values are:
    - user 
    - group 
    - domain 
    - anyone  When creating a permission, if type is user or group, you must provide an emailAddress for the user or group. When type is domain, you must provide a domain. There isn't extra information required for the anyone type.
    """  
    view: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""Indicates the view for this permission. Only populated for permissions that belong to a view. published is the only supported value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionPermissionDetails:
    
    inherited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inherited'), 'exclude': lambda f: f is None }})
    r"""Whether this permission is inherited. This field is always populated. This is an output-only field."""  
    inherited_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritedFrom'), 'exclude': lambda f: f is None }})
    r"""The ID of the item from which this permission is inherited. This is an output-only field."""  
    permission_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionType'), 'exclude': lambda f: f is None }})
    r"""The permission type for this user. While new values may be added in future, the following are currently allowed:
    - file 
    - member
    """  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The primary role for this user. While new values may be added in the future, the following are currently allowed:
    - organizer 
    - fileOrganizer 
    - writer 
    - commenter 
    - reader
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionTeamDrivePermissionDetails:
    
    inherited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inherited'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/inherited instead."""  
    inherited_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritedFrom'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/inheritedFrom instead."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/role instead."""  
    team_drive_permission_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teamDrivePermissionType'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails/permissionType instead."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Permission:
    r"""A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy."""
    
    allow_file_discovery: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowFileDiscovery'), 'exclude': lambda f: f is None }})
    r"""Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type domain or anyone."""  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The \\"pretty\\" name of the value of the permission. The following is a list of examples for each type of permission:
    - user - User's full name, as defined for their Google Account, such as \"Joe Smith.\" 
    - group - Name of the Google Group, such as \"The Company Administrators.\" 
    - domain - String domain name, such as \"your-company.com.\" 
    - anyone - No displayName is present.
    """  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The domain to which this permission refers. The following options are currently allowed:
    - The entire domain, such as \"your-company.com.\" 
    - A target audience, such as \"ID.audience.googledomains.com.\" 
    """  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""The email address of the user or group to which this permission refers."""  
    expiration_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions:
    - They cannot be set on shared drive items. 
    - They can only be set on user and group permissions. 
    - The time must be in the future. 
    - The time cannot be more than one year in the future.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as permissionId. IDs should be treated as opaque values."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"drive#permission\\"."""  
    pending_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingOwner'), 'exclude': lambda f: f is None }})
    r"""Whether the account associated with this permission is a pending owner. Only populated for user type permissions for files that aren't in a shared drive."""  
    permission_details: Optional[list[PermissionPermissionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionDetails'), 'exclude': lambda f: f is None }})
    r"""Details of whether the permissions on this shared drive item are inherited or are directly on this item. This is an output-only field that's present only for shared drive items."""  
    photo_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoLink'), 'exclude': lambda f: f is None }})
    r"""A link to the user's profile photo, if available."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role granted by this permission. While new values may be supported in the future, the following are currently allowed:
    - owner 
    - organizer 
    - fileOrganizer 
    - writer 
    - commenter 
    - reader
    """  
    team_drive_permission_details: Optional[list[PermissionTeamDrivePermissionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teamDrivePermissionDetails'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use permissionDetails instead."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the grantee. Valid values are:
    - user 
    - group 
    - domain 
    - anyone  When creating a permission, if type is user or group, you must provide an emailAddress for the user or group. When type is domain, you must provide a domain. There isn't extra information required for the anyone type.
    """  
    view: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""Indicates the view for this permission. Only populated for permissions that belong to a view. published is the only supported value."""  
    