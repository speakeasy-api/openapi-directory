/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LiveBroadcastContentDetails - Detailed settings of a broadcast.
 */
public class LiveBroadcastContentDetails {
    /**
     * This value uniquely identifies the live stream bound to the broadcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boundStreamId")
    public String boundStreamId;

    public LiveBroadcastContentDetails withBoundStreamId(String boundStreamId) {
        this.boundStreamId = boundStreamId;
        return this;
    }
    
    /**
     * The date and time that the live stream referenced by boundStreamId was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("boundStreamLastUpdateTimeMs")
    public OffsetDateTime boundStreamLastUpdateTimeMs;

    public LiveBroadcastContentDetails withBoundStreamLastUpdateTimeMs(OffsetDateTime boundStreamLastUpdateTimeMs) {
        this.boundStreamLastUpdateTimeMs = boundStreamLastUpdateTimeMs;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closedCaptionsType")
    public LiveBroadcastContentDetailsClosedCaptionsTypeEnum closedCaptionsType;

    public LiveBroadcastContentDetails withClosedCaptionsType(LiveBroadcastContentDetailsClosedCaptionsTypeEnum closedCaptionsType) {
        this.closedCaptionsType = closedCaptionsType;
        return this;
    }
    
    /**
     * This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableAutoStart")
    public Boolean enableAutoStart;

    public LiveBroadcastContentDetails withEnableAutoStart(Boolean enableAutoStart) {
        this.enableAutoStart = enableAutoStart;
        return this;
    }
    
    /**
     * This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableAutoStop")
    public Boolean enableAutoStop;

    public LiveBroadcastContentDetails withEnableAutoStop(Boolean enableAutoStop) {
        this.enableAutoStop = enableAutoStop;
        return this;
    }
    
    /**
     * This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableClosedCaptions")
    public Boolean enableClosedCaptions;

    public LiveBroadcastContentDetails withEnableClosedCaptions(Boolean enableClosedCaptions) {
        this.enableClosedCaptions = enableClosedCaptions;
        return this;
    }
    
    /**
     * This setting indicates whether YouTube should enable content encryption for the broadcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableContentEncryption")
    public Boolean enableContentEncryption;

    public LiveBroadcastContentDetails withEnableContentEncryption(Boolean enableContentEncryption) {
        this.enableContentEncryption = enableContentEncryption;
        return this;
    }
    
    /**
     * This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableDvr")
    public Boolean enableDvr;

    public LiveBroadcastContentDetails withEnableDvr(Boolean enableDvr) {
        this.enableDvr = enableDvr;
        return this;
    }
    
    /**
     * This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableEmbed")
    public Boolean enableEmbed;

    public LiveBroadcastContentDetails withEnableEmbed(Boolean enableEmbed) {
        this.enableEmbed = enableEmbed;
        return this;
    }
    
    /**
     * Indicates whether this broadcast has low latency enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableLowLatency")
    public Boolean enableLowLatency;

    public LiveBroadcastContentDetails withEnableLowLatency(Boolean enableLowLatency) {
        this.enableLowLatency = enableLowLatency;
        return this;
    }
    
    /**
     * If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latencyPreference")
    public LiveBroadcastContentDetailsLatencyPreferenceEnum latencyPreference;

    public LiveBroadcastContentDetails withLatencyPreference(LiveBroadcastContentDetailsLatencyPreferenceEnum latencyPreference) {
        this.latencyPreference = latencyPreference;
        return this;
    }
    
    /**
     * The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mesh")
    public String mesh;

    public LiveBroadcastContentDetails withMesh(String mesh) {
        this.mesh = mesh;
        return this;
    }
    
    /**
     * Settings and Info of the monitor stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monitorStream")
    public MonitorStreamInfo monitorStream;

    public LiveBroadcastContentDetails withMonitorStream(MonitorStreamInfo monitorStream) {
        this.monitorStream = monitorStream;
        return this;
    }
    
    /**
     * The projection format of this broadcast. This defaults to rectangular.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projection")
    public LiveBroadcastContentDetailsProjectionEnum projection;

    public LiveBroadcastContentDetails withProjection(LiveBroadcastContentDetailsProjectionEnum projection) {
        this.projection = projection;
        return this;
    }
    
    /**
     * Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordFromStart")
    public Boolean recordFromStart;

    public LiveBroadcastContentDetails withRecordFromStart(Boolean recordFromStart) {
        this.recordFromStart = recordFromStart;
        return this;
    }
    
    /**
     * This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startWithSlate")
    public Boolean startWithSlate;

    public LiveBroadcastContentDetails withStartWithSlate(Boolean startWithSlate) {
        this.startWithSlate = startWithSlate;
        return this;
    }
    
    /**
     * The 3D stereo layout of this broadcast. This defaults to mono.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stereoLayout")
    public LiveBroadcastContentDetailsStereoLayoutEnum stereoLayout;

    public LiveBroadcastContentDetails withStereoLayout(LiveBroadcastContentDetailsStereoLayoutEnum stereoLayout) {
        this.stereoLayout = stereoLayout;
        return this;
    }
    
    public LiveBroadcastContentDetails(){}
}
