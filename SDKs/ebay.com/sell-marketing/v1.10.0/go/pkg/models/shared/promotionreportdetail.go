// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// PromotionReportDetail - This type defines the fields in a promotion-level report.
type PromotionReportDetail struct {
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	AverageItemDiscount *Amount `json:"averageItemDiscount,omitempty"`
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	AverageItemRevenue *Amount `json:"averageItemRevenue,omitempty"`
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	AverageOrderDiscount *Amount `json:"averageOrderDiscount,omitempty"`
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	AverageOrderRevenue *Amount `json:"averageOrderRevenue,omitempty"`
	// The average order size is the average number of items that each order contained in a promotion. This value is calculated as follows: itemsSoldQuantity / numberOfOrdersSold = averageOrderSize
	AverageOrderSize *string `json:"averageOrderSize,omitempty"`
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	BaseSale *Amount `json:"baseSale,omitempty"`
	// This is the quantity of items purchased in a threshold promotion where the threshold has been met and the discount was applied. For example, suppose you're running a &quot;Buy 1, get 1 at 50%&quot; promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your number of items sold (itemsSoldQuantity) would be 2 and you number of orders sold (numberOfOrdersSold) would be 1.
	ItemsSoldQuantity *int `json:"itemsSoldQuantity,omitempty"`
	// This is the number of orders sold in a threshold promotion where the threshold has been met and the discount was applied. For example, suppose you're running a &quot;Buy 1, get 1 at 50%&quot; promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your numberOfOrdersSold would be 1 and your itemsSoldQuantity would be 2.
	NumberOfOrdersSold *int `json:"numberOfOrdersSold,omitempty"`
	// The percentage sales lift is the total dollar amount gained due to promotions. This value is calculated as follows: promotionSale / totalSale = percentageSalesLift
	PercentageSalesLift *string `json:"percentageSalesLift,omitempty"`
	// The URI of the promotion report.
	PromotionHref *string `json:"promotionHref,omitempty"`
	// A unique eBay-assigned ID for the promotion that's generated when the promotion is created.
	PromotionID *string `json:"promotionId,omitempty"`
	// The unique eBay-assigned ID of the promotion report that is generated when the report is created.
	PromotionReportID *string `json:"promotionReportId,omitempty"`
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	PromotionSale *Amount `json:"promotionSale,omitempty"`
	// Indicates the type of the promotion, either CODED_COUPON, MARKDOWN_SALE, ORDER_DISCOUNT, or VOLUME_DISCOUNT. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>
	PromotionType *string `json:"promotionType,omitempty"`
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	TotalDiscount *Amount `json:"totalDiscount,omitempty"`
	// A complex type that describes the value of a monetary amount as represented by a global currency.
	TotalSale *Amount `json:"totalSale,omitempty"`
}
