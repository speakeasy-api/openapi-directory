// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateClientVpnRouteActionEnum
type GETCreateClientVpnRouteActionEnum string

const (
	GETCreateClientVpnRouteActionEnumCreateClientVpnRoute GETCreateClientVpnRouteActionEnum = "CreateClientVpnRoute"
)

func (e *GETCreateClientVpnRouteActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateClientVpnRoute":
		*e = GETCreateClientVpnRouteActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateClientVpnRouteActionEnum: %s", s)
	}
}

// GETCreateClientVpnRouteVersionEnum
type GETCreateClientVpnRouteVersionEnum string

const (
	GETCreateClientVpnRouteVersionEnumTwoThousandAndSixteen1115 GETCreateClientVpnRouteVersionEnum = "2016-11-15"
)

func (e *GETCreateClientVpnRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETCreateClientVpnRouteVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateClientVpnRouteVersionEnum: %s", s)
	}
}

type GETCreateClientVpnRouteRequest struct {
	Action GETCreateClientVpnRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
	ClientToken *string `queryParam:"style=form,explode=true,name=ClientToken"`
	// The ID of the Client VPN endpoint to which to add the route.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// A brief description of the route.
	Description *string `queryParam:"style=form,explode=true,name=Description"`
	// <p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p> <ul> <li> <p>To add a route for Internet access, enter <code>0.0.0.0/0</code> </p> </li> <li> <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p> </li> <li> <p>To add a route for an on-premises network, enter the Amazon Web Services Site-to-Site VPN connection's IPv4 CIDR range</p> </li> <li> <p>To add a route for the local network, enter the client CIDR range</p> </li> </ul>
	DestinationCidrBlock string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint.</p> <p>Alternatively, if you're adding a route for the local network, specify <code>local</code>.</p>
	TargetVpcSubnetID string                             `queryParam:"style=form,explode=true,name=TargetVpcSubnetId"`
	Version           GETCreateClientVpnRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateClientVpnRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
