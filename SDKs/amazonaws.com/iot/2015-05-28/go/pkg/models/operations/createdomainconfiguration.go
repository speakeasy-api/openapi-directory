// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateDomainConfigurationPathParams struct {
	// The name of the domain configuration. This value must be unique to a region.
	DomainConfigurationName string `pathParam:"style=simple,explode=false,name=domainConfigurationName"`
}

type CreateDomainConfigurationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateDomainConfigurationRequestBodyAuthorizerConfig - An object that specifies the authorization service for a domain.
type CreateDomainConfigurationRequestBodyAuthorizerConfig struct {
	AllowAuthorizerOverride *bool   `json:"allowAuthorizerOverride,omitempty"`
	DefaultAuthorizerName   *string `json:"defaultAuthorizerName,omitempty"`
}

// CreateDomainConfigurationRequestBodyServiceTypeEnum - <p>The type of service delivered by the endpoint.</p> <note> <p>Amazon Web Services IoT Core currently supports only the <code>DATA</code> service type.</p> </note>
type CreateDomainConfigurationRequestBodyServiceTypeEnum string

const (
	CreateDomainConfigurationRequestBodyServiceTypeEnumData               CreateDomainConfigurationRequestBodyServiceTypeEnum = "DATA"
	CreateDomainConfigurationRequestBodyServiceTypeEnumCredentialProvider CreateDomainConfigurationRequestBodyServiceTypeEnum = "CREDENTIAL_PROVIDER"
	CreateDomainConfigurationRequestBodyServiceTypeEnumJobs               CreateDomainConfigurationRequestBodyServiceTypeEnum = "JOBS"
)

func (e *CreateDomainConfigurationRequestBodyServiceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATA":
		fallthrough
	case "CREDENTIAL_PROVIDER":
		fallthrough
	case "JOBS":
		*e = CreateDomainConfigurationRequestBodyServiceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDomainConfigurationRequestBodyServiceTypeEnum: %s", s)
	}
}

type CreateDomainConfigurationRequestBody struct {
	// An object that specifies the authorization service for a domain.
	AuthorizerConfig *CreateDomainConfigurationRequestBodyAuthorizerConfig `json:"authorizerConfig,omitempty"`
	// The name of the domain.
	DomainName *string `json:"domainName,omitempty"`
	// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.
	ServerCertificateArns []string `json:"serverCertificateArns,omitempty"`
	// <p>The type of service delivered by the endpoint.</p> <note> <p>Amazon Web Services IoT Core currently supports only the <code>DATA</code> service type.</p> </note>
	ServiceType *CreateDomainConfigurationRequestBodyServiceTypeEnum `json:"serviceType,omitempty"`
	// <p>Metadata which can be used to manage the domain configuration.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
	Tags []shared.Tag `json:"tags,omitempty"`
	// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
	ValidationCertificateArn *string `json:"validationCertificateArn,omitempty"`
}

type CreateDomainConfigurationRequest struct {
	PathParams CreateDomainConfigurationPathParams
	Headers    CreateDomainConfigurationHeaders
	Request    CreateDomainConfigurationRequestBody `request:"mediaType=application/json"`
}

type CreateDomainConfigurationResponse struct {
	// CertificateValidationException
	CertificateValidationException interface{}
	ContentType                    string
	// Success
	CreateDomainConfigurationResponse *shared.CreateDomainConfigurationResponse
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
