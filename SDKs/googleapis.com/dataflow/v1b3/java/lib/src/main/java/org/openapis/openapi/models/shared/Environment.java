/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Environment - Describes the environment in which a Dataflow Job runs.
 */
public class Environment {
    /**
     * The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterManagerApiService")
    public String clusterManagerApiService;
    public Environment withClusterManagerApiService(String clusterManagerApiService) {
        this.clusterManagerApiService = clusterManagerApiService;
        return this;
    }
    
    /**
     * The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset")
    public String dataset;
    public Environment withDataset(String dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * Describes any options that have an effect on the debugging of pipelines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debugOptions")
    public DebugOptions debugOptions;
    public Environment withDebugOptions(DebugOptions debugOptions) {
        this.debugOptions = debugOptions;
        return this;
    }
    
    /**
     * The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experiments")
    public String[] experiments;
    public Environment withExperiments(String[] experiments) {
        this.experiments = experiments;
        return this;
    }
    
    /**
     * Which Flexible Resource Scheduling mode to run in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flexResourceSchedulingGoal")
    public EnvironmentFlexResourceSchedulingGoalEnum flexResourceSchedulingGoal;
    public Environment withFlexResourceSchedulingGoal(EnvironmentFlexResourceSchedulingGoalEnum flexResourceSchedulingGoal) {
        this.flexResourceSchedulingGoal = flexResourceSchedulingGoal;
        return this;
    }
    
    /**
     * Experimental settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internalExperiments")
    public java.util.Map<String, Object> internalExperiments;
    public Environment withInternalExperiments(java.util.Map<String, Object> internalExperiments) {
        this.internalExperiments = internalExperiments;
        return this;
    }
    
    /**
     * The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sdkPipelineOptions")
    public java.util.Map<String, Object> sdkPipelineOptions;
    public Environment withSDKPipelineOptions(java.util.Map<String, Object> sdkPipelineOptions) {
        this.sdkPipelineOptions = sdkPipelineOptions;
        return this;
    }
    
    /**
     * Identity to run virtual machines as. Defaults to the default account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccountEmail")
    public String serviceAccountEmail;
    public Environment withServiceAccountEmail(String serviceAccountEmail) {
        this.serviceAccountEmail = serviceAccountEmail;
        return this;
    }
    
    /**
     * If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceKmsKeyName")
    public String serviceKmsKeyName;
    public Environment withServiceKmsKeyName(String serviceKmsKeyName) {
        this.serviceKmsKeyName = serviceKmsKeyName;
        return this;
    }
    
    /**
     * The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceOptions")
    public String[] serviceOptions;
    public Environment withServiceOptions(String[] serviceOptions) {
        this.serviceOptions = serviceOptions;
        return this;
    }
    
    /**
     * Output only. The shuffle mode used for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shuffleMode")
    public EnvironmentShuffleModeEnum shuffleMode;
    public Environment withShuffleMode(EnvironmentShuffleModeEnum shuffleMode) {
        this.shuffleMode = shuffleMode;
        return this;
    }
    
    /**
     * The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tempStoragePrefix")
    public String tempStoragePrefix;
    public Environment withTempStoragePrefix(String tempStoragePrefix) {
        this.tempStoragePrefix = tempStoragePrefix;
        return this;
    }
    
    /**
     * A description of the process that generated the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgent")
    public java.util.Map<String, Object> userAgent;
    public Environment withUserAgent(java.util.Map<String, Object> userAgent) {
        this.userAgent = userAgent;
        return this;
    }
    
    /**
     * A structure describing which components and their versions of the service are required in order to run the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public java.util.Map<String, Object> version;
    public Environment withVersion(java.util.Map<String, Object> version) {
        this.version = version;
        return this;
    }
    
    /**
     * The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerPools")
    public WorkerPool[] workerPools;
    public Environment withWorkerPools(WorkerPool[] workerPools) {
        this.workerPools = workerPools;
        return this;
    }
    
    /**
     * The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerRegion")
    public String workerRegion;
    public Environment withWorkerRegion(String workerRegion) {
        this.workerRegion = workerRegion;
        return this;
    }
    
    /**
     * The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerZone")
    public String workerZone;
    public Environment withWorkerZone(String workerZone) {
        this.workerZone = workerZone;
        return this;
    }
    
}
