/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Relationship - Represents the relationship between accounts, such as following / blocking / muting / etc.
 * https://docs.joinmastodon.org/entities/relationship/
 */
public class Relationship {
    /**
     * Is this user blocking you?
     */
    @JsonProperty("blocked_by")
    public Boolean blockedBy;
    public Relationship withBlockedBy(Boolean blockedBy) {
        this.blockedBy = blockedBy;
        return this;
    }
    
    /**
     * Are you blocking this user?
     */
    @JsonProperty("blocking")
    public Boolean blocking;
    public Relationship withBlocking(Boolean blocking) {
        this.blocking = blocking;
        return this;
    }
    
    /**
     * Are you blocking this user's domain?
     */
    @JsonProperty("domain_blocking")
    public Boolean domainBlocking;
    public Relationship withDomainBlocking(Boolean domainBlocking) {
        this.domainBlocking = domainBlocking;
        return this;
    }
    
    /**
     * Are you featuring this user on your profile?
     */
    @JsonProperty("endorsed")
    public Boolean endorsed;
    public Relationship withEndorsed(Boolean endorsed) {
        this.endorsed = endorsed;
        return this;
    }
    
    /**
     * Are you followed by this user?
     */
    @JsonProperty("followed_by")
    public Boolean followedBy;
    public Relationship withFollowedBy(Boolean followedBy) {
        this.followedBy = followedBy;
        return this;
    }
    
    /**
     * Are you following this user?
     */
    @JsonProperty("following")
    public Boolean following;
    public Relationship withFollowing(Boolean following) {
        this.following = following;
        return this;
    }
    
    /**
     * The account id. Cast from an integer, but not guaranteed to be a number.
     */
    @JsonProperty("id")
    public String id;
    public Relationship withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Are you muting this user?
     */
    @JsonProperty("muting")
    public Boolean muting;
    public Relationship withMuting(Boolean muting) {
        this.muting = muting;
        return this;
    }
    
    /**
     * Are you muting notifications from this user?
     */
    @JsonProperty("muting_notifications")
    public Boolean mutingNotifications;
    public Relationship withMutingNotifications(Boolean mutingNotifications) {
        this.mutingNotifications = mutingNotifications;
        return this;
    }
    
    /**
     * This user's profile bio
     */
    @JsonProperty("note")
    public String note;
    public Relationship withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Have you enabled notifications for this user?
     */
    @JsonProperty("notifying")
    public Boolean notifying;
    public Relationship withNotifying(Boolean notifying) {
        this.notifying = notifying;
        return this;
    }
    
    /**
     * Do you have a pending follow request for this user?
     */
    @JsonProperty("requested")
    public Boolean requested;
    public Relationship withRequested(Boolean requested) {
        this.requested = requested;
        return this;
    }
    
    /**
     * Are you receiving this user's boosts in your home timeline?
     */
    @JsonProperty("showing_reblogs")
    public Boolean showingReblogs;
    public Relationship withShowingReblogs(Boolean showingReblogs) {
        this.showingReblogs = showingReblogs;
        return this;
    }
    
}
