"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Commitment = exports.CommitmentTypeEnum = exports.CommitmentStatusEnum = exports.CommitmentPlanEnum = exports.CommitmentCategoryEnum = void 0;
var utils_1 = require("../../../internal/utils");
var licenseresourcecommitment_1 = require("./licenseresourcecommitment");
var reservation_1 = require("./reservation");
var resourcecommitment_1 = require("./resourcecommitment");
var class_transformer_1 = require("class-transformer");
/**
 * The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
 */
var CommitmentCategoryEnum;
(function (CommitmentCategoryEnum) {
    CommitmentCategoryEnum["CategoryUnspecified"] = "CATEGORY_UNSPECIFIED";
    CommitmentCategoryEnum["License"] = "LICENSE";
    CommitmentCategoryEnum["Machine"] = "MACHINE";
})(CommitmentCategoryEnum = exports.CommitmentCategoryEnum || (exports.CommitmentCategoryEnum = {}));
/**
 * The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
 */
var CommitmentPlanEnum;
(function (CommitmentPlanEnum) {
    CommitmentPlanEnum["Invalid"] = "INVALID";
    CommitmentPlanEnum["ThirtySixMonth"] = "THIRTY_SIX_MONTH";
    CommitmentPlanEnum["TwelveMonth"] = "TWELVE_MONTH";
})(CommitmentPlanEnum = exports.CommitmentPlanEnum || (exports.CommitmentPlanEnum = {}));
/**
 * [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
 */
var CommitmentStatusEnum;
(function (CommitmentStatusEnum) {
    CommitmentStatusEnum["Active"] = "ACTIVE";
    CommitmentStatusEnum["Cancelled"] = "CANCELLED";
    CommitmentStatusEnum["Creating"] = "CREATING";
    CommitmentStatusEnum["Expired"] = "EXPIRED";
    CommitmentStatusEnum["NotYetActive"] = "NOT_YET_ACTIVE";
})(CommitmentStatusEnum = exports.CommitmentStatusEnum || (exports.CommitmentStatusEnum = {}));
/**
 * The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
 */
var CommitmentTypeEnum;
(function (CommitmentTypeEnum) {
    CommitmentTypeEnum["AcceleratorOptimized"] = "ACCELERATOR_OPTIMIZED";
    CommitmentTypeEnum["ComputeOptimized"] = "COMPUTE_OPTIMIZED";
    CommitmentTypeEnum["ComputeOptimizedC2D"] = "COMPUTE_OPTIMIZED_C2D";
    CommitmentTypeEnum["ComputeOptimizedC3"] = "COMPUTE_OPTIMIZED_C3";
    CommitmentTypeEnum["GeneralPurpose"] = "GENERAL_PURPOSE";
    CommitmentTypeEnum["GeneralPurposeE2"] = "GENERAL_PURPOSE_E2";
    CommitmentTypeEnum["GeneralPurposeN2"] = "GENERAL_PURPOSE_N2";
    CommitmentTypeEnum["GeneralPurposeN2D"] = "GENERAL_PURPOSE_N2D";
    CommitmentTypeEnum["GeneralPurposeT2D"] = "GENERAL_PURPOSE_T2D";
    CommitmentTypeEnum["GraphicsOptimized"] = "GRAPHICS_OPTIMIZED";
    CommitmentTypeEnum["MemoryOptimized"] = "MEMORY_OPTIMIZED";
    CommitmentTypeEnum["MemoryOptimizedM3"] = "MEMORY_OPTIMIZED_M3";
    CommitmentTypeEnum["TypeUnspecified"] = "TYPE_UNSPECIFIED";
})(CommitmentTypeEnum = exports.CommitmentTypeEnum || (exports.CommitmentTypeEnum = {}));
/**
 * Represents a regional Commitment resource. Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts.
 */
var Commitment = /** @class */ (function (_super) {
    __extends(Commitment, _super);
    function Commitment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoRenew" }),
        __metadata("design:type", Boolean)
    ], Commitment.prototype, "autoRenew", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "category" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "endTimestamp" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "endTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "licenseResource" }),
        (0, class_transformer_1.Type)(function () { return licenseresourcecommitment_1.LicenseResourceCommitment; }),
        __metadata("design:type", licenseresourcecommitment_1.LicenseResourceCommitment)
    ], Commitment.prototype, "licenseResource", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mergeSourceCommitments" }),
        __metadata("design:type", Array)
    ], Commitment.prototype, "mergeSourceCommitments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "plan" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "plan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: reservation_1.Reservation }),
        (0, class_transformer_1.Expose)({ name: "reservations" }),
        (0, class_transformer_1.Type)(function () { return reservation_1.Reservation; }),
        __metadata("design:type", Array)
    ], Commitment.prototype, "reservations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: resourcecommitment_1.ResourceCommitment }),
        (0, class_transformer_1.Expose)({ name: "resources" }),
        (0, class_transformer_1.Type)(function () { return resourcecommitment_1.ResourceCommitment; }),
        __metadata("design:type", Array)
    ], Commitment.prototype, "resources", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLinkWithId" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "selfLinkWithId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "splitSourceCommitment" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "splitSourceCommitment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startTimestamp" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "startTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "statusMessage" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "statusMessage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Commitment.prototype, "type", void 0);
    return Commitment;
}(utils_1.SpeakeasyBase));
exports.Commitment = Commitment;
