// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// InjuredPlayersByCompetitionFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type InjuredPlayersByCompetitionFormatEnum string

const (
	InjuredPlayersByCompetitionFormatEnumXML  InjuredPlayersByCompetitionFormatEnum = "xml"
	InjuredPlayersByCompetitionFormatEnumJSON InjuredPlayersByCompetitionFormatEnum = "json"
)

func (e *InjuredPlayersByCompetitionFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "xml":
		fallthrough
	case "json":
		*e = InjuredPlayersByCompetitionFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InjuredPlayersByCompetitionFormatEnum: %s", s)
	}
}

type InjuredPlayersByCompetitionRequest struct {
	// An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
	Competition string `pathParam:"style=simple,explode=false,name=competition"`
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format InjuredPlayersByCompetitionFormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type InjuredPlayersByCompetitionResponse struct {
	ContentType string
	Players     []shared.Player
	StatusCode  int
	RawResponse *http.Response
}
