"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Licenses:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def assign_organization_licenses_seats(self, request: operations.AssignOrganizationLicensesSeatsRequest) -> operations.AssignOrganizationLicensesSeatsResponse:
        r"""Assign SM seats to a network
        Assign SM seats to a network. This will increase the managed SM device limit of the network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AssignOrganizationLicensesSeatsRequest, base_url, '/organizations/{organizationId}/licenses/assignSeats', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AssignOrganizationLicensesSeatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.assign_organization_licenses_seats_200_application_json_object = out

        return res

    def get_organization_license(self, request: operations.GetOrganizationLicenseRequest) -> operations.GetOrganizationLicenseResponse:
        r"""Display a license
        Display a license
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationLicenseRequest, base_url, '/organizations/{organizationId}/licenses/{licenseId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationLicenseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_license_200_application_json_object = out

        return res

    def get_organization_license_state(self, request: operations.GetOrganizationLicenseStateRequest) -> operations.GetOrganizationLicenseStateResponse:
        r"""Return an overview of the license state for an organization
        Return an overview of the license state for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationLicenseStateRequest, base_url, '/organizations/{organizationId}/licenseState', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationLicenseStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_license_state_200_application_json_object = out

        return res

    def get_organization_licenses(self, request: operations.GetOrganizationLicensesRequest) -> operations.GetOrganizationLicensesResponse:
        r"""List the licenses for an organization
        List the licenses for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationLicensesRequest, base_url, '/organizations/{organizationId}/licenses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationLicensesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationLicensesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_licenses_200_application_json_objects = out

        return res

    def move_organization_licenses_seats(self, request: operations.MoveOrganizationLicensesSeatsRequest) -> operations.MoveOrganizationLicensesSeatsResponse:
        r"""Move SM seats to another organization
        Move SM seats to another organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MoveOrganizationLicensesSeatsRequest, base_url, '/organizations/{organizationId}/licenses/moveSeats', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MoveOrganizationLicensesSeatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.move_organization_licenses_seats_200_application_json_object = out

        return res

    def renew_organization_licenses_seats(self, request: operations.RenewOrganizationLicensesSeatsRequest) -> operations.RenewOrganizationLicensesSeatsResponse:
        r"""Renew SM seats of a license
        Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RenewOrganizationLicensesSeatsRequest, base_url, '/organizations/{organizationId}/licenses/renewSeats', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RenewOrganizationLicensesSeatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.renew_organization_licenses_seats_200_application_json_object = out

        return res

    