"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tagging:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_cis_instruction_tag(self, request: operations.DeleteCisInstructionTagRequest) -> operations.DeleteCisInstructionTagResponse:
        r"""Delete CIS instruction tag
        Deletes a tag from the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisInstructionTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisInstructionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_line_tag(self, request: operations.DeleteCisLineTagRequest) -> operations.DeleteCisLineTagResponse:
        r"""Delete CIS line tag
        Deletes a tag from the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisLineTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_cis_line_type_tag(self, request: operations.DeleteCisLineTypeTagRequest) -> operations.DeleteCisLineTypeTagResponse:
        r"""Delete CIS line type tag
        Deletes a tag from the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCisLineTypeTagRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCisLineTypeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_employee_tag(self, request: operations.DeleteEmployeeTagRequest) -> operations.DeleteEmployeeTagResponse:
        r"""Delete employee tag
        Deletes a tag from the employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteEmployeeTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteEmployeeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_employer_tag(self, request: operations.DeleteEmployerTagRequest) -> operations.DeleteEmployerTagResponse:
        r"""Delete employer tag
        Deletes a tag from the employer
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteEmployerTagRequest, base_url, '/Employer/{EmployerId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteEmployerTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_holiday_scheme_tag(self, request: operations.DeleteHolidaySchemeTagRequest) -> operations.DeleteHolidaySchemeTagResponse:
        r"""Delete holiday scheme tag
        Deletes a tag from the holiday scheme
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteHolidaySchemeTagRequest, base_url, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteHolidaySchemeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_journal_line_tag(self, request: operations.DeleteJournalLineTagRequest) -> operations.DeleteJournalLineTagResponse:
        r"""Delete journal line tag
        Deletes a tag from the journal line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteJournalLineTagRequest, base_url, '/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteJournalLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_pay_code_tag(self, request: operations.DeletePayCodeTagRequest) -> operations.DeletePayCodeTagResponse:
        r"""Delete pay code tag
        Deletes a tag from the pay code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayCodeTagRequest, base_url, '/Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayCodeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_pay_instruction_tag(self, request: operations.DeletePayInstructionTagRequest) -> operations.DeletePayInstructionTagResponse:
        r"""Delete pay instruction tag
        Deletes a tag from the pay instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayInstructionTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayInstructionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_pay_line_tag(self, request: operations.DeletePayLineTagRequest) -> operations.DeletePayLineTagResponse:
        r"""Delete pay line tag
        Deletes a tag from the pay line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayLineTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_pay_run_tag(self, request: operations.DeletePayRunTagRequest) -> operations.DeletePayRunTagResponse:
        r"""Delete pay run tag
        Deletes a tag from the pay run
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayRunTagRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayRunTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_pay_schedule_tag(self, request: operations.DeletePayScheduleTagRequest) -> operations.DeletePayScheduleTagResponse:
        r"""Delete pay schedule tag
        Deletes a tag from the pay schedule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayScheduleTagRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayScheduleTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_permission_tag(self, request: operations.DeletePermissionTagRequest) -> operations.DeletePermissionTagResponse:
        r"""Delete Permission tag
        Deletes a tag from the Permission
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePermissionTagRequest, base_url, '/Permission/{PermissionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePermissionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_rti_transaction_tag(self, request: operations.DeleteRtiTransactionTagRequest) -> operations.DeleteRtiTransactionTagResponse:
        r"""Delete RTI transaction tag
        Deletes a tag from the RTI transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRtiTransactionTagRequest, base_url, '/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRtiTransactionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_sub_contractor_tag(self, request: operations.DeleteSubContractorTagRequest) -> operations.DeleteSubContractorTagResponse:
        r"""Delete sub contractor tag
        Deletes a tag from the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSubContractorTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubContractorTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_third_party_transaction_tag(self, request: operations.DeleteThirdPartyTransactionTagRequest) -> operations.DeleteThirdPartyTransactionTagResponse:
        r"""Delete third party transaction tag
        Deletes a tag from the third party transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteThirdPartyTransactionTagRequest, base_url, '/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteThirdPartyTransactionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def delete_user_tag(self, request: operations.DeleteUserTagRequest) -> operations.DeleteUserTagResponse:
        r"""Delete user tag
        Deletes a tag from the user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserTagRequest, base_url, '/User/{UserId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_cis_instruction_tags(self, request: operations.GetAllCisInstructionTagsRequest) -> operations.GetAllCisInstructionTagsResponse:
        r"""Get all CIS instruction tags
        Gets all the CIS instruction tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllCisInstructionTagsRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllCisInstructionTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_cis_line_tags(self, request: operations.GetAllCisLineTagsRequest) -> operations.GetAllCisLineTagsResponse:
        r"""Get all CIS line tags
        Gets all the CIS line tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllCisLineTagsRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllCisLineTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_cis_line_type_tags(self, request: operations.GetAllCisLineTypeTagsRequest) -> operations.GetAllCisLineTypeTagsResponse:
        r"""Get all CIS line type tags
        Gets all the CIS line type tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllCisLineTypeTagsRequest, base_url, '/Employer/{EmployerId}/CisLineTypes/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllCisLineTypeTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_employee_tags(self, request: operations.GetAllEmployeeTagsRequest) -> operations.GetAllEmployeeTagsResponse:
        r"""Get all employee tags
        Gets all the employee tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllEmployeeTagsRequest, base_url, '/Employer/{EmployerId}/Employees/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllEmployeeTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_employer_tags(self, request: operations.GetAllEmployerTagsRequest) -> operations.GetAllEmployerTagsResponse:
        r"""Get all employer tags
        Gets all the employer tags
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Employers/Tags'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllEmployerTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_holiday_scheme_tags(self, request: operations.GetAllHolidaySchemeTagsRequest) -> operations.GetAllHolidaySchemeTagsResponse:
        r"""Get all holiday scheme tags
        Gets all the holiday scheme tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllHolidaySchemeTagsRequest, base_url, '/Employer/{EmployerId}/HolidaySchemes/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllHolidaySchemeTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_journal_line_tags(self, request: operations.GetAllJournalLineTagsRequest) -> operations.GetAllJournalLineTagsResponse:
        r"""Get all journal line tags
        Gets all the journal line tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllJournalLineTagsRequest, base_url, '/Employer/{EmployerId}/JournalLines/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllJournalLineTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_journal_lines_with_tag(self, request: operations.GetAllJournalLinesWithTagRequest) -> operations.GetAllJournalLinesWithTagResponse:
        r"""Get links to tagged journal lines
        Gets the journal lines with the specified tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllJournalLinesWithTagRequest, base_url, '/Employer/{EmployerId}/JournalLines/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllJournalLinesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_pay_code_tags(self, request: operations.GetAllPayCodeTagsRequest) -> operations.GetAllPayCodeTagsResponse:
        r"""Get all pay code tags
        Gets all the pay code tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllPayCodeTagsRequest, base_url, '/Employer/{EmployerId}/PayCodes/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPayCodeTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_pay_instruction_tags(self, request: operations.GetAllPayInstructionTagsRequest) -> operations.GetAllPayInstructionTagsResponse:
        r"""Get all pay instruction tags
        Gets all the pay instruction tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllPayInstructionTagsRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPayInstructionTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_pay_line_tags(self, request: operations.GetAllPayLineTagsRequest) -> operations.GetAllPayLineTagsResponse:
        r"""Get all pay line tags
        Gets all the pay line tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllPayLineTagsRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayLines/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPayLineTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_pay_run_tags(self, request: operations.GetAllPayRunTagsRequest) -> operations.GetAllPayRunTagsResponse:
        r"""Get all pay run tags
        Gets all the pay run tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllPayRunTagsRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPayRunTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_pay_schedule_tags(self, request: operations.GetAllPayScheduleTagsRequest) -> operations.GetAllPayScheduleTagsResponse:
        r"""Get all pay schedule tags
        Gets all the pay schedule tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllPayScheduleTagsRequest, base_url, '/Employer/{EmployerId}/PaySchedules/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPayScheduleTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_permission_tags(self, request: operations.GetAllPermissionTagsRequest) -> operations.GetAllPermissionTagsResponse:
        r"""Get all Permission tags
        Get all tags from all Permissions
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Permissions/Tags'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPermissionTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_permissions_with_tag(self, request: operations.GetAllPermissionsWithTagRequest) -> operations.GetAllPermissionsWithTagResponse:
        r"""Get links to tagged Permissions
        Gets the Permissions with the specified tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllPermissionsWithTagRequest, base_url, '/Permissions/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPermissionsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_rti_transaction_tags(self, request: operations.GetAllRtiTransactionTagsRequest) -> operations.GetAllRtiTransactionTagsResponse:
        r"""Get all RTI transaction tags
        Gets all the RTI transaction tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllRtiTransactionTagsRequest, base_url, '/Employer/{EmployerId}/RtiTransactions/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllRtiTransactionTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_sub_contractor_tags(self, request: operations.GetAllSubContractorTagsRequest) -> operations.GetAllSubContractorTagsResponse:
        r"""Get all sub contractor tags
        Gets all the sub contractor tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllSubContractorTagsRequest, base_url, '/Employer/{EmployerId}/SubContractors/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllSubContractorTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_third_party_transaction_tags(self, request: operations.GetAllThirdPartyTransactionTagsRequest) -> operations.GetAllThirdPartyTransactionTagsResponse:
        r"""Get all third party transaction tags
        Gets all the third party transaction tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllThirdPartyTransactionTagsRequest, base_url, '/Employer/{EmployerId}/ThirdPartyTransactions/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllThirdPartyTransactionTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_third_party_transactions_with_tag(self, request: operations.GetAllThirdPartyTransactionsWithTagRequest) -> operations.GetAllThirdPartyTransactionsWithTagResponse:
        r"""Get links to tagged third party transactions
        Gets the third party transactions with the specified tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllThirdPartyTransactionsWithTagRequest, base_url, '/Employer/{EmployerId}/ThirdPartyTransactions/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllThirdPartyTransactionsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_user_tags(self, request: operations.GetAllUserTagsRequest) -> operations.GetAllUserTagsResponse:
        r"""Get all user tags
        Get all tags from all users
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Users/Tags'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllUserTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_users_with_tag(self, request: operations.GetAllUsersWithTagRequest) -> operations.GetAllUsersWithTagResponse:
        r"""Get links to tagged users
        Gets the users with the specified tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllUsersWithTagRequest, base_url, '/Users/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllUsersWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_instructions_with_tag(self, request: operations.GetCisInstructionsWithTagRequest) -> operations.GetCisInstructionsWithTagResponse:
        r"""Get CIS instructions with tag
        Gets the CIS instruction with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisInstructionsWithTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisInstructionsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_line_types_with_tag(self, request: operations.GetCisLineTypesWithTagRequest) -> operations.GetCisLineTypesWithTagResponse:
        r"""Get CIS line types with tag
        Gets the CIS line type with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLineTypesWithTagRequest, base_url, '/Employer/{EmployerId}/CisLineTypes/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLineTypesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_cis_lines_with_tag(self, request: operations.GetCisLinesWithTagRequest) -> operations.GetCisLinesWithTagResponse:
        r"""Get CIS lines with tag
        Gets the CIS line with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCisLinesWithTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCisLinesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_employees_with_tag(self, request: operations.GetEmployeesWithTagRequest) -> operations.GetEmployeesWithTagResponse:
        r"""Get employees with tag
        Gets the employees with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmployeesWithTagRequest, base_url, '/Employer/{EmployerId}/Employees/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmployeesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_employers_with_tag(self, request: operations.GetEmployersWithTagRequest) -> operations.GetEmployersWithTagResponse:
        r"""Get employers with tag
        Gets the employers with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmployersWithTagRequest, base_url, '/Employers/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmployersWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_holiday_schemes_with_tag(self, request: operations.GetHolidaySchemesWithTagRequest) -> operations.GetHolidaySchemesWithTagResponse:
        r"""Get holiday schemes with tag
        Gets the holiday scheme with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHolidaySchemesWithTagRequest, base_url, '/Employer/{EmployerId}/HolidaySchemes/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHolidaySchemesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_codes_with_tag(self, request: operations.GetPayCodesWithTagRequest) -> operations.GetPayCodesWithTagResponse:
        r"""Get pay codes with tag
        Gets the pay codes with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayCodesWithTagRequest, base_url, '/Employer/{EmployerId}/PayCodes/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayCodesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_instructions_with_tag(self, request: operations.GetPayInstructionsWithTagRequest) -> operations.GetPayInstructionsWithTagResponse:
        r"""Get pay instructions with tag
        Gets the pay instructions with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayInstructionsWithTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayInstructionsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_lines_with_tag(self, request: operations.GetPayLinesWithTagRequest) -> operations.GetPayLinesWithTagResponse:
        r"""Get pay lines with tag
        Gets the pay line with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayLinesWithTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayLines/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayLinesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_runs_with_tag(self, request: operations.GetPayRunsWithTagRequest) -> operations.GetPayRunsWithTagResponse:
        r"""Get pay runs with tag
        Gets the pay runs with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayRunsWithTagRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayRunsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_schedules_with_tag(self, request: operations.GetPaySchedulesWithTagRequest) -> operations.GetPaySchedulesWithTagResponse:
        r"""Get pay schedule with tag
        Gets the pay schedules with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaySchedulesWithTagRequest, base_url, '/Employer/{EmployerId}/PaySchedules/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaySchedulesWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_rti_transactions_with_tag(self, request: operations.GetRtiTransactionsWithTagRequest) -> operations.GetRtiTransactionsWithTagResponse:
        r"""Get RTI transactions with tag
        Gets the RTI transactions with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRtiTransactionsWithTagRequest, base_url, '/Employer/{EmployerId}/RtiTransactions/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRtiTransactionsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_sub_contractors_with_tag(self, request: operations.GetSubContractorsWithTagRequest) -> operations.GetSubContractorsWithTagResponse:
        r"""Get sub contractors with tag
        Gets the sub contractor with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubContractorsWithTagRequest, base_url, '/Employer/{EmployerId}/SubContractors/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubContractorsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_cis_instruction(self, request: operations.GetTagFromCisInstructionRequest) -> operations.GetTagFromCisInstructionResponse:
        r"""Get CIS instruction tag
        Gets the tag from the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromCisInstructionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromCisInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_cis_line(self, request: operations.GetTagFromCisLineRequest) -> operations.GetTagFromCisLineResponse:
        r"""Get CIS line tag
        Gets the tag from the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromCisLineRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromCisLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_cis_line_type(self, request: operations.GetTagFromCisLineTypeRequest) -> operations.GetTagFromCisLineTypeResponse:
        r"""Get CIS line type tag
        Gets the tag from the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromCisLineTypeRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromCisLineTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_employee(self, request: operations.GetTagFromEmployeeRequest) -> operations.GetTagFromEmployeeResponse:
        r"""Get employee tag
        Gets the tag from the employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromEmployeeRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_employee_revision(self, request: operations.GetTagFromEmployeeRevisionRequest) -> operations.GetTagFromEmployeeRevisionResponse:
        r"""Get employee revision tag
        Gets the tag from the employee revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromEmployeeRevisionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromEmployeeRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_employer(self, request: operations.GetTagFromEmployerRequest) -> operations.GetTagFromEmployerResponse:
        r"""Get employer tag
        Gets the tag from the employer
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromEmployerRequest, base_url, '/Employer/{EmployerId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_employer_revision(self, request: operations.GetTagFromEmployerRevisionRequest) -> operations.GetTagFromEmployerRevisionResponse:
        r"""Get employer revision tag
        Gets the tag from the employer revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromEmployerRevisionRequest, base_url, '/Employer/{EmployerId}/Tag/{TagId}/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromEmployerRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_holiday_scheme(self, request: operations.GetTagFromHolidaySchemeRequest) -> operations.GetTagFromHolidaySchemeResponse:
        r"""Get holiday scheme tag
        Gets the tag from the holiday scheme
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromHolidaySchemeRequest, base_url, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromHolidaySchemeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_holiday_scheme_revision(self, request: operations.GetTagFromHolidaySchemeRevisionRequest) -> operations.GetTagFromHolidaySchemeRevisionResponse:
        r"""Get holiday scheme revision tag
        Gets the tag from the holiday scheme revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromHolidaySchemeRevisionRequest, base_url, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromHolidaySchemeRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_journal_line(self, request: operations.GetTagFromJournalLineRequest) -> operations.GetTagFromJournalLineResponse:
        r"""Get journal line tag
        Gets a tag from the journal line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromJournalLineRequest, base_url, '/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromJournalLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_pay_code(self, request: operations.GetTagFromPayCodeRequest) -> operations.GetTagFromPayCodeResponse:
        r"""Get pay code tag
        Gets the tag from the pay code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromPayCodeRequest, base_url, '/Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromPayCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_pay_instruction(self, request: operations.GetTagFromPayInstructionRequest) -> operations.GetTagFromPayInstructionResponse:
        r"""Get pay instruction tag
        Gets the tag from the pay instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromPayInstructionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromPayInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_pay_line(self, request: operations.GetTagFromPayLineRequest) -> operations.GetTagFromPayLineResponse:
        r"""Get pay line tag
        Gets the tag from the pay line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromPayLineRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromPayLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_pay_run(self, request: operations.GetTagFromPayRunRequest) -> operations.GetTagFromPayRunResponse:
        r"""Get pay run tag
        Gets the tag from the pay run
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromPayRunRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromPayRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_pay_schedule(self, request: operations.GetTagFromPayScheduleRequest) -> operations.GetTagFromPayScheduleResponse:
        r"""Get pay schedule tag
        Gets the tag from the pay schedule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromPayScheduleRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromPayScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_permission(self, request: operations.GetTagFromPermissionRequest) -> operations.GetTagFromPermissionResponse:
        r"""Get Permission tag
        Gets a tag from the Permission
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromPermissionRequest, base_url, '/Permission/{PermissionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_rti_transaction(self, request: operations.GetTagFromRtiTransactionRequest) -> operations.GetTagFromRtiTransactionResponse:
        r"""Get RTI transaction tag
        Gets the tag from the RTI transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromRtiTransactionRequest, base_url, '/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromRtiTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_sub_contractor(self, request: operations.GetTagFromSubContractorRequest) -> operations.GetTagFromSubContractorResponse:
        r"""Get sub contractor tag
        Gets the tag from the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_sub_contractor_revision(self, request: operations.GetTagFromSubContractorRevisionRequest) -> operations.GetTagFromSubContractorRevisionResponse:
        r"""Get sub contractor revision tag
        Gets the tag from the sub contractor revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromSubContractorRevisionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromSubContractorRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_third_party_transaction(self, request: operations.GetTagFromThirdPartyTransactionRequest) -> operations.GetTagFromThirdPartyTransactionResponse:
        r"""Get third party transaction tag
        Gets a tag from the third party transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromThirdPartyTransactionRequest, base_url, '/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromThirdPartyTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tag_from_user(self, request: operations.GetTagFromUserRequest) -> operations.GetTagFromUserResponse:
        r"""Get user tag
        Gets a tag from the user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagFromUserRequest, base_url, '/User/{UserId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagFromUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_cis_instruction(self, request: operations.GetTagsFromCisInstructionRequest) -> operations.GetTagsFromCisInstructionResponse:
        r"""Get all tags from the CIS instruction
        Gets all the tags from the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromCisInstructionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromCisInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_cis_line(self, request: operations.GetTagsFromCisLineRequest) -> operations.GetTagsFromCisLineResponse:
        r"""Get all tags from the CIS line
        Gets all the tags from the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromCisLineRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromCisLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_cis_line_type(self, request: operations.GetTagsFromCisLineTypeRequest) -> operations.GetTagsFromCisLineTypeResponse:
        r"""Get all tags from the CIS line type
        Gets all the tags from the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromCisLineTypeRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromCisLineTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_employee(self, request: operations.GetTagsFromEmployeeRequest) -> operations.GetTagsFromEmployeeResponse:
        r"""Get all employee tags
        Gets all the tags from the employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromEmployeeRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_employee_revision(self, request: operations.GetTagsFromEmployeeRevisionRequest) -> operations.GetTagsFromEmployeeRevisionResponse:
        r"""Get all employee revision tags
        Gets all the tags from the employee revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromEmployeeRevisionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/Tags/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromEmployeeRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_employer(self, request: operations.GetTagsFromEmployerRequest) -> operations.GetTagsFromEmployerResponse:
        r"""Get all employer tags
        Gets all the tags from the employer
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromEmployerRequest, base_url, '/Employer/{EmployerId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_employer_revision(self, request: operations.GetTagsFromEmployerRevisionRequest) -> operations.GetTagsFromEmployerRevisionResponse:
        r"""Get all employer revision tags
        Gets all the tags from the employer revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromEmployerRevisionRequest, base_url, '/Employer/{EmployerId}/Tags/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromEmployerRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_holiday_scheme(self, request: operations.GetTagsFromHolidaySchemeRequest) -> operations.GetTagsFromHolidaySchemeResponse:
        r"""Get all tags from the holiday scheme
        Gets all the tags from the holiday scheme
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromHolidaySchemeRequest, base_url, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromHolidaySchemeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_holiday_scheme_revision(self, request: operations.GetTagsFromHolidaySchemeRevisionRequest) -> operations.GetTagsFromHolidaySchemeRevisionResponse:
        r"""Get all holiday scheme revision tags
        Gets all the tags from the holiday scheme revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromHolidaySchemeRevisionRequest, base_url, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromHolidaySchemeRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_journal_line(self, request: operations.GetTagsFromJournalLineRequest) -> operations.GetTagsFromJournalLineResponse:
        r"""Get tags from journal line
        Gets all tags from the journal line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromJournalLineRequest, base_url, '/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromJournalLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_pay_code(self, request: operations.GetTagsFromPayCodeRequest) -> operations.GetTagsFromPayCodeResponse:
        r"""Get all pay code tags
        Gets all the tags from the pay code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromPayCodeRequest, base_url, '/Employer/{EmployerId}/PayCode/{PayCodeId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromPayCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_pay_instruction(self, request: operations.GetTagsFromPayInstructionRequest) -> operations.GetTagsFromPayInstructionResponse:
        r"""Get all tags from the pay instruction
        Gets all the tags from the pay instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromPayInstructionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromPayInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_pay_line(self, request: operations.GetTagsFromPayLineRequest) -> operations.GetTagsFromPayLineResponse:
        r"""Get all tags from the pay line
        Gets all the tags from the pay line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromPayLineRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromPayLineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_pay_run(self, request: operations.GetTagsFromPayRunRequest) -> operations.GetTagsFromPayRunResponse:
        r"""Get all pay run tags
        Gets all the tags from the pay run
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromPayRunRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromPayRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_pay_schedule(self, request: operations.GetTagsFromPayScheduleRequest) -> operations.GetTagsFromPayScheduleResponse:
        r"""Get all pay schedule tags
        Gets all the tags from the pay schedule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromPayScheduleRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromPayScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_permission(self, request: operations.GetTagsFromPermissionRequest) -> operations.GetTagsFromPermissionResponse:
        r"""Get tags from Permission
        Gets all tags from the Permission
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromPermissionRequest, base_url, '/Permission/{PermissionId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromPermissionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_rti_transaction(self, request: operations.GetTagsFromRtiTransactionRequest) -> operations.GetTagsFromRtiTransactionResponse:
        r"""Get all tags from RTI transaction
        Gets all the tags from the RTI transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromRtiTransactionRequest, base_url, '/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromRtiTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_sub_contractor(self, request: operations.GetTagsFromSubContractorRequest) -> operations.GetTagsFromSubContractorResponse:
        r"""Get all tags from the sub contractor
        Gets all the tags from the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromSubContractorRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromSubContractorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_sub_contractor_revision(self, request: operations.GetTagsFromSubContractorRevisionRequest) -> operations.GetTagsFromSubContractorRevisionResponse:
        r"""Get all sub contractor revision tags
        Gets all the tags from the sub contractor revision
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromSubContractorRevisionRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags/{EffectiveDate}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromSubContractorRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_third_party_transaction(self, request: operations.GetTagsFromThirdPartyTransactionRequest) -> operations.GetTagsFromThirdPartyTransactionResponse:
        r"""Get tags from third party transaction
        Gets all tags from the third party transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromThirdPartyTransactionRequest, base_url, '/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromThirdPartyTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_tags_from_user(self, request: operations.GetTagsFromUserRequest) -> operations.GetTagsFromUserResponse:
        r"""Get tags from user
        Gets all tags from the user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsFromUserRequest, base_url, '/User/{UserId}/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsFromUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_instruction_tag(self, request: operations.PutCisInstructionTagRequest) -> operations.PutCisInstructionTagResponse:
        r"""Insert CIS instruction tag
        Inserts a new tag on the CIS instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisInstructionTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisInstructionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_line_tag(self, request: operations.PutCisLineTagRequest) -> operations.PutCisLineTagResponse:
        r"""Insert CIS line tag
        Inserts a new tag on the CIS line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisLineTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_cis_line_type_tag(self, request: operations.PutCisLineTypeTagRequest) -> operations.PutCisLineTypeTagResponse:
        r"""Insert CIS line type tag
        Inserts a new tag on the CIS line type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCisLineTypeTagRequest, base_url, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCisLineTypeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_employee_tag(self, request: operations.PutEmployeeTagRequest) -> operations.PutEmployeeTagResponse:
        r"""Insert employee tag
        Inserts a new tag on the employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutEmployeeTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutEmployeeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_employer_tag(self, request: operations.PutEmployerTagRequest) -> operations.PutEmployerTagResponse:
        r"""Insert employer tag
        Inserts a new tag on the employer
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutEmployerTagRequest, base_url, '/Employer/{EmployerId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutEmployerTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_holiday_scheme_tag(self, request: operations.PutHolidaySchemeTagRequest) -> operations.PutHolidaySchemeTagResponse:
        r"""Insert holiday scheme tag
        Inserts a new tag on the holiday scheme
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutHolidaySchemeTagRequest, base_url, '/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutHolidaySchemeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_journal_line_tag(self, request: operations.PutJournalLineTagRequest) -> operations.PutJournalLineTagResponse:
        r"""Insert journal line tag
        Inserts a tag on the journal line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutJournalLineTagRequest, base_url, '/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutJournalLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_pay_code_tag(self, request: operations.PutPayCodeTagRequest) -> operations.PutPayCodeTagResponse:
        r"""Insert pay code tag
        Inserts a new tag on the pay code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPayCodeTagRequest, base_url, '/Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPayCodeTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_pay_instruction_tag(self, request: operations.PutPayInstructionTagRequest) -> operations.PutPayInstructionTagResponse:
        r"""Insert pay instruction tag
        Inserts a new tag on the pay instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPayInstructionTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPayInstructionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_pay_line_tag(self, request: operations.PutPayLineTagRequest) -> operations.PutPayLineTagResponse:
        r"""Insert pay line tag
        Inserts a new tag on the pay line
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPayLineTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPayLineTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_pay_run_tag(self, request: operations.PutPayRunTagRequest) -> operations.PutPayRunTagResponse:
        r"""Insert pay run tag
        Inserts a new tag on the pay run
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPayRunTagRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPayRunTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_pay_schedule_tag(self, request: operations.PutPayScheduleTagRequest) -> operations.PutPayScheduleTagResponse:
        r"""Insert pay schedule tag
        Inserts a new tag on the pay schedule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPayScheduleTagRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPayScheduleTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_permission_tag(self, request: operations.PutPermissionTagRequest) -> operations.PutPermissionTagResponse:
        r"""Insert Permission tag
        Inserts a tag on the Permission
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPermissionTagRequest, base_url, '/Permission/{PermissionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPermissionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_rti_transaction_tag(self, request: operations.PutRtiTransactionTagRequest) -> operations.PutRtiTransactionTagResponse:
        r"""Insert RTI transaction tag
        Inserts a new tag on the RTI transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRtiTransactionTagRequest, base_url, '/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRtiTransactionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_sub_contractor_tag(self, request: operations.PutSubContractorTagRequest) -> operations.PutSubContractorTagResponse:
        r"""Insert sub contractor tag
        Inserts a new tag on the sub contractor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSubContractorTagRequest, base_url, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSubContractorTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_third_party_transaction_tag(self, request: operations.PutThirdPartyTransactionTagRequest) -> operations.PutThirdPartyTransactionTagResponse:
        r"""insert third party transaction tag
        Inserts a tag on the third party transaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutThirdPartyTransactionTagRequest, base_url, '/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutThirdPartyTransactionTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_user_tag(self, request: operations.PutUserTagRequest) -> operations.PutUserTagResponse:
        r"""Insert user tag
        Inserts a tag on the user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutUserTagRequest, base_url, '/User/{UserId}/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutUserTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    