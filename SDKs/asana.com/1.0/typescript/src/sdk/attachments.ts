/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * An *attachment* object represents any file attached to a task in Asana, whether itâ€™s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive.
 */
export class Attachments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Upload an attachment
   *
   * @remarks
   * Upload an attachment.
   *
   * This method uploads an attachment on an object and returns the compact
   * record for the created attachment object. This is possible by either:
   *
   * - Providing the URL of the external resource being attached, or
   * - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach
   * files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API
   *
   * The 100MB size limit on attachments in Asana is enforced on this endpoint.
   *
   * This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.
   *
   * Requests made should follow the HTTP/1.1 specification that line
   * terminators are of the form `CRLF` or `\r\n` outlined
   * [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
   */
  createAttachmentForObject(
    req: operations.CreateAttachmentForObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAttachmentForObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAttachmentForObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/attachments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "attachmentRequest",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAttachmentForObjectResponse =
        new operations.CreateAttachmentForObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAttachmentForObject200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAttachmentForObject200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an attachment
   *
   * @remarks
   * Deletes a specific, existing attachment.
   *
   * Returns an empty data record.
   */
  deleteAttachment(
    req: operations.DeleteAttachmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAttachmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteAttachmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/attachments/{attachment_gid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAttachmentResponse =
        new operations.DeleteAttachmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteAttachment200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteAttachment200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an attachment
   *
   * @remarks
   * Get the full record for a single attachment.
   */
  getAttachment(
    req: operations.GetAttachmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAttachmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAttachmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/attachments/{attachment_gid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAttachmentResponse =
        new operations.GetAttachmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttachment200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetAttachment200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 424, 500, 501, 503, 504].includes(
          httpRes?.status
        ):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get attachments from an object
   *
   * @remarks
   * Returns the compact records for all attachments on the object.
   *
   * There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the "Key resources" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.
   */
  getAttachmentsForObject(
    req: operations.GetAttachmentsForObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAttachmentsForObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAttachmentsForObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/attachments";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAttachmentsForObjectResponse =
        new operations.GetAttachmentsForObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAttachmentsForObject200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAttachmentsForObject200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
