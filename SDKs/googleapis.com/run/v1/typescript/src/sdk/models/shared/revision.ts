/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ObjectMeta } from "./objectmeta";
import { RevisionSpec } from "./revisionspec";
import { RevisionStatus } from "./revisionstatus";
import { Expose, Type } from "class-transformer";

/**
 * Revision is an immutable snapshot of code and configuration. A revision references a container image. Revisions are created by updates to a Configuration. See also: https://github.com/knative/specs/blob/main/specs/serving/overview.md#revision
 */
export class Revision extends SpeakeasyBase {
  /**
   * The API version for this call such as "serving.knative.dev/v1".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiVersion" })
  apiVersion?: string;

  /**
   * The kind of this resource, in this case "Revision".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => ObjectMeta)
  metadata?: ObjectMeta;

  /**
   * RevisionSpec holds the desired state of the Revision (from the client).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spec" })
  @Type(() => RevisionSpec)
  spec?: RevisionSpec;

  /**
   * RevisionStatus communicates the observed state of the Revision (from the controller).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => RevisionStatus)
  status?: RevisionStatus;
}
