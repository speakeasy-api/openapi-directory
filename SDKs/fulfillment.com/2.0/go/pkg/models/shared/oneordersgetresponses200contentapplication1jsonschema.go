// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"openapi/pkg/types"
	"time"
)

// OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy - Responsibility for resolving this issue
type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy struct {
	ID *int64 `json:"id,omitempty"`
	// Human readable description of responsible party to resolve the issue
	Name *string `json:"name,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2Stage struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2State struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2 struct {
	// Responsibility for resolving this issue
	ActionRequiredBy *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy `json:"actionRequiredBy,omitempty"`
	// Code, see [status codes](#section/Getting-Started/Status-Codes)
	Code       string  `json:"code"`
	Detail     *string `json:"detail,omitempty"`
	DetailCode string  `json:"detailCode"`
	// Depricated, use code instead
	ID *int64 `json:"id,omitempty"`
	// Depricated, does this status event close the order
	IsClosed *bool `json:"isClosed,omitempty"`
	// Depricated, use stage/state instead
	Name *string `json:"name,omitempty"`
	// Depricated
	Reason *string                                                                                            `json:"reason,omitempty"`
	Stage  OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2Stage `json:"stage"`
	State  OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2State `json:"state"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2 struct {
	CreatedBy *OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy `json:"createdBy,omitempty"`
	// DateTime of Status Event
	Date *time.Time `json:"date,omitempty"`
	ID   int64      `json:"id"`
	// Explanation for status
	Reason *string                                                                                        `json:"reason,omitempty"`
	Status *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2StatusTypeV2 `json:"status,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2InventoryDetails struct {
	ExpirationDate *types.Date `json:"expirationDate,omitempty"`
	LotNum         *string     `json:"lotNum,omitempty"`
	Quantity       *int64      `json:"quantity,omitempty"`
	SerialNum      *string     `json:"serialNum,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2LineDetails struct {
	Description   *string `json:"description,omitempty"`
	ExternalSku   *string `json:"externalSku,omitempty"`
	ID            *int64  `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	TotalQuantity *int64  `json:"totalQuantity,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2RequestedSkuData struct {
	DeclaredValue *string `json:"declaredValue,omitempty"`
	ID            *int64  `json:"id,omitempty"`
	Quantity      *int64  `json:"quantity,omitempty"`
	Sku           *string `json:"sku,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2 struct {
	ID               *int64                                                                                                    `json:"id,omitempty"`
	InventoryDetails []OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2InventoryDetails `json:"inventoryDetails,omitempty"`
	LineDetails      *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2LineDetails       `json:"lineDetails,omitempty"`
	RequestedSkuData *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2RequestedSkuData  `json:"requestedSkuData,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2MerchantV2 struct {
	ID int64 `json:"id"`
	// Merchant Company Name
	Name string `json:"name"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2ConsigneeV2IsoCountryV2 struct {
	ID *int64 `json:"id,omitempty"`
	// Two character ISO code
	Iso2 *string `json:"iso2,omitempty"`
	// Country Name
	Name *string `json:"name,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2ConsigneeV2 struct {
	Address1 string  `json:"address1"`
	Address2 *string `json:"address2,omitempty"`
	// City
	AddressLocality string `json:"addressLocality"`
	// Province / State
	AddressRegion string  `json:"addressRegion"`
	CompanyName   *string `json:"companyName,omitempty"`
	// Ideally provide the two character ISO code
	Country   string                                                                                       `json:"country"`
	Email     *string                                                                                      `json:"email,omitempty"`
	FirstName string                                                                                       `json:"firstName"`
	ID        int64                                                                                        `json:"id"`
	Iso       *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2ConsigneeV2IsoCountryV2 `json:"iso,omitempty"`
	LastName  string                                                                                       `json:"lastName"`
	Phone     *string                                                                                      `json:"phone,omitempty"`
	// Postal Code / Zip
	PostalCode string                                                                                        `json:"postalCode"`
	UpdatedAt  *time.Time                                                                                    `json:"updatedAt,omitempty"`
	UpdatedBy  *OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy `json:"updatedBy,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2ParentOrder struct {
	// Reference to parent `id` if order was grouped
	ID *int64 `json:"id,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2TrackingNumbersCarrierHydratedV2 struct {
	CanReprintPostage  *bool  `json:"canReprintPostage,omitempty"`
	Enabled            *bool  `json:"enabled,omitempty"`
	ID                 int64  `json:"id"`
	IncludePeripherals *bool  `json:"includePeripherals,omitempty"`
	InternalRatesOnly  *bool  `json:"internalRatesOnly,omitempty"`
	Name               string `json:"name"`
	RequiresDimensions *bool  `json:"requiresDimensions,omitempty"`
	Symbol             string `json:"symbol"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2TrackingNumbers struct {
	Carrier *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2TrackingNumbersCarrierHydratedV2 `json:"carrier,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2WarehouseV2 struct {
	ID int64 `json:"id"`
}

// OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 - Requires hydrate to be set in the request and the corresponding node will be filled.
type OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 struct {
	CurrentStatus OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2StatusEventV2 `json:"currentStatus"`
	// DateTime order departed an FDC warehouse
	DepartDate *time.Time `json:"departDate,omitempty"`
	// DateTime order was dispatched for fulfillment by FDC
	DispatchDate *time.Time `json:"dispatchDate,omitempty"`
	// FDC ID for this order
	ID         int64                                                                                     `json:"id"`
	Integrator *string                                                                                   `json:"integrator,omitempty"`
	LineItems  []OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2LineItemsResponseV2 `json:"lineItems,omitempty"`
	Merchant   OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2MerchantV2            `json:"merchant"`
	// Merchant provided ID
	MerchantOrderID string `json:"merchantOrderId"`
	// Requested ship method
	MerchantShippingMethod string                                                                           `json:"merchantShippingMethod"`
	OriginalConsignee      OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2ConsigneeV2  `json:"originalConsignee"`
	ParentOrder            *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2ParentOrder `json:"parentOrder,omitempty"`
	// Merchant provided PO#
	PurchaseOrderNum *string `json:"purchaseOrderNum,omitempty"`
	// DateTime order was recorded by FDC
	RecordedOn         time.Time                                                                             `json:"recordedOn"`
	TrackingNumbers    []OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2TrackingNumbers `json:"trackingNumbers,omitempty"`
	ValidatedConsignee OneordersPostResponses201ContentApplication1jsonSchemaPropertiesOriginalConsignee     `json:"validatedConsignee"`
	Warehouse          *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2WarehouseV2      `json:"warehouse,omitempty"`
}

type OneordersGetResponses200ContentApplication1jsonSchemaType string

const (
	OneordersGetResponses200ContentApplication1jsonSchemaTypeOneordersPostResponses201ContentApplication1jsonSchema               OneordersGetResponses200ContentApplication1jsonSchemaType = "~1orders/post/responses/201/content/application~1json/schema"
	OneordersGetResponses200ContentApplication1jsonSchemaTypeOneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 OneordersGetResponses200ContentApplication1jsonSchemaType = "~1orders/get/responses/200/content/application~1json/schema_OrderResponse.v2"
)

type OneordersGetResponses200ContentApplication1jsonSchema struct {
	OneordersPostResponses201ContentApplication1jsonSchema               *OneordersPostResponses201ContentApplication1jsonSchema
	OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 *OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2

	Type OneordersGetResponses200ContentApplication1jsonSchemaType
}

func CreateOneordersGetResponses200ContentApplication1jsonSchemaOneordersPostResponses201ContentApplication1jsonSchema(oneordersPostResponses201ContentApplication1jsonSchema OneordersPostResponses201ContentApplication1jsonSchema) OneordersGetResponses200ContentApplication1jsonSchema {
	typ := OneordersGetResponses200ContentApplication1jsonSchemaTypeOneordersPostResponses201ContentApplication1jsonSchema

	return OneordersGetResponses200ContentApplication1jsonSchema{
		OneordersPostResponses201ContentApplication1jsonSchema: &oneordersPostResponses201ContentApplication1jsonSchema,
		Type: typ,
	}
}

func CreateOneordersGetResponses200ContentApplication1jsonSchemaOneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2(oneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2) OneordersGetResponses200ContentApplication1jsonSchema {
	typ := OneordersGetResponses200ContentApplication1jsonSchemaTypeOneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2

	return OneordersGetResponses200ContentApplication1jsonSchema{
		OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2: &oneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2,
		Type: typ,
	}
}

func (u *OneordersGetResponses200ContentApplication1jsonSchema) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	oneordersPostResponses201ContentApplication1jsonSchema := new(OneordersPostResponses201ContentApplication1jsonSchema)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&oneordersPostResponses201ContentApplication1jsonSchema); err == nil {
		u.OneordersPostResponses201ContentApplication1jsonSchema = oneordersPostResponses201ContentApplication1jsonSchema
		u.Type = OneordersGetResponses200ContentApplication1jsonSchemaTypeOneordersPostResponses201ContentApplication1jsonSchema
		return nil
	}

	oneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 := new(OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&oneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2); err == nil {
		u.OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 = oneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2
		u.Type = OneordersGetResponses200ContentApplication1jsonSchemaTypeOneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OneordersGetResponses200ContentApplication1jsonSchema) MarshalJSON() ([]byte, error) {
	if u.OneordersPostResponses201ContentApplication1jsonSchema != nil {
		return json.Marshal(u.OneordersPostResponses201ContentApplication1jsonSchema)
	}

	if u.OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2 != nil {
		return json.Marshal(u.OneordersGetResponses200ContentApplication1jsonSchemaOrderResponseV2)
	}

	return nil, nil
}
