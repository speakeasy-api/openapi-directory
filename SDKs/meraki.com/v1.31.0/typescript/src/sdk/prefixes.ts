/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Prefixes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a static delegated prefix from a network
   *
   * @remarks
   * Add a static delegated prefix from a network
   */
  createNetworkAppliancePrefixesDelegatedStatic(
    req: operations.CreateNetworkAppliancePrefixesDelegatedStaticRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateNetworkAppliancePrefixesDelegatedStaticResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateNetworkAppliancePrefixesDelegatedStaticRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/appliance/prefixes/delegated/statics",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateNetworkAppliancePrefixesDelegatedStaticResponse =
        new operations.CreateNetworkAppliancePrefixesDelegatedStaticResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createNetworkAppliancePrefixesDelegatedStatic201ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a static delegated prefix from a network
   *
   * @remarks
   * Delete a static delegated prefix from a network
   */
  deleteNetworkAppliancePrefixesDelegatedStatic(
    req: operations.DeleteNetworkAppliancePrefixesDelegatedStaticRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteNetworkAppliancePrefixesDelegatedStaticResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteNetworkAppliancePrefixesDelegatedStaticRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteNetworkAppliancePrefixesDelegatedStaticResponse =
        new operations.DeleteNetworkAppliancePrefixesDelegatedStaticResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Return current delegated IPv6 prefixes on an appliance.
   *
   * @remarks
   * Return current delegated IPv6 prefixes on an appliance.
   */
  getDeviceAppliancePrefixesDelegated(
    req: operations.GetDeviceAppliancePrefixesDelegatedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDeviceAppliancePrefixesDelegatedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDeviceAppliancePrefixesDelegatedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/devices/{serial}/appliance/prefixes/delegated",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDeviceAppliancePrefixesDelegatedResponse =
        new operations.GetDeviceAppliancePrefixesDelegatedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDeviceAppliancePrefixesDelegated200ApplicationJSONObjects =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
   *
   * @remarks
   * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
   */
  getDeviceAppliancePrefixesDelegatedVlanAssignments(
    req: operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/devices/{serial}/appliance/prefixes/delegated/vlanAssignments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse =
        new operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDeviceAppliancePrefixesDelegatedVlanAssignments200ApplicationJSONObjects =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return a static delegated prefix from a network
   *
   * @remarks
   * Return a static delegated prefix from a network
   */
  getNetworkAppliancePrefixesDelegatedStatic(
    req: operations.GetNetworkAppliancePrefixesDelegatedStaticRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkAppliancePrefixesDelegatedStaticResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNetworkAppliancePrefixesDelegatedStaticRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkAppliancePrefixesDelegatedStaticResponse =
        new operations.GetNetworkAppliancePrefixesDelegatedStaticResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkAppliancePrefixesDelegatedStatic200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List static delegated prefixes for a network
   *
   * @remarks
   * List static delegated prefixes for a network
   */
  getNetworkAppliancePrefixesDelegatedStatics(
    req: operations.GetNetworkAppliancePrefixesDelegatedStaticsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkAppliancePrefixesDelegatedStaticsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNetworkAppliancePrefixesDelegatedStaticsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/appliance/prefixes/delegated/statics",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkAppliancePrefixesDelegatedStaticsResponse =
        new operations.GetNetworkAppliancePrefixesDelegatedStaticsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkAppliancePrefixesDelegatedStatics200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getNetworkAppliancePrefixesDelegatedStatics200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkAppliancePrefixesDelegatedStatics200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a static delegated prefix from a network
   *
   * @remarks
   * Update a static delegated prefix from a network
   */
  updateNetworkAppliancePrefixesDelegatedStatic(
    req: operations.UpdateNetworkAppliancePrefixesDelegatedStaticRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateNetworkAppliancePrefixesDelegatedStaticResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateNetworkAppliancePrefixesDelegatedStaticRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateNetworkAppliancePrefixesDelegatedStaticResponse =
        new operations.UpdateNetworkAppliancePrefixesDelegatedStaticResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
