/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AppliedLicense } from "./appliedlicense";
import { ComputeScheduling } from "./computescheduling";
import { NetworkInterface } from "./networkinterface";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The VM Boot Option, as set in the source vm.
 */
export enum TargetVMDetailsBootOptionEnum {
  BootOptionUnspecified = "BOOT_OPTION_UNSPECIFIED",
  Efi = "EFI",
  Bios = "BIOS",
}

/**
 * The disk type to use in the VM.
 */
export enum TargetVMDetailsDiskTypeEnum {
  DiskTypeUnspecified = "DISK_TYPE_UNSPECIFIED",
  Standard = "STANDARD",
  Balanced = "BALANCED",
  Ssd = "SSD",
}

/**
 * The license type to use in OS adaptation.
 */
export enum TargetVMDetailsLicenseTypeEnum {
  Default = "DEFAULT",
  Payg = "PAYG",
  Byol = "BYOL",
}

/**
 * TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
export class TargetVMDetails extends SpeakeasyBase {
  /**
   * AppliedLicense holds the license data returned by adaptation module report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appliedLicense" })
  @Type(() => AppliedLicense)
  appliedLicense?: AppliedLicense;

  /**
   * Output only. The VM Boot Option, as set in the source vm.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootOption" })
  bootOption?: TargetVMDetailsBootOptionEnum;

  /**
   * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "computeScheduling" })
  @Type(() => ComputeScheduling)
  computeScheduling?: ComputeScheduling;

  /**
   * The disk type to use in the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "diskType" })
  diskType?: TargetVMDetailsDiskTypeEnum;

  /**
   * The external IP to define in the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalIp" })
  externalIp?: string;

  /**
   * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "internalIp" })
  internalIp?: string;

  /**
   * A map of labels to associate with the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * The license type to use in OS adaptation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseType" })
  licenseType?: TargetVMDetailsLicenseTypeEnum;

  /**
   * The machine type to create the VM with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machineType" })
  machineType?: string;

  /**
   * The machine type series to create the VM with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machineTypeSeries" })
  machineTypeSeries?: string;

  /**
   * The metadata key/value pairs to assign to the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, string>;

  /**
   * The name of the VM to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The network to connect the VM to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * List of NICs connected to this VM.
   */
  @SpeakeasyMetadata({ elemType: NetworkInterface })
  @Expose({ name: "networkInterfaces" })
  @Type(() => NetworkInterface)
  networkInterfaces?: NetworkInterface[];

  /**
   * A map of network tags to associate with the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkTags" })
  networkTags?: string[];

  /**
   * Output only. The project in which to create the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "project" })
  project?: string;

  /**
   * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secureBoot" })
  secureBoot?: boolean;

  /**
   * The service account to associate the VM with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceAccount" })
  serviceAccount?: string;

  /**
   * The subnetwork to connect the VM to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnetwork" })
  subnetwork?: string;

  /**
   * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetProject" })
  targetProject?: string;

  /**
   * The zone in which to create the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zone" })
  zone?: string;
}

/**
 * TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
export class TargetVMDetailsInput extends SpeakeasyBase {
  /**
   * AppliedLicense holds the license data returned by adaptation module report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appliedLicense" })
  @Type(() => AppliedLicense)
  appliedLicense?: AppliedLicense;

  /**
   * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "computeScheduling" })
  @Type(() => ComputeScheduling)
  computeScheduling?: ComputeScheduling;

  /**
   * The disk type to use in the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "diskType" })
  diskType?: TargetVMDetailsDiskTypeEnum;

  /**
   * The external IP to define in the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalIp" })
  externalIp?: string;

  /**
   * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "internalIp" })
  internalIp?: string;

  /**
   * A map of labels to associate with the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * The license type to use in OS adaptation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseType" })
  licenseType?: TargetVMDetailsLicenseTypeEnum;

  /**
   * The machine type to create the VM with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machineType" })
  machineType?: string;

  /**
   * The machine type series to create the VM with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machineTypeSeries" })
  machineTypeSeries?: string;

  /**
   * The metadata key/value pairs to assign to the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, string>;

  /**
   * The name of the VM to create.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The network to connect the VM to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * List of NICs connected to this VM.
   */
  @SpeakeasyMetadata({ elemType: NetworkInterface })
  @Expose({ name: "networkInterfaces" })
  @Type(() => NetworkInterface)
  networkInterfaces?: NetworkInterface[];

  /**
   * A map of network tags to associate with the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkTags" })
  networkTags?: string[];

  /**
   * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secureBoot" })
  secureBoot?: boolean;

  /**
   * The service account to associate the VM with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceAccount" })
  serviceAccount?: string;

  /**
   * The subnetwork to connect the VM to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnetwork" })
  subnetwork?: string;

  /**
   * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetProject" })
  targetProject?: string;

  /**
   * The zone in which to create the VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zone" })
  zone?: string;
}
