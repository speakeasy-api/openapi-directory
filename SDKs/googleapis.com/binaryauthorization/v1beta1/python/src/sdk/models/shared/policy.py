"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import admissionrule as shared_admissionrule
from ..shared import admissionwhitelistpattern as shared_admissionwhitelistpattern
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PolicyGlobalPolicyEvaluationModeEnum(str, Enum):
    r"""Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy."""
    GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED = 'GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED'
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Policy:
    r"""A policy for Binary Authorization."""
    
    admission_whitelist_patterns: Optional[list[shared_admissionwhitelistpattern.AdmissionWhitelistPattern]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admissionWhitelistPatterns'), 'exclude': lambda f: f is None }})
    r"""Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies."""  
    cluster_admission_rules: Optional[dict[str, shared_admissionrule.AdmissionRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterAdmissionRules'), 'exclude': lambda f: f is None }})
    r"""Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters."""  
    default_admission_rule: Optional[shared_admissionrule.AdmissionRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultAdmissionRule'), 'exclude': lambda f: f is None }})
    r"""An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. A descriptive comment."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154."""  
    global_policy_evaluation_mode: Optional[PolicyGlobalPolicyEvaluationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('globalPolicyEvaluationMode'), 'exclude': lambda f: f is None }})
    r"""Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy."""  
    istio_service_identity_admission_rules: Optional[dict[str, shared_admissionrule.AdmissionRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('istioServiceIdentityAdmissionRules'), 'exclude': lambda f: f is None }})
    r"""Optional. Per-istio-service-identity admission rules. Istio service identity spec format: `spiffe:///ns//sa/` or `/ns//sa/` e.g. `spiffe://example.com/ns/test-ns/sa/default`"""  
    kubernetes_namespace_admission_rules: Optional[dict[str, shared_admissionrule.AdmissionRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubernetesNamespaceAdmissionRules'), 'exclude': lambda f: f is None }})
    r"""Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: `[a-z.-]+`, e.g. `some-namespace`"""  
    kubernetes_service_account_admission_rules: Optional[dict[str, shared_admissionrule.AdmissionRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubernetesServiceAccountAdmissionRules'), 'exclude': lambda f: f is None }})
    r"""Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. `test-ns:default`"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time when the policy was last updated."""  
    