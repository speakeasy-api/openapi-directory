"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class CustomPages:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_custom_page(self, request: shared.CustomPage, security: operations.CreateCustomPageSecurity) -> operations.CreateCustomPageResponse:
        r"""Create custom page
        Create a new custom page inside of this project
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/custompages'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_custom_page(self, request: operations.DeleteCustomPageRequest, security: operations.DeleteCustomPageSecurity) -> operations.DeleteCustomPageResponse:
        r"""Delete custom page
        Delete the custom page with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomPageRequest, base_url, '/custompages/{slug}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_custom_page(self, request: operations.GetCustomPageRequest, security: operations.GetCustomPageSecurity) -> operations.GetCustomPageResponse:
        r"""Get custom page
        Returns the custom page with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomPageRequest, base_url, '/custompages/{slug}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_custom_pages(self, request: operations.GetCustomPagesRequest, security: operations.GetCustomPagesSecurity) -> operations.GetCustomPagesResponse:
        r"""Get custom pages
        Returns a list of custom pages associated with the project API key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/custompages'
        
        query_params = utils.get_query_params(operations.GetCustomPagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomPagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            

        return res

    def update_custom_page(self, request: operations.UpdateCustomPageRequest, security: operations.UpdateCustomPageSecurity) -> operations.UpdateCustomPageResponse:
        r"""Update custom page
        Update a custom page with this slug
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomPageRequest, base_url, '/custompages/{slug}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_page", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    