"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import imageprocessingsettings as shared_imageprocessingsettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProjectSettingsClassificationTypeEnum(str, Enum):
    r"""Gets or sets the classification type of the project."""
    MULTICLASS = 'Multiclass'
    MULTILABEL = 'Multilabel'

class ProjectSettingsTargetExportPlatformsEnum(str, Enum):
    CORE_ML = 'CoreML'
    TENSOR_FLOW = 'TensorFlow'
    DOCKER_FILE = 'DockerFile'
    ONNX = 'ONNX'
    VAIDK = 'VAIDK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectSettingsInput:
    r"""Represents settings associated with a project."""
    
    classification_type: Optional[ProjectSettingsClassificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classificationType'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the classification type of the project."""  
    domain_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainId'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the id of the Domain to use with this project."""  
    image_processing_settings: Optional[shared_imageprocessingsettings.ImageProcessingSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageProcessingSettings'), 'exclude': lambda f: f is None }})
    r"""Represents image preprocessing settings used by image augmentation."""  
    target_export_platforms: Optional[list[ProjectSettingsTargetExportPlatformsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetExportPlatforms'), 'exclude': lambda f: f is None }})
    r"""A list of ExportPlatform that the trained model should be able to support."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectSettings:
    r"""Represents settings associated with a project."""
    
    classification_type: Optional[ProjectSettingsClassificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classificationType'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the classification type of the project."""  
    detection_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectionParameters'), 'exclude': lambda f: f is None }})
    r"""Detection parameters in use, if any."""  
    domain_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainId'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the id of the Domain to use with this project."""  
    image_processing_settings: Optional[shared_imageprocessingsettings.ImageProcessingSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageProcessingSettings'), 'exclude': lambda f: f is None }})
    r"""Represents image preprocessing settings used by image augmentation."""  
    target_export_platforms: Optional[list[ProjectSettingsTargetExportPlatformsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetExportPlatforms'), 'exclude': lambda f: f is None }})
    r"""A list of ExportPlatform that the trained model should be able to support."""  
    use_negative_set: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useNegativeSet'), 'exclude': lambda f: f is None }})
    r"""Indicates if negative set is being used."""  
    