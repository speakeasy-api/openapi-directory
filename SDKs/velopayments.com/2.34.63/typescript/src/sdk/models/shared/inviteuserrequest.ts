/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * <p>The MFA type that the user will use</p>
 *
 * @remarks
 * <p>The type may be conditional on the role(s) the user has</p>
 *
 */
export enum InviteUserRequestMfaTypeEnum {
  Sms = "SMS",
  Yubikey = "YUBIKEY",
  Totp = "TOTP",
}

/**
 * Will default to PAYOR if not provided but entityId is provided
 */
export enum InviteUserRequestUserTypeEnum {
  Backoffice = "BACKOFFICE",
  Payor = "PAYOR",
  Payee = "PAYEE",
}

/**
 * Details of User to invite
 */
export class InviteUserRequest extends SpeakeasyBase {
  /**
   * the email address of the invited user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * The payorId or payeeId or null if the user is a backoffice admin
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entityId" })
  entityId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "firstName" })
  firstName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastName" })
  lastName?: string;

  /**
   * <p>The MFA type that the user will use</p>
   *
   * @remarks
   * <p>The type may be conditional on the role(s) the user has</p>
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mfaType" })
  mfaType: InviteUserRequestMfaTypeEnum;

  /**
   * The main contact number for the user
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryContactNumber" })
  primaryContactNumber: string;

  /**
   * The role(s) for the user
   *
   * @remarks
   * The role must exist
   * The role can be a custom role or a system role but the invoker must have the permissions to assign the role
   * System roles are: velo.backoffice.admin, velo.payor.master_admin, velo.payor.admin, velo.payor.support, velo.payee.admin, velo.payee.support
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roles" })
  roles: string[];

  /**
   * The secondary contact number for the user
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondaryContactNumber" })
  secondaryContactNumber?: string;

  /**
   * The phone number of a device that the user can receive sms messages on
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsNumber" })
  smsNumber: string;

  /**
   * Will default to PAYOR if not provided but entityId is provided
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userType" })
  userType?: InviteUserRequestUserTypeEnum;

  /**
   * Optional property that MUST be suppied when manually verifying a user
   *
   * @remarks
   * The user's smsNumber is registered via a separate endpoint and an OTP sent to them
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verificationCode" })
  verificationCode?: string;
}
