/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The allocation method to use across clusters
 */
export enum PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum {
  EqualWeighting = "equalWeighting",
  InverseVolatility = "inverseVolatility",
  InverseVariance = "inverseVariance",
}

/**
 * The hierarchical clustering method to use
 */
export enum PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum {
  SingleLinkage = "singleLinkage",
  AverageLinkage = "averageLinkage",
  CompleteLinkage = "completeLinkage",
  WardLinkage = "wardLinkage",
}

/**
 * The order to impose on the hierarchical clustering tree leaves
 */
export enum PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum {
  RHclust = "r-hclust",
  Optimal = "optimal",
}

export class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints extends SpeakeasyBase {
  /**
   * maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumAssetsWeights" })
  maximumAssetsWeights?: number[];

  /**
   * The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumPortfolioExposure" })
  maximumPortfolioExposure?: number;

  /**
   * minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumAssetsWeights" })
  minimumAssetsWeights?: number[];

  /**
   * The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumPortfolioExposure" })
  minimumPortfolioExposure?: number;
}

/**
 * The allocation method to use within clusters
 */
export enum PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum {
  EqualWeighting = "equalWeighting",
  InverseVolatility = "inverseVolatility",
  InverseVariance = "inverseVariance",
}

export class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody extends SpeakeasyBase {
  /**
   * The allocation method to use across clusters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "acrossClusterAllocationMethod" })
  acrossClusterAllocationMethod?: PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum;

  /**
   * The number of assets
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assets" })
  assets: number;

  /**
   * assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assetsCovarianceMatrix" })
  assetsCovarianceMatrix: number[][];

  /**
   * The hierarchical clustering method to use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clusteringMethod" })
  clusteringMethod?: PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum;

  /**
   * The order to impose on the hierarchical clustering tree leaves
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clusteringOrdering" })
  clusteringOrdering?: PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum;

  /**
   * The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clusters" })
  clusters?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "constraints" })
  @Type(
    () =>
      PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints
  )
  constraints?: PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints;

  /**
   * The allocation method to use within clusters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "withinClusterAllocationMethod" })
  withinClusterAllocationMethod?: PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum;
}

/**
 * OK
 */
export class PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON extends SpeakeasyBase {
  /**
   * assetsWeights[i] is the weight of the asset i in the portfolio, in percentage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assetsWeights" })
  assetsWeights: number[];
}

export class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  postPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSONObject?: PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON;
}
