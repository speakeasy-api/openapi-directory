"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNetworkSensorAlertsProfileResponse = exports.GetNetworkSensorAlertsProfile200ApplicationJSON = exports.GetNetworkSensorAlertsProfile200ApplicationJSONSchedule = exports.GetNetworkSensorAlertsProfile200ApplicationJSONRecipients = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditions = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = exports.GetNetworkSensorAlertsProfileRequest = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var GetNetworkSensorAlertsProfileRequest = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfileRequest, _super);
    function GetNetworkSensorAlertsProfileRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "pathParam, style=simple;explode=false;name=id" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfileRequest.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfileRequest.prototype, "networkId", void 0);
    return GetNetworkSensorAlertsProfileRequest;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfileRequest = GetNetworkSensorAlertsProfileRequest;
/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum["Above"] = "above";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum["Below"] = "below";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = {}));
/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["Zero"] = "0";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["Sixty"] = "60";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneHundredAndTwenty"] = "120";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneHundredAndEighty"] = "180";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["TwoHundredAndForty"] = "240";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["ThreeHundred"] = "300";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["SixHundred"] = "600";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["NineHundred"] = "900";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["OneThousandEightHundred"] = "1800";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum["ThreeThousandSixHundred"] = "3600";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = {}));
/**
 * Door open threshold. 'open' must be provided and set to true.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "open" }),
        __metadata("design:type", Boolean)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor.prototype, "open", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;
/**
 * Alerting threshold as a qualitative humidity level.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = {}));
/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relativePercentage" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity.prototype, "relativePercentage", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = {}));
/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "score", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
/**
 * Alerting threshold as a qualitative ambient noise level.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = {}));
/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "level" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "level", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
/**
 * Noise threshold. 'ambient' must be provided.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ambient" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise.prototype, "ambient", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = {}));
/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;
/**
 * Alerting threshold as a qualitative temperature level.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = {}));
/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "celsius" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "celsius", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fahrenheit" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "fahrenheit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
/**
 * Alerting threshold as a qualitative TVOC level.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum;
(function (GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum) {
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum || (exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = {}));
/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;
/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "present" }),
        __metadata("design:type", Boolean)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater.prototype, "present", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "door" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor; }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "door", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "humidity" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "humidity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indoorAirQuality" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "indoorAirQuality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "noise" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "noise", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pm25" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25; }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "pm25", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "temperature" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "temperature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tvoc" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc; }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "tvoc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "water" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold.prototype, "water", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold = GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold;
var GetNetworkSensorAlertsProfile200ApplicationJSONConditions = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONConditions, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "direction" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "direction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metric" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "metric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "threshold" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold; }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONConditions.prototype, "threshold", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONConditions;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONConditions = GetNetworkSensorAlertsProfile200ApplicationJSONConditions;
/**
 * List of recipients that will recieve the alert.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONRecipients = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONRecipients, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONRecipients() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emails" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "emails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpServerIds" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "httpServerIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "smsNumbers" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONRecipients.prototype, "smsNumbers", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONRecipients;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONRecipients = GetNetworkSensorAlertsProfile200ApplicationJSONRecipients;
/**
 * The sensor schedule to use with the alert profile.
 */
var GetNetworkSensorAlertsProfile200ApplicationJSONSchedule = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSONSchedule, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSONSchedule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONSchedule.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSONSchedule.prototype, "name", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSONSchedule;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSONSchedule = GetNetworkSensorAlertsProfile200ApplicationJSONSchedule;
/**
 * Successful operation
 */
var GetNetworkSensorAlertsProfile200ApplicationJSON = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfile200ApplicationJSON, _super);
    function GetNetworkSensorAlertsProfile200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetNetworkSensorAlertsProfile200ApplicationJSONConditions,
        }),
        (0, class_transformer_1.Expose)({ name: "conditions" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfile200ApplicationJSONConditions; }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfile200ApplicationJSON.prototype, "conditions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "profileId" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfile200ApplicationJSON.prototype, "profileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfile200ApplicationJSONRecipients; }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONRecipients)
    ], GetNetworkSensorAlertsProfile200ApplicationJSON.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schedule" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfile200ApplicationJSONSchedule; }),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSONSchedule)
    ], GetNetworkSensorAlertsProfile200ApplicationJSON.prototype, "schedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serials" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfile200ApplicationJSON.prototype, "serials", void 0);
    return GetNetworkSensorAlertsProfile200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfile200ApplicationJSON = GetNetworkSensorAlertsProfile200ApplicationJSON;
var GetNetworkSensorAlertsProfileResponse = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfileResponse, _super);
    function GetNetworkSensorAlertsProfileResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfileResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfileResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetNetworkSensorAlertsProfileResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", GetNetworkSensorAlertsProfile200ApplicationJSON)
    ], GetNetworkSensorAlertsProfileResponse.prototype, "getNetworkSensorAlertsProfile200ApplicationJSONObject", void 0);
    return GetNetworkSensorAlertsProfileResponse;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfileResponse = GetNetworkSensorAlertsProfileResponse;
