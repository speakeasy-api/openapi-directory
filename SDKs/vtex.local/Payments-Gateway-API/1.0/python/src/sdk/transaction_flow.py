"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TransactionFlow:
    r"""After one transaction is authorized, there is remaining to do some calls in order to complete a transaction and its payments. We explain the settle process, cancel authorized payments process, and refund process by using examples."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancelthetransaction(self, request: operations.CancelthetransactionRequest) -> operations.CancelthetransactionResponse:
        r"""Cancel the transaction
        Cancel's transaction that was previously approved, but not settled.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelthetransactionRequest, base_url, '/api/pvt/transactions/{transactionId}/cancellation-request', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cancelthetransaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelthetransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def refundthetransaction(self, request: operations.RefundthetransactionRequest) -> operations.RefundthetransactionResponse:
        r"""Refund the transaction
        Refunds transaction's value that was previously settled.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RefundthetransactionRequest, base_url, '/api/pvt/transactions/{transactionId}/refunding-request', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "refundthetransaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefundthetransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def settlethetransaction(self, request: operations.SettlethetransactionRequest) -> operations.SettlethetransactionResponse:
        r"""Settle the transaction
        Settles transaction's value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SettlethetransactionRequest, base_url, '/api/pvt/transactions/{transactionId}/settlement-request', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "settlethetransaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SettlethetransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SettleResponse])
                res.settle_response = out

        return res

    