// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateDestinationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateDestinationRequestBodyStateEnum - State of the destination.
type CreateDestinationRequestBodyStateEnum string

const (
	CreateDestinationRequestBodyStateEnumEnabled        CreateDestinationRequestBodyStateEnum = "ENABLED"
	CreateDestinationRequestBodyStateEnumDisabled       CreateDestinationRequestBodyStateEnum = "DISABLED"
	CreateDestinationRequestBodyStateEnumDecommissioned CreateDestinationRequestBodyStateEnum = "DECOMMISSIONED"
)

func (e *CreateDestinationRequestBodyStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "DECOMMISSIONED":
		*e = CreateDestinationRequestBodyStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDestinationRequestBodyStateEnum: %s", s)
	}
}

type CreateDestinationRequestBody struct {
	// JSON document containing additional fixed properties regarding the destination
	AdditionalFixedProperties *string `json:"additionalFixedProperties,omitempty"`
	// Token used for detecting replayed requests. Replayed requests will not be performed multiple times.
	ClientToken *string `json:"clientToken,omitempty"`
	// Human friendly name of the resource.
	Name string `json:"name"`
	// Site ARN.
	Site string `json:"site"`
	// State of the destination.
	State *CreateDestinationRequestBodyStateEnum `json:"state,omitempty"`
}

type CreateDestinationRequest struct {
	Headers CreateDestinationHeaders
	Request CreateDestinationRequestBody `request:"mediaType=application/json"`
}

type CreateDestinationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateDestinationResponse *shared.CreateDestinationResponse
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
