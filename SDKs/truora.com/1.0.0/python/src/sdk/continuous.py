"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Continuous:
    r"""Allows creating recurring checks with customizable frequency that notify whenever there are changes in check scores."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_continuous_check(self, request: operations.GetContinuousCheckRequest, security: operations.GetContinuousCheckSecurity) -> operations.GetContinuousCheckResponse:
        r"""Lists history associated with a Check. It can be paginated"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContinuousCheckRequest, base_url, '/v1/continuous-checks/{continuous_check_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContinuousCheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContinuousCheck])
                res.continuous_check = out

        return res

    def list_continuous_checks(self) -> operations.ListContinuousChecksResponse:
        r"""Lists all continuous checks"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/continuous-checks'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListContinuousChecksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListContinuousChecksOutput])
                res.list_continuous_checks_output = out

        return res

    def update_continuous_check(self, request: operations.UpdateContinuousCheckRequest, security: operations.UpdateContinuousCheckSecurity) -> operations.UpdateContinuousCheckResponse:
        r"""Updates a continuous check"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContinuousCheckRequest, base_url, '/v1/continuous-checks/{continuous_check_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_continuous_check_input", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContinuousCheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContinuousCheck])
                res.continuous_check = out

        return res

    def create_continuous_check(self, request: shared.CreateContinuousCheckInput, security: operations.CreateContinuousCheckSecurity) -> operations.CreateContinuousCheckResponse:
        r"""Creates a continuous check that will run background checks recurrently according to the frequency provided."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/continuous-checks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateContinuousCheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContinuousCheck])
                res.continuous_check = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_v1_continuous_checks_continuous_check_id_history(self, request: operations.GetV1ContinuousChecksContinuousCheckIDHistoryRequest, security: operations.GetV1ContinuousChecksContinuousCheckIDHistorySecurity) -> operations.GetV1ContinuousChecksContinuousCheckIDHistoryResponse:
        r"""Lists background check logs. It can be paginated"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV1ContinuousChecksContinuousCheckIDHistoryRequest, base_url, '/v1/continuous-checks/{continuous_check_id}/history', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV1ContinuousChecksContinuousCheckIDHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetContiuousCheckHistoryOutput])
                res.get_contiuous_check_history_output = out

        return res

    