// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDetachVolumeActionEnum
type GETDetachVolumeActionEnum string

const (
	GETDetachVolumeActionEnumDetachVolume GETDetachVolumeActionEnum = "DetachVolume"
)

func (e *GETDetachVolumeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DetachVolume":
		*e = GETDetachVolumeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetachVolumeActionEnum: %s", s)
	}
}

// GETDetachVolumeVersionEnum
type GETDetachVolumeVersionEnum string

const (
	GETDetachVolumeVersionEnumTwoThousandAndSixteen1115 GETDetachVolumeVersionEnum = "2016-11-15"
)

func (e *GETDetachVolumeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDetachVolumeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetachVolumeVersionEnum: %s", s)
	}
}

type GETDetachVolumeQueryParams struct {
	Action GETDetachVolumeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The device name.
	Device *string `queryParam:"style=form,explode=true,name=Device"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
	Force *bool `queryParam:"style=form,explode=true,name=Force"`
	// The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
	InstanceID *string                    `queryParam:"style=form,explode=true,name=InstanceId"`
	Version    GETDetachVolumeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the volume.
	VolumeID string `queryParam:"style=form,explode=true,name=VolumeId"`
}

type GETDetachVolumeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDetachVolumeRequest struct {
	QueryParams GETDetachVolumeQueryParams
	Headers     GETDetachVolumeHeaders
}

type GETDetachVolumeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
