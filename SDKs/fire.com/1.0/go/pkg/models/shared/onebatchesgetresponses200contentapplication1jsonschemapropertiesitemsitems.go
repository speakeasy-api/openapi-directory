// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsResult - The outcome of the attempted transaction.
type OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsResult struct {
	Code    *int64  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum - status of the batch if internal trasnfer
type OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum string

const (
	OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnumSubmitted OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum = "SUBMITTED"
	OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnumRemoved   OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum = "REMOVED"
	OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnumSucceeded OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum = "SUCCEEDED"
	OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnumFailed    OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum = "FAILED"
)

func (e *OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUBMITTED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum: %s", s)
	}
}

// OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItems - Returns the details of the batch specified in the API endpoint - {batchUuid}.
type OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItems struct {
	// The amount of funds to send. In cent or pence
	Amount *int64 `json:"amount,omitempty"`
	// The amount of the transfer after fees and taxes. in pence or cent.
	AmountAfterCharges *int64 `json:"amountAfterCharges,omitempty"`
	// A UUID for this item.
	BatchItemUUID *string `json:"batchItemUuid,omitempty"`
	// The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// The fee charged by fire.com for the payment. In pence or cent.
	FeeAmount *int64 `json:"feeAmount,omitempty"`
	// The Fire account ID of the source account.
	IcanFrom *int64 `json:"icanFrom,omitempty"`
	// The Fire account ID for the fire.com account the funds are sent to.
	IcanTo *int64 `json:"icanTo,omitempty"`
	// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	// The reference on the transaction.
	Ref *string `json:"ref,omitempty"`
	// The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
	RefID *int64 `json:"refId,omitempty"`
	// The outcome of the attempted transaction.
	Result *OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsResult `json:"result,omitempty"`
	// status of the batch if internal trasnfer
	Status *OnebatchesGetResponses200ContentApplication1jsonSchemaPropertiesItemsItemsStatusEnum `json:"status,omitempty"`
	// Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
	TaxAmount *int64 `json:"taxAmount,omitempty"`
}
