"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configurationtype_enum as shared_configurationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckpointConfiguration:
    r"""Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see <a href=\\"https://ci.apache.org/projects/flink/flink-docs-release-1.8/concepts/programming-model.html#checkpoints-for-fault-tolerance\\"> Checkpoints for Fault Tolerance</a> in the <a href=\\"https://ci.apache.org/projects/flink/flink-docs-release-1.8/\\">Apache Flink Documentation</a>."""
    
    configuration_type: shared_configurationtype_enum.ConfigurationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationType') }})  
    checkpointing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointingEnabled'), 'exclude': lambda f: f is None }})  
    checkpoint_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointInterval'), 'exclude': lambda f: f is None }})  
    min_pause_between_checkpoints: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinPauseBetweenCheckpoints'), 'exclude': lambda f: f is None }})  
    