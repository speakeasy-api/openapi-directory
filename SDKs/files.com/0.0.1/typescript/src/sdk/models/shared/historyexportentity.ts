/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Show History Export
 */
export class HistoryExportEntity extends SpeakeasyBase {
  /**
   * End date/time of export range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endAt?: Date;

  /**
   * Version of the history for the export.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "history_version" })
  historyVersion?: string;

  /**
   * History Export ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_action" })
  queryAction?: string;

  /**
   * Return results that are file moves with this path as destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_destination" })
  queryDestination?: string;

  /**
   * If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_failure_type" })
  queryFailureType?: string;

  /**
   * Return results that are file actions related to the file indicated by this File ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_file_id" })
  queryFileId?: string;

  /**
   * Return results that are file actions related to files or folders inside this folder path.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_folder" })
  queryFolder?: string;

  /**
   * Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_interface" })
  queryInterface?: string;

  /**
   * Filter results by this IP address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_ip" })
  queryIp?: string;

  /**
   * Return results that are file actions inside the parent folder specified by this folder ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_parent_id" })
  queryParentId?: string;

  /**
   * Return results that are file actions related to this path.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_path" })
  queryPath?: string;

  /**
   * Return results that are file moves originating from this path.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_src" })
  querySrc?: string;

  /**
   * If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_target_id" })
  queryTargetId?: string;

  /**
   * If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_target_name" })
  queryTargetName?: string;

  /**
   * If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_target_permission" })
  queryTargetPermission?: string;

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_target_permission_set" })
  queryTargetPermissionSet?: string;

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_target_platform" })
  queryTargetPlatform?: string;

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_target_user_id" })
  queryTargetUserId?: string;

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_target_username" })
  queryTargetUsername?: string;

  /**
   * Return results that are actions performed by the user indiciated by this User ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_user_id" })
  queryUserId?: string;

  /**
   * Filter results by this username.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query_username" })
  queryUsername?: string;

  /**
   * If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "results_url" })
  resultsUrl?: string;

  /**
   * Start date/time of export range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startAt?: Date;

  /**
   * Status of export.  Will be: `building`, `ready`, or `failed`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}
