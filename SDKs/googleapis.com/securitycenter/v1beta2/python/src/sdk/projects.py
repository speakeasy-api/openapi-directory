"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def securitycenter_projects_locations_clusters_get_container_threat_detection_settings(self, request: operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest, security: operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsSecurity) -> operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse:
        r"""Get the ContainerThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetContainerThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateContainerThreatDetectionSettings for this purpose."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest, base_url, '/v1beta2/{name}', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContainerThreatDetectionSettings])
                res.container_threat_detection_settings = out

        return res

    def securitycenter_projects_locations_clusters_update_container_threat_detection_settings(self, request: operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest, security: operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsSecurity) -> operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse:
        r"""Update the ContainerThreatDetectionSettings resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest, base_url, '/v1beta2/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "container_threat_detection_settings_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContainerThreatDetectionSettings])
                res.container_threat_detection_settings = out

        return res

    def securitycenter_projects_web_security_scanner_settings_calculate(self, request: operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest, security: operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateSecurity) -> operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse:
        r"""Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest, base_url, '/v1beta2/{name}:calculate', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebSecurityScannerSettings])
                res.web_security_scanner_settings = out

        return res

    