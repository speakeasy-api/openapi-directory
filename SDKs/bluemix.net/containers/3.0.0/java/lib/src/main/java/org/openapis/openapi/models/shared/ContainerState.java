/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ContainerState {
    /**
     * The exit code indicating the root cause of why the container exited. Review the Docker API documentation to find a list of exit codes and their meaning. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExitCode")
    public String exitCode;

    public ContainerState withExitCode(String exitCode) {
        this.exitCode = exitCode;
        return this;
    }
    
    /**
     * Time when the container stopped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FinishedAt")
    public String finishedAt;

    public ContainerState withFinishedAt(String finishedAt) {
        this.finishedAt = finishedAt;
        return this;
    }
    
    /**
     * Not supported by IBM Containers, empty string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Ghost")
    public String ghost;

    public ContainerState withGhost(String ghost) {
        this.ghost = ghost;
        return this;
    }
    
    /**
     * The process ID on the compute host that runs the container process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Pid")
    public Long pid;

    public ContainerState withPid(Long pid) {
        this.pid = pid;
        return this;
    }
    
    /**
     * If set to true, the container is in a RUNNING state. If set to false, the container has stopped or crashed. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Running")
    public Boolean running;

    public ContainerState withRunning(Boolean running) {
        this.running = running;
        return this;
    }
    
    /**
     * Time when the container started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StartedAt")
    public String startedAt;

    public ContainerState withStartedAt(String startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    /**
     * The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;

    public ContainerState withStatus(String status) {
        this.status = status;
        return this;
    }
    
    public ContainerState(){}
}
