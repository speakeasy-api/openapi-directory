// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ZoneOffsetTransitionRuleDayOfWeekEnum - ~
type ZoneOffsetTransitionRuleDayOfWeekEnum string

const (
	ZoneOffsetTransitionRuleDayOfWeekEnumMonday    ZoneOffsetTransitionRuleDayOfWeekEnum = "MONDAY"
	ZoneOffsetTransitionRuleDayOfWeekEnumTuesday   ZoneOffsetTransitionRuleDayOfWeekEnum = "TUESDAY"
	ZoneOffsetTransitionRuleDayOfWeekEnumWednesday ZoneOffsetTransitionRuleDayOfWeekEnum = "WEDNESDAY"
	ZoneOffsetTransitionRuleDayOfWeekEnumThursday  ZoneOffsetTransitionRuleDayOfWeekEnum = "THURSDAY"
	ZoneOffsetTransitionRuleDayOfWeekEnumFriday    ZoneOffsetTransitionRuleDayOfWeekEnum = "FRIDAY"
	ZoneOffsetTransitionRuleDayOfWeekEnumSaturday  ZoneOffsetTransitionRuleDayOfWeekEnum = "SATURDAY"
	ZoneOffsetTransitionRuleDayOfWeekEnumSunday    ZoneOffsetTransitionRuleDayOfWeekEnum = "SUNDAY"
)

func (e *ZoneOffsetTransitionRuleDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MONDAY":
		fallthrough
	case "TUESDAY":
		fallthrough
	case "WEDNESDAY":
		fallthrough
	case "THURSDAY":
		fallthrough
	case "FRIDAY":
		fallthrough
	case "SATURDAY":
		fallthrough
	case "SUNDAY":
		*e = ZoneOffsetTransitionRuleDayOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ZoneOffsetTransitionRuleDayOfWeekEnum: %s", s)
	}
}

// ZoneOffsetTransitionRuleMonthEnum - ~
type ZoneOffsetTransitionRuleMonthEnum string

const (
	ZoneOffsetTransitionRuleMonthEnumJanuary   ZoneOffsetTransitionRuleMonthEnum = "JANUARY"
	ZoneOffsetTransitionRuleMonthEnumFebruary  ZoneOffsetTransitionRuleMonthEnum = "FEBRUARY"
	ZoneOffsetTransitionRuleMonthEnumMarch     ZoneOffsetTransitionRuleMonthEnum = "MARCH"
	ZoneOffsetTransitionRuleMonthEnumApril     ZoneOffsetTransitionRuleMonthEnum = "APRIL"
	ZoneOffsetTransitionRuleMonthEnumMay       ZoneOffsetTransitionRuleMonthEnum = "MAY"
	ZoneOffsetTransitionRuleMonthEnumJune      ZoneOffsetTransitionRuleMonthEnum = "JUNE"
	ZoneOffsetTransitionRuleMonthEnumJuly      ZoneOffsetTransitionRuleMonthEnum = "JULY"
	ZoneOffsetTransitionRuleMonthEnumAugust    ZoneOffsetTransitionRuleMonthEnum = "AUGUST"
	ZoneOffsetTransitionRuleMonthEnumSeptember ZoneOffsetTransitionRuleMonthEnum = "SEPTEMBER"
	ZoneOffsetTransitionRuleMonthEnumOctober   ZoneOffsetTransitionRuleMonthEnum = "OCTOBER"
	ZoneOffsetTransitionRuleMonthEnumNovember  ZoneOffsetTransitionRuleMonthEnum = "NOVEMBER"
	ZoneOffsetTransitionRuleMonthEnumDecember  ZoneOffsetTransitionRuleMonthEnum = "DECEMBER"
)

func (e *ZoneOffsetTransitionRuleMonthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JANUARY":
		fallthrough
	case "FEBRUARY":
		fallthrough
	case "MARCH":
		fallthrough
	case "APRIL":
		fallthrough
	case "MAY":
		fallthrough
	case "JUNE":
		fallthrough
	case "JULY":
		fallthrough
	case "AUGUST":
		fallthrough
	case "SEPTEMBER":
		fallthrough
	case "OCTOBER":
		fallthrough
	case "NOVEMBER":
		fallthrough
	case "DECEMBER":
		*e = ZoneOffsetTransitionRuleMonthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ZoneOffsetTransitionRuleMonthEnum: %s", s)
	}
}

// ZoneOffsetTransitionRuleTimeDefinitionEnum - ~
type ZoneOffsetTransitionRuleTimeDefinitionEnum string

const (
	ZoneOffsetTransitionRuleTimeDefinitionEnumUtc      ZoneOffsetTransitionRuleTimeDefinitionEnum = "UTC"
	ZoneOffsetTransitionRuleTimeDefinitionEnumWall     ZoneOffsetTransitionRuleTimeDefinitionEnum = "WALL"
	ZoneOffsetTransitionRuleTimeDefinitionEnumStandard ZoneOffsetTransitionRuleTimeDefinitionEnum = "STANDARD"
)

func (e *ZoneOffsetTransitionRuleTimeDefinitionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "WALL":
		fallthrough
	case "STANDARD":
		*e = ZoneOffsetTransitionRuleTimeDefinitionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ZoneOffsetTransitionRuleTimeDefinitionEnum: %s", s)
	}
}

// ZoneOffsetTransitionRule - ~
type ZoneOffsetTransitionRule struct {
	// ~
	DayOfMonthIndicator *int `json:"dayOfMonthIndicator,omitempty"`
	// ~
	DayOfWeek *ZoneOffsetTransitionRuleDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Represents a time part of a given date
	LocalTime *LocalTime `json:"localTime,omitempty"`
	// ~
	MidnightEndOfDay *bool `json:"midnightEndOfDay,omitempty"`
	// ~
	Month *ZoneOffsetTransitionRuleMonthEnum `json:"month,omitempty"`
	// ~
	OffsetAfter *ZoneOffset `json:"offsetAfter,omitempty"`
	// ~
	OffsetBefore *ZoneOffset `json:"offsetBefore,omitempty"`
	// ~
	StandardOffset *ZoneOffset `json:"standardOffset,omitempty"`
	// ~
	TimeDefinition *ZoneOffsetTransitionRuleTimeDefinitionEnum `json:"timeDefinition,omitempty"`
}
