/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChannelStatusEnum } from "./channelstatusenum";
import { ChannelStorage } from "./channelstorage";
import { RetentionPeriod } from "./retentionperiod";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.
 */
export class Channel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastMessageArrivalTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastMessageArrivalTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdateTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "retentionPeriod" })
  @Type(() => RetentionPeriod)
  retentionPeriod?: RetentionPeriod;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ChannelStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "storage" })
  @Type(() => ChannelStorage)
  storage?: ChannelStorage;
}
