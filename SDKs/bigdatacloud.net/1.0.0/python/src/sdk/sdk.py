"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "https://api.bigdatacloud.net",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""BigDataCloud's IP Geolocation API returns detailed information about the geographical location, ownership and connectivity of the provided IPv4 IP address.
    
    This API is powered by patent-pending â€˜Next Generation IP Geolocation Technology'. As a result, the API has sub-millisecond response time.
    
    You can authenticate the API with the use of API keys provided in your BigDataCloud account.
    
    BigDataCloud provides 10K Free queries per month. You can upgrade your package with $2/month per 10K additional queries.
    
    The API has Unprecedented Update Rate
    - Geolocation data re-evaluated every 2 hours or at least once a day
    - BGP data updated every 2 hours
    - Registry data updated at least once a day
    - Country object data usually updates at least once in a month 
    
    You can learn more about the API at [bigdatacloud.com](https://www.bigdatacloud.com/ip-geolocation-apis).
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def ip_geolocation_with_confidence_area_and_hazard_report_api(self, request: operations.IPGeolocationWithConfidenceAreaAndHazardReportAPIRequest) -> operations.IPGeolocationWithConfidenceAreaAndHazardReportAPIResponse:
        r"""IP Geolocation with Confidence Area and Hazard Report API
        This API returns additional security hazard report in addition to confidence area and locality information.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data/ip-geolocation-full'
        
        query_params = utils.get_query_params(operations.IPGeolocationWithConfidenceAreaAndHazardReportAPIRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IPGeolocationWithConfidenceAreaAndHazardReportAPIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def ip_geolocation_with_confidence_area_api(self, request: operations.IPGeolocationWithConfidenceAreaAPIRequest) -> operations.IPGeolocationWithConfidenceAreaAPIResponse:
        r"""IP Geolocation with Confidence Area API
        Returns list of geocoordinates which represents estimated geolocation confidence area.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data/ip-geolocation-with-confidence'
        
        query_params = utils.get_query_params(operations.IPGeolocationWithConfidenceAreaAPIRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IPGeolocationWithConfidenceAreaAPIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    