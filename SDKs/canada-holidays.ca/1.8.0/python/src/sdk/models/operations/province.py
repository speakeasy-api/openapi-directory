"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import province as shared_province
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProvinceOptionalEnum(str, Enum):
    r"""A boolean parameter (AB and BC only). If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC."""
    ONE = '1'
    ZERO = '0'
    TRUE = 'true'
    FALSE = 'false'

class ProvinceProvinceIDEnum(str, Enum):
    r"""A Canadian province abbreviation"""
    AB = 'AB'
    BC = 'BC'
    MB = 'MB'
    NB = 'NB'
    NL = 'NL'
    NS = 'NS'
    NT = 'NT'
    NU = 'NU'
    ON = 'ON'
    PE = 'PE'
    QC = 'QC'
    SK = 'SK'
    YT = 'YT'


@dataclasses.dataclass
class ProvinceRequest:
    
    province_id: ProvinceProvinceIDEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'provinceId', 'style': 'simple', 'explode': False }})
    r"""A Canadian province abbreviation"""  
    optional: Optional[ProvinceOptionalEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'optional', 'style': 'form', 'explode': True }})
    r"""A boolean parameter (AB and BC only). If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC."""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""A calendar year"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Province400ApplicationJSON:
    r"""Bad Request"""
    
    error: Optional[shared_error.Error] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Province200ApplicationJSON:
    r"""OK"""
    
    province: Optional[shared_province.Province] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('province'), 'exclude': lambda f: f is None }})
    r"""A Canadian province or territory"""  
    

@dataclasses.dataclass
class ProvinceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    province_200_application_json_object: Optional[Province200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    province_400_application_json_object: Optional[Province400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    