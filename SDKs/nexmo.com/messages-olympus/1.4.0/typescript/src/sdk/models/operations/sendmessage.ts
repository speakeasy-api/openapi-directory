/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class SendMessageSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basicAuth?: shared.SchemeBasicAuth;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuth?: string;
}

/**
 * The channel to send to. You must provide `viber_service` in this field
 */
export enum SendMessageRequestBody5FileChannelEnum {
  ViberService = "viber_service",
}

export class SendMessageRequestBody5FileFile extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The type of message to send. You must provide `file` in this field
 */
export enum SendMessageRequestBody5FileMessageTypeEnum {
  File = "file",
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
 */
export enum SendMessageRequestBody5FileViberServiceCategoryEnum {
  Transaction = "transaction",
  Promotion = "promotion",
}

export class SendMessageRequestBody5FileViberService extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody5FileViberServiceCategoryEnum;

  /**
   * Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: number;

  /**
   * Viber-specific type definition. To use "template", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class SendMessageRequestBody5File extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `viber_service` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody5FileChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  @Type(() => SendMessageRequestBody5FileFile)
  file: SendMessageRequestBody5FileFile;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `file` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody5FileMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "viber_service" })
  @Type(() => SendMessageRequestBody5FileViberService)
  viberService?: SendMessageRequestBody5FileViberService;
}

/**
 * The channel to send to. You must provide `viber_service` in this field
 */
export enum SendMessageRequestBody5VideoChannelEnum {
  ViberService = "viber_service",
}

/**
 * The type of message to send. You must provide `video` in this field
 */
export enum SendMessageRequestBody5VideoMessageTypeEnum {
  Video = "video",
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
 */
export enum SendMessageRequestBody5VideoViberServiceCategoryEnum {
  Transaction = "transaction",
  Promotion = "promotion",
}

export class SendMessageRequestBody5VideoViberService extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody5VideoViberServiceCategoryEnum;

  /**
   * The duration of the video in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * The file size of the video in MB.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_size" })
  fileSize?: string;

  /**
   * Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: number;

  /**
   * Viber-specific type definition. To use "template", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class SendMessageRequestBody5VideoVideo extends SpeakeasyBase {
  /**
   * Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
   *
   * @remarks
   * > Note: Only supports video codec H.264 and audio codec AAC
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class SendMessageRequestBody5Video extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `viber_service` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody5VideoChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `video` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody5VideoMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "viber_service" })
  @Type(() => SendMessageRequestBody5VideoViberService)
  viberService?: SendMessageRequestBody5VideoViberService;

  @SpeakeasyMetadata()
  @Expose({ name: "video" })
  @Type(() => SendMessageRequestBody5VideoVideo)
  video: SendMessageRequestBody5VideoVideo;
}

/**
 * The channel to send to. You must provide `viber_service` in this field
 */
export enum SendMessageRequestBody5ImageChannelEnum {
  ViberService = "viber_service",
}

export class SendMessageRequestBody5ImageImage extends SpeakeasyBase {
  /**
   * The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The type of message to send. You must provide `image` in this field
 */
export enum SendMessageRequestBody5ImageMessageTypeEnum {
  Image = "image",
}

/**
 * Node for Viber action buttons.
 */
export class SendMessageRequestBody5ImageViberServiceAction extends SpeakeasyBase {
  /**
   * Text which is rendered on the action button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * A URL which is requested when the action button is clicked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
 */
export enum SendMessageRequestBody5ImageViberServiceCategoryEnum {
  Transaction = "transaction",
  Promotion = "promotion",
}

export class SendMessageRequestBody5ImageViberService extends SpeakeasyBase {
  /**
   * Node for Viber action buttons.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => SendMessageRequestBody5ImageViberServiceAction)
  action?: SendMessageRequestBody5ImageViberServiceAction;

  /**
   * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody5ImageViberServiceCategoryEnum;

  /**
   * Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: number;

  /**
   * Viber-specific type definition. To use "template", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class SendMessageRequestBody5Image extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `viber_service` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody5ImageChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => SendMessageRequestBody5ImageImage)
  image: SendMessageRequestBody5ImageImage;

  /**
   * The type of message to send. You must provide `image` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody5ImageMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "viber_service" })
  @Type(() => SendMessageRequestBody5ImageViberService)
  viberService?: SendMessageRequestBody5ImageViberService;
}

/**
 * The channel to send to. You must provide `viber_service` in this field
 */
export enum SendMessageRequestBody5TextChannelEnum {
  ViberService = "viber_service",
}

/**
 * The type of message to send. You must provide `text` in this field
 */
export enum SendMessageRequestBody5TextMessageTypeEnum {
  Text = "text",
}

/**
 * Node for Viber action buttons.
 */
export class SendMessageRequestBody5TextViberServiceAction extends SpeakeasyBase {
  /**
   * Text which is rendered on the action button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * A URL which is requested when the action button is clicked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
 */
export enum SendMessageRequestBody5TextViberServiceCategoryEnum {
  Transaction = "transaction",
  Promotion = "promotion",
}

export class SendMessageRequestBody5TextViberService extends SpeakeasyBase {
  /**
   * Node for Viber action buttons.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => SendMessageRequestBody5TextViberServiceAction)
  action?: SendMessageRequestBody5TextViberServiceAction;

  /**
   * The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody5TextViberServiceCategoryEnum;

  /**
   * Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: number;

  /**
   * Viber-specific type definition. To use "template", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * The text of message to send.
 */
export class SendMessageRequestBody5Text extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `viber_service` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody5TextChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `text` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody5TextMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "viber_service" })
  @Type(() => SendMessageRequestBody5TextViberService)
  viberService?: SendMessageRequestBody5TextViberService;
}

/**
 * The channel to send to. You must provide `messenger` in this field
 */
export enum SendMessageRequestBody4FileChannelEnum {
  Messenger = "messenger",
}

export class SendMessageRequestBody4FileFile extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The type of message to send. You must provide `file` in this field
 */
export enum SendMessageRequestBody4FileMessageTypeEnum {
  File = "file",
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
 */
export enum SendMessageRequestBody4FileMessengerCategoryEnum {
  Response = "response",
  Update = "update",
  MessageTag = "message_tag",
}

export class SendMessageRequestBody4FileMessenger extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody4FileMessengerCategoryEnum;

  /**
   * A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag?: string;
}

export class SendMessageRequestBody4File extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `messenger` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody4FileChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  @Type(() => SendMessageRequestBody4FileFile)
  file: SendMessageRequestBody4FileFile;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `file` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody4FileMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "messenger" })
  @Type(() => SendMessageRequestBody4FileMessenger)
  messenger?: SendMessageRequestBody4FileMessenger;

  /**
   * The ID of the message recipient
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `messenger` in this field
 */
export enum SendMessageRequestBody4VideoChannelEnum {
  Messenger = "messenger",
}

/**
 * The type of message to send. You must provide `video` in this field
 */
export enum SendMessageRequestBody4VideoMessageTypeEnum {
  Video = "video",
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
 */
export enum SendMessageRequestBody4VideoMessengerCategoryEnum {
  Response = "response",
  Update = "update",
  MessageTag = "message_tag",
}

export class SendMessageRequestBody4VideoMessenger extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody4VideoMessengerCategoryEnum;

  /**
   * A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag?: string;
}

export class SendMessageRequestBody4VideoVideo extends SpeakeasyBase {
  /**
   * Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
   *
   * @remarks
   * > Note: Only supports video codec H.264 and audio codec AAC
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class SendMessageRequestBody4Video extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `messenger` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody4VideoChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `video` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody4VideoMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "messenger" })
  @Type(() => SendMessageRequestBody4VideoMessenger)
  messenger?: SendMessageRequestBody4VideoMessenger;

  /**
   * The ID of the message recipient
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "video" })
  @Type(() => SendMessageRequestBody4VideoVideo)
  video: SendMessageRequestBody4VideoVideo;
}

export class SendMessageRequestBody4AudioAudio extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The channel to send to. You must provide `messenger` in this field
 */
export enum SendMessageRequestBody4AudioChannelEnum {
  Messenger = "messenger",
}

/**
 * The type of message to send. You must provide `audio` in this field
 */
export enum SendMessageRequestBody4AudioMessageTypeEnum {
  Audio = "audio",
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
 */
export enum SendMessageRequestBody4AudioMessengerCategoryEnum {
  Response = "response",
  Update = "update",
  MessageTag = "message_tag",
}

export class SendMessageRequestBody4AudioMessenger extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody4AudioMessengerCategoryEnum;

  /**
   * A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag?: string;
}

export class SendMessageRequestBody4Audio extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "audio" })
  @Type(() => SendMessageRequestBody4AudioAudio)
  audio: SendMessageRequestBody4AudioAudio;

  /**
   * The channel to send to. You must provide `messenger` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody4AudioChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `audio` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody4AudioMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "messenger" })
  @Type(() => SendMessageRequestBody4AudioMessenger)
  messenger?: SendMessageRequestBody4AudioMessenger;

  /**
   * The ID of the message recipient
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `messenger` in this field
 */
export enum SendMessageRequestBody4ImageChannelEnum {
  Messenger = "messenger",
}

export class SendMessageRequestBody4ImageImage extends SpeakeasyBase {
  /**
   * The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The type of message to send. You must provide `image` in this field
 */
export enum SendMessageRequestBody4ImageMessageTypeEnum {
  Image = "image",
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
 */
export enum SendMessageRequestBody4ImageMessengerCategoryEnum {
  Response = "response",
  Update = "update",
  MessageTag = "message_tag",
}

export class SendMessageRequestBody4ImageMessenger extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody4ImageMessengerCategoryEnum;

  /**
   * A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag?: string;
}

export class SendMessageRequestBody4Image extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `messenger` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody4ImageChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => SendMessageRequestBody4ImageImage)
  image: SendMessageRequestBody4ImageImage;

  /**
   * The type of message to send. You must provide `image` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody4ImageMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "messenger" })
  @Type(() => SendMessageRequestBody4ImageMessenger)
  messenger?: SendMessageRequestBody4ImageMessenger;

  /**
   * The ID of the message recipient
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `messenger` in this field
 */
export enum SendMessageRequestBody4TextChannelEnum {
  Messenger = "messenger",
}

/**
 * The type of message to send. You must provide `text` in this field
 */
export enum SendMessageRequestBody4TextMessageTypeEnum {
  Text = "text",
}

/**
 * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
 */
export enum SendMessageRequestBody4TextMessengerCategoryEnum {
  Response = "response",
  Update = "update",
  MessageTag = "message_tag",
}

export class SendMessageRequestBody4TextMessenger extends SpeakeasyBase {
  /**
   * The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: SendMessageRequestBody4TextMessengerCategoryEnum;

  /**
   * A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag?: string;
}

/**
 * The text of message to send.
 */
export class SendMessageRequestBody4Text extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `messenger` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody4TextChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `text` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody4TextMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "messenger" })
  @Type(() => SendMessageRequestBody4TextMessenger)
  messenger?: SendMessageRequestBody4TextMessenger;

  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  /**
   * The ID of the message recipient
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3CustomChannelEnum {
  Whatsapp = "whatsapp",
}

/**
 * The type of message to send. You must provide `custom` in this field
 */
export enum SendMessageRequestBody3CustomMessageTypeEnum {
  Custom = "custom",
}

export class SendMessageRequestBody3Custom extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3CustomChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * A custom payload, which is passed directly to WhatsApp for certain features such as templates and interactive messages. The schema of a custom object can vary widely. [Read more about Custom Objects](https://developer.vonage.com/messages/concepts/custom-objects).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom" })
  custom?: Record<string, any>;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `custom` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3CustomMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3TemplateChannelEnum {
  Whatsapp = "whatsapp",
}

/**
 * The type of message to send. You must provide `template` in this field
 */
export enum SendMessageRequestBody3TemplateMessageTypeEnum {
  Template = "template",
}

export class SendMessageRequestBody3TemplateTemplate extends SpeakeasyBase {
  /**
   * The name of the template. For WhatsApp use your WhatsApp namespace (available via Facebook Business Manager), followed by a colon : and the name of the template to use.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The parameters are an array of strings, with the first string being used for {{1}} in the template, with the second being {{2}} etc. Only required if the template specified by `name` contains parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameters" })
  parameters?: string[];
}

/**
 * Policy for resolving what language template to use. As of right now the only valid choice is `deterministic`.
 */
export enum SendMessageRequestBody3TemplateWhatsappPolicyEnum {
  Deterministic = "deterministic",
}

export class SendMessageRequestBody3TemplateWhatsapp extends SpeakeasyBase {
  /**
   * The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language of the template. See [the WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages-) for supported languages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale: string;

  /**
   * Policy for resolving what language template to use. As of right now the only valid choice is `deterministic`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policy" })
  policy?: SendMessageRequestBody3TemplateWhatsappPolicyEnum;
}

export class SendMessageRequestBody3Template extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3TemplateChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `template` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3TemplateMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "template" })
  @Type(() => SendMessageRequestBody3TemplateTemplate)
  template: SendMessageRequestBody3TemplateTemplate;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "whatsapp" })
  @Type(() => SendMessageRequestBody3TemplateWhatsapp)
  whatsapp: SendMessageRequestBody3TemplateWhatsapp;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3FileChannelEnum {
  Whatsapp = "whatsapp",
}

export class SendMessageRequestBody3FileFile extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The type of message to send. You must provide `file` in this field
 */
export enum SendMessageRequestBody3FileMessageTypeEnum {
  File = "file",
}

export class SendMessageRequestBody3File extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3FileChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  @Type(() => SendMessageRequestBody3FileFile)
  file: SendMessageRequestBody3FileFile;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `file` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3FileMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3VideoChannelEnum {
  Whatsapp = "whatsapp",
}

/**
 * The type of message to send. You must provide `video` in this field
 */
export enum SendMessageRequestBody3VideoMessageTypeEnum {
  Video = "video",
}

export class SendMessageRequestBody3VideoVideo extends SpeakeasyBase {
  /**
   * Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
   *
   * @remarks
   * > Note: Only supports video codec H.264 and audio codec AAC
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class SendMessageRequestBody3Video extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3VideoChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `video` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3VideoMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "video" })
  @Type(() => SendMessageRequestBody3VideoVideo)
  video: SendMessageRequestBody3VideoVideo;
}

export class SendMessageRequestBody3AudioAudio extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3AudioChannelEnum {
  Whatsapp = "whatsapp",
}

/**
 * The type of message to send. You must provide `audio` in this field
 */
export enum SendMessageRequestBody3AudioMessageTypeEnum {
  Audio = "audio",
}

export class SendMessageRequestBody3Audio extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "audio" })
  @Type(() => SendMessageRequestBody3AudioAudio)
  audio: SendMessageRequestBody3AudioAudio;

  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3AudioChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `audio` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3AudioMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3ImageChannelEnum {
  Whatsapp = "whatsapp",
}

export class SendMessageRequestBody3ImageImage extends SpeakeasyBase {
  /**
   * The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The type of message to send. You must provide `image` in this field
 */
export enum SendMessageRequestBody3ImageMessageTypeEnum {
  Image = "image",
}

export class SendMessageRequestBody3Image extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3ImageChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => SendMessageRequestBody3ImageImage)
  image: SendMessageRequestBody3ImageImage;

  /**
   * The type of message to send. You must provide `image` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3ImageMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3LocationChannelEnum {
  Whatsapp = "whatsapp",
}

export class SendMessageRequestBody3LocationLocation extends SpeakeasyBase {
  /**
   * Address of the location. Only displayed if `name` is present.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * Latitude of the location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lat" })
  lat: number;

  /**
   * Longitude of the location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "long" })
  long: number;

  /**
   * Name of the location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * The type of message to send. You must provide `location` in this field
 */
export enum SendMessageRequestBody3LocationMessageTypeEnum {
  Location = "location",
}

export class SendMessageRequestBody3Location extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3LocationChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => SendMessageRequestBody3LocationLocation)
  location: SendMessageRequestBody3LocationLocation;

  /**
   * The type of message to send. You must provide `location` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3LocationMessageTypeEnum;

  /**
   * The location to be sent in the message.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: any;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `whatsapp` in this field
 */
export enum SendMessageRequestBody3TextChannelEnum {
  Whatsapp = "whatsapp",
}

/**
 * The type of message to send. You must provide `text` in this field
 */
export enum SendMessageRequestBody3TextMessageTypeEnum {
  Text = "text",
}

/**
 * The text of message to send.
 */
export class SendMessageRequestBody3Text extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `whatsapp` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody3TextChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `text` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody3TextMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `mms` in this field
 */
export enum SendMessageRequestBody2VideoChannelEnum {
  Mms = "mms",
}

/**
 * The type of message to send. You must provide `video` in this field
 */
export enum SendMessageRequestBody2VideoMessageTypeEnum {
  Video = "video",
}

export class SendMessageRequestBody2VideoVideo extends SpeakeasyBase {
  /**
   * Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
   *
   * @remarks
   * > Note: Only supports video codec H.264 and audio codec AAC
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class SendMessageRequestBody2Video extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `mms` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody2VideoChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `video` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody2VideoMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "video" })
  @Type(() => SendMessageRequestBody2VideoVideo)
  video: SendMessageRequestBody2VideoVideo;
}

export class SendMessageRequestBody2AudioAudio extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The channel to send to. You must provide `mms` in this field
 */
export enum SendMessageRequestBody2AudioChannelEnum {
  Mms = "mms",
}

/**
 * The type of message to send. You must provide `audio` in this field
 */
export enum SendMessageRequestBody2AudioMessageTypeEnum {
  Audio = "audio",
}

export class SendMessageRequestBody2Audio extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "audio" })
  @Type(() => SendMessageRequestBody2AudioAudio)
  audio: SendMessageRequestBody2AudioAudio;

  /**
   * The channel to send to. You must provide `mms` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody2AudioChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `audio` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody2AudioMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `mms` in this field
 */
export enum SendMessageRequestBody2VCardChannelEnum {
  Mms = "mms",
}

/**
 * The type of message to send. You must provide `vcard` in this field
 */
export enum SendMessageRequestBody2VCardMessageTypeEnum {
  Vcard = "vcard",
}

export class SendMessageRequestBody2VCardVcard extends SpeakeasyBase {
  /**
   * The publicly accessible URL of the vCard attachment. Supported types are .vcf only
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class SendMessageRequestBody2VCard extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `mms` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody2VCardChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `vcard` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody2VCardMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vcard" })
  @Type(() => SendMessageRequestBody2VCardVcard)
  vcard: SendMessageRequestBody2VCardVcard;
}

/**
 * The channel to send to. You must provide `mms` in this field
 */
export enum SendMessageRequestBody2ImageChannelEnum {
  Mms = "mms",
}

export class SendMessageRequestBody2ImageImage extends SpeakeasyBase {
  /**
   * The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

/**
 * The type of message to send. You must provide `image` in this field
 */
export enum SendMessageRequestBody2ImageMessageTypeEnum {
  Image = "image",
}

export class SendMessageRequestBody2Image extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `mms` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody2ImageChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => SendMessageRequestBody2ImageImage)
  image: SendMessageRequestBody2ImageImage;

  /**
   * The type of message to send. You must provide `image` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody2ImageMessageTypeEnum;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * The channel to send to. You must provide `sms` in this field
 */
export enum SendMessageRequestBody1TextChannelEnum {
  Sms = "sms",
}

/**
 * The type of message to send. You must provide `text` in this field
 */
export enum SendMessageRequestBody1TextMessageTypeEnum {
  Text = "text",
}

/**
 * The text of message to send.
 */
export class SendMessageRequestBody1Text extends SpeakeasyBase {
  /**
   * The channel to send to. You must provide `sms` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: SendMessageRequestBody1TextChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The type of message to send. You must provide `text` in this field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_type" })
  messageType: SendMessageRequestBody1TextMessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  /**
   * The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;
}

/**
 * Viber
 */
export class SendMessage202ApplicationJson5 extends SpeakeasyBase {
  /**
   * The UUID of the message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_uuid" })
  messageUuid?: string;
}

/**
 * Messenger
 */
export class SendMessage202ApplicationJson4 extends SpeakeasyBase {
  /**
   * The UUID of the message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_uuid" })
  messageUuid?: string;
}

/**
 * WhatsApp
 */
export class SendMessage202ApplicationJson3 extends SpeakeasyBase {
  /**
   * The UUID of the message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_uuid" })
  messageUuid?: string;
}

/**
 * MMS
 */
export class SendMessage202ApplicationJson2 extends SpeakeasyBase {
  /**
   * The UUID of the message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_uuid" })
  messageUuid?: string;
}

/**
 * SMS
 */
export class SendMessage202ApplicationJson1 extends SpeakeasyBase {
  /**
   * The UUID of the message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_uuid" })
  messageUuid?: string;
}

export class SendMessageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Internal error
   */
  @SpeakeasyMetadata()
  errorInternal?: shared.ErrorInternal;

  /**
   * Payment Required
   */
  @SpeakeasyMetadata()
  errorPaymentRequired?: shared.ErrorPaymentRequired;

  /**
   * Too Many Requests
   */
  @SpeakeasyMetadata()
  errorThrottled?: shared.ErrorThrottled;

  /**
   * Accepted.
   */
  @SpeakeasyMetadata()
  sendMessage202ApplicationJSONObject?: any;

  /**
   * Authentication failure
   */
  @SpeakeasyMetadata()
  sendMessage401ApplicationJSONOneOf?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Unprocessable Entity
   */
  @SpeakeasyMetadata()
  sendMessage422ApplicationJSONOneOf?: any;
}
