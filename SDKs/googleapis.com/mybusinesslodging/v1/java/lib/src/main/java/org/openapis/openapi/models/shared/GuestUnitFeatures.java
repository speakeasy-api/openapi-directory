/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GuestUnitFeatures - Features and available amenities in the guest unit.
 */
public class GuestUnitFeatures {
    /**
     * Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bungalowOrVilla")
    public Boolean bungalowOrVilla;

    public GuestUnitFeatures withBungalowOrVilla(Boolean bungalowOrVilla) {
        this.bungalowOrVilla = bungalowOrVilla;
        return this;
    }
    
    /**
     * Bungalow or villa exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bungalowOrVillaException")
    public GuestUnitFeaturesBungalowOrVillaExceptionEnum bungalowOrVillaException;

    public GuestUnitFeatures withBungalowOrVillaException(GuestUnitFeaturesBungalowOrVillaExceptionEnum bungalowOrVillaException) {
        this.bungalowOrVillaException = bungalowOrVillaException;
        return this;
    }
    
    /**
     * Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectingUnitAvailable")
    public Boolean connectingUnitAvailable;

    public GuestUnitFeatures withConnectingUnitAvailable(Boolean connectingUnitAvailable) {
        this.connectingUnitAvailable = connectingUnitAvailable;
        return this;
    }
    
    /**
     * Connecting unit available exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectingUnitAvailableException")
    public GuestUnitFeaturesConnectingUnitAvailableExceptionEnum connectingUnitAvailableException;

    public GuestUnitFeatures withConnectingUnitAvailableException(GuestUnitFeaturesConnectingUnitAvailableExceptionEnum connectingUnitAvailableException) {
        this.connectingUnitAvailableException = connectingUnitAvailableException;
        return this;
    }
    
    /**
     * Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel's frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executiveFloor")
    public Boolean executiveFloor;

    public GuestUnitFeatures withExecutiveFloor(Boolean executiveFloor) {
        this.executiveFloor = executiveFloor;
        return this;
    }
    
    /**
     * Executive floor exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executiveFloorException")
    public GuestUnitFeaturesExecutiveFloorExceptionEnum executiveFloorException;

    public GuestUnitFeatures withExecutiveFloorException(GuestUnitFeaturesExecutiveFloorExceptionEnum executiveFloorException) {
        this.executiveFloorException = executiveFloorException;
        return this;
    }
    
    /**
     * Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxAdultOccupantsCount")
    public Integer maxAdultOccupantsCount;

    public GuestUnitFeatures withMaxAdultOccupantsCount(Integer maxAdultOccupantsCount) {
        this.maxAdultOccupantsCount = maxAdultOccupantsCount;
        return this;
    }
    
    /**
     * Max adult occupants count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxAdultOccupantsCountException")
    public GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum maxAdultOccupantsCountException;

    public GuestUnitFeatures withMaxAdultOccupantsCountException(GuestUnitFeaturesMaxAdultOccupantsCountExceptionEnum maxAdultOccupantsCountException) {
        this.maxAdultOccupantsCountException = maxAdultOccupantsCountException;
        return this;
    }
    
    /**
     * Max child occupants count. The total number of children allowed to stay overnight in the room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxChildOccupantsCount")
    public Integer maxChildOccupantsCount;

    public GuestUnitFeatures withMaxChildOccupantsCount(Integer maxChildOccupantsCount) {
        this.maxChildOccupantsCount = maxChildOccupantsCount;
        return this;
    }
    
    /**
     * Max child occupants count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxChildOccupantsCountException")
    public GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum maxChildOccupantsCountException;

    public GuestUnitFeatures withMaxChildOccupantsCountException(GuestUnitFeaturesMaxChildOccupantsCountExceptionEnum maxChildOccupantsCountException) {
        this.maxChildOccupantsCountException = maxChildOccupantsCountException;
        return this;
    }
    
    /**
     * Max occupants count. The total number of guests allowed to stay overnight in the guestroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxOccupantsCount")
    public Integer maxOccupantsCount;

    public GuestUnitFeatures withMaxOccupantsCount(Integer maxOccupantsCount) {
        this.maxOccupantsCount = maxOccupantsCount;
        return this;
    }
    
    /**
     * Max occupants count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxOccupantsCountException")
    public GuestUnitFeaturesMaxOccupantsCountExceptionEnum maxOccupantsCountException;

    public GuestUnitFeatures withMaxOccupantsCountException(GuestUnitFeaturesMaxOccupantsCountExceptionEnum maxOccupantsCountException) {
        this.maxOccupantsCountException = maxOccupantsCountException;
        return this;
    }
    
    /**
     * Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner's residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateHome")
    public Boolean privateHome;

    public GuestUnitFeatures withPrivateHome(Boolean privateHome) {
        this.privateHome = privateHome;
        return this;
    }
    
    /**
     * Private home exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateHomeException")
    public GuestUnitFeaturesPrivateHomeExceptionEnum privateHomeException;

    public GuestUnitFeatures withPrivateHomeException(GuestUnitFeaturesPrivateHomeExceptionEnum privateHomeException) {
        this.privateHomeException = privateHomeException;
        return this;
    }
    
    /**
     * Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suite")
    public Boolean suite;

    public GuestUnitFeatures withSuite(Boolean suite) {
        this.suite = suite;
        return this;
    }
    
    /**
     * Suite exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suiteException")
    public GuestUnitFeaturesSuiteExceptionEnum suiteException;

    public GuestUnitFeatures withSuiteException(GuestUnitFeaturesSuiteExceptionEnum suiteException) {
        this.suiteException = suiteException;
        return this;
    }
    
    /**
     * Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tier")
    public GuestUnitFeaturesTierEnum tier;

    public GuestUnitFeatures withTier(GuestUnitFeaturesTierEnum tier) {
        this.tier = tier;
        return this;
    }
    
    /**
     * Tier exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tierException")
    public GuestUnitFeaturesTierExceptionEnum tierException;

    public GuestUnitFeatures withTierException(GuestUnitFeaturesTierExceptionEnum tierException) {
        this.tierException = tierException;
        return this;
    }
    
    /**
     * An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalLivingAreas")
    public LivingArea totalLivingAreas;

    public GuestUnitFeatures withTotalLivingAreas(LivingArea totalLivingAreas) {
        this.totalLivingAreas = totalLivingAreas;
        return this;
    }
    
    /**
     * Views available from the guest unit itself.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("views")
    public ViewsFromUnit views;

    public GuestUnitFeatures withViews(ViewsFromUnit views) {
        this.views = views;
        return this;
    }
    
    public GuestUnitFeatures(){}
}
