/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworkApplianceSingleLanRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Type of the origin
 */
export enum GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum {
  Independent = "independent",
  Internet = "internet",
}

/**
 * The origin of the prefix
 */
export class GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin extends SpeakeasyBase {
  /**
   * Interfaces associated with the prefix
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interfaces" })
  interfaces?: string[];

  /**
   * Type of the origin
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum;
}

export class GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments extends SpeakeasyBase {
  /**
   * Auto assign a /64 prefix from the origin to the single LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autonomous" })
  autonomous?: boolean;

  /**
   * The origin of the prefix
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  @Type(
    () =>
      GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin
  )
  origin?: GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin;

  /**
   * Manual configuration of the IPv6 Appliance IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticApplianceIp6" })
  staticApplianceIp6?: string;

  /**
   * Manual configuration of a /64 prefix on the single LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticPrefix" })
  staticPrefix?: string;
}

/**
 * IPv6 configuration on the single LAN
 */
export class GetNetworkApplianceSingleLan200ApplicationJSONIpv6 extends SpeakeasyBase {
  /**
   * Enable IPv6 on single LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Prefix assignments on the single LAN
   */
  @SpeakeasyMetadata({
    elemType:
      GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments,
  })
  @Expose({ name: "prefixAssignments" })
  @Type(
    () => GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments
  )
  prefixAssignments?: GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments[];
}

/**
 * Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
 */
export class GetNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp extends SpeakeasyBase {
  /**
   * Enable Mandatory DHCP on single LAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * Successful operation
 */
export class GetNetworkApplianceSingleLan200ApplicationJSON extends SpeakeasyBase {
  /**
   * The local IP of the appliance on the single LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applianceIp" })
  applianceIp?: string;

  /**
   * IPv6 configuration on the single LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  @Type(() => GetNetworkApplianceSingleLan200ApplicationJSONIpv6)
  ipv6?: GetNetworkApplianceSingleLan200ApplicationJSONIpv6;

  /**
   * Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandatoryDhcp" })
  @Type(() => GetNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp)
  mandatoryDhcp?: GetNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp;

  /**
   * The subnet of the single LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnet" })
  subnet?: string;
}

export class GetNetworkApplianceSingleLanResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getNetworkApplianceSingleLan200ApplicationJSONObject?: GetNetworkApplianceSingleLan200ApplicationJSON;
}
