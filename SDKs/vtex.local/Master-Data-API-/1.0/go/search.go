// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
)

// search - The ```search``` API is intended to query a collection of documents.
type search struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newSearch(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *search {
	return &search{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// Searchdocuments - Search documents
// Retrieves documents' information, while choosing which fields will be returned and filtering documents by specific fields.
//
// > The response header `REST-Content-Range` indicates the total amount of results for that specific search. For example, it may return `resources 0-100/136108`, which indicates it has returned results from 0 to 100 of a total 136108.
//
// Below you can see some query examples and learn more about each query parameter.
//
// > Avoid sending too many requests with wildcards (`*`) in the search parameters or that use the `keyword` parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code `503`.
//
// ## Query examples
//
// ### Simple filter
//
// ```
// /dataentities/Client/search?email=my@email.com
// ```
//
// ### Complex filter
//
// ```
// /dataentities/Client/search?_where=(firstName=Jon OR lastName=Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)
// ```
//
// ### Date Range
//
// ```
// /dataentities/Client/search?_where=createdIn between 2001-01-01 AND 2016-01-01
// ```
//
// ### Range numeric fields
//
// ```
// /dataentities/Client/search?_where=age between 18 AND 25
// ```
//
// ### Partial filter
//
// ```
// /dataentities/Client/search?firstName=*Maria*
// ```
//
// ### Filter for null values
//
// ```
// /dataentities/Client/search?_where=firstName is null
// ```
//
// ### Filter for non-null values
//
// ```
// /dataentities/Client/search?_where=firstName is not null
// ```
//
// ### Filter for difference
// ```
// /dataentities/Client/search?_where=firstName<>maria
// ```
//
// ### Filter greater than or less than
// ```
// /dataentities/Client/search?_where=number>5
// /dataentities/Client/search?_where=date<2001-01-01
// ```
func (s *search) Searchdocuments(ctx context.Context, request operations.SearchdocumentsRequest) (*operations.SearchdocumentsResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/api/dataentities/{dataEntityName}/search", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.SearchdocumentsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	case httpRes.StatusCode == 503:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Searchdocuments503ApplicationJSONAny = out
		}
	}

	return res, nil
}
