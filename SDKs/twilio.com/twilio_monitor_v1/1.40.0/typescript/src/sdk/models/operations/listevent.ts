/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListEventServerList = ["https://monitor.twilio.com"] as const;

export class ListEventSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListEventRequest extends SpeakeasyBase {
  /**
   * Only include events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ActorSid",
  })
  actorSid?: string;

  /**
   * Only include events that occurred on or before this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EndDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  endDate?: Date;

  /**
   * Only include events of this [Event Type](https://www.twilio.com/docs/usage/monitor-events#event-types).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EventType",
  })
  eventType?: string;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;

  /**
   * Only include events that refer to this resource. Useful for discovering the history of a specific resource.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ResourceSid",
  })
  resourceSid?: string;

  /**
   * Only include events that originated from this IP address. Useful for tracking suspicious activity originating from the API or the Twilio Console.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SourceIpAddress",
  })
  sourceIpAddress?: string;

  /**
   * Only include events that occurred on or after this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=StartDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  startDate?: Date;
}

export class ListEventListEventResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "first_page_url" })
  firstPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_url" })
  nextPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_url" })
  previousPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * OK
 */
export class ListEventListEventResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.MonitorV1Event })
  @Expose({ name: "events" })
  @Type(() => shared.MonitorV1Event)
  events?: shared.MonitorV1Event[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ListEventListEventResponseMeta)
  meta?: ListEventListEventResponseMeta;
}

export class ListEventResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listEventResponse?: ListEventListEventResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
