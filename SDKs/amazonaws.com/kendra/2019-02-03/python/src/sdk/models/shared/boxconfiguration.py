"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasourcetoindexfieldmapping as shared_datasourcetoindexfieldmapping
from ..shared import datasourcevpcconfiguration as shared_datasourcevpcconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BoxConfiguration:
    r"""Provides the configuration information to connect to Box as your data source."""
    
    enterprise_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnterpriseId') }})  
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretArn') }})  
    comment_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommentFieldMappings'), 'exclude': lambda f: f is None }})  
    crawl_comments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlComments'), 'exclude': lambda f: f is None }})  
    crawl_tasks: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlTasks'), 'exclude': lambda f: f is None }})  
    crawl_web_links: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlWebLinks'), 'exclude': lambda f: f is None }})  
    exclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionPatterns'), 'exclude': lambda f: f is None }})  
    file_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileFieldMappings'), 'exclude': lambda f: f is None }})  
    inclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionPatterns'), 'exclude': lambda f: f is None }})  
    task_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskFieldMappings'), 'exclude': lambda f: f is None }})  
    use_change_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseChangeLog'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_datasourcevpcconfiguration.DataSourceVpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfiguration'), 'exclude': lambda f: f is None }})  
    web_link_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WebLinkFieldMappings'), 'exclude': lambda f: f is None }})  
    