/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetEventsV3EventsGetPageSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=query;name=hapikey",
  })
  hapikey?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Legacy?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=private-app-legacy",
  })
  privateAppsLegacy?: string;
}

export class GetEventsV3EventsGetPageRequest extends SpeakeasyBase {
  /**
   * An additional parameter that may be used to get the next `limit` set of results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=after" })
  after?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=before",
  })
  before?: string;

  /**
   * Limits the response to the specified event type.  For example `&eventType=e_visited_page` returns only `e_visited_page` events.  If not present all event types are returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=eventType",
  })
  eventType?: string;

  /**
   * The maximum number of events to return, defaults to 20.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * The id of the selected object. If not present, then the `objectProperty` parameter is required.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=objectId",
  })
  objectId?: number;

  /**
   * The type of object being selected. Valid values are hubspot named object types (e.g. `contact`).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=objectType",
  })
  objectType?: string;

  /**
   * The starting time as an ISO 8601 timestamp.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=occurredAfter;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  occurredAfter?: Date;

  /**
   * The ending time as an ISO 8601 timestamp.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=occurredBefore;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  occurredBefore?: Date;

  /**
   * Selects the sort field and order. Defaults to ascending, prefix with `-` for descending order. `occurredAt` is the only field supported for sorting.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string[];
}

export class GetEventsV3EventsGetPageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  /**
   * successful operation
   */
  @SpeakeasyMetadata()
  collectionResponseExternalUnifiedEvent?: shared.CollectionResponseExternalUnifiedEvent;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
