/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AppD - Content of the AppD is returned.
 */
public class AppD {
    /**
     * Identifier of this MEC application descriptor. This attribute shall be globally unique. See note\u00a01.
     */
    
    public String appDId;

    public AppD withAppDId(String appDId) {
        this.appDId = appDId;
        return this;
    }
    
    /**
     * Describes DNS rules the MEC application requires.
     */
    
    public DNSRuleDescriptor[] appDNSRule;

    public AppD withAppDNSRule(DNSRuleDescriptor[] appDNSRule) {
        this.appDNSRule = appDNSRule;
        return this;
    }
    
    /**
     * Identifies the version of the application descriptor.
     */
    
    public String appDVersion;

    public AppD withAppDVersion(String appDVersion) {
        this.appDVersion = appDVersion;
        return this;
    }
    
    /**
     * Human readable description of the MEC application.
     */
    
    public String appDescription;

    public AppD withAppDescription(String appDescription) {
        this.appDescription = appDescription;
        return this;
    }
    
    /**
     * Describes external interface(s) exposed by this MEC application.
     */
    
    public AppExternalCpd[] appExtCpd;

    public AppD withAppExtCpd(AppExternalCpd[] appExtCpd) {
        this.appExtCpd = appExtCpd;
        return this;
    }
    
    /**
     * Describes features a MEC application may use if available.
     */
    
    public FeatureDependency[] appFeatureOptional;

    public AppD withAppFeatureOptional(FeatureDependency[] appFeatureOptional) {
        this.appFeatureOptional = appFeatureOptional;
        return this;
    }
    
    /**
     * Describes features a MEC application requires to run.
     */
    
    public FeatureDependency[] appFeatureRequired;

    public AppD withAppFeatureRequired(FeatureDependency[] appFeatureRequired) {
        this.appFeatureRequired = appFeatureRequired;
        return this;
    }
    
    /**
     * Human readable name for the MEC application.
     */
    
    public String appInfoName;

    public AppD withAppInfoName(String appInfoName) {
        this.appInfoName = appInfoName;
        return this;
    }
    
    
    public LatencyDescriptor appLatency;

    public AppD withAppLatency(LatencyDescriptor appLatency) {
        this.appLatency = appLatency;
        return this;
    }
    
    /**
     * Name to identify the MEC application.
     */
    
    public String appName;

    public AppD withAppName(String appName) {
        this.appName = appName;
        return this;
    }
    
    /**
     * Provider of the application and of the AppD.
     */
    
    public String appProvider;

    public AppD withAppProvider(String appProvider) {
        this.appProvider = appProvider;
        return this;
    }
    
    /**
     * Describes services a MEC application may use if available.
     */
    
    public ServiceDependency[] appServiceOptional;

    public AppD withAppServiceOptional(ServiceDependency[] appServiceOptional) {
        this.appServiceOptional = appServiceOptional;
        return this;
    }
    
    /**
     * Describes services a MEC application is able to produce to the platform or other MEC applications. Only relevant for service-producing apps.
     */
    
    public ServiceDescriptor[] appServiceProduced;

    public AppD withAppServiceProduced(ServiceDescriptor[] appServiceProduced) {
        this.appServiceProduced = appServiceProduced;
        return this;
    }
    
    /**
     * Describes services a MEC application requires to run.
     */
    
    public ServiceDependency[] appServiceRequired;

    public AppD withAppServiceRequired(ServiceDependency[] appServiceRequired) {
        this.appServiceRequired = appServiceRequired;
        return this;
    }
    
    /**
     * Identifies the version of software of the MEC application.
     */
    
    public String appSoftVersion;

    public AppD withAppSoftVersion(String appSoftVersion) {
        this.appSoftVersion = appSoftVersion;
        return this;
    }
    
    /**
     * Describes traffic rules the MEC application requires.
     */
    
    public TrafficRuleDescriptor[] appTrafficRule;

    public AppD withAppTrafficRule(TrafficRuleDescriptor[] appTrafficRule) {
        this.appTrafficRule = appTrafficRule;
        return this;
    }
    
    /**
     * NFV
     */
    
    public String changeAppInstanceStateOpConfig;

    public AppD withChangeAppInstanceStateOpConfig(String changeAppInstanceStateOpConfig) {
        this.changeAppInstanceStateOpConfig = changeAppInstanceStateOpConfig;
        return this;
    }
    
    /**
     * Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.
     */
    
    public String[] mecVersion;

    public AppD withMecVersion(String[] mecVersion) {
        this.mecVersion = mecVersion;
        return this;
    }
    
    /**
     * Ref NFV
     */
    
    public String swImageDescriptor;

    public AppD withSwImageDescriptor(String swImageDescriptor) {
        this.swImageDescriptor = swImageDescriptor;
        return this;
    }
    
    /**
     * NFV
     */
    
    public String terminateAppInstanceOpConfig;

    public AppD withTerminateAppInstanceOpConfig(String terminateAppInstanceOpConfig) {
        this.terminateAppInstanceOpConfig = terminateAppInstanceOpConfig;
        return this;
    }
    
    /**
     * Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps. See note 2.
     */
    
    public TransportDependency[] transportDependencies;

    public AppD withTransportDependencies(TransportDependency[] transportDependencies) {
        this.transportDependencies = transportDependencies;
        return this;
    }
    
    /**
     * Ref NFV
     */
    
    public String virtualComputeDescriptor;

    public AppD withVirtualComputeDescriptor(String virtualComputeDescriptor) {
        this.virtualComputeDescriptor = virtualComputeDescriptor;
        return this;
    }
    
    /**
     * Defines descriptors of virtual storage resources to be used by the MEC application.
     */
    
    public String[] virtualStorageDescriptor;

    public AppD withVirtualStorageDescriptor(String[] virtualStorageDescriptor) {
        this.virtualStorageDescriptor = virtualStorageDescriptor;
        return this;
    }
    
    public AppD(@JsonProperty("appDId") String appDId, @JsonProperty("appDVersion") String appDVersion, @JsonProperty("appDescription") String appDescription, @JsonProperty("appName") String appName, @JsonProperty("appProvider") String appProvider, @JsonProperty("appSoftVersion") String appSoftVersion, @JsonProperty("mecVersion") String[] mecVersion, @JsonProperty("swImageDescriptor") String swImageDescriptor, @JsonProperty("virtualComputeDescriptor") String virtualComputeDescriptor) {
        this.appDId = appDId;
        this.appDVersion = appDVersion;
        this.appDescription = appDescription;
        this.appName = appName;
        this.appProvider = appProvider;
        this.appSoftVersion = appSoftVersion;
        this.mecVersion = mecVersion;
        this.swImageDescriptor = swImageDescriptor;
        this.virtualComputeDescriptor = virtualComputeDescriptor;
  }
}
