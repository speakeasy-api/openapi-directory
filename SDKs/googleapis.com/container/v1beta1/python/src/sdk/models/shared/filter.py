"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FilterEventTypeEnum(str, Enum):
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    UPGRADE_AVAILABLE_EVENT = 'UPGRADE_AVAILABLE_EVENT'
    UPGRADE_EVENT = 'UPGRADE_EVENT'
    SECURITY_BULLETIN_EVENT = 'SECURITY_BULLETIN_EVENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filter:
    r"""Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent"""
    
    event_type: Optional[list[FilterEventTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType'), 'exclude': lambda f: f is None }})
    r"""Event types to allowlist."""  
    