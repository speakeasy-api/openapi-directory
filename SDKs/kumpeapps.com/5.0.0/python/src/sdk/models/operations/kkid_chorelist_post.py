"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import four_hundred_and_five as shared_four_hundred_and_five
from ..shared import four_hundred_and_twelve as shared_four_hundred_and_twelve
from ..shared import nodata as shared_nodata
from ..shared import success as shared_success
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class KkidChorelistPostSecurity:
    
    auth_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Auth' }})  
    
class KkidChorelistPostDayEnum(str, Enum):
    r"""day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank"""
    SUNDAY = 'Sunday'
    MONDAY = 'Monday'
    TUESDAY = 'Tuesday'
    WEDNESDAY = 'Wednesday'
    THURSDAY = 'Thursday'
    FRIDAY = 'Friday'
    SATURDAY = 'Saturday'
    WEEKLY = 'Weekly'
    TODAY = 'Today'


@dataclasses.dataclass
class KkidChorelistPostRequest:
    
    chore_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'choreName', 'style': 'form', 'explode': True }})
    r"""name of chore"""  
    kid_username: str = dataclasses.field(metadata={'query_param': { 'field_name': 'kidUsername', 'style': 'form', 'explode': True }})
    r"""username of kid to assign the chore to."""  
    ai_icon: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'aiIcon', 'style': 'form', 'explode': True }})
    r"""Notes if AI Icons should be used (n for no, y for yes, e for yes- error)"""  
    block_dash: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'blockDash', 'style': 'form', 'explode': True }})
    r"""block dash option on this chore"""  
    can_steal: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'canSteal', 'style': 'form', 'explode': True }})
    r"""mark as sibling can steal chore"""  
    chore_description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'choreDescription', 'style': 'form', 'explode': True }})
    r"""optional chore description"""  
    chore_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'choreNumber', 'style': 'form', 'explode': True }})
    r"""number priority of chore (default is 5)"""  
    day: Optional[KkidChorelistPostDayEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'day', 'style': 'form', 'explode': True }})
    r"""day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank"""  
    extra_allowance: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'extraAllowance', 'style': 'form', 'explode': True }})
    r"""ammount of allowance added at end of week for completing this chore"""  
    is_calendar: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isCalendar', 'style': 'form', 'explode': True }})
    r"""True if this is a calendar note instead of a chore."""  
    nfc_tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nfcTag', 'style': 'form', 'explode': True }})
    r"""text field of nfc tag required to check off chore"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'notes', 'style': 'form', 'explode': True }})
    r"""notes added to chore (visable only on reports, kids do not see this note, this is mostly just for the developer)"""  
    object_detection_tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'objectDetectionTag', 'style': 'form', 'explode': True }})
    r"""tag for object detection to search for (required if requireObjectDetection is true)"""  
    one_time: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oneTime', 'style': 'form', 'explode': True }})
    r"""mark as one time chore (does not repeat each week)"""  
    optional: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'optional', 'style': 'form', 'explode': True }})
    r"""mark as optional chore"""  
    reassignable: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reassignable', 'style': 'form', 'explode': True }})
    r"""mark as reassignable (default is true)"""  
    require_object_detection: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'requireObjectDetection', 'style': 'form', 'explode': True }})
    r"""require use of camera to detect object detection tag order to check off chore"""  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""date (yyyy-mm-dd) that you wish the chore to start showing up. (default is today)"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""status of chore (default is todo)"""  
    updated_by_automation: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedByAutomation', 'style': 'form', 'explode': True }})
    r"""true if chore updated via API from an Automation System"""  
    

@dataclasses.dataclass
class KkidChorelistPostResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_and_five: Optional[shared_four_hundred_and_five.FourHundredAndFive] = dataclasses.field(default=None)
    r"""Method Not Allowed- API user does not have access to use this method"""  
    four_hundred_and_twelve: Optional[shared_four_hundred_and_twelve.FourHundredAndTwelve] = dataclasses.field(default=None)
    r"""API Access Denied! Your API key is invalid, expired, or not supplied!"""  
    nodata: Optional[shared_nodata.Nodata] = dataclasses.field(default=None)
    r"""No Data Found."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    success: Optional[shared_success.Success] = dataclasses.field(default=None)
    r"""search results matching criteria"""  
    