// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum - Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.
type GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum string

const (
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnumAnnotationUnspecified GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum = "ANNOTATION_UNSPECIFIED"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnumLegitimate            GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum = "LEGITIMATE"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnumFraudulent            GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum = "FRAUDULENT"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnumPasswordCorrect       GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum = "PASSWORD_CORRECT"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnumPasswordIncorrect     GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum = "PASSWORD_INCORRECT"
)

func (e GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum) ToPointer() *GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum {
	return &e
}

func (e *GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANNOTATION_UNSPECIFIED":
		fallthrough
	case "LEGITIMATE":
		fallthrough
	case "FRAUDULENT":
		fallthrough
	case "PASSWORD_CORRECT":
		fallthrough
	case "PASSWORD_INCORRECT":
		*e = GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum: %v", v)
	}
}

type GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum string

const (
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumReasonUnspecified   GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "REASON_UNSPECIFIED"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumChargeback          GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "CHARGEBACK"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumChargebackFraud     GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "CHARGEBACK_FRAUD"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumChargebackDispute   GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "CHARGEBACK_DISPUTE"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumRefund              GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "REFUND"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumRefundFraud         GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "REFUND_FRAUD"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumTransactionAccepted GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "TRANSACTION_ACCEPTED"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumTransactionDeclined GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "TRANSACTION_DECLINED"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumPaymentHeuristics   GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "PAYMENT_HEURISTICS"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumInitiatedTwoFactor  GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "INITIATED_TWO_FACTOR"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumPassedTwoFactor     GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "PASSED_TWO_FACTOR"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumFailedTwoFactor     GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "FAILED_TWO_FACTOR"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumCorrectPassword     GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "CORRECT_PASSWORD"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumIncorrectPassword   GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "INCORRECT_PASSWORD"
	GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnumSocialSpam          GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum = "SOCIAL_SPAM"
)

func (e GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum) ToPointer() *GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum {
	return &e
}

func (e *GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REASON_UNSPECIFIED":
		fallthrough
	case "CHARGEBACK":
		fallthrough
	case "CHARGEBACK_FRAUD":
		fallthrough
	case "CHARGEBACK_DISPUTE":
		fallthrough
	case "REFUND":
		fallthrough
	case "REFUND_FRAUD":
		fallthrough
	case "TRANSACTION_ACCEPTED":
		fallthrough
	case "TRANSACTION_DECLINED":
		fallthrough
	case "PAYMENT_HEURISTICS":
		fallthrough
	case "INITIATED_TWO_FACTOR":
		fallthrough
	case "PASSED_TWO_FACTOR":
		fallthrough
	case "FAILED_TWO_FACTOR":
		fallthrough
	case "CORRECT_PASSWORD":
		fallthrough
	case "INCORRECT_PASSWORD":
		fallthrough
	case "SOCIAL_SPAM":
		*e = GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum: %v", v)
	}
}

// GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest - The request message to annotate an Assessment.
type GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest struct {
	// Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.
	Annotation *GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotationEnum `json:"annotation,omitempty"`
	// Optional. Unique stable hashed user identifier to apply to the assessment. This is an alternative to setting the hashed_account_id in CreateAssessment, for example when the account identifier is not yet known in the initial request. It is recommended that the identifier is hashed using hmac-sha256 with stable secret.
	HashedAccountID *string `json:"hashedAccountId,omitempty"`
	// Optional. Optional reasons for the annotation that will be assigned to the Event.
	Reasons []GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestReasonsEnum `json:"reasons,omitempty"`
	// Describes an event in the lifecycle of a payment transaction.
	TransactionEvent *GoogleCloudRecaptchaenterpriseV1TransactionEvent `json:"transactionEvent,omitempty"`
}
