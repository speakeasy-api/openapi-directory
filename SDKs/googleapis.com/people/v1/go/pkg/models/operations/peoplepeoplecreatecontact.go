// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PeoplePeopleCreateContactSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type PeoplePeopleCreateContactSourcesEnum string

const (
	PeoplePeopleCreateContactSourcesEnumReadSourceTypeUnspecified   PeoplePeopleCreateContactSourcesEnum = "READ_SOURCE_TYPE_UNSPECIFIED"
	PeoplePeopleCreateContactSourcesEnumReadSourceTypeProfile       PeoplePeopleCreateContactSourcesEnum = "READ_SOURCE_TYPE_PROFILE"
	PeoplePeopleCreateContactSourcesEnumReadSourceTypeContact       PeoplePeopleCreateContactSourcesEnum = "READ_SOURCE_TYPE_CONTACT"
	PeoplePeopleCreateContactSourcesEnumReadSourceTypeDomainContact PeoplePeopleCreateContactSourcesEnum = "READ_SOURCE_TYPE_DOMAIN_CONTACT"
)

func (e *PeoplePeopleCreateContactSourcesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "READ_SOURCE_TYPE_UNSPECIFIED":
		fallthrough
	case "READ_SOURCE_TYPE_PROFILE":
		fallthrough
	case "READ_SOURCE_TYPE_CONTACT":
		fallthrough
	case "READ_SOURCE_TYPE_DOMAIN_CONTACT":
		*e = PeoplePeopleCreateContactSourcesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PeoplePeopleCreateContactSourcesEnum: %s", s)
	}
}

type PeoplePeopleCreateContactRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum   `queryParam:"style=form,explode=true,name=$.xgafv"`
	PersonInput *shared.PersonInput `request:"mediaType=application/json"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
	PersonFields *string `queryParam:"style=form,explode=true,name=personFields"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
	Sources []PeoplePeopleCreateContactSourcesEnum `queryParam:"style=form,explode=true,name=sources"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type PeoplePeopleCreateContactResponse struct {
	ContentType string
	// Successful response
	Person      *shared.Person
	StatusCode  int
	RawResponse *http.Response
}
