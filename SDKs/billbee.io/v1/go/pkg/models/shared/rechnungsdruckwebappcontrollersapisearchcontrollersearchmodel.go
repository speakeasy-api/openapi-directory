// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum int

const (
	RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnumZero  RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum = 0
	RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnumOne   RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum = 1
	RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnumTwo   RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum = 2
	RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnumThree RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum = 3
	RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnumFour  RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum = 4
)

func (e RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum) ToPointer() *RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum {
	return &e
}

func (e *RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum: %v", v)
	}
}

type RechnungsdruckWebAppControllersAPISearchControllerSearchModel struct {
	SearchMode *RechnungsdruckWebAppControllersAPISearchControllerSearchModelSearchModeEnum `json:"SearchMode,omitempty" form:"name=SearchMode"`
	Term       *string                                                                      `json:"Term,omitempty" form:"name=Term"`
	Type       []string                                                                     `json:"Type,omitempty" form:"name=Type"`
}
