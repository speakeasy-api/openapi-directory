"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetItemsBatchInternalTrasnferRequest:
    
    batch_uuid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'batchUuid', 'style': 'simple', 'explode': False }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetItemsBatchInternalTrasnferBatchItemsBatchItemResult:
    r"""The outcome of the attempted transaction."""
    
    code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    
class GetItemsBatchInternalTrasnferBatchItemsBatchItemStatusEnum(str, Enum):
    r"""status of the batch if internal trasnfer"""
    SUBMITTED = 'SUBMITTED'
    REMOVED = 'REMOVED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetItemsBatchInternalTrasnferBatchItemsBatchItem:
    
    amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of funds to send. In cent or pence"""  
    amount_after_charges: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountAfterCharges'), 'exclude': lambda f: f is None }})
    r"""The amount of the transfer after fees and taxes. in pence or cent."""  
    batch_item_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchItemUuid'), 'exclude': lambda f: f is None }})
    r"""A UUID for this item."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z"""  
    fee_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feeAmount'), 'exclude': lambda f: f is None }})
    r"""The fee charged by fire.com for the payment. In pence or cent."""  
    ican_from: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icanFrom'), 'exclude': lambda f: f is None }})
    r"""The Fire account ID of the source account."""  
    ican_to: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icanTo'), 'exclude': lambda f: f is None }})
    r"""The Fire account ID for the fire.com account the funds are sent to."""  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z"""  
    ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref'), 'exclude': lambda f: f is None }})
    r"""The reference on the transaction."""  
    ref_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refId'), 'exclude': lambda f: f is None }})
    r"""The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint."""  
    result: Optional[GetItemsBatchInternalTrasnferBatchItemsBatchItemResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""The outcome of the attempted transaction."""  
    status: Optional[GetItemsBatchInternalTrasnferBatchItemsBatchItemStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""status of the batch if internal trasnfer"""  
    tax_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxAmount'), 'exclude': lambda f: f is None }})
    r"""Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetItemsBatchInternalTrasnferBatchItems:
    r"""A fire.com list object of Batch Items (Internal transfers or Bank transfers)."""
    
    items: Optional[list[GetItemsBatchInternalTrasnferBatchItemsBatchItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""total number of batches returned"""  
    

@dataclasses.dataclass
class GetItemsBatchInternalTrasnferResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch_items: Optional[GetItemsBatchInternalTrasnferBatchItems] = dataclasses.field(default=None)
    r"""A fire.com list object of Batch Items (Internal transfers or Bank transfers)."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    