/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * <p>Contains code coverage report information.</p> <p>Line coverage measures how many statements your tests cover. A statement is a single instruction, not including comments, conditionals, etc.</p> <p>Branch coverage determines if your tests cover every possible branch of a control structure, such as an <code>if</code> or <code>case</code> statement.</p>
 */
export class CodeCoverage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "branchCoveragePercentage" })
  branchCoveragePercentage?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "branchesCovered" })
  branchesCovered?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "branchesMissed" })
  branchesMissed?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "expired" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expired?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "filePath" })
  filePath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lineCoveragePercentage" })
  lineCoveragePercentage?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "linesCovered" })
  linesCovered?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "linesMissed" })
  linesMissed?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "reportARN" })
  reportARN?: string;
}
