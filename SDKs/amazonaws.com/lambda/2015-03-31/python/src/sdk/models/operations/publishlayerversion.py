"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import architecture_enum as shared_architecture_enum
from ..shared import publishlayerversionresponse as shared_publishlayerversionresponse
from ..shared import runtime_enum as shared_runtime_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublishLayerVersionRequestBodyContent:
    r"""A ZIP archive that contains the contents of an <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\\">Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly."""
    
    s3_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Bucket'), 'exclude': lambda f: f is None }})  
    s3_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Key'), 'exclude': lambda f: f is None }})  
    s3_object_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3ObjectVersion'), 'exclude': lambda f: f is None }})  
    zip_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZipFile'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublishLayerVersionRequestBody:
    
    content: PublishLayerVersionRequestBodyContent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content') }})
    r"""A ZIP archive that contains the contents of an <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\\">Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly."""  
    compatible_architectures: Optional[list[shared_architecture_enum.ArchitectureEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompatibleArchitectures'), 'exclude': lambda f: f is None }})
    r"""A list of compatible <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html\\">instruction set architectures</a>."""  
    compatible_runtimes: Optional[list[shared_runtime_enum.RuntimeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompatibleRuntimes'), 'exclude': lambda f: f is None }})
    r"""A list of compatible <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\\">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The description of the version."""  
    license_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseInfo'), 'exclude': lambda f: f is None }})
    r"""<p>The layer's software license. It can be any of the following:</p> <ul> <li> <p>An <a href=\\"https://spdx.org/licenses/\\">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>"""  
    

@dataclasses.dataclass
class PublishLayerVersionRequest:
    
    layer_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'LayerName', 'style': 'simple', 'explode': False }})
    r"""The name or Amazon Resource Name (ARN) of the layer."""  
    request_body: PublishLayerVersionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PublishLayerVersionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    code_storage_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CodeStorageExceededException"""  
    invalid_parameter_value_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    publish_layer_version_response: Optional[shared_publishlayerversionresponse.PublishLayerVersionResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    