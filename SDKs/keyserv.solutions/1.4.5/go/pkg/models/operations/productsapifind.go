// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ProductsAPIFindQueryParams struct {
	Page *int `queryParam:"style=form,explode=true,name=page"`
}

type ProductsAPIFindRequestBodyType string

const (
	ProductsAPIFindRequestBodyTypeFindCredentials ProductsAPIFindRequestBodyType = "FindCredentials"
)

type ProductsAPIFindRequestBody struct {
	FindCredentials *shared.FindCredentials

	Type ProductsAPIFindRequestBodyType
}

func CreateProductsAPIFindRequestBodyFindCredentials(findCredentials shared.FindCredentials) ProductsAPIFindRequestBody {
	typ := ProductsAPIFindRequestBodyTypeFindCredentials

	return ProductsAPIFindRequestBody{
		FindCredentials: &findCredentials,
		Type:            typ,
	}
}

func (u *ProductsAPIFindRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	findCredentials := new(shared.FindCredentials)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&findCredentials); err == nil {
		u.FindCredentials = findCredentials
		u.Type = ProductsAPIFindRequestBodyTypeFindCredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductsAPIFindRequestBody) MarshalJSON() ([]byte, error) {
	if u.FindCredentials != nil {
		return json.Marshal(u.FindCredentials)
	}

	return nil, nil
}

type ProductsAPIFindRequest struct {
	QueryParams ProductsAPIFindQueryParams
	Request     ProductsAPIFindRequestBody `request:"mediaType=application/json"`
}

type ProductsAPIFind200ApplicationJSONType string

const (
	ProductsAPIFind200ApplicationJSONTypeProductView ProductsAPIFind200ApplicationJSONType = "ProductView"
)

type ProductsAPIFind200ApplicationJSON struct {
	ProductView *shared.ProductView

	Type ProductsAPIFind200ApplicationJSONType
}

func CreateProductsAPIFind200ApplicationJSONProductView(productView shared.ProductView) ProductsAPIFind200ApplicationJSON {
	typ := ProductsAPIFind200ApplicationJSONTypeProductView

	return ProductsAPIFind200ApplicationJSON{
		ProductView: &productView,
		Type:        typ,
	}
}

func (u *ProductsAPIFind200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	productView := new(shared.ProductView)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&productView); err == nil {
		u.ProductView = productView
		u.Type = ProductsAPIFind200ApplicationJSONTypeProductView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProductsAPIFind200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ProductView != nil {
		return json.Marshal(u.ProductView)
	}

	return nil, nil
}

type ProductsAPIFindResponse struct {
	ContentType                            string
	ProductsAPIFind200ApplicationJSONOneOf *ProductsAPIFind200ApplicationJSON
	StatusCode                             int
	RawResponse                            *http.Response
}
