<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Subscriptions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveResponse
     */
	public function deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/v3/{appId}/subscriptions/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdResponse
     */
	public function getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/v3/{appId}/subscriptions/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getWebhooksV3AppIdSubscriptionsGetAll
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllResponse
     */
	public function getWebhooksV3AppIdSubscriptionsGetAll(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/v3/{appId}/subscriptions', \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhooksV3AppIdSubscriptionsGetAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionListResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateResponse
     */
	public function patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/v3/{appId}/subscriptions/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionPatchRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchResponse
     */
	public function postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(
        \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/v3/{appId}/subscriptions/batch/update', \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchInputSubscriptionBatchUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchResponseSubscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchResponseSubscriptionResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 207) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchResponseSubscriptionResponseWithErrors = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchResponseSubscriptionResponseWithErrors', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postWebhooksV3AppIdSubscriptionsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateResponse
     */
	public function postWebhooksV3AppIdSubscriptionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/v3/{appId}/subscriptions', \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWebhooksV3AppIdSubscriptionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}