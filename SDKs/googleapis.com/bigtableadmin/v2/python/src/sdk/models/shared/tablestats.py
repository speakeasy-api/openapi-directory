"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TableStats:
    r"""Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified."""
    
    average_cells_per_column: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageCellsPerColumn'), 'exclude': lambda f: f is None }})
    r"""How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in \\"family:col\\" and 1 cell in \\"other:col\\" (4 cells / 2 columns) * A row with 1 cell in \\"family:col\\", 7 cells in \\"family:other_col\\", and 7 cells in \\"other:data\\" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field."""  
    average_columns_per_row: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageColumnsPerRow'), 'exclude': lambda f: f is None }})
    r"""How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in \\"family:col\\" and \\"other:col\\" (2 distinct columns) * A row with cells in \\"family:col\\", \\"family:other_col\\", and \\"other:data\\" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field."""  
    logical_data_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logicalDataBytes'), 'exclude': lambda f: f is None }})
    r"""This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out)."""  
    row_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowCount'), 'exclude': lambda f: f is None }})
    r"""How many rows are in the table."""  
    