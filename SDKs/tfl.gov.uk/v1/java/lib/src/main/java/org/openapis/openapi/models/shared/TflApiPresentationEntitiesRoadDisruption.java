/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TflApiPresentationEntitiesRoadDisruption - OK
 */
public class TflApiPresentationEntitiesRoadDisruption {
    /**
     * Describes the nature of disruption e.g. Traffic Incidents, Works
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public String category;
    public TflApiPresentationEntitiesRoadDisruption withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    public String comments;
    public TflApiPresentationEntitiesRoadDisruption withComments(String comments) {
        this.comments = comments;
        return this;
    }
    
    /**
     * The Ids of affected corridors, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corridorIds")
    public String[] corridorIds;
    public TflApiPresentationEntitiesRoadDisruption withCorridorIds(String[] corridorIds) {
        this.corridorIds = corridorIds;
        return this;
    }
    
    /**
     * Text of the most recent update from the LSTCC on the state of the
     *              disruption, including the current traffic impact and any advice to
     *              road users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentUpdate")
    public String currentUpdate;
    public TflApiPresentationEntitiesRoadDisruption withCurrentUpdate(String currentUpdate) {
        this.currentUpdate = currentUpdate;
        return this;
    }
    
    /**
     * The time when the last CurrentUpdate description was recorded, 
     *             or null if no CurrentUpdate has been applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("currentUpdateDateTime")
    public OffsetDateTime currentUpdateDateTime;
    public TflApiPresentationEntitiesRoadDisruption withCurrentUpdateDateTime(OffsetDateTime currentUpdateDateTime) {
        this.currentUpdateDateTime = currentUpdateDateTime;
        return this;
    }
    
    /**
     * The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned 
     *             disruptions in progress, this field will be omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endDateTime")
    public OffsetDateTime endDateTime;
    public TflApiPresentationEntitiesRoadDisruption withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geography")
    public SystemDataSpatialDbGeography geography;
    public TflApiPresentationEntitiesRoadDisruption withGeography(SystemDataSpatialDbGeography geography) {
        this.geography = geography;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geometry")
    public SystemDataSpatialDbGeography geometry;
    public TflApiPresentationEntitiesRoadDisruption withGeometry(SystemDataSpatialDbGeography geometry) {
        this.geometry = geometry;
        return this;
    }
    
    /**
     * True if any of the affected Streets have a "Full Closure" status, false otherwise. A RoadDisruption that has HasClosures is considered a 
     *             Severe or Serious disruption for severity filtering purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasClosures")
    public Boolean hasClosures;
    public TflApiPresentationEntitiesRoadDisruption withHasClosures(Boolean hasClosures) {
        this.hasClosures = hasClosures;
        return this;
    }
    
    /**
     * Unique identifier for the road disruption
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public TflApiPresentationEntitiesRoadDisruption withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * True if the disruption is planned on a future date that is open to change
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isProvisional")
    public Boolean isProvisional;
    public TflApiPresentationEntitiesRoadDisruption withIsProvisional(Boolean isProvisional) {
        this.isProvisional = isProvisional;
        return this;
    }
    
    /**
     * The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly
     *             compare two instances of the same disruption to determine if it has been changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastModifiedTime")
    public OffsetDateTime lastModifiedTime;
    public TflApiPresentationEntitiesRoadDisruption withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }
    
    /**
     * This describes the level of potential impact on traffic operations of the disruption. 
     *             High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention 
     *             Medium = This is the default value 
     *             Low = e.g. a frequently occurring disruption which is well known
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("levelOfInterest")
    public String levelOfInterest;
    public TflApiPresentationEntitiesRoadDisruption withLevelOfInterest(String levelOfInterest) {
        this.levelOfInterest = levelOfInterest;
        return this;
    }
    
    /**
     * The text of any associated link
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkText")
    public String linkText;
    public TflApiPresentationEntitiesRoadDisruption withLinkText(String linkText) {
        this.linkText = linkText;
        return this;
    }
    
    /**
     * The url of any associated link
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkUrl")
    public String linkUrl;
    public TflApiPresentationEntitiesRoadDisruption withLinkUrl(String linkUrl) {
        this.linkUrl = linkUrl;
        return this;
    }
    
    /**
     * Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public TflApiPresentationEntitiesRoadDisruption withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * An ordinal of the disruption based on severity, level of interest and corridor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ordinal")
    public Integer ordinal;
    public TflApiPresentationEntitiesRoadDisruption withOrdinal(Integer ordinal) {
        this.ordinal = ordinal;
        return this;
    }
    
    /**
     * Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("point")
    public String point;
    public TflApiPresentationEntitiesRoadDisruption withPoint(String point) {
        this.point = point;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("publishEndDate")
    public OffsetDateTime publishEndDate;
    public TflApiPresentationEntitiesRoadDisruption withPublishEndDate(OffsetDateTime publishEndDate) {
        this.publishEndDate = publishEndDate;
        return this;
    }
    
    /**
     * TDM Additional properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("publishStartDate")
    public OffsetDateTime publishStartDate;
    public TflApiPresentationEntitiesRoadDisruption withPublishStartDate(OffsetDateTime publishStartDate) {
        this.publishStartDate = publishStartDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringSchedules")
    public TflApiPresentationEntitiesRoadDisruptionSchedule[] recurringSchedules;
    public TflApiPresentationEntitiesRoadDisruption withRecurringSchedules(TflApiPresentationEntitiesRoadDisruptionSchedule[] recurringSchedules) {
        this.recurringSchedules = recurringSchedules;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roadDisruptionImpactAreas")
    public TflApiPresentationEntitiesRoadDisruptionImpactArea[] roadDisruptionImpactAreas;
    public TflApiPresentationEntitiesRoadDisruption withRoadDisruptionImpactAreas(TflApiPresentationEntitiesRoadDisruptionImpactArea[] roadDisruptionImpactAreas) {
        this.roadDisruptionImpactAreas = roadDisruptionImpactAreas;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roadDisruptionLines")
    public TflApiPresentationEntitiesRoadDisruptionLine[] roadDisruptionLines;
    public TflApiPresentationEntitiesRoadDisruption withRoadDisruptionLines(TflApiPresentationEntitiesRoadDisruptionLine[] roadDisruptionLines) {
        this.roadDisruptionLines = roadDisruptionLines;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roadProject")
    public TflApiPresentationEntitiesRoadProject roadProject;
    public TflApiPresentationEntitiesRoadDisruption withRoadProject(TflApiPresentationEntitiesRoadProject roadProject) {
        this.roadProject = roadProject;
        return this;
    }
    
    /**
     * A description of the severity of the disruption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("severity")
    public String severity;
    public TflApiPresentationEntitiesRoadDisruption withSeverity(String severity) {
        this.severity = severity;
        return this;
    }
    
    /**
     * The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.
     *             For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startDateTime")
    public OffsetDateTime startDateTime;
    public TflApiPresentationEntitiesRoadDisruption withStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }
    
    /**
     * This describes the status of the disruption.  
     *             Active = currently in progress 
     *             Active Long Term = currently in progress and long term
     *             Scheduled = scheduled to start within the next 180 days
     *             Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.
     *             Recently Cleared = recently cleared in the last 24 hours
     *             Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public TflApiPresentationEntitiesRoadDisruption withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * A collection of zero or more streets affected by the disruption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streets")
    public TflApiPresentationEntitiesStreet[] streets;
    public TflApiPresentationEntitiesRoadDisruption withStreets(TflApiPresentationEntitiesStreet[] streets) {
        this.streets = streets;
        return this;
    }
    
    /**
     * Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subCategory")
    public String subCategory;
    public TflApiPresentationEntitiesRoadDisruption withSubCategory(String subCategory) {
        this.subCategory = subCategory;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeFrame")
    public String timeFrame;
    public TflApiPresentationEntitiesRoadDisruption withTimeFrame(String timeFrame) {
        this.timeFrame = timeFrame;
        return this;
    }
    
    /**
     * URL to retrieve this road disruption
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public TflApiPresentationEntitiesRoadDisruption withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
