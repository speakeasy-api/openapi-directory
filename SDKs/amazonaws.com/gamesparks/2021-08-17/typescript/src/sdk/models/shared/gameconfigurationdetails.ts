/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Section } from "./section";
import { Expose, Transform } from "class-transformer";

/**
 * <p>Details about the game configuration.</p> <p> The game configuration is organized into named sections, where the schema of each section is defined by an extension. The schema for these sections can be retrieved using the <code>GetExtensionVersion</code> operation. </p>
 */
export class GameConfigurationDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  @SpeakeasyMetadata({ elemType: Section })
  @Expose({ name: "Sections" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Section> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Section);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  sections?: Record<string, Section>;
}
