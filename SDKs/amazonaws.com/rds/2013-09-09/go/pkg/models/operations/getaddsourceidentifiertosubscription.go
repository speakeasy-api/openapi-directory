// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAddSourceIdentifierToSubscriptionActionEnum
type GETAddSourceIdentifierToSubscriptionActionEnum string

const (
	GETAddSourceIdentifierToSubscriptionActionEnumAddSourceIdentifierToSubscription GETAddSourceIdentifierToSubscriptionActionEnum = "AddSourceIdentifierToSubscription"
)

func (e *GETAddSourceIdentifierToSubscriptionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AddSourceIdentifierToSubscription":
		*e = GETAddSourceIdentifierToSubscriptionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAddSourceIdentifierToSubscriptionActionEnum: %s", s)
	}
}

// GETAddSourceIdentifierToSubscriptionVersionEnum
type GETAddSourceIdentifierToSubscriptionVersionEnum string

const (
	GETAddSourceIdentifierToSubscriptionVersionEnumTwoThousandAndThirteen0909 GETAddSourceIdentifierToSubscriptionVersionEnum = "2013-09-09"
)

func (e *GETAddSourceIdentifierToSubscriptionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-09-09":
		*e = GETAddSourceIdentifierToSubscriptionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAddSourceIdentifierToSubscriptionVersionEnum: %s", s)
	}
}

type GETAddSourceIdentifierToSubscriptionRequest struct {
	Action            GETAddSourceIdentifierToSubscriptionActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	SourceIdentifier  string                                          `queryParam:"style=form,explode=true,name=SourceIdentifier"`
	SubscriptionName  string                                          `queryParam:"style=form,explode=true,name=SubscriptionName"`
	Version           GETAddSourceIdentifierToSubscriptionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAddSourceIdentifierToSubscriptionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
