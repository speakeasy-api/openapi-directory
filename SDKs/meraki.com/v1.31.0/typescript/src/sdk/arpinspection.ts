/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ArpInspection {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a server to be trusted by Dynamic ARP Inspection on this network
   *
   * @remarks
   * Add a server to be trusted by Dynamic ARP Inspection on this network
   */
  createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
    req: operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse =
        new operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a server from being trusted by Dynamic ARP Inspection on this network
   *
   * @remarks
   * Remove a server from being trusted by Dynamic ARP Inspection on this network
   */
  deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
    req: operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse =
        new operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Return the list of servers trusted by Dynamic ARP Inspection on this network
   *
   * @remarks
   * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
   */
  getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(
    req: operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse =
        new operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return the devices that have a Dynamic ARP Inspection warning and their warnings
   *
   * @remarks
   * Return the devices that have a Dynamic ARP Inspection warning and their warnings
   */
  getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(
    req: operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse =
        new operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a server that is trusted by Dynamic ARP Inspection on this network
   *
   * @remarks
   * Update a server that is trusted by Dynamic ARP Inspection on this network
   */
  updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
    req: operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse =
        new operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
