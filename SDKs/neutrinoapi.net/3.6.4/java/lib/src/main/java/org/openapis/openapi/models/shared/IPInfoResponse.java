/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class IPInfoResponse {
    /**
     * Name of the city (if detectable)
     */
    @JsonProperty("city")
    public String city;

    public IPInfoResponse withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * ISO 2-letter continent code
     */
    @JsonProperty("continent-code")
    public String continentCode;

    public IPInfoResponse withContinentCode(String continentCode) {
        this.continentCode = continentCode;
        return this;
    }
    
    /**
     * Full country name
     */
    @JsonProperty("country")
    public String country;

    public IPInfoResponse withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * ISO 2-letter country code
     */
    @JsonProperty("country-code")
    public String countryCode;

    public IPInfoResponse withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * ISO 3-letter country code
     */
    @JsonProperty("country-code3")
    public String countryCode3;

    public IPInfoResponse withCountryCode3(String countryCode3) {
        this.countryCode3 = countryCode3;
        return this;
    }
    
    /**
     * ISO 4217 currency code associated with the country
     */
    @JsonProperty("currency-code")
    public String currencyCode;

    public IPInfoResponse withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The IPs host domain (only set if reverse-lookup has been used)
     */
    @JsonProperty("host-domain")
    public String hostDomain;

    public IPInfoResponse withHostDomain(String hostDomain) {
        this.hostDomain = hostDomain;
        return this;
    }
    
    /**
     * The IPs full hostname (only set if reverse-lookup has been used)
     */
    @JsonProperty("hostname")
    public String hostname;

    public IPInfoResponse withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * The IP address
     */
    @JsonProperty("ip")
    public String ip;

    public IPInfoResponse withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * True if this is a bogon IP address such as a private network, local network or reserved address
     */
    @JsonProperty("is-bogon")
    public Boolean isBogon;

    public IPInfoResponse withIsBogon(Boolean isBogon) {
        this.isBogon = isBogon;
        return this;
    }
    
    /**
     * True if this is a &lt;a href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses"&gt;IPv4 mapped IPv6 address&lt;/a&gt;
     */
    @JsonProperty("is-v4-mapped")
    public Boolean isV4Mapped;

    public IPInfoResponse withIsV4Mapped(Boolean isV4Mapped) {
        this.isV4Mapped = isV4Mapped;
        return this;
    }
    
    /**
     * True if this is a IPv6 address. False if IPv4
     */
    @JsonProperty("is-v6")
    public Boolean isV6;

    public IPInfoResponse withIsV6(Boolean isV6) {
        this.isV6 = isV6;
        return this;
    }
    
    /**
     * Location latitude
     */
    @JsonProperty("latitude")
    public Double latitude;

    public IPInfoResponse withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * Location longitude
     */
    @JsonProperty("longitude")
    public Double longitude;

    public IPInfoResponse withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * Name of the region (if detectable)
     */
    @JsonProperty("region")
    public String region;

    public IPInfoResponse withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * ISO 3166-2 region code (if detectable)
     */
    @JsonProperty("region-code")
    public String regionCode;

    public IPInfoResponse withRegionCode(String regionCode) {
        this.regionCode = regionCode;
        return this;
    }
    
    /**
     * Map containing timezone details
     */
    @JsonProperty("timezone")
    public Timezone timezone;

    public IPInfoResponse withTimezone(Timezone timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * True if this is a valid IPv4 or IPv6 address
     */
    @JsonProperty("valid")
    public Boolean valid;

    public IPInfoResponse withValid(Boolean valid) {
        this.valid = valid;
        return this;
    }
    
    public IPInfoResponse(@JsonProperty("city") String city, @JsonProperty("continent-code") String continentCode, @JsonProperty("country") String country, @JsonProperty("country-code") String countryCode, @JsonProperty("country-code3") String countryCode3, @JsonProperty("currency-code") String currencyCode, @JsonProperty("host-domain") String hostDomain, @JsonProperty("hostname") String hostname, @JsonProperty("ip") String ip, @JsonProperty("is-bogon") Boolean isBogon, @JsonProperty("is-v4-mapped") Boolean isV4Mapped, @JsonProperty("is-v6") Boolean isV6, @JsonProperty("latitude") Double latitude, @JsonProperty("longitude") Double longitude, @JsonProperty("region") String region, @JsonProperty("region-code") String regionCode, @JsonProperty("timezone") Timezone timezone, @JsonProperty("valid") Boolean valid) {
        this.city = city;
        this.continentCode = continentCode;
        this.country = country;
        this.countryCode = countryCode;
        this.countryCode3 = countryCode3;
        this.currencyCode = currencyCode;
        this.hostDomain = hostDomain;
        this.hostname = hostname;
        this.ip = ip;
        this.isBogon = isBogon;
        this.isV4Mapped = isV4Mapped;
        this.isV6 = isV6;
        this.latitude = latitude;
        this.longitude = longitude;
        this.region = region;
        this.regionCode = regionCode;
        this.timezone = timezone;
        this.valid = valid;
  }
}
