/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Check - Represents a background check
 */
public class Check {
    /**
     * Person birth certificate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birth_certificate")
    public String birthCertificate;

    public Check withBirthCertificate(String birthCertificate) {
        this.birthCertificate = birthCertificate;
        return this;
    }
    
    /**
     * Background check ID
     */
    @JsonProperty("check_id")
    public String checkId;

    public Check withCheckId(String checkId) {
        this.checkId = checkId;
        return this;
    }
    
    /**
     * Represents the summary of a company background check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_summary")
    public CompanySummary companySummary;

    public Check withCompanySummary(CompanySummary companySummary) {
        this.companySummary = companySummary;
        return this;
    }
    
    /**
     * ID Document country
     */
    @JsonProperty("country")
    public CheckCountryEnum country;

    public Check withCountry(CheckCountryEnum country) {
        this.country = country;
        return this;
    }
    
    /**
     * Background check creation date
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creation_date")
    public OffsetDateTime creationDate;

    public Check withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * Person birthdate. Shown only if provided during check creation. YYYY-MM-DD format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_of_birth")
    public OffsetDateTime dateOfBirth;

    public Check withDateOfBirth(OffsetDateTime dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
        return this;
    }
    
    /**
     * Person diplomatic id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diplomatic_id")
    public String diplomaticId;

    public Check withDiplomaticId(String diplomaticId) {
        this.diplomaticId = diplomaticId;
        return this;
    }
    
    /**
     * Person driver's license
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("driver_license")
    public String driverLicense;

    public Check withDriverLicense(String driverLicense) {
        this.driverLicense = driverLicense;
        return this;
    }
    
    /**
     * Person or entity first name. Shown only if provided during check creation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;

    public Check withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * Person foreign identification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("foreign_id")
    public String foreignId;

    public Check withForeignId(String foreignId) {
        this.foreignId = foreignId;
        return this;
    }
    
    /**
     * [Experimental] Analyzes the probability that the results by name are attributed to a homonym. Number between 0 and 1 where 1 is the the greatest probability
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homonym_probability")
    public Float homonymProbability;

    public Check withHomonymProbability(Float homonymProbability) {
        this.homonymProbability = homonymProbability;
        return this;
    }
    
    /**
     * Background check score including results by name only. This might contain homonym information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homonym_score")
    public Float homonymScore;

    public Check withHomonymScore(Float homonymScore) {
        this.homonymScore = homonymScore;
        return this;
    }
    
    /**
     * Background check scores by name for each profile group. [Deprecated for API key V1]
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homonym_scores")
    public Score[] homonymScores;

    public Check withHomonymScores(Score[] homonymScores) {
        this.homonymScores = homonymScores;
        return this;
    }
    
    /**
     * Background check score regarding results by ID number only. It is a number between 0 and 1 where 1 is the best score. This result is a weighted average of the id_scores listed under scores.
     */
    @JsonProperty("id_score")
    public Float idScore;

    public Check withIdScore(Float idScore) {
        this.idScore = idScore;
        return this;
    }
    
    /**
     * Issue date of the person ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("issue_date")
    public OffsetDateTime issueDate;

    public Check withIssueDate(OffsetDateTime issueDate) {
        this.issueDate = issueDate;
        return this;
    }
    
    /**
     * Person or entity last name. Shown only if provided during check creation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;

    public Check withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * Vehicle license plate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license_plate")
    public String licensePlate;

    public Check withLicensePlate(String licensePlate) {
        this.licensePlate = licensePlate;
        return this;
    }
    
    /**
     * Person national identification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_id")
    public String nationalId;

    public Check withNationalId(String nationalId) {
        this.nationalId = nationalId;
        return this;
    }
    
    /**
     * Person origin country
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("native_country")
    public CheckNativeCountryEnum nativeCountry;

    public Check withNativeCountry(CheckNativeCountryEnum nativeCountry) {
        this.nativeCountry = nativeCountry;
        return this;
    }
    
    /**
     * Vehicle owner identification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_document_id")
    public String ownerDocumentId;

    public Check withOwnerDocumentId(String ownerDocumentId) {
        this.ownerDocumentId = ownerDocumentId;
        return this;
    }
    
    /**
     * Vehicle owner document type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_document_type")
    public String ownerDocumentType;

    public Check withOwnerDocumentType(String ownerDocumentType) {
        this.ownerDocumentType = ownerDocumentType;
        return this;
    }
    
    /**
     * Person passport
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passport")
    public String passport;

    public Check withPassport(String passport) {
        this.passport = passport;
        return this;
    }
    
    /**
     * Vehicle license payment date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_date")
    public String paymentDate;

    public Check withPaymentDate(String paymentDate) {
        this.paymentDate = paymentDate;
        return this;
    }
    
    /**
     * Colombian PEP idenfitication for Venezuelans
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pep")
    public String pep;

    public Check withPep(String pep) {
        this.pep = pep;
        return this;
    }
    
    /**
     * Person phone number. Required by law in order to notify the person their background is being checked
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;

    public Check withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * Person professional card number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("professional_card")
    public String professionalCard;

    public Check withProfessionalCard(String professionalCard) {
        this.professionalCard = professionalCard;
        return this;
    }
    
    /**
     * Temporary residence permit of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ptp")
    public String ptp;

    public Check withPtp(String ptp) {
        this.ptp = ptp;
        return this;
    }
    
    /**
     * Region where the background is to be checked. By default, background checks in Brazil are performed in region where the person is from. Applies for some Brazil collectors only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amap\u00e1, AM: Amazonas, BA: Bah\u00eda, CE: Cear\u00e1, ES: Esp\u00edrito Santo, GO: Goi\u00e1s, MA: Maranh\u00e3o, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Par\u00e1, PB: Para\u00edba, PR: Paran\u00e1, PE: Pernambuco, PI: Piau\u00ed, RJ: R\u00edo de Janeiro, RN: R\u00edo Grande do Norte, RS: R\u00edo Grande do Sul, RO: Rond\u00f4nia, RR: Roraima, SC: Santa Catarina, SP: S\u00e3o Paulo, SE: Sergipe, TO : Tocantins.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public CheckRegionEnum region;

    public Check withRegion(CheckRegionEnum region) {
        this.region = region;
        return this;
    }
    
    /**
     * Report ID the background check is associated with
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_id")
    public String reportId;

    public Check withReportId(String reportId) {
        this.reportId = reportId;
        return this;
    }
    
    /**
     * Background check score. Number between 0 and 1 where 1 is the best score
     */
    @JsonProperty("score")
    public Float score;

    public Check withScore(Float score) {
        this.score = score;
        return this;
    }
    
    /**
     * Background check score of each profile group and dataset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scores")
    public Score[] scores;

    public Check withScores(Score[] scores) {
        this.scores = scores;
        return this;
    }
    
    /**
     * Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the check finished successfully, **error** means the check failed, **in_progress** means the check is currently being processed, **delayed** means the check is waiting for an additional requirement to be met, this can last up to 3 days. **Completed** and **error** are the two only final statuses
     */
    @JsonProperty("status")
    public CheckStatusEnum status;

    public Check withStatus(CheckStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Database status list
     */
    @JsonProperty("statuses")
    public Status[] statuses;

    public Check withStatuses(Status[] statuses) {
        this.statuses = statuses;
        return this;
    }
    
    /**
     * Represents a background check summary
     */
    @JsonProperty("summary")
    public Summary summary;

    public Check withSummary(Summary summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * Person or company tax id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    public String taxId;

    public Check withTaxId(String taxId) {
        this.taxId = taxId;
        return this;
    }
    
    /**
     * Background check type
     */
    @JsonProperty("type")
    public CheckTypeEnum type;

    public Check withType(CheckTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Background check update date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("update_date")
    public OffsetDateTime updateDate;

    public Check withUpdateDate(OffsetDateTime updateDate) {
        this.updateDate = updateDate;
        return this;
    }
    
    /**
     * Vehicle identification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vehicle_id")
    public String vehicleId;

    public Check withVehicleId(String vehicleId) {
        this.vehicleId = vehicleId;
        return this;
    }
    
    /**
     * Represents the summary of a vehicle background check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vehicle_summary")
    public VehicleSummary vehicleSummary;

    public Check withVehicleSummary(VehicleSummary vehicleSummary) {
        this.vehicleSummary = vehicleSummary;
        return this;
    }
    
    /**
     * List of parameters entered during background check creation that do not match the information obtained
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wrong_inputs")
    public WrongInput[] wrongInputs;

    public Check withWrongInputs(WrongInput[] wrongInputs) {
        this.wrongInputs = wrongInputs;
        return this;
    }
    
    public Check(@JsonProperty("check_id") String checkId, @JsonProperty("country") CheckCountryEnum country, @JsonProperty("creation_date") OffsetDateTime creationDate, @JsonProperty("id_score") Float idScore, @JsonProperty("score") Float score, @JsonProperty("status") CheckStatusEnum status, @JsonProperty("statuses") Status[] statuses, @JsonProperty("summary") Summary summary, @JsonProperty("type") CheckTypeEnum type) {
        this.checkId = checkId;
        this.country = country;
        this.creationDate = creationDate;
        this.idScore = idScore;
        this.score = score;
        this.status = status;
        this.statuses = statuses;
        this.summary = summary;
        this.type = type;
  }
}
