/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CompilationResultInput - Represents the result of compiling a Dataform project.
 */
public class CompilationResultInput {
    /**
     * Configures various aspects of Dataform code compilation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codeCompilationConfig")
    public CodeCompilationConfig codeCompilationConfig;

    public CompilationResultInput withCodeCompilationConfig(CodeCompilationConfig codeCompilationConfig) {
        this.codeCompilationConfig = codeCompilationConfig;
        return this;
    }
    
    /**
     * Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gitCommitish")
    public String gitCommitish;

    public CompilationResultInput withGitCommitish(String gitCommitish) {
        this.gitCommitish = gitCommitish;
        return this;
    }
    
    /**
     * Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/* /locations/* /repositories/* /releaseConfigs/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseConfig")
    public String releaseConfig;

    public CompilationResultInput withReleaseConfig(String releaseConfig) {
        this.releaseConfig = releaseConfig;
        return this;
    }
    
    /**
     * Immutable. The name of the workspace to compile. Must be in the format `projects/* /locations/* /repositories/* /workspaces/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace")
    public String workspace;

    public CompilationResultInput withWorkspace(String workspace) {
        this.workspace = workspace;
        return this;
    }
    
    public CompilationResultInput(){}
}
