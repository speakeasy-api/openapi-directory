// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExecutionStatusEnum string

const (
	ExecutionStatusEnumPending            ExecutionStatusEnum = "PENDING"
	ExecutionStatusEnumPendingConcurrency ExecutionStatusEnum = "PENDING_CONCURRENCY"
	ExecutionStatusEnumPendingDevice      ExecutionStatusEnum = "PENDING_DEVICE"
	ExecutionStatusEnumProcessing         ExecutionStatusEnum = "PROCESSING"
	ExecutionStatusEnumScheduling         ExecutionStatusEnum = "SCHEDULING"
	ExecutionStatusEnumPreparing          ExecutionStatusEnum = "PREPARING"
	ExecutionStatusEnumRunning            ExecutionStatusEnum = "RUNNING"
	ExecutionStatusEnumCompleted          ExecutionStatusEnum = "COMPLETED"
	ExecutionStatusEnumStopping           ExecutionStatusEnum = "STOPPING"
)

func (e ExecutionStatusEnum) ToPointer() *ExecutionStatusEnum {
	return &e
}

func (e *ExecutionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "PENDING_CONCURRENCY":
		fallthrough
	case "PENDING_DEVICE":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "SCHEDULING":
		fallthrough
	case "PREPARING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "STOPPING":
		*e = ExecutionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionStatusEnum: %v", v)
	}
}
