"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Permission:
    r"""This is a permission map that contain two object indexes. It is used to link/unlink objects. Order is important. Example: { deviceId:8, geofenceId: 16 }"""
    
    attribute_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributeId'), 'exclude': lambda f: f is None }})
    r"""Computed Attribute Id, can be second parameter only"""  
    calendar_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendarId'), 'exclude': lambda f: f is None }})
    r"""Calendar Id, can be second parameter only and only in combination with userId"""  
    device_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceId'), 'exclude': lambda f: f is None }})
    r"""Device Id, can be first parameter or second only in combination with userId"""  
    driver_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('driverId'), 'exclude': lambda f: f is None }})
    r"""Driver Id, can be second parameter only"""  
    geofence_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geofenceId'), 'exclude': lambda f: f is None }})
    r"""Geofence Id, can be second parameter only"""  
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupId'), 'exclude': lambda f: f is None }})
    r"""Group Id, can be first parameter or second only in combination with userId"""  
    managed_user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedUserId'), 'exclude': lambda f: f is None }})
    r"""User Id, can be second parameter only and only in combination with userId"""  
    notification_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationId'), 'exclude': lambda f: f is None }})
    r"""Notification Id, can be second parameter only"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""User Id, can be only first parameter"""  
    