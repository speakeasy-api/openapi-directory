"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICoreDtoAggregatedAggregatedResult:
    
    activity_day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activityDay'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    commissions_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commissionsCost'), 'exclude': lambda f: f is None }})  
    conversions_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionsCost'), 'exclude': lambda f: f is None }})  
    conversions_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionsValue'), 'exclude': lambda f: f is None }})  
    converted_clicks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('convertedClicks'), 'exclude': lambda f: f is None }})  
    entity_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityData'), 'exclude': lambda f: f is None }})  
    entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityId'), 'exclude': lambda f: f is None }})  
    from_day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromDay'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    hourly_break_down: Optional[dict[str, APICoreDtoAggregatedAggregatedResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hourlyBreakDown'), 'exclude': lambda f: f is None }})  
    last_hit_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastHitDate'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    spider_hits_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spiderHitsCount'), 'exclude': lambda f: f is None }})  
    to_day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toDay'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    total_clicks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalClicks'), 'exclude': lambda f: f is None }})  
    total_views: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalViews'), 'exclude': lambda f: f is None }})  
    unique_clicks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueClicks'), 'exclude': lambda f: f is None }})  
    unique_conversions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueConversions'), 'exclude': lambda f: f is None }})  
    unique_views: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueViews'), 'exclude': lambda f: f is None }})  
    