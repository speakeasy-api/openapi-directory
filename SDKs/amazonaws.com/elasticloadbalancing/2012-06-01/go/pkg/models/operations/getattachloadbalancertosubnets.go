// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAttachLoadBalancerToSubnetsActionEnum
type GETAttachLoadBalancerToSubnetsActionEnum string

const (
	GETAttachLoadBalancerToSubnetsActionEnumAttachLoadBalancerToSubnets GETAttachLoadBalancerToSubnetsActionEnum = "AttachLoadBalancerToSubnets"
)

func (e *GETAttachLoadBalancerToSubnetsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AttachLoadBalancerToSubnets":
		*e = GETAttachLoadBalancerToSubnetsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAttachLoadBalancerToSubnetsActionEnum: %s", s)
	}
}

// GETAttachLoadBalancerToSubnetsVersionEnum
type GETAttachLoadBalancerToSubnetsVersionEnum string

const (
	GETAttachLoadBalancerToSubnetsVersionEnumTwoThousandAndTwelve0601 GETAttachLoadBalancerToSubnetsVersionEnum = "2012-06-01"
)

func (e *GETAttachLoadBalancerToSubnetsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-06-01":
		*e = GETAttachLoadBalancerToSubnetsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAttachLoadBalancerToSubnetsVersionEnum: %s", s)
	}
}

type GETAttachLoadBalancerToSubnetsQueryParams struct {
	Action GETAttachLoadBalancerToSubnetsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the load balancer.
	LoadBalancerName string `queryParam:"style=form,explode=true,name=LoadBalancerName"`
	// The IDs of the subnets to add. You can add only one subnet per Availability Zone.
	Subnets []string                                  `queryParam:"style=form,explode=true,name=Subnets"`
	Version GETAttachLoadBalancerToSubnetsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETAttachLoadBalancerToSubnetsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAttachLoadBalancerToSubnetsRequest struct {
	QueryParams GETAttachLoadBalancerToSubnetsQueryParams
	Headers     GETAttachLoadBalancerToSubnetsHeaders
}

type GETAttachLoadBalancerToSubnetsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
