// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

// TrackJourneyEventRequestBodyIdentificationAccount - Account identification requires an accountId, domain or both
type TrackJourneyEventRequestBodyIdentificationAccount struct {
	// Unique identifier for the account in your database
	AccountID *string `json:"accountId,omitempty"`
	// The domain associated with the account (e.g. acme-inc.com)
	Domain *string `json:"domain,omitempty"`
}

// TrackJourneyEventRequestBodyIdentificationUser - User identification requires a userId, email or both
type TrackJourneyEventRequestBodyIdentificationUser struct {
	// Email address of the user
	Email *string `json:"email,omitempty"`
	// Unique identifier for the user in your database
	UserID *string `json:"userId,omitempty"`
}

// TrackJourneyEventRequestBodyIdentification - Event identification requires a user, account or both
type TrackJourneyEventRequestBodyIdentification struct {
	// Account identification requires an accountId, domain or both
	Account *TrackJourneyEventRequestBodyIdentificationAccount `json:"account,omitempty"`
	// User identification requires a userId, email or both
	User *TrackJourneyEventRequestBodyIdentificationUser `json:"user,omitempty"`
}

// TrackJourneyEventRequestBody - Event for a user or an account
type TrackJourneyEventRequestBody struct {
	// Event identification requires a user, account or both
	Identification TrackJourneyEventRequestBodyIdentification `json:"identification"`
	// Event metadata, possible values are strings, booleans, numbers and datetimes (ISO 8601)
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Name     string                 `json:"name"`
	// If left blank this defaults to the current datetime
	TriggeredAt *string `json:"triggeredAt,omitempty"`
}

type TrackJourneyEvent500ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackJourneyEvent500ApplicationJSON - The message specifies what is done
type TrackJourneyEvent500ApplicationJSON struct {
	Message string                                  `json:"message"`
	Meta    TrackJourneyEvent500ApplicationJSONMeta `json:"meta"`
}

type TrackJourneyEvent429ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackJourneyEvent429ApplicationJSON - The message specifies what is done
type TrackJourneyEvent429ApplicationJSON struct {
	Message string                                  `json:"message"`
	Meta    TrackJourneyEvent429ApplicationJSONMeta `json:"meta"`
}

type TrackJourneyEvent403ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackJourneyEvent403ApplicationJSON - The message specifies what is done
type TrackJourneyEvent403ApplicationJSON struct {
	Message string                                  `json:"message"`
	Meta    TrackJourneyEvent403ApplicationJSONMeta `json:"meta"`
}

type TrackJourneyEvent401ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackJourneyEvent401ApplicationJSON - The message specifies what is done
type TrackJourneyEvent401ApplicationJSON struct {
	Message string                                  `json:"message"`
	Meta    TrackJourneyEvent401ApplicationJSONMeta `json:"meta"`
}

// TrackJourneyEvent400ApplicationJSONErrorsParameters - All query-, header- and path- parameters that seemed incorrect
type TrackJourneyEvent400ApplicationJSONErrorsParameters struct {
	Header map[string]string `json:"header,omitempty"`
	Path   map[string]string `json:"path,omitempty"`
	Query  map[string]string `json:"query,omitempty"`
}

// TrackJourneyEvent400ApplicationJSONErrors - Map that sums up all received values that seemed incorrect
type TrackJourneyEvent400ApplicationJSONErrors struct {
	// All input fields that seemed incorrect
	Fields map[string]string `json:"fields,omitempty"`
	// All query-, header- and path- parameters that seemed incorrect
	Parameters *TrackJourneyEvent400ApplicationJSONErrorsParameters `json:"parameters,omitempty"`
}

type TrackJourneyEvent400ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackJourneyEvent400ApplicationJSON - The message specifies what is done
type TrackJourneyEvent400ApplicationJSON struct {
	// Map that sums up all received values that seemed incorrect
	Errors  TrackJourneyEvent400ApplicationJSONErrors `json:"errors"`
	Message string                                    `json:"message"`
	Meta    TrackJourneyEvent400ApplicationJSONMeta   `json:"meta"`
}

type TrackJourneyEvent201ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackJourneyEvent201ApplicationJSON - The message specifies what is done
type TrackJourneyEvent201ApplicationJSON struct {
	Message string                                  `json:"message"`
	Meta    TrackJourneyEvent201ApplicationJSONMeta `json:"meta"`
}

type TrackJourneyEventResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Object was created
	TrackJourneyEvent201ApplicationJSONObject *TrackJourneyEvent201ApplicationJSON
	// Bad request, some fields or parameters are incorrect
	TrackJourneyEvent400ApplicationJSONObject *TrackJourneyEvent400ApplicationJSON
	// No API Key was provided or the key is not authorised to perform the action
	TrackJourneyEvent401ApplicationJSONObject *TrackJourneyEvent401ApplicationJSON
	// The API Key provided is currently not enabled
	TrackJourneyEvent403ApplicationJSONObject *TrackJourneyEvent403ApplicationJSON
	// Too many API requests were send
	TrackJourneyEvent429ApplicationJSONObject *TrackJourneyEvent429ApplicationJSON
	// An unexpected error occurred
	TrackJourneyEvent500ApplicationJSONObject *TrackJourneyEvent500ApplicationJSON
}
