"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetIpamDiscoveredAccountsResult = exports.GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts = exports.GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason = exports.GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * <p>The discovery failure code.</p> <ul> <li> <p> <code>assume-role-failure</code> - IPAM could not assume the Amazon Web Services IAM service-linked role. This could be because of any of the following:</p> <ul> <li> <p>SLR has not been created yet and IPAM is still creating it.</p> </li> <li> <p>You have opted-out of the IPAM home Region.</p> </li> <li> <p>Account you are using as your IPAM account has been suspended.</p> </li> </ul> </li> <li> <p> <code>throttling-failure</code> - IPAM account is already using the allotted transactions per second and IPAM is receiving a throttling error when assuming the Amazon Web Services IAM SLR.</p> </li> <li> <p> <code>unauthorized-failure</code> - Amazon Web Services account making the request is not authorized. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">AuthFailure</a> in the <i>Amazon Elastic Compute Cloud API Reference</i>.</p> </li> </ul>
 */
var GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum;
(function (GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum) {
    GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum["AssumeRoleFailure"] = "assume-role-failure";
    GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum["ThrottlingFailure"] = "throttling-failure";
    GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum["UnauthorizedFailure"] = "unauthorized-failure";
})(GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum = exports.GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum || (exports.GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReasonCodeEnum = {}));
/**
 * The resource discovery failure reason.
 */
var GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason = /** @class */ (function (_super) {
    __extends(GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason, _super);
    function GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason.prototype, "message", void 0);
    return GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason;
}(utils_1.SpeakeasyBase));
exports.GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason = GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason;
/**
 * An IPAM discovered account. A discovered account is an Amazon Web Services account that is monitored under a resource discovery. If you have integrated IPAM with Amazon Web Services Organizations, all accounts in the organization are discovered accounts.
 */
var GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts = /** @class */ (function (_super) {
    __extends(GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts, _super);
    function GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts.prototype, "accountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts.prototype, "discoveryRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", GetIpamDiscoveredAccountsResultIpamDiscoveredAccountsFailureReason)
    ], GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts.prototype, "failureReason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts.prototype, "lastAttemptedDiscoveryTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts.prototype, "lastSuccessfulDiscoveryTime", void 0);
    return GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts;
}(utils_1.SpeakeasyBase));
exports.GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts = GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts;
/**
 * Success
 */
var GetIpamDiscoveredAccountsResult = /** @class */ (function (_super) {
    __extends(GetIpamDiscoveredAccountsResult, _super);
    function GetIpamDiscoveredAccountsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetIpamDiscoveredAccountsResultIpamDiscoveredAccounts,
        }),
        __metadata("design:type", Array)
    ], GetIpamDiscoveredAccountsResult.prototype, "ipamDiscoveredAccounts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamDiscoveredAccountsResult.prototype, "nextToken", void 0);
    return GetIpamDiscoveredAccountsResult;
}(utils_1.SpeakeasyBase));
exports.GetIpamDiscoveredAccountsResult = GetIpamDiscoveredAccountsResult;
