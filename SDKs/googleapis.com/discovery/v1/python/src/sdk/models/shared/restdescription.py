"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import jsonschema as shared_jsonschema
from ..shared import restmethod as shared_restmethod
from ..shared import restresource as shared_restresource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestDescriptionAuthOauth2Scopes:
    r"""The scope value."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestDescriptionAuthOauth2:
    r"""OAuth 2.0 authentication information."""
    
    scopes: Optional[dict[str, RestDescriptionAuthOauth2Scopes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""Available OAuth 2.0 scopes."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestDescriptionAuth:
    r"""Authentication information."""
    
    oauth2: Optional[RestDescriptionAuthOauth2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth2'), 'exclude': lambda f: f is None }})
    r"""OAuth 2.0 authentication information."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestDescriptionIcons:
    r"""Links to 16x16 and 32x32 icons representing the API."""
    
    x16: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x16'), 'exclude': lambda f: f is None }})
    r"""The URL of the 16x16 icon."""  
    x32: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x32'), 'exclude': lambda f: f is None }})
    r"""The URL of the 32x32 icon."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestDescription:
    r"""Successful response"""
    
    auth: Optional[RestDescriptionAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth'), 'exclude': lambda f: f is None }})
    r"""Authentication information."""  
    base_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basePath'), 'exclude': lambda f: f is None }})
    r"""[DEPRECATED] The base path for REST requests."""  
    base_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseUrl'), 'exclude': lambda f: f is None }})
    r"""[DEPRECATED] The base URL for REST requests."""  
    batch_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchPath'), 'exclude': lambda f: f is None }})
    r"""The path for REST batch requests."""  
    canonical_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canonicalName'), 'exclude': lambda f: f is None }})
    r"""Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of this API."""  
    discovery_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discoveryVersion'), 'exclude': lambda f: f is None }})
    r"""Indicate the version of the Discovery API used to generate this doc."""  
    documentation_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentationLink'), 'exclude': lambda f: f is None }})
    r"""A link to human readable documentation for the API."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""The ETag for this response."""  
    exponential_backoff_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exponentialBackoffDefault'), 'exclude': lambda f: f is None }})
    r"""Enable exponential backoff for suitable methods in the generated clients."""  
    features: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})
    r"""A list of supported features for this API."""  
    icons: Optional[RestDescriptionIcons] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icons'), 'exclude': lambda f: f is None }})
    r"""Links to 16x16 and 32x32 icons representing the API."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of this API."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kind for this response."""  
    labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels for the status of this API, such as labs or deprecated."""  
    methods: Optional[dict[str, shared_restmethod.RestMethod]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methods'), 'exclude': lambda f: f is None }})
    r"""API-level methods for this API."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of this API."""  
    owner_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerDomain'), 'exclude': lambda f: f is None }})
    r"""The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name."""  
    owner_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerName'), 'exclude': lambda f: f is None }})
    r"""The name of the owner of this API. See ownerDomain."""  
    package_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packagePath'), 'exclude': lambda f: f is None }})
    r"""The package of the owner of this API. See ownerDomain."""  
    parameters: Optional[dict[str, shared_jsonschema.JSONSchema]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Common parameters that apply across all apis."""  
    protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""The protocol described by this document."""  
    resources: Optional[dict[str, shared_restresource.RestResource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})
    r"""The resources in this API."""  
    revision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision'), 'exclude': lambda f: f is None }})
    r"""The version of this API."""  
    root_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rootUrl'), 'exclude': lambda f: f is None }})
    r"""The root URL under which all API services live."""  
    schemas: Optional[dict[str, shared_jsonschema.JSONSchema]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})
    r"""The schemas for this API."""  
    service_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicePath'), 'exclude': lambda f: f is None }})
    r"""The base path for all REST requests."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of this API."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version of this API."""  
    version_module: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version_module'), 'exclude': lambda f: f is None }})  
    