"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var device_1 = require("./device");
var firmware_1 = require("./firmware");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["/api/v1"];
/**
 * IOTVAS API enables you to discover IoT/Connected devices in the network and provides
 *
 * @remarks
 *     detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.
 *     Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.
 *     IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,
 *     we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner
 *     to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other
 *     solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.device = new device_1.Device(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firmware = new firmware_1.Firmware(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
