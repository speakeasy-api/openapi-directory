/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Filter - A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.
 */
public class Filter {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compositeFilter")
    public CompositeFilter compositeFilter;

    public Filter withCompositeFilter(CompositeFilter compositeFilter) {
        this.compositeFilter = compositeFilter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valueFilter")
    public ValueFilter valueFilter;

    public Filter withValueFilter(ValueFilter valueFilter) {
        this.valueFilter = valueFilter;
        return this;
    }
    
    public Filter(){}
}
