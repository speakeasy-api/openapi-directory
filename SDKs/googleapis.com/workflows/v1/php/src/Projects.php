<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListResponse
     */
	public function workflowsProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListResponse
     */
	public function workflowsProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new workflow. If a workflow with the specified name already exists in the specified project and location, the long running operation returns a ALREADY_EXISTS error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateResponse
     */
	public function workflowsProjectsLocationsWorkflowsCreate(
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/workflows', \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a workflow with the specified name. This method also cancels and deletes all running executions of the workflow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteResponse
     */
	public function workflowsProjectsLocationsWorkflowsDelete(
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single workflow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetResponse
     */
	public function workflowsProjectsLocationsWorkflowsGet(
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Workflow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists workflows in a given project and location. The default order is not specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListResponse
     */
	public function workflowsProjectsLocationsWorkflowsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/workflows', \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkflowsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkflowsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing workflow. Running this method has no impact on already running executions of the workflow. A new revision of the workflow might be created as a result of a successful update operation. In that case, the new revision is used in new workflow executions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchResponse
     */
	public function workflowsProjectsLocationsWorkflowsPatch(
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkflowsProjectsLocationsWorkflowsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}