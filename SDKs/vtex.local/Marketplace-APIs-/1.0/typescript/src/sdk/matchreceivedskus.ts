/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Match SKU suggestions received in the marketplace
 */
export class MatchReceivedSKUs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Match Received SKUs individually
   *
   * @remarks
   * All SKUs sent from a seller to a marketplace must be reviewed and matched. Actions in the matching process are added in the request body through the [matchType] object. Match type actions include:
   *
   * 1. `newproduct`: match the SKU as a new product.
   *
   * 2. `itemMatch`: associate the received SKU to an existing SKU.
   *
   * 3. `productMatch`: associate the received SKU to an existing product.
   *
   * 4. `deny`: deny the received SKU.
   *
   * 5. `pending`: the received SKU requires attention.
   *
   * 6. `incomplete`: the received SKU is lacking information to be matched.
   *
   * 7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched.
   *
   * Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
   */
  match(
    req: operations.MatchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/suggestions/{sellerId}/{sellerskuid}/versions/{version}/matches/{matchid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "matchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MatchResponse = new operations.MatchResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Match Multiple Received SKUs
   *
   * @remarks
   * This endpoint allows the user to bulk approve, deny, or associate received SKUs. In a single request, you can match up to 25 received SKUs from your sellers.
   *
   * Through the `actionName` attribute you can select the operation you want to apply to the received SKU.
   *
   * Actions include:
   *
   * 1. `newproduct`: match the SKU as a new product.
   *
   * 2. `skuassociation`: associate the received SKU to an existing SKU.
   *
   * 3. `productassociation`: associate the received SKU to an existing product.
   *
   * 4. `deny`: deny the received SKU.
   */
  matchMultiple(
    req: operations.MatchMultipleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MatchMultipleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MatchMultipleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/suggestions/matches/action/{actionName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MatchMultipleResponse =
        new operations.MatchMultipleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
