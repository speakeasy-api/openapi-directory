// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PollForDecisionTaskXAmzTargetEnum
type PollForDecisionTaskXAmzTargetEnum string

const (
	PollForDecisionTaskXAmzTargetEnumSimpleWorkflowServicePollForDecisionTask PollForDecisionTaskXAmzTargetEnum = "SimpleWorkflowService.PollForDecisionTask"
)

func (e PollForDecisionTaskXAmzTargetEnum) ToPointer() *PollForDecisionTaskXAmzTargetEnum {
	return &e
}

func (e *PollForDecisionTaskXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SimpleWorkflowService.PollForDecisionTask":
		*e = PollForDecisionTaskXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PollForDecisionTaskXAmzTargetEnum: %v", v)
	}
}

type PollForDecisionTaskRequest struct {
	PollForDecisionTaskInput shared.PollForDecisionTaskInput   `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               PollForDecisionTaskXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaximumPageSize *string `queryParam:"style=form,explode=true,name=maximumPageSize"`
	// Pagination token
	NextPageToken *string `queryParam:"style=form,explode=true,name=nextPageToken"`
}

type PollForDecisionTaskResponse struct {
	ContentType string
	// Success
	DecisionTask *shared.DecisionTask
	// LimitExceededFault
	LimitExceededFault interface{}
	// OperationNotPermittedFault
	OperationNotPermittedFault interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// UnknownResourceFault
	UnknownResourceFault interface{}
}
