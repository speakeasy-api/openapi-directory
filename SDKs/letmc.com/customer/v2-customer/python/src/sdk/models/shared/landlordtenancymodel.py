"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import landlordlettingsinspectionmodel as shared_landlordlettingsinspectionmodel
from ..shared import landlordmaintenancecertificatemodel as shared_landlordmaintenancecertificatemodel
from ..shared import landlordmaintenancepreferencemodel as shared_landlordmaintenancepreferencemodel
from ..shared import lettingslandlorddocument as shared_lettingslandlorddocument
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LandlordTenancyModel:
    r"""Landlord Tenancy Model."""
    
    actual_end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActualEndDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Actual End Date"""  
    beds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Beds'), 'exclude': lambda f: f is None }})
    r"""Beds"""  
    bond: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Bond'), 'exclude': lambda f: f is None }})
    r"""Bond"""  
    branch_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchID'), 'exclude': lambda f: f is None }})
    r"""The tenancy branch ID:-"""  
    certificates: Optional[list[shared_landlordmaintenancecertificatemodel.LandlordMaintenanceCertificateModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Certificates'), 'exclude': lambda f: f is None }})
    r"""Maintenance Certificates."""  
    documents: Optional[list[shared_lettingslandlorddocument.LettingsLandlordDocument]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Documents'), 'exclude': lambda f: f is None }})
    r"""Tenancy documents:-"""  
    fixed_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Fixed Date"""  
    global_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalReference'), 'exclude': lambda f: f is None }})
    r"""User Friendly ID"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ID'), 'exclude': lambda f: f is None }})
    r"""ID"""  
    inspections: Optional[list[shared_landlordlettingsinspectionmodel.LandlordLettingsInspectionModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Inspections'), 'exclude': lambda f: f is None }})
    r"""Inspections"""  
    managed_rent: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ManagedRent'), 'exclude': lambda f: f is None }})
    r"""State of the tenancy"""  
    preferences: Optional[list[shared_landlordmaintenancepreferencemodel.LandlordMaintenancePreferenceModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Preferences'), 'exclude': lambda f: f is None }})
    r"""Maintenance Preferences."""  
    previous_rent_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreviousRentAmount'), 'exclude': lambda f: f is None }})
    r"""Previous Rent Amount"""  
    property_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyAddress'), 'exclude': lambda f: f is None }})
    r"""Display Property Address"""  
    rent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rent'), 'exclude': lambda f: f is None }})
    r"""Rent"""  
    rent_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RentAmount'), 'exclude': lambda f: f is None }})
    r"""Rent Amount"""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start Date"""  
    tenancy_property: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenancyProperty'), 'exclude': lambda f: f is None }})
    r"""Tenancy Property"""  
    tenancy_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenancyState'), 'exclude': lambda f: f is None }})
    r"""State of the tenancy"""  
    tenants: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tenants'), 'exclude': lambda f: f is None }})
    r"""Tenants"""  
    