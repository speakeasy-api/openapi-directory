"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class PostOrderLineItemUpdateTypeItemStateEnum(str, Enum):
    r"""The state of the Order Line Item (OLI). See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    
    To generate invoice for an OLI, you must set this field to `SentToBilling` and set the `billTargetDate` field .
    
    You can update this field for an OLI only when the OLI is in the `Executing` or `SentToBilling`state (when the `itemState` field is set as `Executing` or `SentToBilling`).
    """
    EXECUTING = 'Executing'
    SENT_TO_BILLING = 'SentToBilling'
    COMPLETE = 'Complete'
    CANCELLED = 'Cancelled'

class PostOrderLineItemUpdateTypeItemTypeEnum(str, Enum):
    r"""The type of the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """
    PRODUCT = 'Product'
    FEE = 'Fee'
    SERVICES = 'Services'

class PostOrderLineItemUpdateTypeTaxModeEnum(str, Enum):
    r"""The tax mode for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """
    TAX_INCLUSIVE = 'TaxInclusive'
    TAX_EXCLUSIVE = 'TaxExclusive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrderLineItemUpdateType:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The sytem generated Id for the Order Line Item(OLI). Use this field to specify which OLI to update."""  
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountingCode'), 'exclude': lambda f: f is None }})
    r"""The accountingCode for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    amount_per_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountPerUnit'), 'exclude': lambda f: f is None }})
    r"""The actual charged amount per unit for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    bill_target_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billTargetDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The target date for the Order Line Item (OLI) to be picked up by bill run for generating invoice.
    
    To generate invoice for an OLI, you must set this field and set the `itemState` field to `SentToBilling`.
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""Container for custom fields of an Order Line Item object."""  
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The deferred revenue accounting code for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    item_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemName'), 'exclude': lambda f: f is None }})
    r"""The name of the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    item_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemNumber'), 'exclude': lambda f: f is None }})
    r"""The number for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    item_state: Optional[PostOrderLineItemUpdateTypeItemStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemState'), 'exclude': lambda f: f is None }})
    r"""The state of the Order Line Item (OLI). See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    
    To generate invoice for an OLI, you must set this field to `SentToBilling` and set the `billTargetDate` field .
    
    You can update this field for an OLI only when the OLI is in the `Executing` or `SentToBilling`state (when the `itemState` field is set as `Executing` or `SentToBilling`).
    """  
    item_type: Optional[PostOrderLineItemUpdateTypeItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemType'), 'exclude': lambda f: f is None }})
    r"""The type of the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    list_price_per_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPricePerUnit'), 'exclude': lambda f: f is None }})
    r"""The list price per unit for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})
    r"""The product code for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    purchase_order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseOrderNumber'), 'exclude': lambda f: f is None }})
    r"""Used by customers to specify the Purchase Order Number provided by the buyer.
    
    You can update this field for an Order Line Item (OLI) only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The quantity of units, such as the number of authors in a hosted wiki service.
    
    You can update this field for an Order Line Item (OLI) only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The recognized revenue accounting code for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    revenue_recognition_rule: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRule'), 'exclude': lambda f: f is None }})
    r"""The Revenue Recognition rule for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""The tax code for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    tax_mode: Optional[PostOrderLineItemUpdateTypeTaxModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode for the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    transaction_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The transaction date of the Order Line Item (OLI).
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    uom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UOM'), 'exclude': lambda f: f is None }})
    r"""Specifies the units to measure usage.
    
    You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    """  
    