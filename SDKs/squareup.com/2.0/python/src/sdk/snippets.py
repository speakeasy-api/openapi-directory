"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Snippets:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_snippet(self, request: operations.DeleteSnippetRequest, security: operations.DeleteSnippetSecurity) -> operations.DeleteSnippetResponse:
        r"""DeleteSnippet
        Removes your snippet from a Square Online site.
        
        You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
        
        
        __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSnippetRequest, base_url, '/v2/sites/{site_id}/snippet', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSnippetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteSnippetResponse])
                res.delete_snippet_response = out

        return res

    def retrieve_snippet(self, request: operations.RetrieveSnippetRequest, security: operations.RetrieveSnippetSecurity) -> operations.RetrieveSnippetResponse:
        r"""RetrieveSnippet
        Retrieves your snippet from a Square Online site. A site can contain snippets from multiple snippet applications, but you can retrieve only the snippet that was added by your application.
        
        You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
        
        
        __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveSnippetRequest, base_url, '/v2/sites/{site_id}/snippet', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveSnippetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveSnippetResponse])
                res.retrieve_snippet_response = out

        return res

    def upsert_snippet(self, request: operations.UpsertSnippetRequest, security: operations.UpsertSnippetSecurity) -> operations.UpsertSnippetResponse:
        r"""UpsertSnippet
        Adds a snippet to a Square Online site or updates the existing snippet on the site. 
        The snippet code is appended to the end of the `head` element on every page of the site, except checkout pages. A snippet application can add one snippet to a given site. 
        
        You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
        
        
        __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpsertSnippetRequest, base_url, '/v2/sites/{site_id}/snippet', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "upsert_snippet_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpsertSnippetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpsertSnippetResponse])
                res.upsert_snippet_response = out

        return res

    