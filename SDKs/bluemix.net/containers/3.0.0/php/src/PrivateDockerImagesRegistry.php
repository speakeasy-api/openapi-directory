<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PrivateDockerImagesRegistry 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve the namespace of an organization.
     * 
     * This endpoint retrieves the namespace that was set for the organization that owns the current space (corresponding IBM Containers command: `cf ic namespace get`).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesResponse
     */
	public function getRegistryNamespaces(
        \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registry/namespaces');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->namespace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NamespaceT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Check the availability of a namespace
     * 
     * This endpoint checks whether a namespace is available in Bluemix and can be used to set up the private Docker images registry for an organization. When a HTTP code `201 Ok` is returned, the namespace is already assigned to another organization in Bluemix and cannot be used. When a HTTP code `404 Not found` is returned, the namespace can be used for your organization. 
     * 
     *  Consider the following rules when choosing a namespace for your organization: 
     * 
     * - Every organization can have one namespace at a time only 
     * - The namespace must be unique in Bluemix. 
     * - The namespace can be 4-30 characters long. 
     * - The namespace must start with at least one letter or number. 
     * - The namespace can only contain lowercase letters, numbers or underscores (_). 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesNamespaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesNamespaceResponse
     */
	public function getRegistryNamespacesNamespace(
        \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesNamespaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesNamespaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registry/namespaces/{namespace}', \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesNamespaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRegistryNamespacesNamespaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->namespace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NamespaceT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Set a namespace for your private Bluemix registry.
     * 
     * Set up your own Docker images registry in Bluemix by defining a namespace for your organization (corresponding IBM Containers command: `cf ic namespace set <namespace>`). The namespace is used to generate a unique URL to your private Bluemix registry. In your private registry you store all Docker images that you want to share across your organization. To create a container from an image, you must first push the image to your registry. 
     * 
     *  The namespace cannot be changed after is has been set. Consider the following rules to choose a namespace for your organization: 
     * 
     * - Every organization can have one namespace at a time only 
     * - The namespace must be unique in Bluemix. 
     * - The namespace can be 4-30 characters long. 
     * - The namespace must start with at least one letter or number. 
     * - The namespace can only contain lowercase letters, numbers or underscores (_).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRegistryNamespacesNamespaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRegistryNamespacesNamespaceResponse
     */
	public function putRegistryNamespacesNamespace(
        \OpenAPI\OpenAPI\Models\Operations\PutRegistryNamespacesNamespaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRegistryNamespacesNamespaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/registry/namespaces/{namespace}', \OpenAPI\OpenAPI\Models\Operations\PutRegistryNamespacesNamespaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRegistryNamespacesNamespaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->namespace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NamespaceT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}