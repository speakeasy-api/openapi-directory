// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkWirelessSsidSplashSettingsRequestBodyBillingFreeAccess - Details associated with a free access plan with limits.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodyBillingFreeAccess struct {
	// How long a device can use a network for free.
	DurationInMinutes *int64 `json:"durationInMinutes,omitempty"`
	// Whether or not free access is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodyBilling - Details associated with billing splash.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodyBilling struct {
	// Details associated with a free access plan with limits.
	FreeAccess *UpdateNetworkWirelessSsidSplashSettingsRequestBodyBillingFreeAccess `json:"freeAccess,omitempty"`
	// Whether or not billing uses the fast login prepaid access option.
	PrepaidAccessFastLoginEnabled *bool `json:"prepaidAccessFastLoginEnabled,omitempty"`
	// The email address that receives replies from clients.
	ReplyToEmailAddress *string `json:"replyToEmailAddress,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum - How login attempts should be handled when the controller is unreachable. Can be either 'open', 'restricted', or 'default'.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum string

const (
	UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnumDefault    UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum = "default"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnumOpen       UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum = "open"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnumRestricted UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum = "restricted"
)

func (e *UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "default":
		fallthrough
	case "open":
		fallthrough
	case "restricted":
		*e = UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodyGuestSponsorship - Details associated with guest sponsored splash.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodyGuestSponsorship struct {
	// Duration in minutes of sponsored guest authorization. Must be between 1 and 60480 (6 weeks)
	DurationInMinutes *int64 `json:"durationInMinutes,omitempty"`
	// Whether or not guests can specify how much time they are requesting.
	GuestCanRequestTimeframe *bool `json:"guestCanRequestTimeframe,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum - The strength of the enforcement of selected system types. Must be one of: 'focused', 'click-through', and 'strict'.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum string

const (
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnumClickThrough UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum = "click-through"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnumFocused      UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum = "focused"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnumStrict       UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum = "strict"
)

func (e *UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "click-through":
		fallthrough
	case "focused":
		fallthrough
	case "strict":
		*e = UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentSystemsManagerNetwork - Systems Manager network targeted for sentry enrollment.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentSystemsManagerNetwork struct {
	// The network ID of the Systems Manager network.
	ID string `json:"id"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollment - Systems Manager sentry enrollment splash settings.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollment struct {
	// The system types that the Sentry enforces. Must be included in: 'iOS, 'Android', 'macOS', and 'Windows'.
	EnforcedSystems []string `json:"enforcedSystems,omitempty"`
	// The strength of the enforcement of selected system types. Must be one of: 'focused', 'click-through', and 'strict'.
	Strength *UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentStrengthEnum `json:"strength,omitempty"`
	// Systems Manager network targeted for sentry enrollment.
	SystemsManagerNetwork *UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollmentSystemsManagerNetwork `json:"systemsManagerNetwork,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum - The format of the encoded contents. Supported formats are 'png', 'gif', and jpg'.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum string

const (
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnumGif UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum = "gif"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnumJpg UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum = "jpg"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnumPng UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum = "png"
)

func (e *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gif":
		fallthrough
	case "jpg":
		fallthrough
	case "png":
		*e = UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImage - Properties for setting a new image.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImage struct {
	// The file contents (a base 64 encoded string) of your new image.
	Contents *string `json:"contents,omitempty"`
	// The format of the encoded contents. Supported formats are 'png', 'gif', and jpg'.
	Format *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImageFormatEnum `json:"format,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImage - The image used in the splash page.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImage struct {
	// The extension of the image file.
	Extension *string `json:"extension,omitempty"`
	// Properties for setting a new image.
	Image *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImageImage `json:"image,omitempty"`
	// The MD5 value of the image file. Setting this to null will remove the image from the splash page.
	Md5 *string `json:"md5,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum - The format of the encoded contents. Supported formats are 'png', 'gif', and jpg'.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum string

const (
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnumGif UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum = "gif"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnumJpg UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum = "jpg"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnumPng UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum = "png"
)

func (e *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gif":
		fallthrough
	case "jpg":
		fallthrough
	case "png":
		*e = UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImage - Properties for setting a new image.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImage struct {
	// The file contents (a base 64 encoded string) of your new logo.
	Contents *string `json:"contents,omitempty"`
	// The format of the encoded contents. Supported formats are 'png', 'gif', and jpg'.
	Format *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImageFormatEnum `json:"format,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogo - The logo used in the splash page.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogo struct {
	// The extension of the logo file.
	Extension *string `json:"extension,omitempty"`
	// Properties for setting a new image.
	Image *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogoImage `json:"image,omitempty"`
	// The MD5 value of the logo file. Setting this to null will remove the logo from the splash page.
	Md5 *string `json:"md5,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum - The format of the encoded contents. Supported formats are 'png', 'gif', and jpg'.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum string

const (
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnumGif UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum = "gif"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnumJpg UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum = "jpg"
	UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnumPng UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum = "png"
)

func (e *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gif":
		fallthrough
	case "jpg":
		fallthrough
	case "png":
		*e = UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImage - Properties for setting a new image.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImage struct {
	// The file contents (a base 64 encoded string) of your new prepaid front.
	Contents *string `json:"contents,omitempty"`
	// The format of the encoded contents. Supported formats are 'png', 'gif', and jpg'.
	Format *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImageFormatEnum `json:"format,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFront - The prepaid front image used in the splash page.
type UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFront struct {
	// The extension of the prepaid front image file.
	Extension *string `json:"extension,omitempty"`
	// Properties for setting a new image.
	Image *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFrontImage `json:"image,omitempty"`
	// The MD5 value of the prepaid front image file. Setting this to null will remove the prepaid front from the splash page.
	Md5 *string `json:"md5,omitempty"`
}

type UpdateNetworkWirelessSsidSplashSettingsRequestBody struct {
	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins *bool `json:"allowSimultaneousLogins,omitempty"`
	// Details associated with billing splash.
	Billing *UpdateNetworkWirelessSsidSplashSettingsRequestBodyBilling `json:"billing,omitempty"`
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn *bool `json:"blockAllTrafficBeforeSignOn,omitempty"`
	// How login attempts should be handled when the controller is unreachable. Can be either 'open', 'restricted', or 'default'.
	ControllerDisconnectionBehavior *UpdateNetworkWirelessSsidSplashSettingsRequestBodyControllerDisconnectionBehaviorEnum `json:"controllerDisconnectionBehavior,omitempty"`
	// Details associated with guest sponsored splash.
	GuestSponsorship *UpdateNetworkWirelessSsidSplashSettingsRequestBodyGuestSponsorship `json:"guestSponsorship,omitempty"`
	// The custom redirect URL where the users will go after the splash page.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment *UpdateNetworkWirelessSsidSplashSettingsRequestBodySentryEnrollment `json:"sentryEnrollment,omitempty"`
	// The image used in the splash page.
	SplashImage *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashImage `json:"splashImage,omitempty"`
	// The logo used in the splash page.
	SplashLogo *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashLogo `json:"splashLogo,omitempty"`
	// The prepaid front image used in the splash page.
	SplashPrepaidFront *UpdateNetworkWirelessSsidSplashSettingsRequestBodySplashPrepaidFront `json:"splashPrepaidFront,omitempty"`
	// Splash timeout in minutes. This will determine how often users will see the splash page.
	SplashTimeout *int64 `json:"splashTimeout,omitempty"`
	// [optional] The custom splash URL of the click-through splash page. Note that the URL can be configured without necessarily being used. In order to enable the custom URL, see 'useSplashUrl'
	SplashURL *string `json:"splashUrl,omitempty"`
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page. A custom redirect URL must be set if this is true.
	UseRedirectURL *bool `json:"useRedirectUrl,omitempty"`
	// [optional] Boolean indicating whether the users will be redirected to the custom splash url. A custom splash URL must be set if this is true. Note that depending on your SSID's access control settings, it may not be possible to use the custom splash URL.
	UseSplashURL *bool `json:"useSplashUrl,omitempty"`
	// The welcome message for the users on the splash page.
	WelcomeMessage *string `json:"welcomeMessage,omitempty"`
}

type UpdateNetworkWirelessSsidSplashSettingsRequest struct {
	RequestBody *UpdateNetworkWirelessSsidSplashSettingsRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                              `pathParam:"style=simple,explode=false,name=networkId"`
	Number      string                                              `pathParam:"style=simple,explode=false,name=number"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess - Details associated with a free access plan with limits
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess struct {
	// How long a device can use a network for free.
	DurationInMinutes *int64 `json:"durationInMinutes,omitempty"`
	// Whether or not free access is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONBilling - Details associated with billing splash
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONBilling struct {
	// Details associated with a free access plan with limits
	FreeAccess *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess `json:"freeAccess,omitempty"`
	// Whether or not billing uses the fast login prepaid access option.
	PrepaidAccessFastLoginEnabled *bool `json:"prepaidAccessFastLoginEnabled,omitempty"`
	// The email address that reeceives replies from clients
	ReplyToEmailAddress *string `json:"replyToEmailAddress,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship - Details associated with guest sponsored splash
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship struct {
	// Duration in minutes of sponsored guest authorization.
	DurationInMinutes *int64 `json:"durationInMinutes,omitempty"`
	// Whether or not guests can specify how much time they are requesting.
	GuestCanRequestTimeframe *bool `json:"guestCanRequestTimeframe,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum - How created user accounts should be authorized.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum string

const (
	UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnumAdmin     UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum = "admin"
	UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnumAuto      UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum = "auto"
	UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnumSelfEmail UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum = "self_email"
)

func (e *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "admin":
		fallthrough
	case "auto":
		fallthrough
	case "self_email":
		*e = UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration - Self-registration for splash with Meraki authentication.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration struct {
	// How created user accounts should be authorized.
	AuthorizationType *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum `json:"authorizationType,omitempty"`
	// Whether or not to allow users to create their own account on the network.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum - The strength of the enforcement of selected system types.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum string

const (
	UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnumClickThrough UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum = "click-through"
	UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnumFocused      UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum = "focused"
	UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnumStrict       UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum = "strict"
)

func (e *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "click-through":
		fallthrough
	case "focused":
		fallthrough
	case "strict":
		*e = UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork - Systems Manager network targeted for sentry enrollment.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork struct {
	// The network ID of the Systems Manager network.
	ID *string `json:"id,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment - Systems Manager sentry enrollment splash settings.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment struct {
	// The system types that the Sentry enforces.
	EnforcedSystems []string `json:"enforcedSystems,omitempty"`
	// The strength of the enforcement of selected system types.
	Strength *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum `json:"strength,omitempty"`
	// Systems Manager network targeted for sentry enrollment.
	SystemsManagerNetwork *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork `json:"systemsManagerNetwork,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage - The image used in the splash page.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage struct {
	// The extension of the image file.
	Extension *string `json:"extension,omitempty"`
	// The MD5 value of the image file.
	Md5 *string `json:"md5,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo - The logo used in the splash page.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo struct {
	// The extension of the logo file.
	Extension *string `json:"extension,omitempty"`
	// The MD5 value of the logo file.
	Md5 *string `json:"md5,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront - The prepaid front image used in the splash page.
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront struct {
	// The extension of the prepaid front image file.
	Extension *string `json:"extension,omitempty"`
	// The MD5 value of the prepaid front image file.
	Md5 *string `json:"md5,omitempty"`
}

// UpdateNetworkWirelessSsidSplashSettings200ApplicationJSON - Successful operation
type UpdateNetworkWirelessSsidSplashSettings200ApplicationJSON struct {
	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins *bool `json:"allowSimultaneousLogins,omitempty"`
	// Details associated with billing splash
	Billing *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONBilling `json:"billing,omitempty"`
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn *bool `json:"blockAllTrafficBeforeSignOn,omitempty"`
	// How login attempts should be handled when the controller is unreachable.
	ControllerDisconnectionBehavior *string `json:"controllerDisconnectionBehavior,omitempty"`
	// Details associated with guest sponsored splash
	GuestSponsorship *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship `json:"guestSponsorship,omitempty"`
	// The custom redirect URL where the users will go after the splash page.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// Self-registration for splash with Meraki authentication.
	SelfRegistration *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration `json:"selfRegistration,omitempty"`
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment `json:"sentryEnrollment,omitempty"`
	// The image used in the splash page.
	SplashImage *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage `json:"splashImage,omitempty"`
	// The logo used in the splash page.
	SplashLogo *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo `json:"splashLogo,omitempty"`
	// The type of splash page for this SSID
	SplashPage *string `json:"splashPage,omitempty"`
	// The prepaid front image used in the splash page.
	SplashPrepaidFront *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront `json:"splashPrepaidFront,omitempty"`
	// Splash timeout in minutes.
	SplashTimeout *int64 `json:"splashTimeout,omitempty"`
	// The custom splash URL of the click-through splash page.
	SplashURL *string `json:"splashUrl,omitempty"`
	// SSID number
	SsidNumber *int64 `json:"ssidNumber,omitempty"`
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
	UseRedirectURL *bool `json:"useRedirectUrl,omitempty"`
	// Boolean indicating whether the users will be redirected to the custom splash url
	UseSplashURL *bool `json:"useSplashUrl,omitempty"`
	// The welcome message for the users on the splash page.
	WelcomeMessage *string `json:"welcomeMessage,omitempty"`
}

type UpdateNetworkWirelessSsidSplashSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessSsidSplashSettings200ApplicationJSONObject *UpdateNetworkWirelessSsidSplashSettings200ApplicationJSON
}
