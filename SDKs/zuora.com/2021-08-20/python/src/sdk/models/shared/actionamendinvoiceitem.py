"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionAmendInvoiceItem:
    
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the item's charge. Accounting codes group transactions that contain similar accounting attributes.
    
    
    **Character limit**: 100
    
    **Values**: inherited from `RatePlanCharge.AccountingCode`
    """  
    applied_to_invoice_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppliedToInvoiceItemId'), 'exclude': lambda f: f is None }})
    r"""Associates a discount invoice item to a specific invoice item.
    
    
    **Character limit**: 32
    
    **Values**: inherited from the ID of the charge that a discount applies to
    """  
    charge_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeAmount'), 'exclude': lambda f: f is None }})
    r"""The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.
    
    
    **Character limit**:
    
    **Values**: automatically calculated from multiple fields in multiple objects
    """  
    charge_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the Invoice Item is created .
    
    
    **Character limit**: 29
    
    **Values**: automatically generated
    """  
    charge_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeDescription'), 'exclude': lambda f: f is None }})
    r"""A description of the invoice item's charge.
    
    
    **Character limit**: 500
    
    **Values**: inherited from `RatePlanCharge.Description`
    """  
    charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the rate plan charge that is associated with this invoice item upon object creation.
    
    
    **Character limit**: 32
    
    **Values**: inherited from `RatePlanCharge.Id`
    """  
    charge_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeName'), 'exclude': lambda f: f is None }})
    r"""The name of the invoice item's charge.
    **Character limi**t: 50
    
    **Values: **inherited from `RatePlanCharge.Name`
    """  
    charge_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeNumber'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the invoice item's charge.
    
    
    **Character limit:** 50
    
    **Values:** inherited from `RatePlanCharge.ChargeNumber`
    """  
    charge_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeType'), 'exclude': lambda f: f is None }})
    r"""Specifies the type of charge.
    
    
    **Character limit**: 9
    
    **Values**: one of the following:
    
    - `OneTime`
    - `Recurring`
    - `Usage`
    """  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedById'), 'exclude': lambda f: f is None }})
    r"""The user ID of the person who created the invoice item.
    
    
    **Character limit**: 32
    
    **Values**: automatically generated
    """  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the invoice item was created.
    
    
    **Character limit:** 29
    
    **Values**: automatically generated
    """  
    invoice_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceId'), 'exclude': lambda f: f is None }})
    r"""The ID of the invoice that's associated with this invoice item.
    
    
    **Character limit**: 32
    
    **Values**: inherited from `Invoice.Id`
    """  
    processing_type: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingType'), 'exclude': lambda f: f is None }})
    r"""Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources.
    
    
    **Character limit**:
    
    **Values: **
    
    - 0: charge
    - 1: discount
    - 2: prepayment
    - 3: tax
    """  
    product_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductDescription'), 'exclude': lambda f: f is None }})
    r"""A description of the product associated with this invoice item.
    
    
    **Character limit**: 500
    
    **Values**: inherited from `Product.Description`
    """  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductId'), 'exclude': lambda f: f is None }})
    r"""The ID of the product associated with this invoice item.
    
    
    **Character limit**: 32
    
    **Values**: inherited from `Product.Id`
    """  
    product_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductName'), 'exclude': lambda f: f is None }})
    r"""The name of the product associated with this invoice item.
    
    
    **Character limit**: 255
    
    **Values: **inherited from `Product.Name`
    """  
    product_rate_plan_charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductRatePlanChargeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the rate plan charge that's associated with this invoice item.
    
    
    **Character limit**: 32
    
    **Values**: inherited from `ProductRatePlanCharge.Id` You cannot query for this field. Only the subscribe preview and the amend preview calls will return the value of this field in the response.
    """  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units for this invoice item.
    
    
    **Values**: inherited from `RatePlanCharge.Quantity`
    """  
    rate_plan_charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RatePlanChargeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the rate plan charge that's associated with this invoice item.
    
    
    **Character limit**: 32
    
    **Values**: inherited from `RatePlanCharge.Id`
    """  
    rev_rec_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevRecCode'), 'exclude': lambda f: f is None }})
    r"""Associates this invoice item with a specific revenue recognition code.
    
    
    **Character limit**: 32
    
    **Values**: inherited from `ProductRatePlanCharge.RevRecCode`
    """  
    rev_rec_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevRecStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when revenue recognition is triggered.
    
    
    **Character limit**: 29
    
    **Values**: generated from `InvoiceItem.RevRecTriggerCondition`
    """  
    rev_rec_trigger_condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevRecTriggerCondition'), 'exclude': lambda f: f is None }})
    r"""Specifies when revenue recognition begins based on a triggering event.
    
    
    **Character limit**:
    
    **Values**: inherited from `ProductRatePlanCharge`.`RevRecTriggerCondition`
    """  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date of the service period associated with this invoice item. Service ends one second before the date in this value.
    
    
    **Character limit**: 29
    
    **Values**: automatically generated
    """  
    service_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.
    
    
    **Character limit:** 29
    
    **Values**: automatically generated
    """  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SKU'), 'exclude': lambda f: f is None }})
    r"""The unique SKU for the product associated with this invoice item.
    
    
    **Character limit**: 255
    
    **Values**: inherited from `Product.SKU`
    """  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription associated with the invoice item.
    
    
    **Character limit**: 32
    
    **Values**: inherited from `Subscription.Id`
    """  
    subscription_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionNumber'), 'exclude': lambda f: f is None }})
    r"""The number of the subscription associated with the invoice item.
    
    
    **Character limit**:
    
    **Values**:
    """  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of tax applied to the invoice item's charge.
    
    
    **Character limit**:
    
    **Values**: calculated from multiple fields in the ProductRatePlanCharge object
    """  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxCode'), 'exclude': lambda f: f is None }})
    r"""Specifies the tax code for taxation rules.
    
    
    **Character limit**: 6
    
    **Values**: inherited from `ProductRatePlanCharge.TaxCode`
    """  
    tax_exempt_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxExemptAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the invoice item's charge that's tax exempt.
    
    
    **Character limit**:
    
    **Values**: calculated from multiple fields in the ProductRatePlanCharge object
    """  
    tax_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode of the invoice item.
    
    
    **Character limit**: 12
    
    **Values**: `TaxExclusive`, `TaxInclusive`
    """  
    unit_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnitPrice'), 'exclude': lambda f: f is None }})
    r"""The per-unit price of the invoice item.
    
    
    **Character limit**:
    
    **Values**: calculated from multiple fields in ProductRatePlanCharge and ProductRatePlanChargeTier objets
    """  
    uom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UOM'), 'exclude': lambda f: f is None }})
    r"""Specifies the units to measure usage. Units of measure are configured in the web-based UI: **Z-Billing > Settings**
    
    **Character limit**:
    
    **Values**: inherited from `ProductRatePlanCharge.UOM`
    """  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the user who last updated the invoice item.
    
    
    **Character limit**: 32
    
    **Values**: automatically generated
    """  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice item was last updated.
    
    
    **Character limit**: 29
    
    **Values**: automatically generated
    """  
    