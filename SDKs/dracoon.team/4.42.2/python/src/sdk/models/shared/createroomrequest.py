"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CreateRoomRequestClassificationEnum(str, Enum):
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    Provided (or default) classification is taken from room
    
    when file gets uploaded without any classification.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'

class CreateRoomRequestNewGroupMemberAcceptanceEnum(str, Enum):
    r"""Behaviour when new users are added to the group:
    
    * `autoallow`
    
    * `pending`
    
    
    
    Only relevant if `adminGroupIds` has items.
    """
    AUTOALLOW = 'autoallow'
    PENDING = 'pending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateRoomRequest:
    r"""Request model for creating a room"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name"""  
    admin_group_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminGroupIds'), 'exclude': lambda f: f is None }})
    r"""List of group ids
    
    A room requires at least one admin (user or group)
    """  
    admin_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminIds'), 'exclude': lambda f: f is None }})
    r"""List of user ids
    
    A room requires at least one admin (user or group)
    """  
    classification: Optional[CreateRoomRequestClassificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    Provided (or default) classification is taken from room
    
    when file gets uploaded without any classification.
    """  
    has_activities_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasActivitiesLog'), 'exclude': lambda f: f is None }})
    r"""Is activities log active (for rooms only)"""  
    has_recycle_bin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasRecycleBin'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.10.0
    
    Is recycle bin active (for rooms only)
    
    Recycle bin is always on (disabling is not possible).
    """  
    inherit_permissions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritPermissions'), 'exclude': lambda f: f is None }})
    r"""Inherit permissions from parent room
    
    (default: `false` if `parentId` is `0`; otherwise: `true`)
    """  
    new_group_member_acceptance: Optional[CreateRoomRequestNewGroupMemberAcceptanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newGroupMemberAcceptance'), 'exclude': lambda f: f is None }})
    r"""Behaviour when new users are added to the group:
    
    * `autoallow`
    
    * `pending`
    
    
    
    Only relevant if `adminGroupIds` has items.
    """  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""User notes
    
    Use empty string to remove.
    """  
    parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentId'), 'exclude': lambda f: f is None }})
    r"""Parent room ID or `null` (not 0) to create a top level room"""  
    quota: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota'), 'exclude': lambda f: f is None }})
    r"""Quota in byte"""  
    recycle_bin_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recycleBinRetentionPeriod'), 'exclude': lambda f: f is None }})
    r"""Retention period for deleted nodes in days"""  
    timestamp_creation: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampCreation'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.22.0
    
    Time the node was created on external file system
    
    (default: current server datetime in UTC format)
    """  
    timestamp_modification: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampModification'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.22.0
    
    Time the content of a node was last modified on external file system
    
    (default: current server datetime in UTC format)
    """  
    