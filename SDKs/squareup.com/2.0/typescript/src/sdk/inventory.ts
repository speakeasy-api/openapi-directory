/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Inventory {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * BatchChangeInventory
   *
   * @remarks
   * Applies adjustments and counts to the provided item quantities.
   *
   * On success: returns the current calculated counts for all objects
   * referenced in the request.
   * On failure: returns a list of related errors.
   */
  batchChangeInventory(
    req: shared.BatchChangeInventoryRequest,
    security: operations.BatchChangeInventorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BatchChangeInventoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchChangeInventoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/inventory/changes/batch-create";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BatchChangeInventorySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BatchChangeInventoryResponse =
        new operations.BatchChangeInventoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchChangeInventoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchChangeInventoryResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * BatchRetrieveInventoryChanges
   *
   * @remarks
   * Returns historical physical counts and adjustments based on the
   * provided filter criteria.
   *
   * Results are paginated and sorted in ascending order according their
   * `occurred_at` timestamp (oldest first).
   *
   * BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
   * that cannot be handled by other, simpler endpoints.
   */
  batchRetrieveInventoryChanges(
    req: shared.BatchRetrieveInventoryChangesRequest,
    security: operations.BatchRetrieveInventoryChangesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BatchRetrieveInventoryChangesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchRetrieveInventoryChangesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/inventory/changes/batch-retrieve";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BatchRetrieveInventoryChangesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BatchRetrieveInventoryChangesResponse =
        new operations.BatchRetrieveInventoryChangesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchRetrieveInventoryChangesResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchRetrieveInventoryChangesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * BatchRetrieveInventoryCounts
   *
   * @remarks
   * Returns current counts for the provided
   * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested
   * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
   *
   * Results are paginated and sorted in descending order according to their
   * `calculated_at` timestamp (newest first).
   *
   * When `updated_after` is specified, only counts that have changed since that
   * time (based on the server timestamp for the most recent change) are
   * returned. This allows clients to perform a "sync" operation, for example
   * in response to receiving a Webhook notification.
   */
  batchRetrieveInventoryCounts(
    req: shared.BatchRetrieveInventoryCountsRequest,
    security: operations.BatchRetrieveInventoryCountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BatchRetrieveInventoryCountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchRetrieveInventoryCountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/inventory/counts/batch-retrieve";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BatchRetrieveInventoryCountsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BatchRetrieveInventoryCountsResponse =
        new operations.BatchRetrieveInventoryCountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchRetrieveInventoryCountsResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchRetrieveInventoryCountsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DeprecatedBatchChangeInventory
   *
   * @remarks
   * Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL
   * is updated to conform to the standard convention.
   */
  deprecatedBatchChangeInventory(
    req: shared.BatchChangeInventoryRequest,
    security: operations.DeprecatedBatchChangeInventorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeprecatedBatchChangeInventoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchChangeInventoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/inventory/batch-change";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeprecatedBatchChangeInventorySecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeprecatedBatchChangeInventoryResponse =
        new operations.DeprecatedBatchChangeInventoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchChangeInventoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchChangeInventoryResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DeprecatedBatchRetrieveInventoryChanges
   *
   * @remarks
   * Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL
   * is updated to conform to the standard convention.
   */
  deprecatedBatchRetrieveInventoryChanges(
    req: shared.BatchRetrieveInventoryChangesRequest,
    security: operations.DeprecatedBatchRetrieveInventoryChangesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeprecatedBatchRetrieveInventoryChangesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchRetrieveInventoryChangesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/inventory/batch-retrieve-changes";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeprecatedBatchRetrieveInventoryChangesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeprecatedBatchRetrieveInventoryChangesResponse =
        new operations.DeprecatedBatchRetrieveInventoryChangesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchRetrieveInventoryChangesResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchRetrieveInventoryChangesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DeprecatedBatchRetrieveInventoryCounts
   *
   * @remarks
   * Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL
   * is updated to conform to the standard convention.
   */
  deprecatedBatchRetrieveInventoryCounts(
    req: shared.BatchRetrieveInventoryCountsRequest,
    security: operations.DeprecatedBatchRetrieveInventoryCountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeprecatedBatchRetrieveInventoryCountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchRetrieveInventoryCountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/inventory/batch-retrieve-counts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeprecatedBatchRetrieveInventoryCountsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeprecatedBatchRetrieveInventoryCountsResponse =
        new operations.DeprecatedBatchRetrieveInventoryCountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchRetrieveInventoryCountsResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchRetrieveInventoryCountsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DeprecatedRetrieveInventoryAdjustment
   *
   * @remarks
   * Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL
   * is updated to conform to the standard convention.
   */
  deprecatedRetrieveInventoryAdjustment(
    req: operations.DeprecatedRetrieveInventoryAdjustmentRequest,
    security: operations.DeprecatedRetrieveInventoryAdjustmentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeprecatedRetrieveInventoryAdjustmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeprecatedRetrieveInventoryAdjustmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventory/adjustment/{adjustment_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeprecatedRetrieveInventoryAdjustmentSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeprecatedRetrieveInventoryAdjustmentResponse =
        new operations.DeprecatedRetrieveInventoryAdjustmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveInventoryAdjustmentResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveInventoryAdjustmentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DeprecatedRetrieveInventoryPhysicalCount
   *
   * @remarks
   * Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL
   * is updated to conform to the standard convention.
   */
  deprecatedRetrieveInventoryPhysicalCount(
    req: operations.DeprecatedRetrieveInventoryPhysicalCountRequest,
    security: operations.DeprecatedRetrieveInventoryPhysicalCountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeprecatedRetrieveInventoryPhysicalCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeprecatedRetrieveInventoryPhysicalCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventory/physical-count/{physical_count_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeprecatedRetrieveInventoryPhysicalCountSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeprecatedRetrieveInventoryPhysicalCountResponse =
        new operations.DeprecatedRetrieveInventoryPhysicalCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveInventoryPhysicalCountResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveInventoryPhysicalCountResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveInventoryAdjustment
   *
   * @remarks
   * Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object
   * with the provided `adjustment_id`.
   */
  retrieveInventoryAdjustment(
    req: operations.RetrieveInventoryAdjustmentRequest,
    security: operations.RetrieveInventoryAdjustmentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveInventoryAdjustmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveInventoryAdjustmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventory/adjustments/{adjustment_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveInventoryAdjustmentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveInventoryAdjustmentResponse =
        new operations.RetrieveInventoryAdjustmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveInventoryAdjustmentResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveInventoryAdjustmentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveInventoryChanges
   *
   * @remarks
   * Returns a set of physical counts and inventory adjustments for the
   * provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested
   * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
   *
   * You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes)
   * and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.
   *
   * Results are paginated and sorted in descending order according to their
   * `occurred_at` timestamp (newest first).
   *
   * There are no limits on how far back the caller can page. This endpoint can be
   * used to display recent changes for a specific item. For more
   * sophisticated queries, use a batch endpoint.
   */
  retrieveInventoryChanges(
    req: operations.RetrieveInventoryChangesRequest,
    security: operations.RetrieveInventoryChangesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveInventoryChangesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveInventoryChangesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventory/{catalog_object_id}/changes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveInventoryChangesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveInventoryChangesResponse =
        new operations.RetrieveInventoryChangesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveInventoryChangesResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveInventoryChangesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveInventoryCount
   *
   * @remarks
   * Retrieves the current calculated stock count for a given
   * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of
   * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted.
   * For more sophisticated queries, use a batch endpoint.
   */
  retrieveInventoryCount(
    req: operations.RetrieveInventoryCountRequest,
    security: operations.RetrieveInventoryCountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveInventoryCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveInventoryCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventory/{catalog_object_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveInventoryCountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveInventoryCountResponse =
        new operations.RetrieveInventoryCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveInventoryCountResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveInventoryCountResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveInventoryPhysicalCount
   *
   * @remarks
   * Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount)
   * object with the provided `physical_count_id`.
   */
  retrieveInventoryPhysicalCount(
    req: operations.RetrieveInventoryPhysicalCountRequest,
    security: operations.RetrieveInventoryPhysicalCountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveInventoryPhysicalCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveInventoryPhysicalCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventory/physical-counts/{physical_count_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveInventoryPhysicalCountSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveInventoryPhysicalCountResponse =
        new operations.RetrieveInventoryPhysicalCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveInventoryPhysicalCountResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveInventoryPhysicalCountResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveInventoryTransfer
   *
   * @remarks
   * Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object
   * with the provided `transfer_id`.
   */
  retrieveInventoryTransfer(
    req: operations.RetrieveInventoryTransferRequest,
    security: operations.RetrieveInventoryTransferSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveInventoryTransferResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveInventoryTransferRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventory/transfers/{transfer_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveInventoryTransferSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveInventoryTransferResponse =
        new operations.RetrieveInventoryTransferResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveInventoryTransferResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveInventoryTransferResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
