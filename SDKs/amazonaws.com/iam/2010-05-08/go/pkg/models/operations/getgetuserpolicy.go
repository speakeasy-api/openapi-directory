// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETUserPolicyActionEnum
type GETGETUserPolicyActionEnum string

const (
	GETGETUserPolicyActionEnumGetUserPolicy GETGETUserPolicyActionEnum = "GetUserPolicy"
)

func (e *GETGETUserPolicyActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetUserPolicy":
		*e = GETGETUserPolicyActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETUserPolicyActionEnum: %s", s)
	}
}

// GETGETUserPolicyVersionEnum
type GETGETUserPolicyVersionEnum string

const (
	GETGETUserPolicyVersionEnumTwoThousandAndTen0508 GETGETUserPolicyVersionEnum = "2010-05-08"
)

func (e *GETGETUserPolicyVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = GETGETUserPolicyVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETUserPolicyVersionEnum: %s", s)
	}
}

type GETGETUserPolicyRequest struct {
	Action GETGETUserPolicyActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	PolicyName string `queryParam:"style=form,explode=true,name=PolicyName"`
	// <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          string                      `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETGETUserPolicyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETUserPolicyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
