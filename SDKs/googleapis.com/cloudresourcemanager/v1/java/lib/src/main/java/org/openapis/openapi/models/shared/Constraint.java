/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Constraint - A `Constraint` describes a way in which a resource's configuration can be restricted. For example, it controls which cloud services can be activated across an organization, or whether a Compute Engine instance can have serial port connections established. `Constraints` can be configured by the organization's policy administrator to fit the needs of the organzation by setting Policies for `Constraints` at different locations in the organization's resource hierarchy. Policies are inherited down the resource hierarchy from higher levels, but can also be overridden. For details about the inheritance rules please read about [Policies](/resource-manager/reference/rest/v1/Policy). `Constraints` have a default behavior determined by the `constraint_default` field, which is the enforcement behavior that is used in the absence of a `Policy` being defined or inherited for the resource in question.
 */
public class Constraint {
    /**
     * A `Constraint` that is either enforced or not. For example a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("booleanConstraint")
    public java.util.Map<String, Object> booleanConstraint;

    public Constraint withBooleanConstraint(java.util.Map<String, Object> booleanConstraint) {
        this.booleanConstraint = booleanConstraint;
        return this;
    }
    
    /**
     * The evaluation behavior of this constraint in the absence of 'Policy'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraintDefault")
    public ConstraintConstraintDefaultEnum constraintDefault;

    public Constraint withConstraintDefault(ConstraintConstraintDefaultEnum constraintDefault) {
        this.constraintDefault = constraintDefault;
        return this;
    }
    
    /**
     * Detailed description of what this `Constraint` controls as well as how and where it is enforced. Mutable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Constraint withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The human readable name. Mutable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Constraint withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * A `Constraint` that allows or disallows a list of string values, which are configured by an Organization's policy administrator with a `Policy`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listConstraint")
    public ListConstraint listConstraint;

    public Constraint withListConstraint(ListConstraint listConstraint) {
        this.listConstraint = listConstraint;
        return this;
    }
    
    /**
     * Immutable value, required to globally be unique. For example, `constraints/serviceuser.services`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Constraint withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Version of the `Constraint`. Default version is 0;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Integer version;

    public Constraint withVersion(Integer version) {
        this.version = version;
        return this;
    }
    
    public Constraint(){}
}
