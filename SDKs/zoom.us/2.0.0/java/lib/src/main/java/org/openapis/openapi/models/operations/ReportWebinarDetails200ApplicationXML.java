/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

/**
 * ReportWebinarDetails200ApplicationXML - **HTTP Status Code:** `200`&lt;br&gt;
 * Webinar details returned.&lt;br&gt;
 * This is only available for paid account:{accountId}.
 */
public class ReportWebinarDetails200ApplicationXML {
    /**
     * Custom keys and values assigned to the meeting.
     */
    
    public ReportWebinarDetails200ApplicationXMLCustomKeys[] customKeys;
    public ReportWebinarDetails200ApplicationXML withCustomKeys(ReportWebinarDetails200ApplicationXMLCustomKeys[] customKeys) {
        this.customKeys = customKeys;
        return this;
    }
    
    /**
     * Department of the host.
     */
    
    public String dept;
    public ReportWebinarDetails200ApplicationXML withDept(String dept) {
        this.dept = dept;
        return this;
    }
    
    /**
     * Meeting duration.
     */
    
    public Long duration;
    public ReportWebinarDetails200ApplicationXML withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Meeting end time.
     */
    
    public OffsetDateTime endTime;
    public ReportWebinarDetails200ApplicationXML withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    
    public Long id;
    public ReportWebinarDetails200ApplicationXML withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of meeting participants.
     */
    
    public Long participantsCount;
    public ReportWebinarDetails200ApplicationXML withParticipantsCount(Long participantsCount) {
        this.participantsCount = participantsCount;
        return this;
    }
    
    /**
     * Meeting start time.
     */
    
    public OffsetDateTime startTime;
    public ReportWebinarDetails200ApplicationXML withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    
    public String topic;
    public ReportWebinarDetails200ApplicationXML withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
     * 
     * **total_minutes** = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
     */
    
    public Long totalMinutes;
    public ReportWebinarDetails200ApplicationXML withTotalMinutes(Long totalMinutes) {
        this.totalMinutes = totalMinutes;
        return this;
    }
    
    /**
     * Tracking fields.
     */
    
    public ReportWebinarDetails200ApplicationXMLTrackingFields[] trackingFields;
    public ReportWebinarDetails200ApplicationXML withTrackingFields(ReportWebinarDetails200ApplicationXMLTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * Meeting type.
     */
    
    public Long type;
    public ReportWebinarDetails200ApplicationXML withType(Long type) {
        this.type = type;
        return this;
    }
    
    /**
     * User email.
     */
    
    public String userEmail;
    public ReportWebinarDetails200ApplicationXML withUserEmail(String userEmail) {
        this.userEmail = userEmail;
        return this;
    }
    
    /**
     * User display name.
     */
    
    public String userName;
    public ReportWebinarDetails200ApplicationXML withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). Double encode the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    
    public String uuid;
    public ReportWebinarDetails200ApplicationXML withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
