<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class StromQuittung 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Finishs a collection of data and finalizes receipt. Use this method after collecting all data via quittung/prepare
     * 
     * Uses collected fields or provided fields to create a final receipt (Strom-Quittung).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuittungComitRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuittungComitResponse
     */
	public function quittungComit(
        \OpenAPI\OpenAPI\Models\Operations\QuittungComitRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuittungComitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quittung/commit');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuittungComitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->quittungComit200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a receipt for an energy delivery (only valid in Germany).
     * 
     * Creates a full featured receipt (Quittung) for an energy delivery as it appears on a charging session or similar events. Allows to embed receipt generation directly into external services.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuittungCreateRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuittungCreateResponse
     */
	public function quittungCreate(
        \OpenAPI\OpenAPI\Models\Operations\QuittungCreateRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuittungCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quittung/create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuittungCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->quittungCreate200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Allows to collect data with several requests (or a single) for a receipt.
     * 
     * During the first call an account parameter will be returned within the result object. Any other parameter will be set inside the preperation. If account is put into body/request in following requests, the existing collection will be extended/updated with the provided body parameters/values.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuittungPrepareRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuittungPrepareResponse
     */
	public function quittungPrepare(
        \OpenAPI\OpenAPI\Models\Operations\QuittungPrepareRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuittungPrepareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quittung/prepare');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuittungPrepareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->quittungPrepare200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Data for a given receipt (Strom-Quittung).
     * 
     * Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuittungTSERequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuittungTSEResponse
     */
	public function quittungTSE(
        \OpenAPI\OpenAPI\Models\Operations\QuittungTSERequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuittungTSEResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quittung/tse');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuittungTSERequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuittungTSEResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quittungTSE200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\QuittungTSE200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) raw data  only for a given receipt (Strom-Quittung).
     * 
     * Allows to retrieve input string for a signing process.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuittungTSEDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuittungTSEDataResponse
     */
	public function quittungTSEData(
        \OpenAPI\OpenAPI\Models\Operations\QuittungTSEDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuittungTSEDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quittung/tsedata');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuittungTSEDataRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuittungTSEDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Signature only for a given receipt (Strom-Quittung).
     * 
     * Allows to retrieve digital signature for a given receipt.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuittungTSEsignatureRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuittungTSEsignatureResponse
     */
	public function quittungTSEsignature(
        \OpenAPI\OpenAPI\Models\Operations\QuittungTSEsignatureRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuittungTSEsignatureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quittung/tsesignature');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuittungTSEsignatureRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuittungTSEsignatureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve Zugferd XML for a given receipt (Strom-Quittung).
     * 
     * Allows to retrieve XML of the zugferd invoice.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuittungZugferdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuittungZugferdResponse
     */
	public function quittungZugferd(
        \OpenAPI\OpenAPI\Models\Operations\QuittungZugferdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuittungZugferdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quittung/zugferd');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuittungZugferdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuittungZugferdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}