// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETListStackResourcesActionEnum
type GETListStackResourcesActionEnum string

const (
	GETListStackResourcesActionEnumListStackResources GETListStackResourcesActionEnum = "ListStackResources"
)

func (e *GETListStackResourcesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ListStackResources":
		*e = GETListStackResourcesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListStackResourcesActionEnum: %s", s)
	}
}

// GETListStackResourcesVersionEnum
type GETListStackResourcesVersionEnum string

const (
	GETListStackResourcesVersionEnumTwoThousandAndTen0515 GETListStackResourcesVersionEnum = "2010-05-15"
)

func (e *GETListStackResourcesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-15":
		*e = GETListStackResourcesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListStackResourcesVersionEnum: %s", s)
	}
}

type GETListStackResourcesQueryParams struct {
	Action GETListStackResourcesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// A string that identifies the next page of stack resources that you want to retrieve.
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// <p>The name or the unique stack ID that is associated with the stack, which aren't always interchangeable:</p> <ul> <li> <p>Running stacks: You can specify either the stack's name or its unique stack ID.</p> </li> <li> <p>Deleted stacks: You must specify the unique stack ID.</p> </li> </ul> <p>Default: There is no default value.</p>
	StackName string                           `queryParam:"style=form,explode=true,name=StackName"`
	Version   GETListStackResourcesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETListStackResourcesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETListStackResourcesRequest struct {
	QueryParams GETListStackResourcesQueryParams
	Headers     GETListStackResourcesHeaders
}

type GETListStackResourcesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
