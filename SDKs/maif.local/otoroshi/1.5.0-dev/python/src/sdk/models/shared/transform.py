"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import transformsettings as shared_transformsettings
from ..shared import verificationsettings as shared_verificationsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Transform:
    r"""Strategy where signature and field values are verified, trasnformed and then token si re-signed"""
    
    algo_settings: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algoSettings') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""String with value Transform"""  
    verification_settings: shared_verificationsettings.VerificationSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verificationSettings') }})
    r"""Settings to verify the value of JWT token fields"""  
    transform_settings: Optional[shared_transformsettings.TransformSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformSettings'), 'exclude': lambda f: f is None }})
    r"""Settings to transform a JWT token and its location"""  
    