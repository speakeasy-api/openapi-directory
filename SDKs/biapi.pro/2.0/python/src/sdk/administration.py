"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Administration:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_clients_id_client_(self, request: operations.DeleteClientsIDClientRequest) -> operations.DeleteClientsIDClientResponse:
        r"""Delete a client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteClientsIDClientRequest, base_url, '/clients/{id_client}', request)
        
        query_params = utils.get_query_params(operations.DeleteClientsIDClientRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteClientsIDClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Client])
                res.client = out

        return res

    def delete_clients_id_client_logo(self, request: operations.DeleteClientsIDClientLogoRequest) -> operations.DeleteClientsIDClientLogoResponse:
        r"""Delete the client logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteClientsIDClientLogoRequest, base_url, '/clients/{id_client}/logo', request)
        
        query_params = utils.get_query_params(operations.DeleteClientsIDClientLogoRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteClientsIDClientLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def delete_webhooks(self, request: operations.DeleteWebhooksRequest) -> operations.DeleteWebhooksResponse:
        r"""Deletes all webhooks
        Updates the deleted field with the date of the deletion<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks'
        
        query_params = utils.get_query_params(operations.DeleteWebhooksRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def delete_webhooks_auth(self, request: operations.DeleteWebhooksAuthRequest) -> operations.DeleteWebhooksAuthResponse:
        r"""Deletes all webhook authentication types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks/auth'
        
        query_params = utils.get_query_params(operations.DeleteWebhooksAuthRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhooksAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthProvider])
                res.auth_provider = out

        return res

    def delete_webhooks_auth_id_auth_(self, request: operations.DeleteWebhooksAuthIDAuthRequest) -> operations.DeleteWebhooksAuthIDAuthResponse:
        r"""Deletes the webhook authentication type
        Updates the deleted field with the date of the deletion<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWebhooksAuthIDAuthRequest, base_url, '/webhooks/auth/{id_auth}', request)
        
        query_params = utils.get_query_params(operations.DeleteWebhooksAuthIDAuthRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhooksAuthIDAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthProvider])
                res.auth_provider = out

        return res

    def delete_webhooks_id_webhook_(self, request: operations.DeleteWebhooksIDWebhookRequest) -> operations.DeleteWebhooksIDWebhookResponse:
        r"""Deletes a webhook
        Updates the deleted field with the date of the deletion<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWebhooksIDWebhookRequest, base_url, '/webhooks/{id_webhook}', request)
        
        query_params = utils.get_query_params(operations.DeleteWebhooksIDWebhookRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhooksIDWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def delete_webhooks_id_webhook_add_to_data(self, request: operations.DeleteWebhooksIDWebhookAddToDataRequest) -> operations.DeleteWebhooksIDWebhookAddToDataResponse:
        r"""delete all entries"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWebhooksIDWebhookAddToDataRequest, base_url, '/webhooks/{id_webhook}/add_to_data', request)
        
        query_params = utils.get_query_params(operations.DeleteWebhooksIDWebhookAddToDataRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhooksIDWebhookAddToDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def delete_webhooks_id_webhook_add_to_data_key_(self, request: operations.DeleteWebhooksIDWebhookAddToDataKeyRequest) -> operations.DeleteWebhooksIDWebhookAddToDataKeyResponse:
        r"""delete the requested entry"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWebhooksIDWebhookAddToDataKeyRequest, base_url, '/webhooks/{id_webhook}/add_to_data/{key}', request)
        
        query_params = utils.get_query_params(operations.DeleteWebhooksIDWebhookAddToDataKeyRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhooksIDWebhookAddToDataKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def get_clients(self, request: operations.GetClientsRequest) -> operations.GetClientsResponse:
        r"""List clients"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/clients'
        
        query_params = utils.get_query_params(operations.GetClientsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClientsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetClients200ApplicationJSON])
                res.get_clients_200_application_json_object = out

        return res

    def get_clients_id_client_(self, request: operations.GetClientsIDClientRequest) -> operations.GetClientsIDClientResponse:
        r"""Get information about a client
        If you use the manage_token or a configuration token, you will get also the client secret.<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClientsIDClientRequest, base_url, '/clients/{id_client}', request)
        
        query_params = utils.get_query_params(operations.GetClientsIDClientRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClientsIDClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Client])
                res.client = out

        return res

    def get_config(self, request: operations.GetConfigRequest) -> operations.GetConfigResponse:
        r"""Get configuration of the API.
        <br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/config'
        
        query_params = utils.get_query_params(operations.GetConfigRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_config_logs(self, request: operations.GetConfigLogsRequest) -> operations.GetConfigLogsResponse:
        r"""Get configuration change history of the API.
        <br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/config/logs'
        
        query_params = utils.get_query_params(operations.GetConfigLogsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConfigLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetConfigLogs200ApplicationJSON])
                res.get_config_logs_200_application_json_object = out

        return res

    def get_monitoring(self, request: operations.GetMonitoringRequest) -> operations.GetMonitoringResponse:
        r"""get performances stats on this instance"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/monitoring'
        
        query_params = utils.get_query_params(operations.GetMonitoringRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMonitoringResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_publickey(self) -> operations.GetPublickeyResponse:
        r"""Get public encryption key of the API."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/publickey'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPublickeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_webhooks(self, request: operations.GetWebhooksRequest) -> operations.GetWebhooksResponse:
        r"""Get webhooks"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks'
        
        query_params = utils.get_query_params(operations.GetWebhooksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWebhooks200ApplicationJSON])
                res.get_webhooks_200_application_json_object = out

        return res

    def get_webhooks_auth(self, request: operations.GetWebhooksAuthRequest) -> operations.GetWebhooksAuthResponse:
        r"""Get webhooks authentication types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks/auth'
        
        query_params = utils.get_query_params(operations.GetWebhooksAuthRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebhooksAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWebhooksAuth200ApplicationJSON])
                res.get_webhooks_auth_200_application_json_object = out

        return res

    def get_webhooks_id_webhook_add_to_data(self, request: operations.GetWebhooksIDWebhookAddToDataRequest) -> operations.GetWebhooksIDWebhookAddToDataResponse:
        r"""retrieve the list of the value to add in webhooks when sending the requested webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWebhooksIDWebhookAddToDataRequest, base_url, '/webhooks/{id_webhook}/add_to_data', request)
        
        query_params = utils.get_query_params(operations.GetWebhooksIDWebhookAddToDataRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebhooksIDWebhookAddToDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWebhooksIDWebhookAddToData200ApplicationJSON])
                res.get_webhooks_id_webhook_add_to_data_200_application_json_object = out

        return res

    def get_webhooks_id_webhook_add_to_data_key_(self, request: operations.GetWebhooksIDWebhookAddToDataKeyRequest) -> operations.GetWebhooksIDWebhookAddToDataKeyResponse:
        r"""retrieve the value to add in the requested webhook for the requested name"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWebhooksIDWebhookAddToDataKeyRequest, base_url, '/webhooks/{id_webhook}/add_to_data/{key}', request)
        
        query_params = utils.get_query_params(operations.GetWebhooksIDWebhookAddToDataKeyRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebhooksIDWebhookAddToDataKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def get_webhooks_id_webhook_logs(self, request: operations.GetWebhooksIDWebhookLogsRequest) -> operations.GetWebhooksIDWebhookLogsResponse:
        r"""Get webhooks logs.
        Get logs of the webhooks.<br><br>By default, it selects logs for the last month. You can use \"min_date\" and \"max_date\" to change boundary dates.<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWebhooksIDWebhookLogsRequest, base_url, '/webhooks/{id_webhook}/logs', request)
        
        query_params = utils.get_query_params(operations.GetWebhooksIDWebhookLogsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebhooksIDWebhookLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWebhooksIDWebhookLogs200ApplicationJSON])
                res.get_webhooks_id_webhook_logs_200_application_json_object = out

        return res

    def post_clients(self, request: operations.PostClientsRequest) -> operations.PostClientsResponse:
        r"""Create a client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/clients'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostClientsRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostClientsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Client])
                res.client = out

        return res

    def post_clients_id_client_logo(self, request: operations.PostClientsIDClientLogoRequest) -> operations.PostClientsIDClientLogoResponse:
        r"""Update the client logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostClientsIDClientLogoRequest, base_url, '/clients/{id_client}/logo', request)
        
        query_params = utils.get_query_params(operations.PostClientsIDClientLogoRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostClientsIDClientLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.File])
                res.file = out

        return res

    def post_config(self) -> operations.PostConfigResponse:
        r"""Insert/update configuration key(s)/value(s) on the API."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/config'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_test_sync(self) -> operations.PostTestSyncResponse:
        r"""Test synchronization on a random connection.
        It can be used to test receiving data on your webhooks.<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/test/sync'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTestSyncResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_test_webhooks(self) -> operations.PostTestWebhooksResponse:
        r"""Test synchronization on a random connection.
        It can be used to test receiving data on your webhooks.<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/test/webhooks'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTestWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_webhooks(self, request: operations.PostWebhooksRequest) -> operations.PostWebhooksResponse:
        r"""Adds a new webhook"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostWebhooksRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def post_webhooks_auth(self, request: operations.PostWebhooksAuthRequest) -> operations.PostWebhooksAuthResponse:
        r"""Adds a new webhook authentication type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks/auth'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostWebhooksAuthRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWebhooksAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthProvider])
                res.auth_provider = out

        return res

    def post_webhooks_auth_id_auth_(self, request: operations.PostWebhooksAuthIDAuthRequest) -> operations.PostWebhooksAuthIDAuthResponse:
        r"""Updates the webhook authentication type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWebhooksAuthIDAuthRequest, base_url, '/webhooks/auth/{id_auth}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostWebhooksAuthIDAuthRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWebhooksAuthIDAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthProvider])
                res.auth_provider = out

        return res

    def post_webhooks_id_webhook_(self, request: operations.PostWebhooksIDWebhookRequest) -> operations.PostWebhooksIDWebhookResponse:
        r"""Updates a webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWebhooksIDWebhookRequest, base_url, '/webhooks/{id_webhook}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostWebhooksIDWebhookRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWebhooksIDWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def post_webhooks_id_webhook_add_to_data(self, request: operations.PostWebhooksIDWebhookAddToDataRequest) -> operations.PostWebhooksIDWebhookAddToDataResponse:
        r"""Setup a field to store in user config when calling the endpoint
        For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWebhooksIDWebhookAddToDataRequest, base_url, '/webhooks/{id_webhook}/add_to_data', request)
        
        query_params = utils.get_query_params(operations.PostWebhooksIDWebhookAddToDataRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWebhooksIDWebhookAddToDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def post_webhooks_id_webhook_add_to_data_key_(self, request: operations.PostWebhooksIDWebhookAddToDataKeyRequest) -> operations.PostWebhooksIDWebhookAddToDataKeyResponse:
        r"""upate the requested field to store in user config when calling the endpoint
        For each parameter, a value will be added in the webhook data. Use the key to set the name of the field. The values that can be added are to be found in the user configuration.<br><br>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWebhooksIDWebhookAddToDataKeyRequest, base_url, '/webhooks/{id_webhook}/add_to_data/{key}', request)
        
        query_params = utils.get_query_params(operations.PostWebhooksIDWebhookAddToDataKeyRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWebhooksIDWebhookAddToDataKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    def put_clients_id_client_(self, request: operations.PutClientsIDClientRequest) -> operations.PutClientsIDClientResponse:
        r"""Update a client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutClientsIDClientRequest, base_url, '/clients/{id_client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PutClientsIDClientRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutClientsIDClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Client])
                res.client = out

        return res

    def put_webhooks_auth_id_auth_(self, request: operations.PutWebhooksAuthIDAuthRequest) -> operations.PutWebhooksAuthIDAuthResponse:
        r"""Updates the webhook authentication type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWebhooksAuthIDAuthRequest, base_url, '/webhooks/auth/{id_auth}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutWebhooksAuthIDAuthRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWebhooksAuthIDAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthProvider])
                res.auth_provider = out

        return res

    def put_webhooks_id_webhook_(self, request: operations.PutWebhooksIDWebhookRequest) -> operations.PutWebhooksIDWebhookResponse:
        r"""Updates a webhook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWebhooksIDWebhookRequest, base_url, '/webhooks/{id_webhook}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PutWebhooksIDWebhookRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWebhooksIDWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out

        return res

    