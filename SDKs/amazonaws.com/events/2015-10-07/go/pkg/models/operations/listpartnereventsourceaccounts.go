// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListPartnerEventSourceAccountsXAmzTargetEnum
type ListPartnerEventSourceAccountsXAmzTargetEnum string

const (
	ListPartnerEventSourceAccountsXAmzTargetEnumAwsEventsListPartnerEventSourceAccounts ListPartnerEventSourceAccountsXAmzTargetEnum = "AWSEvents.ListPartnerEventSourceAccounts"
)

func (e *ListPartnerEventSourceAccountsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSEvents.ListPartnerEventSourceAccounts":
		*e = ListPartnerEventSourceAccountsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPartnerEventSourceAccountsXAmzTargetEnum: %s", s)
	}
}

type ListPartnerEventSourceAccountsHeaders struct {
	XAmzAlgorithm     *string                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListPartnerEventSourceAccountsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListPartnerEventSourceAccountsRequest struct {
	Headers ListPartnerEventSourceAccountsHeaders
	Request shared.ListPartnerEventSourceAccountsRequest `request:"mediaType=application/json"`
}

type ListPartnerEventSourceAccountsResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// Success
	ListPartnerEventSourceAccountsResponse *shared.ListPartnerEventSourceAccountsResponse
	// OperationDisabledException
	OperationDisabledException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
