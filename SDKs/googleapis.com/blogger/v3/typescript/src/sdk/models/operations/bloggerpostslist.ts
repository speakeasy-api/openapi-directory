/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class BloggerPostsListSecurityOption1 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class BloggerPostsListSecurityOption2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class BloggerPostsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, option=true" })
  option1?: BloggerPostsListSecurityOption1;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option2?: BloggerPostsListSecurityOption2;
}

export enum BloggerPostsListOrderByEnum {
  OrderByUnspecified = "ORDER_BY_UNSPECIFIED",
  Published = "PUBLISHED",
  Updated = "UPDATED",
}

/**
 * Sort direction applied to post list.
 */
export enum BloggerPostsListSortOptionEnum {
  SortOptionUnspecified = "SORT_OPTION_UNSPECIFIED",
  Descending = "DESCENDING",
  Ascending = "ASCENDING",
}

export enum BloggerPostsListStatusEnum {
  Live = "LIVE",
  Draft = "DRAFT",
  Scheduled = "SCHEDULED",
  SoftTrashed = "SOFT_TRASHED",
}

export enum BloggerPostsListViewEnum {
  ViewTypeUnspecified = "VIEW_TYPE_UNSPECIFIED",
  Reader = "READER",
  Author = "AUTHOR",
  Admin = "ADMIN",
}

export class BloggerPostsListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=blogId",
  })
  blogId: string;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endDate",
  })
  endDate?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fetchBodies",
  })
  fetchBodies?: boolean;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fetchImages",
  })
  fetchImages?: boolean;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=labels",
  })
  labels?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: BloggerPostsListOrderByEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Sort direction applied to post list.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sortOption",
  })
  sortOption?: BloggerPostsListSortOptionEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startDate",
  })
  startDate?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: BloggerPostsListStatusEnum[];

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=view" })
  view?: BloggerPostsListViewEnum;
}

export class BloggerPostsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  postList?: shared.PostList;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
