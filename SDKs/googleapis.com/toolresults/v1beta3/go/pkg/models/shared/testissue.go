// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TestIssueCategoryEnum - Category of issue. Required.
type TestIssueCategoryEnum string

const (
	TestIssueCategoryEnumUnspecifiedCategory TestIssueCategoryEnum = "unspecifiedCategory"
	TestIssueCategoryEnumCommon              TestIssueCategoryEnum = "common"
	TestIssueCategoryEnumRobo                TestIssueCategoryEnum = "robo"
)

func (e *TestIssueCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unspecifiedCategory":
		fallthrough
	case "common":
		fallthrough
	case "robo":
		*e = TestIssueCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TestIssueCategoryEnum: %s", s)
	}
}

// TestIssueSeverityEnum - Severity of issue. Required.
type TestIssueSeverityEnum string

const (
	TestIssueSeverityEnumUnspecifiedSeverity TestIssueSeverityEnum = "unspecifiedSeverity"
	TestIssueSeverityEnumInfo                TestIssueSeverityEnum = "info"
	TestIssueSeverityEnumSuggestion          TestIssueSeverityEnum = "suggestion"
	TestIssueSeverityEnumWarning             TestIssueSeverityEnum = "warning"
	TestIssueSeverityEnumSevere              TestIssueSeverityEnum = "severe"
)

func (e *TestIssueSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unspecifiedSeverity":
		fallthrough
	case "info":
		fallthrough
	case "suggestion":
		fallthrough
	case "warning":
		fallthrough
	case "severe":
		*e = TestIssueSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TestIssueSeverityEnum: %s", s)
	}
}

// TestIssueTypeEnum - Type of issue. Required.
type TestIssueTypeEnum string

const (
	TestIssueTypeEnumUnspecifiedType                     TestIssueTypeEnum = "unspecifiedType"
	TestIssueTypeEnumFatalException                      TestIssueTypeEnum = "fatalException"
	TestIssueTypeEnumNativeCrash                         TestIssueTypeEnum = "nativeCrash"
	TestIssueTypeEnumAnr                                 TestIssueTypeEnum = "anr"
	TestIssueTypeEnumUnusedRoboDirective                 TestIssueTypeEnum = "unusedRoboDirective"
	TestIssueTypeEnumCompatibleWithOrchestrator          TestIssueTypeEnum = "compatibleWithOrchestrator"
	TestIssueTypeEnumLauncherActivityNotFound            TestIssueTypeEnum = "launcherActivityNotFound"
	TestIssueTypeEnumStartActivityNotFound               TestIssueTypeEnum = "startActivityNotFound"
	TestIssueTypeEnumIncompleteRoboScriptExecution       TestIssueTypeEnum = "incompleteRoboScriptExecution"
	TestIssueTypeEnumCompleteRoboScriptExecution         TestIssueTypeEnum = "completeRoboScriptExecution"
	TestIssueTypeEnumFailedToInstall                     TestIssueTypeEnum = "failedToInstall"
	TestIssueTypeEnumAvailableDeepLinks                  TestIssueTypeEnum = "availableDeepLinks"
	TestIssueTypeEnumNonSDKAPIUsageViolation             TestIssueTypeEnum = "nonSdkApiUsageViolation"
	TestIssueTypeEnumNonSDKAPIUsageReport                TestIssueTypeEnum = "nonSdkApiUsageReport"
	TestIssueTypeEnumEncounteredNonAndroidUIWidgetScreen TestIssueTypeEnum = "encounteredNonAndroidUiWidgetScreen"
	TestIssueTypeEnumEncounteredLoginScreen              TestIssueTypeEnum = "encounteredLoginScreen"
	TestIssueTypeEnumPerformedGoogleLogin                TestIssueTypeEnum = "performedGoogleLogin"
	TestIssueTypeEnumIosException                        TestIssueTypeEnum = "iosException"
	TestIssueTypeEnumIosCrash                            TestIssueTypeEnum = "iosCrash"
	TestIssueTypeEnumPerformedMonkeyActions              TestIssueTypeEnum = "performedMonkeyActions"
	TestIssueTypeEnumUsedRoboDirective                   TestIssueTypeEnum = "usedRoboDirective"
	TestIssueTypeEnumUsedRoboIgnoreDirective             TestIssueTypeEnum = "usedRoboIgnoreDirective"
	TestIssueTypeEnumInsufficientCoverage                TestIssueTypeEnum = "insufficientCoverage"
	TestIssueTypeEnumInAppPurchases                      TestIssueTypeEnum = "inAppPurchases"
	TestIssueTypeEnumCrashDialogError                    TestIssueTypeEnum = "crashDialogError"
	TestIssueTypeEnumUIElementsTooDeep                   TestIssueTypeEnum = "uiElementsTooDeep"
	TestIssueTypeEnumBlankScreen                         TestIssueTypeEnum = "blankScreen"
	TestIssueTypeEnumOverlappingUIElements               TestIssueTypeEnum = "overlappingUiElements"
	TestIssueTypeEnumUnityException                      TestIssueTypeEnum = "unityException"
	TestIssueTypeEnumDeviceOutOfMemory                   TestIssueTypeEnum = "deviceOutOfMemory"
	TestIssueTypeEnumLogcatCollectionError               TestIssueTypeEnum = "logcatCollectionError"
	TestIssueTypeEnumDetectedAppSplashScreen             TestIssueTypeEnum = "detectedAppSplashScreen"
)

func (e *TestIssueTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unspecifiedType":
		fallthrough
	case "fatalException":
		fallthrough
	case "nativeCrash":
		fallthrough
	case "anr":
		fallthrough
	case "unusedRoboDirective":
		fallthrough
	case "compatibleWithOrchestrator":
		fallthrough
	case "launcherActivityNotFound":
		fallthrough
	case "startActivityNotFound":
		fallthrough
	case "incompleteRoboScriptExecution":
		fallthrough
	case "completeRoboScriptExecution":
		fallthrough
	case "failedToInstall":
		fallthrough
	case "availableDeepLinks":
		fallthrough
	case "nonSdkApiUsageViolation":
		fallthrough
	case "nonSdkApiUsageReport":
		fallthrough
	case "encounteredNonAndroidUiWidgetScreen":
		fallthrough
	case "encounteredLoginScreen":
		fallthrough
	case "performedGoogleLogin":
		fallthrough
	case "iosException":
		fallthrough
	case "iosCrash":
		fallthrough
	case "performedMonkeyActions":
		fallthrough
	case "usedRoboDirective":
		fallthrough
	case "usedRoboIgnoreDirective":
		fallthrough
	case "insufficientCoverage":
		fallthrough
	case "inAppPurchases":
		fallthrough
	case "crashDialogError":
		fallthrough
	case "uiElementsTooDeep":
		fallthrough
	case "blankScreen":
		fallthrough
	case "overlappingUiElements":
		fallthrough
	case "unityException":
		fallthrough
	case "deviceOutOfMemory":
		fallthrough
	case "logcatCollectionError":
		fallthrough
	case "detectedAppSplashScreen":
		*e = TestIssueTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TestIssueTypeEnum: %s", s)
	}
}

// TestIssue - An issue detected occurring during a test execution.
type TestIssue struct {
	// Category of issue. Required.
	Category *TestIssueCategoryEnum `json:"category,omitempty"`
	// A brief human-readable message describing the issue. Required.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Severity of issue. Required.
	Severity *TestIssueSeverityEnum `json:"severity,omitempty"`
	// A stacktrace.
	StackTrace *StackTrace `json:"stackTrace,omitempty"`
	// Type of issue. Required.
	Type *TestIssueTypeEnum `json:"type,omitempty"`
	//  `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z". # JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { "@type": "type.googleapis.com/google.profile.Person", "firstName": , "lastName": } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message google.protobuf.Duration): { "@type": "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
	Warning *Any `json:"warning,omitempty"`
}
