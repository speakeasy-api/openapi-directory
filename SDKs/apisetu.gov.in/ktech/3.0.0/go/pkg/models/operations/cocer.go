// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CocerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CocerRequestBodyCertificateParameters struct {
	// cert_type
	CertType string `json:"cert_type"`
	// company_name
	CompanyName string `json:"company_name"`
	// reg_no
	RegNo string `json:"reg_no"`
	// sector
	Sector string `json:"sector"`
}

// CocerRequestBodyFormatEnum - The format of the certificate in response.
type CocerRequestBodyFormatEnum string

const (
	CocerRequestBodyFormatEnumPdf CocerRequestBodyFormatEnum = "pdf"
)

func (e CocerRequestBodyFormatEnum) ToPointer() *CocerRequestBodyFormatEnum {
	return &e
}

func (e *CocerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = CocerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CocerRequestBodyFormatEnum: %v", v)
	}
}

// CocerRequestBody - Request format
type CocerRequestBody struct {
	CertificateParameters *CocerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CocerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cocer504ApplicationJSONErrorEnum string

const (
	Cocer504ApplicationJSONErrorEnumGatewayTimeout Cocer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Cocer504ApplicationJSONErrorEnum) ToPointer() *Cocer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Cocer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Cocer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Cocer504ApplicationJSONErrorDescriptionEnum string

const (
	Cocer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cocer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Cocer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Cocer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cocer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Cocer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cocer504ApplicationJSON - Gateway timeout
type Cocer504ApplicationJSON struct {
	Error            *Cocer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cocer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cocer503ApplicationJSONErrorEnum string

const (
	Cocer503ApplicationJSONErrorEnumServiceUnavailable Cocer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Cocer503ApplicationJSONErrorEnum) ToPointer() *Cocer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Cocer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Cocer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Cocer503ApplicationJSONErrorDescriptionEnum string

const (
	Cocer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cocer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Cocer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Cocer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cocer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Cocer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cocer503ApplicationJSON - Service unavailable
type Cocer503ApplicationJSON struct {
	Error            *Cocer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cocer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cocer502ApplicationJSONErrorEnum string

const (
	Cocer502ApplicationJSONErrorEnumBadGatewy Cocer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Cocer502ApplicationJSONErrorEnum) ToPointer() *Cocer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Cocer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Cocer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Cocer502ApplicationJSONErrorDescriptionEnum string

const (
	Cocer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cocer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Cocer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Cocer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cocer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Cocer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cocer502ApplicationJSON - Bad gateway
type Cocer502ApplicationJSON struct {
	Error            *Cocer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cocer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cocer500ApplicationJSONErrorEnum string

const (
	Cocer500ApplicationJSONErrorEnumInternalServerError Cocer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Cocer500ApplicationJSONErrorEnum) ToPointer() *Cocer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Cocer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Cocer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Cocer500ApplicationJSONErrorDescriptionEnum string

const (
	Cocer500ApplicationJSONErrorDescriptionEnumInternalServerError Cocer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Cocer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Cocer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cocer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Cocer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cocer500ApplicationJSON - Internal server error
type Cocer500ApplicationJSON struct {
	Error            *Cocer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cocer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cocer404ApplicationJSONErrorEnum string

const (
	Cocer404ApplicationJSONErrorEnumRecordNotFound Cocer404ApplicationJSONErrorEnum = "record_not_found"
	Cocer404ApplicationJSONErrorEnumURLNotFound    Cocer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Cocer404ApplicationJSONErrorEnum) ToPointer() *Cocer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Cocer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cocer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Cocer404ApplicationJSONErrorDescriptionEnum string

const (
	Cocer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cocer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cocer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cocer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Cocer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Cocer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cocer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cocer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cocer404ApplicationJSON - No record found
type Cocer404ApplicationJSON struct {
	Error            *Cocer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cocer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cocer401ApplicationJSONErrorEnum string

const (
	Cocer401ApplicationJSONErrorEnumInvalidAuthentication Cocer401ApplicationJSONErrorEnum = "invalid_authentication"
	Cocer401ApplicationJSONErrorEnumInvalidAuthorization  Cocer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Cocer401ApplicationJSONErrorEnum) ToPointer() *Cocer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Cocer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cocer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Cocer401ApplicationJSONErrorDescriptionEnum string

const (
	Cocer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cocer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cocer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cocer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Cocer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Cocer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cocer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cocer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cocer401ApplicationJSON - Unauthorized access
type Cocer401ApplicationJSON struct {
	Error            *Cocer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cocer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cocer400ApplicationJSONErrorEnum string

const (
	Cocer400ApplicationJSONErrorEnumMissingParameter Cocer400ApplicationJSONErrorEnum = "missing_parameter"
	Cocer400ApplicationJSONErrorEnumInvalidParameter Cocer400ApplicationJSONErrorEnum = "invalid_parameter"
	Cocer400ApplicationJSONErrorEnumInvalidFormat    Cocer400ApplicationJSONErrorEnum = "invalid_format"
	Cocer400ApplicationJSONErrorEnumInvalidTxnid     Cocer400ApplicationJSONErrorEnum = "invalid_txnid"
	Cocer400ApplicationJSONErrorEnumInvalidConsentid Cocer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Cocer400ApplicationJSONErrorEnum) ToPointer() *Cocer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Cocer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cocer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Cocer400ApplicationJSONErrorDescriptionEnum string

const (
	Cocer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cocer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cocer400ApplicationJSONErrorDescriptionEnumBadRequest                              Cocer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cocer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cocer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cocer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cocer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cocer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cocer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Cocer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Cocer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cocer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cocer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cocer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cocer400ApplicationJSON - Bad request
type Cocer400ApplicationJSON struct {
	Error            *Cocer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cocer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CocerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cocer400ApplicationJSONObject *Cocer400ApplicationJSON
	// Unauthorized access
	Cocer401ApplicationJSONObject *Cocer401ApplicationJSON
	// No record found
	Cocer404ApplicationJSONObject *Cocer404ApplicationJSON
	// Internal server error
	Cocer500ApplicationJSONObject *Cocer500ApplicationJSON
	// Bad gateway
	Cocer502ApplicationJSONObject *Cocer502ApplicationJSON
	// Service unavailable
	Cocer503ApplicationJSONObject *Cocer503ApplicationJSON
	// Gateway timeout
	Cocer504ApplicationJSONObject *Cocer504ApplicationJSON
}
