// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetClientProfileByEmailQueryParams struct {
	// Client's email address to be searched.
	Email string `queryParam:"style=form,explode=true,name=email"`
}

type GetClientProfileByEmailHeaders struct {
	// HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent.
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
}

type GetClientProfileByEmailRequest struct {
	QueryParams GetClientProfileByEmailQueryParams
	Headers     GetClientProfileByEmailHeaders
}

type GetClientProfileByEmail200ApplicationJSONAvailableAddresses struct {
	// Address ID.
	AddressID *string `json:"addressId,omitempty"`
	// Address type.
	AddressType *string `json:"addressType,omitempty"`
	// City of the address.
	City *string `json:"city,omitempty"`
	// Complement to the address.
	Complement *string `json:"complement,omitempty"`
	// Country of the address. ISO three-letter code.
	Country *string `json:"country,omitempty"`
	// Array containing two floats with geocoordinates, first longitude, then latitude.
	GeoCoordinates []float64 `json:"geoCoordinates,omitempty"`
	// Indicates whether address is disposable.
	IsDisposable *bool `json:"isDisposable,omitempty"`
	// Neighborhood of the address.
	Neighborhood *string `json:"neighborhood,omitempty"`
	// Number of the address.
	Number *string `json:"number,omitempty"`
	// Name of the receiver.
	ReceiverName *string `json:"receiverName,omitempty"`
	// Reference that may help in the location of the address.
	Reference *string `json:"reference,omitempty"`
	// State of the address.
	State *string `json:"state,omitempty"`
	// Street of the address.
	Street *string `json:"street,omitempty"`
}

// GetClientProfileByEmail200ApplicationJSONUserProfile - Customer profile information.
type GetClientProfileByEmail200ApplicationJSONUserProfile struct {
	// Document. Used for corporate clients.
	CorporateDocument *string `json:"corporateDocument,omitempty"`
	// Name of the company. Used for corporate clients.
	CorporateName *string `json:"corporateName,omitempty"`
	// Telephone number. Used for corporate clients.
	CorporatePhone *string `json:"corporatePhone,omitempty"`
	// Customer class.
	CustomerClass *string `json:"customerClass,omitempty"`
	// Document.
	Document *string `json:"document,omitempty"`
	// Document type.
	DocumentType *string `json:"documentType,omitempty"`
	// Email address.
	Email *string `json:"email,omitempty"`
	// First name.
	FirstName *string `json:"firstName,omitempty"`
	// Indicates whether client is corporate.
	IsCorporate *bool `json:"isCorporate,omitempty"`
	// Last name.
	LastName *string `json:"lastName,omitempty"`
	// Telephone number.
	Phone *string `json:"phone,omitempty"`
	// Profile complete when loading.
	ProfileCompleteOnLoading *string `json:"profileCompleteOnLoading,omitempty"`
	// Profile error when loading.
	ProfileErrorOnLoading *string `json:"profileErrorOnLoading,omitempty"`
	// State inscription. Used for corporate clients.
	StateInscription *string `json:"stateInscription,omitempty"`
	// Trade name. Used for corporate clients.
	TradeName *string `json:"tradeName,omitempty"`
}

// GetClientProfileByEmail200ApplicationJSON - OK
type GetClientProfileByEmail200ApplicationJSON struct {
	// Available accounts.
	AvailableAccounts []string `json:"availableAccounts,omitempty"`
	// Information on each available address.
	AvailableAddresses []GetClientProfileByEmail200ApplicationJSONAvailableAddresses `json:"availableAddresses,omitempty"`
	// Indicates whether customer profile is complete.
	IsComplete *bool `json:"isComplete,omitempty"`
	// Profile provider.
	ProfileProvider *string `json:"profileProvider,omitempty"`
	// Customer profile information.
	UserProfile *GetClientProfileByEmail200ApplicationJSONUserProfile `json:"userProfile,omitempty"`
	// Unique ID associated with the customer profile.
	UserProfileID *string `json:"userProfileId,omitempty"`
}

type GetClientProfileByEmailResponse struct {
	ContentType string
	// OK
	GetClientProfileByEmail200ApplicationJSONObject *GetClientProfileByEmail200ApplicationJSON
	StatusCode                                      int
	RawResponse                                     *http.Response
}
