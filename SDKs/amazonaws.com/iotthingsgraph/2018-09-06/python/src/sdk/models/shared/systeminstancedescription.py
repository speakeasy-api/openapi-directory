"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import definitiondocument as shared_definitiondocument
from ..shared import dependencyrevision as shared_dependencyrevision
from ..shared import metricsconfiguration as shared_metricsconfiguration
from ..shared import systeminstancesummary as shared_systeminstancesummary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SystemInstanceDescription:
    r"""An object that contains a system instance definition and summary information."""
    
    definition: Optional[shared_definitiondocument.DefinitionDocument] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})
    r"""A document that defines an entity."""  
    flow_actions_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flowActionsRoleArn'), 'exclude': lambda f: f is None }})  
    metrics_configuration: Optional[shared_metricsconfiguration.MetricsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricsConfiguration'), 'exclude': lambda f: f is None }})
    r"""An object that specifies whether cloud metrics are collected in a deployment and, if so, what role is used to collect metrics."""  
    s3_bucket_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3BucketName'), 'exclude': lambda f: f is None }})  
    summary: Optional[shared_systeminstancesummary.SystemInstanceSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})  
    validated_dependency_revisions: Optional[list[shared_dependencyrevision.DependencyRevision]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validatedDependencyRevisions'), 'exclude': lambda f: f is None }})  
    validated_namespace_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validatedNamespaceVersion'), 'exclude': lambda f: f is None }})  
    