// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeauthorizeDataShareActionEnum
type GETDeauthorizeDataShareActionEnum string

const (
	GETDeauthorizeDataShareActionEnumDeauthorizeDataShare GETDeauthorizeDataShareActionEnum = "DeauthorizeDataShare"
)

func (e *GETDeauthorizeDataShareActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeauthorizeDataShare":
		*e = GETDeauthorizeDataShareActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeauthorizeDataShareActionEnum: %s", s)
	}
}

// GETDeauthorizeDataShareVersionEnum
type GETDeauthorizeDataShareVersionEnum string

const (
	GETDeauthorizeDataShareVersionEnumTwoThousandAndTwelve1201 GETDeauthorizeDataShareVersionEnum = "2012-12-01"
)

func (e *GETDeauthorizeDataShareVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETDeauthorizeDataShareVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeauthorizeDataShareVersionEnum: %s", s)
	}
}

type GETDeauthorizeDataShareQueryParams struct {
	Action GETDeauthorizeDataShareActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The identifier of the data consumer that is to have authorization removed from the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
	ConsumerIdentifier string `queryParam:"style=form,explode=true,name=ConsumerIdentifier"`
	// The Amazon Resource Name (ARN) of the datashare to remove authorization from.
	DataShareArn string                             `queryParam:"style=form,explode=true,name=DataShareArn"`
	Version      GETDeauthorizeDataShareVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeauthorizeDataShareHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeauthorizeDataShareRequest struct {
	QueryParams GETDeauthorizeDataShareQueryParams
	Headers     GETDeauthorizeDataShareHeaders
}

type GETDeauthorizeDataShareResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
