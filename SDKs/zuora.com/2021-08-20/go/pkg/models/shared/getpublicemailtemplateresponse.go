// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// GETPublicEmailTemplateResponseCcEmailTypeEnum - Email cc type.
type GETPublicEmailTemplateResponseCcEmailTypeEnum string

const (
	GETPublicEmailTemplateResponseCcEmailTypeEnumBillToContact                       GETPublicEmailTemplateResponseCcEmailTypeEnum = "BillToContact"
	GETPublicEmailTemplateResponseCcEmailTypeEnumSoldToContact                       GETPublicEmailTemplateResponseCcEmailTypeEnum = "SoldToContact"
	GETPublicEmailTemplateResponseCcEmailTypeEnumSpecificEmails                      GETPublicEmailTemplateResponseCcEmailTypeEnum = "SpecificEmails"
	GETPublicEmailTemplateResponseCcEmailTypeEnumTenantAdmin                         GETPublicEmailTemplateResponseCcEmailTypeEnum = "TenantAdmin"
	GETPublicEmailTemplateResponseCcEmailTypeEnumBillToAndSoldToContacts             GETPublicEmailTemplateResponseCcEmailTypeEnum = "BillToAndSoldToContacts"
	GETPublicEmailTemplateResponseCcEmailTypeEnumRunOwner                            GETPublicEmailTemplateResponseCcEmailTypeEnum = "RunOwner"
	GETPublicEmailTemplateResponseCcEmailTypeEnumAllContacts                         GETPublicEmailTemplateResponseCcEmailTypeEnum = "AllContacts"
	GETPublicEmailTemplateResponseCcEmailTypeEnumInvoiceOwnerBillToContact           GETPublicEmailTemplateResponseCcEmailTypeEnum = "InvoiceOwnerBillToContact"
	GETPublicEmailTemplateResponseCcEmailTypeEnumInvoiceOwnerSoldToContact           GETPublicEmailTemplateResponseCcEmailTypeEnum = "InvoiceOwnerSoldToContact"
	GETPublicEmailTemplateResponseCcEmailTypeEnumInvoiceOwnerBillToAndSoldToContacts GETPublicEmailTemplateResponseCcEmailTypeEnum = "InvoiceOwnerBillToAndSoldToContacts"
	GETPublicEmailTemplateResponseCcEmailTypeEnumInvoiceOwnerAllContacts             GETPublicEmailTemplateResponseCcEmailTypeEnum = "InvoiceOwnerAllContacts"
)

func (e *GETPublicEmailTemplateResponseCcEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BillToContact":
		fallthrough
	case "SoldToContact":
		fallthrough
	case "SpecificEmails":
		fallthrough
	case "TenantAdmin":
		fallthrough
	case "BillToAndSoldToContacts":
		fallthrough
	case "RunOwner":
		fallthrough
	case "AllContacts":
		fallthrough
	case "InvoiceOwnerBillToContact":
		fallthrough
	case "InvoiceOwnerSoldToContact":
		fallthrough
	case "InvoiceOwnerBillToAndSoldToContacts":
		fallthrough
	case "InvoiceOwnerAllContacts":
		*e = GETPublicEmailTemplateResponseCcEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublicEmailTemplateResponseCcEmailTypeEnum: %s", s)
	}
}

// GETPublicEmailTemplateResponseEncodingTypeEnum - The endcode type of the email body.
type GETPublicEmailTemplateResponseEncodingTypeEnum string

const (
	GETPublicEmailTemplateResponseEncodingTypeEnumUTF8      GETPublicEmailTemplateResponseEncodingTypeEnum = "UTF8"
	GETPublicEmailTemplateResponseEncodingTypeEnumShiftJis  GETPublicEmailTemplateResponseEncodingTypeEnum = "Shift_JIS"
	GETPublicEmailTemplateResponseEncodingTypeEnumIso2022Jp GETPublicEmailTemplateResponseEncodingTypeEnum = "ISO_2022_JP"
	GETPublicEmailTemplateResponseEncodingTypeEnumEucJp     GETPublicEmailTemplateResponseEncodingTypeEnum = "EUC_JP"
	GETPublicEmailTemplateResponseEncodingTypeEnumXSjis0213 GETPublicEmailTemplateResponseEncodingTypeEnum = "X_SJIS_0213"
)

func (e *GETPublicEmailTemplateResponseEncodingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTF8":
		fallthrough
	case "Shift_JIS":
		fallthrough
	case "ISO_2022_JP":
		fallthrough
	case "EUC_JP":
		fallthrough
	case "X_SJIS_0213":
		*e = GETPublicEmailTemplateResponseEncodingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublicEmailTemplateResponseEncodingTypeEnum: %s", s)
	}
}

// GETPublicEmailTemplateResponseFromEmailTypeEnum - The from email type.
type GETPublicEmailTemplateResponseFromEmailTypeEnum string

const (
	GETPublicEmailTemplateResponseFromEmailTypeEnumTenantEmail   GETPublicEmailTemplateResponseFromEmailTypeEnum = "TenantEmail"
	GETPublicEmailTemplateResponseFromEmailTypeEnumSpecificEmail GETPublicEmailTemplateResponseFromEmailTypeEnum = "SpecificEmail"
)

func (e *GETPublicEmailTemplateResponseFromEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TenantEmail":
		fallthrough
	case "SpecificEmail":
		*e = GETPublicEmailTemplateResponseFromEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublicEmailTemplateResponseFromEmailTypeEnum: %s", s)
	}
}

// GETPublicEmailTemplateResponseReplyToEmailTypeEnum - The reply email type.
type GETPublicEmailTemplateResponseReplyToEmailTypeEnum string

const (
	GETPublicEmailTemplateResponseReplyToEmailTypeEnumTenantEmail   GETPublicEmailTemplateResponseReplyToEmailTypeEnum = "TenantEmail"
	GETPublicEmailTemplateResponseReplyToEmailTypeEnumSpecificEmail GETPublicEmailTemplateResponseReplyToEmailTypeEnum = "SpecificEmail"
)

func (e *GETPublicEmailTemplateResponseReplyToEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TenantEmail":
		fallthrough
	case "SpecificEmail":
		*e = GETPublicEmailTemplateResponseReplyToEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublicEmailTemplateResponseReplyToEmailTypeEnum: %s", s)
	}
}

// GETPublicEmailTemplateResponseToEmailTypeEnum - Email receive type.
type GETPublicEmailTemplateResponseToEmailTypeEnum string

const (
	GETPublicEmailTemplateResponseToEmailTypeEnumBillToContact                       GETPublicEmailTemplateResponseToEmailTypeEnum = "BillToContact"
	GETPublicEmailTemplateResponseToEmailTypeEnumSoldToContact                       GETPublicEmailTemplateResponseToEmailTypeEnum = "SoldToContact"
	GETPublicEmailTemplateResponseToEmailTypeEnumSpecificEmails                      GETPublicEmailTemplateResponseToEmailTypeEnum = "SpecificEmails"
	GETPublicEmailTemplateResponseToEmailTypeEnumTenantAdmin                         GETPublicEmailTemplateResponseToEmailTypeEnum = "TenantAdmin"
	GETPublicEmailTemplateResponseToEmailTypeEnumBillToAndSoldToContacts             GETPublicEmailTemplateResponseToEmailTypeEnum = "BillToAndSoldToContacts"
	GETPublicEmailTemplateResponseToEmailTypeEnumRunOwner                            GETPublicEmailTemplateResponseToEmailTypeEnum = "RunOwner"
	GETPublicEmailTemplateResponseToEmailTypeEnumAllContacts                         GETPublicEmailTemplateResponseToEmailTypeEnum = "AllContacts"
	GETPublicEmailTemplateResponseToEmailTypeEnumInvoiceOwnerBillToContact           GETPublicEmailTemplateResponseToEmailTypeEnum = "InvoiceOwnerBillToContact"
	GETPublicEmailTemplateResponseToEmailTypeEnumInvoiceOwnerSoldToContact           GETPublicEmailTemplateResponseToEmailTypeEnum = "InvoiceOwnerSoldToContact"
	GETPublicEmailTemplateResponseToEmailTypeEnumInvoiceOwnerBillToAndSoldToContacts GETPublicEmailTemplateResponseToEmailTypeEnum = "InvoiceOwnerBillToAndSoldToContacts"
	GETPublicEmailTemplateResponseToEmailTypeEnumInvoiceOwnerAllContacts             GETPublicEmailTemplateResponseToEmailTypeEnum = "InvoiceOwnerAllContacts"
)

func (e *GETPublicEmailTemplateResponseToEmailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BillToContact":
		fallthrough
	case "SoldToContact":
		fallthrough
	case "SpecificEmails":
		fallthrough
	case "TenantAdmin":
		fallthrough
	case "BillToAndSoldToContacts":
		fallthrough
	case "RunOwner":
		fallthrough
	case "AllContacts":
		fallthrough
	case "InvoiceOwnerBillToContact":
		fallthrough
	case "InvoiceOwnerSoldToContact":
		fallthrough
	case "InvoiceOwnerBillToAndSoldToContacts":
		fallthrough
	case "InvoiceOwnerAllContacts":
		*e = GETPublicEmailTemplateResponseToEmailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublicEmailTemplateResponseToEmailTypeEnum: %s", s)
	}
}

// GETPublicEmailTemplateResponse - OK
type GETPublicEmailTemplateResponse struct {
	// The status of the email template.
	Active *bool `json:"active,omitempty"`
	// Email BCC address.
	BccEmailAddress *string `json:"bccEmailAddress,omitempty"`
	// Email CC address.
	CcEmailAddress *string `json:"ccEmailAddress,omitempty"`
	// Email cc type.
	CcEmailType *GETPublicEmailTemplateResponseCcEmailTypeEnum `json:"ccEmailType,omitempty"`
	// The ID of the user who created the notification definition.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The time when the notification definition was created. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
	CreatedOn *time.Time `json:"createdOn,omitempty"`
	// The description of the email template.
	Description *string `json:"description,omitempty"`
	// The email body. You can add merge fields in the email object using angle brackets.
	// User can also embed html tags if 'isHtml' is true.
	EmailBody *string `json:"emailBody,omitempty"`
	// The email subject. You can add merge fields in the email subject using angle brackets.
	EmailSubject *string `json:"emailSubject,omitempty"`
	// The endcode type of the email body.
	EncodingType *GETPublicEmailTemplateResponseEncodingTypeEnum `json:"encodingType,omitempty"`
	// The name of the event type.
	EventTypeName *string `json:"eventTypeName,omitempty"`
	// The namespace of the `eventTypeName` field.
	//
	EventTypeNamespace *string `json:"eventTypeNamespace,omitempty"`
	// If formEmailType is SpecificEmail, this field is required.
	FromEmailAddress *string `json:"fromEmailAddress,omitempty"`
	// The from email type.
	FromEmailType *GETPublicEmailTemplateResponseFromEmailTypeEnum `json:"fromEmailType,omitempty"`
	// The name of email sender.
	FromName *string `json:"fromName,omitempty"`
	// The filter rule associated with this notification definition.
	ID *string `json:"id,omitempty"`
	// Specified whether the style of email body is HTML.
	IsHTML *bool `json:"isHtml,omitempty"`
	// The name of the email template.
	Name *string `json:"name,omitempty"`
	// If replyToEmailType is SpecificEmail, this field is required
	ReplyToEmailAddress *string `json:"replyToEmailAddress,omitempty"`
	// The reply email type.
	ReplyToEmailType *GETPublicEmailTemplateResponseReplyToEmailTypeEnum `json:"replyToEmailType,omitempty"`
	// If toEmailType is SpecificEmail, this field is required.
	ToEmailAddress *string `json:"toEmailAddress,omitempty"`
	// Email receive type.
	ToEmailType *GETPublicEmailTemplateResponseToEmailTypeEnum `json:"toEmailType,omitempty"`
	// The ID of the user who updated the notification definition.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// The time when the notification definition was updated. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
	UpdatedOn *time.Time `json:"updatedOn,omitempty"`
}
