/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PostVolumesCreateVolumeRequest extends SpeakeasyBase {
  /**
   * Auto-mount Volume after attach. `server` must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automount" })
  automount?: boolean;

  /**
   * Format Volume after creation. One of: `xfs`, `ext4`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format?: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  /**
   * Location to create the Volume in (can be omitted if Server is specified)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Name of the volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server?: number;

  /**
   * Size of the Volume in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostVolumes201ApplicationJSONActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostVolumes201ApplicationJSONActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostVolumes201ApplicationJSONActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostVolumes201ApplicationJSONAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostVolumes201ApplicationJSONActionError)
  error: PostVolumes201ApplicationJSONActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({ elemType: PostVolumes201ApplicationJSONActionResources })
  @Expose({ name: "resources" })
  @Type(() => PostVolumes201ApplicationJSONActionResources)
  resources: PostVolumes201ApplicationJSONActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostVolumes201ApplicationJSONActionStatusEnum;
}

/**
 * Location of the Volume. Volume can only be attached to Servers in the same Location.
 */
export class PostVolumes201ApplicationJSONVolumeLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * Protection configuration for the Resource
 */
export class PostVolumes201ApplicationJSONVolumeProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Current status of the Volume
 */
export enum PostVolumes201ApplicationJSONVolumeStatusEnum {
  Creating = "creating",
  Available = "available",
}

export class PostVolumes201ApplicationJSONVolume extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Filesystem of the Volume if formatted on creation, null if not formatted on creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Device path on the file system for the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linux_device" })
  linuxDevice: string;

  /**
   * Location of the Volume. Volume can only be attached to Servers in the same Location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => PostVolumes201ApplicationJSONVolumeLocation)
  location: PostVolumes201ApplicationJSONVolumeLocation;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => PostVolumes201ApplicationJSONVolumeProtection)
  protection: PostVolumes201ApplicationJSONVolumeProtection;

  /**
   * ID of the Server the Volume is attached to, null if it is not attached at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server: number;

  /**
   * Size in GB of the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size: number;

  /**
   * Current status of the Volume
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostVolumes201ApplicationJSONVolumeStatusEnum;
}

/**
 * The `volume` key contains the Volume that was just created
 *
 * @remarks
 *
 * The `action` key contains the Action tracking Volume creation
 *
 */
export class PostVolumes201ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostVolumes201ApplicationJSONAction)
  action: PostVolumes201ApplicationJSONAction;

  @SpeakeasyMetadata({ elemType: PostVolumes201ApplicationJSONAction })
  @Expose({ name: "next_actions" })
  @Type(() => PostVolumes201ApplicationJSONAction)
  nextActions: PostVolumes201ApplicationJSONAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "volume" })
  @Type(() => PostVolumes201ApplicationJSONVolume)
  volume: PostVolumes201ApplicationJSONVolume;
}

export class PostVolumesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `volume` key contains the Volume that was just created
   *
   * @remarks
   *
   * The `action` key contains the Action tracking Volume creation
   *
   */
  @SpeakeasyMetadata()
  postVolumes201ApplicationJSONObject?: PostVolumes201ApplicationJSON;
}
