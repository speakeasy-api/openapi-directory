/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ForumGetPostsThreadedPagedFromChildRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=childPostId",
  })
  childPostId: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=page",
  })
  page: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=pageSize",
  })
  pageSize: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=replySize",
  })
  replySize: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=rootThreadMode",
  })
  rootThreadMode: boolean;

  /**
   * If this value is not null or empty, banned posts are requested to be returned
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=showbanned",
  })
  showbanned?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=sortMode",
  })
  sortMode: number;
}

/**
 * Look at the Response property for more information about the nature of this response
 */
export class ForumGetPostsThreadedPagedFromChild200Wildcard extends SpeakeasyBase {
  @SpeakeasyMetadata()
  detailedErrorTrace?: string;

  @SpeakeasyMetadata()
  errorCode?: number;

  @SpeakeasyMetadata()
  errorStatus?: string;

  @SpeakeasyMetadata()
  message?: string;

  @SpeakeasyMetadata()
  messageData?: Record<string, string>;

  @SpeakeasyMetadata()
  response?: shared.ForumPostSearchResponse;

  @SpeakeasyMetadata()
  throttleSeconds?: number;
}

export class ForumGetPostsThreadedPagedFromChildResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
