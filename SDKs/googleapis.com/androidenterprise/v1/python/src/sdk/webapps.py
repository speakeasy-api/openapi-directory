"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Webapps:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def androidenterprise_webapps_delete(self, request: operations.AndroidenterpriseWebappsDeleteRequest, security: operations.AndroidenterpriseWebappsDeleteSecurity) -> operations.AndroidenterpriseWebappsDeleteResponse:
        r"""Deletes an existing web app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseWebappsDeleteRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseWebappsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseWebappsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidenterprise_webapps_get(self, request: operations.AndroidenterpriseWebappsGetRequest, security: operations.AndroidenterpriseWebappsGetSecurity) -> operations.AndroidenterpriseWebappsGetResponse:
        r"""Gets an existing web app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseWebappsGetRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseWebappsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseWebappsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebApp])
                res.web_app = out

        return res

    def androidenterprise_webapps_insert(self, request: operations.AndroidenterpriseWebappsInsertRequest, security: operations.AndroidenterpriseWebappsInsertSecurity) -> operations.AndroidenterpriseWebappsInsertResponse:
        r"""Creates a new web app for the enterprise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseWebappsInsertRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/webApps', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "web_app", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidenterpriseWebappsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseWebappsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebApp])
                res.web_app = out

        return res

    def androidenterprise_webapps_list(self, request: operations.AndroidenterpriseWebappsListRequest, security: operations.AndroidenterpriseWebappsListSecurity) -> operations.AndroidenterpriseWebappsListResponse:
        r"""Retrieves the details of all web apps for a given enterprise."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseWebappsListRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/webApps', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseWebappsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseWebappsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebAppsListResponse])
                res.web_apps_list_response = out

        return res

    def androidenterprise_webapps_update(self, request: operations.AndroidenterpriseWebappsUpdateRequest, security: operations.AndroidenterpriseWebappsUpdateSecurity) -> operations.AndroidenterpriseWebappsUpdateResponse:
        r"""Updates an existing web app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseWebappsUpdateRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "web_app", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidenterpriseWebappsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseWebappsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WebApp])
                res.web_app = out

        return res

    