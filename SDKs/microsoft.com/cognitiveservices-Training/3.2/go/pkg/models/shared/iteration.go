// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// IterationInput - Iteration model to be sent over JSON.
type IterationInput struct {
	// Gets or sets the name of the iteration.
	Name string `json:"name" form:"name=name"`
}

// IterationClassificationTypeEnum - Gets the classification type of the project.
type IterationClassificationTypeEnum string

const (
	IterationClassificationTypeEnumMulticlass IterationClassificationTypeEnum = "Multiclass"
	IterationClassificationTypeEnumMultilabel IterationClassificationTypeEnum = "Multilabel"
)

func (e *IterationClassificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Multiclass":
		fallthrough
	case "Multilabel":
		*e = IterationClassificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IterationClassificationTypeEnum: %s", s)
	}
}

type IterationExportableToEnum string

const (
	IterationExportableToEnumCoreMl     IterationExportableToEnum = "CoreML"
	IterationExportableToEnumTensorFlow IterationExportableToEnum = "TensorFlow"
	IterationExportableToEnumDockerFile IterationExportableToEnum = "DockerFile"
	IterationExportableToEnumOnnx       IterationExportableToEnum = "ONNX"
	IterationExportableToEnumVaidk      IterationExportableToEnum = "VAIDK"
)

func (e *IterationExportableToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CoreML":
		fallthrough
	case "TensorFlow":
		fallthrough
	case "DockerFile":
		fallthrough
	case "ONNX":
		fallthrough
	case "VAIDK":
		*e = IterationExportableToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IterationExportableToEnum: %s", s)
	}
}

// IterationTrainingTypeEnum - Gets the training type of the iteration.
type IterationTrainingTypeEnum string

const (
	IterationTrainingTypeEnumRegular  IterationTrainingTypeEnum = "Regular"
	IterationTrainingTypeEnumAdvanced IterationTrainingTypeEnum = "Advanced"
)

func (e *IterationTrainingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Regular":
		fallthrough
	case "Advanced":
		*e = IterationTrainingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IterationTrainingTypeEnum: %s", s)
	}
}

// Iteration - Iteration model to be sent over JSON.
type Iteration struct {
	// Gets the classification type of the project.
	ClassificationType *IterationClassificationTypeEnum `json:"classificationType,omitempty"`
	// Gets the time this iteration was completed.
	Created *time.Time `json:"created,omitempty"`
	// Get or sets a guid of the domain the iteration has been trained on.
	DomainID *string `json:"domainId,omitempty"`
	// Whether the iteration can be exported to another format for download.
	Exportable *bool `json:"exportable,omitempty"`
	// A set of platforms this iteration can export to.
	ExportableTo []IterationExportableToEnum `json:"exportableTo,omitempty"`
	// Gets the id of the iteration.
	ID *string `json:"id,omitempty"`
	// Gets the time this iteration was last modified.
	LastModified *time.Time `json:"lastModified,omitempty"`
	// Gets or sets the name of the iteration.
	Name string `json:"name"`
	// Resource Provider Id this iteration was originally published to.
	OriginalPublishResourceID *string `json:"originalPublishResourceId,omitempty"`
	// Gets the project id of the iteration.
	ProjectID *string `json:"projectId,omitempty"`
	// Name of the published model.
	PublishName *string `json:"publishName,omitempty"`
	// Gets the reserved advanced training budget for the iteration.
	ReservedBudgetInHours *int `json:"reservedBudgetInHours,omitempty"`
	// Gets the current iteration status.
	Status *string `json:"status,omitempty"`
	// Gets the time this iteration was last modified.
	TrainedAt *time.Time `json:"trainedAt,omitempty"`
	// Gets the training time for the iteration.
	TrainingTimeInMinutes *int `json:"trainingTimeInMinutes,omitempty"`
	// Gets the training type of the iteration.
	TrainingType *IterationTrainingTypeEnum `json:"trainingType,omitempty"`
}
