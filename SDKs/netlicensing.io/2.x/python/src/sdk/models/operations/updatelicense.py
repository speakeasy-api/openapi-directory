"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import netlicensing as shared_netlicensing
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class UpdateLicenseSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateLicenseRequestBody:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'active' }})  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'currency' }})
    r"""Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation"""  
    hidden: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'hidden' }})
    r"""If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'name' }})
    r"""Name for the Licensed item. Set from License Template on creation, if not specified explicitly."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'number' }})
    r"""Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed."""  
    parentfeature: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'parentfeature' }})  
    price: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'price' }})
    r"""Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation"""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'quantity' }})
    r"""Mandatory for 'Pay-per-Use' License Model."""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'startDate' }})
    r"""For 'TIMEVOLUME' License type"""  
    time_volume: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'timeVolume' }})
    r"""Mandatory for 'TIMEVOLUME' License Type."""  
    time_volume_period: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'timeVolumePeriod' }})
    r"""For 'TIMEVOLUME' License Type."""  
    used_quantity: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'usedQuantity' }})
    r"""Mandatory for 'Pay-per-Use' License Model."""  
    

@dataclasses.dataclass
class UpdateLicenseRequest:
    
    license_number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'licenseNumber', 'style': 'simple', 'explode': False }})
    r"""Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed."""  
    request_body: Optional[UpdateLicenseRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateLicenseResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    netlicensing: Optional[shared_netlicensing.Netlicensing] = dataclasses.field(default=None)
    r"""Successful request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    