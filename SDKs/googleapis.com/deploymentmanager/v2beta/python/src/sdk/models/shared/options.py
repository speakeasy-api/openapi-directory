"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import asyncoptions as shared_asyncoptions
from ..shared import inputmapping as shared_inputmapping
from ..shared import validationoptions as shared_validationoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Options:
    r"""Options allows customized resource handling by Deployment Manager."""
    
    async_options: Optional[list[shared_asyncoptions.AsyncOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asyncOptions'), 'exclude': lambda f: f is None }})
    r"""Options regarding how to thread async requests."""  
    input_mappings: Optional[list[shared_inputmapping.InputMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputMappings'), 'exclude': lambda f: f is None }})
    r"""The mappings that apply for requests."""  
    validation_options: Optional[shared_validationoptions.ValidationOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationOptions'), 'exclude': lambda f: f is None }})
    r"""Options for how to validate and process properties on a resource."""  
    virtual_properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualProperties'), 'exclude': lambda f: f is None }})
    r"""Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number"""  
    