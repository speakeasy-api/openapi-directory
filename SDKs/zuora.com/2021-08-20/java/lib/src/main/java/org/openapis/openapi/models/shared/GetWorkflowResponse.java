/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetWorkflowResponse {
    /**
     * The overall CPU time for the execution of the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuTime")
    public String cpuTime;
    public GetWorkflowResponse withCpuTime(String cpuTime) {
        this.cpuTime = cpuTime;
        return this;
    }
    
    /**
     * The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format..
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    public String createdAt;
    public GetWorkflowResponse withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The date and time when the execution of the workflow completes, in the `YYYY-MM-DD HH:MM:SS` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finishedAt")
    public String finishedAt;
    public GetWorkflowResponse withFinishedAt(String finishedAt) {
        this.finishedAt = finishedAt;
        return this;
    }
    
    /**
     * The unique ID of the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public GetWorkflowResponse withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Messages from tasks.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    public java.util.Map<String, Object> messages;
    public GetWorkflowResponse withMessages(java.util.Map<String, Object> messages) {
        this.messages = messages;
        return this;
    }
    
    /**
     * The unique run number of the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GetWorkflowResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The ID of the workflow setup.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalWorkflowId")
    public String originalWorkflowId;
    public GetWorkflowResponse withOriginalWorkflowId(String originalWorkflowId) {
        this.originalWorkflowId = originalWorkflowId;
        return this;
    }
    
    /**
     * The execution time of the workflow including the waiting time, in seconds.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runTime")
    public Double runTime;
    public GetWorkflowResponse withRunTime(Double runTime) {
        this.runTime = runTime;
        return this;
    }
    
    /**
     * The status of the workflow:
     *   - Queued: The workflow is in queue for being processed.
     *   - Processing: The workflow is in process.
     *   - Stopping: The workflow is being stopped through Zuora UI.
     *   - Stopped: The workflow is stopped through Zuora UI.
     *   - Finished: The workflow is finished. When a workflow is finished, it might have tasks pending for retry or delay. Pending tasks do not block the onfinish branch of the workflow, but they block the oncomplete branch of the iterate. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GetWorkflowResponseStatusEnum status;
    public GetWorkflowResponse withStatus(GetWorkflowResponseStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * An object containing task counts.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tasks")
    public GetWorkflowResponseTasks tasks;
    public GetWorkflowResponse withTasks(GetWorkflowResponseTasks tasks) {
        this.tasks = tasks;
        return this;
    }
    
    /**
     * The type of the current workflow.
     * Possible values:
     *     - `Workflow::Setup`: The workflow is a setup and is used for creating workflow instances.
     *     - `Workflow::Instance`: The workflow is an execution that has data.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public GetWorkflowResponse withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    public String updatedAt;
    public GetWorkflowResponse withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
