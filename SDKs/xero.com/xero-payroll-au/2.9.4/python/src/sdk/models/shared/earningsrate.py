"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import allowancetype_enum as shared_allowancetype_enum
from ..shared import earningstype_enum as shared_earningstype_enum
from ..shared import employmentterminationpaymenttype_enum as shared_employmentterminationpaymenttype_enum
from ..shared import ratetype_enum as shared_ratetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EarningsRate:
    
    account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountCode'), 'exclude': lambda f: f is None }})
    r"""See Accounts"""  
    accrue_leave: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccrueLeave'), 'exclude': lambda f: f is None }})
    r"""Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE"""  
    allowance_type: Optional[shared_allowancetype_enum.AllowanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowanceType'), 'exclude': lambda f: f is None }})  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""Optional Amount for FIXEDAMOUNT RateType EarningsRate"""  
    current_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentRecord'), 'exclude': lambda f: f is None }})
    r"""Is the current record"""  
    earnings_rate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EarningsRateID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier"""  
    earnings_type: Optional[shared_earningstype_enum.EarningsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EarningsType'), 'exclude': lambda f: f is None }})  
    employment_termination_payment_type: Optional[shared_employmentterminationpaymenttype_enum.EmploymentTerminationPaymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmploymentTerminationPaymentType'), 'exclude': lambda f: f is None }})  
    is_exempt_from_super: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsExemptFromSuper'), 'exclude': lambda f: f is None }})
    r"""See the ATO website for details of which payments are exempt from SGC"""  
    is_exempt_from_tax: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsExemptFromTax'), 'exclude': lambda f: f is None }})
    r"""Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding"""  
    is_reportable_as_w1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsReportableAsW1'), 'exclude': lambda f: f is None }})
    r"""Boolean to determine if the earnings rate is reportable or exempt from W1"""  
    multiplier: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Multiplier'), 'exclude': lambda f: f is None }})
    r"""This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the earnings rate (max length = 100)"""  
    rate_per_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RatePerUnit'), 'exclude': lambda f: f is None }})
    r"""Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT."""  
    rate_type: Optional[shared_ratetype_enum.RateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RateType'), 'exclude': lambda f: f is None }})  
    type_of_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypeOfUnits'), 'exclude': lambda f: f is None }})
    r"""Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT"""  
    updated_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDateUTC'), 'exclude': lambda f: f is None }})
    r"""Last modified timestamp"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EarningsRateInput:
    
    account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountCode'), 'exclude': lambda f: f is None }})
    r"""See Accounts"""  
    accrue_leave: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccrueLeave'), 'exclude': lambda f: f is None }})
    r"""Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE"""  
    allowance_type: Optional[shared_allowancetype_enum.AllowanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowanceType'), 'exclude': lambda f: f is None }})  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""Optional Amount for FIXEDAMOUNT RateType EarningsRate"""  
    current_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentRecord'), 'exclude': lambda f: f is None }})
    r"""Is the current record"""  
    earnings_rate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EarningsRateID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier"""  
    earnings_type: Optional[shared_earningstype_enum.EarningsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EarningsType'), 'exclude': lambda f: f is None }})  
    employment_termination_payment_type: Optional[shared_employmentterminationpaymenttype_enum.EmploymentTerminationPaymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmploymentTerminationPaymentType'), 'exclude': lambda f: f is None }})  
    is_exempt_from_super: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsExemptFromSuper'), 'exclude': lambda f: f is None }})
    r"""See the ATO website for details of which payments are exempt from SGC"""  
    is_exempt_from_tax: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsExemptFromTax'), 'exclude': lambda f: f is None }})
    r"""Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding"""  
    is_reportable_as_w1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsReportableAsW1'), 'exclude': lambda f: f is None }})
    r"""Boolean to determine if the earnings rate is reportable or exempt from W1"""  
    multiplier: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Multiplier'), 'exclude': lambda f: f is None }})
    r"""This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the earnings rate (max length = 100)"""  
    rate_per_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RatePerUnit'), 'exclude': lambda f: f is None }})
    r"""Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT."""  
    rate_type: Optional[shared_ratetype_enum.RateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RateType'), 'exclude': lambda f: f is None }})  
    type_of_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypeOfUnits'), 'exclude': lambda f: f is None }})
    r"""Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT"""  
    