// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

// GetTotalsEntityTypeEntityTypeEnum - Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac`, `party`, `pac-party`,                 `house-senate`, or `ie-only`
type GetTotalsEntityTypeEntityTypeEnum string

const (
	GetTotalsEntityTypeEntityTypeEnumPresidential GetTotalsEntityTypeEntityTypeEnum = "presidential"
	GetTotalsEntityTypeEntityTypeEnumPac          GetTotalsEntityTypeEntityTypeEnum = "pac"
	GetTotalsEntityTypeEntityTypeEnumParty        GetTotalsEntityTypeEntityTypeEnum = "party"
	GetTotalsEntityTypeEntityTypeEnumPacParty     GetTotalsEntityTypeEntityTypeEnum = "pac-party"
	GetTotalsEntityTypeEntityTypeEnumHouseSenate  GetTotalsEntityTypeEntityTypeEnum = "house-senate"
	GetTotalsEntityTypeEntityTypeEnumIeOnly       GetTotalsEntityTypeEntityTypeEnum = "ie-only"
)

func (e *GetTotalsEntityTypeEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "presidential":
		fallthrough
	case "pac":
		fallthrough
	case "party":
		fallthrough
	case "pac-party":
		fallthrough
	case "house-senate":
		fallthrough
	case "ie-only":
		*e = GetTotalsEntityTypeEntityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTotalsEntityTypeEntityTypeEnum: %s", s)
	}
}

type GetTotalsEntityTypePathParams struct {
	// Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac`, `party`, `pac-party`,                 `house-senate`, or `ie-only`
	EntityType GetTotalsEntityTypeEntityTypeEnum `pathParam:"style=simple,explode=false,name=entity_type"`
}

type GetTotalsEntityTypeFilingFrequencyEnum string

const (
	GetTotalsEntityTypeFilingFrequencyEnumUnknown GetTotalsEntityTypeFilingFrequencyEnum = ""
	GetTotalsEntityTypeFilingFrequencyEnumA       GetTotalsEntityTypeFilingFrequencyEnum = "A"
	GetTotalsEntityTypeFilingFrequencyEnumM       GetTotalsEntityTypeFilingFrequencyEnum = "M"
	GetTotalsEntityTypeFilingFrequencyEnumN       GetTotalsEntityTypeFilingFrequencyEnum = "N"
	GetTotalsEntityTypeFilingFrequencyEnumQ       GetTotalsEntityTypeFilingFrequencyEnum = "Q"
	GetTotalsEntityTypeFilingFrequencyEnumT       GetTotalsEntityTypeFilingFrequencyEnum = "T"
	GetTotalsEntityTypeFilingFrequencyEnumW       GetTotalsEntityTypeFilingFrequencyEnum = "W"
	GetTotalsEntityTypeFilingFrequencyEnumMinusA  GetTotalsEntityTypeFilingFrequencyEnum = "-A"
	GetTotalsEntityTypeFilingFrequencyEnumMinusT  GetTotalsEntityTypeFilingFrequencyEnum = "-T"
)

func (e *GetTotalsEntityTypeFilingFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "M":
		fallthrough
	case "N":
		fallthrough
	case "Q":
		fallthrough
	case "T":
		fallthrough
	case "W":
		fallthrough
	case "-A":
		fallthrough
	case "-T":
		*e = GetTotalsEntityTypeFilingFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTotalsEntityTypeFilingFrequencyEnum: %s", s)
	}
}

type GetTotalsEntityTypeOrganizationTypeEnum string

const (
	GetTotalsEntityTypeOrganizationTypeEnumUnknown GetTotalsEntityTypeOrganizationTypeEnum = ""
	GetTotalsEntityTypeOrganizationTypeEnumC       GetTotalsEntityTypeOrganizationTypeEnum = "C"
	GetTotalsEntityTypeOrganizationTypeEnumL       GetTotalsEntityTypeOrganizationTypeEnum = "L"
	GetTotalsEntityTypeOrganizationTypeEnumM       GetTotalsEntityTypeOrganizationTypeEnum = "M"
	GetTotalsEntityTypeOrganizationTypeEnumT       GetTotalsEntityTypeOrganizationTypeEnum = "T"
	GetTotalsEntityTypeOrganizationTypeEnumV       GetTotalsEntityTypeOrganizationTypeEnum = "V"
	GetTotalsEntityTypeOrganizationTypeEnumW       GetTotalsEntityTypeOrganizationTypeEnum = "W"
)

func (e *GetTotalsEntityTypeOrganizationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "L":
		fallthrough
	case "M":
		fallthrough
	case "T":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = GetTotalsEntityTypeOrganizationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTotalsEntityTypeOrganizationTypeEnum: %s", s)
	}
}

type GetTotalsEntityTypeQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	CommitteeDesignation []string `queryParam:"style=form,explode=true,name=committee_designation"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// US state or territory
	CommitteeState []string `queryParam:"style=form,explode=true,name=committee_state"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType []string `queryParam:"style=form,explode=true,name=committee_type"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// The one-letter
	//     code of the filing frequency:
	//          - A Administratively terminated
	//          - D Debt
	//          - M Monthly filer
	//          - Q Quarterly filer
	//          - T Terminated
	//          - W Waived
	//
	FilingFrequency []GetTotalsEntityTypeFilingFrequencyEnum `queryParam:"style=form,explode=true,name=filing_frequency"`
	// Filter for all amounts less than a value.
	//
	MaxDisbursements *string `queryParam:"style=form,explode=true,name=max_disbursements"`
	// Filter for committees whose first Form 1 was received on or before this date.
	MaxFirstF1Date *types.Date `queryParam:"style=form,explode=true,name=max_first_f1_date"`
	// Filter for all amounts less than a value.
	//
	MaxLastCashOnHandEndPeriod *string `queryParam:"style=form,explode=true,name=max_last_cash_on_hand_end_period"`
	// Filter for all amounts less than a value.
	//
	MaxLastDebtsOwedByCommittee *string `queryParam:"style=form,explode=true,name=max_last_debts_owed_by_committee"`
	// Filter for all amounts less than a value.
	//
	MaxReceipts *string `queryParam:"style=form,explode=true,name=max_receipts"`
	// Filter for all amounts greater than a value.
	//
	MinDisbursements *string `queryParam:"style=form,explode=true,name=min_disbursements"`
	// Filter for committees whose first Form 1 was received on or after this date.
	MinFirstF1Date *types.Date `queryParam:"style=form,explode=true,name=min_first_f1_date"`
	// Filter for all amounts greater than a value.
	//
	MinLastCashOnHandEndPeriod *string `queryParam:"style=form,explode=true,name=min_last_cash_on_hand_end_period"`
	// Filter for all amounts greater than a value.
	//
	MinLastDebtsOwedByCommittee *string `queryParam:"style=form,explode=true,name=min_last_debts_owed_by_committee"`
	// Filter for all amounts greater than a value.
	//
	MinReceipts *string `queryParam:"style=form,explode=true,name=min_receipts"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	OrganizationType []GetTotalsEntityTypeOrganizationTypeEnum `queryParam:"style=form,explode=true,name=organization_type"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
	//
	SponsorCandidateID []string `queryParam:"style=form,explode=true,name=sponsor_candidate_id"`
	// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
	TreasurerName []string `queryParam:"style=form,explode=true,name=treasurer_name"`
}

type GetTotalsEntityTypeRequest struct {
	PathParams  GetTotalsEntityTypePathParams
	QueryParams GetTotalsEntityTypeQueryParams
}

type GetTotalsEntityTypeResponse struct {
	CommitteeTotalsPage *shared.CommitteeTotalsPage
	ContentType         string
	StatusCode          int
	RawResponse         *http.Response
}
