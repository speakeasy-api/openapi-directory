"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSellerRequestBody:
    
    operation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation') }})
    r"""The action being performed, which is always going to be `replace`."""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The path in which the value is being updated. It follows the standardized format `/{field}`, where `{field}` is the path's name."""  
    value: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The value that is being updated. Notice that the type will depend on the path that is being updated."""  
    

@dataclasses.dataclass
class UpdateSellerRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    account_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'accountName', 'style': 'form', 'explode': True }})
    r"""Name of the VTEX account that belongs to the marketplace."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    environment: str = dataclasses.field(metadata={'query_param': { 'field_name': 'environment', 'style': 'form', 'explode': True }})
    r"""Environment to use. Used as part of the URL."""  
    seller_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'sellerId', 'style': 'simple', 'explode': False }})
    r"""A string that identifies the seller in the marketplace. This ID must be created by the marketplace"""  
    request_body: Optional[list[UpdateSellerRequestBody]] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""array of objects"""  
    

@dataclasses.dataclass
class UpdateSellerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    