// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum - The state of the CIDR block.
type CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum string

const (
	CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnumAssociating    CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum = "associating"
	CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnumAssociated     CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum = "associated"
	CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnumDisassociating CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum = "disassociating"
	CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnumDisassociated  CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum = "disassociated"
	CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnumFailing        CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum = "failing"
	CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnumFailed         CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum = "failed"
)

func (e CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum) ToPointer() *CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum {
	return &e
}

func (e *CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum: %v", v)
	}
}

// CreateVpcResultVpcCidrBlockAssociationSetCidrBlockState - Information about the state of the CIDR block.
type CreateVpcResultVpcCidrBlockAssociationSetCidrBlockState struct {
	State         *CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum
	StatusMessage *string
}

// CreateVpcResultVpcCidrBlockAssociationSet - Describes an IPv4 CIDR block associated with a VPC.
type CreateVpcResultVpcCidrBlockAssociationSet struct {
	AssociationID  *string
	CidrBlock      *string
	CidrBlockState *CreateVpcResultVpcCidrBlockAssociationSetCidrBlockState
}

// CreateVpcResultVpcInstanceTenancyEnum - The allowed tenancy of instances launched into the VPC.
type CreateVpcResultVpcInstanceTenancyEnum string

const (
	CreateVpcResultVpcInstanceTenancyEnumDefault   CreateVpcResultVpcInstanceTenancyEnum = "default"
	CreateVpcResultVpcInstanceTenancyEnumDedicated CreateVpcResultVpcInstanceTenancyEnum = "dedicated"
	CreateVpcResultVpcInstanceTenancyEnumHost      CreateVpcResultVpcInstanceTenancyEnum = "host"
)

func (e CreateVpcResultVpcInstanceTenancyEnum) ToPointer() *CreateVpcResultVpcInstanceTenancyEnum {
	return &e
}

func (e *CreateVpcResultVpcInstanceTenancyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "dedicated":
		fallthrough
	case "host":
		*e = CreateVpcResultVpcInstanceTenancyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcResultVpcInstanceTenancyEnum: %v", v)
	}
}

// CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum - The state of the CIDR block.
type CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum string

const (
	CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociating    CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associating"
	CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociated     CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associated"
	CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociating CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociating"
	CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociated  CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociated"
	CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailing        CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failing"
	CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailed         CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failed"
)

func (e CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) ToPointer() *CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum {
	return &e
}

func (e *CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum: %v", v)
	}
}

// CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockState - Information about the state of the CIDR block.
type CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockState struct {
	State         *CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum
	StatusMessage *string
}

// CreateVpcResultVpcIpv6CidrBlockAssociationSet - Describes an IPv6 CIDR block associated with a VPC.
type CreateVpcResultVpcIpv6CidrBlockAssociationSet struct {
	AssociationID      *string
	Ipv6CidrBlock      *string
	Ipv6CidrBlockState *CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockState
	Ipv6Pool           *string
	NetworkBorderGroup *string
}

// CreateVpcResultVpcStateEnum - The current state of the VPC.
type CreateVpcResultVpcStateEnum string

const (
	CreateVpcResultVpcStateEnumPending   CreateVpcResultVpcStateEnum = "pending"
	CreateVpcResultVpcStateEnumAvailable CreateVpcResultVpcStateEnum = "available"
)

func (e CreateVpcResultVpcStateEnum) ToPointer() *CreateVpcResultVpcStateEnum {
	return &e
}

func (e *CreateVpcResultVpcStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		*e = CreateVpcResultVpcStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcResultVpcStateEnum: %v", v)
	}
}

// CreateVpcResultVpcTags - Describes a tag.
type CreateVpcResultVpcTags struct {
	Key   *string
	Value *string
}

// CreateVpcResultVpc - Information about the VPC.
type CreateVpcResultVpc struct {
	CidrBlock                   *string
	CidrBlockAssociationSet     []CreateVpcResultVpcCidrBlockAssociationSet
	DhcpOptionsID               *string
	InstanceTenancy             *CreateVpcResultVpcInstanceTenancyEnum
	Ipv6CidrBlockAssociationSet []CreateVpcResultVpcIpv6CidrBlockAssociationSet
	IsDefault                   *bool
	OwnerID                     *string
	State                       *CreateVpcResultVpcStateEnum
	Tags                        []CreateVpcResultVpcTags
	VpcID                       *string
}

// CreateVpcResult - Success
type CreateVpcResult struct {
	Vpc *CreateVpcResultVpc
}
