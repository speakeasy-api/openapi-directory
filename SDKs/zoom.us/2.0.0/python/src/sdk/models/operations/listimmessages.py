"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListimmessagesSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListimmessagesRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})
    r"""The user ID or email address."""  
    channel: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channel', 'style': 'form', 'explode': True }})
    r"""IM Channel's ID."""  
    chat_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'chat_user', 'style': 'form', 'explode': True }})
    r"""Chat user's ID or email address."""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date', 'style': 'form', 'explode': True }})
    r"""IM message's query date time, format as yyyy-MM-dd."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class Listimmessages200ApplicationXMLMessages:
    
    date_time: Optional[datetime] = dataclasses.field(default=None)
    r"""IM message send time."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""IM message UUID."""  
    message: Optional[str] = dataclasses.field(default=None)
    r"""IM message content."""  
    sender: Optional[str] = dataclasses.field(default=None)
    r"""IM message sender."""  
    timstamp: Optional[int] = dataclasses.field(default=None)
    r"""IM message send timestamp."""  
    

@dataclasses.dataclass
class Listimmessages200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    User's IM messages returned.
    """
    
    date_: Optional[datetime] = dataclasses.field(default=None)
    r"""Query date time, format as yyyy-mm-dd."""  
    messages: Optional[list[Listimmessages200ApplicationXMLMessages]] = dataclasses.field(default=None)
    r"""Array of im messages."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Listimmessages200ApplicationJSONMessages:
    
    date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""IM message send time."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""IM message UUID."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""IM message content."""  
    sender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sender'), 'exclude': lambda f: f is None }})
    r"""IM message sender."""  
    timstamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timstamp'), 'exclude': lambda f: f is None }})
    r"""IM message send timestamp."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Listimmessages200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    User's IM messages returned.
    """
    
    date_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Query date time, format as yyyy-mm-dd."""  
    messages: Optional[list[Listimmessages200ApplicationJSONMessages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""Array of im messages."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class ListimmessagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    listimmessages_200_application_json_object: Optional[Listimmessages200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    User's IM messages returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    