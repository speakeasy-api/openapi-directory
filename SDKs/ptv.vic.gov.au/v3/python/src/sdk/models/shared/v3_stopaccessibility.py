"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v3_stopaccessibilitywheelchair as shared_v3_stopaccessibilitywheelchair
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V3StopAccessibility:
    
    audio_customer_information: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio_customer_information'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is at least one audio customer information at the stop/platform"""  
    escalator: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('escalator'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)"""  
    hearing_loop: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hearing_loop'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is a hearing loop facility at the stop/platform"""  
    lift: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lift'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is an elevator at the stop/platform"""  
    lighting: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lighting'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is lighting at the stop"""  
    platform_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform_number'), 'exclude': lambda f: f is None }})
    r"""Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)"""  
    stairs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stairs'), 'exclude': lambda f: f is None }})
    r"""Indicates if there are stairs available in the stop"""  
    stop_accessible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_accessible'), 'exclude': lambda f: f is None }})
    r"""Indicates if the stop is accessible"""  
    tactile_ground_surface_indicator: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tactile_ground_surface_indicator'), 'exclude': lambda f: f is None }})
    r"""Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop"""  
    waiting_room: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_room'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is a general waiting area at the stop"""  
    wheelchair: Optional[shared_v3_stopaccessibilitywheelchair.V3StopAccessibilityWheelchair] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wheelchair'), 'exclude': lambda f: f is None }})  
    