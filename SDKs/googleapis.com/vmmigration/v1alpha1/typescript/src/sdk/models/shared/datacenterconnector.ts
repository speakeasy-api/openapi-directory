/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AvailableUpdates } from "./availableupdates";
import { Status } from "./status";
import { UpgradeStatus } from "./upgradestatus";
import { Expose, Type } from "class-transformer";

/**
 * Output only. State of the DatacenterConnector, as determined by the health checks.
 */
export enum DatacenterConnectorStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Pending = "PENDING",
  Offline = "OFFLINE",
  Failed = "FAILED",
  Active = "ACTIVE",
}

/**
 * DatacenterConnector message describes a connector between the Source and Google Cloud, which is installed on a vmware datacenter (an OVA vm installed by the user) to connect the Datacenter to Google Cloud and support vm migration data transfer.
 */
export class DatacenterConnector extends SpeakeasyBase {
  /**
   * Output only. Appliance OVA version. This is the OVA which is manually installed by the user and contains the infrastructure for the automatically updatable components on the appliance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applianceInfrastructureVersion" })
  applianceInfrastructureVersion?: string;

  /**
   * Output only. Appliance last installed update bundle version. This is the version of the automatically updatable components on the appliance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applianceSoftwareVersion" })
  applianceSoftwareVersion?: string;

  /**
   * Holds informatiom about the available versions for upgrade.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "availableVersions" })
  @Type(() => AvailableUpdates)
  availableVersions?: AvailableUpdates;

  /**
   * Output only. The communication channel between the datacenter connector and Google Cloud.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bucket" })
  bucket?: string;

  /**
   * Output only. The time the connector was created (as an API call, not when it was actually installed).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => Status)
  error?: Status;

  /**
   * Output only. The connector's name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrationId" })
  registrationId?: string;

  /**
   * The service account to use in the connector when communicating with the cloud.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceAccount" })
  serviceAccount?: string;

  /**
   * Output only. State of the DatacenterConnector, as determined by the health checks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: DatacenterConnectorStateEnum;

  /**
   * Output only. The time the state was last set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stateTime" })
  stateTime?: string;

  /**
   * Output only. The last time the connector was updated with an API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;

  /**
   * UpgradeStatus contains information about upgradeAppliance operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upgradeStatus" })
  @Type(() => UpgradeStatus)
  upgradeStatus?: UpgradeStatus;

  /**
   * The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

/**
 * DatacenterConnector message describes a connector between the Source and Google Cloud, which is installed on a vmware datacenter (an OVA vm installed by the user) to connect the Datacenter to Google Cloud and support vm migration data transfer.
 */
export class DatacenterConnectorInput extends SpeakeasyBase {
  /**
   * Holds informatiom about the available versions for upgrade.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "availableVersions" })
  @Type(() => AvailableUpdates)
  availableVersions?: AvailableUpdates;

  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => Status)
  error?: Status;

  /**
   * Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrationId" })
  registrationId?: string;

  /**
   * The service account to use in the connector when communicating with the cloud.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceAccount" })
  serviceAccount?: string;

  /**
   * UpgradeStatus contains information about upgradeAppliance operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upgradeStatus" })
  @Type(() => UpgradeStatus)
  upgradeStatus?: UpgradeStatus;

  /**
   * The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}
