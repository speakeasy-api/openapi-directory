"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import launchconfigurationtemplate as shared_launchconfigurationtemplate
from ..shared import postlaunchactionsdeploymenttype_enum as shared_postlaunchactionsdeploymenttype_enum
from ..shared import ssmdocument as shared_ssmdocument
from ..shared import volumetype_enum as shared_volumetype_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateLaunchConfigurationTemplateRequestBodyBootModeEnum(str, Enum):
    r"""Launch configuration template boot mode."""
    LEGACY_BIOS = 'LEGACY_BIOS'
    UEFI = 'UEFI'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationTemplateRequestBodyLargeVolumeConf:
    r"""Launch template disk configuration."""
    
    iops: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iops'), 'exclude': lambda f: f is None }})  
    throughput: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('throughput'), 'exclude': lambda f: f is None }})  
    volume_type: Optional[shared_volumetype_enum.VolumeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeType'), 'exclude': lambda f: f is None }})  
    
class UpdateLaunchConfigurationTemplateRequestBodyLaunchDispositionEnum(str, Enum):
    r"""Launch disposition."""
    STOPPED = 'STOPPED'
    STARTED = 'STARTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationTemplateRequestBodyLicensing:
    r"""Configure Licensing."""
    
    os_byol: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osByol'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationTemplateRequestBodyPostLaunchActions:
    r"""Post Launch Actions to executed on the Test or Cutover instance."""
    
    cloud_watch_log_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudWatchLogGroupName'), 'exclude': lambda f: f is None }})  
    deployment: Optional[shared_postlaunchactionsdeploymenttype_enum.PostLaunchActionsDeploymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployment'), 'exclude': lambda f: f is None }})  
    s3_log_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3LogBucket'), 'exclude': lambda f: f is None }})  
    s3_output_key_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3OutputKeyPrefix'), 'exclude': lambda f: f is None }})  
    ssm_documents: Optional[list[shared_ssmdocument.SsmDocument]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssmDocuments'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationTemplateRequestBodySmallVolumeConf:
    r"""Launch template disk configuration."""
    
    iops: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iops'), 'exclude': lambda f: f is None }})  
    throughput: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('throughput'), 'exclude': lambda f: f is None }})  
    volume_type: Optional[shared_volumetype_enum.VolumeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeType'), 'exclude': lambda f: f is None }})  
    
class UpdateLaunchConfigurationTemplateRequestBodyTargetInstanceTypeRightSizingMethodEnum(str, Enum):
    r"""Target instance type right-sizing method."""
    NONE = 'NONE'
    BASIC = 'BASIC'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationTemplateRequestBody:
    
    launch_configuration_template_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchConfigurationTemplateID') }})
    r"""Launch Configuration Template ID."""  
    associate_public_ip_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatePublicIpAddress'), 'exclude': lambda f: f is None }})
    r"""Associate public Ip address."""  
    boot_mode: Optional[UpdateLaunchConfigurationTemplateRequestBodyBootModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootMode'), 'exclude': lambda f: f is None }})
    r"""Launch configuration template boot mode."""  
    copy_private_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyPrivateIp'), 'exclude': lambda f: f is None }})
    r"""Copy private Ip."""  
    copy_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyTags'), 'exclude': lambda f: f is None }})
    r"""Copy tags."""  
    enable_map_auto_tagging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableMapAutoTagging'), 'exclude': lambda f: f is None }})
    r"""Enable map auto tagging."""  
    large_volume_conf: Optional[UpdateLaunchConfigurationTemplateRequestBodyLargeVolumeConf] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('largeVolumeConf'), 'exclude': lambda f: f is None }})
    r"""Launch template disk configuration."""  
    launch_disposition: Optional[UpdateLaunchConfigurationTemplateRequestBodyLaunchDispositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchDisposition'), 'exclude': lambda f: f is None }})
    r"""Launch disposition."""  
    licensing: Optional[UpdateLaunchConfigurationTemplateRequestBodyLicensing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licensing'), 'exclude': lambda f: f is None }})
    r"""Configure Licensing."""  
    map_auto_tagging_mpe_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapAutoTaggingMpeID'), 'exclude': lambda f: f is None }})
    r"""Launch configuration template map auto tagging MPE ID."""  
    post_launch_actions: Optional[UpdateLaunchConfigurationTemplateRequestBodyPostLaunchActions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postLaunchActions'), 'exclude': lambda f: f is None }})
    r"""Post Launch Actions to executed on the Test or Cutover instance."""  
    small_volume_conf: Optional[UpdateLaunchConfigurationTemplateRequestBodySmallVolumeConf] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smallVolumeConf'), 'exclude': lambda f: f is None }})
    r"""Launch template disk configuration."""  
    small_volume_max_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smallVolumeMaxSize'), 'exclude': lambda f: f is None }})
    r"""Small volume maximum size."""  
    target_instance_type_right_sizing_method: Optional[UpdateLaunchConfigurationTemplateRequestBodyTargetInstanceTypeRightSizingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetInstanceTypeRightSizingMethod'), 'exclude': lambda f: f is None }})
    r"""Target instance type right-sizing method."""  
    

@dataclasses.dataclass
class UpdateLaunchConfigurationTemplateRequest:
    
    request_body: UpdateLaunchConfigurationTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateLaunchConfigurationTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    launch_configuration_template: Optional[shared_launchconfigurationtemplate.LaunchConfigurationTemplate] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    uninitialized_account_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UninitializedAccountException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    