/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ObjectAccessControl } from "./objectaccesscontrol";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The owner of the object. This will always be the uploader of the object.
 */
export class ObjectOwner extends SpeakeasyBase {
  /**
   * The entity, in the form user-userId.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entity" })
  entity?: string;

  /**
   * The ID for the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entityId" })
  entityId?: string;
}

/**
 * An object.
 */
export class ObjectT extends SpeakeasyBase {
  /**
   * Access controls on the object.
   */
  @SpeakeasyMetadata({ elemType: ObjectAccessControl })
  @Expose({ name: "acl" })
  @Type(() => ObjectAccessControl)
  acl?: ObjectAccessControl[];

  /**
   * The bucket containing this object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bucket" })
  bucket?: string;

  /**
   * Cache-Control directive for the object data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cacheControl" })
  cacheControl?: string;

  /**
   * Number of underlying components that make up this object. Components are accumulated by compose operations and are limited to a count of 32.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "componentCount" })
  componentCount?: number;

  /**
   * Content-Disposition of the object data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contentDisposition" })
  contentDisposition?: string;

  /**
   * Content-Encoding of the object data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contentEncoding" })
  contentEncoding?: string;

  /**
   * Content-Language of the object data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contentLanguage" })
  contentLanguage?: string;

  /**
   * Content-Type of the object data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contentType" })
  contentType?: string;

  /**
   * CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "crc32c" })
  crc32c?: string;

  /**
   * HTTP 1.1 Entity tag for the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * The content generation of this object. Used for object versioning.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "generation" })
  generation?: string;

  /**
   * The ID of the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The kind of item this is. For objects, this is always storage#object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * MD5 hash of the data; encoded using base64.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "md5Hash" })
  md5Hash?: string;

  /**
   * Media download link.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mediaLink" })
  mediaLink?: string;

  /**
   * User-provided metadata, in key/value pairs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, string>;

  /**
   * The generation of the metadata for this object at this generation. Used for metadata versioning. Has no meaning outside of the context of this generation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metageneration" })
  metageneration?: string;

  /**
   * The name of this object. Required if not specified by URL parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The owner of the object. This will always be the uploader of the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => ObjectOwner)
  owner?: ObjectOwner;

  /**
   * The link to this object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * Content-Length of the data in bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: string;

  /**
   * Storage class of the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "storageClass" })
  storageClass?: string;

  /**
   * Deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeDeleted" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timeDeleted?: Date;

  /**
   * Modification time of the object metadata in RFC 3339 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updated?: Date;
}
