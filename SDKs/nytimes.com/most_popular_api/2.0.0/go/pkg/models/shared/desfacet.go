// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type DesFacetType string

const (
	DesFacetTypeArrayOfany DesFacetType = "arrayOfany"
	DesFacetTypeStr        DesFacetType = "str"
)

type DesFacet struct {
	ArrayOfany []interface{}
	Str        *string

	Type DesFacetType
}

func CreateDesFacetArrayOfany(arrayOfany []interface{}) DesFacet {
	typ := DesFacetTypeArrayOfany

	return DesFacet{
		ArrayOfany: arrayOfany,
		Type:       typ,
	}
}

func CreateDesFacetStr(str string) DesFacet {
	typ := DesFacetTypeStr

	return DesFacet{
		Str:  &str,
		Type: typ,
	}
}

func (u *DesFacet) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfany := []interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfany); err == nil {
		u.ArrayOfany = arrayOfany
		u.Type = DesFacetTypeArrayOfany
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = DesFacetTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DesFacet) MarshalJSON() ([]byte, error) {
	if u.ArrayOfany != nil {
		return json.Marshal(u.ArrayOfany)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}
