<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SourceOperationRequest - A work item that represents the different operations that can be performed on a user-defined Source specification.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SourceOperationRequest
{
    /**
     * A request to compute the SourceMetadata of a Source.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SourceGetMetadataRequest $getMetadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('getMetadata')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SourceGetMetadataRequest')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SourceGetMetadataRequest $getMetadata = null;
    
    /**
     * User-provided name of the Read instruction for this source.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * System-defined name for the Read instruction for this source in the original workflow graph.
     * 
     * @var ?string $originalName
     */
	#[\JMS\Serializer\Annotation\SerializedName('originalName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $originalName = null;
    
    /**
     * Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SourceSplitRequest $split
     */
	#[\JMS\Serializer\Annotation\SerializedName('split')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SourceSplitRequest')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SourceSplitRequest $split = null;
    
    /**
     * System-defined name of the stage containing the source operation. Unique across the workflow.
     * 
     * @var ?string $stageName
     */
	#[\JMS\Serializer\Annotation\SerializedName('stageName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $stageName = null;
    
    /**
     * System-defined name of the Read instruction for this source. Unique across the workflow.
     * 
     * @var ?string $systemName
     */
	#[\JMS\Serializer\Annotation\SerializedName('systemName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $systemName = null;
    
	public function __construct()
	{
		$this->getMetadata = null;
		$this->name = null;
		$this->originalName = null;
		$this->split = null;
		$this->stageName = null;
		$this->systemName = null;
	}
}
