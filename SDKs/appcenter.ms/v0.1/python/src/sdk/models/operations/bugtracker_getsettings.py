"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class BugtrackerGetSettingsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class BugtrackerGetSettingsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    
class BugtrackerGetSettingsDefaultApplicationJSONCodeEnum(str, Enum):
    r"""The status code return by the API. It can be 400 or 404 or 409 or 500."""
    FOUR_HUNDRED = '400'
    FOUR_HUNDRED_AND_FOUR = '404'
    FOUR_HUNDRED_AND_NINE = '409'
    FIVE_HUNDRED = '500'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BugtrackerGetSettingsDefaultApplicationJSON:
    r"""Generic result for any alerting API operation"""
    
    code: BugtrackerGetSettingsDefaultApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""The status code return by the API. It can be 400 or 404 or 409 or 500."""  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request identifier for tracking"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The reason for the request failed"""  
    
class BugtrackerGetSettings200ApplicationJSONEventTypesEnum(str, Enum):
    r"""Alerting EventTypes enum"""
    NEW_CRASH_GROUP_CREATED = 'newCrashGroupCreated'
    NEW_APP_RELEASED = 'newAppReleased'

class BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum(str, Enum):
    r"""type of bugtracker"""
    GITHUB = 'github'
    VSTS = 'vsts'
    JIRA = 'jira'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BugtrackerGetSettings200ApplicationJSONSettings:
    r"""Bugtracker specific settings"""
    
    owner_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_name') }})  
    type: BugtrackerGetSettings200ApplicationJSONSettingsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""type of bugtracker"""  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callback_url'), 'exclude': lambda f: f is None }})  
    
class BugtrackerGetSettings200ApplicationJSONStateEnum(str, Enum):
    r"""bugtracker state"""
    ENABLED = 'enabled'
    DISABLED = 'disabled'
    UNAUTHORIZED = 'unauthorized'

class BugtrackerGetSettings200ApplicationJSONTypeEnum(str, Enum):
    r"""type of bugtracker"""
    GITHUB = 'github'
    VSTS = 'vsts'
    JIRA = 'jira'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BugtrackerGetSettings200ApplicationJSON:
    r"""Alerting bugtracker resource"""
    
    event_types: Optional[list[BugtrackerGetSettings200ApplicationJSONEventTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_types'), 'exclude': lambda f: f is None }})
    r"""Event types enabled for bugtracker"""  
    settings: Optional[BugtrackerGetSettings200ApplicationJSONSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})
    r"""Bugtracker specific settings"""  
    state: Optional[BugtrackerGetSettings200ApplicationJSONStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""bugtracker state"""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_id'), 'exclude': lambda f: f is None }})
    r"""ID of OAuth token"""  
    type: Optional[BugtrackerGetSettings200ApplicationJSONTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type of bugtracker"""  
    

@dataclasses.dataclass
class BugtrackerGetSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bugtracker_get_settings_200_application_json_object: Optional[BugtrackerGetSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    bugtracker_get_settings_default_application_json_object: Optional[BugtrackerGetSettingsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    