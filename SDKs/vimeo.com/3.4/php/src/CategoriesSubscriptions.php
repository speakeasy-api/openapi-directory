<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CategoriesSubscriptions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Check if a user follows a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryResponse
     */
	public function checkIfUserSubscribedToCategory(
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/categories/{category}', \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Check if a user follows a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Response
     */
	public function checkIfUserSubscribedToCategoryAlt1(
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/categories/{category}', \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckIfUserSubscribedToCategoryAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all the categories that a user follows
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsResponse
     */
	public function getCategorySubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/categories', \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Category>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the categories that a user follows
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Response
     */
	public function getCategorySubscriptionsAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/categories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCategorySubscriptionsAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Category>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subscribe a user to a single category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryResponse
     */
	public function subscribeToCategory(
        \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/categories/{category}', \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Subscribe a user to a single category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Response
     */
	public function subscribeToCategoryAlt1(
        \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/categories/{category}', \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribeToCategoryAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Unsubscribe a user from a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryResponse
     */
	public function unsubscribeFromCategory(
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/categories/{category}', \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Unsubscribe a user from a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Response
     */
	public function unsubscribeFromCategoryAlt1(
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/categories/{category}', \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnsubscribeFromCategoryAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}