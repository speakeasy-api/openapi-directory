/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The code for the Lambda function. You can either specify an object in Amazon S3, upload a .zip file archive deployment package directly, or specify the URI of a container image.
 */
export class CreateFunctionRequestBodyCode extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ImageUri" })
  imageUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "S3Bucket" })
  s3Bucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "S3Key" })
  s3Key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "S3ObjectVersion" })
  s3ObjectVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ZipFile" })
  zipFile?: string;
}

/**
 * The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
 */
export class CreateFunctionRequestBodyDeadLetterConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "TargetArn" })
  targetArn?: string;
}

/**
 * A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration.
 */
export class CreateFunctionRequestBodyEnvironment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Variables" })
  variables?: Record<string, string>;
}

/**
 * The size of the function's <code>/tmp</code> directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
 */
export class CreateFunctionRequestBodyEphemeralStorage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Size" })
  size?: number;
}

/**
 * Configuration values that override the container image Dockerfile settings. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms">Container image settings</a>.
 */
export class CreateFunctionRequestBodyImageConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Command" })
  command?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "EntryPoint" })
  entryPoint?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "WorkingDirectory" })
  workingDirectory?: string;
}

/**
 * The type of deployment package. Set to <code>Image</code> for container image and set to <code>Zip</code> for .zip file archive.
 */
export enum CreateFunctionRequestBodyPackageTypeEnum {
  Zip = "Zip",
  Image = "Image",
}

/**
 * <p>The identifier of the function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>. Runtime is required if the deployment package is a .zip file archive.</p> <p>The following list includes deprecated runtimes. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy">Runtime deprecation policy</a>.</p>
 */
export enum CreateFunctionRequestBodyRuntimeEnum {
  Nodejs = "nodejs",
  Nodejs43 = "nodejs4.3",
  Nodejs610 = "nodejs6.10",
  Nodejs810 = "nodejs8.10",
  Nodejs10X = "nodejs10.x",
  Nodejs12X = "nodejs12.x",
  Nodejs14X = "nodejs14.x",
  Nodejs16X = "nodejs16.x",
  Java8 = "java8",
  Java8Al2 = "java8.al2",
  Java11 = "java11",
  Python27 = "python2.7",
  Python36 = "python3.6",
  Python37 = "python3.7",
  Python38 = "python3.8",
  Python39 = "python3.9",
  Dotnetcore10 = "dotnetcore1.0",
  Dotnetcore20 = "dotnetcore2.0",
  Dotnetcore21 = "dotnetcore2.1",
  Dotnetcore31 = "dotnetcore3.1",
  Dotnet6 = "dotnet6",
  Nodejs43Edge = "nodejs4.3-edge",
  Go1X = "go1.x",
  Ruby25 = "ruby2.5",
  Ruby27 = "ruby2.7",
  Provided = "provided",
  ProvidedAl2 = "provided.al2",
  Nodejs18X = "nodejs18.x",
}

/**
 * <p>The function's Lambda SnapStart setting. Set <code>ApplyOn</code> to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p> <p>SnapStart is supported with the <code>java11</code> runtime. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html">Improving startup performance with Lambda SnapStart</a>.</p>
 */
export class CreateFunctionRequestBodySnapStart extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ApplyOn" })
  applyOn?: shared.SnapStartApplyOnEnum;
}

/**
 * The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html">X-Ray</a> tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.
 */
export class CreateFunctionRequestBodyTracingConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Mode" })
  mode?: shared.TracingModeEnum;
}

/**
 * The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">Configuring a Lambda function to access resources in a VPC</a>.
 */
export class CreateFunctionRequestBodyVpcConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "SecurityGroupIds" })
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "SubnetIds" })
  subnetIds?: string[];
}

export class CreateFunctionRequestBody extends SpeakeasyBase {
  /**
   * The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is <code>x86_64</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Architectures" })
  architectures?: shared.ArchitectureEnum[];

  /**
   * The code for the Lambda function. You can either specify an object in Amazon S3, upload a .zip file archive deployment package directly, or specify the URI of a container image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Code" })
  @Type(() => CreateFunctionRequestBodyCode)
  code: CreateFunctionRequestBodyCode;

  /**
   * To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CodeSigningConfigArn" })
  codeSigningConfigArn?: string;

  /**
   * The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeadLetterConfig" })
  @Type(() => CreateFunctionRequestBodyDeadLetterConfig)
  deadLetterConfig?: CreateFunctionRequestBodyDeadLetterConfig;

  /**
   * A description of the function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Environment" })
  @Type(() => CreateFunctionRequestBodyEnvironment)
  environment?: CreateFunctionRequestBodyEnvironment;

  /**
   * The size of the function's <code>/tmp</code> directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EphemeralStorage" })
  @Type(() => CreateFunctionRequestBodyEphemeralStorage)
  ephemeralStorage?: CreateFunctionRequestBodyEphemeralStorage;

  /**
   * Connection settings for an Amazon EFS file system.
   */
  @SpeakeasyMetadata({ elemType: shared.FileSystemConfig })
  @Expose({ name: "FileSystemConfigs" })
  @Type(() => shared.FileSystemConfig)
  fileSystemConfigs?: shared.FileSystemConfig[];

  /**
   * <p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FunctionName" })
  functionName: string;

  /**
   * The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html">Lambda programming model</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Handler" })
  handler?: string;

  /**
   * Configuration values that override the container image Dockerfile settings. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms">Container image settings</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ImageConfig" })
  @Type(() => CreateFunctionRequestBodyImageConfig)
  imageConfig?: CreateFunctionRequestBodyImageConfig;

  /**
   * The ARN of the Key Management Service (KMS) customer managed key that's used to encrypt your function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption">environment variables</a>. When <a href="https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html">Lambda SnapStart</a> is activated, this key is also used to encrypt your function's snapshot. If you don't provide a customer managed key, Lambda uses a default service key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "KMSKeyArn" })
  kmsKeyArn?: string;

  /**
   * A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Layers" })
  layers?: string[];

  /**
   * The amount of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console">memory available to the function</a> at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MemorySize" })
  memorySize?: number;

  /**
   * The type of deployment package. Set to <code>Image</code> for container image and set to <code>Zip</code> for .zip file archive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PackageType" })
  packageType?: CreateFunctionRequestBodyPackageTypeEnum;

  /**
   * Set to true to publish the first version of the function during creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Publish" })
  publish?: boolean;

  /**
   * The Amazon Resource Name (ARN) of the function's execution role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Role" })
  role: string;

  /**
   * <p>The identifier of the function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>. Runtime is required if the deployment package is a .zip file archive.</p> <p>The following list includes deprecated runtimes. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy">Runtime deprecation policy</a>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Runtime" })
  runtime?: CreateFunctionRequestBodyRuntimeEnum;

  /**
   * <p>The function's Lambda SnapStart setting. Set <code>ApplyOn</code> to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p> <p>SnapStart is supported with the <code>java11</code> runtime. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html">Improving startup performance with Lambda SnapStart</a>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SnapStart" })
  @Type(() => CreateFunctionRequestBodySnapStart)
  snapStart?: CreateFunctionRequestBodySnapStart;

  /**
   * A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to apply to the function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  /**
   * The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html">Lambda execution environment</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Timeout" })
  timeout?: number;

  /**
   * The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html">X-Ray</a> tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TracingConfig" })
  @Type(() => CreateFunctionRequestBodyTracingConfig)
  tracingConfig?: CreateFunctionRequestBodyTracingConfig;

  /**
   * The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">Configuring a Lambda function to access resources in a VPC</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VpcConfig" })
  @Type(() => CreateFunctionRequestBodyVpcConfig)
  vpcConfig?: CreateFunctionRequestBodyVpcConfig;
}

export class CreateFunctionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateFunctionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateFunctionResponse extends SpeakeasyBase {
  /**
   * CodeSigningConfigNotFoundException
   */
  @SpeakeasyMetadata()
  codeSigningConfigNotFoundException?: any;

  /**
   * CodeStorageExceededException
   */
  @SpeakeasyMetadata()
  codeStorageExceededException?: any;

  /**
   * CodeVerificationFailedException
   */
  @SpeakeasyMetadata()
  codeVerificationFailedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  functionConfiguration?: shared.FunctionConfiguration;

  /**
   * InvalidCodeSignatureException
   */
  @SpeakeasyMetadata()
  invalidCodeSignatureException?: any;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceException
   */
  @SpeakeasyMetadata()
  serviceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
