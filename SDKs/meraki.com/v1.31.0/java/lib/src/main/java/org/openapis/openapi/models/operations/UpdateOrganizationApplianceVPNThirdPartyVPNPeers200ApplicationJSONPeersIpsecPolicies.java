/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies - Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
 */
public class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies {
    /**
     * This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childAuthAlgo")
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum[] childAuthAlgo;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withChildAuthAlgo(UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum[] childAuthAlgo) {
        this.childAuthAlgo = childAuthAlgo;
        return this;
    }
    
    /**
     * This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childCipherAlgo")
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum[] childCipherAlgo;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withChildCipherAlgo(UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum[] childCipherAlgo) {
        this.childCipherAlgo = childCipherAlgo;
        return this;
    }
    
    /**
     * The lifetime of the Phase 2 SA in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childLifetime")
    public Long childLifetime;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withChildLifetime(Long childLifetime) {
        this.childLifetime = childLifetime;
        return this;
    }
    
    /**
     * This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childPfsGroup")
    public String[] childPfsGroup;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withChildPfsGroup(String[] childPfsGroup) {
        this.childPfsGroup = childPfsGroup;
        return this;
    }
    
    /**
     * This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ikeAuthAlgo")
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum[] ikeAuthAlgo;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withIkeAuthAlgo(UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum[] ikeAuthAlgo) {
        this.ikeAuthAlgo = ikeAuthAlgo;
        return this;
    }
    
    /**
     * This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ikeCipherAlgo")
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum[] ikeCipherAlgo;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withIkeCipherAlgo(UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum[] ikeCipherAlgo) {
        this.ikeCipherAlgo = ikeCipherAlgo;
        return this;
    }
    
    /**
     * This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ikeDiffieHellmanGroup")
    public String[] ikeDiffieHellmanGroup;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withIkeDiffieHellmanGroup(String[] ikeDiffieHellmanGroup) {
        this.ikeDiffieHellmanGroup = ikeDiffieHellmanGroup;
        return this;
    }
    
    /**
     * The lifetime of the Phase 1 SA in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ikeLifetime")
    public Long ikeLifetime;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withIkeLifetime(Long ikeLifetime) {
        this.ikeLifetime = ikeLifetime;
        return this;
    }
    
    /**
     * [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ikePrfAlgo")
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum[] ikePrfAlgo;
    public UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies withIkePrfAlgo(UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum[] ikePrfAlgo) {
        this.ikePrfAlgo = ikePrfAlgo;
        return this;
    }
    
}
