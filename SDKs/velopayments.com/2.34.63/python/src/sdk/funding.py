"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Funding:
    r"""<p>APIs for initiating funding of source accounts from external sources and viewing balance updates</p>"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_funding_request_v2(self, request: operations.CreateFundingRequestV2Request) -> operations.CreateFundingRequestV2Response:
        r"""Create Funding Request
        Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateFundingRequestV2Request, base_url, '/v2/sourceAccounts/{sourceAccountId}/fundingRequest', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "funding_request_v2", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFundingRequestV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def create_funding_request_v3(self, request: operations.CreateFundingRequestV3Request) -> operations.CreateFundingRequestV3Response:
        r"""Create Funding Request
        <p>Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateFundingRequestV3Request, base_url, '/v3/sourceAccounts/{sourceAccountId}/fundingRequest', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "funding_request_v3", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFundingRequestV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def get_funding_account_v2(self, request: operations.GetFundingAccountV2Request) -> operations.GetFundingAccountV2Response:
        r"""Get Funding Account
        Get Funding Account by ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFundingAccountV2Request, base_url, '/v2/fundingAccounts/{fundingAccountId}', request)
        
        query_params = utils.get_query_params(operations.GetFundingAccountV2Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFundingAccountV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FundingAccountResponseV2])
                res.funding_account_response_v2 = out
        elif http_res.status_code == 400:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def get_funding_accounts_v2(self, request: operations.GetFundingAccountsV2Request) -> operations.GetFundingAccountsV2Response:
        r"""Get Funding Accounts
        Get the funding accounts.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/fundingAccounts'
        
        query_params = utils.get_query_params(operations.GetFundingAccountsV2Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFundingAccountsV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFundingAccountsResponseV2])
                res.list_funding_accounts_response_v2 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out

        return res

    def get_funding_by_id_v1(self, request: operations.GetFundingByIDV1Request) -> operations.GetFundingByIDV1Response:
        r"""Get Funding
        Get Funding by Id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFundingByIDV1Request, base_url, '/v1/fundings/{fundingId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFundingByIDV1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FundingResponse])
                res.funding_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def list_funding_audit_deltas(self, request: operations.ListFundingAuditDeltasRequest) -> operations.ListFundingAuditDeltasResponse:
        r"""Get Funding Audit Delta
        Get funding audit deltas for a payor
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/deltas/fundings'
        
        query_params = utils.get_query_params(operations.ListFundingAuditDeltasRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFundingAuditDeltasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse])
                res.page_resource_funding_payor_status_audit_response_funding_payor_status_audit_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out

        return res

    