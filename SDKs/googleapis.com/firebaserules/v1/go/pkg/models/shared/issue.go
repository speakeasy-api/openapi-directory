// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IssueSeverityEnum - The severity of the issue.
type IssueSeverityEnum string

const (
	IssueSeverityEnumSeverityUnspecified IssueSeverityEnum = "SEVERITY_UNSPECIFIED"
	IssueSeverityEnumDeprecation         IssueSeverityEnum = "DEPRECATION"
	IssueSeverityEnumWarning             IssueSeverityEnum = "WARNING"
	IssueSeverityEnumError               IssueSeverityEnum = "ERROR"
)

func (e IssueSeverityEnum) ToPointer() *IssueSeverityEnum {
	return &e
}

func (e *IssueSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "DEPRECATION":
		fallthrough
	case "WARNING":
		fallthrough
	case "ERROR":
		*e = IssueSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssueSeverityEnum: %v", v)
	}
}

// Issue - Issues include warnings, errors, and deprecation notices.
type Issue struct {
	// Short error description.
	Description *string `json:"description,omitempty"`
	// The severity of the issue.
	Severity *IssueSeverityEnum `json:"severity,omitempty"`
	// Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
	SourcePosition *SourcePosition `json:"sourcePosition,omitempty"`
}
