"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Offerobject:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_offerobject_addmessage(self, request: operations.WalletobjectsOfferobjectAddmessageRequest, security: operations.WalletobjectsOfferobjectAddmessageSecurity) -> operations.WalletobjectsOfferobjectAddmessageResponse:
        r"""Adds a message to the offer object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsOfferobjectAddmessageRequest, base_url, '/walletobjects/v1/offerObject/{resourceId}/addMessage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_message_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsOfferobjectAddmessageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsOfferobjectAddmessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferObjectAddMessageResponse])
                res.offer_object_add_message_response = out

        return res

    def walletobjects_offerobject_get(self, request: operations.WalletobjectsOfferobjectGetRequest, security: operations.WalletobjectsOfferobjectGetSecurity) -> operations.WalletobjectsOfferobjectGetResponse:
        r"""Returns the offer object with the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsOfferobjectGetRequest, base_url, '/walletobjects/v1/offerObject/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsOfferobjectGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsOfferobjectGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferObject])
                res.offer_object = out

        return res

    def walletobjects_offerobject_insert(self, request: operations.WalletobjectsOfferobjectInsertRequest, security: operations.WalletobjectsOfferobjectInsertSecurity) -> operations.WalletobjectsOfferobjectInsertResponse:
        r"""Inserts an offer object with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/offerObject'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "offer_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsOfferobjectInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsOfferobjectInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferObject])
                res.offer_object = out

        return res

    def walletobjects_offerobject_list(self, request: operations.WalletobjectsOfferobjectListRequest, security: operations.WalletobjectsOfferobjectListSecurity) -> operations.WalletobjectsOfferobjectListResponse:
        r"""Returns a list of all offer objects for a given issuer ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/offerObject'
        
        query_params = utils.get_query_params(operations.WalletobjectsOfferobjectListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsOfferobjectListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferObjectListResponse])
                res.offer_object_list_response = out

        return res

    def walletobjects_offerobject_patch(self, request: operations.WalletobjectsOfferobjectPatchRequest, security: operations.WalletobjectsOfferobjectPatchSecurity) -> operations.WalletobjectsOfferobjectPatchResponse:
        r"""Updates the offer object referenced by the given object ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsOfferobjectPatchRequest, base_url, '/walletobjects/v1/offerObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "offer_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsOfferobjectPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsOfferobjectPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferObject])
                res.offer_object = out

        return res

    def walletobjects_offerobject_update(self, request: operations.WalletobjectsOfferobjectUpdateRequest, security: operations.WalletobjectsOfferobjectUpdateSecurity) -> operations.WalletobjectsOfferobjectUpdateResponse:
        r"""Updates the offer object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsOfferobjectUpdateRequest, base_url, '/walletobjects/v1/offerObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "offer_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsOfferobjectUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsOfferobjectUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OfferObject])
                res.offer_object = out

        return res

    