<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UpdateLoginPasswordPolicies - Request model for updating login password policies
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UpdateLoginPasswordPolicies
{
    /**
     * Password character rules
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CharacterRules $characterRules
     */
	#[\JMS\Serializer\Annotation\SerializedName('characterRules')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CharacterRules')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CharacterRules $characterRules = null;
    
    /**
     * &#128679; Deprecated since v4.24.0
     * 
     * 
     * Determines whether a login password change should be enforced for all users
     * 
     * Only takes effect, if login password policies get stricter
     * 
     * @var ?bool $enforceLoginPasswordChange
     */
	#[\JMS\Serializer\Annotation\SerializedName('enforceLoginPasswordChange')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enforceLoginPasswordChange = null;
    
    /**
     * Minimum number of characters a password must contain
     * 
     * @var ?int $minLength
     */
	#[\JMS\Serializer\Annotation\SerializedName('minLength')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $minLength = null;
    
    /**
     * Number of passwords to archive
     * 
     * 
     * (must be between `0` and `10`; `0` means that password history is disabled)
     * 
     * @var ?int $numberOfArchivedPasswords
     */
	#[\JMS\Serializer\Annotation\SerializedName('numberOfArchivedPasswords')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $numberOfArchivedPasswords = null;
    
    /**
     * Password expiration information
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PasswordExpiration $passwordExpiration
     */
	#[\JMS\Serializer\Annotation\SerializedName('passwordExpiration')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PasswordExpiration')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PasswordExpiration $passwordExpiration = null;
    
    /**
     * Determines whether a password must NOT contain word(s) from a dictionary
     * 
     * @var ?bool $rejectDictionaryWords
     */
	#[\JMS\Serializer\Annotation\SerializedName('rejectDictionaryWords')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $rejectDictionaryWords = null;
    
    /**
     * Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
     * 
     * 
     * (min. 4 character pattern)
     * 
     * @var ?bool $rejectKeyboardPatterns
     */
	#[\JMS\Serializer\Annotation\SerializedName('rejectKeyboardPatterns')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $rejectKeyboardPatterns = null;
    
    /**
     * Determines whether a password must NOT contain user info (first name, last name, email, user name)
     * 
     * @var ?bool $rejectUserInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('rejectUserInfo')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $rejectUserInfo = null;
    
    /**
     * User lockout information
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UserLockout $userLockout
     */
	#[\JMS\Serializer\Annotation\SerializedName('userLockout')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\UserLockout')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UserLockout $userLockout = null;
    
	public function __construct()
	{
		$this->characterRules = null;
		$this->enforceLoginPasswordChange = null;
		$this->minLength = null;
		$this->numberOfArchivedPasswords = null;
		$this->passwordExpiration = null;
		$this->rejectDictionaryWords = null;
		$this->rejectKeyboardPatterns = null;
		$this->rejectUserInfo = null;
		$this->userLockout = null;
	}
}
