"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import aircraftequipment as shared_aircraftequipment
from ..shared import co2emission as shared_co2emission
from ..shared import flightendpoint as shared_flightendpoint
from ..shared import flightstop as shared_flightstop
from ..shared import operatingflight as shared_operatingflight
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Segment:
    r"""defining a flight segment; including both operating and marketing details when applicable"""
    
    aircraft: Optional[shared_aircraftequipment.AircraftEquipment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aircraft'), 'exclude': lambda f: f is None }})
    r"""information related to the aircraft"""  
    arrival: Optional[shared_flightendpoint.FlightEndPoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrival'), 'exclude': lambda f: f is None }})
    r"""departure or arrival information"""  
    blacklisted_in_eu: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blacklistedInEU'), 'exclude': lambda f: f is None }})
    r"""When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission.
    
    To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines. 
    The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline
    """  
    carrier_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrierCode'), 'exclude': lambda f: f is None }})
    r"""providing the airline / carrier code"""  
    co2_emissions: Optional[list[shared_co2emission.Co2Emission]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2Emissions'), 'exclude': lambda f: f is None }})
    r"""Co2 informations"""  
    departure: Optional[shared_flightendpoint.FlightEndPoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departure'), 'exclude': lambda f: f is None }})
    r"""departure or arrival information"""  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the segment"""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""the flight number as assigned by the carrier"""  
    number_of_stops: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfStops'), 'exclude': lambda f: f is None }})
    r"""Number of stops"""  
    operating: Optional[shared_operatingflight.OperatingFlight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operating'), 'exclude': lambda f: f is None }})
    r"""information about the operating flight"""  
    stops: Optional[list[shared_flightstop.FlightStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stops'), 'exclude': lambda f: f is None }})
    r"""information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge..."""  
    