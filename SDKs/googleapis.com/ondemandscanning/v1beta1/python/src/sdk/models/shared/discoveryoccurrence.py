"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import analysiscompleted as shared_analysiscompleted
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DiscoveryOccurrenceAnalysisStatusEnum(str, Enum):
    r"""The status of discovery for the resource."""
    ANALYSIS_STATUS_UNSPECIFIED = 'ANALYSIS_STATUS_UNSPECIFIED'
    PENDING = 'PENDING'
    SCANNING = 'SCANNING'
    FINISHED_SUCCESS = 'FINISHED_SUCCESS'
    COMPLETE = 'COMPLETE'
    FINISHED_FAILED = 'FINISHED_FAILED'
    FINISHED_UNSUPPORTED = 'FINISHED_UNSUPPORTED'

class DiscoveryOccurrenceContinuousAnalysisEnum(str, Enum):
    r"""Whether the resource is continuously analyzed."""
    CONTINUOUS_ANALYSIS_UNSPECIFIED = 'CONTINUOUS_ANALYSIS_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DiscoveryOccurrence:
    r"""Provides information about the analysis status of a discovered resource."""
    
    analysis_completed: Optional[shared_analysiscompleted.AnalysisCompleted] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisCompleted'), 'exclude': lambda f: f is None }})
    r"""Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource."""  
    analysis_error: Optional[list[shared_status.Status]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisError'), 'exclude': lambda f: f is None }})
    r"""Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors."""  
    analysis_status: Optional[DiscoveryOccurrenceAnalysisStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisStatus'), 'exclude': lambda f: f is None }})
    r"""The status of discovery for the resource."""  
    analysis_status_error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisStatusError'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    archive_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archiveTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time occurrences related to this discovery occurrence were archived."""  
    continuous_analysis: Optional[DiscoveryOccurrenceContinuousAnalysisEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continuousAnalysis'), 'exclude': lambda f: f is None }})
    r"""Whether the resource is continuously analyzed."""  
    cpe: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpe'), 'exclude': lambda f: f is None }})
    r"""The CPE of the resource being scanned."""  
    last_scan_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastScanTime'), 'exclude': lambda f: f is None }})
    r"""The last time this resource was scanned."""  
    