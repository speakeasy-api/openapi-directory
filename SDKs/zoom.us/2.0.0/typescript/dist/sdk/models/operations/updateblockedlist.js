"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateBlockedListResponse = exports.UpdateBlockedListRequest = exports.UpdateBlockedListApplicationJSON = exports.UpdateBlockedListApplicationJSONStatusEnum = exports.UpdateBlockedListApplicationJSONMatchTypeEnum = exports.UpdateBlockedListApplicationJSONBlockTypeEnum = exports.UpdateBlockedListSecurity = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var UpdateBlockedListSecurity = /** @class */ (function (_super) {
    __extends(UpdateBlockedListSecurity, _super);
    function UpdateBlockedListSecurity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "security, scheme=true;type=oauth2;name=Authorization",
        }),
        __metadata("design:type", String)
    ], UpdateBlockedListSecurity.prototype, "oAuth", void 0);
    return UpdateBlockedListSecurity;
}(utils_1.SpeakeasyBase));
exports.UpdateBlockedListSecurity = UpdateBlockedListSecurity;
/**
 * State whether you want the block type to be inbound or outbound.<br>
 *
 * @remarks
 * `inbound`: Pass this value to prevent the blocked number or prefix from calling in to phone users.<br>
 * `outbound`: Pass this value to prevent phone users from calling the blocked number or prefix.
 */
var UpdateBlockedListApplicationJSONBlockTypeEnum;
(function (UpdateBlockedListApplicationJSONBlockTypeEnum) {
    UpdateBlockedListApplicationJSONBlockTypeEnum["Inbound"] = "inbound";
    UpdateBlockedListApplicationJSONBlockTypeEnum["Outbound"] = "outbound";
})(UpdateBlockedListApplicationJSONBlockTypeEnum = exports.UpdateBlockedListApplicationJSONBlockTypeEnum || (exports.UpdateBlockedListApplicationJSONBlockTypeEnum = {}));
/**
 * Specify the match type for the blocked list. The values can be one of the following:<br><br>
 *
 * @remarks
 * `phoneNumber`: Choose this option (Phone Number Match) if you want to block a specific phone number. Then, in the `phone_number` field, provide the phone number along with the country code.<br><br>
 * `prefix`: Choose this option (Prefix Match) if you want to block all numbers with a specific country code and area code. Next, in the `phone_number` field, enter a country code as part of the prefix. For example, entering 1907 blocks numbers with country code 1 and area code 907.
 */
var UpdateBlockedListApplicationJSONMatchTypeEnum;
(function (UpdateBlockedListApplicationJSONMatchTypeEnum) {
    UpdateBlockedListApplicationJSONMatchTypeEnum["PhoneNumber"] = "phoneNumber";
    UpdateBlockedListApplicationJSONMatchTypeEnum["Prefix"] = "prefix";
})(UpdateBlockedListApplicationJSONMatchTypeEnum = exports.UpdateBlockedListApplicationJSONMatchTypeEnum || (exports.UpdateBlockedListApplicationJSONMatchTypeEnum = {}));
/**
 * Enable or disable the blocking. One of the following values are allowed:<br>
 *
 * @remarks
 * `active`: Keep the blocking active.<br>
 * `inactive`: Disable the blocking.
 */
var UpdateBlockedListApplicationJSONStatusEnum;
(function (UpdateBlockedListApplicationJSONStatusEnum) {
    UpdateBlockedListApplicationJSONStatusEnum["Active"] = "active";
    UpdateBlockedListApplicationJSONStatusEnum["Inactive"] = "inactive";
})(UpdateBlockedListApplicationJSONStatusEnum = exports.UpdateBlockedListApplicationJSONStatusEnum || (exports.UpdateBlockedListApplicationJSONStatusEnum = {}));
var UpdateBlockedListApplicationJSON = /** @class */ (function (_super) {
    __extends(UpdateBlockedListApplicationJSON, _super);
    function UpdateBlockedListApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "block_type" }),
        __metadata("design:type", String)
    ], UpdateBlockedListApplicationJSON.prototype, "blockType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], UpdateBlockedListApplicationJSON.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "match_type" }),
        __metadata("design:type", String)
    ], UpdateBlockedListApplicationJSON.prototype, "matchType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "phone_number" }),
        __metadata("design:type", String)
    ], UpdateBlockedListApplicationJSON.prototype, "phoneNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], UpdateBlockedListApplicationJSON.prototype, "status", void 0);
    return UpdateBlockedListApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.UpdateBlockedListApplicationJSON = UpdateBlockedListApplicationJSON;
var UpdateBlockedListRequest = /** @class */ (function (_super) {
    __extends(UpdateBlockedListRequest, _super);
    function UpdateBlockedListRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateBlockedListApplicationJSON)
    ], UpdateBlockedListRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=blockedListId",
        }),
        __metadata("design:type", String)
    ], UpdateBlockedListRequest.prototype, "blockedListId", void 0);
    return UpdateBlockedListRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateBlockedListRequest = UpdateBlockedListRequest;
var UpdateBlockedListResponse = /** @class */ (function (_super) {
    __extends(UpdateBlockedListResponse, _super);
    function UpdateBlockedListResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], UpdateBlockedListResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateBlockedListResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateBlockedListResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateBlockedListResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateBlockedListResponse.prototype, "updateBlockedList204ApplicationJSONAny", void 0);
    return UpdateBlockedListResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateBlockedListResponse = UpdateBlockedListResponse;
