"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class ReferenceData:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def references_aircraft_by_aircraft_code_get(self, request: operations.ReferencesAircraftByAircraftCodeGetRequest, security: operations.ReferencesAircraftByAircraftCodeGetSecurity) -> operations.ReferencesAircraftByAircraftCodeGetResponse:
        r"""Aircraft
        List all aircraft types or one specific aircraft type.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReferencesAircraftByAircraftCodeGetRequest, base_url, '/references/aircraft/{aircraftCode}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ReferencesAircraftByAircraftCodeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReferencesAircraftByAircraftCodeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.references_aircraft_by_aircraft_code_get_200_application_json_object = out

        return res

    def references_airlines_by_airline_code_get(self, request: operations.ReferencesAirlinesByAirlineCodeGetRequest, security: operations.ReferencesAirlinesByAirlineCodeGetSecurity) -> operations.ReferencesAirlinesByAirlineCodeGetResponse:
        r"""Airlines
        List all airlines or one specific airline.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReferencesAirlinesByAirlineCodeGetRequest, base_url, '/references/airlines/{airlineCode}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ReferencesAirlinesByAirlineCodeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReferencesAirlinesByAirlineCodeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.references_airlines_by_airline_code_get_200_application_json_object = out

        return res

    def references_airports_by_airport_code_get(self, request: operations.ReferencesAirportsByAirportCodeGetRequest, security: operations.ReferencesAirportsByAirportCodeGetSecurity) -> operations.ReferencesAirportsByAirportCodeGetResponse:
        r"""Airports
        List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReferencesAirportsByAirportCodeGetRequest, base_url, '/references/airports/{airportCode}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ReferencesAirportsByAirportCodeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReferencesAirportsByAirportCodeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AirportResponse])
                res.airport_response = out

        return res

    def references_airports_nearest_by_latitude_and_longitude_get(self, request: operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest, security: operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetSecurity) -> operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse:
        r"""Nearest Airports
        List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest, base_url, '/references/airports/nearest/{latitude},{longitude}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.references_airports_nearest_by_latitude_and_longitude_get_200_application_json_object = out

        return res

    def references_cities_by_city_code_get(self, request: operations.ReferencesCitiesByCityCodeGetRequest, security: operations.ReferencesCitiesByCityCodeGetSecurity) -> operations.ReferencesCitiesByCityCodeGetResponse:
        r"""Cities
        List all cities or one specific city. It is possible to request the response in a specific language.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReferencesCitiesByCityCodeGetRequest, base_url, '/references/cities/{cityCode}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ReferencesCitiesByCityCodeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReferencesCitiesByCityCodeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.references_cities_by_city_code_get_200_application_json_object = out

        return res

    def references_countries_by_country_code_get(self, request: operations.ReferencesCountriesByCountryCodeGetRequest, security: operations.ReferencesCountriesByCountryCodeGetSecurity) -> operations.ReferencesCountriesByCountryCodeGetResponse:
        r"""Countries
        List all countries or one specific country. It is possible to request the response in a specific language.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReferencesCountriesByCountryCodeGetRequest, base_url, '/references/countries/{countryCode}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ReferencesCountriesByCountryCodeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReferencesCountriesByCountryCodeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.references_countries_by_country_code_get_200_application_json_object = out

        return res

    