// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetStatsSeriesPeriodFieldsPeriodEnum - The period for the series (day or month)
type GetStatsSeriesPeriodFieldsPeriodEnum string

const (
	GetStatsSeriesPeriodFieldsPeriodEnumDay   GetStatsSeriesPeriodFieldsPeriodEnum = "day"
	GetStatsSeriesPeriodFieldsPeriodEnumMonth GetStatsSeriesPeriodFieldsPeriodEnum = "month"
)

func (e GetStatsSeriesPeriodFieldsPeriodEnum) ToPointer() *GetStatsSeriesPeriodFieldsPeriodEnum {
	return &e
}

func (e *GetStatsSeriesPeriodFieldsPeriodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "month":
		*e = GetStatsSeriesPeriodFieldsPeriodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStatsSeriesPeriodFieldsPeriodEnum: %v", v)
	}
}

type GetStatsSeriesPeriodFieldsRequest struct {
	// The end date for this series (in millis)
	End *int64 `queryParam:"style=form,explode=true,name=end"`
	// The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields.
	Fields string `pathParam:"style=simple,explode=false,name=fields"`
	// The period for the series (day or month)
	Period GetStatsSeriesPeriodFieldsPeriodEnum `pathParam:"style=simple,explode=false,name=period"`
	// A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The start date for this series (in millis)
	Start *int64 `queryParam:"style=form,explode=true,name=start"`
}

type GetStatsSeriesPeriodFieldsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
