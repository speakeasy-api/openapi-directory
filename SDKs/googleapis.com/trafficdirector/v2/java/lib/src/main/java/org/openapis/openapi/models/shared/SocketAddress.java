/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SocketAddress - [#next-free-field: 7]
 */
public class SocketAddress {
    /**
     * The address for this socket. :ref:`Listeners ` will bind to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::`` to bind to any address. [#comment:TODO(zuercher) reinstate when implemented: It is possible to distinguish a Listener address via the prefix/suffix matching in :ref:`FilterChainMatch `.] When used within an upstream :ref:`BindConfig `, the address controls the source address of outbound connections. For :ref:`clusters `, the cluster type determines whether the address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized via :ref:`resolver_name `.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;

    public SocketAddress withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * When binding to an IPv6 address above, this enables `IPv4 compatibility `_. Binding to ``::`` will allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into IPv6 space as ``::FFFF:``.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv4Compat")
    public Boolean ipv4Compat;

    public SocketAddress withIpv4Compat(Boolean ipv4Compat) {
        this.ipv4Compat = ipv4Compat;
        return this;
    }
    
    /**
     * This is only valid if :ref:`resolver_name ` is specified below and the named resolver is capable of named port resolution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namedPort")
    public String namedPort;

    public SocketAddress withNamedPort(String namedPort) {
        this.namedPort = namedPort;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portValue")
    public Long portValue;

    public SocketAddress withPortValue(Long portValue) {
        this.portValue = portValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public SocketAddressProtocolEnum protocol;

    public SocketAddress withProtocol(SocketAddressProtocolEnum protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * The name of the custom resolver. This must have been registered with Envoy. If this is empty, a context dependent default applies. If the address is a concrete IP address, no resolution will occur. If address is a hostname this should be set for resolution other than DNS. Specifying a custom resolver with *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolverName")
    public String resolverName;

    public SocketAddress withResolverName(String resolverName) {
        this.resolverName = resolverName;
        return this;
    }
    
    public SocketAddress(){}
}
