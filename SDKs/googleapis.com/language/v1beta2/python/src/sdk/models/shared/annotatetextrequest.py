"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import document as shared_document
from ..shared import features as shared_features
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AnnotateTextRequestEncodingTypeEnum(str, Enum):
    r"""The encoding type used by the API to calculate offsets."""
    NONE = 'NONE'
    UTF8 = 'UTF8'
    UTF16 = 'UTF16'
    UTF32 = 'UTF32'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnnotateTextRequest:
    r"""The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call."""
    
    document: Optional[shared_document.Document] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document'), 'exclude': lambda f: f is None }})
    r"""Represents the input to API methods."""  
    encoding_type: Optional[AnnotateTextRequestEncodingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encodingType'), 'exclude': lambda f: f is None }})
    r"""The encoding type used by the API to calculate offsets."""  
    features: Optional[shared_features.Features] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})
    r"""All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input. Next ID: 11"""  
    