"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ThreadPoolInfo:
    r"""Success"""
    
    available_completion_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableCompletionThreads'), 'exclude': lambda f: f is None }})  
    available_worker_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableWorkerThreads'), 'exclude': lambda f: f is None }})  
    max_completion_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxCompletionThreads'), 'exclude': lambda f: f is None }})  
    max_worker_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxWorkerThreads'), 'exclude': lambda f: f is None }})  
    min_completion_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minCompletionThreads'), 'exclude': lambda f: f is None }})  
    min_worker_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minWorkerThreads'), 'exclude': lambda f: f is None }})  
    occupied_completion_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occupiedCompletionThreads'), 'exclude': lambda f: f is None }})  
    occupied_worker_threads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occupiedWorkerThreads'), 'exclude': lambda f: f is None }})  
    