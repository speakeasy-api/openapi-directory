"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PretargetingConfigDimensions:
    
    height: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Height in pixels."""  
    width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Width in pixels."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PretargetingConfigExcludedPlacements:
    
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})
    r"""The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the placement."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PretargetingConfigPlacements:
    
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})
    r"""The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the placement."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PretargetingConfig:
    r"""Successful response"""
    
    billing_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingId'), 'exclude': lambda f: f is None }})
    r"""The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically."""  
    config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configId'), 'exclude': lambda f: f is None }})
    r"""The config id; generated automatically. Leave this field blank for insert requests."""  
    config_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configName'), 'exclude': lambda f: f is None }})
    r"""The name of the config. Must be unique. Required for all requests."""  
    creative_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeType'), 'exclude': lambda f: f is None }})
    r"""List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO."""  
    dimensions: Optional[list[PretargetingConfigDimensions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensions'), 'exclude': lambda f: f is None }})
    r"""Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions."""  
    excluded_content_labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedContentLabels'), 'exclude': lambda f: f is None }})
    r"""Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section."""  
    excluded_geo_criteria_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedGeoCriteriaIds'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these geo criteria ids will not match."""  
    excluded_placements: Optional[list[PretargetingConfigExcludedPlacements]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedPlacements'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these placements will not match."""  
    excluded_user_lists: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedUserLists'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these users list ids will not match."""  
    excluded_verticals: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedVerticals'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section."""  
    geo_criteria_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCriteriaIds'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these geo criteria ids will match."""  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive'), 'exclude': lambda f: f is None }})
    r"""Whether this config is active. Required for all requests."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kind of the resource, i.e. \\"adexchangebuyer#pretargetingConfig\\"."""  
    languages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languages'), 'exclude': lambda f: f is None }})
    r"""Request containing any of these language codes will match."""  
    maximum_qps: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumQps'), 'exclude': lambda f: f is None }})
    r"""The maximum QPS allocated to this pretargeting configuration, used for pretargeting-level QPS limits. By default, this is not set, which indicates that there is no QPS limit at the configuration level (a global or account-level limit may still be imposed)."""  
    mobile_carriers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileCarriers'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section."""  
    mobile_devices: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileDevices'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section."""  
    mobile_operating_system_versions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileOperatingSystemVersions'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section."""  
    placements: Optional[list[PretargetingConfigPlacements]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placements'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these placements will match."""  
    platforms: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platforms'), 'exclude': lambda f: f is None }})
    r"""Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET."""  
    supported_creative_attributes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedCreativeAttributes'), 'exclude': lambda f: f is None }})
    r"""Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section."""  
    user_lists: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userLists'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these user list ids will match."""  
    vendor_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorTypes'), 'exclude': lambda f: f is None }})
    r"""Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section."""  
    verticals: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verticals'), 'exclude': lambda f: f is None }})
    r"""Requests containing any of these vertical ids will match."""  
    