<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get the ContainerThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetContainerThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateContainerThreatDetectionSettings for this purpose.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse
     */
	public function securitycenterProjectsLocationsClustersGetContainerThreatDetectionSettings(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersGetContainerThreatDetectionSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerThreatDetectionSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerThreatDetectionSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the ContainerThreatDetectionSettings resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse
     */
	public function securitycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettings(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "containerThreatDetectionSettingsInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsLocationsClustersUpdateContainerThreatDetectionSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->containerThreatDetectionSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContainerThreatDetectionSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse
     */
	public function securitycenterProjectsWebSecurityScannerSettingsCalculate(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}:calculate', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsWebSecurityScannerSettingsCalculateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webSecurityScannerSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WebSecurityScannerSettings', 'json');
            }
        }

        return $response;
    }
}