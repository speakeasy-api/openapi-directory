"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "//www.ticketmaster.com/publish/v2",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Publish API"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def patch_attraction(self, request: operations.PatchAttractionRequest) -> operations.PatchAttractionResponse:
        r"""Publish a patch on an attraction
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchAttractionRequest, base_url, '/publish/v2/attractions/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "augmentation_data", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchAttractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def patch_event(self, request: operations.PatchEventRequest) -> operations.PatchEventResponse:
        r"""Publish a patch on an event
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchEventRequest, base_url, '/publish/v2/events/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "augmentation_data", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def patch_venue(self, request: operations.PatchVenueRequest) -> operations.PatchVenueResponse:
        r"""Publish a patch on a venue
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchVenueRequest, base_url, '/publish/v2/venues/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "augmentation_data", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchVenueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def publish_attraction(self, request: operations.PublishAttractionRequest) -> operations.PublishAttractionResponse:
        r"""Publish an attractions
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/publish/v2/attractions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "attraction", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishAttractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def publish_attraction_videos(self, request: operations.PublishAttractionVideosRequest) -> operations.PublishAttractionVideosResponse:
        r"""Publish a video on an attraction
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishAttractionVideosRequest, base_url, '/publish/v2/attractions/{id}/videos', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "video", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishAttractionVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def publish_entitlements(self, request: operations.PublishEntitlementsRequest) -> operations.PublishEntitlementsResponse:
        r"""Publish entitlements on an entity
        Since 2.0.0
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/publish/v2/entitlements'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "entitlement", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishEntitlementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def publish_event(self, request: operations.PublishEventRequest) -> operations.PublishEventResponse:
        r"""Publish an event
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/publish/v2/events'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "event", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def publish_event_videos(self, request: operations.PublishEventVideosRequest) -> operations.PublishEventVideosResponse:
        r"""Publish a video on an event
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishEventVideosRequest, base_url, '/publish/v2/events/{id}/videos', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "video", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishEventVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def publish_extension(self, request: operations.PublishExtensionRequest) -> operations.PublishExtensionResponse:
        r"""Publish extension on an entity
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/publish/v2/extensions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "extension_data", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishExtensionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def publish_venue(self, request: operations.PublishVenueRequest) -> operations.PublishVenueResponse:
        r"""Publish a venue
        Since 1.0.0
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/publish/v2/venues'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "venue", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishVenueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    