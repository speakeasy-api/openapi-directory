/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PrescriptionMessage - OK
 */
public class PrescriptionMessage {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public PrescriptionMessage withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doctor")
    public Long doctor;
    public PrescriptionMessage withDoctor(Long doctor) {
        this.doctor = doctor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public PrescriptionMessage withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Data sent along with `NewRx`, `RefillRequest`, and `RefillResponses` messages. The format varies, but most likely it will contain `BenefitsCoordination` section with insurance info and `MedicationPrescribed` with medication info. `Patient`, `Pharmacy`, and `Prescriber` are also usually present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json_data")
    public String jsonData;
    public PrescriptionMessage withJsonData(String jsonData) {
        this.jsonData = jsonData;
        return this;
    }
    
    /**
     * Possible values are `Outgoing` and `Incoming`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_direction")
    public PrescriptionMessageMessageDirectionEnum messageDirection;
    public PrescriptionMessage withMessageDirection(PrescriptionMessageMessageDirectionEnum messageDirection) {
        this.messageDirection = messageDirection;
        return this;
    }
    
    /**
     * Message status for Incoming and Outgoing values. Success message for message_type are: `NewRx` : `Sent`, `RefillRequest` : `Received`, `RefillResponse` : `Sent`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_status")
    public String messageStatus;
    public PrescriptionMessage withMessageStatus(String messageStatus) {
        this.messageStatus = messageStatus;
        return this;
    }
    
    /**
     * Possible values are `NewRx` for outgoing new prescriptions, `RefillRequest` for incoming refill requests, `RefillResponse` for outgoing refill responses, `Error` for incoming errors, `Status` and `Verify` for incoming status reports from Surescripts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_type")
    public String messageType;
    public PrescriptionMessage withMessageType(String messageType) {
        this.messageType = messageType;
        return this;
    }
    
    /**
     * Refers to the parent message, used for refill responses and incoming error/status reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_message")
    public String parentMessage;
    public PrescriptionMessage withParentMessage(String parentMessage) {
        this.parentMessage = parentMessage;
        return this;
    }
    
    /**
     * An optional field which refers to a patient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("patient")
    public Long patient;
    public PrescriptionMessage withPatient(Long patient) {
        this.patient = patient;
        return this;
    }
    
    /**
     * NCPDPID allocated #ID of the Pharmacy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pharmacy")
    public String pharmacy;
    public PrescriptionMessage withPharmacy(String pharmacy) {
        this.pharmacy = pharmacy;
        return this;
    }
    
}
