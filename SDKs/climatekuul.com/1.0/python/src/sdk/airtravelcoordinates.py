"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class AirtravelCoordinates:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def airtravel_coordinates(self, request: operations.AirtravelCoordinatesRequest, server_url: Optional[str] = None) -> operations.AirtravelCoordinatesResponse:
        r"""airtravelCoordinates"""
        base_url = operations.AIRTRAVEL_COORDINATES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/airtravelCoordinates'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AirtravelCoordinatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirm_carbon_offset4(self, request: operations.ConfirmCarbonOffset4RequestBody, server_url: Optional[str] = None) -> operations.ConfirmCarbonOffset4Response:
        r"""confirmCarbonOffset"""
        base_url = operations.CONFIRM_CARBON_OFFSET4_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/airtravelCoordinates/confirmCarbonOffset'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmCarbonOffset4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirm_payment4(self, request: operations.ConfirmPayment4RequestBody, server_url: Optional[str] = None) -> operations.ConfirmPayment4Response:
        r"""confirmPayment"""
        base_url = operations.CONFIRM_PAYMENT4_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/airtravelCoordinates/confirmPayment'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmPayment4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirm_payment_of_transaction4(self, request: operations.ConfirmPaymentOfTransaction4RequestBody, server_url: Optional[str] = None) -> operations.ConfirmPaymentOfTransaction4Response:
        r"""confirmTransaction"""
        base_url = operations.CONFIRM_PAYMENT_OF_TRANSACTION4_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/airtravelCoordinates/confirmTransaction'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmPaymentOfTransaction4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def confirms_planting4(self, request: operations.ConfirmsPlanting4RequestBody, server_url: Optional[str] = None) -> operations.ConfirmsPlanting4Response:
        r"""confirmPlanting"""
        base_url = operations.CONFIRMS_PLANTING4_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/airtravelCoordinates/confirmPlanting'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmsPlanting4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    