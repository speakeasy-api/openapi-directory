// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SingleSignOnRequestCookieTypeEnum - If you specify a cookie type then a content filter cookie will be returned
// along with the token(s). This is only intended for web based clients which
// need to pass the cookies to a server to render a page based on the user's
// content filters e.g subscription code.
//
// If type `Session` the cookie will be session based.
// If type `Persistent` the cookie will have a medium term lifespan.
// If undefined no cookies will be set.
type SingleSignOnRequestCookieTypeEnum string

const (
	SingleSignOnRequestCookieTypeEnumSession    SingleSignOnRequestCookieTypeEnum = "Session"
	SingleSignOnRequestCookieTypeEnumPersistent SingleSignOnRequestCookieTypeEnum = "Persistent"
)

func (e *SingleSignOnRequestCookieTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Session":
		fallthrough
	case "Persistent":
		*e = SingleSignOnRequestCookieTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SingleSignOnRequestCookieTypeEnum: %s", s)
	}
}

// SingleSignOnRequestProviderEnum - The third party single-sign-on provider.
type SingleSignOnRequestProviderEnum string

const (
	SingleSignOnRequestProviderEnumFacebook SingleSignOnRequestProviderEnum = "Facebook"
)

func (e *SingleSignOnRequestProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Facebook":
		*e = SingleSignOnRequestProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SingleSignOnRequestProviderEnum: %s", s)
	}
}

type SingleSignOnRequestScopesEnum string

const (
	SingleSignOnRequestScopesEnumCatalog  SingleSignOnRequestScopesEnum = "Catalog"
	SingleSignOnRequestScopesEnumCommerce SingleSignOnRequestScopesEnum = "Commerce"
	SingleSignOnRequestScopesEnumSettings SingleSignOnRequestScopesEnum = "Settings"
	SingleSignOnRequestScopesEnumPlayback SingleSignOnRequestScopesEnum = "Playback"
)

func (e *SingleSignOnRequestScopesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Catalog":
		fallthrough
	case "Commerce":
		fallthrough
	case "Settings":
		fallthrough
	case "Playback":
		*e = SingleSignOnRequestScopesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SingleSignOnRequestScopesEnum: %s", s)
	}
}

// SingleSignOnRequest - A single-sign-on request.
type SingleSignOnRequest struct {
	// If you specify a cookie type then a content filter cookie will be returned
	// along with the token(s). This is only intended for web based clients which
	// need to pass the cookies to a server to render a page based on the user's
	// content filters e.g subscription code.
	//
	// If type `Session` the cookie will be session based.
	// If type `Persistent` the cookie will have a medium term lifespan.
	// If undefined no cookies will be set.
	//
	CookieType *SingleSignOnRequestCookieTypeEnum `json:"cookieType,omitempty"`
	// When a user attempts to sign in using single-sign-on, we may find an account created
	// previously through the manual sign up flow with the same email. If this is the
	// case then an option to link the two accounts can be made available.
	//
	// If this flag is set to true then accounts will be linked automatically.
	//
	// If this flag is not set or set to false and an existing account is found
	// then an http 401 with subcode `6001` will be returned. Client apps can then present the
	// option to link the accounts. If the user decides to accept, then the same call
	// can be repeated with this flag set to true.
	//
	LinkAccounts *bool `json:"linkAccounts,omitempty"`
	// The third party single-sign-on provider.
	Provider SingleSignOnRequestProviderEnum `json:"provider"`
	// The scope(s) of the tokens required.
	// For each scope listed an Account and Profile token of that scope will be returned.
	//
	Scopes []SingleSignOnRequestScopesEnum `json:"scopes,omitempty"`
	// A token from the third party single-sign-on provider e.g. an identity token from Facebook.
	Token string `json:"token"`
}
