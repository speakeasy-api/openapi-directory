<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Alerts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Performs batch delete operation on alerts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteResponse
     */
	public function alertcenterAlertsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts:batchDelete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeleteAlertsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchDeleteAlertsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchDeleteAlertsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs batch undelete operation on alerts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteResponse
     */
	public function alertcenterAlertsBatchUndelete(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts:batchUndelete');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchUndeleteAlertsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsBatchUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchUndeleteAlertsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchUndeleteAlertsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks the specified alert for deletion. An alert that has been marked for deletion is removed from Alert Center after 30 days. Marking an alert for deletion has no effect on an alert which has already been marked for deletion. Attempting to mark a nonexistent alert for deletion results in a `NOT_FOUND` error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteResponse
     */
	public function alertcenterAlertsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts/{alertId}', \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new feedback for an alert. Attempting to create a feedback for a non-existent alert returns `NOT_FOUND` error. Attempting to create a feedback for an alert that is marked for deletion returns `FAILED_PRECONDITION' error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateResponse
     */
	public function alertcenterAlertsFeedbackCreate(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts/{alertId}/feedback', \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "alertFeedback", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->alertFeedback = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AlertFeedback', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the feedback for an alert. Attempting to list feedbacks for a non-existent alert returns `NOT_FOUND` error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListResponse
     */
	public function alertcenterAlertsFeedbackList(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts/{alertId}/feedback', \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsFeedbackListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAlertFeedbackResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAlertFeedbackResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified alert. Attempting to get a nonexistent alert returns `NOT_FOUND` error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetResponse
     */
	public function alertcenterAlertsGet(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts/{alertId}', \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->alert = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Alert', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the metadata of an alert. Attempting to get metadata for a non-existent alert returns `NOT_FOUND` error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataResponse
     */
	public function alertcenterAlertsGetMetadata(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts/{alertId}/metadata', \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsGetMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->alertMetadata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AlertMetadata', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the alerts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListResponse
     */
	public function alertcenterAlertsList(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAlertsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAlertsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores, or "undeletes", an alert that was marked for deletion within the past 30 days. Attempting to undelete an alert which was marked for deletion over 30 days ago (which has been removed from the Alert Center database) or a nonexistent alert returns a `NOT_FOUND` error. Attempting to undelete an alert which has not been marked for deletion has no effect.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteResponse
     */
	public function alertcenterAlertsUndelete(
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/alerts/{alertId}:undelete', \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "undeleteAlertRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AlertcenterAlertsUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->alert = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Alert', 'json');
            }
        }

        return $response;
    }
}