// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum - Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
type CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum string

const (
	CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnumTrue  CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum = "true"
	CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnumFalse CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum = "false"
)

func (e *CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum: %s", s)
	}
}

// CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum - Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
type CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum string

const (
	CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnumAuthorizationCode CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum = "authorization_code"
	CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnumClientCredentials CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum = "client_credentials"
	CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnumRefreshToken      CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum = "refresh_token"
)

func (e *CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "authorization_code":
		fallthrough
	case "client_credentials":
		fallthrough
	case "refresh_token":
		*e = CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum: %s", s)
	}
}

// CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum - User type to be authorized (usually 'customer')
type CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum string

const (
	CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnumCustomer    CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum = "customer"
	CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnumContributor CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum = "contributor"
)

func (e *CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "contributor":
		*e = CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum: %s", s)
	}
}

type CreateAccessTokenApplicationXWwwFormUrlencoded struct {
	// Client ID (Consumer Key) of your application
	ClientID string `form:"name=client_id"`
	// Client Secret (Consumer Secret) of your application
	ClientSecret *string `form:"name=client_secret"`
	// Response code from the /oauth/authorize flow; required if grant_type=authorization_code
	Code *string `form:"name=code"`
	// Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
	Expires *CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum `form:"name=expires"`
	// Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
	GrantType CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum `form:"name=grant_type"`
	// User type to be authorized (usually 'customer')
	Realm *CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum `form:"name=realm"`
	// Pass this along with grant_type=refresh_token to get a fresh access token
	RefreshToken *string `form:"name=refresh_token"`
}

type CreateAccessTokenFormRequest struct {
	Request *CreateAccessTokenApplicationXWwwFormUrlencoded `request:"mediaType=application/x-www-form-urlencoded"`
}

type CreateAccessTokenFormResponse struct {
	ContentType string
	// OK
	OauthAccessTokenResponse *shared.OauthAccessTokenResponse
	StatusCode               int
	RawResponse              *http.Response
}
