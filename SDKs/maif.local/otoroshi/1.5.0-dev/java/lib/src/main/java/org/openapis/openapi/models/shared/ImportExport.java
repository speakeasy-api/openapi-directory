/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ImportExport - The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi
 */
public class ImportExport {
    /**
     * Current U2F admin at the time of export
     */
    @JsonProperty("admins")
    public ImportExportAdmins[] admins;
    public ImportExport withAdmins(ImportExportAdmins[] admins) {
        this.admins = admins;
        return this;
    }
    
    /**
     * Current apik keys at the time of export
     */
    @JsonProperty("apiKeys")
    public ImportExportApiKeys[] apiKeys;
    public ImportExport withApiKeys(ImportExportApiKeys[] apiKeys) {
        this.apiKeys = apiKeys;
        return this;
    }
    
    /**
     * Current env variables at the time of export
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appConfig")
    public java.util.Map<String, String> appConfig;
    public ImportExport withAppConfig(java.util.Map<String, String> appConfig) {
        this.appConfig = appConfig;
        return this;
    }
    
    /**
     * The global config object of Otoroshi, used to customize settings of the current Otoroshi instance
     */
    @JsonProperty("config")
    public GlobalConfig config;
    public ImportExport withConfig(GlobalConfig config) {
        this.config = config;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;
    public ImportExport withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    @JsonProperty("dateRaw")
    public Long dateRaw;
    public ImportExport withDateRaw(Long dateRaw) {
        this.dateRaw = dateRaw;
        return this;
    }
    
    /**
     * Current error templates at the time of export
     */
    @JsonProperty("errorTemplates")
    public ImportExportErrorTemplates[] errorTemplates;
    public ImportExport withErrorTemplates(ImportExportErrorTemplates[] errorTemplates) {
        this.errorTemplates = errorTemplates;
        return this;
    }
    
    @JsonProperty("label")
    public String label;
    public ImportExport withLabel(String label) {
        this.label = label;
        return this;
    }
    
    /**
     * Current service descriptors at the time of export
     */
    @JsonProperty("serviceDescriptors")
    public ImportExportServiceDescriptors[] serviceDescriptors;
    public ImportExport withServiceDescriptors(ImportExportServiceDescriptors[] serviceDescriptors) {
        this.serviceDescriptors = serviceDescriptors;
        return this;
    }
    
    /**
     * Current service groups at the time of export
     */
    @JsonProperty("serviceGroups")
    public ImportExportServiceGroups[] serviceGroups;
    public ImportExport withServiceGroups(ImportExportServiceGroups[] serviceGroups) {
        this.serviceGroups = serviceGroups;
        return this;
    }
    
    /**
     * Current simple admins at the time of export
     */
    @JsonProperty("simpleAdmins")
    public ImportExportSimpleAdmins[] simpleAdmins;
    public ImportExport withSimpleAdmins(ImportExportSimpleAdmins[] simpleAdmins) {
        this.simpleAdmins = simpleAdmins;
        return this;
    }
    
    /**
     * Global stats for the current Otoroshi instances
     */
    @JsonProperty("stats")
    public ImportExportStats stats;
    public ImportExport withStats(ImportExportStats stats) {
        this.stats = stats;
        return this;
    }
    
}
