/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Audio - Audio metadata
 */
public class Audio {
    /**
     * Date this track was added to the Shutterstock library
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("added_date")
    public LocalDate addedDate;

    public Audio withAddedDate(LocalDate addedDate) {
        this.addedDate = addedDate;
        return this;
    }
    
    /**
     * Affiliate referral link; appears only for registered affiliate partners
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("affiliate_url")
    public String affiliateUrl;

    public Audio withAffiliateUrl(String affiliateUrl) {
        this.affiliateUrl = affiliateUrl;
        return this;
    }
    
    /**
     * Album metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("album")
    public Album album;

    public Audio withAlbum(Album album) {
        this.album = album;
        return this;
    }
    
    /**
     * List of artists
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artists")
    public Artist[] artists;

    public Audio withArtists(Artist[] artists) {
        this.artists = artists;
        return this;
    }
    
    /**
     * Files that are available as part of an audio asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assets")
    public AudioAssets assets;

    public Audio withAssets(AudioAssets assets) {
        this.assets = assets;
        return this;
    }
    
    /**
     * BPM (beats per minute) of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bpm")
    public Long bpm;

    public Audio withBpm(Long bpm) {
        this.bpm = bpm;
        return this;
    }
    
    /**
     * Information about a contributor
     */
    @JsonProperty("contributor")
    public Contributor contributor;

    public Audio withContributor(Contributor contributor) {
        this.contributor = contributor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deleted_time")
    public OffsetDateTime deletedTime;

    public Audio withDeletedTime(OffsetDateTime deletedTime) {
        this.deletedTime = deletedTime;
        return this;
    }
    
    /**
     * Description of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Audio withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Duration of this track in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Double duration;

    public Audio withDuration(Double duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * List of all genres for this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("genres")
    public String[] genres;

    public Audio withGenres(String[] genres) {
        this.genres = genres;
        return this;
    }
    
    /**
     * Shutterstock ID of this track
     */
    @JsonProperty("id")
    public String id;

    public Audio withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * List of all instruments that appear in this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instruments")
    public String[] instruments;

    public Audio withInstruments(String[] instruments) {
        this.instruments = instruments;
        return this;
    }
    
    /**
     * Whether or not this track contains adult content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_adult")
    public Boolean isAdult;

    public Audio withIsAdult(Boolean isAdult) {
        this.isAdult = isAdult;
        return this;
    }
    
    /**
     * Whether or not this track is purely instrumental (lacking lyrics)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_instrumental")
    public Boolean isInstrumental;

    public Audio withIsInstrumental(Boolean isInstrumental) {
        this.isInstrumental = isInstrumental;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isrc")
    public String isrc;

    public Audio withIsrc(String isrc) {
        this.isrc = isrc;
        return this;
    }
    
    /**
     * List of all keywords for this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keywords")
    public String[] keywords;

    public Audio withKeywords(String[] keywords) {
        this.keywords = keywords;
        return this;
    }
    
    /**
     * Language of this track's lyrics
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public Audio withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * Lyrics of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lyrics")
    public String lyrics;

    public Audio withLyrics(String lyrics) {
        this.lyrics = lyrics;
        return this;
    }
    
    /**
     * Media type of this track; should always be "audio"
     */
    @JsonProperty("media_type")
    public String mediaType;

    public Audio withMediaType(String mediaType) {
        this.mediaType = mediaType;
        return this;
    }
    
    /**
     * List of all model releases for this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model_releases")
    public ModelRelease[] modelReleases;

    public Audio withModelReleases(ModelRelease[] modelReleases) {
        this.modelReleases = modelReleases;
        return this;
    }
    
    /**
     * List of all moods of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moods")
    public String[] moods;

    public Audio withMoods(String[] moods) {
        this.moods = moods;
        return this;
    }
    
    /**
     * Time this track was published
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("published_time")
    public OffsetDateTime publishedTime;

    public Audio withPublishedTime(OffsetDateTime publishedTime) {
        this.publishedTime = publishedTime;
        return this;
    }
    
    /**
     * Recording version of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_version")
    public String recordingVersion;

    public Audio withRecordingVersion(String recordingVersion) {
        this.recordingVersion = recordingVersion;
        return this;
    }
    
    /**
     * List of all releases of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releases")
    public String[] releases;

    public Audio withReleases(String[] releases) {
        this.releases = releases;
        return this;
    }
    
    /**
     * List of all similar artists of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("similar_artists")
    public Artist[] similarArtists;

    public Audio withSimilarArtists(Artist[] similarArtists) {
        this.similarArtists = similarArtists;
        return this;
    }
    
    /**
     * Time this track was submitted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("submitted_time")
    public OffsetDateTime submittedTime;

    public Audio withSubmittedTime(OffsetDateTime submittedTime) {
        this.submittedTime = submittedTime;
        return this;
    }
    
    /**
     * Title of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Audio withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Time this track was last updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_time")
    public OffsetDateTime updatedTime;

    public Audio withUpdatedTime(OffsetDateTime updatedTime) {
        this.updatedTime = updatedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Audio withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Vocal description of this track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vocal_description")
    public String vocalDescription;

    public Audio withVocalDescription(String vocalDescription) {
        this.vocalDescription = vocalDescription;
        return this;
    }
    
    public Audio(@JsonProperty("contributor") Contributor contributor, @JsonProperty("id") String id, @JsonProperty("media_type") String mediaType) {
        this.contributor = contributor;
        this.id = id;
        this.mediaType = mediaType;
  }
}
