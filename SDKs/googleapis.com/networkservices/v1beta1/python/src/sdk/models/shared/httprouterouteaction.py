"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httproutecorspolicy as shared_httproutecorspolicy
from ..shared import httproutedestination as shared_httproutedestination
from ..shared import httproutefaultinjectionpolicy as shared_httproutefaultinjectionpolicy
from ..shared import httprouteheadermodifier as shared_httprouteheadermodifier
from ..shared import httprouteredirect as shared_httprouteredirect
from ..shared import httprouterequestmirrorpolicy as shared_httprouterequestmirrorpolicy
from ..shared import httprouteretrypolicy as shared_httprouteretrypolicy
from ..shared import httprouteurlrewrite as shared_httprouteurlrewrite
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPRouteRouteAction:
    r"""The specifications for routing traffic and applying associated policies."""
    
    cors_policy: Optional[shared_httproutecorspolicy.HTTPRouteCorsPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corsPolicy'), 'exclude': lambda f: f is None }})
    r"""The Specification for allowing client side cross-origin requests."""  
    destinations: Optional[list[shared_httproutedestination.HTTPRouteDestination]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})
    r"""The destination to which traffic should be forwarded."""  
    fault_injection_policy: Optional[shared_httproutefaultinjectionpolicy.HTTPRouteFaultInjectionPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('faultInjectionPolicy'), 'exclude': lambda f: f is None }})
    r"""The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests."""  
    redirect: Optional[shared_httprouteredirect.HTTPRouteRedirect] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect'), 'exclude': lambda f: f is None }})
    r"""The specification for redirecting traffic."""  
    request_header_modifier: Optional[shared_httprouteheadermodifier.HTTPRouteHeaderModifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestHeaderModifier'), 'exclude': lambda f: f is None }})
    r"""The specification for modifying HTTP header in HTTP request and HTTP response."""  
    request_mirror_policy: Optional[shared_httprouterequestmirrorpolicy.HTTPRouteRequestMirrorPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestMirrorPolicy'), 'exclude': lambda f: f is None }})
    r"""Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow."""  
    response_header_modifier: Optional[shared_httprouteheadermodifier.HTTPRouteHeaderModifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseHeaderModifier'), 'exclude': lambda f: f is None }})
    r"""The specification for modifying HTTP header in HTTP request and HTTP response."""  
    retry_policy: Optional[shared_httprouteretrypolicy.HTTPRouteRetryPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryPolicy'), 'exclude': lambda f: f is None }})
    r"""The specifications for retries."""  
    timeout: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})
    r"""Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries."""  
    url_rewrite: Optional[shared_httprouteurlrewrite.HTTPRouteURLRewrite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlRewrite'), 'exclude': lambda f: f is None }})
    r"""The specification for modifying the URL of the request, prior to forwarding the request to the destination."""  
    