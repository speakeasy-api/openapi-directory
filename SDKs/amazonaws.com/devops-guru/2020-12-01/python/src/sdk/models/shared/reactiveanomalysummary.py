"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import anomalyreportedtimerange as shared_anomalyreportedtimerange
from ..shared import anomalyresource as shared_anomalyresource
from ..shared import anomalyseverity_enum as shared_anomalyseverity_enum
from ..shared import anomalysourcedetails as shared_anomalysourcedetails
from ..shared import anomalystatus_enum as shared_anomalystatus_enum
from ..shared import anomalytimerange as shared_anomalytimerange
from ..shared import anomalytype_enum as shared_anomalytype_enum
from ..shared import resourcecollection as shared_resourcecollection
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReactiveAnomalySummary:
    r"""Details about a reactive anomaly. This object is returned by <code>DescribeAnomaly.</code>"""
    
    anomaly_reported_time_range: Optional[shared_anomalyreportedtimerange.AnomalyReportedTimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnomalyReportedTimeRange'), 'exclude': lambda f: f is None }})  
    anomaly_resources: Optional[list[shared_anomalyresource.AnomalyResource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnomalyResources'), 'exclude': lambda f: f is None }})  
    anomaly_time_range: Optional[shared_anomalytimerange.AnomalyTimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnomalyTimeRange'), 'exclude': lambda f: f is None }})
    r"""A time range that specifies when the observed unusual behavior in an anomaly started and ended. This is different from <code>AnomalyReportedTimeRange</code>, which specifies the time range when DevOps Guru opens and then closes an anomaly."""  
    associated_insight_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociatedInsightId'), 'exclude': lambda f: f is None }})  
    causal_anomaly_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CausalAnomalyId'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    resource_collection: Optional[shared_resourcecollection.ResourceCollection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceCollection'), 'exclude': lambda f: f is None }})
    r"""A collection of Amazon Web Services resources supported by DevOps Guru. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks."""  
    severity: Optional[shared_anomalyseverity_enum.AnomalySeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Severity'), 'exclude': lambda f: f is None }})  
    source_details: Optional[shared_anomalysourcedetails.AnomalySourceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceDetails'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_anomalystatus_enum.AnomalyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_anomalytype_enum.AnomalyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    