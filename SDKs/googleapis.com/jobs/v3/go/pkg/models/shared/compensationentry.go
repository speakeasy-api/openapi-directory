// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CompensationEntryTypeEnum - Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
type CompensationEntryTypeEnum string

const (
	CompensationEntryTypeEnumCompensationTypeUnspecified CompensationEntryTypeEnum = "COMPENSATION_TYPE_UNSPECIFIED"
	CompensationEntryTypeEnumBase                        CompensationEntryTypeEnum = "BASE"
	CompensationEntryTypeEnumBonus                       CompensationEntryTypeEnum = "BONUS"
	CompensationEntryTypeEnumSigningBonus                CompensationEntryTypeEnum = "SIGNING_BONUS"
	CompensationEntryTypeEnumEquity                      CompensationEntryTypeEnum = "EQUITY"
	CompensationEntryTypeEnumProfitSharing               CompensationEntryTypeEnum = "PROFIT_SHARING"
	CompensationEntryTypeEnumCommissions                 CompensationEntryTypeEnum = "COMMISSIONS"
	CompensationEntryTypeEnumTips                        CompensationEntryTypeEnum = "TIPS"
	CompensationEntryTypeEnumOtherCompensationType       CompensationEntryTypeEnum = "OTHER_COMPENSATION_TYPE"
)

func (e CompensationEntryTypeEnum) ToPointer() *CompensationEntryTypeEnum {
	return &e
}

func (e *CompensationEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPENSATION_TYPE_UNSPECIFIED":
		fallthrough
	case "BASE":
		fallthrough
	case "BONUS":
		fallthrough
	case "SIGNING_BONUS":
		fallthrough
	case "EQUITY":
		fallthrough
	case "PROFIT_SHARING":
		fallthrough
	case "COMMISSIONS":
		fallthrough
	case "TIPS":
		fallthrough
	case "OTHER_COMPENSATION_TYPE":
		*e = CompensationEntryTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompensationEntryTypeEnum: %v", v)
	}
}

// CompensationEntryUnitEnum - Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
type CompensationEntryUnitEnum string

const (
	CompensationEntryUnitEnumCompensationUnitUnspecified CompensationEntryUnitEnum = "COMPENSATION_UNIT_UNSPECIFIED"
	CompensationEntryUnitEnumHourly                      CompensationEntryUnitEnum = "HOURLY"
	CompensationEntryUnitEnumDaily                       CompensationEntryUnitEnum = "DAILY"
	CompensationEntryUnitEnumWeekly                      CompensationEntryUnitEnum = "WEEKLY"
	CompensationEntryUnitEnumMonthly                     CompensationEntryUnitEnum = "MONTHLY"
	CompensationEntryUnitEnumYearly                      CompensationEntryUnitEnum = "YEARLY"
	CompensationEntryUnitEnumOneTime                     CompensationEntryUnitEnum = "ONE_TIME"
	CompensationEntryUnitEnumOtherCompensationUnit       CompensationEntryUnitEnum = "OTHER_COMPENSATION_UNIT"
)

func (e CompensationEntryUnitEnum) ToPointer() *CompensationEntryUnitEnum {
	return &e
}

func (e *CompensationEntryUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPENSATION_UNIT_UNSPECIFIED":
		fallthrough
	case "HOURLY":
		fallthrough
	case "DAILY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "YEARLY":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "OTHER_COMPENSATION_UNIT":
		*e = CompensationEntryUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompensationEntryUnitEnum: %v", v)
	}
}

// CompensationEntry - A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
type CompensationEntry struct {
	// Represents an amount of money with its currency type.
	Amount *Money `json:"amount,omitempty"`
	// Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.
	Description *string `json:"description,omitempty"`
	// Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1
	ExpectedUnitsPerYear *float64 `json:"expectedUnitsPerYear,omitempty"`
	// Compensation range.
	Range *CompensationRange `json:"range,omitempty"`
	// Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
	Type *CompensationEntryTypeEnum `json:"type,omitempty"`
	// Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
	Unit *CompensationEntryUnitEnum `json:"unit,omitempty"`
}
