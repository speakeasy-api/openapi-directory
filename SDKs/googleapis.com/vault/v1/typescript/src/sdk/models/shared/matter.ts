/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MatterPermission } from "./matterpermission";
import { Expose, Type } from "class-transformer";

/**
 * The state of the matter.
 */
export enum MatterStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Open = "OPEN",
  Closed = "CLOSED",
  Deleted = "DELETED",
}

/**
 * Represents a matter. To work with Vault resources, the account must have the [required Vault privileges] (https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege.
 */
export class Matter extends SpeakeasyBase {
  /**
   * An optional description for the matter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The matter ID, which is generated by the server. Leave blank when creating a matter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matterId" })
  matterId?: string;

  /**
   * Lists the users and their permission for the matter. Currently there is no programmer defined limit on the number of permissions a matter can have.
   */
  @SpeakeasyMetadata({ elemType: MatterPermission })
  @Expose({ name: "matterPermissions" })
  @Type(() => MatterPermission)
  matterPermissions?: MatterPermission[];

  /**
   * The name of the matter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The state of the matter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: MatterStateEnum;
}
