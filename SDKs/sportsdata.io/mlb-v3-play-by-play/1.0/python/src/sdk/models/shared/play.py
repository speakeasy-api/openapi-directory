"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import pitch as shared_pitch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Play:
    
    at_bat: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AtBat'), 'exclude': lambda f: f is None }})  
    away_team_runs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamRuns'), 'exclude': lambda f: f is None }})  
    balls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Balls'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    error: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Error'), 'exclude': lambda f: f is None }})  
    hit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Hit'), 'exclude': lambda f: f is None }})  
    hitter_bat_hand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HitterBatHand'), 'exclude': lambda f: f is None }})  
    hitter_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HitterID'), 'exclude': lambda f: f is None }})  
    hitter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HitterName'), 'exclude': lambda f: f is None }})  
    hitter_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HitterPosition'), 'exclude': lambda f: f is None }})  
    hitter_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HitterTeamID'), 'exclude': lambda f: f is None }})  
    home_team_runs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamRuns'), 'exclude': lambda f: f is None }})  
    inning_batter_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InningBatterNumber'), 'exclude': lambda f: f is None }})  
    inning_half: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InningHalf'), 'exclude': lambda f: f is None }})  
    inning_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InningID'), 'exclude': lambda f: f is None }})  
    inning_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InningNumber'), 'exclude': lambda f: f is None }})  
    number_of_outs_on_play: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfOutsOnPlay'), 'exclude': lambda f: f is None }})  
    out: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Out'), 'exclude': lambda f: f is None }})  
    outs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Outs'), 'exclude': lambda f: f is None }})  
    pitcher_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PitcherID'), 'exclude': lambda f: f is None }})  
    pitcher_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PitcherName'), 'exclude': lambda f: f is None }})  
    pitcher_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PitcherTeamID'), 'exclude': lambda f: f is None }})  
    pitcher_throw_hand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PitcherThrowHand'), 'exclude': lambda f: f is None }})  
    pitches: Optional[list[shared_pitch.Pitch]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pitches'), 'exclude': lambda f: f is None }})  
    pitch_number_this_at_bat: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PitchNumberThisAtBat'), 'exclude': lambda f: f is None }})  
    play_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayID'), 'exclude': lambda f: f is None }})  
    play_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayNumber'), 'exclude': lambda f: f is None }})  
    result: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Result'), 'exclude': lambda f: f is None }})  
    runner1_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Runner1ID'), 'exclude': lambda f: f is None }})  
    runner2_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Runner2ID'), 'exclude': lambda f: f is None }})  
    runner3_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Runner3ID'), 'exclude': lambda f: f is None }})  
    runs_batted_in: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunsBattedIn'), 'exclude': lambda f: f is None }})  
    sacrifice: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sacrifice'), 'exclude': lambda f: f is None }})  
    strikeout: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Strikeout'), 'exclude': lambda f: f is None }})  
    strikes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Strikes'), 'exclude': lambda f: f is None }})  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Updated'), 'exclude': lambda f: f is None }})  
    walk: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Walk'), 'exclude': lambda f: f is None }})  
    