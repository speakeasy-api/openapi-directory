// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreateVpcEndpointResultVpcEndpointDNSEntries - Describes a DNS entry.
type CreateVpcEndpointResultVpcEndpointDNSEntries struct {
	DNSName      *string
	HostedZoneID *string
}

// CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum - The DNS records created for the endpoint.
type CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum string

const (
	CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnumIpv4           CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum = "ipv4"
	CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnumDualstack      CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum = "dualstack"
	CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnumIpv6           CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum = "ipv6"
	CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnumServiceDefined CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum = "service-defined"
)

func (e *CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "dualstack":
		fallthrough
	case "ipv6":
		fallthrough
	case "service-defined":
		*e = CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum: %s", s)
	}
}

// CreateVpcEndpointResultVpcEndpointDNSOptions - The DNS options for the endpoint.
type CreateVpcEndpointResultVpcEndpointDNSOptions struct {
	DNSRecordIPType                          *CreateVpcEndpointResultVpcEndpointDNSOptionsDNSRecordIPTypeEnum
	PrivateDNSOnlyForInboundResolverEndpoint *bool
}

// CreateVpcEndpointResultVpcEndpointGroups - Describes a security group.
type CreateVpcEndpointResultVpcEndpointGroups struct {
	GroupID   *string
	GroupName *string
}

// CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum - The IP address type for the endpoint.
type CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum string

const (
	CreateVpcEndpointResultVpcEndpointIPAddressTypeEnumIpv4      CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum = "ipv4"
	CreateVpcEndpointResultVpcEndpointIPAddressTypeEnumDualstack CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum = "dualstack"
	CreateVpcEndpointResultVpcEndpointIPAddressTypeEnumIpv6      CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum = "ipv6"
)

func (e *CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "dualstack":
		fallthrough
	case "ipv6":
		*e = CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum: %s", s)
	}
}

// CreateVpcEndpointResultVpcEndpointLastError - The last error that occurred for endpoint.
type CreateVpcEndpointResultVpcEndpointLastError struct {
	Code    *string
	Message *string
}

// CreateVpcEndpointResultVpcEndpointStateEnum - The state of the endpoint.
type CreateVpcEndpointResultVpcEndpointStateEnum string

const (
	CreateVpcEndpointResultVpcEndpointStateEnumPendingAcceptance CreateVpcEndpointResultVpcEndpointStateEnum = "PendingAcceptance"
	CreateVpcEndpointResultVpcEndpointStateEnumPending           CreateVpcEndpointResultVpcEndpointStateEnum = "Pending"
	CreateVpcEndpointResultVpcEndpointStateEnumAvailable         CreateVpcEndpointResultVpcEndpointStateEnum = "Available"
	CreateVpcEndpointResultVpcEndpointStateEnumDeleting          CreateVpcEndpointResultVpcEndpointStateEnum = "Deleting"
	CreateVpcEndpointResultVpcEndpointStateEnumDeleted           CreateVpcEndpointResultVpcEndpointStateEnum = "Deleted"
	CreateVpcEndpointResultVpcEndpointStateEnumRejected          CreateVpcEndpointResultVpcEndpointStateEnum = "Rejected"
	CreateVpcEndpointResultVpcEndpointStateEnumFailed            CreateVpcEndpointResultVpcEndpointStateEnum = "Failed"
	CreateVpcEndpointResultVpcEndpointStateEnumExpired           CreateVpcEndpointResultVpcEndpointStateEnum = "Expired"
)

func (e *CreateVpcEndpointResultVpcEndpointStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PendingAcceptance":
		fallthrough
	case "Pending":
		fallthrough
	case "Available":
		fallthrough
	case "Deleting":
		fallthrough
	case "Deleted":
		fallthrough
	case "Rejected":
		fallthrough
	case "Failed":
		fallthrough
	case "Expired":
		*e = CreateVpcEndpointResultVpcEndpointStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcEndpointResultVpcEndpointStateEnum: %s", s)
	}
}

// CreateVpcEndpointResultVpcEndpointTags - Describes a tag.
type CreateVpcEndpointResultVpcEndpointTags struct {
	Key   *string
	Value *string
}

// CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum - The type of endpoint.
type CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum string

const (
	CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnumInterface           CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum = "Interface"
	CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnumGateway             CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum = "Gateway"
	CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnumGatewayLoadBalancer CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum = "GatewayLoadBalancer"
)

func (e *CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Interface":
		fallthrough
	case "Gateway":
		fallthrough
	case "GatewayLoadBalancer":
		*e = CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum: %s", s)
	}
}

// CreateVpcEndpointResultVpcEndpoint - Information about the endpoint.
type CreateVpcEndpointResultVpcEndpoint struct {
	CreationTimestamp   *time.Time
	DNSEntries          []CreateVpcEndpointResultVpcEndpointDNSEntries
	DNSOptions          *CreateVpcEndpointResultVpcEndpointDNSOptions
	Groups              []CreateVpcEndpointResultVpcEndpointGroups
	IPAddressType       *CreateVpcEndpointResultVpcEndpointIPAddressTypeEnum
	LastError           *CreateVpcEndpointResultVpcEndpointLastError
	NetworkInterfaceIds []string
	OwnerID             *string
	PolicyDocument      *string
	PrivateDNSEnabled   *bool
	RequesterManaged    *bool
	RouteTableIds       []string
	ServiceName         *string
	State               *CreateVpcEndpointResultVpcEndpointStateEnum
	SubnetIds           []string
	Tags                []CreateVpcEndpointResultVpcEndpointTags
	VpcEndpointID       *string
	VpcEndpointType     *CreateVpcEndpointResultVpcEndpointVpcEndpointTypeEnum
	VpcID               *string
}

// CreateVpcEndpointResult - Success
type CreateVpcEndpointResult struct {
	ClientToken *string
	VpcEndpoint *CreateVpcEndpointResultVpcEndpoint
}
