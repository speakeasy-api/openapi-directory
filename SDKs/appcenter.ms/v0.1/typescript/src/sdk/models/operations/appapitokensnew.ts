/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class AppApiTokensNewSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export enum AppApiTokensNewRequestBodyScopeEnum {
  All = "all",
  Viewer = "viewer",
}

/**
 * Description of the token
 */
export class AppApiTokensNewRequestBody extends SpeakeasyBase {
  /**
   * The description of the token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The scope for this token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: AppApiTokensNewRequestBodyScopeEnum[];
}

export class AppApiTokensNewRequest extends SpeakeasyBase {
  /**
   * Description of the token
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: AppApiTokensNewRequestBody;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

export enum AppApiTokensNew401ApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class AppApiTokensNew401ApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: AppApiTokensNew401ApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Unauthorized
 */
export class AppApiTokensNew401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => AppApiTokensNew401ApplicationJSONError)
  error: AppApiTokensNew401ApplicationJSONError;
}

export enum AppApiTokensNew400ApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class AppApiTokensNew400ApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: AppApiTokensNew400ApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error
 */
export class AppApiTokensNew400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => AppApiTokensNew400ApplicationJSONError)
  error: AppApiTokensNew400ApplicationJSONError;
}

export enum AppApiTokensNew201ApplicationJSONScopeEnum {
  All = "all",
  Viewer = "viewer",
}

/**
 * Success
 */
export class AppApiTokensNew201ApplicationJSON extends SpeakeasyBase {
  /**
   * The api token generated will not be accessible again
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api_token" })
  apiToken: string;

  /**
   * The creation time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt: string;

  /**
   * The description of the token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The unique id (UUID) of the api token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The scope for this token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: AppApiTokensNew201ApplicationJSONScopeEnum[];
}

export class AppApiTokensNewResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  appApiTokensNew201ApplicationJSONObject?: AppApiTokensNew201ApplicationJSON;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  appApiTokensNew400ApplicationJSONObject?: AppApiTokensNew400ApplicationJSON;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  appApiTokensNew401ApplicationJSONObject?: AppApiTokensNew401ApplicationJSON;
}
