// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum - Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
type GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum string

const (
	GetSitesSiteIDSubsitesOutputFormatOutputFormatEnumJSON    GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum = "json"
	GetSitesSiteIDSubsitesOutputFormatOutputFormatEnumGeojson GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum = "geojson"
	GetSitesSiteIDSubsitesOutputFormatOutputFormatEnumXhtml   GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum = "xhtml"
	GetSitesSiteIDSubsitesOutputFormatOutputFormatEnumKml     GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum = "kml"
	GetSitesSiteIDSubsitesOutputFormatOutputFormatEnumGml     GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum = "gml"
	GetSitesSiteIDSubsitesOutputFormatOutputFormatEnumCsv     GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum = "csv"
	GetSitesSiteIDSubsitesOutputFormatOutputFormatEnumShpz    GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum = "shpz"
)

func (e *GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "geojson":
		fallthrough
	case "xhtml":
		fallthrough
	case "kml":
		fallthrough
	case "gml":
		fallthrough
	case "csv":
		fallthrough
	case "shpz":
		*e = GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum: %s", s)
	}
}

type GetSitesSiteIDSubsitesOutputFormatPathParams struct {
	// Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
	OutputFormat GetSitesSiteIDSubsitesOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
	// A unique, but not immutable, site identifier.
	SiteID string `pathParam:"style=simple,explode=false,name=siteID"`
}

// GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum - Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
type GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum string

const (
	GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnumAny            GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum = "any"
	GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnumAccessPoint    GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum = "accessPoint"
	GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnumFrontDoorPoint GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum = "frontDoorPoint"
	GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnumParcelPoint    GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum = "parcelPoint"
	GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnumRooftopPoint   GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum = "rooftopPoint"
	GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnumRoutingPoint   GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum = "routingPoint"
)

func (e *GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "accessPoint":
		fallthrough
	case "frontDoorPoint":
		fallthrough
	case "parcelPoint":
		fallthrough
	case "rooftopPoint":
		fallthrough
	case "routingPoint":
		*e = GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum: %s", s)
	}
}

// GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
type GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum string

const (
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumFourThousandThreeHundredAndTwentySix  GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "4326"
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumFourThousandTwoHundredAndSixtyNine    GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "4269"
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumThreeThousandAndFive                  GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "3005"
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndSeven  GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "26907"
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEight  GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "26908"
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndNine   GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "26909"
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndTen    GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "26910"
	GetSitesSiteIDSubsitesOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEleven GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum = "26911"
)

func (e *GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "4269":
		fallthrough
	case "3005":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum: %s", s)
	}
}

type GetSitesSiteIDSubsitesOutputFormatQueryParams struct {
	// If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats.
	Brief *bool `queryParam:"style=form,explode=true,name=brief"`
	// Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
	LocationDescriptor *GetSitesSiteIDSubsitesOutputFormatLocationDescriptorEnum `queryParam:"style=form,explode=true,name=locationDescriptor"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
	OutputSRS *GetSitesSiteIDSubsitesOutputFormatOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SetBack *int64 `queryParam:"style=form,explode=true,name=setBack"`
}

type GetSitesSiteIDSubsitesOutputFormatRequest struct {
	PathParams  GetSitesSiteIDSubsitesOutputFormatPathParams
	QueryParams GetSitesSiteIDSubsitesOutputFormatQueryParams
}

type GetSitesSiteIDSubsitesOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
