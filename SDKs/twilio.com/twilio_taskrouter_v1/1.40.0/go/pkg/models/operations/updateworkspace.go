// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var UpdateWorkspaceServerList = []string{
	"https://taskrouter.twilio.com",
}

type UpdateWorkspaceSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type UpdateWorkspaceUpdateWorkspaceRequest struct {
	// The SID of the Activity that will be used when new Workers are created in the Workspace.
	DefaultActivitySid *string `form:"name=DefaultActivitySid"`
	// The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
	EventCallbackURL *string `form:"name=EventCallbackUrl"`
	// The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
	EventsFilter *string `form:"name=EventsFilter"`
	// A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
	FriendlyName *string `form:"name=FriendlyName"`
	// Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
	MultiTaskEnabled     *bool                               `form:"name=MultiTaskEnabled"`
	PrioritizeQueueOrder *shared.WorkspaceEnumQueueOrderEnum `form:"name=PrioritizeQueueOrder"`
	// The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
	TimeoutActivitySid *string `form:"name=TimeoutActivitySid"`
}

type UpdateWorkspaceRequest struct {
	RequestBody *UpdateWorkspaceUpdateWorkspaceRequest `request:"mediaType=application/x-www-form-urlencoded"`
	// The SID of the Workspace resource to update.
	Sid string `pathParam:"style=simple,explode=false,name=Sid"`
}

type UpdateWorkspaceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TaskrouterV1Workspace *shared.TaskrouterV1Workspace
}
