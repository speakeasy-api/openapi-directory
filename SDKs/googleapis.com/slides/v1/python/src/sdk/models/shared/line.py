"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import lineproperties as shared_lineproperties
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LineLineCategoryEnum(str, Enum):
    r"""The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest."""
    LINE_CATEGORY_UNSPECIFIED = 'LINE_CATEGORY_UNSPECIFIED'
    STRAIGHT = 'STRAIGHT'
    BENT = 'BENT'
    CURVED = 'CURVED'

class LineLineTypeEnum(str, Enum):
    r"""The type of the line."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    STRAIGHT_CONNECTOR_1 = 'STRAIGHT_CONNECTOR_1'
    BENT_CONNECTOR_2 = 'BENT_CONNECTOR_2'
    BENT_CONNECTOR_3 = 'BENT_CONNECTOR_3'
    BENT_CONNECTOR_4 = 'BENT_CONNECTOR_4'
    BENT_CONNECTOR_5 = 'BENT_CONNECTOR_5'
    CURVED_CONNECTOR_2 = 'CURVED_CONNECTOR_2'
    CURVED_CONNECTOR_3 = 'CURVED_CONNECTOR_3'
    CURVED_CONNECTOR_4 = 'CURVED_CONNECTOR_4'
    CURVED_CONNECTOR_5 = 'CURVED_CONNECTOR_5'
    STRAIGHT_LINE = 'STRAIGHT_LINE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Line:
    r"""A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector."""
    
    line_category: Optional[LineLineCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineCategory'), 'exclude': lambda f: f is None }})
    r"""The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest."""  
    line_properties: Optional[shared_lineproperties.LineProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineProperties'), 'exclude': lambda f: f is None }})
    r"""The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor."""  
    line_type: Optional[LineLineTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineType'), 'exclude': lambda f: f is None }})
    r"""The type of the line."""  
    