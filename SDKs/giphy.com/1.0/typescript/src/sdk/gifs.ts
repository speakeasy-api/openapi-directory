/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Gifs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get GIF by Id
   *
   * @remarks
   * Returns a GIF given that GIF's unique ID
   *
   */
  getGifById(
    req: operations.GetGifByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGifByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGifByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/gifs/{gifId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGifByIdResponse =
        new operations.GetGifByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getGifById200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetGifById200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get GIFs by ID
   *
   * @remarks
   * A multiget version of the get GIF by ID endpoint.
   *
   */
  getGifsById(
    req: operations.GetGifsByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGifsByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGifsByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gifs";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGifsByIdResponse =
        new operations.GetGifsByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getGifsById200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetGifsById200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Random GIF
   *
   * @remarks
   * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
   *
   */
  randomGif(
    req: operations.RandomGifRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RandomGifResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RandomGifRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gifs/random";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RandomGifResponse =
        new operations.RandomGifResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.randomGif200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.RandomGif200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Search GIFs
   *
   * @remarks
   * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.
   *
   */
  searchGifs(
    req: operations.SearchGifsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchGifsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchGifsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gifs/search";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchGifsResponse =
        new operations.SearchGifsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchGifs200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SearchGifs200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Translate phrase to GIF
   *
   * @remarks
   * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF
   *
   */
  translateGif(
    req: operations.TranslateGifRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TranslateGifResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranslateGifRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gifs/translate";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranslateGifResponse =
        new operations.TranslateGifResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.translateGif200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TranslateGif200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Trending GIFs
   *
   * @remarks
   * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default.
   *
   */
  trendingGifs(
    req: operations.TrendingGifsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TrendingGifsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TrendingGifsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gifs/trending";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TrendingGifsResponse =
        new operations.TrendingGifsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trendingGifs200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrendingGifs200ApplicationJSON
            );
          }
          break;
        case [400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
