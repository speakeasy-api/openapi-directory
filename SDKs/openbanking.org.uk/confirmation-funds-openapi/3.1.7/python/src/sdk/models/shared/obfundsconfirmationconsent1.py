"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBFundsConfirmationConsent1DataDebtorAccount:
    r"""Unambiguous identification of the account of the debtor to which a confirmation of funds consent will be applied."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the account, as assigned by the account servicing institution.
    Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
    """  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBFundsConfirmationConsent1Data:
    
    debtor_account: OBFundsConfirmationConsent1DataDebtorAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebtorAccount') }})
    r"""Unambiguous identification of the account of the debtor to which a confirmation of funds consent will be applied."""  
    expiration_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Specified date and time the funds confirmation authorisation will expire.
     If this is not populated, the authorisation will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBFundsConfirmationConsent1:
    r"""Default"""
    
    data: OBFundsConfirmationConsent1Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Data') }})  
    