"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationSensorReadingsHistoryRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    metrics: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'metrics', 'style': 'form', 'explode': False }})
    r"""Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water."""  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter readings by network."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serials', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter readings by sensor."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    t0: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 't0', 'style': 'form', 'explode': True }})
    r"""The beginning of the timespan for the data. The maximum lookback period is 365 days and 6 hours from today."""  
    t1: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 't1', 'style': 'form', 'explode': True }})
    r"""The end of the timespan for the data. t1 can be a maximum of 7 days after t0."""  
    timespan: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timespan', 'style': 'form', 'explode': True }})
    r"""The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONBattery:
    r"""Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'."""
    
    percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""Remaining battery life."""  
    
class GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum(str, Enum):
    r"""Type of button press that occurred."""
    LONG = 'long'
    SHORT = 'short'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONButton:
    r"""Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'."""
    
    press_type: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONButtonPressTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pressType'), 'exclude': lambda f: f is None }})
    r"""Type of button press that occurred."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONDoor:
    r"""Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'."""
    
    open: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open'), 'exclude': lambda f: f is None }})
    r"""True if the door is open."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONHumidity:
    r"""Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'."""
    
    relative_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativePercentage'), 'exclude': lambda f: f is None }})
    r"""Humidity reading in %RH."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONIndoorAirQuality:
    r"""Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'."""
    
    score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Indoor air quality score between 0 and 100."""  
    
class GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum(str, Enum):
    r"""Type of sensor reading."""
    BATTERY = 'battery'
    BUTTON = 'button'
    DOOR = 'door'
    HUMIDITY = 'humidity'
    INDOOR_AIR_QUALITY = 'indoorAirQuality'
    NOISE = 'noise'
    PM25 = 'pm25'
    TEMPERATURE = 'temperature'
    TVOC = 'tvoc'
    WATER = 'water'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONNetwork:
    r"""Network to which the sensor belongs."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the network."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the network."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONNoiseAmbient:
    r"""Ambient noise reading."""
    
    level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""Ambient noise reading in adjusted decibels."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONNoise:
    r"""Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'."""
    
    ambient: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONNoiseAmbient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ambient'), 'exclude': lambda f: f is None }})
    r"""Ambient noise reading."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONPm25:
    r"""Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""PM2.5 reading in micrograms per cubic meter."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONTemperature:
    r"""Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'."""
    
    celsius: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('celsius'), 'exclude': lambda f: f is None }})
    r"""Temperature reading in degrees Celsius."""  
    fahrenheit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fahrenheit'), 'exclude': lambda f: f is None }})
    r"""Temperature reading in degrees Fahrenheit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONTvoc:
    r"""Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""TVOC reading in micrograms per cubic meter."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSONWater:
    r"""Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'."""
    
    present: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('present'), 'exclude': lambda f: f is None }})
    r"""True if water is detected."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsHistory200ApplicationJSON:
    
    battery: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONBattery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('battery'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'."""  
    button: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONButton] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('button'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'."""  
    door: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONDoor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('door'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'."""  
    humidity: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONHumidity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('humidity'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'."""  
    indoor_air_quality: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONIndoorAirQuality] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indoorAirQuality'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'."""  
    metric: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONMetricEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric'), 'exclude': lambda f: f is None }})
    r"""Type of sensor reading."""  
    network: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Network to which the sensor belongs."""  
    noise: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONNoise] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noise'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'."""  
    pm25: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONPm25] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm25'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Serial number of the sensor that took the reading."""  
    temperature: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONTemperature] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'."""  
    ts: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ts'), 'exclude': lambda f: f is None }})
    r"""Time at which the reading occurred, in ISO8601 format."""  
    tvoc: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONTvoc] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvoc'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'."""  
    water: Optional[GetOrganizationSensorReadingsHistory200ApplicationJSONWater] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'."""  
    

@dataclasses.dataclass
class GetOrganizationSensorReadingsHistoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_sensor_readings_history_200_application_json_objects: Optional[list[GetOrganizationSensorReadingsHistory200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    