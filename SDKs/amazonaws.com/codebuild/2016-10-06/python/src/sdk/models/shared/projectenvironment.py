"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import computetype_enum as shared_computetype_enum
from ..shared import environmenttype_enum as shared_environmenttype_enum
from ..shared import environmentvariable as shared_environmentvariable
from ..shared import imagepullcredentialstype_enum as shared_imagepullcredentialstype_enum
from ..shared import registrycredential as shared_registrycredential
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectEnvironment:
    r"""Information about the build environment of the build project."""
    
    compute_type: shared_computetype_enum.ComputeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeType') }})  
    image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})  
    type: shared_environmenttype_enum.EnvironmentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate'), 'exclude': lambda f: f is None }})  
    environment_variables: Optional[list[shared_environmentvariable.EnvironmentVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentVariables'), 'exclude': lambda f: f is None }})  
    image_pull_credentials_type: Optional[shared_imagepullcredentialstype_enum.ImagePullCredentialsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imagePullCredentialsType'), 'exclude': lambda f: f is None }})  
    privileged_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privilegedMode'), 'exclude': lambda f: f is None }})  
    registry_credential: Optional[shared_registrycredential.RegistryCredential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registryCredential'), 'exclude': lambda f: f is None }})  
    