"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldnamespace_enum as shared_fieldnamespace_enum
from ..shared import fieldtype_enum as shared_fieldtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFieldResponse:
    r"""Object to store detailed field information."""
    
    field_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldArn') }})  
    field_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldId') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    namespace: shared_fieldnamespace_enum.FieldNamespaceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace') }})  
    type: shared_fieldtype_enum.FieldTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    