"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scene as shared_scene
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class MovieDraftEnum(str, Enum):
    r"""Draft movies include a watermark. Check your plan how many draft and final movies you have"""
    TRUE = 'true'
    FALSE = 'false'

class MovieQualityEnum(str, Enum):
    LOW = 'low'
    MEDIUM = 'medium'
    HIGH = 'high'

class MovieResolutionEnum(str, Enum):
    SD = 'sd'
    HD = 'hd'
    FULL_HD = 'full-hd'
    SQUARED = 'squared'
    INSTAGRAM_STORY = 'instagram-story'
    INSTAGRAM_FEED = 'instagram-feed'
    TWITTER_LANDSCAPE = 'twitter-landscape'
    TWITTER_PORTRAIT = 'twitter-portrait'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Movie:
    r"""Object defining the movie to be rendered"""
    
    scenes: list[shared_scene.Scene] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scenes') }})  
    cache: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cache'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Used for adding your comments"""  
    draft: Optional[MovieDraftEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft'), 'exclude': lambda f: f is None }})
    r"""Draft movies include a watermark. Check your plan how many draft and final movies you have"""  
    elements: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})  
    fps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fps'), 'exclude': lambda f: f is None }})
    r"""Frames per second"""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})  
    quality: Optional[MovieQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})  
    resolution: Optional[MovieResolutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolution'), 'exclude': lambda f: f is None }})  
    settings: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})
    r"""Movie advanced settings"""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})  
    