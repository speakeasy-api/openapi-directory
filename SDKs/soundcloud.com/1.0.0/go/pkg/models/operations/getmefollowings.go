// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetMeFollowingsSecurity struct {
	AuthHeader string `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
}

type GetMeFollowingsRequest struct {
	// Number of results to return in the collection.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Offset of first result. Deprecated, use `linked_partitioning` instead.
	//
	// Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
}

type GetMeFollowings200ApplicationJSONType string

const (
	GetMeFollowings200ApplicationJSONTypeUsers            GetMeFollowings200ApplicationJSONType = "Users"
	GetMeFollowings200ApplicationJSONTypeArrayOfUsersList GetMeFollowings200ApplicationJSONType = "arrayOfUsersList"
)

type GetMeFollowings200ApplicationJSON struct {
	Users            *shared.Users
	ArrayOfUsersList []shared.UsersList

	Type GetMeFollowings200ApplicationJSONType
}

func CreateGetMeFollowings200ApplicationJSONUsers(users shared.Users) GetMeFollowings200ApplicationJSON {
	typ := GetMeFollowings200ApplicationJSONTypeUsers

	return GetMeFollowings200ApplicationJSON{
		Users: &users,
		Type:  typ,
	}
}

func CreateGetMeFollowings200ApplicationJSONArrayOfUsersList(arrayOfUsersList []shared.UsersList) GetMeFollowings200ApplicationJSON {
	typ := GetMeFollowings200ApplicationJSONTypeArrayOfUsersList

	return GetMeFollowings200ApplicationJSON{
		ArrayOfUsersList: arrayOfUsersList,
		Type:             typ,
	}
}

func (u *GetMeFollowings200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	users := new(shared.Users)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&users); err == nil {
		u.Users = users
		u.Type = GetMeFollowings200ApplicationJSONTypeUsers
		return nil
	}

	arrayOfUsersList := []shared.UsersList{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfUsersList); err == nil {
		u.ArrayOfUsersList = arrayOfUsersList
		u.Type = GetMeFollowings200ApplicationJSONTypeArrayOfUsersList
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetMeFollowings200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Users != nil {
		return json.Marshal(u.Users)
	}

	if u.ArrayOfUsersList != nil {
		return json.Marshal(u.ArrayOfUsersList)
	}

	return nil, nil
}

type GetMeFollowingsResponse struct {
	ContentType string
	// Unauthorized
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetMeFollowings200ApplicationJSONOneOf *GetMeFollowings200ApplicationJSON
}
