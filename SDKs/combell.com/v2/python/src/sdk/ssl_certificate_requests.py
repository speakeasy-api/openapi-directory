"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SSLCertificateRequests:
    r"""Create new SSL certificates. In the provisioning documentation you can find more info on the flow that should be followed."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_ssl_certificate_request(self, request: shared.CreateSslCertificateRequest) -> operations.AddSslCertificateRequestResponse:
        r"""Add a SSL certificate request
        Executing this method causes the purchase of a paying product.<br />
        Log on to our website to see your current (renewal) prices or contact our Sales department.<br />
        Please note that promotional pricing does not apply for purchases made through our API.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sslcertificaterequests'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddSslCertificateRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def get_ssl_certificate_request(self, request: operations.GetSslCertificateRequestRequest) -> operations.GetSslCertificateRequestResponse:
        r"""Detail of a SSL certificate request"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSslCertificateRequestRequest, base_url, '/sslcertificaterequests/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSslCertificateRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SslCertificateRequestDetail])
                res.ssl_certificate_request_detail = out
        elif http_res.status_code == 303:
            res.headers = http_res.headers
            
        elif http_res.status_code == 410:
            pass

        return res

    def get_ssl_certificate_requests(self, request: operations.GetSslCertificateRequestsRequest) -> operations.GetSslCertificateRequestsResponse:
        r"""Overview of SSL certificate requests"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sslcertificaterequests'
        
        query_params = utils.get_query_params(operations.GetSslCertificateRequestsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSslCertificateRequestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SslCertificateRequest]])
                res.ssl_certificate_requests = out

        return res

    def verify_ssl_certificate_request_domain_validations(self, request: operations.VerifySslCertificateRequestDomainValidationsRequest) -> operations.VerifySslCertificateRequestDomainValidationsResponse:
        r"""Verify the SSL certificate request domain validations"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VerifySslCertificateRequestDomainValidationsRequest, base_url, '/sslcertificaterequests/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VerifySslCertificateRequestDomainValidationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [202, 410]:
            pass
        elif http_res.status_code == 303:
            res.headers = http_res.headers
            

        return res

    