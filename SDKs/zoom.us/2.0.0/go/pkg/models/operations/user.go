// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type UserPathParams struct {
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// UserLoginTypeEnum - `0` - Facebook.<br>`1` - Google.<br>`99` - API.<br>`100` - Zoom.<br>`101` - SSO.
type UserLoginTypeEnum string

const (
	UserLoginTypeEnumZero             UserLoginTypeEnum = "0"
	UserLoginTypeEnumOne              UserLoginTypeEnum = "1"
	UserLoginTypeEnumNinetyNine       UserLoginTypeEnum = "99"
	UserLoginTypeEnumOneHundred       UserLoginTypeEnum = "100"
	UserLoginTypeEnumOneHundredAndOne UserLoginTypeEnum = "101"
)

func (e *UserLoginTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "99":
		fallthrough
	case "100":
		fallthrough
	case "101":
		*e = UserLoginTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserLoginTypeEnum: %s", s)
	}
}

type UserQueryParams struct {
	// `0` - Facebook.<br>`1` - Google.<br>`99` - API.<br>`100` - Zoom.<br>`101` - SSO.
	LoginType *UserLoginTypeEnum `queryParam:"style=form,explode=true,name=login_type"`
}

type UserRequest struct {
	PathParams  UserPathParams
	QueryParams UserQueryParams
}

// User200ApplicationXMLCustomAttributes - Custom attribute(s) that have been assigned to the user.
type User200ApplicationXMLCustomAttributes struct {
	// Identifier for the custom attribute.
	Key *string
	// Name of the custom attribute.
	Name *string
	// Value of the custom attribute.
	Value *string
}

// User200ApplicationXMLLoginTypeEnum - Login type.
//
// `0` : Facebook
//
// `1` : Google
//
// `99` : API
//
// `100` : ZOOM
//
// `101` : SSO
type User200ApplicationXMLLoginTypeEnum string

const (
	User200ApplicationXMLLoginTypeEnumZero             User200ApplicationXMLLoginTypeEnum = "0"
	User200ApplicationXMLLoginTypeEnumOne              User200ApplicationXMLLoginTypeEnum = "1"
	User200ApplicationXMLLoginTypeEnumNinetyNine       User200ApplicationXMLLoginTypeEnum = "99"
	User200ApplicationXMLLoginTypeEnumOneHundred       User200ApplicationXMLLoginTypeEnum = "100"
	User200ApplicationXMLLoginTypeEnumOneHundredAndOne User200ApplicationXMLLoginTypeEnum = "101"
)

func (e *User200ApplicationXMLLoginTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "99":
		fallthrough
	case "100":
		fallthrough
	case "101":
		*e = User200ApplicationXMLLoginTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for User200ApplicationXMLLoginTypeEnum: %s", s)
	}
}

type User200ApplicationXMLPhoneNumbers struct {
	// Country code of the phone number. For example, for United States phone numbers, the value of this field should be "+1".
	Code *string
	// [Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `number` field is a Brazil based number, the value of the `country` field should be `BR`.
	Country *string
	// Phone number of the user.
	Number *string
	// Indicates whether the phone number has been verified by Zoom or not.
	Verified *bool
}

// User200ApplicationXMLStatusEnum - Status of user's account.
type User200ApplicationXMLStatusEnum string

const (
	User200ApplicationXMLStatusEnumPending  User200ApplicationXMLStatusEnum = "pending"
	User200ApplicationXMLStatusEnumActive   User200ApplicationXMLStatusEnum = "active"
	User200ApplicationXMLStatusEnumInactive User200ApplicationXMLStatusEnum = "inactive"
)

func (e *User200ApplicationXMLStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "inactive":
		*e = User200ApplicationXMLStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for User200ApplicationXMLStatusEnum: %s", s)
	}
}

// User200ApplicationXMLTypeEnum - User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
type User200ApplicationXMLTypeEnum string

const (
	User200ApplicationXMLTypeEnumOne        User200ApplicationXMLTypeEnum = "1"
	User200ApplicationXMLTypeEnumTwo        User200ApplicationXMLTypeEnum = "2"
	User200ApplicationXMLTypeEnumThree      User200ApplicationXMLTypeEnum = "3"
	User200ApplicationXMLTypeEnumNinetyNine User200ApplicationXMLTypeEnum = "99"
)

func (e *User200ApplicationXMLTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "99":
		*e = User200ApplicationXMLTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for User200ApplicationXMLTypeEnum: %s", s)
	}
}

// User200ApplicationXML - The user object represents a specific user on Zoom.
type User200ApplicationXML struct {
	// User's account ID.
	AccountID *string
	// CMS ID of user, only enabled for Kaltura integration.
	CmsUserID *string
	// User's company.
	Company *string
	// The date and time at which this user was created.
	CreatedAt *time.Time
	// Custom attribute(s) that have been assigned to the user.
	CustomAttributes *User200ApplicationXMLCustomAttributes
	// Department.
	Dept *string
	// User's email address.
	Email string
	// User's first name.
	FirstName *string
	// IDs of the web groups user belongs to.
	GroupIds []string
	// User's host key.
	HostKey *string
	// User ID.
	ID *string
	// IM IDs of the groups user belongs to.
	ImGroupIds []string
	Jid        *string
	// User's job title.
	JobTitle *string
	// Default language for the Zoom Web Portal.
	Language *string
	// User last login client version.
	LastClientVersion *string
	// User last login time.
	LastLoginTime *time.Time
	// User's last name.
	LastName *string
	// User's location.
	Location *string
	// Login type.
	//
	// `0` : Facebook
	//
	// `1` : Google
	//
	// `99` : API
	//
	// `100` : ZOOM
	//
	// `101` : SSO
	LoginType *User200ApplicationXMLLoginTypeEnum
	// The manager for the user.
	Manager *string
	// User's personal meeting url.
	PersonalMeetingURL *string
	// **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's country for Company Phone Number.
	PhoneCountry *string
	// **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's phone number.
	PhoneNumber  *string
	PhoneNumbers *User200ApplicationXMLPhoneNumbers
	// The URL for user's profile picture.
	PicURL *string
	// United plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans). Only returned if user is enrolled in the Zoom United plan.
	PlanUnitedType *string
	// Personal meeting ID.
	Pmi *int64
	// Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user.
	RoleID *string
	// User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.
	RoleName *string
	// Status of user's account.
	Status *User200ApplicationXMLStatusEnum
	// The time zone of the user.
	Timezone *string
	// User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
	Type User200ApplicationXMLTypeEnum
	// Displays `true` if user has enabled PMI for instant meetinsgs, `false` otherwise.
	UsePmi *bool
	// Personal meeting room URL, if the user has one.
	VanityURL *string
	// Displays whether user is verified or not. <br>
	// `1` - Account verified.<br>
	// `0` - Account not verified.
	Verified *int64
}

// User200ApplicationJSONCustomAttributes - Custom attribute(s) that have been assigned to the user.
type User200ApplicationJSONCustomAttributes struct {
	// Identifier for the custom attribute.
	Key *string `json:"key,omitempty"`
	// Name of the custom attribute.
	Name *string `json:"name,omitempty"`
	// Value of the custom attribute.
	Value *string `json:"value,omitempty"`
}

// User200ApplicationJSONLoginTypeEnum - Login type.
//
// `0` : Facebook
//
// `1` : Google
//
// `99` : API
//
// `100` : ZOOM
//
// `101` : SSO
type User200ApplicationJSONLoginTypeEnum string

const (
	User200ApplicationJSONLoginTypeEnumZero             User200ApplicationJSONLoginTypeEnum = "0"
	User200ApplicationJSONLoginTypeEnumOne              User200ApplicationJSONLoginTypeEnum = "1"
	User200ApplicationJSONLoginTypeEnumNinetyNine       User200ApplicationJSONLoginTypeEnum = "99"
	User200ApplicationJSONLoginTypeEnumOneHundred       User200ApplicationJSONLoginTypeEnum = "100"
	User200ApplicationJSONLoginTypeEnumOneHundredAndOne User200ApplicationJSONLoginTypeEnum = "101"
)

func (e *User200ApplicationJSONLoginTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "99":
		fallthrough
	case "100":
		fallthrough
	case "101":
		*e = User200ApplicationJSONLoginTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for User200ApplicationJSONLoginTypeEnum: %s", s)
	}
}

type User200ApplicationJSONPhoneNumbers struct {
	// Country code of the phone number. For example, for United States phone numbers, the value of this field should be "+1".
	Code *string `json:"code,omitempty"`
	// [Country ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) of the phone number. For example, if the phone number provided in the `number` field is a Brazil based number, the value of the `country` field should be `BR`.
	Country *string `json:"country,omitempty"`
	// Phone number of the user.
	Number *string `json:"number,omitempty"`
	// Indicates whether the phone number has been verified by Zoom or not.
	Verified *bool `json:"verified,omitempty"`
}

// User200ApplicationJSONStatusEnum - Status of user's account.
type User200ApplicationJSONStatusEnum string

const (
	User200ApplicationJSONStatusEnumPending  User200ApplicationJSONStatusEnum = "pending"
	User200ApplicationJSONStatusEnumActive   User200ApplicationJSONStatusEnum = "active"
	User200ApplicationJSONStatusEnumInactive User200ApplicationJSONStatusEnum = "inactive"
)

func (e *User200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "inactive":
		*e = User200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for User200ApplicationJSONStatusEnum: %s", s)
	}
}

// User200ApplicationJSONTypeEnum - User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
type User200ApplicationJSONTypeEnum string

const (
	User200ApplicationJSONTypeEnumOne        User200ApplicationJSONTypeEnum = "1"
	User200ApplicationJSONTypeEnumTwo        User200ApplicationJSONTypeEnum = "2"
	User200ApplicationJSONTypeEnumThree      User200ApplicationJSONTypeEnum = "3"
	User200ApplicationJSONTypeEnumNinetyNine User200ApplicationJSONTypeEnum = "99"
)

func (e *User200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "99":
		*e = User200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for User200ApplicationJSONTypeEnum: %s", s)
	}
}

// User200ApplicationJSON - The user object represents a specific user on Zoom.
type User200ApplicationJSON struct {
	// User's account ID.
	AccountID *string `json:"account_id,omitempty"`
	// CMS ID of user, only enabled for Kaltura integration.
	CmsUserID *string `json:"cms_user_id,omitempty"`
	// User's company.
	Company *string `json:"company,omitempty"`
	// The date and time at which this user was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Custom attribute(s) that have been assigned to the user.
	CustomAttributes *User200ApplicationJSONCustomAttributes `json:"custom_attributes,omitempty"`
	// Department.
	Dept *string `json:"dept,omitempty"`
	// User's email address.
	Email string `json:"email"`
	// User's first name.
	FirstName *string `json:"first_name,omitempty"`
	// IDs of the web groups user belongs to.
	GroupIds []string `json:"group_ids,omitempty"`
	// User's host key.
	HostKey *string `json:"host_key,omitempty"`
	// User ID.
	ID *string `json:"id,omitempty"`
	// IM IDs of the groups user belongs to.
	ImGroupIds []string `json:"im_group_ids,omitempty"`
	Jid        *string  `json:"jid,omitempty"`
	// User's job title.
	JobTitle *string `json:"job_title,omitempty"`
	// Default language for the Zoom Web Portal.
	Language *string `json:"language,omitempty"`
	// User last login client version.
	LastClientVersion *string `json:"last_client_version,omitempty"`
	// User last login time.
	LastLoginTime *time.Time `json:"last_login_time,omitempty"`
	// User's last name.
	LastName *string `json:"last_name,omitempty"`
	// User's location.
	Location *string `json:"location,omitempty"`
	// Login type.
	//
	// `0` : Facebook
	//
	// `1` : Google
	//
	// `99` : API
	//
	// `100` : ZOOM
	//
	// `101` : SSO
	LoginType *User200ApplicationJSONLoginTypeEnum `json:"login_type,omitempty"`
	// The manager for the user.
	Manager *string `json:"manager,omitempty"`
	// User's personal meeting url.
	PersonalMeetingURL *string `json:"personal_meeting_url,omitempty"`
	// **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's country for Company Phone Number.
	PhoneCountry *string `json:"phone_country,omitempty"`
	// **Note:** This field has been **deprecated** and will not be supported in the future. Use the **phone_numbers** field instead of this field. <br> User's phone number.
	PhoneNumber  *string                             `json:"phone_number,omitempty"`
	PhoneNumbers *User200ApplicationJSONPhoneNumbers `json:"phone_numbers,omitempty"`
	// The URL for user's profile picture.
	PicURL *string `json:"pic_url,omitempty"`
	// United plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans). Only returned if user is enrolled in the Zoom United plan.
	PlanUnitedType *string `json:"plan_united_type,omitempty"`
	// Personal meeting ID.
	Pmi *int64 `json:"pmi,omitempty"`
	// Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user.
	RoleID *string `json:"role_id,omitempty"`
	// User's [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) name.
	RoleName *string `json:"role_name,omitempty"`
	// Status of user's account.
	Status *User200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// The time zone of the user.
	Timezone *string `json:"timezone,omitempty"`
	// User's plan type:<br>`1` - Basic.<br>`2` - Licensed.<br>`3` - On-prem.<br>`99` - None (this can only be set with `ssoCreate`).
	Type User200ApplicationJSONTypeEnum `json:"type"`
	// Displays `true` if user has enabled PMI for instant meetinsgs, `false` otherwise.
	UsePmi *bool `json:"use_pmi,omitempty"`
	// Personal meeting room URL, if the user has one.
	VanityURL *string `json:"vanity_url,omitempty"`
	// Displays whether user is verified or not. <br>
	// `1` - Account verified.<br>
	// `0` - Account not verified.
	Verified *int64 `json:"verified,omitempty"`
}

type UserResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// User object returned.
	User200ApplicationJSONObject *User200ApplicationJSON
}
