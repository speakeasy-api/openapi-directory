// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UsageRecordEnumGranularityEnum - Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`. `all` returns one UsageRecord that describes the usage for the entire period.
type UsageRecordEnumGranularityEnum string

const (
	UsageRecordEnumGranularityEnumHour UsageRecordEnumGranularityEnum = "hour"
	UsageRecordEnumGranularityEnumDay  UsageRecordEnumGranularityEnum = "day"
	UsageRecordEnumGranularityEnumAll  UsageRecordEnumGranularityEnum = "all"
)

func (e UsageRecordEnumGranularityEnum) ToPointer() *UsageRecordEnumGranularityEnum {
	return &e
}

func (e *UsageRecordEnumGranularityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hour":
		fallthrough
	case "day":
		fallthrough
	case "all":
		*e = UsageRecordEnumGranularityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageRecordEnumGranularityEnum: %v", v)
	}
}
