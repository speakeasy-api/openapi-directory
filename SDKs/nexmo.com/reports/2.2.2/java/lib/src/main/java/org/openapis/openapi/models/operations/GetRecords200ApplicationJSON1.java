/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * GetRecords200ApplicationJSON1 - SMS (Outbound)
 */
public class GetRecords200ApplicationJSON1 {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public GetRecords200ApplicationJSON1Links links;
    public GetRecords200ApplicationJSON1 withLinks(GetRecords200ApplicationJSON1Links links) {
        this.links = links;
        return this;
    }
    
    /**
     * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;
    public GetRecords200ApplicationJSON1 withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Currency of the price of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public GetRecords200ApplicationJSON1 withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    public GetRecords200ApplicationJSON1DirectionEnum direction;
    public GetRecords200ApplicationJSON1 withDirection(GetRecords200ApplicationJSON1DirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ids_not_found")
    public String idsNotFound;
    public GetRecords200ApplicationJSON1 withIdsNotFound(String idsNotFound) {
        this.idsNotFound = idsNotFound;
        return this;
    }
    
    /**
     * Include the text of messages in the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_message")
    public Boolean includeMessage;
    public GetRecords200ApplicationJSON1 withIncludeMessage(Boolean includeMessage) {
        this.includeMessage = includeMessage;
        return this;
    }
    
    /**
     * The number of returned records
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items_count")
    public Long itemsCount;
    public GetRecords200ApplicationJSON1 withItemsCount(Long itemsCount) {
        this.itemsCount = itemsCount;
        return this;
    }
    
    /**
     * Price of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Double price;
    public GetRecords200ApplicationJSON1 withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * Which product you wish to generate a report for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    public org.openapis.openapi.models.shared.ProductSmsEnum product;
    public GetRecords200ApplicationJSON1 withProduct(org.openapis.openapi.models.shared.ProductSmsEnum product) {
        this.product = product;
        return this;
    }
    
    /**
     * Time at which the report request was received by the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("received_at")
    public LocalDate receivedAt;
    public GetRecords200ApplicationJSON1 withReceivedAt(LocalDate receivedAt) {
        this.receivedAt = receivedAt;
        return this;
    }
    
    /**
     * Records in JSON format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("records")
    public org.openapis.openapi.models.shared.JsonSmsOutboundWithBody[] records;
    public GetRecords200ApplicationJSON1 withRecords(org.openapis.openapi.models.shared.JsonSmsOutboundWithBody[] records) {
        this.records = records;
        return this;
    }
    
    /**
     * UUID of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_id")
    public String requestId;
    public GetRecords200ApplicationJSON1 withRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }
    
    /**
     * Status of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_status")
    public org.openapis.openapi.models.shared.RequestStatusEnum requestStatus;
    public GetRecords200ApplicationJSON1 withRequestStatus(org.openapis.openapi.models.shared.RequestStatusEnum requestStatus) {
        this.requestStatus = requestStatus;
        return this;
    }
    
    /**
     * Indicates whether the SMS was split up into multiple parts (due to its length).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_concatenated")
    public Boolean showConcatenated;
    public GetRecords200ApplicationJSON1 withShowConcatenated(Boolean showConcatenated) {
        this.showConcatenated = showConcatenated;
        return this;
    }
    
}
