// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateProjectRequestBodyDocuments struct {
	Content   []byte `multipartForm:"content"`
	Documents string `multipartForm:"name=documents[]"`
}

type CreateProjectRequestBodyGlossaries struct {
	Content    []byte `multipartForm:"content"`
	Glossaries string `multipartForm:"name=glossaries[]"`
}

type CreateProjectRequestBodyStyleguides struct {
	Content     []byte `multipartForm:"content"`
	Styleguides string `multipartForm:"name=styleguides[]"`
}

type CreateProjectRequestBody struct {
	// Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
	CallbackURL *string `multipartForm:"name=callback_url"`
	// Coupon code to redeem
	CouponCode *string `multipartForm:"name=coupon_code"`
	// Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.
	Custom []string `multipartForm:"name=custom"`
	// Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.
	Documents *CreateProjectRequestBodyDocuments `multipartForm:"file"`
	// Optional. Only one glossary is supported at the moment.
	Glossaries     *CreateProjectRequestBodyGlossaries `multipartForm:"file"`
	SourceLanguage *string                             `multipartForm:"name=source_language"`
	// Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.
	Styleguides     *CreateProjectRequestBodyStyleguides `multipartForm:"file"`
	TargetLanguages []string                             `multipartForm:"name=target_languages[]"`
}

type CreateProjectRequest struct {
	Request *CreateProjectRequestBody `request:"mediaType=multipart/form-data"`
}

type CreateProjectResponse struct {
	ContentType string
	// FileTooLarge FileTooSmall FileWasAlreadyUploaded
	Error *shared.Error
	// Newly created project
	Project     *shared.Project
	StatusCode  int
	RawResponse *http.Response
}
