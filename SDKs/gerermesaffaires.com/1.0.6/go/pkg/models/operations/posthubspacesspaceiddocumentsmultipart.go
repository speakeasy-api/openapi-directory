// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostHubSpacesSpaceIDDocumentsMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum string

const (
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumCustomer    PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumProvider    PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumBank        PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumCashWoucher PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumFiscal      PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumInsurance   PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumSocial      PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "social"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumOther       PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "other"
	PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnumPermanent   PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum) ToPointer() *PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum {
	return &e
}

func (e *PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum: %v", v)
	}
}

type PostHubSpacesSpaceIDDocumentsMultipartFormDataAccounting struct {
	AccountedOn *string                                                               `json:"AccountedOn,omitempty"`
	Workbook    *PostHubSpacesSpaceIDDocumentsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                               `json:"YearMonth,omitempty"`
}

type PostHubSpacesSpaceIDDocumentsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostHubSpacesSpaceIDDocumentsMultipartFormData1 - Document to add
type PostHubSpacesSpaceIDDocumentsMultipartFormData1 struct {
	Accounting *PostHubSpacesSpaceIDDocumentsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author     *string                                                   `multipartForm:"name=Author"`
	Code       *string                                                   `multipartForm:"name=Code"`
	Comment    *string                                                   `multipartForm:"name=Comment"`
	Date       *string                                                   `multipartForm:"name=Date"`
	File       PostHubSpacesSpaceIDDocumentsMultipartFormDataFile        `multipartForm:"file"`
	Title      string                                                    `multipartForm:"name=Title"`
}

type PostHubSpacesSpaceIDDocumentsMultipartRequest struct {
	// Document to add
	RequestBody PostHubSpacesSpaceIDDocumentsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostHubSpacesSpaceIDDocumentsMultipart201ApplicationJSON - Id of documents created
type PostHubSpacesSpaceIDDocumentsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostHubSpacesSpaceIDDocumentsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of documents created
	PostHubSpacesSpaceIDDocumentsMultipart201ApplicationJSONObject *PostHubSpacesSpaceIDDocumentsMultipart201ApplicationJSON
}
