// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RecurringTieredPricingOverrideListPriceBaseEnum - Specifies the duration of each recurring period.
type RecurringTieredPricingOverrideListPriceBaseEnum string

const (
	RecurringTieredPricingOverrideListPriceBaseEnumPerBillingPeriod RecurringTieredPricingOverrideListPriceBaseEnum = "Per_Billing_Period"
	RecurringTieredPricingOverrideListPriceBaseEnumPerMonth         RecurringTieredPricingOverrideListPriceBaseEnum = "Per_Month"
	RecurringTieredPricingOverrideListPriceBaseEnumPerWeek          RecurringTieredPricingOverrideListPriceBaseEnum = "Per_Week"
)

func (e *RecurringTieredPricingOverrideListPriceBaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Per_Billing_Period":
		fallthrough
	case "Per_Month":
		fallthrough
	case "Per_Week":
		*e = RecurringTieredPricingOverrideListPriceBaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecurringTieredPricingOverrideListPriceBaseEnum: %s", s)
	}
}

// RecurringTieredPricingOverridePriceChangeOptionEnum - Specifies how Zuora changes the price of the charge each time the subscription renews.
//
// If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
type RecurringTieredPricingOverridePriceChangeOptionEnum string

const (
	RecurringTieredPricingOverridePriceChangeOptionEnumNoChange                       RecurringTieredPricingOverridePriceChangeOptionEnum = "NoChange"
	RecurringTieredPricingOverridePriceChangeOptionEnumSpecificPercentageValue        RecurringTieredPricingOverridePriceChangeOptionEnum = "SpecificPercentageValue"
	RecurringTieredPricingOverridePriceChangeOptionEnumUseLatestProductCatalogPricing RecurringTieredPricingOverridePriceChangeOptionEnum = "UseLatestProductCatalogPricing"
)

func (e *RecurringTieredPricingOverridePriceChangeOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NoChange":
		fallthrough
	case "SpecificPercentageValue":
		fallthrough
	case "UseLatestProductCatalogPricing":
		*e = RecurringTieredPricingOverridePriceChangeOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecurringTieredPricingOverridePriceChangeOptionEnum: %s", s)
	}
}

// RecurringTieredPricingOverride - Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
type RecurringTieredPricingOverride struct {
	// Specifies the duration of each recurring period.
	//
	ListPriceBase *RecurringTieredPricingOverrideListPriceBaseEnum `json:"listPriceBase,omitempty"`
	// Specifies how Zuora changes the price of the charge each time the subscription renews.
	//
	// If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
	//
	PriceChangeOption *RecurringTieredPricingOverridePriceChangeOptionEnum `json:"priceChangeOption,omitempty"`
	// Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`.
	//
	PriceIncreasePercentage *float64 `json:"priceIncreasePercentage,omitempty"`
	// Number of units purchased.
	//
	Quantity *float64 `json:"quantity,omitempty"`
	// List of cumulative pricing tiers in the charge.
	//
	Tiers []ChargeTier `json:"tiers,omitempty"`
}
