<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ExternalEventEntity - List External Events
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ExternalEventEntity
{
    /**
     * Event body
     * 
     * @var ?string $body
     */
	#[\JMS\Serializer\Annotation\SerializedName('body')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $body = null;
    
    /**
     * Link to log file.
     * 
     * @var ?string $bodyUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('body_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bodyUrl = null;
    
    /**
     * For sync events, the total number of bytes synced.
     * 
     * @var ?int $bytesSynced
     */
	#[\JMS\Serializer\Annotation\SerializedName('bytes_synced')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $bytesSynced = null;
    
    /**
     * External event create date/time
     * 
     * @var ?\DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $createdAt = null;
    
    /**
     * For sync events, the number of files that encountered errors.
     * 
     * @var ?int $erroredFiles
     */
	#[\JMS\Serializer\Annotation\SerializedName('errored_files')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $erroredFiles = null;
    
    /**
     * Type of event being recorded.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExternalEventEntityEventTypeEnum $eventType
     */
	#[\JMS\Serializer\Annotation\SerializedName('event_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExternalEventEntityEventTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExternalEventEntityEventTypeEnum $eventType = null;
    
    /**
     * Folder Behavior ID
     * 
     * @var ?int $folderBehaviorId
     */
	#[\JMS\Serializer\Annotation\SerializedName('folder_behavior_id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $folderBehaviorId = null;
    
    /**
     * Event ID
     * 
     * @var ?int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $id = null;
    
    /**
     * Associated Remote Server type, if any
     * 
     * @var ?string $remoteServerType
     */
	#[\JMS\Serializer\Annotation\SerializedName('remote_server_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $remoteServerType = null;
    
    /**
     * Status of event.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExternalEventEntityStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExternalEventEntityStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExternalEventEntityStatusEnum $status = null;
    
    /**
     * For sync events, the number of files handled successfully.
     * 
     * @var ?int $successfulFiles
     */
	#[\JMS\Serializer\Annotation\SerializedName('successful_files')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $successfulFiles = null;
    
	public function __construct()
	{
		$this->body = null;
		$this->bodyUrl = null;
		$this->bytesSynced = null;
		$this->createdAt = null;
		$this->erroredFiles = null;
		$this->eventType = null;
		$this->folderBehaviorId = null;
		$this->id = null;
		$this->remoteServerType = null;
		$this->status = null;
		$this->successfulFiles = null;
	}
}
