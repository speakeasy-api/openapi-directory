/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Users {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves the profile information used for logging in to a virtual machine on Google Compute Engine.
   */
  osloginUsersGetLoginProfile(
    req: operations.OsloginUsersGetLoginProfileRequest,
    security: operations.OsloginUsersGetLoginProfileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsloginUsersGetLoginProfileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsloginUsersGetLoginProfileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}/loginProfile",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsloginUsersGetLoginProfileSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsloginUsersGetLoginProfileResponse =
        new operations.OsloginUsersGetLoginProfileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.loginProfile = utils.objectToClass(
              httpRes?.data,
              shared.LoginProfile
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds an SSH public key and returns the profile information. Default POSIX account information is set when no username and UID exist as part of the login profile.
   */
  osloginUsersImportSshPublicKey(
    req: operations.OsloginUsersImportSshPublicKeyRequest,
    security: operations.OsloginUsersImportSshPublicKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsloginUsersImportSshPublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsloginUsersImportSshPublicKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}:importSshPublicKey",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sshPublicKeyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsloginUsersImportSshPublicKeySecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsloginUsersImportSshPublicKeyResponse =
        new operations.OsloginUsersImportSshPublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.importSshPublicKeyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ImportSshPublicKeyResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an SSH public key
   */
  osloginUsersSshPublicKeysCreate(
    req: operations.OsloginUsersSshPublicKeysCreateRequest,
    security: operations.OsloginUsersSshPublicKeysCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsloginUsersSshPublicKeysCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsloginUsersSshPublicKeysCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/sshPublicKeys",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sshPublicKeyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsloginUsersSshPublicKeysCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsloginUsersSshPublicKeysCreateResponse =
        new operations.OsloginUsersSshPublicKeysCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshPublicKey = utils.objectToClass(
              httpRes?.data,
              shared.SshPublicKey
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an SSH public key.
   */
  osloginUsersSshPublicKeysDelete(
    req: operations.OsloginUsersSshPublicKeysDeleteRequest,
    security: operations.OsloginUsersSshPublicKeysDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsloginUsersSshPublicKeysDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsloginUsersSshPublicKeysDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsloginUsersSshPublicKeysDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsloginUsersSshPublicKeysDeleteResponse =
        new operations.OsloginUsersSshPublicKeysDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves an SSH public key.
   */
  osloginUsersSshPublicKeysGet(
    req: operations.OsloginUsersSshPublicKeysGetRequest,
    security: operations.OsloginUsersSshPublicKeysGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsloginUsersSshPublicKeysGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsloginUsersSshPublicKeysGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsloginUsersSshPublicKeysGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsloginUsersSshPublicKeysGetResponse =
        new operations.OsloginUsersSshPublicKeysGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshPublicKey = utils.objectToClass(
              httpRes?.data,
              shared.SshPublicKey
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an SSH public key and returns the profile information. This method supports patch semantics.
   */
  osloginUsersSshPublicKeysPatch(
    req: operations.OsloginUsersSshPublicKeysPatchRequest,
    security: operations.OsloginUsersSshPublicKeysPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsloginUsersSshPublicKeysPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsloginUsersSshPublicKeysPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sshPublicKeyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsloginUsersSshPublicKeysPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsloginUsersSshPublicKeysPatchResponse =
        new operations.OsloginUsersSshPublicKeysPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshPublicKey = utils.objectToClass(
              httpRes?.data,
              shared.SshPublicKey
            );
          }
          break;
      }

      return res;
    });
  }
}
