// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateLabelFromShipmentRequestBodyDisplaySchemeEnum - The display format that the label should be shown in.
type CreateLabelFromShipmentRequestBodyDisplaySchemeEnum string

const (
	CreateLabelFromShipmentRequestBodyDisplaySchemeEnumLabel          CreateLabelFromShipmentRequestBodyDisplaySchemeEnum = "label"
	CreateLabelFromShipmentRequestBodyDisplaySchemeEnumQrCode         CreateLabelFromShipmentRequestBodyDisplaySchemeEnum = "qr_code"
	CreateLabelFromShipmentRequestBodyDisplaySchemeEnumLabelAndQrCode CreateLabelFromShipmentRequestBodyDisplaySchemeEnum = "label_and_qr_code"
)

func (e CreateLabelFromShipmentRequestBodyDisplaySchemeEnum) ToPointer() *CreateLabelFromShipmentRequestBodyDisplaySchemeEnum {
	return &e
}

func (e *CreateLabelFromShipmentRequestBodyDisplaySchemeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "label":
		fallthrough
	case "qr_code":
		fallthrough
	case "label_and_qr_code":
		*e = CreateLabelFromShipmentRequestBodyDisplaySchemeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLabelFromShipmentRequestBodyDisplaySchemeEnum: %v", v)
	}
}

// CreateLabelFromShipmentRequestBodyLabelFormatEnum - The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
//
// |Label Format  | Supported Carriers
// |--------------|-----------------------------------
// |`pdf`         | All carriers
// |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
// |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
type CreateLabelFromShipmentRequestBodyLabelFormatEnum string

const (
	CreateLabelFromShipmentRequestBodyLabelFormatEnumPdf CreateLabelFromShipmentRequestBodyLabelFormatEnum = "pdf"
	CreateLabelFromShipmentRequestBodyLabelFormatEnumPng CreateLabelFromShipmentRequestBodyLabelFormatEnum = "png"
	CreateLabelFromShipmentRequestBodyLabelFormatEnumZpl CreateLabelFromShipmentRequestBodyLabelFormatEnum = "zpl"
)

func (e CreateLabelFromShipmentRequestBodyLabelFormatEnum) ToPointer() *CreateLabelFromShipmentRequestBodyLabelFormatEnum {
	return &e
}

func (e *CreateLabelFromShipmentRequestBodyLabelFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		fallthrough
	case "png":
		fallthrough
	case "zpl":
		*e = CreateLabelFromShipmentRequestBodyLabelFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLabelFromShipmentRequestBodyLabelFormatEnum: %v", v)
	}
}

// CreateLabelFromShipmentRequestBodyLabelLayoutEnum - The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
type CreateLabelFromShipmentRequestBodyLabelLayoutEnum string

const (
	CreateLabelFromShipmentRequestBodyLabelLayoutEnumFourx6 CreateLabelFromShipmentRequestBodyLabelLayoutEnum = "4x6"
	CreateLabelFromShipmentRequestBodyLabelLayoutEnumLetter CreateLabelFromShipmentRequestBodyLabelLayoutEnum = "letter"
)

func (e CreateLabelFromShipmentRequestBodyLabelLayoutEnum) ToPointer() *CreateLabelFromShipmentRequestBodyLabelLayoutEnum {
	return &e
}

func (e *CreateLabelFromShipmentRequestBodyLabelLayoutEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "4x6":
		fallthrough
	case "letter":
		*e = CreateLabelFromShipmentRequestBodyLabelLayoutEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLabelFromShipmentRequestBodyLabelLayoutEnum: %v", v)
	}
}

// CreateLabelFromShipmentRequestBody - A purchase label without shipment request body
type CreateLabelFromShipmentRequestBody struct {
	// The display format that the label should be shown in.
	DisplayScheme     *CreateLabelFromShipmentRequestBodyDisplaySchemeEnum `json:"display_scheme,omitempty"`
	LabelDownloadType *LabelDownloadTypeEnum                               `json:"label_download_type,omitempty"`
	LabelFormat       *CreateLabelFromShipmentRequestBodyLabelFormatEnum   `json:"label_format,omitempty"`
	LabelLayout       *CreateLabelFromShipmentRequestBodyLabelLayoutEnum   `json:"label_layout,omitempty"`
	ValidateAddress   *ValidateAddressEnum                                 `json:"validate_address,omitempty"`
}
