// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PositionalConstraintEnum string

const (
	PositionalConstraintEnumExactly      PositionalConstraintEnum = "EXACTLY"
	PositionalConstraintEnumStartsWith   PositionalConstraintEnum = "STARTS_WITH"
	PositionalConstraintEnumEndsWith     PositionalConstraintEnum = "ENDS_WITH"
	PositionalConstraintEnumContains     PositionalConstraintEnum = "CONTAINS"
	PositionalConstraintEnumContainsWord PositionalConstraintEnum = "CONTAINS_WORD"
)

func (e PositionalConstraintEnum) ToPointer() *PositionalConstraintEnum {
	return &e
}

func (e *PositionalConstraintEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXACTLY":
		fallthrough
	case "STARTS_WITH":
		fallthrough
	case "ENDS_WITH":
		fallthrough
	case "CONTAINS":
		fallthrough
	case "CONTAINS_WORD":
		*e = PositionalConstraintEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PositionalConstraintEnum: %v", v)
	}
}
