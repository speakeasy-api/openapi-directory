"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AntennaPolEnum(str, Enum):
    r"""Antenna polarization as either h or v"""
    H = 'h'
    V = 'v'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Antenna:
    
    ant: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ant'), 'exclude': lambda f: f is None }})
    r"""Antenna pattern code. 1=Vertical dipole (Omni-directional)"""  
    azi: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('azi'), 'exclude': lambda f: f is None }})
    r"""Antenna azimuth in degrees north"""  
    hbw: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hbw'), 'exclude': lambda f: f is None }})
    r"""Custom antenna horizontal beamwidth in degrees. For use only with ant=0"""  
    pol: Optional[AntennaPolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pol'), 'exclude': lambda f: f is None }})
    r"""Antenna polarization as either h or v"""  
    tlt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tlt'), 'exclude': lambda f: f is None }})
    r"""Antenna tilt in degrees below the horizon (inverted)"""  
    txg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txg'), 'exclude': lambda f: f is None }})
    r"""Transmitter antenna gain in dBi"""  
    txl: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txl'), 'exclude': lambda f: f is None }})
    r"""Feeder loss in dB"""  
    vbw: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vbw'), 'exclude': lambda f: f is None }})
    r"""Custom antenna vertical beamwidth in degrees. For use only with ant=0"""  
    