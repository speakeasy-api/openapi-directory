/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings {
    /**
     * Allow live streaming.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_live_streaming")
    public Boolean allowLiveStreaming;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withAllowLiveStreaming(Boolean allowLiveStreaming) {
        this.allowLiveStreaming = allowLiveStreaming;
        return this;
    }
    
    /**
     * Allow participants to use annotation tools.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotation")
    public Boolean annotation;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withAnnotation(Boolean annotation) {
        this.annotation = annotation;
        return this;
    }
    
    /**
     * Allow host to put attendee on hold.
     * 
     * **This field has been deprecated and is no longer supported.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendee_on_hold")
    public Boolean attendeeOnHold;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withAttendeeOnHold(Boolean attendeeOnHold) {
        this.attendeeOnHold = attendeeOnHold;
        return this;
    }
    
    /**
     * Auto save all in-meeting chats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_saving_chat")
    public Boolean autoSavingChat;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withAutoSavingChat(Boolean autoSavingChat) {
        this.autoSavingChat = autoSavingChat;
        return this;
    }
    
    /**
     * Allow host to split meeting participants into separate breakout rooms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakout_room")
    public Boolean breakoutRoom;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withBreakoutRoom(Boolean breakoutRoom) {
        this.breakoutRoom = breakoutRoom;
        return this;
    }
    
    /**
     * Enable chat during meeting for all participants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chat")
    public Boolean chat;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withChat(Boolean chat) {
        this.chat = chat;
        return this;
    }
    
    /**
     * Enable closed captions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_caption")
    public Boolean closedCaption;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withClosedCaption(Boolean closedCaption) {
        this.closedCaption = closedCaption;
        return this;
    }
    
    /**
     * Allow the host to add co-hosts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("co_host")
    public Boolean coHost;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withCoHost(Boolean coHost) {
        this.coHost = coHost;
        return this;
    }
    
    /**
     * If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting your real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_data_center_regions")
    public Boolean customDataCenterRegions;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withCustomDataCenterRegions(Boolean customDataCenterRegions) {
        this.customDataCenterRegions = customDataCenterRegions;
        return this;
    }
    
    /**
     * Allow custom live streaming.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_live_streaming_service")
    public Boolean customLiveStreamingService;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withCustomLiveStreamingService(Boolean customLiveStreamingService) {
        this.customLiveStreamingService = customLiveStreamingService;
        return this;
    }
    
    /**
     * Custom service instructions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_service_instructions")
    public String customServiceInstructions;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withCustomServiceInstructions(String customServiceInstructions) {
        this.customServiceInstructions = customServiceInstructions;
        return this;
    }
    
    /**
     * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["DE", "NL", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_center_regions")
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum dataCenterRegions;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withDataCenterRegions(UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum dataCenterRegions) {
        this.dataCenterRegions = dataCenterRegions;
        return this;
    }
    
    /**
     * Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("e2e_encryption")
    public Boolean e2eEncryption;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withE2eEncryption(Boolean e2eEncryption) {
        this.e2eEncryption = e2eEncryption;
        return this;
    }
    
    /**
     * Play sound when participants join or leave:&lt;br&gt;`host` - When host joins or leaves.&lt;br&gt;`all` - When any participant joins or leaves.&lt;br&gt;`none` - No join or leave sound.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entry_exit_chime")
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum entryExitChime;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withEntryExitChime(UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum entryExitChime) {
        this.entryExitChime = entryExitChime;
        return this;
    }
    
    /**
     * Allow another user to take control of the camera.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("far_end_camera_control")
    public Boolean farEndCameraControl;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withFarEndCameraControl(Boolean farEndCameraControl) {
        this.farEndCameraControl = farEndCameraControl;
        return this;
    }
    
    /**
     * Enable option to send feedback to Zoom at the end of the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedback")
    public Boolean feedback;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withFeedback(Boolean feedback) {
        this.feedback = feedback;
        return this;
    }
    
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the user or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_transfer")
    public Boolean fileTransfer;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withFileTransfer(Boolean fileTransfer) {
        this.fileTransfer = fileTransfer;
        return this;
    }
    
    /**
     * Enable group HD video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_hd")
    public Boolean groupHd;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withGroupHd(Boolean groupHd) {
        this.groupHd = groupHd;
        return this;
    }
    
    /**
     * Enable non-verbal feedback through screens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("non_verbal_feedback")
    public Boolean nonVerbalFeedback;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withNonVerbalFeedback(Boolean nonVerbalFeedback) {
        this.nonVerbalFeedback = nonVerbalFeedback;
        return this;
    }
    
    /**
     * Add polls to the meeting controls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("polling")
    public Boolean polling;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withPolling(Boolean polling) {
        this.polling = polling;
        return this;
    }
    
    /**
     * Enable 1:1 private chat between participants during meetings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_chat")
    public Boolean privateChat;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withPrivateChat(Boolean privateChat) {
        this.privateChat = privateChat;
        return this;
    }
    
    /**
     * Record and play their own voice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_play_voice")
    public Boolean recordPlayVoice;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withRecordPlayVoice(Boolean recordPlayVoice) {
        this.recordPlayVoice = recordPlayVoice;
        return this;
    }
    
    /**
     * Enable remote control during screensharing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_control")
    public Boolean remoteControl;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withRemoteControl(Boolean remoteControl) {
        this.remoteControl = remoteControl;
        return this;
    }
    
    /**
     * Allow host to provide 1:1 remote support to a participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_support")
    public Boolean remoteSupport;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withRemoteSupport(Boolean remoteSupport) {
        this.remoteSupport = remoteSupport;
        return this;
    }
    
    /**
     * Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the user or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_permission_to_unmute")
    public Boolean requestPermissionToUnmute;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withRequestPermissionToUnmute(Boolean requestPermissionToUnmute) {
        this.requestPermissionToUnmute = requestPermissionToUnmute;
        return this;
    }
    
    /**
     * Allow host and participants to share their screen or content during meetings
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screen_sharing")
    public Boolean screenSharing;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withScreenSharing(Boolean screenSharing) {
        this.screenSharing = screenSharing;
        return this;
    }
    
    /**
     * Share dual camera (deprecated).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_dual_camera")
    public Boolean shareDualCamera;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withShareDualCamera(Boolean shareDualCamera) {
        this.shareDualCamera = shareDualCamera;
        return this;
    }
    
    /**
     * Always show meeting controls during a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_meeting_control_toolbar")
    public Boolean showMeetingControlToolbar;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withShowMeetingControlToolbar(Boolean showMeetingControlToolbar) {
        this.showMeetingControlToolbar = showMeetingControlToolbar;
        return this;
    }
    
    /**
     * Enable virtual background.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_background")
    public Boolean virtualBackground;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withVirtualBackground(Boolean virtualBackground) {
        this.virtualBackground = virtualBackground;
        return this;
    }
    
    /**
     * Settings to manage virtual background.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_background_settings")
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings virtualBackgroundSettings;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withVirtualBackgroundSettings(UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings virtualBackgroundSettings) {
        this.virtualBackgroundSettings = virtualBackgroundSettings;
        return this;
    }
    
    /**
     * Enable Waiting room - if enabled, attendees can only join after host approves.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waiting_room")
    public Boolean waitingRoom;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withWaitingRoom(Boolean waitingRoom) {
        this.waitingRoom = waitingRoom;
        return this;
    }
    
    /**
     * Indicates who can share their screen or content during meetings. The value can be one of the following: &lt;br&gt;
     * `host`: Only host can share the screen.&lt;br&gt;
     * `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("who_can_share_screen")
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum whoCanShareScreen;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withWhoCanShareScreen(UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum whoCanShareScreen) {
        this.whoCanShareScreen = whoCanShareScreen;
        return this;
    }
    
    /**
     * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:&lt;br&gt;
     * `host`: Only a host can share the screen when someone else is sharing.&lt;br&gt;
     * `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("who_can_share_screen_when_someone_is_sharing")
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum whoCanShareScreenWhenSomeoneIsSharing;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withWhoCanShareScreenWhenSomeoneIsSharing(UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum whoCanShareScreenWhenSomeoneIsSharing) {
        this.whoCanShareScreenWhenSomeoneIsSharing = whoCanShareScreenWhenSomeoneIsSharing;
        return this;
    }
    
    /**
     * Allow livestreaming by host through Workplace by Facebook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workplace_by_facebook")
    public Boolean workplaceByFacebook;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsMeetingSettings withWorkplaceByFacebook(Boolean workplaceByFacebook) {
        this.workplaceByFacebook = workplaceByFacebook;
        return this;
    }
    
}
