// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type VoiceOptionsCoveredDataEnum string

const (
	VoiceOptionsCoveredDataEnumCoveredDataUnspecified VoiceOptionsCoveredDataEnum = "COVERED_DATA_UNSPECIFIED"
	VoiceOptionsCoveredDataEnumTextMessages           VoiceOptionsCoveredDataEnum = "TEXT_MESSAGES"
	VoiceOptionsCoveredDataEnumVoicemails             VoiceOptionsCoveredDataEnum = "VOICEMAILS"
	VoiceOptionsCoveredDataEnumCallLogs               VoiceOptionsCoveredDataEnum = "CALL_LOGS"
)

func (e *VoiceOptionsCoveredDataEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "COVERED_DATA_UNSPECIFIED":
		fallthrough
	case "TEXT_MESSAGES":
		fallthrough
	case "VOICEMAILS":
		fallthrough
	case "CALL_LOGS":
		*e = VoiceOptionsCoveredDataEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VoiceOptionsCoveredDataEnum: %s", s)
	}
}

// VoiceOptions - Additional options for Voice search
type VoiceOptions struct {
	// Datatypes to search
	CoveredData []VoiceOptionsCoveredDataEnum `json:"coveredData,omitempty"`
}
