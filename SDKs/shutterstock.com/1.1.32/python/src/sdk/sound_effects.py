"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SoundEffects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def download_sfx(self, request: operations.DownloadSfxRequest, security: operations.DownloadSfxSecurity) -> operations.DownloadSfxResponse:
        r"""Download sound effects
        This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadSfxRequest, base_url, '/v2/sfx/licenses/{id}/downloads', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadSfxResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SfxURL])
                res.sfx_url = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def get_sfx_details(self, request: operations.GetSfxDetailsRequest, security: operations.GetSfxDetailsSecurity) -> operations.GetSfxDetailsResponse:
        r"""Get details about sound effects
        This endpoint shows information about a sound effect.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSfxDetailsRequest, base_url, '/v2/sfx/{id}', request)
        
        query_params = utils.get_query_params(operations.GetSfxDetailsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSfxDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Sfx])
                res.sfx = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def get_sfx_license_list(self, request: operations.GetSfxLicenseListRequest, security: operations.GetSfxLicenseListSecurity) -> operations.GetSfxLicenseListResponse:
        r"""List sound effects licenses
        This endpoint lists existing licenses.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/sfx/licenses'
        
        query_params = utils.get_query_params(operations.GetSfxLicenseListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSfxLicenseListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DownloadHistoryDataList])
                res.download_history_data_list = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def get_sfx_list_details(self, request: operations.GetSfxListDetailsRequest, security: operations.GetSfxListDetailsSecurity) -> operations.GetSfxListDetailsResponse:
        r"""List details about sound effects
        This endpoint shows information about sound effects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/sfx'
        
        query_params = utils.get_query_params(operations.GetSfxListDetailsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSfxListDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SFXDataList])
                res.sfx_data_list = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def licenses_sfx(self, request: shared.LicenseSFXRequest, security: operations.LicensesSFXSecurity) -> operations.LicensesSFXResponse:
        r"""License sound effects
        This endpoint licenses sounds effect assets.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/sfx/licenses'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensesSFXResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseSFXResultDataList])
                res.license_sfx_result_data_list = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def search_sfx(self, request: operations.SearchSFXRequest, security: operations.SearchSFXSecurity) -> operations.SearchSFXResponse:
        r"""Search for sound effects
        This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/sfx/search'
        
        query_params = utils.get_query_params(operations.SearchSFXRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchSFXResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SFXSearchResults])
                res.sfx_search_results = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    