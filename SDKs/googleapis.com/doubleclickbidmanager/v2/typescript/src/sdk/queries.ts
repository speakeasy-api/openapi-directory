/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Queries {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a query.
   */
  doubleclickbidmanagerQueriesCreate(
    req: operations.DoubleclickbidmanagerQueriesCreateRequest,
    security: operations.DoubleclickbidmanagerQueriesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclickbidmanagerQueriesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclickbidmanagerQueriesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/queries";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "queryInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclickbidmanagerQueriesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclickbidmanagerQueriesCreateResponse =
        new operations.DoubleclickbidmanagerQueriesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.query = utils.objectToClass(httpRes?.data, shared.Query);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a query as well as the associated reports.
   */
  doubleclickbidmanagerQueriesDelete(
    req: operations.DoubleclickbidmanagerQueriesDeleteRequest,
    security: operations.DoubleclickbidmanagerQueriesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclickbidmanagerQueriesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclickbidmanagerQueriesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/queries/{queryId}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclickbidmanagerQueriesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclickbidmanagerQueriesDeleteResponse =
        new operations.DoubleclickbidmanagerQueriesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a query.
   */
  doubleclickbidmanagerQueriesGet(
    req: operations.DoubleclickbidmanagerQueriesGetRequest,
    security: operations.DoubleclickbidmanagerQueriesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclickbidmanagerQueriesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclickbidmanagerQueriesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/queries/{queryId}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclickbidmanagerQueriesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclickbidmanagerQueriesGetResponse =
        new operations.DoubleclickbidmanagerQueriesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.query = utils.objectToClass(httpRes?.data, shared.Query);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists queries created by the current user.
   */
  doubleclickbidmanagerQueriesList(
    req: operations.DoubleclickbidmanagerQueriesListRequest,
    security: operations.DoubleclickbidmanagerQueriesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclickbidmanagerQueriesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclickbidmanagerQueriesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/queries";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclickbidmanagerQueriesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclickbidmanagerQueriesListResponse =
        new operations.DoubleclickbidmanagerQueriesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listQueriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListQueriesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a report.
   */
  doubleclickbidmanagerQueriesReportsGet(
    req: operations.DoubleclickbidmanagerQueriesReportsGetRequest,
    security: operations.DoubleclickbidmanagerQueriesReportsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclickbidmanagerQueriesReportsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclickbidmanagerQueriesReportsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/queries/{queryId}/reports/{reportId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclickbidmanagerQueriesReportsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclickbidmanagerQueriesReportsGetResponse =
        new operations.DoubleclickbidmanagerQueriesReportsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists reports associated with a query.
   */
  doubleclickbidmanagerQueriesReportsList(
    req: operations.DoubleclickbidmanagerQueriesReportsListRequest,
    security: operations.DoubleclickbidmanagerQueriesReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclickbidmanagerQueriesReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclickbidmanagerQueriesReportsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/queries/{queryId}/reports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclickbidmanagerQueriesReportsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclickbidmanagerQueriesReportsListResponse =
        new operations.DoubleclickbidmanagerQueriesReportsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReportsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListReportsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Runs a stored query to generate a report.
   */
  doubleclickbidmanagerQueriesRun(
    req: operations.DoubleclickbidmanagerQueriesRunRequest,
    security: operations.DoubleclickbidmanagerQueriesRunSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclickbidmanagerQueriesRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclickbidmanagerQueriesRunRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/queries/{queryId}:run",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "runQueryRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclickbidmanagerQueriesRunSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclickbidmanagerQueriesRunResponse =
        new operations.DoubleclickbidmanagerQueriesRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
      }

      return res;
    });
  }
}
