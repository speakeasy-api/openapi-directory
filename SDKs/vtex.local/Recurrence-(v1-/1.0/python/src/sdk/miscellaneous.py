"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Miscellaneous:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def addrecurrenceitem(self, request: operations.AddrecurrenceitemRequest) -> operations.AddrecurrenceitemResponse:
        r"""Add Subscription item
        Adds an item to a Subscription (formerly Recurrence).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddrecurrenceitemRequest, base_url, '/subscriptions/{recurrenceId}/items', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddrecurrenceitemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_recurrencebyemail(self, request: operations.GetRecurrencebyemailRequest) -> operations.GetRecurrencebyemailResponse:
        r"""Get Subscriptions
        Retrieves a given Subscription (formerly recurrence). There are three options of filtering your Subscruptions v1. It's possible to get a list of all Subscriptions v1, by not adding any query params to your request, and simply executing a call to the url. It is also possible to list the Subscriptions by email, filtering by the email query param. And finnally, it is possible to list recurrences with failures on the last execution cycle, filtering by the cycleStatus query param.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetRecurrencebyemailRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRecurrencebyemailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_recurrencebyrecurrence_id(self, request: operations.GetRecurrencebyrecurrenceIDRequest) -> operations.GetRecurrencebyrecurrenceIDResponse:
        r"""Get Subscription by recurrenceId
        Retrieves a given Subscription (formerly recurrence) by recurrenceId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRecurrencebyrecurrenceIDRequest, base_url, '/subscriptions/{recurrenceId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRecurrencebyrecurrenceIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getpaymentaccounts(self, request: operations.GetpaymentaccountsRequest) -> operations.GetpaymentaccountsResponse:
        r"""Get payment accounts
        Lists payment accounts of a given Subscription (formerly Recurrence) by recurrenceId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetpaymentaccountsRequest, base_url, '/subscriptions/{recurrenceid}/accounts', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetpaymentaccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getrecurrenceaddresses(self, request: operations.GetrecurrenceaddressesRequest) -> operations.GetrecurrenceaddressesResponse:
        r"""Get Subscription addresses
        Retrieves the addresses attached to a given subscription (formerly recurrence) by recurrenceId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetrecurrenceaddressesRequest, base_url, '/subscriptions/{recurrenceId}/addresses', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetrecurrenceaddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getrecurrencesettings(self, request: operations.GetrecurrencesettingsRequest) -> operations.GetrecurrencesettingsResponse:
        r"""Get Subscription settings
        Retrieves your store's Subscriptions' (formerly recurrence) settings.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions/settings'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetrecurrencesettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getselfrecurrence(self, request: operations.GetselfrecurrenceRequest) -> operations.GetselfrecurrenceResponse:
        r"""Get self Subscription
        Lists details of your self Subscription (formerly Recurrence).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions/me'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetselfrecurrenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reindexrecurrence(self, request: operations.ReindexrecurrenceRequest) -> operations.ReindexrecurrenceResponse:
        r"""Reindex Subscription
        Alters the frequency of a given Subscription (formerly Recurrence) by changing period and interval.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReindexrecurrenceRequest, base_url, '/subscriptions/{recurrenceId}/reindex', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReindexrecurrenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def updatepartialrecurrence(self, request: operations.UpdatepartialrecurrenceRequest) -> operations.UpdatepartialrecurrenceResponse:
        r"""Update partial Subscription
        Updates partial information of a given subscription (formerly Recurrence).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatepartialrecurrenceRequest, base_url, '/subscriptions/{recurrenceId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "updatepartialrecurrence_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatepartialrecurrenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def updaterecurrence(self, request: operations.UpdaterecurrenceRequest) -> operations.UpdaterecurrenceResponse:
        r"""Update Subscription
        Updates details of a given Subscription (formerly recurrence).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "updaterecurrence_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdaterecurrenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def updaterecurrencesettings(self, request: operations.UpdaterecurrencesettingsRequest) -> operations.UpdaterecurrencesettingsResponse:
        r"""Update Subscription settings
        Updates the Subscriptions' (formerly Recurrence) settings of your store by salesChannel and defaultSLA.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions/settings'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "updaterecurrencesettings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdaterecurrencesettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    