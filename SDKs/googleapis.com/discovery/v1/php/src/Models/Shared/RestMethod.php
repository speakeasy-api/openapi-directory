<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class RestMethod
{
    /**
     * Description of this method.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
     * 
     * @var ?bool $etagRequired
     */
	#[\JMS\Serializer\Annotation\SerializedName('etagRequired')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $etagRequired = null;
    
    /**
     * The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.
     * 
     * @var ?string $flatPath
     */
	#[\JMS\Serializer\Annotation\SerializedName('flatPath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $flatPath = null;
    
    /**
     * HTTP method used by this method.
     * 
     * @var ?string $httpMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('httpMethod')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $httpMethod = null;
    
    /**
     * A unique ID for this method. This property can be used to match methods between different versions of Discovery.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Media upload parameters.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RestMethodMediaUpload $mediaUpload
     */
	#[\JMS\Serializer\Annotation\SerializedName('mediaUpload')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RestMethodMediaUpload')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RestMethodMediaUpload $mediaUpload = null;
    
    /**
     * Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first.
     * 
     * @var ?array<string> $parameterOrder
     */
	#[\JMS\Serializer\Annotation\SerializedName('parameterOrder')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $parameterOrder = null;
    
    /**
     * Details for all parameters in this method.
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\JsonSchema> $parameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('parameters')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\JsonSchema>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $parameters = null;
    
    /**
     * The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
     * 
     * @var ?string $path
     */
	#[\JMS\Serializer\Annotation\SerializedName('path')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $path = null;
    
    /**
     * The schema for the request.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RestMethodRequest $request
     */
	#[\JMS\Serializer\Annotation\SerializedName('request')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RestMethodRequest')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RestMethodRequest $request = null;
    
    /**
     * The schema for the response.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RestMethodResponse $response
     */
	#[\JMS\Serializer\Annotation\SerializedName('response')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RestMethodResponse')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RestMethodResponse $response = null;
    
    /**
     * OAuth 2.0 scopes applicable to this method.
     * 
     * @var ?array<string> $scopes
     */
	#[\JMS\Serializer\Annotation\SerializedName('scopes')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $scopes = null;
    
    /**
     * Whether this method supports media downloads.
     * 
     * @var ?bool $supportsMediaDownload
     */
	#[\JMS\Serializer\Annotation\SerializedName('supportsMediaDownload')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $supportsMediaDownload = null;
    
    /**
     * Whether this method supports media uploads.
     * 
     * @var ?bool $supportsMediaUpload
     */
	#[\JMS\Serializer\Annotation\SerializedName('supportsMediaUpload')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $supportsMediaUpload = null;
    
    /**
     * Whether this method supports subscriptions.
     * 
     * @var ?bool $supportsSubscription
     */
	#[\JMS\Serializer\Annotation\SerializedName('supportsSubscription')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $supportsSubscription = null;
    
    /**
     * Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download.
     * 
     * @var ?bool $useMediaDownloadService
     */
	#[\JMS\Serializer\Annotation\SerializedName('useMediaDownloadService')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useMediaDownloadService = null;
    
	public function __construct()
	{
		$this->description = null;
		$this->etagRequired = null;
		$this->flatPath = null;
		$this->httpMethod = null;
		$this->id = null;
		$this->mediaUpload = null;
		$this->parameterOrder = null;
		$this->parameters = null;
		$this->path = null;
		$this->request = null;
		$this->response = null;
		$this->scopes = null;
		$this->supportsMediaDownload = null;
		$this->supportsMediaUpload = null;
		$this->supportsSubscription = null;
		$this->useMediaDownloadService = null;
	}
}
