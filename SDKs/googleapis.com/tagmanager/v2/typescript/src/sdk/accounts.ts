/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Combines Containers.
   */
  tagmanagerAccountsContainersCombine(
    req: operations.TagmanagerAccountsContainersCombineRequest,
    security: operations.TagmanagerAccountsContainersCombineSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersCombineResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersCombineRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:combine",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsContainersCombineSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersCombineResponse =
        new operations.TagmanagerAccountsContainersCombineResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.container = utils.objectToClass(
              httpRes?.data,
              shared.Container
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Container.
   */
  tagmanagerAccountsContainersCreate(
    req: operations.TagmanagerAccountsContainersCreateRequest,
    security: operations.TagmanagerAccountsContainersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/containers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "container",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsContainersCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersCreateResponse =
        new operations.TagmanagerAccountsContainersCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.container = utils.objectToClass(
              httpRes?.data,
              shared.Container
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds a Destination to this Container and removes it from the Container to which it is currently linked.
   */
  tagmanagerAccountsContainersDestinationsLink(
    req: operations.TagmanagerAccountsContainersDestinationsLinkRequest,
    security: operations.TagmanagerAccountsContainersDestinationsLinkSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersDestinationsLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersDestinationsLinkRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/destinations:link",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersDestinationsLinkSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersDestinationsLinkResponse =
        new operations.TagmanagerAccountsContainersDestinationsLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.destination = utils.objectToClass(
              httpRes?.data,
              shared.Destination
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all Destinations linked to a GTM Container.
   */
  tagmanagerAccountsContainersDestinationsList(
    req: operations.TagmanagerAccountsContainersDestinationsListRequest,
    security: operations.TagmanagerAccountsContainersDestinationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersDestinationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersDestinationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/destinations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersDestinationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersDestinationsListResponse =
        new operations.TagmanagerAccountsContainersDestinationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDestinationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDestinationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Environment.
   */
  tagmanagerAccountsContainersEnvironmentsCreate(
    req: operations.TagmanagerAccountsContainersEnvironmentsCreateRequest,
    security: operations.TagmanagerAccountsContainersEnvironmentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersEnvironmentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersEnvironmentsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/environments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "environment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersEnvironmentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersEnvironmentsCreateResponse =
        new operations.TagmanagerAccountsContainersEnvironmentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.environment = utils.objectToClass(
              httpRes?.data,
              shared.Environment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Environments of a GTM Container.
   */
  tagmanagerAccountsContainersEnvironmentsList(
    req: operations.TagmanagerAccountsContainersEnvironmentsListRequest,
    security: operations.TagmanagerAccountsContainersEnvironmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersEnvironmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersEnvironmentsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/environments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersEnvironmentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersEnvironmentsListResponse =
        new operations.TagmanagerAccountsContainersEnvironmentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listEnvironmentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListEnvironmentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Re-generates the authorization code for a GTM Environment.
   */
  tagmanagerAccountsContainersEnvironmentsReauthorize(
    req: operations.TagmanagerAccountsContainersEnvironmentsReauthorizeRequest,
    security: operations.TagmanagerAccountsContainersEnvironmentsReauthorizeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersEnvironmentsReauthorizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersEnvironmentsReauthorizeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:reauthorize",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "environment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersEnvironmentsReauthorizeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersEnvironmentsReauthorizeResponse =
        new operations.TagmanagerAccountsContainersEnvironmentsReauthorizeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.environment = utils.objectToClass(
              httpRes?.data,
              shared.Environment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all Containers that belongs to a GTM Account.
   */
  tagmanagerAccountsContainersList(
    req: operations.TagmanagerAccountsContainersListRequest,
    security: operations.TagmanagerAccountsContainersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/containers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsContainersListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersListResponse =
        new operations.TagmanagerAccountsContainersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listContainersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListContainersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up a Container by destination ID.
   */
  tagmanagerAccountsContainersLookup(
    req: operations.TagmanagerAccountsContainersLookupRequest,
    security: operations.TagmanagerAccountsContainersLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tagmanager/v2/accounts/containers:lookup";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsContainersLookupSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersLookupResponse =
        new operations.TagmanagerAccountsContainersLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.container = utils.objectToClass(
              httpRes?.data,
              shared.Container
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Move Tag ID out of a Container.
   */
  tagmanagerAccountsContainersMoveTagId(
    req: operations.TagmanagerAccountsContainersMoveTagIdRequest,
    security: operations.TagmanagerAccountsContainersMoveTagIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersMoveTagIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersMoveTagIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:move_tag_id",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsContainersMoveTagIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersMoveTagIdResponse =
        new operations.TagmanagerAccountsContainersMoveTagIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.container = utils.objectToClass(
              httpRes?.data,
              shared.Container
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the tagging snippet for a Container.
   */
  tagmanagerAccountsContainersSnippet(
    req: operations.TagmanagerAccountsContainersSnippetRequest,
    security: operations.TagmanagerAccountsContainersSnippetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersSnippetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersSnippetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:snippet",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsContainersSnippetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersSnippetResponse =
        new operations.TagmanagerAccountsContainersSnippetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContainerSnippetResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetContainerSnippetResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the latest container version header
   */
  tagmanagerAccountsContainersVersionHeadersLatest(
    req: operations.TagmanagerAccountsContainersVersionHeadersLatestRequest,
    security: operations.TagmanagerAccountsContainersVersionHeadersLatestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersVersionHeadersLatestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersVersionHeadersLatestRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/version_headers:latest",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersVersionHeadersLatestSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersVersionHeadersLatestResponse =
        new operations.TagmanagerAccountsContainersVersionHeadersLatestResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.containerVersionHeader = utils.objectToClass(
              httpRes?.data,
              shared.ContainerVersionHeader
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all Container Versions of a GTM Container.
   */
  tagmanagerAccountsContainersVersionHeadersList(
    req: operations.TagmanagerAccountsContainersVersionHeadersListRequest,
    security: operations.TagmanagerAccountsContainersVersionHeadersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersVersionHeadersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersVersionHeadersListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/version_headers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersVersionHeadersListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersVersionHeadersListResponse =
        new operations.TagmanagerAccountsContainersVersionHeadersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listContainerVersionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListContainerVersionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the live (i.e. published) container version
   */
  tagmanagerAccountsContainersVersionsLive(
    req: operations.TagmanagerAccountsContainersVersionsLiveRequest,
    security: operations.TagmanagerAccountsContainersVersionsLiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersVersionsLiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersVersionsLiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/versions:live",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersVersionsLiveSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersVersionsLiveResponse =
        new operations.TagmanagerAccountsContainersVersionsLiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.containerVersion = utils.objectToClass(
              httpRes?.data,
              shared.ContainerVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Publishes a Container Version.
   */
  tagmanagerAccountsContainersVersionsPublish(
    req: operations.TagmanagerAccountsContainersVersionsPublishRequest,
    security: operations.TagmanagerAccountsContainersVersionsPublishSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersVersionsPublishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersVersionsPublishRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:publish",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersVersionsPublishSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersVersionsPublishResponse =
        new operations.TagmanagerAccountsContainersVersionsPublishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publishContainerVersionResponse = utils.objectToClass(
              httpRes?.data,
              shared.PublishContainerVersionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the latest version used for synchronization of workspaces when detecting conflicts and errors.
   */
  tagmanagerAccountsContainersVersionsSetLatest(
    req: operations.TagmanagerAccountsContainersVersionsSetLatestRequest,
    security: operations.TagmanagerAccountsContainersVersionsSetLatestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersVersionsSetLatestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersVersionsSetLatestRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:set_latest",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersVersionsSetLatestSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersVersionsSetLatestResponse =
        new operations.TagmanagerAccountsContainersVersionsSetLatestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.containerVersion = utils.objectToClass(
              httpRes?.data,
              shared.ContainerVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Undeletes a Container Version.
   */
  tagmanagerAccountsContainersVersionsUndelete(
    req: operations.TagmanagerAccountsContainersVersionsUndeleteRequest,
    security: operations.TagmanagerAccountsContainersVersionsUndeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersVersionsUndeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersVersionsUndeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:undelete",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersVersionsUndeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersVersionsUndeleteResponse =
        new operations.TagmanagerAccountsContainersVersionsUndeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.containerVersion = utils.objectToClass(
              httpRes?.data,
              shared.ContainerVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates one or more GTM Built-In Variables.
   */
  tagmanagerAccountsContainersWorkspacesBuiltInVariablesCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/built_in_variables",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBuiltInVariableResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateBuiltInVariableResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the enabled Built-In Variables of a GTM Container.
   */
  tagmanagerAccountsContainersWorkspacesBuiltInVariablesList(
    req: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/built_in_variables",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listEnabledBuiltInVariablesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListEnabledBuiltInVariablesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reverts changes to a GTM Built-In Variables in a GTM Workspace.
   */
  tagmanagerAccountsContainersWorkspacesBuiltInVariablesRevert(
    req: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}/built_in_variables:revert",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse =
        new operations.TagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.revertBuiltInVariableResponse = utils.objectToClass(
              httpRes?.data,
              shared.RevertBuiltInVariableResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Client.
   */
  tagmanagerAccountsContainersWorkspacesClientsCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesClientsCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesClientsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesClientsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesClientsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/clients",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "client",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesClientsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesClientsCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesClientsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.client = utils.objectToClass(httpRes?.data, shared.Client);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Clients of a GTM container workspace.
   */
  tagmanagerAccountsContainersWorkspacesClientsList(
    req: operations.TagmanagerAccountsContainersWorkspacesClientsListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesClientsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesClientsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesClientsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/clients",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesClientsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesClientsListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesClientsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listClientsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListClientsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Workspace.
   */
  tagmanagerAccountsContainersWorkspacesCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersWorkspacesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/workspaces",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "workspace",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.workspace = utils.objectToClass(
              httpRes?.data,
              shared.Workspace
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Container Version from the entities present in the workspace, deletes the workspace, and sets the base container version to the newly created version.
   */
  tagmanagerAccountsContainersWorkspacesCreateVersion(
    req: operations.TagmanagerAccountsContainersWorkspacesCreateVersionRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesCreateVersionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesCreateVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesCreateVersionRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:create_version",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createContainerVersionRequestVersionOptions",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesCreateVersionSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesCreateVersionResponse =
        new operations.TagmanagerAccountsContainersWorkspacesCreateVersionResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createContainerVersionResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateContainerVersionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Folder.
   */
  tagmanagerAccountsContainersWorkspacesFoldersCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesFoldersCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesFoldersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesFoldersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/folders",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "folder",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesFoldersCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.folder = utils.objectToClass(httpRes?.data, shared.Folder);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all entities in a GTM Folder.
   */
  tagmanagerAccountsContainersWorkspacesFoldersEntities(
    req: operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:entities",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersEntitiesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.folderEntities = utils.objectToClass(
              httpRes?.data,
              shared.FolderEntities
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Folders of a Container.
   */
  tagmanagerAccountsContainersWorkspacesFoldersList(
    req: operations.TagmanagerAccountsContainersWorkspacesFoldersListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesFoldersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesFoldersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/folders",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesFoldersListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFoldersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFoldersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Moves entities to a GTM Folder.
   */
  tagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolder(
    req: operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:move_entities_to_folder",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "folder",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse =
        new operations.TagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Finds conflicting and modified entities in the workspace.
   */
  tagmanagerAccountsContainersWorkspacesGetStatus(
    req: operations.TagmanagerAccountsContainersWorkspacesGetStatusRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesGetStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesGetStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesGetStatusRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}/status",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesGetStatusSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesGetStatusResponse =
        new operations.TagmanagerAccountsContainersWorkspacesGetStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getWorkspaceStatusResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetWorkspaceStatusResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Google tag config.
   */
  tagmanagerAccountsContainersWorkspacesGtagConfigCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/gtag_config",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "gtagConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesGtagConfigCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gtagConfig = utils.objectToClass(
              httpRes?.data,
              shared.GtagConfig
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all Google tag configs in a Container.
   */
  tagmanagerAccountsContainersWorkspacesGtagConfigList(
    req: operations.TagmanagerAccountsContainersWorkspacesGtagConfigListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesGtagConfigListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesGtagConfigListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesGtagConfigListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/gtag_config",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesGtagConfigListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesGtagConfigListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesGtagConfigListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGtagConfigResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGtagConfigResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all Workspaces that belong to a GTM Container.
   */
  tagmanagerAccountsContainersWorkspacesList(
    req: operations.TagmanagerAccountsContainersWorkspacesListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersWorkspacesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/workspaces",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWorkspacesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListWorkspacesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Quick previews a workspace by creating a fake container version from all entities in the provided workspace.
   */
  tagmanagerAccountsContainersWorkspacesQuickPreview(
    req: operations.TagmanagerAccountsContainersWorkspacesQuickPreviewRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesQuickPreviewSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesQuickPreviewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesQuickPreviewRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:quick_preview",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesQuickPreviewSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesQuickPreviewResponse =
        new operations.TagmanagerAccountsContainersWorkspacesQuickPreviewResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quickPreviewResponse = utils.objectToClass(
              httpRes?.data,
              shared.QuickPreviewResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Resolves a merge conflict for a workspace entity by updating it to the resolved entity passed in the request.
   */
  tagmanagerAccountsContainersWorkspacesResolveConflict(
    req: operations.TagmanagerAccountsContainersWorkspacesResolveConflictRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesResolveConflictSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesResolveConflictResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesResolveConflictRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:resolve_conflict",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "entity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesResolveConflictSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesResolveConflictResponse =
        new operations.TagmanagerAccountsContainersWorkspacesResolveConflictResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Syncs a workspace to the latest container version by updating all unmodified workspace entities and displaying conflicts for modified entities.
   */
  tagmanagerAccountsContainersWorkspacesSync(
    req: operations.TagmanagerAccountsContainersWorkspacesSyncRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesSyncSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesSyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsContainersWorkspacesSyncRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:sync",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesSyncSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesSyncResponse =
        new operations.TagmanagerAccountsContainersWorkspacesSyncResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.syncWorkspaceResponse = utils.objectToClass(
              httpRes?.data,
              shared.SyncWorkspaceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Tag.
   */
  tagmanagerAccountsContainersWorkspacesTagsCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesTagsCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesTagsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesTagsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesTagsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/tags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "tag",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesTagsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesTagsCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesTagsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tag = utils.objectToClass(httpRes?.data, shared.Tag);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Tags of a Container.
   */
  tagmanagerAccountsContainersWorkspacesTagsList(
    req: operations.TagmanagerAccountsContainersWorkspacesTagsListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesTagsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesTagsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesTagsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/tags",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesTagsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesTagsListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesTagsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTagsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTagsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Custom Template.
   */
  tagmanagerAccountsContainersWorkspacesTemplatesCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/templates",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customTemplate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesTemplatesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customTemplate = utils.objectToClass(
              httpRes?.data,
              shared.CustomTemplate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Templates of a GTM container workspace.
   */
  tagmanagerAccountsContainersWorkspacesTemplatesList(
    req: operations.TagmanagerAccountsContainersWorkspacesTemplatesListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesTemplatesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesTemplatesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesTemplatesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/templates",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesTemplatesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesTemplatesListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesTemplatesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTemplatesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTemplatesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Trigger.
   */
  tagmanagerAccountsContainersWorkspacesTriggersCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesTriggersCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesTriggersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesTriggersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesTriggersCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/triggers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "trigger",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesTriggersCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesTriggersCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesTriggersCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trigger = utils.objectToClass(httpRes?.data, shared.Trigger);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Triggers of a Container.
   */
  tagmanagerAccountsContainersWorkspacesTriggersList(
    req: operations.TagmanagerAccountsContainersWorkspacesTriggersListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesTriggersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesTriggersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesTriggersListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/triggers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesTriggersListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesTriggersListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesTriggersListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTriggersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTriggersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Variable.
   */
  tagmanagerAccountsContainersWorkspacesVariablesCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesVariablesCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesVariablesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesVariablesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesVariablesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/variables",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "variable",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesVariablesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesVariablesCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesVariablesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.variable = utils.objectToClass(httpRes?.data, shared.Variable);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Variables of a Container.
   */
  tagmanagerAccountsContainersWorkspacesVariablesList(
    req: operations.TagmanagerAccountsContainersWorkspacesVariablesListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesVariablesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesVariablesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesVariablesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/variables",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesVariablesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesVariablesListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesVariablesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVariablesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVariablesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a GTM Zone.
   */
  tagmanagerAccountsContainersWorkspacesZonesCreate(
    req: operations.TagmanagerAccountsContainersWorkspacesZonesCreateRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesZonesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesZonesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesZonesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/zones",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "zone",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesZonesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesZonesCreateResponse =
        new operations.TagmanagerAccountsContainersWorkspacesZonesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.zone = utils.objectToClass(httpRes?.data, shared.Zone);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Zones of a GTM container workspace.
   */
  tagmanagerAccountsContainersWorkspacesZonesList(
    req: operations.TagmanagerAccountsContainersWorkspacesZonesListRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesZonesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesZonesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesZonesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/zones",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesZonesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesZonesListResponse =
        new operations.TagmanagerAccountsContainersWorkspacesZonesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listZonesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListZonesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reverts changes to a GTM Zone in a GTM Workspace.
   */
  tagmanagerAccountsContainersWorkspacesZonesRevert(
    req: operations.TagmanagerAccountsContainersWorkspacesZonesRevertRequest,
    security: operations.TagmanagerAccountsContainersWorkspacesZonesRevertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsContainersWorkspacesZonesRevertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.TagmanagerAccountsContainersWorkspacesZonesRevertRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}:revert",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TagmanagerAccountsContainersWorkspacesZonesRevertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsContainersWorkspacesZonesRevertResponse =
        new operations.TagmanagerAccountsContainersWorkspacesZonesRevertResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.revertZoneResponse = utils.objectToClass(
              httpRes?.data,
              shared.RevertZoneResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GTM Accounts that a user has access to.
   */
  tagmanagerAccountsList(
    req: operations.TagmanagerAccountsListRequest,
    security: operations.TagmanagerAccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tagmanager/v2/accounts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsListResponse =
        new operations.TagmanagerAccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAccountsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAccountsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a user's Account & Container access.
   */
  tagmanagerAccountsUserPermissionsCreate(
    req: operations.TagmanagerAccountsUserPermissionsCreateRequest,
    security: operations.TagmanagerAccountsUserPermissionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsUserPermissionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsUserPermissionsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/user_permissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "userPermission",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsUserPermissionsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsUserPermissionsCreateResponse =
        new operations.TagmanagerAccountsUserPermissionsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userPermission = utils.objectToClass(
              httpRes?.data,
              shared.UserPermission
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a user from the account, revoking access to it and all of its containers.
   */
  tagmanagerAccountsUserPermissionsDelete(
    req: operations.TagmanagerAccountsUserPermissionsDeleteRequest,
    security: operations.TagmanagerAccountsUserPermissionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsUserPermissionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsUserPermissionsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsUserPermissionsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsUserPermissionsDeleteResponse =
        new operations.TagmanagerAccountsUserPermissionsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a user's Account & Container access.
   */
  tagmanagerAccountsUserPermissionsGet(
    req: operations.TagmanagerAccountsUserPermissionsGetRequest,
    security: operations.TagmanagerAccountsUserPermissionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsUserPermissionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsUserPermissionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsUserPermissionsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsUserPermissionsGetResponse =
        new operations.TagmanagerAccountsUserPermissionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userPermission = utils.objectToClass(
              httpRes?.data,
              shared.UserPermission
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all users that have access to the account along with Account and Container user access granted to each of them.
   */
  tagmanagerAccountsUserPermissionsList(
    req: operations.TagmanagerAccountsUserPermissionsListRequest,
    security: operations.TagmanagerAccountsUserPermissionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsUserPermissionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsUserPermissionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{parent}/user_permissions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsUserPermissionsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsUserPermissionsListResponse =
        new operations.TagmanagerAccountsUserPermissionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listUserPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListUserPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a user's Account & Container access.
   */
  tagmanagerAccountsUserPermissionsUpdate(
    req: operations.TagmanagerAccountsUserPermissionsUpdateRequest,
    security: operations.TagmanagerAccountsUserPermissionsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TagmanagerAccountsUserPermissionsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagmanagerAccountsUserPermissionsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tagmanager/v2/{path}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "userPermission",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TagmanagerAccountsUserPermissionsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagmanagerAccountsUserPermissionsUpdateResponse =
        new operations.TagmanagerAccountsUserPermissionsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userPermission = utils.objectToClass(
              httpRes?.data,
              shared.UserPermission
            );
          }
          break;
      }

      return res;
    });
  }
}
