// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SetRepositoryPolicyXAmzTargetEnum
type SetRepositoryPolicyXAmzTargetEnum string

const (
	SetRepositoryPolicyXAmzTargetEnumAmazonEc2ContainerRegistryV20150921SetRepositoryPolicy SetRepositoryPolicyXAmzTargetEnum = "AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy"
)

func (e *SetRepositoryPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy":
		*e = SetRepositoryPolicyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SetRepositoryPolicyXAmzTargetEnum: %s", s)
	}
}

type SetRepositoryPolicyRequest struct {
	SetRepositoryPolicyRequest shared.SetRepositoryPolicyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 SetRepositoryPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SetRepositoryPolicyResponse struct {
	ContentType string
	// InvalidParameterException
	InvalidParameterException interface{}
	// RepositoryNotFoundException
	RepositoryNotFoundException interface{}
	// ServerException
	ServerException interface{}
	// Success
	SetRepositoryPolicyResponse *shared.SetRepositoryPolicyResponse
	StatusCode                  int
	RawResponse                 *http.Response
}
