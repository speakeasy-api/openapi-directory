"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import accountresponse as shared_accountresponse
from ..shared import four_hundred_and_oneresponse as shared_four_hundred_and_oneresponse
from ..shared import security as shared_security
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class LinkApplicationSecurity:
    
    basic_auth: Optional[shared_security.SchemeBasicAuth] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    bearer_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LinkApplicationRequestBody:
    r"""Request body can contain any of the following. Please note, the only one application can be linked to the account."""
    
    application: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application') }})
    r"""There is just one application allowed per an account. The application type must be type \\"messages\\". For more information please see [Application API Spec](https://developer.nexmo.com/api/application.v2)"""  
    
class LinkApplicationProviderEnum(str, Enum):
    r"""Provider of the account you want to assign an application to"""
    MESSENGER = 'messenger'
    VIBER_SERVICE_MSG = 'viber_service_msg'
    WHATSAPP = 'whatsapp'


@dataclasses.dataclass
class LinkApplicationRequest:
    
    external_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'external_id', 'style': 'simple', 'explode': False }})
    r"""External id of the account you want to assign an application to. This is channel dependent. For Facebook it will be your Facebook Page ID, for Viber your Viber Service Message ID and for WhatsApp your WhatsApp number."""  
    provider: LinkApplicationProviderEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""Provider of the account you want to assign an application to"""  
    request_body: LinkApplicationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Request body can contain any of the following. Please note, the only one application can be linked to the account."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LinkApplication409ApplicationJSON:
    r"""Conflict."""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""The account reached limit of maximum number of linked applications. (The only one application is allowed per an account)"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LinkApplication403ApplicationJSON:
    r"""Forbidden."""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""The application does not exist or the application type is not \\"messages\\" """  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class LinkApplicationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_and_one_response: Optional[shared_four_hundred_and_oneresponse.FourHundredAndOneResponse] = dataclasses.field(default=None)
    r"""Unauthorized."""  
    account_response: Optional[shared_accountresponse.AccountResponse] = dataclasses.field(default=None)
    r"""OK."""  
    link_application_403_application_json_object: Optional[LinkApplication403ApplicationJSON] = dataclasses.field(default=None)
    r"""Forbidden."""  
    link_application_409_application_json_object: Optional[LinkApplication409ApplicationJSON] = dataclasses.field(default=None)
    r"""Conflict."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    