"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountscope_enum as shared_accountscope_enum
from ..shared import expression as shared_expression
from ..shared import lookbackperiodindays_enum as shared_lookbackperiodindays_enum
from ..shared import paymentoption_enum as shared_paymentoption_enum
from ..shared import supportedsavingsplanstype_enum as shared_supportedsavingsplanstype_enum
from ..shared import terminyears_enum as shared_terminyears_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSavingsPlansPurchaseRecommendationRequest:
    
    lookback_period_in_days: shared_lookbackperiodindays_enum.LookbackPeriodInDaysEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookbackPeriodInDays') }})  
    payment_option: shared_paymentoption_enum.PaymentOptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentOption') }})  
    savings_plans_type: shared_supportedsavingsplanstype_enum.SupportedSavingsPlansTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SavingsPlansType') }})  
    term_in_years: shared_terminyears_enum.TermInYearsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TermInYears') }})  
    account_scope: Optional[shared_accountscope_enum.AccountScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountScope'), 'exclude': lambda f: f is None }})  
    filter: Optional[shared_expression.Expression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filter'), 'exclude': lambda f: f is None }})  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextPageToken'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PageSize'), 'exclude': lambda f: f is None }})  
    