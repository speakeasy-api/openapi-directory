<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AccountStoreLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of stores
     * 
     * Returns a list of stores for the merchant account identified in the path. The list is grouped into pages as defined by the query parameters.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresResponse
     */
	public function getMerchantsMerchantIdStores(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/stores', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listStoresResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListStoresResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a store
     * 
     * Returns the details of the store identified in the path.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdResponse
     */
	public function getMerchantsMerchantIdStoresStoreId(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/stores/{storeId}', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdStoresStoreIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->store = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Store', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of stores
     * 
     * Returns a list of stores. The list is grouped into pages as defined by the query parameters.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStoresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStoresResponse
     */
	public function getStores(
        \OpenAPI\OpenAPI\Models\Operations\GetStoresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetStoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stores');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStoresRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listStoresResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListStoresResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a store
     * 
     * Returns the details of the store identified in the path.
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdResponse
     */
	public function getStoresStoreId(
        \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stores/{storeId}', \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStoresStoreIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->store = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Store', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a store
     * 
     * Updates the store identified in the path. You can only update some store parameters.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdResponse
     */
	public function patchMerchantsMerchantIdStoresStoreId(
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/stores/{storeId}', \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateStoreRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdStoresStoreIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->store = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Store', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a store
     * 
     * Updates the store identified in the path.
     * You can only update some store parameters.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdResponse
     */
	public function patchStoresStoreId(
        \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stores/{storeId}', \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateStoreRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchStoresStoreIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->store = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Store', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a store
     * 
     * Creates a store for the merchant account identified in the path.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresResponse
     */
	public function postMerchantsMerchantIdStores(
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/stores', \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "storeCreationRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdStoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->store = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Store', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a store
     * 
     * Creates a store for the merchant account specified in the request.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Stores read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\StoreCreationWithMerchantCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostStoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostStoresResponse
     */
	public function postStores(
        \OpenAPI\OpenAPI\Models\Shared\StoreCreationWithMerchantCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostStoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostStoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/stores');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostStoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->store = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Store', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}