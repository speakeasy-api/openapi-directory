"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.ApiSyntaxEnum = void 0;
var utils_1 = require("../../../internal/utils");
var method_1 = require("./method");
var mixin_1 = require("./mixin");
var option_1 = require("./option");
var sourcecontext_1 = require("./sourcecontext");
var class_transformer_1 = require("class-transformer");
/**
 * The source syntax of the service.
 */
var ApiSyntaxEnum;
(function (ApiSyntaxEnum) {
    ApiSyntaxEnum["SyntaxProto2"] = "SYNTAX_PROTO2";
    ApiSyntaxEnum["SyntaxProto3"] = "SYNTAX_PROTO3";
    ApiSyntaxEnum["SyntaxEditions"] = "SYNTAX_EDITIONS";
})(ApiSyntaxEnum = exports.ApiSyntaxEnum || (exports.ApiSyntaxEnum = {}));
/**
 * Api is a light-weight descriptor for an API Interface. Interfaces are also described as "protocol buffer services" in some contexts, such as by the "service" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as "APIs" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
 */
var Api = /** @class */ (function (_super) {
    __extends(Api, _super);
    function Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: method_1.Method }),
        (0, class_transformer_1.Expose)({ name: "methods" }),
        (0, class_transformer_1.Type)(function () { return method_1.Method; }),
        __metadata("design:type", Array)
    ], Api.prototype, "methods", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: mixin_1.Mixin }),
        (0, class_transformer_1.Expose)({ name: "mixins" }),
        (0, class_transformer_1.Type)(function () { return mixin_1.Mixin; }),
        __metadata("design:type", Array)
    ], Api.prototype, "mixins", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Api.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: option_1.Option }),
        (0, class_transformer_1.Expose)({ name: "options" }),
        (0, class_transformer_1.Type)(function () { return option_1.Option; }),
        __metadata("design:type", Array)
    ], Api.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sourceContext" }),
        (0, class_transformer_1.Type)(function () { return sourcecontext_1.SourceContext; }),
        __metadata("design:type", sourcecontext_1.SourceContext)
    ], Api.prototype, "sourceContext", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "syntax" }),
        __metadata("design:type", String)
    ], Api.prototype, "syntax", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "version" }),
        __metadata("design:type", String)
    ], Api.prototype, "version", void 0);
    return Api;
}(utils_1.SpeakeasyBase));
exports.Api = Api;
