<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * UpdateRsaMfaServerRequestBody - Configuration of RSA server.
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class UpdateRsaMfaServerRequestBody
{
    /**
     * The name of a Cloud Authentication Service policy. This setting is only required for RSA Cloud Service configurations.
     * 
     * 
     * 
     * @var ?string $assurancePolicyName
     */
	#[\JMS\Serializer\Annotation\SerializedName('assurancePolicyName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $assurancePolicyName = null;
    
    /**
     * The base url for RSA REST API server including the host name and port number. A valid input looks like https://<SECURID_ACCESS_HOST >:<REST_API_PORT>/mfa/v1_1.
     * 
     * 
     * 
     * @var ?string $baseUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('baseUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $baseUrl = null;
    
    /**
     * ID corresponding to the imported certificate.
     * 
     * @var ?string $certificateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificateId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $certificateId = null;
    
    /**
     * A unique name to identify the client. When the client is configured to use RSA Authentication Manager, the client ID must match an authentication agent name.
     * 
     * 
     * 
     * @var ?string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientId = null;
    
    /**
     * LDAP attribute to query the username used for performing MFA.
     * 
     * 
     * 
     * @var ?string $ldapUsernameAttribute
     */
	#[\JMS\Serializer\Annotation\SerializedName('ldapUsernameAttribute')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ldapUsernameAttribute = null;
    
    /**
     * Unique name to identify MFA server configuration.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * A unique string that RSA SecurID Access uses to identify individual REST API clients (not to be confused with a REST API Key described above).
     * 
     * 
     * 
     * @var ?string $restApiAccessId
     */
	#[\JMS\Serializer\Annotation\SerializedName('restApiAccessId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $restApiAccessId = null;
    
    /**
     * A unique string that RSA SecurID Access generates and uses as a shared secret with REST API clients.
     * 
     * 
     * 
     * @var ?string $restApiKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('restApiKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $restApiKey = null;
    
    /**
     * Specifies a number of seconds to wait for server response to a given authentication method.
     * 
     * 
     * 
     * @var ?int $timeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('timeout')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $timeout = null;
    
	public function __construct()
	{
		$this->assurancePolicyName = null;
		$this->baseUrl = null;
		$this->certificateId = null;
		$this->clientId = null;
		$this->ldapUsernameAttribute = null;
		$this->name = null;
		$this->restApiAccessId = null;
		$this->restApiKey = null;
		$this->timeout = null;
	}
}
