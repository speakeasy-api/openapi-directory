// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeJobXAmzTargetEnum
type DescribeJobXAmzTargetEnum string

const (
	DescribeJobXAmzTargetEnumAwsieSnowballJobManagementServiceDescribeJob DescribeJobXAmzTargetEnum = "AWSIESnowballJobManagementService.DescribeJob"
)

func (e DescribeJobXAmzTargetEnum) ToPointer() *DescribeJobXAmzTargetEnum {
	return &e
}

func (e *DescribeJobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSIESnowballJobManagementService.DescribeJob":
		*e = DescribeJobXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeJobXAmzTargetEnum: %v", v)
	}
}

type DescribeJobRequest struct {
	DescribeJobRequest shared.DescribeJobRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         DescribeJobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeJobResponse struct {
	ContentType string
	// Success
	DescribeJobResult *shared.DescribeJobResult
	// InvalidResourceException
	InvalidResourceException interface{}
	StatusCode               int
	RawResponse              *http.Response
}
