/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DataQualityTargetTable } from "./dataqualitytargettable";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The criteria used to filter data quality rulesets.
 */
export class DataQualityRulesetFilterCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedAfter" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAfter?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedBefore" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdBefore?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedAfter" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedAfter?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedBefore" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedBefore?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetTable" })
  @Type(() => DataQualityTargetTable)
  targetTable?: DataQualityTargetTable;
}
