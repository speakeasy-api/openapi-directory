// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum - The current state of the gateway association.
type CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum string

const (
	CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnumAssociated     CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = "associated"
	CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnumNotAssociated  CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = "not-associated"
	CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnumAssociating    CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = "associating"
	CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnumDisassociating CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum = "disassociating"
)

func (e CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum) ToPointer() *CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum {
	return &e
}

func (e *CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associated":
		fallthrough
	case "not-associated":
		fallthrough
	case "associating":
		fallthrough
	case "disassociating":
		*e = CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum: %v", v)
	}
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum - Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum string

const (
	CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnumIpv4 CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum = "ipv4"
	CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnumIpv6 CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum = "ipv6"
)

func (e CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum) ToPointer() *CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum {
	return &e
}

func (e *CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum: %v", v)
	}
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions - The internet key exchange (IKE) version permitted for the VPN tunnel.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions struct {
	Value *string
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions - Options for sending VPN tunnel logs to CloudWatch.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions struct {
	LogEnabled      *bool
	LogGroupArn     *string
	LogOutputFormat *string
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions - Options for logging VPN tunnel activity.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions struct {
	CloudWatchLogOptions *CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers - The Diffie-Hellmann group number for phase 1 IKE negotiations.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers struct {
	Value *int64
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms - The encryption algorithm for phase 1 IKE negotiations.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms struct {
	Value *string
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms - The integrity algorithm for phase 1 IKE negotiations.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms struct {
	Value *string
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers - The Diffie-Hellmann group number for phase 2 IKE negotiations.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers struct {
	Value *int64
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms - The encryption algorithm for phase 2 IKE negotiations.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms struct {
	Value *string
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms - The integrity algorithm for phase 2 IKE negotiations.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms struct {
	Value *string
}

// CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions - The VPN tunnel options.
type CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions struct {
	DpdTimeoutAction             *string
	DpdTimeoutSeconds            *int64
	EnableTunnelLifecycleControl *bool
	IkeVersions                  []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions
	LogOptions                   *CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions
	OutsideIPAddress             *string
	Phase1DHGroupNumbers         []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers
	Phase1EncryptionAlgorithms   []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms
	Phase1IntegrityAlgorithms    []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms
	Phase1LifetimeSeconds        *int64
	Phase2DHGroupNumbers         []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers
	Phase2EncryptionAlgorithms   []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms
	Phase2IntegrityAlgorithms    []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms
	Phase2LifetimeSeconds        *int64
	PreSharedKey                 *string
	RekeyFuzzPercentage          *int64
	RekeyMarginTimeSeconds       *int64
	ReplayWindowSize             *int64
	StartupAction                *string
	TunnelInsideCidr             *string
	TunnelInsideIpv6Cidr         *string
}

// CreateVpnConnectionResultVpnConnectionOptions - The VPN connection options.
type CreateVpnConnectionResultVpnConnectionOptions struct {
	EnableAcceleration                  *bool
	LocalIpv4NetworkCidr                *string
	LocalIpv6NetworkCidr                *string
	OutsideIPAddressType                *string
	RemoteIpv4NetworkCidr               *string
	RemoteIpv6NetworkCidr               *string
	StaticRoutesOnly                    *bool
	TransportTransitGatewayAttachmentID *string
	TunnelInsideIPVersion               *CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIPVersionEnum
	TunnelOptions                       []CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions
}

// CreateVpnConnectionResultVpnConnectionRoutesSourceEnum - Indicates how the routes were provided.
type CreateVpnConnectionResultVpnConnectionRoutesSourceEnum string

const (
	CreateVpnConnectionResultVpnConnectionRoutesSourceEnumStatic CreateVpnConnectionResultVpnConnectionRoutesSourceEnum = "Static"
)

func (e CreateVpnConnectionResultVpnConnectionRoutesSourceEnum) ToPointer() *CreateVpnConnectionResultVpnConnectionRoutesSourceEnum {
	return &e
}

func (e *CreateVpnConnectionResultVpnConnectionRoutesSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Static":
		*e = CreateVpnConnectionResultVpnConnectionRoutesSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpnConnectionResultVpnConnectionRoutesSourceEnum: %v", v)
	}
}

// CreateVpnConnectionResultVpnConnectionRoutesStateEnum - The current state of the static route.
type CreateVpnConnectionResultVpnConnectionRoutesStateEnum string

const (
	CreateVpnConnectionResultVpnConnectionRoutesStateEnumPending   CreateVpnConnectionResultVpnConnectionRoutesStateEnum = "pending"
	CreateVpnConnectionResultVpnConnectionRoutesStateEnumAvailable CreateVpnConnectionResultVpnConnectionRoutesStateEnum = "available"
	CreateVpnConnectionResultVpnConnectionRoutesStateEnumDeleting  CreateVpnConnectionResultVpnConnectionRoutesStateEnum = "deleting"
	CreateVpnConnectionResultVpnConnectionRoutesStateEnumDeleted   CreateVpnConnectionResultVpnConnectionRoutesStateEnum = "deleted"
)

func (e CreateVpnConnectionResultVpnConnectionRoutesStateEnum) ToPointer() *CreateVpnConnectionResultVpnConnectionRoutesStateEnum {
	return &e
}

func (e *CreateVpnConnectionResultVpnConnectionRoutesStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = CreateVpnConnectionResultVpnConnectionRoutesStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpnConnectionResultVpnConnectionRoutesStateEnum: %v", v)
	}
}

// CreateVpnConnectionResultVpnConnectionRoutes - Describes a static route for a VPN connection.
type CreateVpnConnectionResultVpnConnectionRoutes struct {
	DestinationCidrBlock *string
	Source               *CreateVpnConnectionResultVpnConnectionRoutesSourceEnum
	State                *CreateVpnConnectionResultVpnConnectionRoutesStateEnum
}

// CreateVpnConnectionResultVpnConnectionStateEnum - The current state of the VPN connection.
type CreateVpnConnectionResultVpnConnectionStateEnum string

const (
	CreateVpnConnectionResultVpnConnectionStateEnumPending   CreateVpnConnectionResultVpnConnectionStateEnum = "pending"
	CreateVpnConnectionResultVpnConnectionStateEnumAvailable CreateVpnConnectionResultVpnConnectionStateEnum = "available"
	CreateVpnConnectionResultVpnConnectionStateEnumDeleting  CreateVpnConnectionResultVpnConnectionStateEnum = "deleting"
	CreateVpnConnectionResultVpnConnectionStateEnumDeleted   CreateVpnConnectionResultVpnConnectionStateEnum = "deleted"
)

func (e CreateVpnConnectionResultVpnConnectionStateEnum) ToPointer() *CreateVpnConnectionResultVpnConnectionStateEnum {
	return &e
}

func (e *CreateVpnConnectionResultVpnConnectionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = CreateVpnConnectionResultVpnConnectionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpnConnectionResultVpnConnectionStateEnum: %v", v)
	}
}

// CreateVpnConnectionResultVpnConnectionTags - Describes a tag.
type CreateVpnConnectionResultVpnConnectionTags struct {
	Key   *string
	Value *string
}

// CreateVpnConnectionResultVpnConnectionTypeEnum - The type of VPN connection.
type CreateVpnConnectionResultVpnConnectionTypeEnum string

const (
	CreateVpnConnectionResultVpnConnectionTypeEnumIpsec1 CreateVpnConnectionResultVpnConnectionTypeEnum = "ipsec.1"
)

func (e CreateVpnConnectionResultVpnConnectionTypeEnum) ToPointer() *CreateVpnConnectionResultVpnConnectionTypeEnum {
	return &e
}

func (e *CreateVpnConnectionResultVpnConnectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipsec.1":
		*e = CreateVpnConnectionResultVpnConnectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpnConnectionResultVpnConnectionTypeEnum: %v", v)
	}
}

// CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum - The status of the VPN tunnel.
type CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum string

const (
	CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnumUp   CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = "UP"
	CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnumDown CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum = "DOWN"
)

func (e CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum) ToPointer() *CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum {
	return &e
}

func (e *CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UP":
		fallthrough
	case "DOWN":
		*e = CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum: %v", v)
	}
}

// CreateVpnConnectionResultVpnConnectionVgwTelemetry - Describes telemetry for a VPN tunnel.
type CreateVpnConnectionResultVpnConnectionVgwTelemetry struct {
	AcceptedRouteCount *int64
	CertificateArn     *string
	LastStatusChange   *time.Time
	OutsideIPAddress   *string
	Status             *CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum
	StatusMessage      *string
}

// CreateVpnConnectionResultVpnConnection - Information about the VPN connection.
type CreateVpnConnectionResultVpnConnection struct {
	Category                     *string
	CoreNetworkArn               *string
	CoreNetworkAttachmentArn     *string
	CustomerGatewayConfiguration *string
	CustomerGatewayID            *string
	GatewayAssociationState      *CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum
	Options                      *CreateVpnConnectionResultVpnConnectionOptions
	Routes                       []CreateVpnConnectionResultVpnConnectionRoutes
	State                        *CreateVpnConnectionResultVpnConnectionStateEnum
	Tags                         []CreateVpnConnectionResultVpnConnectionTags
	TransitGatewayID             *string
	Type                         *CreateVpnConnectionResultVpnConnectionTypeEnum
	VgwTelemetry                 []CreateVpnConnectionResultVpnConnectionVgwTelemetry
	VpnConnectionID              *string
	VpnGatewayID                 *string
}

// CreateVpnConnectionResult - Contains the output of CreateVpnConnection.
type CreateVpnConnectionResult struct {
	VpnConnection *CreateVpnConnectionResultVpnConnection
}
