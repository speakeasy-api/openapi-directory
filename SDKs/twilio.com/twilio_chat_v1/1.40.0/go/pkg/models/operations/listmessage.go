// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var ListMessageServerList = []string{
	"https://chat.twilio.com",
}

type ListMessageSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type ListMessagePathParams struct {
	// The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message to read belongs to. Can be the Channel's `sid` or `unique_name`.
	ChannelSid string `pathParam:"style=simple,explode=false,name=ChannelSid"`
	// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
	ServiceSid string `pathParam:"style=simple,explode=false,name=ServiceSid"`
}

type ListMessageQueryParams struct {
	// The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending) with `asc` as the default.
	Order *shared.MessageEnumOrderTypeEnum `queryParam:"style=form,explode=true,name=Order"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
}

type ListMessageRequest struct {
	PathParams  ListMessagePathParams
	QueryParams ListMessageQueryParams
	Security    ListMessageSecurity
	ServerURL   *string
}

type ListMessageListMessageResponseMeta struct {
	FirstPageURL    *string `json:"first_page_url,omitempty"`
	Key             *string `json:"key,omitempty"`
	NextPageURL     *string `json:"next_page_url,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	PageSize        *int64  `json:"page_size,omitempty"`
	PreviousPageURL *string `json:"previous_page_url,omitempty"`
	URL             *string `json:"url,omitempty"`
}

// ListMessageListMessageResponse - OK
type ListMessageListMessageResponse struct {
	Messages []shared.ChatV1ServiceChannelMessage `json:"messages,omitempty"`
	Meta     *ListMessageListMessageResponseMeta  `json:"meta,omitempty"`
}

type ListMessageResponse struct {
	ContentType string
	// OK
	ListMessageResponse *ListMessageListMessageResponse
	StatusCode          int
	RawResponse         *http.Response
}
