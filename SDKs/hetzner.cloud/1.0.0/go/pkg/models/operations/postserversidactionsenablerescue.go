// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostServersIDActionsEnableRescueRequestBodyTypeEnum - Type of rescue system to boot (default: `linux64`)
type PostServersIDActionsEnableRescueRequestBodyTypeEnum string

const (
	PostServersIDActionsEnableRescueRequestBodyTypeEnumLinux64 PostServersIDActionsEnableRescueRequestBodyTypeEnum = "linux64"
	PostServersIDActionsEnableRescueRequestBodyTypeEnumLinux32 PostServersIDActionsEnableRescueRequestBodyTypeEnum = "linux32"
)

func (e PostServersIDActionsEnableRescueRequestBodyTypeEnum) ToPointer() *PostServersIDActionsEnableRescueRequestBodyTypeEnum {
	return &e
}

func (e *PostServersIDActionsEnableRescueRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linux64":
		fallthrough
	case "linux32":
		*e = PostServersIDActionsEnableRescueRequestBodyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsEnableRescueRequestBodyTypeEnum: %v", v)
	}
}

type PostServersIDActionsEnableRescueRequestBody struct {
	// Array of SSH key IDs which should be injected into the rescue system.
	SSHKeys []int64 `json:"ssh_keys,omitempty"`
	// Type of rescue system to boot (default: `linux64`)
	Type *PostServersIDActionsEnableRescueRequestBodyTypeEnum `json:"type,omitempty"`
}

type PostServersIDActionsEnableRescueRequest struct {
	RequestBody *PostServersIDActionsEnableRescueRequestBody `request:"mediaType=application/json"`
	// ID of the Server
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostServersIDActionsEnableRescue201ApplicationJSONActionError - Error message for the Action if error occurred, otherwise null
type PostServersIDActionsEnableRescue201ApplicationJSONActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostServersIDActionsEnableRescue201ApplicationJSONActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum - Status of the Action
type PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum string

const (
	PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnumSuccess PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum = "success"
	PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnumRunning PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum = "running"
	PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnumError   PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum = "error"
)

func (e PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum) ToPointer() *PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum {
	return &e
}

func (e *PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum: %v", v)
	}
}

type PostServersIDActionsEnableRescue201ApplicationJSONAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostServersIDActionsEnableRescue201ApplicationJSONActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostServersIDActionsEnableRescue201ApplicationJSONActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostServersIDActionsEnableRescue201ApplicationJSONActionStatusEnum `json:"status"`
}

// PostServersIDActionsEnableRescue201ApplicationJSON - The `root_password` key in the reply contains the root password that can be used to access the booted rescue system.
//
// The `action` key in the reply contains an Action object with this structure
type PostServersIDActionsEnableRescue201ApplicationJSON struct {
	Action *PostServersIDActionsEnableRescue201ApplicationJSONAction `json:"action,omitempty"`
	// Password that will be set for this Server once the Action succeeds
	RootPassword *string `json:"root_password,omitempty"`
}

type PostServersIDActionsEnableRescueResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `root_password` key in the reply contains the root password that can be used to access the booted rescue system.
	//
	// The `action` key in the reply contains an Action object with this structure
	//
	PostServersIDActionsEnableRescue201ApplicationJSONObject *PostServersIDActionsEnableRescue201ApplicationJSON
}
