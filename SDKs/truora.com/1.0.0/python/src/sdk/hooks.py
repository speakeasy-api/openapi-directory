"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Hooks:
    r"""Hooks allows configuring Truora Platform to notify via requests to your service (or another third-party service) whenever an event occurs in Truora Platform. They are the easiest way to get a warning when something happens in another system, in this case, Truora platform. This service allows sending notifications via requests to your service or another third-party service whenever certain events occur."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_hook(self, request: shared.CreateHookInput, security: operations.CreateHookSecurity) -> operations.CreateHookResponse:
        r"""Creates a hook subscription
        Creates a hook subscription to notify events in Truora plataform. Subscriptions broadcast data as events occur and additional subscription instances are not required in order to refresh the information. Events are received in an array as a JWT and are decoded using the signing key returned by this endpoint. Their structure is as follows:
        
        ```
        {
            \"events\": [
                {
                    \"event_action\": \"created\",
                    \"event_type\": \"check\",
                    \"id\": \"HKEdd28c569cf5eb74e45f0f4c092096e62c1c95ba2\",
                    \"object\": {
                        \"check_id\": \"CHK9c39003424c521aec8566ce59e1ddc86\",
                        \"country\": \"CO\",
                        \"creation_date\": \"2020-04-01T23:00:30.581232281Z\",
                        \"homonym_score\": 0,
                        \"id_score\": 0,
                        \"national_id\": \"1151959906\",
                        \"previous_check\": \"CHK4ec814fecd147eaae41027081d7d5caf\",
                        \"score\": -1,
                        \"status\": \"not_started\",
                        \"type\": \"person\",
                        \"update_date\": \"2020-04-01T23:00:30.680937413Z\"
                    },
                    \"timestamp\": \"2020-04-01T23:00:30Z\",
                    \"version\": \"1.0\"
                }
            ],
            \"iat\": 1585782031,
            \"iss\": \"Truora\"
        }
        ```
        
        Keep in mind that the object attribute varies depending on the event_type.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/hooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Hook])
                res.hook = out
        elif http_res.status_code == 400:
            pass

        return res

    def delet_hook(self, request: operations.DeletHookRequest, security: operations.DeletHookSecurity) -> operations.DeletHookResponse:
        r"""Deletes hook
        Deletes hook configuration.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletHookRequest, base_url, '/v1/hooks/{hook_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delet_hook_200_application_json_string = http_res.content

        return res

    def list_hook(self) -> operations.ListHookResponse:
        r"""Lists all hooks
        Lists all the configured hooks in your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/hooks'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HookOutput])
                res.hook_output = out

        return res

    def update_hook(self, request: operations.UpdateHookRequest, security: operations.UpdateHookSecurity) -> operations.UpdateHookResponse:
        r"""Updates hook
        Updates a hook configuration.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateHookRequest, base_url, '/v1/hooks/{hook_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_hook_input", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    