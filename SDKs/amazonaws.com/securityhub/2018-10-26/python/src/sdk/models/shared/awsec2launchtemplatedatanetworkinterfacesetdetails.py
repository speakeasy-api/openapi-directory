"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsec2launchtemplatedatanetworkinterfacesetipv4prefixesdetails as shared_awsec2launchtemplatedatanetworkinterfacesetipv4prefixesdetails
from ..shared import awsec2launchtemplatedatanetworkinterfacesetipv6addressesdetails as shared_awsec2launchtemplatedatanetworkinterfacesetipv6addressesdetails
from ..shared import awsec2launchtemplatedatanetworkinterfacesetipv6prefixesdetails as shared_awsec2launchtemplatedatanetworkinterfacesetipv6prefixesdetails
from ..shared import awsec2launchtemplatedatanetworkinterfacesetprivateipaddressesdetails as shared_awsec2launchtemplatedatanetworkinterfacesetprivateipaddressesdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails:
    r"""One or more network interfaces to attach to an Amazon EC2 instance. If you specify a network interface, you must specify security groups and subnets as part of the network interface."""
    
    associate_carrier_ip_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociateCarrierIpAddress'), 'exclude': lambda f: f is None }})  
    associate_public_ip_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociatePublicIpAddress'), 'exclude': lambda f: f is None }})  
    delete_on_termination: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeleteOnTermination'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    device_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceIndex'), 'exclude': lambda f: f is None }})  
    groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Groups'), 'exclude': lambda f: f is None }})  
    interface_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterfaceType'), 'exclude': lambda f: f is None }})  
    ipv4_prefix_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv4PrefixCount'), 'exclude': lambda f: f is None }})  
    ipv4_prefixes: Optional[list[shared_awsec2launchtemplatedatanetworkinterfacesetipv4prefixesdetails.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv4PrefixesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv4Prefixes'), 'exclude': lambda f: f is None }})  
    ipv6_address_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv6AddressCount'), 'exclude': lambda f: f is None }})  
    ipv6_addresses: Optional[list[shared_awsec2launchtemplatedatanetworkinterfacesetipv6addressesdetails.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6AddressesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv6Addresses'), 'exclude': lambda f: f is None }})  
    ipv6_prefix_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv6PrefixCount'), 'exclude': lambda f: f is None }})  
    ipv6_prefixes: Optional[list[shared_awsec2launchtemplatedatanetworkinterfacesetipv6prefixesdetails.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6PrefixesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv6Prefixes'), 'exclude': lambda f: f is None }})  
    network_card_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkCardIndex'), 'exclude': lambda f: f is None }})  
    network_interface_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkInterfaceId'), 'exclude': lambda f: f is None }})  
    private_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivateIpAddress'), 'exclude': lambda f: f is None }})  
    private_ip_addresses: Optional[list[shared_awsec2launchtemplatedatanetworkinterfacesetprivateipaddressesdetails.AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIPAddressesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivateIpAddresses'), 'exclude': lambda f: f is None }})  
    secondary_private_ip_address_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryPrivateIpAddressCount'), 'exclude': lambda f: f is None }})  
    subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetId'), 'exclude': lambda f: f is None }})  
    