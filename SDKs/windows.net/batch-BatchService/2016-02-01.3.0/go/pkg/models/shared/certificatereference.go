// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateReferenceStoreLocationEnum - The location of the certificate store on the compute node into which to install the certificate. The default value is CurrentUser.
type CertificateReferenceStoreLocationEnum string

const (
	CertificateReferenceStoreLocationEnumCurrentuser  CertificateReferenceStoreLocationEnum = "currentuser"
	CertificateReferenceStoreLocationEnumLocalmachine CertificateReferenceStoreLocationEnum = "localmachine"
	CertificateReferenceStoreLocationEnumUnmapped     CertificateReferenceStoreLocationEnum = "unmapped"
)

func (e CertificateReferenceStoreLocationEnum) ToPointer() *CertificateReferenceStoreLocationEnum {
	return &e
}

func (e *CertificateReferenceStoreLocationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "currentuser":
		fallthrough
	case "localmachine":
		fallthrough
	case "unmapped":
		*e = CertificateReferenceStoreLocationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateReferenceStoreLocationEnum: %v", v)
	}
}

type CertificateReferenceVisibilityEnum string

const (
	CertificateReferenceVisibilityEnumStarttask  CertificateReferenceVisibilityEnum = "starttask"
	CertificateReferenceVisibilityEnumTask       CertificateReferenceVisibilityEnum = "task"
	CertificateReferenceVisibilityEnumRemoteuser CertificateReferenceVisibilityEnum = "remoteuser"
	CertificateReferenceVisibilityEnumUnmapped   CertificateReferenceVisibilityEnum = "unmapped"
)

func (e CertificateReferenceVisibilityEnum) ToPointer() *CertificateReferenceVisibilityEnum {
	return &e
}

func (e *CertificateReferenceVisibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "starttask":
		fallthrough
	case "task":
		fallthrough
	case "remoteuser":
		fallthrough
	case "unmapped":
		*e = CertificateReferenceVisibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateReferenceVisibilityEnum: %v", v)
	}
}

// CertificateReference - A reference to a certificate to be installed on compute nodes in a pool.
type CertificateReference struct {
	// The location of the certificate store on the compute node into which to install the certificate. The default value is CurrentUser.
	StoreLocation *CertificateReferenceStoreLocationEnum `json:"storeLocation,omitempty"`
	// The name of the certificate store on the compute node into which to install the certificate. The default value is My.
	StoreName *string `json:"storeName,omitempty"`
	// The thumbprint of the certificate.
	Thumbprint string `json:"thumbprint"`
	// The algorithm with which the thumbprint is associated. This must be sha1.
	ThumbprintAlgorithm string `json:"thumbprintAlgorithm"`
	// Which user accounts on the compute node should have access to the private data of the certificate. This may be any subset of the values 'starttask', 'task' and 'remoteuser', separated by commas. The default is all accounts, corresponding to the string 'starttask,task,remoteuser'.
	Visibility []CertificateReferenceVisibilityEnum `json:"visibility,omitempty"`
}
