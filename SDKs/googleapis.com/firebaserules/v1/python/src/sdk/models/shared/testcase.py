"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import functionmock as shared_functionmock
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class TestCaseExpectationEnum(str, Enum):
    r"""Test expectation."""
    EXPECTATION_UNSPECIFIED = 'EXPECTATION_UNSPECIFIED'
    ALLOW = 'ALLOW'
    DENY = 'DENY'

class TestCaseExpressionReportLevelEnum(str, Enum):
    r"""Specifies what should be included in the response."""
    LEVEL_UNSPECIFIED = 'LEVEL_UNSPECIFIED'
    NONE = 'NONE'
    FULL = 'FULL'
    VISITED = 'VISITED'

class TestCasePathEncodingEnum(str, Enum):
    r"""Specifies whether paths (such as request.path) are encoded and how."""
    ENCODING_UNSPECIFIED = 'ENCODING_UNSPECIFIED'
    URL_ENCODED = 'URL_ENCODED'
    PLAIN = 'PLAIN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestCase:
    r"""`TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed."""
    
    expectation: Optional[TestCaseExpectationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expectation'), 'exclude': lambda f: f is None }})
    r"""Test expectation."""  
    expression_report_level: Optional[TestCaseExpressionReportLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expressionReportLevel'), 'exclude': lambda f: f is None }})
    r"""Specifies what should be included in the response."""  
    function_mocks: Optional[list[shared_functionmock.FunctionMock]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functionMocks'), 'exclude': lambda f: f is None }})
    r"""Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome."""  
    path_encoding: Optional[TestCasePathEncodingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pathEncoding'), 'exclude': lambda f: f is None }})
    r"""Specifies whether paths (such as request.path) are encoded and how."""  
    request: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request'), 'exclude': lambda f: f is None }})
    r"""Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument."""  
    resource: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    r"""Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value."""  
    