"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creativeclickthroughurl as shared_creativeclickthroughurl
from ..shared import popupwindowproperties as shared_popupwindowproperties
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreativeCustomEventAdvertiserCustomEventTypeEnum(str, Enum):
    r"""Type of the event. This is a read-only field."""
    ADVERTISER_EVENT_TIMER = 'ADVERTISER_EVENT_TIMER'
    ADVERTISER_EVENT_EXIT = 'ADVERTISER_EVENT_EXIT'
    ADVERTISER_EVENT_COUNTER = 'ADVERTISER_EVENT_COUNTER'

class CreativeCustomEventArtworkTypeEnum(str, Enum):
    r"""Artwork type used by the creative.This is a read-only field."""
    ARTWORK_TYPE_FLASH = 'ARTWORK_TYPE_FLASH'
    ARTWORK_TYPE_HTML5 = 'ARTWORK_TYPE_HTML5'
    ARTWORK_TYPE_MIXED = 'ARTWORK_TYPE_MIXED'
    ARTWORK_TYPE_IMAGE = 'ARTWORK_TYPE_IMAGE'

class CreativeCustomEventTargetTypeEnum(str, Enum):
    r"""Target type used by the event."""
    TARGET_BLANK = 'TARGET_BLANK'
    TARGET_TOP = 'TARGET_TOP'
    TARGET_SELF = 'TARGET_SELF'
    TARGET_PARENT = 'TARGET_PARENT'
    TARGET_POPUP = 'TARGET_POPUP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeCustomEvent:
    r"""Creative Custom Event."""
    
    advertiser_custom_event_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserCustomEventId'), 'exclude': lambda f: f is None }})
    r"""Unique ID of this event used by Reporting and Data Transfer. This is a read-only field."""  
    advertiser_custom_event_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserCustomEventName'), 'exclude': lambda f: f is None }})
    r"""User-entered name for the event."""  
    advertiser_custom_event_type: Optional[CreativeCustomEventAdvertiserCustomEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserCustomEventType'), 'exclude': lambda f: f is None }})
    r"""Type of the event. This is a read-only field."""  
    artwork_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artworkLabel'), 'exclude': lambda f: f is None }})
    r"""Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion."""  
    artwork_type: Optional[CreativeCustomEventArtworkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artworkType'), 'exclude': lambda f: f is None }})
    r"""Artwork type used by the creative.This is a read-only field."""  
    exit_click_through_url: Optional[shared_creativeclickthroughurl.CreativeClickThroughURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exitClickThroughUrl'), 'exclude': lambda f: f is None }})
    r"""Click-through URL"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this event. This is a required field and should not be modified after insertion."""  
    popup_window_properties: Optional[shared_popupwindowproperties.PopupWindowProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('popupWindowProperties'), 'exclude': lambda f: f is None }})
    r"""Popup Window Properties."""  
    target_type: Optional[CreativeCustomEventTargetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetType'), 'exclude': lambda f: f is None }})
    r"""Target type used by the event."""  
    video_reporting_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoReportingId'), 'exclude': lambda f: f is None }})
    r"""Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field."""  
    