/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.
 */
export class PutIntegrationRequestBodyFlowDefinition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FlowName" })
  flowName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KmsArn" })
  kmsArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceFlowConfig" })
  @Type(() => shared.SourceFlowConfig)
  sourceFlowConfig?: shared.SourceFlowConfig;

  @SpeakeasyMetadata({ elemType: shared.Task })
  @Expose({ name: "Tasks" })
  @Type(() => shared.Task)
  tasks?: shared.Task[];

  @SpeakeasyMetadata()
  @Expose({ name: "TriggerConfig" })
  @Type(() => shared.TriggerConfig)
  triggerConfig?: shared.TriggerConfig;
}

export class PutIntegrationRequestBody extends SpeakeasyBase {
  /**
   * The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FlowDefinition" })
  @Type(() => PutIntegrationRequestBodyFlowDefinition)
  flowDefinition?: PutIntegrationRequestBodyFlowDefinition;

  /**
   * The name of the profile object type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ObjectTypeName" })
  objectTypeName?: string;

  /**
   * A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ObjectTypeNames" })
  objectTypeNames?: Record<string, string>;

  /**
   * The tags used to organize, track, or control access for this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  /**
   * The URI of the S3 bucket or any other type of data source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Uri" })
  uri?: string;
}

export class PutIntegrationRequest extends SpeakeasyBase {
  /**
   * The unique name of the domain.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=DomainName",
  })
  domainName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutIntegrationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PutIntegrationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putIntegrationResponse?: shared.PutIntegrationResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
