"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import regionconcurrencytype_enum as shared_regionconcurrencytype_enum
from enum import Enum
from typing import Optional

class GETDetectStackSetDriftActionEnum(str, Enum):
    DETECT_STACK_SET_DRIFT = 'DetectStackSetDrift'

class GETDetectStackSetDriftCallAsEnum(str, Enum):
    r"""<p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p> <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p> <ul> <li> <p>If you are signed in to the management account, specify <code>SELF</code>.</p> </li> <li> <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p> <p>Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\\">Register a delegated administrator</a> in the <i>CloudFormation User Guide</i>.</p> </li> </ul>"""
    SELF = 'SELF'
    DELEGATED_ADMIN = 'DELEGATED_ADMIN'


@dataclasses.dataclass
class GETDetectStackSetDriftOperationPreferences:
    r"""<p>The user-specified preferences for how CloudFormation performs a stack set operation.</p> <p>For more information about maximum concurrent accounts and failure tolerance, see <a href=\\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\\">Stack set operation options</a>.</p>"""
    
    failure_tolerance_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FailureToleranceCount' }})  
    failure_tolerance_percentage: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FailureTolerancePercentage' }})  
    max_concurrent_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxConcurrentCount' }})  
    max_concurrent_percentage: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxConcurrentPercentage' }})  
    region_concurrency_type: Optional[shared_regionconcurrencytype_enum.RegionConcurrencyTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RegionConcurrencyType' }})  
    region_order: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RegionOrder' }})  
    
class GETDetectStackSetDriftVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_05_15 = '2010-05-15'


@dataclasses.dataclass
class GETDetectStackSetDriftRequest:
    
    action: GETDetectStackSetDriftActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    stack_set_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'StackSetName', 'style': 'form', 'explode': True }})
    r"""The name of the stack set on which to perform the drift detection operation."""  
    version: GETDetectStackSetDriftVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    call_as: Optional[GETDetectStackSetDriftCallAsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CallAs', 'style': 'form', 'explode': True }})
    r"""<p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p> <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p> <ul> <li> <p>If you are signed in to the management account, specify <code>SELF</code>.</p> </li> <li> <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p> <p>Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\\">Register a delegated administrator</a> in the <i>CloudFormation User Guide</i>.</p> </li> </ul>"""  
    operation_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'OperationId', 'style': 'form', 'explode': True }})
    r"""<i>The ID of the stack set operation.</i>"""  
    operation_preferences: Optional[GETDetectStackSetDriftOperationPreferences] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'OperationPreferences', 'style': 'form', 'explode': True }})
    r"""<p>The user-specified preferences for how CloudFormation performs a stack set operation.</p> <p>For more information about maximum concurrent accounts and failure tolerance, see <a href=\\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\\">Stack set operation options</a>.</p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDetectStackSetDriftResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    