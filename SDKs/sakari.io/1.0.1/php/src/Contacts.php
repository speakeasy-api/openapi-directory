<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Contacts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create contact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonResponse
     */
	public function contactsCreateJson(
        \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/{accountId}/contacts', \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactsCreateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsCreateJSON201ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create contact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringResponse
     */
	public function contactsCreateString(
        \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/{accountId}/contacts', \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactsCreateStringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsCreateString201ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch contact by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsFetchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsFetchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactsFetchResponse
     */
	public function contactsFetch(
        \OpenAPI\OpenAPI\Models\Operations\ContactsFetchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactsFetchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactsFetchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/{accountId}/contacts/{contactId}', \OpenAPI\OpenAPI\Models\Operations\ContactsFetchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactsFetchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch contacts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllResponse
     */
	public function contactsFetchAll(
        \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/{accountId}/contacts', \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactsFetchAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactsResponse', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500) or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a contact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveResponse
     */
	public function contactsRemove(
        \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/{accountId}/contacts/{contactId}', \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactsRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsRemove200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ContactsRemove200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a contact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateResponse
     */
	public function contactsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/{accountId}/contacts/{contactId}', \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactResponse', 'json');
            }
        }

        return $response;
    }
}