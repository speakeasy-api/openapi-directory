"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PurchaseInteractionBuy:
    r"""Information on purchasing this video."""
    
    drm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm'), 'exclude': lambda f: f is None }})
    r"""Whether the On Demand video for purchase has DRM."""  
    
class PurchaseInteractionSubscribeStreamEnum(str, Enum):
    r"""The user's streaming access to this On Demand subscription:
    
    Option descriptions:
     * `available` - The On Demand subscription is available for streaming.
     * `purchased` - The On Demand subscription has been purchased.
     * `restricted` - Streaming for the On Demand subscription is restricted.
     * `unavailable` - The On Demand subscription is unavailable.
    """
    AVAILABLE = 'available'
    PURCHASED = 'purchased'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PurchaseInteractionSubscribe:
    r"""Information on subscribing to this video."""
    
    drm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drm'), 'exclude': lambda f: f is None }})
    r"""Whether the On Demand subscription has DRM."""  
    expires_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_time'), 'exclude': lambda f: f is None }})
    r"""The time in ISO 8601 format when the On Demand video will expire."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The URL to purchase this On Demand subscription on Vimeo."""  
    purchase_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_time'), 'exclude': lambda f: f is None }})
    r"""The time in ISO 8601 format when the On Demand was purchased."""  
    stream: Optional[PurchaseInteractionSubscribeStreamEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream'), 'exclude': lambda f: f is None }})
    r"""The user's streaming access to this On Demand subscription:
    
    Option descriptions:
     * `available` - The On Demand subscription is available for streaming.
     * `purchased` - The On Demand subscription has been purchased.
     * `restricted` - Streaming for the On Demand subscription is restricted.
     * `unavailable` - The On Demand subscription is unavailable.
    """  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The On Demand subscription's product URI."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PurchaseInteraction:
    
    buy: Optional[PurchaseInteractionBuy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy'), 'exclude': lambda f: f is None }})
    r"""Information on purchasing this video."""  
    rent: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rent'), 'exclude': lambda f: f is None }})
    r"""Information on renting this video."""  
    subscribe: Optional[PurchaseInteractionSubscribe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribe'), 'exclude': lambda f: f is None }})
    r"""Information on subscribing to this video."""  
    