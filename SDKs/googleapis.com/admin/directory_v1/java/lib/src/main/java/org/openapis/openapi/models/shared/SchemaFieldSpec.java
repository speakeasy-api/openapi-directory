/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SchemaFieldSpec - You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).
 */
public class SchemaFieldSpec {
    /**
     * Display Name of the field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public SchemaFieldSpec withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The ETag of the field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public SchemaFieldSpec withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The unique identifier of the field (Read-only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldId")
    public String fieldId;
    public SchemaFieldSpec withFieldId(String fieldId) {
        this.fieldId = fieldId;
        return this;
    }
    
    /**
     * The name of the field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldName")
    public String fieldName;
    public SchemaFieldSpec withFieldName(String fieldName) {
        this.fieldName = fieldName;
        return this;
    }
    
    /**
     * The type of the field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldType")
    public String fieldType;
    public SchemaFieldSpec withFieldType(String fieldType) {
        this.fieldType = fieldType;
        return this;
    }
    
    /**
     * Boolean specifying whether the field is indexed or not. Default: `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexed")
    public Boolean indexed;
    public SchemaFieldSpec withIndexed(Boolean indexed) {
        this.indexed = indexed;
        return this;
    }
    
    /**
     * The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public SchemaFieldSpec withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A boolean specifying whether this is a multi-valued field or not. Default: `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiValued")
    public Boolean multiValued;
    public SchemaFieldSpec withMultiValued(Boolean multiValued) {
        this.multiValued = multiValued;
        return this;
    }
    
    /**
     * Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numericIndexingSpec")
    public SchemaFieldSpecNumericIndexingSpec numericIndexingSpec;
    public SchemaFieldSpec withNumericIndexingSpec(SchemaFieldSpecNumericIndexingSpec numericIndexingSpec) {
        this.numericIndexingSpec = numericIndexingSpec;
        return this;
    }
    
    /**
     * Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readAccessType")
    public String readAccessType;
    public SchemaFieldSpec withReadAccessType(String readAccessType) {
        this.readAccessType = readAccessType;
        return this;
    }
    
}
