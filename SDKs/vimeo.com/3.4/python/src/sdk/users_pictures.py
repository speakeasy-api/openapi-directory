"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class UsersPictures:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_picture(self, request: operations.CreatePictureRequest, security: operations.CreatePictureSecurity) -> operations.CreatePictureResponse:
        r"""Add a user picture"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePictureRequest, base_url, '/users/{user_id}/pictures', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePictureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def create_picture_alt1(self) -> operations.CreatePictureAlt1Response:
        r"""Add a user picture"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/pictures'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePictureAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def delete_picture(self, request: operations.DeletePictureRequest, security: operations.DeletePictureSecurity) -> operations.DeletePictureResponse:
        r"""Delete a user picture"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePictureRequest, base_url, '/users/{user_id}/pictures/{portraitset_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePictureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_picture_alt1(self, request: operations.DeletePictureAlt1Request, security: operations.DeletePictureAlt1Security) -> operations.DeletePictureAlt1Response:
        r"""Delete a user picture"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePictureAlt1Request, base_url, '/me/pictures/{portraitset_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePictureAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def edit_picture(self, request: operations.EditPictureRequest, security: operations.EditPictureSecurity) -> operations.EditPictureResponse:
        r"""Edit a user picture"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditPictureRequest, base_url, '/users/{user_id}/pictures/{portraitset_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditPictureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def edit_picture_alt1(self, request: operations.EditPictureAlt1Request, security: operations.EditPictureAlt1Security) -> operations.EditPictureAlt1Response:
        r"""Edit a user picture"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditPictureAlt1Request, base_url, '/me/pictures/{portraitset_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditPictureAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def get_picture(self, request: operations.GetPictureRequest) -> operations.GetPictureResponse:
        r"""Get a specific user picture"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPictureRequest, base_url, '/users/{user_id}/pictures/{portraitset_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPictureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def get_picture_alt1(self, request: operations.GetPictureAlt1Request) -> operations.GetPictureAlt1Response:
        r"""Get a specific user picture"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPictureAlt1Request, base_url, '/me/pictures/{portraitset_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPictureAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def get_pictures(self, request: operations.GetPicturesRequest) -> operations.GetPicturesResponse:
        r"""Get all the pictures that belong to a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPicturesRequest, base_url, '/users/{user_id}/pictures', request)
        
        query_params = utils.get_query_params(operations.GetPicturesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPicturesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out

        return res

    def get_pictures_alt1(self, request: operations.GetPicturesAlt1Request) -> operations.GetPicturesAlt1Response:
        r"""Get all the pictures that belong to a user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/pictures'
        
        query_params = utils.get_query_params(operations.GetPicturesAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPicturesAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out

        return res

    