/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Runtime - The definition of a Runtime for a managed notebook instance.
 */
public class Runtime {
    /**
     * Specifies the login configuration for Runtime
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessConfig")
    public RuntimeAccessConfig accessConfig;
    public Runtime withAccessConfig(RuntimeAccessConfig accessConfig) {
        this.accessConfig = accessConfig;
        return this;
    }
    
    /**
     * Output only. Runtime creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Runtime withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. Runtime health_state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthState")
    public RuntimeHealthStateEnum healthState;
    public Runtime withHealthState(RuntimeHealthStateEnum healthState) {
        this.healthState = healthState;
        return this;
    }
    
    /**
     * Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Runtime withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Contains runtime daemon metrics, such as OS and kernels and sessions stats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metrics")
    public RuntimeMetrics metrics;
    public Runtime withMetrics(RuntimeMetrics metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Runtime withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softwareConfig")
    public RuntimeSoftwareConfig softwareConfig;
    public Runtime withSoftwareConfig(RuntimeSoftwareConfig softwareConfig) {
        this.softwareConfig = softwareConfig;
        return this;
    }
    
    /**
     * Output only. Runtime state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public RuntimeStateEnum state;
    public Runtime withState(RuntimeStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Runtime update time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Runtime withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Runtime using Virtual Machine for computing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtualMachine")
    public VirtualMachine virtualMachine;
    public Runtime withVirtualMachine(VirtualMachine virtualMachine) {
        this.virtualMachine = virtualMachine;
        return this;
    }
    
}
