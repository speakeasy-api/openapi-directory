"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ArticleEmbargo:
    r"""OK. Embargo for article"""
    
    embargo_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_date') }})
    r"""Date when embargo lifts"""  
    embargo_options: list[dict[str, Any]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_options') }})
    r"""List of embargo permissions that are associated with the article. If the type is logged_in and the group_ids list is empty, then the whole institution can see the article; if there are multiple group_ids, then only users that are under those groups can see the article."""  
    embargo_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_reason') }})
    r"""Reason for embargo"""  
    embargo_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_title') }})
    r"""Title for embargo"""  
    embargo_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embargo_type') }})
    r"""Embargo type"""  
    is_embargoed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_embargoed') }})
    r"""True if embargoed"""  
    