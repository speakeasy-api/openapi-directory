/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Node } from "./node";
import { TypedNode } from "./typednode";
import { Expose, Type } from "class-transformer";

export class SimQuery extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Node })
  @Expose({ name: "ids" })
  @Type(() => Node)
  ids?: Node[];

  @SpeakeasyMetadata({ elemType: Node })
  @Expose({ name: "negated_ids" })
  @Type(() => Node)
  negatedIds?: Node[];

  /**
   * reference individual or class (eg gene, disease)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  @Type(() => TypedNode)
  reference?: TypedNode;

  @SpeakeasyMetadata({ elemType: Node, elemDepth: 2 })
  @Expose({ name: "target_ids" })
  @Type(() => Node)
  targetIds?: Node[][];

  /**
   * list of unresolved ids
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unresolved_ids" })
  unresolvedIds?: string[];
}
