<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LearnerActivity 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Find learner progress in a specified offering
     * 
     * Responds with all learner progress in the offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsLearnersProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsLearnersProgressResponse
     */
	public function getOfferingsOfferingIdAnalyticsLearnersProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsLearnersProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsLearnersProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/analytics/learners-progress', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsLearnersProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsLearnersProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->learnerProgressResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\LearnerProgressResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find shared social notes in an offering
     * 
     * Responds with all shared social notes in a specified offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsSocialNotesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsSocialNotesResponse
     */
	public function getOfferingsOfferingIdAnalyticsSocialNotes(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsSocialNotesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsSocialNotesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/analytics/social-notes', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsSocialNotesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsSocialNotesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->socialNotesResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SocialNotesResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find unit reactions
     * 
     * Responds with user reactions to units in a specified offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsUnitReactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsUnitReactionsResponse
     */
	public function getOfferingsOfferingIdAnalyticsUnitReactions(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsUnitReactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsUnitReactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/analytics/unit-reactions', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsUnitReactionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsUnitReactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unitReactionsAnalyticsResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UnitReactionsAnalyticsResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find learner's progress in a specified offering
     * 
     * Responds with the learner's progress in a specified offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailOfferingsOfferingIdProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailOfferingsOfferingIdProgressResponse
     */
	public function getUsersUserEmailOfferingsOfferingIdProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailOfferingsOfferingIdProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailOfferingsOfferingIdProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userEmail}/offerings/{offeringId}/progress', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailOfferingsOfferingIdProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailOfferingsOfferingIdProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersUserEmailOfferingsOfferingIdProgress200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailOfferingsOfferingIdProgress200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find learner's progress in offerings
     * 
     * Responds with the specified learner's progress in all offerings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailProgressResponse
     */
	public function getUsersUserEmailProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userEmail}/progress', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserEmailProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->learnerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LearnerResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}