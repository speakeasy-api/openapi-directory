// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartExecutionXAmzTargetEnum
type StartExecutionXAmzTargetEnum string

const (
	StartExecutionXAmzTargetEnumAwsStepFunctionsStartExecution StartExecutionXAmzTargetEnum = "AWSStepFunctions.StartExecution"
)

func (e *StartExecutionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSStepFunctions.StartExecution":
		*e = StartExecutionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartExecutionXAmzTargetEnum: %s", s)
	}
}

type StartExecutionHeaders struct {
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartExecutionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartExecutionRequest struct {
	Headers StartExecutionHeaders
	Request shared.StartExecutionInput `request:"mediaType=application/json"`
}

type StartExecutionResponse struct {
	ContentType string
	// ExecutionAlreadyExists
	ExecutionAlreadyExists interface{}
	// ExecutionLimitExceeded
	ExecutionLimitExceeded interface{}
	// InvalidArn
	InvalidArn interface{}
	// InvalidExecutionInput
	InvalidExecutionInput interface{}
	// InvalidName
	InvalidName interface{}
	// Success
	StartExecutionOutput *shared.StartExecutionOutput
	// StateMachineDeleting
	StateMachineDeleting interface{}
	// StateMachineDoesNotExist
	StateMachineDoesNotExist interface{}
	StatusCode               int
	RawResponse              *http.Response
	// ValidationException
	ValidationException interface{}
}
