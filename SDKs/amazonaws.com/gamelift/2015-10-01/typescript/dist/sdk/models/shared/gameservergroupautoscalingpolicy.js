"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameServerGroupAutoScalingPolicy = void 0;
var utils_1 = require("../../../internal/utils");
var targettrackingconfiguration_1 = require("./targettrackingconfiguration");
var class_transformer_1 = require("class-transformer");
/**
 * <p> <b>This data type is used with the GameLift FleetIQ and game server groups.</b> </p> <p>Configuration settings for intelligent automatic scaling that uses target tracking. These settings are used to add an Auto Scaling policy when creating the corresponding Auto Scaling group. After the Auto Scaling group is created, all updates to Auto Scaling policies, including changing this policy and adding or removing other policies, is done directly on the Auto Scaling group. </p>
 */
var GameServerGroupAutoScalingPolicy = /** @class */ (function (_super) {
    __extends(GameServerGroupAutoScalingPolicy, _super);
    function GameServerGroupAutoScalingPolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EstimatedInstanceWarmup" }),
        __metadata("design:type", Number)
    ], GameServerGroupAutoScalingPolicy.prototype, "estimatedInstanceWarmup", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TargetTrackingConfiguration" }),
        (0, class_transformer_1.Type)(function () { return targettrackingconfiguration_1.TargetTrackingConfiguration; }),
        __metadata("design:type", targettrackingconfiguration_1.TargetTrackingConfiguration)
    ], GameServerGroupAutoScalingPolicy.prototype, "targetTrackingConfiguration", void 0);
    return GameServerGroupAutoScalingPolicy;
}(utils_1.SpeakeasyBase));
exports.GameServerGroupAutoScalingPolicy = GameServerGroupAutoScalingPolicy;
