// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CallResponseMessageEnum - Response message
type CallResponseMessageEnum string

const (
	CallResponseMessageEnumCallRequestExecuted        CallResponseMessageEnum = "Call Request Executed"
	CallResponseMessageEnumMandatoryParametersMissing CallResponseMessageEnum = "Mandatory Parameters Missing"
	CallResponseMessageEnumAnswerURLIsNotValid        CallResponseMessageEnum = "AnswerUrl is not Valid"
	CallResponseMessageEnumHangupURLIsNotValid        CallResponseMessageEnum = "HangupUrl is not Valid"
	CallResponseMessageEnumRingURLIsNotValid          CallResponseMessageEnum = "RingUrl is not Valid"
	CallResponseMessageEnumUnknownCoreUUID            CallResponseMessageEnum = "Unknown Core UUID"
)

func (e CallResponseMessageEnum) ToPointer() *CallResponseMessageEnum {
	return &e
}

func (e *CallResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Call Request Executed":
		fallthrough
	case "Mandatory Parameters Missing":
		fallthrough
	case "AnswerUrl is not Valid":
		fallthrough
	case "HangupUrl is not Valid":
		fallthrough
	case "RingUrl is not Valid":
		fallthrough
	case "Unknown Core UUID":
		*e = CallResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CallResponseMessageEnum: %v", v)
	}
}

// CallResponse - Response
type CallResponse struct {
	// Response message
	Message CallResponseMessageEnum `json:"Message"`
	// Unique identifier of the Call request (UUIDv4)
	RequestUUID string `json:"RequestUUID"`
	// API server which handled this request (an Eqivo extension)
	RestAPIServer string `json:"RestApiServer"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
