// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetAlbumVideosDirectionEnum - The sort direction of the results.
type GetAlbumVideosDirectionEnum string

const (
	GetAlbumVideosDirectionEnumAsc  GetAlbumVideosDirectionEnum = "asc"
	GetAlbumVideosDirectionEnumDesc GetAlbumVideosDirectionEnum = "desc"
)

func (e *GetAlbumVideosDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAlbumVideosDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAlbumVideosDirectionEnum: %s", s)
	}
}

// GetAlbumVideosFilterEnum - The attribute by which to filter the results.
type GetAlbumVideosFilterEnum string

const (
	GetAlbumVideosFilterEnumEmbeddable GetAlbumVideosFilterEnum = "embeddable"
)

func (e *GetAlbumVideosFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "embeddable":
		*e = GetAlbumVideosFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAlbumVideosFilterEnum: %s", s)
	}
}

// GetAlbumVideosSortEnum - The way to sort the results.
type GetAlbumVideosSortEnum string

const (
	GetAlbumVideosSortEnumAlphabetical GetAlbumVideosSortEnum = "alphabetical"
	GetAlbumVideosSortEnumComments     GetAlbumVideosSortEnum = "comments"
	GetAlbumVideosSortEnumDate         GetAlbumVideosSortEnum = "date"
	GetAlbumVideosSortEnumDefault      GetAlbumVideosSortEnum = "default"
	GetAlbumVideosSortEnumDuration     GetAlbumVideosSortEnum = "duration"
	GetAlbumVideosSortEnumLikes        GetAlbumVideosSortEnum = "likes"
	GetAlbumVideosSortEnumManual       GetAlbumVideosSortEnum = "manual"
	GetAlbumVideosSortEnumModifiedTime GetAlbumVideosSortEnum = "modified_time"
	GetAlbumVideosSortEnumPlays        GetAlbumVideosSortEnum = "plays"
)

func (e *GetAlbumVideosSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alphabetical":
		fallthrough
	case "comments":
		fallthrough
	case "date":
		fallthrough
	case "default":
		fallthrough
	case "duration":
		fallthrough
	case "likes":
		fallthrough
	case "manual":
		fallthrough
	case "modified_time":
		fallthrough
	case "plays":
		*e = GetAlbumVideosSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAlbumVideosSortEnum: %s", s)
	}
}

type GetAlbumVideosRequest struct {
	// The ID of the album.
	AlbumID float64 `pathParam:"style=simple,explode=false,name=album_id"`
	// The page containing the video URI.
	ContainingURI *string `queryParam:"style=form,explode=true,name=containing_uri"`
	// The sort direction of the results.
	Direction *GetAlbumVideosDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The attribute by which to filter the results.
	Filter *GetAlbumVideosFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
	FilterEmbeddable *bool `queryParam:"style=form,explode=true,name=filter_embeddable"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The password of the album.
	Password *string `queryParam:"style=form,explode=true,name=password"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// The search query to use to filter the results.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The way to sort the results.
	Sort *GetAlbumVideosSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
	// Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.
	WeakSearch *bool `queryParam:"style=form,explode=true,name=weak_search"`
}

type GetAlbumVideosResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// No such album exists.
	LegacyError *shared.LegacyError
	// The videos were returned.
	Videos []shared.Video
}
