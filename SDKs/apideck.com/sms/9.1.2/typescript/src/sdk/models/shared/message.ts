/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CurrencyEnum } from "./currencyenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Set to sms for SMS messages and mms for MMS messages.
 */
export enum MessageMessageTypeEnum {
  Sms = "sms",
  Mms = "mms",
}

export class MessageInput extends SpeakeasyBase {
  /**
   * The message text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  /**
   * The phone number that initiated the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messaging_service_id" })
  messagingServiceId?: string;

  /**
   * A client reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  /**
   * The scheduled date and time of the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduled_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "subject" })
  subject?: string;

  /**
   * The phone number that received the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  /**
   * Set to sms for SMS messages and mms for MMS messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MessageMessageTypeEnum;

  /**
   * Define a webhook to receive delivery notifications.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webhook_url" })
  webhookUrl?: string;
}

/**
 * The direction of the message.
 */
export enum MessageDirectionEnum {
  Inbound = "inbound",
  OutboundApi = "outbound-api",
  OutboundCall = "outbound-call",
  OutboundReply = "outbound-reply",
  Unknown = "unknown",
}

/**
 * The error returned if your message status is failed or undelivered.
 */
export class MessageError extends SpeakeasyBase {
  /**
   * The error_code provides more information about the failure. If the message was successful, this value is null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

/**
 * Price of the message.
 */
export class MessagePrice extends SpeakeasyBase {
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "per_unit" })
  perUnit?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "total_amount" })
  totalAmount?: string;
}

/**
 * Status of the delivery of the message.
 */
export enum MessageStatusEnum {
  Accepted = "accepted",
  Scheduled = "scheduled",
  Canceled = "canceled",
  Queued = "queued",
  Sending = "sending",
  Sent = "sent",
  Failed = "failed",
  Delivered = "delivered",
  Undelivered = "undelivered",
  Receiving = "receiving",
  Received = "received",
  Read = "read",
}

export class Message extends SpeakeasyBase {
  /**
   * The message text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  /**
   * The date and time when the object was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The user who created the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  /**
   * The direction of the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction?: MessageDirectionEnum;

  /**
   * The error returned if your message status is failed or undelivered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => MessageError)
  error?: MessageError;

  /**
   * The phone number that initiated the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * A unique identifier for an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messaging_service_id" })
  messagingServiceId?: string;

  /**
   * The number of media files associated with the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number_of_media_files" })
  numberOfMediaFiles?: number;

  /**
   * The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number_of_units" })
  numberOfUnits?: number;

  /**
   * Price of the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  @Type(() => MessagePrice)
  price?: MessagePrice;

  /**
   * A client reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  /**
   * The scheduled date and time of the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduled_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledAt?: Date;

  /**
   * The date and time that the message was sent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sent_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  sentAt?: Date;

  /**
   * Status of the delivery of the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: MessageStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subject" })
  subject?: string;

  /**
   * The phone number that received the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  /**
   * Set to sms for SMS messages and mms for MMS messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MessageMessageTypeEnum;

  /**
   * The date and time when the object was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The user who last updated the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;

  /**
   * Define a webhook to receive delivery notifications.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webhook_url" })
  webhookUrl?: string;
}
