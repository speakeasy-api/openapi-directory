// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartRecommendationsXAmzTargetEnum
type StartRecommendationsXAmzTargetEnum string

const (
	StartRecommendationsXAmzTargetEnumAmazonDmSv20160101StartRecommendations StartRecommendationsXAmzTargetEnum = "AmazonDMSv20160101.StartRecommendations"
)

func (e *StartRecommendationsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonDMSv20160101.StartRecommendations":
		*e = StartRecommendationsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartRecommendationsXAmzTargetEnum: %s", s)
	}
}

type StartRecommendationsRequest struct {
	StartRecommendationsRequest shared.StartRecommendationsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  StartRecommendationsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartRecommendationsResponse struct {
	// AccessDeniedFault
	AccessDeniedFault interface{}
	ContentType       string
	// InvalidResourceStateFault
	InvalidResourceStateFault interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceNotFoundFault
	ResourceNotFoundFault interface{}
}
