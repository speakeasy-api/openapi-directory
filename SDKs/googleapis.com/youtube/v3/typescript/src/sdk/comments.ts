/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Comments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a resource.
   */
  youtubeCommentsDelete(
    req: operations.YoutubeCommentsDeleteRequest,
    security: operations.YoutubeCommentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeCommentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeCommentsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/youtube/v3/comments";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeCommentsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeCommentsDeleteResponse =
        new operations.YoutubeCommentsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a new resource into this collection.
   */
  youtubeCommentsInsert(
    req: operations.YoutubeCommentsInsertRequest,
    security: operations.YoutubeCommentsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeCommentsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeCommentsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/youtube/v3/comments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "comment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeCommentsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeCommentsInsertResponse =
        new operations.YoutubeCommentsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of resources, possibly filtered.
   */
  youtubeCommentsList(
    req: operations.YoutubeCommentsListRequest,
    security: operations.YoutubeCommentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeCommentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeCommentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/youtube/v3/comments";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeCommentsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeCommentsListResponse =
        new operations.YoutubeCommentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.commentListResponse = utils.objectToClass(
              httpRes?.data,
              shared.CommentListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Expresses the caller's opinion that one or more comments should be flagged as spam.
   */
  youtubeCommentsMarkAsSpam(
    req: operations.YoutubeCommentsMarkAsSpamRequest,
    security: operations.YoutubeCommentsMarkAsSpamSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeCommentsMarkAsSpamResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeCommentsMarkAsSpamRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/comments/markAsSpam";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeCommentsMarkAsSpamSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeCommentsMarkAsSpamResponse =
        new operations.YoutubeCommentsMarkAsSpamResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Sets the moderation status of one or more comments.
   */
  youtubeCommentsSetModerationStatus(
    req: operations.YoutubeCommentsSetModerationStatusRequest,
    security: operations.YoutubeCommentsSetModerationStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeCommentsSetModerationStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeCommentsSetModerationStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/comments/setModerationStatus";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeCommentsSetModerationStatusSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeCommentsSetModerationStatusResponse =
        new operations.YoutubeCommentsSetModerationStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing resource.
   */
  youtubeCommentsUpdate(
    req: operations.YoutubeCommentsUpdateRequest,
    security: operations.YoutubeCommentsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeCommentsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeCommentsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/youtube/v3/comments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "comment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeCommentsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeCommentsUpdateResponse =
        new operations.YoutubeCommentsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
      }

      return res;
    });
  }
}
