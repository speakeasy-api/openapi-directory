"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistrictRankingEventPoints:
    
    alliance_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alliance_points') }})
    r"""Points awarded for alliance selection."""  
    award_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('award_points') }})
    r"""Points awarded for event awards."""  
    district_cmp: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('district_cmp') }})
    r"""`true` if this event is a District Championship event."""  
    elim_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elim_points') }})
    r"""Points awarded for elimination match performance."""  
    event_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_key') }})
    r"""TBA Event key for this event."""  
    qual_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qual_points') }})
    r"""Points awarded for qualification match performance."""  
    total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""Total points awarded at this event."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistrictRanking:
    r"""Rank of a team in a district."""
    
    point_total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('point_total') }})
    r"""Total district points for the team."""  
    rank: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank') }})
    r"""Numerical rank of the team, 1 being top rank."""  
    team_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_key') }})
    r"""TBA team key for the team."""  
    event_points: Optional[list[DistrictRankingEventPoints]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_points'), 'exclude': lambda f: f is None }})
    r"""List of events that contributed to the point total for the team."""  
    rookie_bonus: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rookie_bonus'), 'exclude': lambda f: f is None }})
    r"""Any points added to a team as a result of the rookie bonus."""  
    