<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Posts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMResponse
     */
	public function createTopicPostPM(
        \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTopicPostPM200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPM200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * delete a single post
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePostResponse
     */
	public function deletePost(
        \OpenAPI\OpenAPI\Models\Operations\DeletePostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeletePostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve a single post
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPostResponse
     */
	public function getPost(
        \OpenAPI\OpenAPI\Models\Operations\GetPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetPostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetPost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List latest posts across topics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPostsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPostsResponse
     */
	public function listPosts(
        \OpenAPI\OpenAPI\Models\Operations\ListPostsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPostsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPostsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPostsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPosts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPosts200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lock a post from being edited
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LockPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LockPostResponse
     */
	public function lockPost(
        \OpenAPI\OpenAPI\Models\Operations\LockPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LockPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts/{id}/locked.json', \OpenAPI\OpenAPI\Models\Operations\LockPostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LockPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lockPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LockPost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Like a post and other actions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PerformPostActionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PerformPostActionResponse
     */
	public function performPostAction(
        \OpenAPI\OpenAPI\Models\Operations\PerformPostActionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PerformPostActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/post_actions.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PerformPostActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->performPostAction200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PerformPostAction200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List replies to a post
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepliesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRepliesResponse
     */
	public function postReplies(
        \OpenAPI\OpenAPI\Models\Operations\PostRepliesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRepliesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts/{id}/replies.json', \OpenAPI\OpenAPI\Models\Operations\PostRepliesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRepliesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postReplies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\PostReplies200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a single post
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePostResponse
     */
	public function updatePost(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts/{id}.json', \OpenAPI\OpenAPI\Models\Operations\UpdatePostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdatePost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}