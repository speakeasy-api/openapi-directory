/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetSearchVersionNumberReverseGeocodeCrossStreetPositionExtQueryParams {
    /**
     * The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=heading")
    public Float heading;
    public GetSearchVersionNumberReverseGeocodeCrossStreetPositionExtQueryParams withHeading(Float heading) {
        this.heading = heading;
        return this;
    }
    
    /**
     * Language in which search results should be returned. Should be one of &lt;a href="/search-api/search-api-documentation/supported-languages"&gt;supported IETF language tags&lt;/a&gt;, case insensitive.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=language")
    public String language;
    public GetSearchVersionNumberReverseGeocodeCrossStreetPositionExtQueryParams withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * Maximum number of cross-streets to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public GetSearchVersionNumberReverseGeocodeCrossStreetPositionExtQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The maximum distance in meters from the specified position for the reverse geocoder to consider.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=radius")
    public Long radius;
    public GetSearchVersionNumberReverseGeocodeCrossStreetPositionExtQueryParams withRadius(Long radius) {
        this.radius = radius;
        return this;
    }
    
    /**
     * If the "spatialKeys" flag is set, the response will also contain a proprietary geospatial keys for a specified location.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=spatialKeys")
    public Boolean spatialKeys;
    public GetSearchVersionNumberReverseGeocodeCrossStreetPositionExtQueryParams withSpatialKeys(Boolean spatialKeys) {
        this.spatialKeys = spatialKeys;
        return this;
    }
    
}
