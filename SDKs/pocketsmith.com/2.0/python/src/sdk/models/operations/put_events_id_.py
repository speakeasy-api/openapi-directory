"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import event as shared_event
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PutEventsIDRequestBodyBehaviourEnum(str, Enum):
    r"""Whether the update applies only to this event, to all events within the series from this event or to all events within the series."""
    ONE = 'one'
    FORWARD = 'forward'
    ALL = 'all'

class PutEventsIDRequestBodyRepeatTypeEnum(str, Enum):
    r"""The repeat type of the event."""
    ONCE = 'once'
    DAILY = 'daily'
    WEEKLY = 'weekly'
    FORTNIGHTLY = 'fortnightly'
    MONTHLY = 'monthly'
    YEARLY = 'yearly'
    EACH_WEEKDAY = 'each weekday'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutEventsIDRequestBody:
    
    behaviour: PutEventsIDRequestBodyBehaviourEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('behaviour') }})
    r"""Whether the update applies only to this event, to all events within the series from this event or to all events within the series."""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the event. A positive amount is a credit, and a negative amount is a debit."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""A note for the event."""  
    repeat_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeat_interval'), 'exclude': lambda f: f is None }})
    r"""The repeat interval of the event."""  
    repeat_type: Optional[PutEventsIDRequestBodyRepeatTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeat_type'), 'exclude': lambda f: f is None }})
    r"""The repeat type of the event."""  
    

@dataclasses.dataclass
class PutEventsIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the event."""  
    request_body: Optional[PutEventsIDRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PutEventsIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Bad Request"""  
    event: Optional[shared_event.Event] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    