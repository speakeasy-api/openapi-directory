// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type MeteringPostRequestBody struct {
	// Meter Reading (prefered in Wh)
	One80 *int64 `json:"1.8.0,omitempty"`
	// Stromkonto account (address) associated with this metering.
	Account *string `json:"account,omitempty"`
	// Alias for 1.8.0
	Energy *int64 `json:"energy,omitempty"`
	// Some private password you might choose on first update. However you need to use the same secret on every further posts.
	Secret *string `json:"secret,omitempty"`
	// Alias for 1.8.0
	Value *int64 `json:"value,omitempty"`
	// Zipcode (Postleitzahl) of metered location
	Zip *string `json:"zip,omitempty"`
}

// MeteringPost200ApplicationJSON - Success
type MeteringPost200ApplicationJSON struct {
	// Reading as provided as input in Wh
	One80 *int64 `json:"1.8.0,omitempty"`
	// Green energy calculated using Green Power Index (GrünstromIndex) in Wh
	One81 *int64 `json:"1.8.1,omitempty"`
	// Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
	One82 *int64 `json:"1.8.2,omitempty"`
	// Time this reading got imported into consensus (e.q. signed timestamp).
	ProcessingTime *int64 `json:"_processingTime,omitempty"`
	// Stromkonto/Metering address allocated (this is not the MELOID!)
	Account *string `json:"account,omitempty"`
	// CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
	Co2GOekostrom *int64 `json:"co2_g_oekostrom,omitempty"`
	// CO2 Emission of metered energy in a standard mix
	Co2GStandard *int64 `json:"co2_g_standard,omitempty"`
	// API Consensus time this reading was fully received
	TimeStamp *int64 `json:"timeStamp,omitempty"`
}

type MeteringPostResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	MeteringPost200ApplicationJSONObject *MeteringPost200ApplicationJSON
}
