// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConfigRoomRequestClassificationEnum - Classification ID:
//
// * `1` - public
//
// * `2` - internal
//
// * `3` - confidential
//
// * `4` - strictly confidential
//
// # Provided (or default) classification is taken from room
//
// when file gets uploaded without any classification.
type ConfigRoomRequestClassificationEnum string

const (
	ConfigRoomRequestClassificationEnumOne   ConfigRoomRequestClassificationEnum = "1"
	ConfigRoomRequestClassificationEnumTwo   ConfigRoomRequestClassificationEnum = "2"
	ConfigRoomRequestClassificationEnumThree ConfigRoomRequestClassificationEnum = "3"
	ConfigRoomRequestClassificationEnumFour  ConfigRoomRequestClassificationEnum = "4"
)

func (e *ConfigRoomRequestClassificationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = ConfigRoomRequestClassificationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigRoomRequestClassificationEnum: %s", s)
	}
}

// ConfigRoomRequestNewGroupMemberAcceptanceEnum - Behaviour when new users are added to the group:
//
// * `autoallow`
//
// * `pending`
//
// Only relevant if `adminGroupIds` has items.
type ConfigRoomRequestNewGroupMemberAcceptanceEnum string

const (
	ConfigRoomRequestNewGroupMemberAcceptanceEnumAutoallow ConfigRoomRequestNewGroupMemberAcceptanceEnum = "autoallow"
	ConfigRoomRequestNewGroupMemberAcceptanceEnumPending   ConfigRoomRequestNewGroupMemberAcceptanceEnum = "pending"
)

func (e *ConfigRoomRequestNewGroupMemberAcceptanceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "autoallow":
		fallthrough
	case "pending":
		*e = ConfigRoomRequestNewGroupMemberAcceptanceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigRoomRequestNewGroupMemberAcceptanceEnum: %s", s)
	}
}

// ConfigRoomRequest - Request model for configuring a room
type ConfigRoomRequest struct {
	// List of group ids
	//
	// A room requires at least one admin (user or group)
	AdminGroupIds []int64 `json:"adminGroupIds,omitempty"`
	// List of user ids
	//
	// A room requires at least one admin (user or group)
	AdminIds []int64 `json:"adminIds,omitempty"`
	// Classification ID:
	//
	// * `1` - public
	//
	// * `2` - internal
	//
	// * `3` - confidential
	//
	// * `4` - strictly confidential
	//
	//
	//
	// Provided (or default) classification is taken from room
	//
	// when file gets uploaded without any classification.
	Classification *ConfigRoomRequestClassificationEnum `json:"classification,omitempty"`
	// Is activities log active (for rooms only)
	HasActivitiesLog *bool `json:"hasActivitiesLog,omitempty"`
	// Inherit permissions from parent room
	//
	// (default: `false` if `parentId` is `0`; otherwise: `true`)
	InheritPermissions *bool `json:"inheritPermissions,omitempty"`
	// Behaviour when new users are added to the group:
	//
	// * `autoallow`
	//
	// * `pending`
	//
	//
	//
	// Only relevant if `adminGroupIds` has items.
	NewGroupMemberAcceptance *ConfigRoomRequestNewGroupMemberAcceptanceEnum `json:"newGroupMemberAcceptance,omitempty"`
	// Retention period for deleted nodes in days
	RecycleBinRetentionPeriod *int `json:"recycleBinRetentionPeriod,omitempty"`
	// Take over existing permissions
	TakeOverPermissions *bool `json:"takeOverPermissions,omitempty"`
}
