// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkCellularGatewayDhcpRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum - DHCP Lease time for all MG in the network.
type GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum string

const (
	GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnumOneDay        GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum = "1 day"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnumOneHour       GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum = "1 hour"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnumOneWeek       GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum = "1 week"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnumTwelveHours   GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum = "12 hours"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnumThirtyMinutes GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum = "30 minutes"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnumFourHours     GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum = "4 hours"
)

func (e *GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1 day":
		fallthrough
	case "1 hour":
		fallthrough
	case "1 week":
		fallthrough
	case "12 hours":
		fallthrough
	case "30 minutes":
		fallthrough
	case "4 hours":
		*e = GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum: %s", s)
	}
}

// GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum - DNS name servers mode for all MG in the network.
type GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum string

const (
	GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnumCustom      GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum = "custom"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnumGoogleDNS   GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum = "google_dns"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnumOpendns     GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum = "opendns"
	GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnumUpstreamDNS GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum = "upstream_dns"
)

func (e *GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom":
		fallthrough
	case "google_dns":
		fallthrough
	case "opendns":
		fallthrough
	case "upstream_dns":
		*e = GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum: %s", s)
	}
}

// GetNetworkCellularGatewayDhcp200ApplicationJSON - Successful operation
type GetNetworkCellularGatewayDhcp200ApplicationJSON struct {
	// DHCP Lease time for all MG in the network.
	DhcpLeaseTime *GetNetworkCellularGatewayDhcp200ApplicationJSONDhcpLeaseTimeEnum `json:"dhcpLeaseTime,omitempty"`
	// List of fixed IPs representing the the DNS Name servers when the mode is 'custom'.
	DNSCustomNameservers []string `json:"dnsCustomNameservers,omitempty"`
	// DNS name servers mode for all MG in the network.
	DNSNameservers *GetNetworkCellularGatewayDhcp200ApplicationJSONDNSNameserversEnum `json:"dnsNameservers,omitempty"`
}

type GetNetworkCellularGatewayDhcpResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkCellularGatewayDhcp200ApplicationJSONObject *GetNetworkCellularGatewayDhcp200ApplicationJSON
}
