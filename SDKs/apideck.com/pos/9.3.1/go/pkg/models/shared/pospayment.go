// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PosPaymentCardDetailsInput struct {
	// A card's non-confidential details.
	Card *PaymentCardInput `json:"card,omitempty"`
}

// PosPaymentCashDetails - Cash details for this payment
type PosPaymentCashDetails struct {
	// The amount of cash given by the customer.
	Amount interface{} `json:"amount,omitempty"`
	// The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
	ChargeBackAmount interface{} `json:"charge_back_amount,omitempty"`
}

// PosPaymentExternalDetailsTypeEnum - The type of external payment the seller received. It can be one of the following:
// - CHECK - Paid using a physical check.
// - BANK_TRANSFER - Paid using external bank transfer.
// - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
// - CRYPTO - Paid using a crypto currency.
// - SQUARE_CASH - Paid using Square Cash App.
// - SOCIAL - Paid using peer-to-peer payment applications.
// - EXTERNAL - A third-party application gathered this payment outside of Square.
// - EMONEY - Paid using an E-money provider.
// - CARD - A credit or debit card that Square does not support.
// - STORED_BALANCE - Use for house accounts, store credit, and so forth.
// - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
// - OTHER - A type not listed here.
type PosPaymentExternalDetailsTypeEnum string

const (
	PosPaymentExternalDetailsTypeEnumCheck         PosPaymentExternalDetailsTypeEnum = "check"
	PosPaymentExternalDetailsTypeEnumBankTransfer  PosPaymentExternalDetailsTypeEnum = "bank_transfer"
	PosPaymentExternalDetailsTypeEnumOtherGiftCard PosPaymentExternalDetailsTypeEnum = "other_gift_card"
	PosPaymentExternalDetailsTypeEnumCrypto        PosPaymentExternalDetailsTypeEnum = "crypto"
	PosPaymentExternalDetailsTypeEnumSquareCash    PosPaymentExternalDetailsTypeEnum = "square_cash"
	PosPaymentExternalDetailsTypeEnumSocial        PosPaymentExternalDetailsTypeEnum = "social"
	PosPaymentExternalDetailsTypeEnumExternal      PosPaymentExternalDetailsTypeEnum = "external"
	PosPaymentExternalDetailsTypeEnumEmoney        PosPaymentExternalDetailsTypeEnum = "emoney"
	PosPaymentExternalDetailsTypeEnumCard          PosPaymentExternalDetailsTypeEnum = "card"
	PosPaymentExternalDetailsTypeEnumStoredBalance PosPaymentExternalDetailsTypeEnum = "stored_balance"
	PosPaymentExternalDetailsTypeEnumFoodVoucher   PosPaymentExternalDetailsTypeEnum = "food_voucher"
	PosPaymentExternalDetailsTypeEnumOther         PosPaymentExternalDetailsTypeEnum = "other"
)

func (e PosPaymentExternalDetailsTypeEnum) ToPointer() *PosPaymentExternalDetailsTypeEnum {
	return &e
}

func (e *PosPaymentExternalDetailsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "check":
		fallthrough
	case "bank_transfer":
		fallthrough
	case "other_gift_card":
		fallthrough
	case "crypto":
		fallthrough
	case "square_cash":
		fallthrough
	case "social":
		fallthrough
	case "external":
		fallthrough
	case "emoney":
		fallthrough
	case "card":
		fallthrough
	case "stored_balance":
		fallthrough
	case "food_voucher":
		fallthrough
	case "other":
		*e = PosPaymentExternalDetailsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PosPaymentExternalDetailsTypeEnum: %v", v)
	}
}

// PosPaymentExternalDetails - Details about an external payment.
type PosPaymentExternalDetails struct {
	// A description of the external payment source. For example,
	// "Food Delivery Service".
	Source string `json:"source"`
	// The fees paid to the source. The amount minus this field is the net amount seller receives.
	SourceFeeAmount *float64 `json:"source_fee_amount,omitempty"`
	// An ID to associate the payment to its originating source.
	SourceID *string `json:"source_id,omitempty"`
	// The type of external payment the seller received. It can be one of the following:
	// - CHECK - Paid using a physical check.
	// - BANK_TRANSFER - Paid using external bank transfer.
	// - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
	// - CRYPTO - Paid using a crypto currency.
	// - SQUARE_CASH - Paid using Square Cash App.
	// - SOCIAL - Paid using peer-to-peer payment applications.
	// - EXTERNAL - A third-party application gathered this payment outside of Square.
	// - EMONEY - Paid using an E-money provider.
	// - CARD - A credit or debit card that Square does not support.
	// - STORED_BALANCE - Use for house accounts, store credit, and so forth.
	// - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
	// - OTHER - A type not listed here.
	Type PosPaymentExternalDetailsTypeEnum `json:"type"`
}

type PosPaymentProcessingFeesTypeEnum string

const (
	PosPaymentProcessingFeesTypeEnumInitial    PosPaymentProcessingFeesTypeEnum = "initial"
	PosPaymentProcessingFeesTypeEnumAdjustment PosPaymentProcessingFeesTypeEnum = "adjustment"
)

func (e PosPaymentProcessingFeesTypeEnum) ToPointer() *PosPaymentProcessingFeesTypeEnum {
	return &e
}

func (e *PosPaymentProcessingFeesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initial":
		fallthrough
	case "adjustment":
		*e = PosPaymentProcessingFeesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PosPaymentProcessingFeesTypeEnum: %v", v)
	}
}

type PosPaymentProcessingFees struct {
	Amount         *float64                          `json:"amount,omitempty"`
	EffectiveAt    *time.Time                        `json:"effective_at,omitempty"`
	ProcessingType *PosPaymentProcessingFeesTypeEnum `json:"processing_type,omitempty"`
}

// PosPaymentSourceEnum - Source of this payment.
type PosPaymentSourceEnum string

const (
	PosPaymentSourceEnumCard        PosPaymentSourceEnum = "card"
	PosPaymentSourceEnumBankAccount PosPaymentSourceEnum = "bank_account"
	PosPaymentSourceEnumWallet      PosPaymentSourceEnum = "wallet"
	PosPaymentSourceEnumBnpl        PosPaymentSourceEnum = "bnpl"
	PosPaymentSourceEnumCash        PosPaymentSourceEnum = "cash"
	PosPaymentSourceEnumExternal    PosPaymentSourceEnum = "external"
	PosPaymentSourceEnumOther       PosPaymentSourceEnum = "other"
)

func (e PosPaymentSourceEnum) ToPointer() *PosPaymentSourceEnum {
	return &e
}

func (e *PosPaymentSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card":
		fallthrough
	case "bank_account":
		fallthrough
	case "wallet":
		fallthrough
	case "bnpl":
		fallthrough
	case "cash":
		fallthrough
	case "external":
		fallthrough
	case "other":
		*e = PosPaymentSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PosPaymentSourceEnum: %v", v)
	}
}

// PosPaymentStatusEnum - Status of this payment.
type PosPaymentStatusEnum string

const (
	PosPaymentStatusEnumApproved  PosPaymentStatusEnum = "approved"
	PosPaymentStatusEnumPending   PosPaymentStatusEnum = "pending"
	PosPaymentStatusEnumCompleted PosPaymentStatusEnum = "completed"
	PosPaymentStatusEnumCanceled  PosPaymentStatusEnum = "canceled"
	PosPaymentStatusEnumFailed    PosPaymentStatusEnum = "failed"
	PosPaymentStatusEnumOther     PosPaymentStatusEnum = "other"
)

func (e PosPaymentStatusEnum) ToPointer() *PosPaymentStatusEnum {
	return &e
}

func (e *PosPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "other":
		*e = PosPaymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PosPaymentStatusEnum: %v", v)
	}
}

// PosPaymentWalletDetailsStatusEnum - The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
type PosPaymentWalletDetailsStatusEnum string

const (
	PosPaymentWalletDetailsStatusEnumAuthorized PosPaymentWalletDetailsStatusEnum = "authorized"
	PosPaymentWalletDetailsStatusEnumCaptured   PosPaymentWalletDetailsStatusEnum = "captured"
	PosPaymentWalletDetailsStatusEnumVoided     PosPaymentWalletDetailsStatusEnum = "voided"
	PosPaymentWalletDetailsStatusEnumFailed     PosPaymentWalletDetailsStatusEnum = "failed"
	PosPaymentWalletDetailsStatusEnumOther      PosPaymentWalletDetailsStatusEnum = "other"
)

func (e PosPaymentWalletDetailsStatusEnum) ToPointer() *PosPaymentWalletDetailsStatusEnum {
	return &e
}

func (e *PosPaymentWalletDetailsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorized":
		fallthrough
	case "captured":
		fallthrough
	case "voided":
		fallthrough
	case "failed":
		fallthrough
	case "other":
		*e = PosPaymentWalletDetailsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PosPaymentWalletDetailsStatusEnum: %v", v)
	}
}

// PosPaymentWalletDetails - Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
type PosPaymentWalletDetails struct {
	// The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
	Status *PosPaymentWalletDetailsStatusEnum `json:"status,omitempty"`
}

type PosPaymentInput struct {
	Amount float64 `json:"amount"`
	// The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
	AppFee *float64 `json:"app_fee,omitempty"`
	// The initial amount of money approved for this payment.
	Approved *float64 `json:"approved,omitempty"`
	// Card details for this payment. This field is currently not available. Reach out to our team for more info.
	BankAccount *PosBankAccount             `json:"bank_account,omitempty"`
	CardDetails *PosPaymentCardDetailsInput `json:"card_details,omitempty"`
	// Cash details for this payment
	Cash                 *PosPaymentCashDetails `json:"cash,omitempty"`
	ChangeBackCashAmount *float64               `json:"change_back_cash_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency   CurrencyEnum `json:"currency"`
	CustomerID string       `json:"customer_id"`
	DeviceID   *string      `json:"device_id,omitempty"`
	EmployeeID *string      `json:"employee_id,omitempty"`
	// Details about an external payment.
	ExternalDetails   *PosPaymentExternalDetails `json:"external_details,omitempty"`
	ExternalPaymentID *string                    `json:"external_payment_id,omitempty"`
	// A value you specify that uniquely identifies this request among requests you have sent.
	IdempotencyKey *string                    `json:"idempotency_key,omitempty"`
	LocationID     *string                    `json:"location_id,omitempty"`
	MerchantID     *string                    `json:"merchant_id,omitempty"`
	OrderID        string                     `json:"order_id"`
	ProcessingFees []PosPaymentProcessingFees `json:"processing_fees,omitempty"`
	// The initial amount of money approved for this payment.
	Refunded *float64 `json:"refunded,omitempty"`
	// Optional service charges or gratuity tip applied to the order.
	ServiceCharges []ServiceChargeInput `json:"service_charges,omitempty"`
	// Source of this payment.
	Source *PosPaymentSourceEnum `json:"source,omitempty"`
	// The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
	SourceID string `json:"source_id"`
	// Status of this payment.
	Status   *PosPaymentStatusEnum `json:"status,omitempty"`
	Tax      *float64              `json:"tax,omitempty"`
	TenderID string                `json:"tender_id"`
	Tip      *float64              `json:"tip,omitempty"`
	Total    *float64              `json:"total,omitempty"`
	// Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
	Wallet *PosPaymentWalletDetails `json:"wallet,omitempty"`
}

type PosPaymentCardDetails struct {
	// A card's non-confidential details.
	Card *PaymentCard `json:"card,omitempty"`
}

type PosPayment struct {
	Amount float64 `json:"amount"`
	// The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
	AppFee *float64 `json:"app_fee,omitempty"`
	// The initial amount of money approved for this payment.
	Approved *float64 `json:"approved,omitempty"`
	// Card details for this payment. This field is currently not available. Reach out to our team for more info.
	BankAccount *PosBankAccount        `json:"bank_account,omitempty"`
	CardDetails *PosPaymentCardDetails `json:"card_details,omitempty"`
	// Cash details for this payment
	Cash                 *PosPaymentCashDetails `json:"cash,omitempty"`
	ChangeBackCashAmount *float64               `json:"change_back_cash_amount,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency   CurrencyEnum `json:"currency"`
	CustomerID string       `json:"customer_id"`
	DeviceID   *string      `json:"device_id,omitempty"`
	EmployeeID *string      `json:"employee_id,omitempty"`
	// Details about an external payment.
	ExternalDetails   *PosPaymentExternalDetails `json:"external_details,omitempty"`
	ExternalPaymentID *string                    `json:"external_payment_id,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// A value you specify that uniquely identifies this request among requests you have sent.
	IdempotencyKey *string                    `json:"idempotency_key,omitempty"`
	LocationID     *string                    `json:"location_id,omitempty"`
	MerchantID     *string                    `json:"merchant_id,omitempty"`
	OrderID        string                     `json:"order_id"`
	ProcessingFees []PosPaymentProcessingFees `json:"processing_fees,omitempty"`
	// The initial amount of money approved for this payment.
	Refunded *float64 `json:"refunded,omitempty"`
	// Optional service charges or gratuity tip applied to the order.
	ServiceCharges []ServiceCharge `json:"service_charges,omitempty"`
	// Source of this payment.
	Source *PosPaymentSourceEnum `json:"source,omitempty"`
	// The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
	SourceID string `json:"source_id"`
	// Status of this payment.
	Status   *PosPaymentStatusEnum `json:"status,omitempty"`
	Tax      *float64              `json:"tax,omitempty"`
	TenderID string                `json:"tender_id"`
	Tip      *float64              `json:"tip,omitempty"`
	Total    *float64              `json:"total,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
	Wallet *PosPaymentWalletDetails `json:"wallet,omitempty"`
}
