"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetaccountconfigRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    account_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'accountName', 'style': 'form', 'explode': True }})
    r"""Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Describes the type of the content being sent."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getaccountconfig200ApplicationJSON:
    r"""OK"""
    
    matchers: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Matchers'), 'exclude': lambda f: f is None }})
    r"""All Matchers configured on the marketplace, and their respective details."""  
    match_flux: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MatchFlux'), 'exclude': lambda f: f is None }})
    r"""This field determines the type of approval configuration applied to SKUs received from a seller."""  
    rules: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rules'), 'exclude': lambda f: f is None }})
    r"""Items and products."""  
    score: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Score'), 'exclude': lambda f: f is None }})
    r"""Matcher scores for approving and rejecting SKUs received from sellers."""  
    specifications_mapping: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpecificationsMapping'), 'exclude': lambda f: f is None }})
    r"""Mapping of product and SKU specifications, per seller."""  
    

@dataclasses.dataclass
class GetaccountconfigResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    getaccountconfig_200_application_json_object: Optional[Getaccountconfig200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    