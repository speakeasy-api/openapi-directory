// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AccessTokenTypeEnum - The type of the token.
type AccessTokenTypeEnum string

const (
	AccessTokenTypeEnumUserAccount AccessTokenTypeEnum = "UserAccount"
	AccessTokenTypeEnumUserProfile AccessTokenTypeEnum = "UserProfile"
)

func (e AccessTokenTypeEnum) ToPointer() *AccessTokenTypeEnum {
	return &e
}

func (e *AccessTokenTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UserAccount":
		fallthrough
	case "UserProfile":
		*e = AccessTokenTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessTokenTypeEnum: %v", v)
	}
}

// AccessToken - OK
type AccessToken struct {
	// When a `UserAccount` token is issued during a single-sign-on flow
	// a user may have been automatically registered if they didn't
	// have an account already. If this occurs then `accountCreated`
	// will be `true`.
	//
	AccountCreated *bool `json:"accountCreated,omitempty"`
	// The timestamp this token expires.
	ExpirationDate time.Time `json:"expirationDate"`
	// True if this token can be refreshed, false if not.
	Refreshable bool `json:"refreshable"`
	// The type of the token.
	Type AccessTokenTypeEnum `json:"type"`
	// The token value used for authenticated requests.
	Value string `json:"value"`
}
