// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type UpdateCollectionRequestBodyCollectionInfo struct {
	PostmanID   *string `json:"_postman_id,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Schema      *string `json:"schema,omitempty"`
}

type UpdateCollectionRequestBodyCollectionItemItemRequestBody struct {
	Mode *string `json:"mode,omitempty"`
	Raw  *string `json:"raw,omitempty"`
}

type UpdateCollectionRequestBodyCollectionItemItemRequestHeader struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

type UpdateCollectionRequestBodyCollectionItemItemRequest struct {
	Body        *UpdateCollectionRequestBodyCollectionItemItemRequestBody    `json:"body,omitempty"`
	Description *string                                                      `json:"description,omitempty"`
	Header      []UpdateCollectionRequestBodyCollectionItemItemRequestHeader `json:"header,omitempty"`
	Method      *string                                                      `json:"method,omitempty"`
	URL         *string                                                      `json:"url,omitempty"`
}

type UpdateCollectionRequestBodyCollectionItemItem struct {
	Name    *string                                               `json:"name,omitempty"`
	Request *UpdateCollectionRequestBodyCollectionItemItemRequest `json:"request,omitempty"`
}

type UpdateCollectionRequestBodyCollectionItem struct {
	Item []UpdateCollectionRequestBodyCollectionItemItem `json:"item,omitempty"`
	Name *string                                         `json:"name,omitempty"`
}

type UpdateCollectionRequestBodyCollection struct {
	Info *UpdateCollectionRequestBodyCollectionInfo  `json:"info,omitempty"`
	Item []UpdateCollectionRequestBodyCollectionItem `json:"item,omitempty"`
}

type UpdateCollectionRequestBody struct {
	Collection *UpdateCollectionRequestBodyCollection `json:"collection,omitempty"`
}

type UpdateCollectionRequest struct {
	RequestBody   *UpdateCollectionRequestBody `request:"mediaType=application/json"`
	CollectionUID string                       `pathParam:"style=simple,explode=false,name=collection_uid"`
}

type UpdateCollection404ApplicationJSONErrorDetails struct {
	ID   *string `json:"id,omitempty"`
	Item *string `json:"item,omitempty"`
}

type UpdateCollection404ApplicationJSONError struct {
	Details *UpdateCollection404ApplicationJSONErrorDetails `json:"details,omitempty"`
	Message *string                                         `json:"message,omitempty"`
	Name    *string                                         `json:"name,omitempty"`
}

// UpdateCollection404ApplicationJSON - Collection Not Found
type UpdateCollection404ApplicationJSON struct {
	Error *UpdateCollection404ApplicationJSONError `json:"error,omitempty"`
}

type UpdateCollection403ApplicationJSONError struct {
	Message *string `json:"message,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UpdateCollection403ApplicationJSON - Not Enough Permissions
type UpdateCollection403ApplicationJSON struct {
	Error *UpdateCollection403ApplicationJSONError `json:"error,omitempty"`
}

type UpdateCollection400ApplicationJSONError struct {
	Message *string `json:"message,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UpdateCollection400ApplicationJSON - Collection ID Mismatch
type UpdateCollection400ApplicationJSON struct {
	Error *UpdateCollection400ApplicationJSONError `json:"error,omitempty"`
}

type UpdateCollection200ApplicationJSONCollection struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	UID  *string `json:"uid,omitempty"`
}

// UpdateCollection200ApplicationJSON - Collection Updated
type UpdateCollection200ApplicationJSON struct {
	Collection *UpdateCollection200ApplicationJSONCollection `json:"collection,omitempty"`
}

type UpdateCollectionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Collection Updated
	UpdateCollection200ApplicationJSONObject *UpdateCollection200ApplicationJSON
	// Collection ID Mismatch
	UpdateCollection400ApplicationJSONObject *UpdateCollection400ApplicationJSON
	// Not Enough Permissions
	UpdateCollection403ApplicationJSONObject *UpdateCollection403ApplicationJSON
	// Collection Not Found
	UpdateCollection404ApplicationJSONObject *UpdateCollection404ApplicationJSON
}
