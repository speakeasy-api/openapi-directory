"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkFirmwareUpgradesRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsApplianceNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCamera:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCameraNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGatewayNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensor:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensorNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitchNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions:
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion:
    r"""Details of the current version on the device"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion:
    r"""Details of the version the device upgraded from"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion:
    r"""Details of the version the device upgraded to"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade:
    r"""Details of the last firmware upgrade on the device"""
    
    from_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeFromVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded from"""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the last successful firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device upgraded to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to if it exists"""
    
    firmware: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})
    r"""Name of the firmware version"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Firmware version identifier"""  
    release_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Release date of the firmware version"""  
    release_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseType'), 'exclude': lambda f: f is None }})
    r"""Release type of the firmware version"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade:
    r"""Details of the next firmware upgrade on the device"""
    
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the next scheduled firmware upgrade"""  
    to_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to if it exists"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProductsWireless:
    r"""The network device to be updated"""
    
    available_versions: Optional[list[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessAvailableVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableVersions'), 'exclude': lambda f: f is None }})
    r"""Firmware versions available for upgrade"""  
    current_version: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessCurrentVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the current version on the device"""  
    last_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessLastUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the last firmware upgrade on the device"""  
    next_upgrade: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWirelessNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade on the device"""  
    participate_in_next_beta_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participateInNextBetaRelease'), 'exclude': lambda f: f is None }})
    r"""Whether or not the network wants beta firmware"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONProducts:
    r"""The network devices to be updated"""
    
    appliance: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsAppliance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliance'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    camera: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCamera] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('camera'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    cellular_gateway: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsCellularGateway] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellularGateway'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    sensor: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSensor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensor'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    switch: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsSwitch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switch'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    wireless: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProductsWireless] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wireless'), 'exclude': lambda f: f is None }})
    r"""The network device to be updated"""  
    
class GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum(str, Enum):
    r"""Day of the week"""
    FRI = 'fri'
    FRIDAY = 'friday'
    MON = 'mon'
    MONDAY = 'monday'
    SAT = 'sat'
    SATURDAY = 'saturday'
    SUN = 'sun'
    SUNDAY = 'sunday'
    THU = 'thu'
    THURSDAY = 'thursday'
    TUE = 'tue'
    TUESDAY = 'tuesday'
    WED = 'wed'
    WEDNESDAY = 'wednesday'

class GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum(str, Enum):
    r"""Hour of the day"""
    ZERO_00 = '0:00'
    TEN_00 = '10:00'
    ELEVEN_00 = '11:00'
    TWELVE_00 = '12:00'
    THIRTEEN_00 = '13:00'
    FOURTEEN_00 = '14:00'
    FIFTEEN_00 = '15:00'
    SIXTEEN_00 = '16:00'
    SEVENTEEN_00 = '17:00'
    EIGHTEEN_00 = '18:00'
    NINETEEN_00 = '19:00'
    ONE_00 = '1:00'
    TWENTY_00 = '20:00'
    TWENTY_ONE_00 = '21:00'
    TWENTY_TWO_00 = '22:00'
    TWENTY_THREE_00 = '23:00'
    TWO_00 = '2:00'
    THREE_00 = '3:00'
    FOUR_00 = '4:00'
    FIVE_00 = '5:00'
    SIX_00 = '6:00'
    SEVEN_00 = '7:00'
    EIGHT_00 = '8:00'
    NINE_00 = '9:00'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow:
    r"""Upgrade window for devices in network"""
    
    day_of_week: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek'), 'exclude': lambda f: f is None }})
    r"""Day of the week"""  
    hour_of_day: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindowHourOfDayEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hourOfDay'), 'exclude': lambda f: f is None }})
    r"""Hour of the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkFirmwareUpgrades200ApplicationJSON:
    r"""Successful operation"""
    
    products: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONProducts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""The network devices to be updated"""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The timezone for the network"""  
    upgrade_window: Optional[GetNetworkFirmwareUpgrades200ApplicationJSONUpgradeWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeWindow'), 'exclude': lambda f: f is None }})
    r"""Upgrade window for devices in network"""  
    

@dataclasses.dataclass
class GetNetworkFirmwareUpgradesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_firmware_upgrades_200_application_json_object: Optional[GetNetworkFirmwareUpgrades200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    