<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Returnaddress 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Batches multiple return address related calls in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchResponse
     */
	public function contentReturnaddressCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/returnaddress/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "returnaddressCustomBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->returnaddressCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReturnaddressCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a return address for the given Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteResponse
     */
	public function contentReturnaddressDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/returnaddress/{returnAddressId}', \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a return address of the Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetResponse
     */
	public function contentReturnaddressGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/returnaddress/{returnAddressId}', \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->returnAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReturnAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a return address for the Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertResponse
     */
	public function contentReturnaddressInsert(
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/returnaddress', \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "returnAddress", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->returnAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReturnAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the return addresses of the Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListResponse
     */
	public function contentReturnaddressList(
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/returnaddress', \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentReturnaddressListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->returnaddressListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReturnaddressListResponse', 'json');
            }
        }

        return $response;
    }
}