/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateFactorServerList = ["https://verify.twilio.com"] as const;

export class UpdateFactorSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class UpdateFactorUpdateFactorRequest extends SpeakeasyBase {
  /**
   * The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
   */
  @SpeakeasyMetadata({ data: "form, name=AuthPayload" })
  authPayload?: string;

  @SpeakeasyMetadata({ data: "form, name=Config.Alg" })
  configAlg?: shared.FactorEnumTotpAlgorithmsEnum;

  /**
   * Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive
   */
  @SpeakeasyMetadata({ data: "form, name=Config.CodeLength" })
  configCodeLength?: number;

  /**
   * The transport technology used to generate the Notification Token. Can be `apn`, `fcm` or `none`.
   *
   * @remarks
   *
   * Required when `factor_type` is `push`.
   */
  @SpeakeasyMetadata({ data: "form, name=Config.NotificationPlatform" })
  configNotificationPlatform?: string;

  /**
   * For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Required when `factor_type` is `push`. If specified, this value must be between 32 and 255 characters long.
   */
  @SpeakeasyMetadata({ data: "form, name=Config.NotificationToken" })
  configNotificationToken?: string;

  /**
   * The Verify Push SDK version used to configure the factor
   */
  @SpeakeasyMetadata({ data: "form, name=Config.SdkVersion" })
  configSDKVersion?: string;

  /**
   * The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive
   */
  @SpeakeasyMetadata({ data: "form, name=Config.Skew" })
  configSkew?: number;

  /**
   * Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive
   */
  @SpeakeasyMetadata({ data: "form, name=Config.TimeStep" })
  configTimeStep?: number;

  /**
   * The new friendly name of this Factor. It can be up to 64 characters.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName?: string;
}

export class UpdateFactorRequest extends SpeakeasyBase {
  /**
   * Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=Identity",
  })
  identity: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateFactorUpdateFactorRequest;

  /**
   * The unique SID identifier of the Service.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ServiceSid",
  })
  serviceSid: string;

  /**
   * A 34 character string that uniquely identifies this Factor.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Sid" })
  sid: string;
}

export class UpdateFactorResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  verifyV2ServiceEntityFactor?: shared.VerifyV2ServiceEntityFactor;
}
