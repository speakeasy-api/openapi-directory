"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceAttributes:
    
    activated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activated_at') }})
    r"""Date at which the reward program was activated for the patient. (Must be between the start_at and end_at dates for the reward program)"""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""If true, the reward program is currently active."""  
    allocated_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_count'), 'exclude': lambda f: f is None }})
    r"""Number of rewards allocated. (Read-only property)"""  
    budget_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget_unit'), 'exclude': lambda f: f is None }})
    r"""Unit of the reward program budget. (Read-only property)"""  
    deactivated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deactivated_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the reward program was deactivated. (Must be after the activated_at date)"""  
    earned_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_count'), 'exclude': lambda f: f is None }})
    r"""Number of reward earnings. (Read-only property)"""  
    expires_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the reward program activation expires. (Read-only property set by adding the days_active from the reward program to the activated_at date)"""  
    fulfill_as_earned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfill_as_earned'), 'exclude': lambda f: f is None }})
    r"""If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated. (Read-only property denormalized from the reward program)"""  
    total_allocated_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_allocated_value'), 'exclude': lambda f: f is None }})
    r"""Total value of reward allocated. (Read-only property)"""  
    total_earned_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_earned_value'), 'exclude': lambda f: f is None }})
    r"""Total value of reward earnings. (Read-only property)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceRelationshipsPatientData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceRelationshipsPatient:
    
    data: Optional[RewardProgramActivationResourceRelationshipsPatientData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceRelationshipsRewardProgramData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceRelationshipsRewardProgram:
    
    data: Optional[RewardProgramActivationResourceRelationshipsRewardProgramData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceRelationships:
    
    patient: RewardProgramActivationResourceRelationshipsPatient = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    reward_program: RewardProgramActivationResourceRelationshipsRewardProgram = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward_program') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResource:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardProgramActivationResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardProgramActivationResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceAttributesInput:
    
    activated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activated_at') }})
    r"""Date at which the reward program was activated for the patient. (Must be between the start_at and end_at dates for the reward program)"""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""If true, the reward program is currently active."""  
    deactivated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deactivated_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the reward program was deactivated. (Must be after the activated_at date)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardProgramActivationResourceInput:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardProgramActivationResourceAttributesInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardProgramActivationResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    