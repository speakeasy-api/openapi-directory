/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
 */
export enum GetOrganizationLicensesStateEnum {
  Active = "active",
  Expired = "expired",
  Expiring = "expiring",
  RecentlyQueued = "recentlyQueued",
  Unused = "unused",
  UnusedActive = "unusedActive",
}

export class GetOrganizationLicensesRequest extends SpeakeasyBase {
  /**
   * Filter the licenses to those assigned to a particular device
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=deviceSerial",
  })
  deviceSerial?: string;

  /**
   * A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endingBefore",
  })
  endingBefore?: string;

  /**
   * Filter the licenses to those assigned in a particular network
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=networkId",
  })
  networkId?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;

  /**
   * The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=perPage",
  })
  perPage?: number;

  /**
   * A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startingAfter",
  })
  startingAfter?: string;

  /**
   * Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: GetOrganizationLicensesStateEnum;
}

export class GetOrganizationLicensesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getOrganizationLicenses200ApplicationJSONObjects?: Record<string, any>[];
}
