/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MeasurementPartnerWrappingData - Placement tag wrapping
 */
public class MeasurementPartnerWrappingData {
    /**
     * Placement wrapping status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkStatus")
    public MeasurementPartnerWrappingDataLinkStatusEnum linkStatus;
    public MeasurementPartnerWrappingData withLinkStatus(MeasurementPartnerWrappingDataLinkStatusEnum linkStatus) {
        this.linkStatus = linkStatus;
        return this;
    }
    
    /**
     * Measurement partner used for wrapping the placement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measurementPartner")
    public MeasurementPartnerWrappingDataMeasurementPartnerEnum measurementPartner;
    public MeasurementPartnerWrappingData withMeasurementPartner(MeasurementPartnerWrappingDataMeasurementPartnerEnum measurementPartner) {
        this.measurementPartner = measurementPartner;
        return this;
    }
    
    /**
     * Measurement mode for the wrapped placement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagWrappingMode")
    public MeasurementPartnerWrappingDataTagWrappingModeEnum tagWrappingMode;
    public MeasurementPartnerWrappingData withTagWrappingMode(MeasurementPartnerWrappingDataTagWrappingModeEnum tagWrappingMode) {
        this.tagWrappingMode = tagWrappingMode;
        return this;
    }
    
    /**
     * Tag provided by the measurement partner during wrapping.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wrappedTag")
    public String wrappedTag;
    public MeasurementPartnerWrappingData withWrappedTag(String wrappedTag) {
        this.wrappedTag = wrappedTag;
        return this;
    }
    
}
