// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type OrderCustomers struct {
	Emails       []Email       `json:"emails,omitempty"`
	FirstName    *string       `json:"first_name,omitempty"`
	ID           *string       `json:"id,omitempty"`
	LastName     *string       `json:"last_name,omitempty"`
	MiddleName   *string       `json:"middle_name,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
}

type OrderDiscountsScopeEnum string

const (
	OrderDiscountsScopeEnumOrder    OrderDiscountsScopeEnum = "order"
	OrderDiscountsScopeEnumLineItem OrderDiscountsScopeEnum = "line_item"
)

func (e OrderDiscountsScopeEnum) ToPointer() *OrderDiscountsScopeEnum {
	return &e
}

func (e *OrderDiscountsScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "order":
		fallthrough
	case "line_item":
		*e = OrderDiscountsScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderDiscountsScopeEnum: %v", v)
	}
}

type OrderDiscountsTypeEnum string

const (
	OrderDiscountsTypeEnumPercentage OrderDiscountsTypeEnum = "percentage"
	OrderDiscountsTypeEnumFlatFee    OrderDiscountsTypeEnum = "flat_fee"
)

func (e OrderDiscountsTypeEnum) ToPointer() *OrderDiscountsTypeEnum {
	return &e
}

func (e *OrderDiscountsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "percentage":
		fallthrough
	case "flat_fee":
		*e = OrderDiscountsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderDiscountsTypeEnum: %v", v)
	}
}

type OrderDiscountsInput struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum            `json:"currency,omitempty"`
	Name     *string                  `json:"name,omitempty"`
	Scope    *OrderDiscountsScopeEnum `json:"scope,omitempty"`
	Type     OrderDiscountsTypeEnum   `json:"type"`
}

// OrderFulfillmentsPickupDetailsCurbsidePickupDetails - Specific details for curbside pickup.
type OrderFulfillmentsPickupDetailsCurbsidePickupDetails struct {
	// Indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	BuyerArrivedAt *time.Time `json:"buyer_arrived_at,omitempty"`
	// Specific details for curbside pickup, such as parking number and vehicle model.
	CurbsideDetails *string `json:"curbside_details,omitempty"`
}

type OrderFulfillmentsPickupDetailsRecipient struct {
	Address     *Address     `json:"address,omitempty"`
	CustomerID  *string      `json:"customer_id,omitempty"`
	DisplayName *string      `json:"display_name,omitempty"`
	Email       *Email       `json:"email,omitempty"`
	PhoneNumber *PhoneNumber `json:"phone_number,omitempty"`
}

// OrderFulfillmentsPickupDetailsScheduleTypeEnum - The schedule type of the pickup fulfillment.
type OrderFulfillmentsPickupDetailsScheduleTypeEnum string

const (
	OrderFulfillmentsPickupDetailsScheduleTypeEnumScheduled OrderFulfillmentsPickupDetailsScheduleTypeEnum = "scheduled"
)

func (e OrderFulfillmentsPickupDetailsScheduleTypeEnum) ToPointer() *OrderFulfillmentsPickupDetailsScheduleTypeEnum {
	return &e
}

func (e *OrderFulfillmentsPickupDetailsScheduleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduled":
		*e = OrderFulfillmentsPickupDetailsScheduleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderFulfillmentsPickupDetailsScheduleTypeEnum: %v", v)
	}
}

type OrderFulfillmentsPickupDetailsInput struct {
	// The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
	AutoCompleteDuration *string `json:"auto_complete_duration,omitempty"`
	// A description of why the pickup was canceled.
	CancelReason *string `json:"cancel_reason,omitempty"`
	// Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	CanceledAt *time.Time `json:"canceled_at,omitempty"`
	// Specific details for curbside pickup.
	CurbsidePickupDetails *OrderFulfillmentsPickupDetailsCurbsidePickupDetails `json:"curbside_pickup_details,omitempty"`
	// Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	ExpiredAt *time.Time `json:"expired_at,omitempty"`
	// Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
	// If `expires_at` is not set, this pickup fulfillment is automatically accepted when
	// placed.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
	IsCurbsidePickup *bool `json:"is_curbside_pickup,omitempty"`
	// A note meant to provide additional instructions about the pickup
	// fulfillment displayed in the Square Point of Sale application and set by the API.
	Note *string `json:"note,omitempty"`
	// Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	PickedUpAt *time.Time `json:"picked_up_at,omitempty"`
	// The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
	// "2016-09-04T23:59:33.123Z".
	//
	// For fulfillments with the schedule type `ASAP`, this is automatically set
	// to the current time plus the expected duration to prepare the fulfillment.
	PickupAt *time.Time `json:"pickup_at,omitempty"`
	// The window of time in which the order should be picked up after the `pickup_at` timestamp.
	// Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
	// informational guideline for merchants.
	PickupWindowDuration *string `json:"pickup_window_duration,omitempty"`
	// Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	PlacedAt *time.Time `json:"placed_at,omitempty"`
	// The duration of time it takes to prepare this fulfillment.
	// The duration must be in RFC 3339 format (for example, "P1W3D").
	PrepTimeDuration *string `json:"prep_time_duration,omitempty"`
	// Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	ReadyAt   *time.Time                               `json:"ready_at,omitempty"`
	Recipient *OrderFulfillmentsPickupDetailsRecipient `json:"recipient,omitempty"`
	// Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	RejectedAt *time.Time `json:"rejected_at,omitempty"`
	// The schedule type of the pickup fulfillment.
	ScheduleType *OrderFulfillmentsPickupDetailsScheduleTypeEnum `json:"schedule_type,omitempty"`
}

// OrderFulfillmentsFulfillmentStatusEnum - The state of the fulfillment.
type OrderFulfillmentsFulfillmentStatusEnum string

const (
	OrderFulfillmentsFulfillmentStatusEnumProposed  OrderFulfillmentsFulfillmentStatusEnum = "proposed"
	OrderFulfillmentsFulfillmentStatusEnumReserved  OrderFulfillmentsFulfillmentStatusEnum = "reserved"
	OrderFulfillmentsFulfillmentStatusEnumPrepared  OrderFulfillmentsFulfillmentStatusEnum = "prepared"
	OrderFulfillmentsFulfillmentStatusEnumCompleted OrderFulfillmentsFulfillmentStatusEnum = "completed"
	OrderFulfillmentsFulfillmentStatusEnumCancelled OrderFulfillmentsFulfillmentStatusEnum = "cancelled"
	OrderFulfillmentsFulfillmentStatusEnumFailed    OrderFulfillmentsFulfillmentStatusEnum = "failed"
	OrderFulfillmentsFulfillmentStatusEnumOther     OrderFulfillmentsFulfillmentStatusEnum = "other"
)

func (e OrderFulfillmentsFulfillmentStatusEnum) ToPointer() *OrderFulfillmentsFulfillmentStatusEnum {
	return &e
}

func (e *OrderFulfillmentsFulfillmentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "proposed":
		fallthrough
	case "reserved":
		fallthrough
	case "prepared":
		fallthrough
	case "completed":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "other":
		*e = OrderFulfillmentsFulfillmentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderFulfillmentsFulfillmentStatusEnum: %v", v)
	}
}

type OrderFulfillmentsTypeEnum string

const (
	OrderFulfillmentsTypeEnumPickup   OrderFulfillmentsTypeEnum = "pickup"
	OrderFulfillmentsTypeEnumShipment OrderFulfillmentsTypeEnum = "shipment"
)

func (e OrderFulfillmentsTypeEnum) ToPointer() *OrderFulfillmentsTypeEnum {
	return &e
}

func (e *OrderFulfillmentsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pickup":
		fallthrough
	case "shipment":
		*e = OrderFulfillmentsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderFulfillmentsTypeEnum: %v", v)
	}
}

type OrderFulfillmentsInput struct {
	ID              *string                              `json:"id,omitempty"`
	PickupDetails   *OrderFulfillmentsPickupDetailsInput `json:"pickup_details,omitempty"`
	ShipmentDetails map[string]interface{}               `json:"shipment_details,omitempty"`
	// The state of the fulfillment.
	Status *OrderFulfillmentsFulfillmentStatusEnum `json:"status,omitempty"`
	Type   *OrderFulfillmentsTypeEnum              `json:"type,omitempty"`
}

type OrderLineItemsAppliedDiscountsInput struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency   *CurrencyEnum `json:"currency,omitempty"`
	DiscountID *string       `json:"discount_id,omitempty"`
}

type OrderLineItemsAppliedTaxesInput struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	TaxID    *string       `json:"tax_id,omitempty"`
}

type OrderLineItemsModifiers struct {
	AlternateName *string `json:"alternate_name,omitempty"`
	Amount        *int64  `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency        *CurrencyEnum `json:"currency,omitempty"`
	ID              *string       `json:"id,omitempty"`
	ModifierGroupID *string       `json:"modifier_group_id,omitempty"`
	Name            *string       `json:"name,omitempty"`
}

type OrderLineItemsInput struct {
	AppliedDiscounts []OrderLineItemsAppliedDiscountsInput `json:"applied_discounts,omitempty"`
	AppliedTaxes     []OrderLineItemsAppliedTaxesInput     `json:"applied_taxes,omitempty"`
	// Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts
	Modifiers     []OrderLineItemsModifiers `json:"modifiers,omitempty"`
	Name          *string                   `json:"name,omitempty"`
	Quantity      *float64                  `json:"quantity,omitempty"`
	TotalAmount   *int64                    `json:"total_amount,omitempty"`
	TotalDiscount *int64                    `json:"total_discount,omitempty"`
	TotalTax      *int64                    `json:"total_tax,omitempty"`
	UnitPrice     *float64                  `json:"unit_price,omitempty"`
}

// OrderPosPaymentStatusEnum - Is this order paid or not?
type OrderPosPaymentStatusEnum string

const (
	OrderPosPaymentStatusEnumOpen              OrderPosPaymentStatusEnum = "open"
	OrderPosPaymentStatusEnumPaid              OrderPosPaymentStatusEnum = "paid"
	OrderPosPaymentStatusEnumRefunded          OrderPosPaymentStatusEnum = "refunded"
	OrderPosPaymentStatusEnumCredited          OrderPosPaymentStatusEnum = "credited"
	OrderPosPaymentStatusEnumPartiallyPaid     OrderPosPaymentStatusEnum = "partially_paid"
	OrderPosPaymentStatusEnumPartiallyRefunded OrderPosPaymentStatusEnum = "partially_refunded"
	OrderPosPaymentStatusEnumUnknown           OrderPosPaymentStatusEnum = "unknown"
)

func (e OrderPosPaymentStatusEnum) ToPointer() *OrderPosPaymentStatusEnum {
	return &e
}

func (e *OrderPosPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "paid":
		fallthrough
	case "refunded":
		fallthrough
	case "credited":
		fallthrough
	case "partially_paid":
		fallthrough
	case "partially_refunded":
		fallthrough
	case "unknown":
		*e = OrderPosPaymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderPosPaymentStatusEnum: %v", v)
	}
}

type OrderPaymentsInput struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
}

type OrderRefundsStatusEnum string

const (
	OrderRefundsStatusEnumPending  OrderRefundsStatusEnum = "pending"
	OrderRefundsStatusEnumApproved OrderRefundsStatusEnum = "approved"
	OrderRefundsStatusEnumRejected OrderRefundsStatusEnum = "rejected"
	OrderRefundsStatusEnumFailed   OrderRefundsStatusEnum = "failed"
)

func (e OrderRefundsStatusEnum) ToPointer() *OrderRefundsStatusEnum {
	return &e
}

func (e *OrderRefundsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "failed":
		*e = OrderRefundsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderRefundsStatusEnum: %v", v)
	}
}

type OrderRefundsInput struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum           `json:"currency,omitempty"`
	Reason   *string                 `json:"reason,omitempty"`
	Status   *OrderRefundsStatusEnum `json:"status,omitempty"`
}

// OrderStatusEnum - Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
type OrderStatusEnum string

const (
	OrderStatusEnumOpen      OrderStatusEnum = "open"
	OrderStatusEnumDraft     OrderStatusEnum = "draft"
	OrderStatusEnumDelivered OrderStatusEnum = "delivered"
	OrderStatusEnumDelayed   OrderStatusEnum = "delayed"
	OrderStatusEnumVoided    OrderStatusEnum = "voided"
	OrderStatusEnumCompleted OrderStatusEnum = "completed"
	OrderStatusEnumHidden    OrderStatusEnum = "hidden"
)

func (e OrderStatusEnum) ToPointer() *OrderStatusEnum {
	return &e
}

func (e *OrderStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "draft":
		fallthrough
	case "delivered":
		fallthrough
	case "delayed":
		fallthrough
	case "voided":
		fallthrough
	case "completed":
		fallthrough
	case "hidden":
		*e = OrderStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderStatusEnum: %v", v)
	}
}

type OrderTaxesScopeEnum string

const (
	OrderTaxesScopeEnumOrder    OrderTaxesScopeEnum = "order"
	OrderTaxesScopeEnumLineItem OrderTaxesScopeEnum = "line_item"
)

func (e OrderTaxesScopeEnum) ToPointer() *OrderTaxesScopeEnum {
	return &e
}

func (e *OrderTaxesScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "order":
		fallthrough
	case "line_item":
		*e = OrderTaxesScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderTaxesScopeEnum: %v", v)
	}
}

type OrderTaxesTypeEnum string

const (
	OrderTaxesTypeEnumUnknown   OrderTaxesTypeEnum = "unknown"
	OrderTaxesTypeEnumAdditive  OrderTaxesTypeEnum = "additive"
	OrderTaxesTypeEnumInclusive OrderTaxesTypeEnum = "inclusive"
)

func (e OrderTaxesTypeEnum) ToPointer() *OrderTaxesTypeEnum {
	return &e
}

func (e *OrderTaxesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "additive":
		fallthrough
	case "inclusive":
		*e = OrderTaxesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderTaxesTypeEnum: %v", v)
	}
}

type OrderTaxes struct {
	Amount *int64 `json:"amount,omitempty"`
	// Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()
	AutoApplied *bool `json:"auto_applied,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	ID       *string       `json:"id,omitempty"`
	// The tax's name.
	Name       *string              `json:"name,omitempty"`
	Percentage *float64             `json:"percentage,omitempty"`
	Scope      *OrderTaxesScopeEnum `json:"scope,omitempty"`
	Type       *OrderTaxesTypeEnum  `json:"type,omitempty"`
}

// OrderTendersCardEntryMethodEnum - The entry method of the card. Only applicable when the tender type is card.
type OrderTendersCardEntryMethodEnum string

const (
	OrderTendersCardEntryMethodEnumEvm         OrderTendersCardEntryMethodEnum = "evm"
	OrderTendersCardEntryMethodEnumSwiped      OrderTendersCardEntryMethodEnum = "swiped"
	OrderTendersCardEntryMethodEnumKeyed       OrderTendersCardEntryMethodEnum = "keyed"
	OrderTendersCardEntryMethodEnumOnFile      OrderTendersCardEntryMethodEnum = "on-file"
	OrderTendersCardEntryMethodEnumContactless OrderTendersCardEntryMethodEnum = "contactless"
)

func (e OrderTendersCardEntryMethodEnum) ToPointer() *OrderTendersCardEntryMethodEnum {
	return &e
}

func (e *OrderTendersCardEntryMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "evm":
		fallthrough
	case "swiped":
		fallthrough
	case "keyed":
		fallthrough
	case "on-file":
		fallthrough
	case "contactless":
		*e = OrderTendersCardEntryMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderTendersCardEntryMethodEnum: %v", v)
	}
}

// OrderTendersCardStatusEnum - The status of the card. Only applicable when the tender type is card.
type OrderTendersCardStatusEnum string

const (
	OrderTendersCardStatusEnumAuthorized OrderTendersCardStatusEnum = "authorized"
	OrderTendersCardStatusEnumCaptured   OrderTendersCardStatusEnum = "captured"
	OrderTendersCardStatusEnumFailed     OrderTendersCardStatusEnum = "failed"
	OrderTendersCardStatusEnumVoided     OrderTendersCardStatusEnum = "voided"
)

func (e OrderTendersCardStatusEnum) ToPointer() *OrderTendersCardStatusEnum {
	return &e
}

func (e *OrderTendersCardStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorized":
		fallthrough
	case "captured":
		fallthrough
	case "failed":
		fallthrough
	case "voided":
		*e = OrderTendersCardStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderTendersCardStatusEnum: %v", v)
	}
}

type OrderTendersTypeEnum string

const (
	OrderTendersTypeEnumCash  OrderTendersTypeEnum = "cash"
	OrderTendersTypeEnumCard  OrderTendersTypeEnum = "card"
	OrderTendersTypeEnumOther OrderTendersTypeEnum = "other"
)

func (e OrderTendersTypeEnum) ToPointer() *OrderTendersTypeEnum {
	return &e
}

func (e *OrderTendersTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cash":
		fallthrough
	case "card":
		fallthrough
	case "other":
		*e = OrderTendersTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderTendersTypeEnum: %v", v)
	}
}

type OrderTendersInput struct {
	Amount *float64 `json:"amount,omitempty"`
	// The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.
	BuyerTenderedCashAmount *int64 `json:"buyer_tendered_cash_amount,omitempty"`
	// A card's non-confidential details.
	Card *PaymentCardInput `json:"card,omitempty"`
	// The entry method of the card. Only applicable when the tender type is card.
	CardEntryMethod *OrderTendersCardEntryMethodEnum `json:"card_entry_method,omitempty"`
	// The status of the card. Only applicable when the tender type is card.
	CardStatus *OrderTendersCardStatusEnum `json:"card_status,omitempty"`
	// The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.
	ChangeBackCashAmount *int64 `json:"change_back_cash_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency           *CurrencyEnum         `json:"currency,omitempty"`
	Name               *string               `json:"name,omitempty"`
	Note               *string               `json:"note,omitempty"`
	Percentage         *float64              `json:"percentage,omitempty"`
	TotalAmount        *int64                `json:"total_amount,omitempty"`
	TotalDiscount      *int64                `json:"total_discount,omitempty"`
	TotalProcessingFee *int64                `json:"total_processing_fee,omitempty"`
	TotalRefund        *int64                `json:"total_refund,omitempty"`
	TotalServiceCharge *int64                `json:"total_service_charge,omitempty"`
	TotalTax           *int64                `json:"total_tax,omitempty"`
	TotalTip           *int64                `json:"total_tip,omitempty"`
	Type               *OrderTendersTypeEnum `json:"type,omitempty"`
}

type OrderInput struct {
	ClosedDate *types.Date `json:"closed_date,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency     *CurrencyEnum            `json:"currency,omitempty"`
	CustomerID   *string                  `json:"customer_id,omitempty"`
	Customers    []OrderCustomers         `json:"customers,omitempty"`
	Discounts    []OrderDiscountsInput    `json:"discounts,omitempty"`
	EmployeeID   *string                  `json:"employee_id,omitempty"`
	Fulfillments []OrderFulfillmentsInput `json:"fulfillments,omitempty"`
	// A value you specify that uniquely identifies this request among requests you have sent.
	IdempotencyKey *string               `json:"idempotency_key,omitempty"`
	LineItems      []OrderLineItemsInput `json:"line_items,omitempty"`
	LocationID     string                `json:"location_id"`
	MerchantID     string                `json:"merchant_id"`
	// A note with information about this order, may be printed on the order receipt and displayed in apps
	Note        *string     `json:"note,omitempty"`
	OrderDate   *types.Date `json:"order_date,omitempty"`
	OrderNumber *string     `json:"order_number,omitempty"`
	OrderTypeID *string     `json:"order_type_id,omitempty"`
	// Is this order paid or not?
	PaymentStatus *OrderPosPaymentStatusEnum `json:"payment_status,omitempty"`
	Payments      []OrderPaymentsInput       `json:"payments,omitempty"`
	// An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
	ReferenceID *string             `json:"reference_id,omitempty"`
	Refunded    *bool               `json:"refunded,omitempty"`
	Refunds     []OrderRefundsInput `json:"refunds,omitempty"`
	Seat        *string             `json:"seat,omitempty"`
	// Optional service charges or gratuity tip applied to the order.
	ServiceCharges []ServiceChargeInput `json:"service_charges,omitempty"`
	// Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
	Status             *OrderStatusEnum    `json:"status,omitempty"`
	Table              *string             `json:"table,omitempty"`
	Taxes              []OrderTaxes        `json:"taxes,omitempty"`
	Tenders            []OrderTendersInput `json:"tenders,omitempty"`
	Title              *string             `json:"title,omitempty"`
	TotalAmount        *int64              `json:"total_amount,omitempty"`
	TotalDiscount      *int64              `json:"total_discount,omitempty"`
	TotalRefund        *int64              `json:"total_refund,omitempty"`
	TotalServiceCharge *int64              `json:"total_service_charge,omitempty"`
	TotalTax           *int64              `json:"total_tax,omitempty"`
	TotalTip           *int64              `json:"total_tip,omitempty"`
	Version            *string             `json:"version,omitempty"`
	Voided             *bool               `json:"voided,omitempty"`
}

type OrderDiscounts struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// A unique identifier for an object.
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	// A unique identifier for an object.
	ProductID *string                  `json:"product_id,omitempty"`
	Scope     *OrderDiscountsScopeEnum `json:"scope,omitempty"`
	Type      OrderDiscountsTypeEnum   `json:"type"`
}

type OrderFulfillmentsPickupDetails struct {
	AcceptedAt *time.Time `json:"accepted_at,omitempty"`
	// The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
	AutoCompleteDuration *string `json:"auto_complete_duration,omitempty"`
	// A description of why the pickup was canceled.
	CancelReason *string `json:"cancel_reason,omitempty"`
	// Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	CanceledAt *time.Time `json:"canceled_at,omitempty"`
	// Specific details for curbside pickup.
	CurbsidePickupDetails *OrderFulfillmentsPickupDetailsCurbsidePickupDetails `json:"curbside_pickup_details,omitempty"`
	// Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	ExpiredAt *time.Time `json:"expired_at,omitempty"`
	// Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
	// If `expires_at` is not set, this pickup fulfillment is automatically accepted when
	// placed.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
	IsCurbsidePickup *bool `json:"is_curbside_pickup,omitempty"`
	// A note meant to provide additional instructions about the pickup
	// fulfillment displayed in the Square Point of Sale application and set by the API.
	Note *string `json:"note,omitempty"`
	// Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	PickedUpAt *time.Time `json:"picked_up_at,omitempty"`
	// The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
	// "2016-09-04T23:59:33.123Z".
	//
	// For fulfillments with the schedule type `ASAP`, this is automatically set
	// to the current time plus the expected duration to prepare the fulfillment.
	PickupAt *time.Time `json:"pickup_at,omitempty"`
	// The window of time in which the order should be picked up after the `pickup_at` timestamp.
	// Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
	// informational guideline for merchants.
	PickupWindowDuration *string `json:"pickup_window_duration,omitempty"`
	// Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	PlacedAt *time.Time `json:"placed_at,omitempty"`
	// The duration of time it takes to prepare this fulfillment.
	// The duration must be in RFC 3339 format (for example, "P1W3D").
	PrepTimeDuration *string `json:"prep_time_duration,omitempty"`
	// Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	ReadyAt   *time.Time                               `json:"ready_at,omitempty"`
	Recipient *OrderFulfillmentsPickupDetailsRecipient `json:"recipient,omitempty"`
	// Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
	// (for example, "2016-09-04T23:59:33.123Z").
	RejectedAt *time.Time `json:"rejected_at,omitempty"`
	// The schedule type of the pickup fulfillment.
	ScheduleType *OrderFulfillmentsPickupDetailsScheduleTypeEnum `json:"schedule_type,omitempty"`
}

type OrderFulfillments struct {
	ID              *string                         `json:"id,omitempty"`
	PickupDetails   *OrderFulfillmentsPickupDetails `json:"pickup_details,omitempty"`
	ShipmentDetails map[string]interface{}          `json:"shipment_details,omitempty"`
	// The state of the fulfillment.
	Status *OrderFulfillmentsFulfillmentStatusEnum `json:"status,omitempty"`
	Type   *OrderFulfillmentsTypeEnum              `json:"type,omitempty"`
}

type OrderLineItemsAppliedDiscounts struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency   *CurrencyEnum `json:"currency,omitempty"`
	DiscountID *string       `json:"discount_id,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
}

type OrderLineItemsAppliedTaxes struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// A unique identifier for an object.
	ID    *string `json:"id,omitempty"`
	TaxID *string `json:"tax_id,omitempty"`
}

type OrderLineItemsItem struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
}

type OrderLineItems struct {
	AppliedDiscounts []OrderLineItemsAppliedDiscounts `json:"applied_discounts,omitempty"`
	AppliedTaxes     []OrderLineItemsAppliedTaxes     `json:"applied_taxes,omitempty"`
	// A unique identifier for an object.
	ID   *string             `json:"id,omitempty"`
	Item *OrderLineItemsItem `json:"item,omitempty"`
	// Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts
	Modifiers     []OrderLineItemsModifiers `json:"modifiers,omitempty"`
	Name          *string                   `json:"name,omitempty"`
	Quantity      *float64                  `json:"quantity,omitempty"`
	TotalAmount   *int64                    `json:"total_amount,omitempty"`
	TotalDiscount *int64                    `json:"total_discount,omitempty"`
	TotalTax      *int64                    `json:"total_tax,omitempty"`
	UnitPrice     *float64                  `json:"unit_price,omitempty"`
}

type OrderPayments struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
}

type OrderRefunds struct {
	Amount *int64 `json:"amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// A unique identifier for an object.
	LocationID *string                 `json:"location_id,omitempty"`
	Reason     *string                 `json:"reason,omitempty"`
	Status     *OrderRefundsStatusEnum `json:"status,omitempty"`
	// A unique identifier for an object.
	TenderID *string `json:"tender_id,omitempty"`
	// A unique identifier for an object.
	TransactionID *string `json:"transaction_id,omitempty"`
}

// OrderSourceEnum - Source of order. Indicates the way that the order was placed.
type OrderSourceEnum string

const (
	OrderSourceEnumInStore  OrderSourceEnum = "in-store"
	OrderSourceEnumOnline   OrderSourceEnum = "online"
	OrderSourceEnumOpt      OrderSourceEnum = "opt"
	OrderSourceEnumAPI      OrderSourceEnum = "api"
	OrderSourceEnumKiosk    OrderSourceEnum = "kiosk"
	OrderSourceEnumCallerID OrderSourceEnum = "caller-id"
	OrderSourceEnumGoogle   OrderSourceEnum = "google"
	OrderSourceEnumInvoice  OrderSourceEnum = "invoice"
)

func (e OrderSourceEnum) ToPointer() *OrderSourceEnum {
	return &e
}

func (e *OrderSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in-store":
		fallthrough
	case "online":
		fallthrough
	case "opt":
		fallthrough
	case "api":
		fallthrough
	case "kiosk":
		fallthrough
	case "caller-id":
		fallthrough
	case "google":
		fallthrough
	case "invoice":
		*e = OrderSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderSourceEnum: %v", v)
	}
}

type OrderTenders struct {
	Amount *float64 `json:"amount,omitempty"`
	// The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.
	BuyerTenderedCashAmount *int64 `json:"buyer_tendered_cash_amount,omitempty"`
	// A card's non-confidential details.
	Card *PaymentCard `json:"card,omitempty"`
	// The entry method of the card. Only applicable when the tender type is card.
	CardEntryMethod *OrderTendersCardEntryMethodEnum `json:"card_entry_method,omitempty"`
	// The status of the card. Only applicable when the tender type is card.
	CardStatus *OrderTendersCardStatusEnum `json:"card_status,omitempty"`
	// The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.
	ChangeBackCashAmount *int64 `json:"change_back_cash_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// A unique identifier for an object.
	LocationID *string `json:"location_id,omitempty"`
	Name       *string `json:"name,omitempty"`
	Note       *string `json:"note,omitempty"`
	// A unique identifier for an object.
	PaymentID          *string  `json:"payment_id,omitempty"`
	Percentage         *float64 `json:"percentage,omitempty"`
	TotalAmount        *int64   `json:"total_amount,omitempty"`
	TotalDiscount      *int64   `json:"total_discount,omitempty"`
	TotalProcessingFee *int64   `json:"total_processing_fee,omitempty"`
	TotalRefund        *int64   `json:"total_refund,omitempty"`
	TotalServiceCharge *int64   `json:"total_service_charge,omitempty"`
	TotalTax           *int64   `json:"total_tax,omitempty"`
	TotalTip           *int64   `json:"total_tip,omitempty"`
	// A unique identifier for an object.
	TransactionID *string               `json:"transaction_id,omitempty"`
	Type          *OrderTendersTypeEnum `json:"type,omitempty"`
}

type Order struct {
	ClosedDate *types.Date `json:"closed_date,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency     *CurrencyEnum       `json:"currency,omitempty"`
	CustomerID   *string             `json:"customer_id,omitempty"`
	Customers    []OrderCustomers    `json:"customers,omitempty"`
	Discounts    []OrderDiscounts    `json:"discounts,omitempty"`
	EmployeeID   *string             `json:"employee_id,omitempty"`
	Fulfillments []OrderFulfillments `json:"fulfillments,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// A value you specify that uniquely identifies this request among requests you have sent.
	IdempotencyKey *string          `json:"idempotency_key,omitempty"`
	LineItems      []OrderLineItems `json:"line_items,omitempty"`
	LocationID     string           `json:"location_id"`
	MerchantID     string           `json:"merchant_id"`
	// A note with information about this order, may be printed on the order receipt and displayed in apps
	Note        *string     `json:"note,omitempty"`
	OrderDate   *types.Date `json:"order_date,omitempty"`
	OrderNumber *string     `json:"order_number,omitempty"`
	OrderTypeID *string     `json:"order_type_id,omitempty"`
	// Is this order paid or not?
	PaymentStatus *OrderPosPaymentStatusEnum `json:"payment_status,omitempty"`
	Payments      []OrderPayments            `json:"payments,omitempty"`
	// An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
	ReferenceID *string        `json:"reference_id,omitempty"`
	Refunded    *bool          `json:"refunded,omitempty"`
	Refunds     []OrderRefunds `json:"refunds,omitempty"`
	Seat        *string        `json:"seat,omitempty"`
	// Optional service charges or gratuity tip applied to the order.
	ServiceCharges []ServiceCharge `json:"service_charges,omitempty"`
	// Source of order. Indicates the way that the order was placed.
	Source *OrderSourceEnum `json:"source,omitempty"`
	// Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
	Status             *OrderStatusEnum `json:"status,omitempty"`
	Table              *string          `json:"table,omitempty"`
	Taxes              []OrderTaxes     `json:"taxes,omitempty"`
	Tenders            []OrderTenders   `json:"tenders,omitempty"`
	Title              *string          `json:"title,omitempty"`
	TotalAmount        *int64           `json:"total_amount,omitempty"`
	TotalDiscount      *int64           `json:"total_discount,omitempty"`
	TotalRefund        *int64           `json:"total_refund,omitempty"`
	TotalServiceCharge *int64           `json:"total_service_charge,omitempty"`
	TotalTax           *int64           `json:"total_tax,omitempty"`
	TotalTip           *int64           `json:"total_tip,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string    `json:"updated_by,omitempty"`
	Version   *string    `json:"version,omitempty"`
	Voided    *bool      `json:"voided,omitempty"`
	VoidedAt  *time.Time `json:"voided_at,omitempty"`
}
