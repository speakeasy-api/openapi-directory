"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://worldtimeapi.org/api/",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""A simple API to get the current time based on a request with a timezone."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_ip(self) -> operations.GetIPResponse:
        r"""request the current time based on the ip of the request. note: this is a \\"best guess\\" obtained from open-source data."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DateTimeJSONResponse])
                res.date_time_json_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorJSONResponse])
                res.error_json_response = out

        return res

    def get_ip_txt(self) -> operations.GetIPTxtResponse:
        r"""request the current time based on the ip of the request. note: this is a \\"best guess\\" obtained from open-source data."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip.txt'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPTxtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.date_time_text_response = http_res.content
        else:
            if utils.match_content_type(content_type, 'text/plain'):
                res.error_text_response = http_res.content

        return res

    def get_ip_ipv4_(self, request: operations.GetIPIpv4Request) -> operations.GetIPIpv4Response:
        r"""request the current time based on the ip of the request. note: this is a \\"best guess\\" obtained from open-source data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIPIpv4Request, base_url, '/ip/{ipv4}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPIpv4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DateTimeJSONResponse])
                res.date_time_json_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorJSONResponse])
                res.error_json_response = out

        return res

    def get_ip_ipv4_txt(self, request: operations.GetIPIpv4TxtRequest) -> operations.GetIPIpv4TxtResponse:
        r"""request the current time based on the ip of the request. note: this is a \\"best guess\\" obtained from open-source data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIPIpv4TxtRequest, base_url, '/ip/{ipv4}.txt', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPIpv4TxtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.date_time_text_response = http_res.content
        else:
            if utils.match_content_type(content_type, 'text/plain'):
                res.error_text_response = http_res.content

        return res

    def get_timezone(self) -> operations.GetTimezoneResponse:
        r"""a listing of all timezones."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/timezone'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.list_json_response = out

        return res

    def get_timezone_txt(self) -> operations.GetTimezoneTxtResponse:
        r"""a listing of all timezones."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/timezone.txt'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneTxtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'text/plain'):
                res.list_text_response = http_res.content

        return res

    def get_timezone_area_(self, request: operations.GetTimezoneAreaRequest) -> operations.GetTimezoneAreaResponse:
        r"""a listing of all timezones available for that area."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTimezoneAreaRequest, base_url, '/timezone/{area}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneAreaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.list_json_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorJSONResponse])
                res.error_json_response = out

        return res

    def get_timezone_area_txt(self, request: operations.GetTimezoneAreaTxtRequest) -> operations.GetTimezoneAreaTxtResponse:
        r"""a listing of all timezones available for that area."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTimezoneAreaTxtRequest, base_url, '/timezone/{area}.txt', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneAreaTxtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.list_text_response = http_res.content
        else:
            if utils.match_content_type(content_type, 'text/plain'):
                res.error_text_response = http_res.content

        return res

    def get_timezone_area_location_(self, request: operations.GetTimezoneAreaLocationRequest) -> operations.GetTimezoneAreaLocationResponse:
        r"""request the current time for a timezone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTimezoneAreaLocationRequest, base_url, '/timezone/{area}/{location}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneAreaLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DateTimeJSONResponse])
                res.date_time_json_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorJSONResponse])
                res.error_json_response = out

        return res

    def get_timezone_area_location_txt(self, request: operations.GetTimezoneAreaLocationTxtRequest) -> operations.GetTimezoneAreaLocationTxtResponse:
        r"""request the current time for a timezone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTimezoneAreaLocationTxtRequest, base_url, '/timezone/{area}/{location}.txt', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneAreaLocationTxtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.date_time_text_response = http_res.content
        else:
            if utils.match_content_type(content_type, 'text/plain'):
                res.error_text_response = http_res.content

        return res

    def get_timezone_area_location_region_(self, request: operations.GetTimezoneAreaLocationRegionRequest) -> operations.GetTimezoneAreaLocationRegionResponse:
        r"""request the current time for a timezone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTimezoneAreaLocationRegionRequest, base_url, '/timezone/{area}/{location}/{region}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneAreaLocationRegionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DateTimeJSONResponse])
                res.date_time_json_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorJSONResponse])
                res.error_json_response = out

        return res

    def get_timezone_area_location_region_txt(self, request: operations.GetTimezoneAreaLocationRegionTxtRequest) -> operations.GetTimezoneAreaLocationRegionTxtResponse:
        r"""request the current time for a timezone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTimezoneAreaLocationRegionTxtRequest, base_url, '/timezone/{area}/{location}/{region}.txt', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTimezoneAreaLocationRegionTxtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.date_time_text_response = http_res.content
        else:
            if utils.match_content_type(content_type, 'text/plain'):
                res.error_text_response = http_res.content

        return res

    