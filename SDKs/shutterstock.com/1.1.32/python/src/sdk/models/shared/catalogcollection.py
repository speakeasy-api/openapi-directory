"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import catalogcollectionitem as shared_catalogcollectionitem
from ..shared import catalogcollectionroleassignments as shared_catalogcollectionroleassignments
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CatalogCollectionVisibilityEnum(str, Enum):
    PRIVATE = 'private'
    PUBLIC = 'public'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogCollection:
    r"""Catalog collection"""
    
    created_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    role_assignments: shared_catalogcollectionroleassignments.CatalogCollectionRoleAssignments = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role_assignments') }})
    r"""List of role assignments for a catalog collection"""  
    total_item_count: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_item_count') }})  
    updated_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_time'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    visibility: CatalogCollectionVisibilityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility') }})  
    cover_asset: Optional[shared_catalogcollectionitem.CatalogCollectionItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cover_asset'), 'exclude': lambda f: f is None }})
    r"""Metadata about an item that is part of a collection"""  
    