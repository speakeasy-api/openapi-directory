/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class OcrMultipartSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerToken: string;
}

export class OcrMultipartRequestBodySampleContent extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;

  @SpeakeasyMetadata({ data: "multipart_form, name=sampleContent" })
  sampleContent: string;
}

export class OcrMultipartRequestBody extends SpeakeasyBase {
  /**
   * ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=modelId" })
  modelId?: string;

  /**
   * Binary content of image file uploaded as multipart/form-data. Optional.
   */
  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  sampleContent?: OcrMultipartRequestBodySampleContent;

  /**
   * String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sampleId" })
  sampleId?: string;

  /**
   * URL of the image file. Use this parameter when sending in a file from a web location. Optional.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sampleLocation" })
  sampleLocation?: string;

  /**
   * Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=task" })
  task?: string;
}

export class OcrMultipartResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OCR Result
   */
  @SpeakeasyMetadata()
  ocrPredictResponse?: shared.OCRPredictResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
