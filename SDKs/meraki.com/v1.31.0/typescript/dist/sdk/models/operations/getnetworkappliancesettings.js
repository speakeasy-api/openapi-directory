"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNetworkApplianceSettingsResponse = exports.GetNetworkApplianceSettings200ApplicationJSON = exports.GetNetworkApplianceSettings200ApplicationJSONDynamicDns = exports.GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum = exports.GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum = exports.GetNetworkApplianceSettingsRequest = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var GetNetworkApplianceSettingsRequest = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceSettingsRequest, _super);
    function GetNetworkApplianceSettingsRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], GetNetworkApplianceSettingsRequest.prototype, "networkId", void 0);
    return GetNetworkApplianceSettingsRequest;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceSettingsRequest = GetNetworkApplianceSettingsRequest;
/**
 * Client tracking method of a network
 */
var GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum;
(function (GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum) {
    GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum["IPAddress"] = "IP address";
    GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum["MACAddress"] = "MAC address";
    GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum["UniqueClientIdentifier"] = "Unique client identifier";
})(GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum = exports.GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum || (exports.GetNetworkApplianceSettings200ApplicationJSONClientTrackingMethodEnum = {}));
/**
 * Deployment mode of a network
 */
var GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum;
(function (GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum) {
    GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum["Passthrough"] = "passthrough";
    GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum["Routed"] = "routed";
})(GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum = exports.GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum || (exports.GetNetworkApplianceSettings200ApplicationJSONDeploymentModeEnum = {}));
/**
 * Dynamic DNS settings for a network
 */
var GetNetworkApplianceSettings200ApplicationJSONDynamicDns = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceSettings200ApplicationJSONDynamicDns, _super);
    function GetNetworkApplianceSettings200ApplicationJSONDynamicDns() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], GetNetworkApplianceSettings200ApplicationJSONDynamicDns.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prefix" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceSettings200ApplicationJSONDynamicDns.prototype, "prefix", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceSettings200ApplicationJSONDynamicDns.prototype, "url", void 0);
    return GetNetworkApplianceSettings200ApplicationJSONDynamicDns;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceSettings200ApplicationJSONDynamicDns = GetNetworkApplianceSettings200ApplicationJSONDynamicDns;
/**
 * Successful operation
 */
var GetNetworkApplianceSettings200ApplicationJSON = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceSettings200ApplicationJSON, _super);
    function GetNetworkApplianceSettings200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clientTrackingMethod" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceSettings200ApplicationJSON.prototype, "clientTrackingMethod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deploymentMode" }),
        __metadata("design:type", String)
    ], GetNetworkApplianceSettings200ApplicationJSON.prototype, "deploymentMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dynamicDns" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkApplianceSettings200ApplicationJSONDynamicDns; }),
        __metadata("design:type", GetNetworkApplianceSettings200ApplicationJSONDynamicDns)
    ], GetNetworkApplianceSettings200ApplicationJSON.prototype, "dynamicDns", void 0);
    return GetNetworkApplianceSettings200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceSettings200ApplicationJSON = GetNetworkApplianceSettings200ApplicationJSON;
var GetNetworkApplianceSettingsResponse = /** @class */ (function (_super) {
    __extends(GetNetworkApplianceSettingsResponse, _super);
    function GetNetworkApplianceSettingsResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetNetworkApplianceSettingsResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetNetworkApplianceSettingsResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetNetworkApplianceSettingsResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", GetNetworkApplianceSettings200ApplicationJSON)
    ], GetNetworkApplianceSettingsResponse.prototype, "getNetworkApplianceSettings200ApplicationJSONObject", void 0);
    return GetNetworkApplianceSettingsResponse;
}(utils_1.SpeakeasyBase));
exports.GetNetworkApplianceSettingsResponse = GetNetworkApplianceSettingsResponse;
