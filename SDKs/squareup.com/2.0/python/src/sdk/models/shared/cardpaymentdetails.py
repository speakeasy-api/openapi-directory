"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import card as shared_card
from ..shared import cardpaymenttimeline as shared_cardpaymenttimeline
from ..shared import devicedetails as shared_devicedetails
from ..shared import error as shared_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardPaymentDetails:
    r"""Reflects the current status of a card payment. Contains only non-confidential information."""
    
    application_cryptogram: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application_cryptogram'), 'exclude': lambda f: f is None }})
    r"""For EMV payments, the cryptogram generated for the payment."""  
    application_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application_identifier'), 'exclude': lambda f: f is None }})
    r"""For EMV payments, the application ID identifies the EMV application used for the payment."""  
    application_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application_name'), 'exclude': lambda f: f is None }})
    r"""For EMV payments, the human-readable name of the EMV application used for the payment."""  
    auth_result_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_result_code'), 'exclude': lambda f: f is None }})
    r"""The status code returned by the card issuer that describes the payment's
    authorization status.
    """  
    avs_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avs_status'), 'exclude': lambda f: f is None }})
    r"""The status code returned from the Address Verification System (AVS) check. The code can be
    `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
    """  
    card: Optional[shared_card.Card] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})
    r"""Represents the payment details of a card to be used for payments. These
    details are determined by the payment token generated by Web Payments SDK.
    """  
    card_payment_timeline: Optional[shared_cardpaymenttimeline.CardPaymentTimeline] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_payment_timeline'), 'exclude': lambda f: f is None }})
    r"""The timeline for card payments."""  
    cvv_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvv_status'), 'exclude': lambda f: f is None }})
    r"""The status code returned from the Card Verification Value (CVV) check. The code can be
    `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
    """  
    device_details: Optional[shared_devicedetails.DeviceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_details'), 'exclude': lambda f: f is None }})
    r"""Details about the device that took the payment."""  
    entry_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entry_method'), 'exclude': lambda f: f is None }})
    r"""The method used to enter the card's details for the payment. The method can be
    `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
    """  
    errors: Optional[list[shared_error.Error]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Information about errors encountered during the request."""  
    refund_requires_card_presence: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund_requires_card_presence'), 'exclude': lambda f: f is None }})
    r"""Whether the card must be physically present for the payment to
    be refunded.  If set to `true`, the card must be present.
    """  
    statement_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statement_description'), 'exclude': lambda f: f is None }})
    r"""The statement description sent to the card networks.
    
    Note: The actual statement description varies and is likely to be truncated and appended with
    additional information on a per issuer basis.
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
    FAILED.
    """  
    verification_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_method'), 'exclude': lambda f: f is None }})
    r"""For EMV payments, the method used to verify the cardholder's identity. The method can be
    `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
    """  
    verification_results: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_results'), 'exclude': lambda f: f is None }})
    r"""For EMV payments, the results of the cardholder verification. The result can be
    `SUCCESS`, `FAILURE`, or `UNKNOWN`.
    """  
    