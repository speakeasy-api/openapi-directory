"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Categories:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_categories_id_json(self, request: operations.DeleteCategoriesIDJSONRequest) -> operations.DeleteCategoriesIDJSONResponse:
        r"""Delete an existing Category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCategoriesIDJSONRequest, base_url, '/categories/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteCategoriesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCategoriesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_categories_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_categories_json(self, request: operations.GetCategoriesJSONRequest) -> operations.GetCategoriesJSONResponse:
        r"""Retrieve all Categories."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/categories.json'
        
        query_params = utils.get_query_params(operations.GetCategoriesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Category])
                res.category = out

        return res

    def get_categories_count_json(self, request: operations.GetCategoriesCountJSONRequest) -> operations.GetCategoriesCountJSONResponse:
        r"""Count all Categories."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/categories/count.json'
        
        query_params = utils.get_query_params(operations.GetCategoriesCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out

        return res

    def get_categories_id_json(self, request: operations.GetCategoriesIDJSONRequest) -> operations.GetCategoriesIDJSONResponse:
        r"""Retrieve a single Category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCategoriesIDJSONRequest, base_url, '/categories/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetCategoriesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Category])
                res.category = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_categories_json(self, request: operations.PostCategoriesJSONRequest) -> operations.PostCategoriesJSONResponse:
        r"""Create a new Category.
        Category's permalink is automatically generated from the given category's name.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/categories.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "category_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostCategoriesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCategoriesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Category])
                res.category = out

        return res

    def put_categories_id_json(self, request: operations.PutCategoriesIDJSONRequest) -> operations.PutCategoriesIDJSONResponse:
        r"""Modify an existing Category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCategoriesIDJSONRequest, base_url, '/categories/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "category_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutCategoriesIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCategoriesIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Category])
                res.category = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    