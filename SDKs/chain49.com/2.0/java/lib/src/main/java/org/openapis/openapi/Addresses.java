/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 *  
 */
public class Addresses {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Addresses(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get address V2
     * Returns balances and transactions of an address. The returned transactions are sorted by block height, newest blocks first.
     * 
     * The **details** query parameter can specify the level of details returned by the request (default: "txids").
     * Possible values are:
     * 
     * **basic**: return only xpub balances, without any derived addresses and transactions
     * 
     * **tokens**: basic + tokens (addresses) derived from the xpub, subject to tokens parameter
     * 
     * **tokenBalances**: basic + tokens (addresses) derived from the xpub with balances, subject to tokens parameter
     * 
     * **txids**: tokenBalances + list of txids, subject to from, to filter and paging
     * 
     * **txs**: tokenBalances + list of transaction with details, subject to from, to filter and paging
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAddressV2Response getAddressV2(org.openapis.openapi.models.operations.GetAddressV2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetAddressV2Request.class, baseUrl, "/{blockchain}/v2/address/{address}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetAddressV2Request.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAddressV2Response res = new org.openapis.openapi.models.operations.GetAddressV2Response(contentType, httpRes.statusCode()) {{
            getAddressV2200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getAddressV2200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get Balance History V2
     * Returns a balance history for the specified XPUB or address
     * 
     * The value of sentToSelf is the amount sent from the same address to the same address or within addresses of xpub.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBalanceHistoryV2Response getBalanceHistoryV2(org.openapis.openapi.models.operations.GetBalanceHistoryV2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBalanceHistoryV2Request.class, baseUrl, "/{blockchain}/v2/balancehistory/{addressOrXpub}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBalanceHistoryV2Request.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBalanceHistoryV2Response res = new org.openapis.openapi.models.operations.GetBalanceHistoryV2Response(contentType, httpRes.statusCode()) {{
            getBalanceHistoryV2200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBalanceHistoryV2200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBalanceHistoryV2200ApplicationJSON[].class);
                res.getBalanceHistoryV2200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get UTXO V2
     * Returns array of unspent transaction outputs of address or xpub, applicable only for Bitcoin-type coins. By default, the list contains both confirmed and unconfirmed transactions. The query parameter confirmed=true disables return of unconfirmed transactions. The returned utxos are sorted by block height, newest blocks first. For xpubs or output descriptors, the response also contains address and derivation path of the utxo.
     * 
     * 
     * 
     * Unconfirmed utxos do not have field height, the field confirmations has value 0 and may contain field lockTime, if not zero.
     * 
     * Coinbase utxos have field coinbase set to true, however due to performance reasons only up to minimum coinbase confirmations limit (100). After this limit, utxos are not detected as coinbase.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetUtxov2Response getUtxov2(org.openapis.openapi.models.operations.GetUtxov2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetUtxov2Request.class, baseUrl, "/{blockchain}/v2/utxo/{addressOrXpub}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetUtxov2Request.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetUtxov2Response res = new org.openapis.openapi.models.operations.GetUtxov2Response(contentType, httpRes.statusCode()) {{
            getUtxov2200ApplicationJSONAnies = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object[].class);
                res.getUtxov2200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Get xpub V2
     * Returns balances and transactions of an xpub or output descriptor, applicable only for Bitcoin-type coins.
     * 
     * Blockbook supports BIP44, BIP49, BIP84 and BIP86 (Taproot) derivation schemes, using either xpubs or output descriptors (see https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)
     * 
     * Note: usedTokens always returns total number of used addresses of xpub.
     * 
     * Detailed documentation found here: https://github.com/trezor/blockbook/blob/master/docs/api.md#get-xpub
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetXpubV2Response getXpubV2(org.openapis.openapi.models.operations.GetXpubV2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetXpubV2Request.class, baseUrl, "/{blockchain}/v2/xpub/{xpub}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetXpubV2Request.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetXpubV2Response res = new org.openapis.openapi.models.operations.GetXpubV2Response(contentType, httpRes.statusCode()) {{
            getXpubV2200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetXpubV2200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetXpubV2200ApplicationJSON.class);
                res.getXpubV2200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}