/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Scrobbling {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List watched and acquired episodes for a show
   *
   * @remarks
   * This endpoint can be used by all users, even without premium
   */
  getScrobbleShowsShowId(
    req: operations.GetScrobbleShowsShowIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetScrobbleShowsShowIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetScrobbleShowsShowIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/scrobble/shows/{show_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetScrobbleShowsShowIdResponse =
        new operations.GetScrobbleShowsShowIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.markedEpisodes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.markedEpisodes = utils.objectToClass(
              httpRes?.data,
              shared.MarkedEpisode,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mark episodes as acquired or watched based on their IDs
   *
   * @remarks
   * This endpoint can be used by all users, even without premium
   */
  postScrobbleEpisodes(
    req: operations.PostScrobbleEpisodesRequestBody[],
    config?: AxiosRequestConfig
  ): Promise<operations.PostScrobbleEpisodesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/scrobble/episodes";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostScrobbleEpisodesResponse =
        new operations.PostScrobbleEpisodesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 207, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkResponse = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.bulkResponse = utils.objectToClass(
              httpRes?.data,
              shared.BulkResponse,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mark episodes within a show as acquired or watched based on their attributes
   *
   * @remarks
   * To specify a show, supply either `tvmaze_id`, `thetvdb_id` or `imdb_id`. To specify an episode, supply either both `season` and `episode`, or `airdate`.
   *
   * This endpoint can be used by all users, even without premium.
   *
   */
  postScrobbleShows(
    req: operations.PostScrobbleShowsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostScrobbleShowsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostScrobbleShowsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/scrobble/shows";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostScrobbleShowsResponse =
        new operations.PostScrobbleShowsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 207, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkResponse = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.bulkResponse = utils.objectToClass(
              httpRes?.data,
              shared.BulkResponse,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mark an episode as acquired or watched based on its ID
   *
   * @remarks
   * This endpoint can be used by all users, even without premium
   */
  putScrobbleEpisodesEpisodeId(
    req: operations.PutScrobbleEpisodesEpisodeIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutScrobbleEpisodesEpisodeIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutScrobbleEpisodesEpisodeIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/scrobble/episodes/{episode_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "markedEpisodeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutScrobbleEpisodesEpisodeIdResponse =
        new operations.PutScrobbleEpisodesEpisodeIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.markedEpisode = utils.objectToClass(
              httpRes?.data,
              shared.MarkedEpisode
            );
          }
          break;
        case [404, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
