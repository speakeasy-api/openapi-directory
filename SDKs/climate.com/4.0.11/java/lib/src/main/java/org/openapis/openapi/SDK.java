/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * **Last Modified**: Wed Jan  4 12:47:29 UTC 2023
 * 
 * 
 * All endpoints are only accessible via HTTPS.
 * 
 * * All API endpoints are located at `https://platform.climate.com` (e.g.
 * `https://platform.climate.com/v4/fields`).
 * 
 * * The authorization token endpoint is located at
 * `https://api.climate.com/api/oauth/token`.
 * 
 * ## Troubleshooting
 * 
 * `X-Http-Request-Id` response header will be returned on every call,
 * successful or not. If you experience an issue with our api and need
 * to contact technical support, please supply the value of the `X-Http-Request-Id`
 * header along with an approximate time of when the request was made.
 * 
 * ## Request Limits
 * 
 * When you\u2019re onboarded to Climate\u2019s API platform, your `x-api-key` is assigned a custom usage plan. Usage plans are unique to each partner and have the following key attributes: 
 * 
 * 1. Throttling information
 *     * burstLimit: Maximum rate limit over a period ranging from 1 second to a few seconds
 *     * rateLimit: A steady-state rate limit
 * 
 * 2. Quota information
 *     * Limit: The maximum number of requests that can be made in a given month
 * 
 * When the request rate threshold is exceeded, a `429` response code is returned. Optionally, the [`Retry-After`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37) header may be returned: 
 * 
 * Following are examples of rate limit errors:
 * 
 * 1. Rate limit exceeded:
 * 
 * &lt;br&gt;HTTP/1.1 429 
 * &lt;br&gt;Content-Type: application/json
 * &lt;br&gt;Content-Length: 32
 * 
 *    {"message":"Too Many Requests"}
 * 
 * 2. Quota exhausted:
 * &lt;br&gt;HTTP/1.1 429 
 * &lt;br&gt;Content-Type: application/json
 * &lt;br&gt;Content-Length: 29
 * 
 *     {"message":"Limit Exceeded"}
 * 
 * ## Pagination
 * 
 * Pagination is performed via headers. Any request which returns a `"results"`
 * array may be paginated. The following figure shows how query results are laid out with
 * X-Limit=4 and no filter applied.
 * 
 * &lt;img style="width:70%;height:auto;" src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/paging.png"&gt;
 * 
 * * If there are no results, a response code of `304` will be returned.
 * 
 * * If the response is the last set of results, a response code of `200` or
 * `206` will be returned.
 * 
 * * If there are more results, a response code of `206` will be returned.
 * 
 * * If `X-Next-Token` is provided in the request headers but the token has
 * expired, a response code of `409` will be returned. This is only applicable
 * for some endpoints; see specific endpoint documentation below.
 * 
 * #### X-Limit
 * 
 * The page size can be controlled with the `X-Limit` header. Valid values are
 * `1-100` and defaults to `100`.
 * 
 * #### X-Next-Token
 * 
 * If the results are paginated, a response header of `X-Next-Token` will be
 * returned. Use the associated value in the subsequent request (via the `X-Next-Token`
 * request header) to retrieve the next page. The following sequence diagram shows how to
 * use `X-Next-Token` to fetch all the records.
 * 
 * &lt;img src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/x-next-token.svg"&gt;
 * 
 * 
 * ## Chunked Uploads
 * 
 * Uploads larger than `5MiB` (`5242880 bytes`) must be done in `5MiB` chunks
 * (with the exception of the final chunk). Each chunk request MUST contain a
 * `Content-Range` header specifying the portion of the upload, and a `Content-Type`
 * header specifying binary content type (`application/octet-stream`). Range
 * uploads must be contiguous. The maximum upload size is capped at `500MiB` (`524288000 bytes`).
 * 
 * ## Chunked Downloads
 * 
 * Downloads larger than `5MiB` (`5242880 bytes`) must be done in `1-5MiB`
 * chunks (with the exception of the final chunk, which may be less than `1MiB`).
 * Each chunk request MUST contain a `Range` header specifying the requested portion of the download,
 * and an `Accept` header specifying binary and json content types  (`application/octet-stream,application/json`)
 * or all content types (`* /*`).
 * 
 * ## Drivers
 * 
 * If you need drivers to process agronomic data, download the ADAPT plugin below. We only support the plugin in the Windows environment, minimum is Windows 7 SP1.
 * 
 * For asPlanted, asHarvested and asApplied data:
 * * [ADAPT Plugin](https://dev.fieldview.com/drivers/ClimateADAPTPlugin_latest.exe)
 * &lt;br&gt;Release notes can be found [here](https://dev.fieldview.com/drivers/adapt-release-notes.txt).
 * &lt;br&gt;Download and use of the ADAPT plugin means that you agree to the EULA for use of the ADAPT plugin. 
 * &lt;br&gt;Please review the [EULA](https://dev.fieldview.com/EULA/ADAPT%20Plugin%20EULA-06-19.pdf) (last updated on June 6th, 2019) before download and use of the ADAPT plugin.
 * &lt;br&gt;For more information, please refer to:
 *   * [ADAPT Resources](https://adaptframework.org/)
 *   * [ADAPT Overview](https://aggateway.atlassian.net/wiki/spaces/ADM/overview)
 *   * [ADAPT FAQ](https://aggateway.atlassian.net/wiki/spaces/ADM/pages/165942474/ADAPT+Frequently-Asked+Questions+FAQ)
 *   * [ADAPT Videos](https://adaptframework.org/adapt-videos/)
 * 
 * ## Sample Test Data
 * 
 * Sample agronomic data:
 * * [asPlanted and asHarvested data](https://dev.fieldview.com/sample-agronomic-data/Planting_Harvesting_data_04_18_2018_21_46_18.zip)
 * * [asApplied data set 1](https://dev.fieldview.com/sample-agronomic-data/as-applied-data1.zip)
 * * [asApplied data set 2](https://dev.fieldview.com/sample-agronomic-data/as-applied-data2.zip)
 * &lt;br&gt;To upload the sample data to your account, please follow the instructions in this [link](https://support.climate.com/kt#/kA02A000000AaxzSAC/en_US).
 * 
 * Sample soil data:
 * * [Sample soil data](https://dev.fieldview.com/sample-soil-data/soil-sample.xml)
 * ---
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://platform.climate.com/",
	};
  	
    /**
     * Field Boundary data endpoints.
     */
    public Boundaries boundaries;
    /**
     * General data export endpoints.
     */
    public Exports exports;
    /**
     * Farm organization data endpoints.
     */
    public FarmOrganizations farmOrganizations;
    /**
     * Field data endpoints.
     */
    public Fields fields;
    /**
     * General data retrieval endpoints.
     */
    public Layers layers;
    /**
     * Operation data endpoints.
     */
    public Operations operations;
    /**
     * Resource Owner data endpoints.
     */
    public ResourceOwners resourceOwners;
    /**
     * General data upload endpoints.
     */
    public Uploads uploads;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.boundaries = new Boundaries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.exports = new Exports(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.farmOrganizations = new FarmOrganizations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.fields = new Fields(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.layers = new Layers(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.operations = new Operations(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.resourceOwners = new ResourceOwners(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.uploads = new Uploads(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}