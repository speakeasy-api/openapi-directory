/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * JobPreparationTask - A Job Preparation task to run before any tasks of the job on any given compute node.
 */
public class JobPreparationTask {
    /**
     * The command line of the Job Preparation task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commandLine")
    public String commandLine;
    public JobPreparationTask withCommandLine(String commandLine) {
        this.commandLine = commandLine;
        return this;
    }
    
    /**
     * Constraints to apply to the Job Manager task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraints")
    public TaskConstraints constraints;
    public JobPreparationTask withConstraints(TaskConstraints constraints) {
        this.constraints = constraints;
        return this;
    }
    
    /**
     * A list of environment variable settings for the Job Preparation task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentSettings")
    public EnvironmentSetting[] environmentSettings;
    public JobPreparationTask withEnvironmentSettings(EnvironmentSetting[] environmentSettings) {
        this.environmentSettings = environmentSettings;
        return this;
    }
    
    /**
     * A string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public JobPreparationTask withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether the Batch service should rerun the Job Preparation task after a compute node reboots. Note that the Job Preparation task should still be written to be idempotent because it can be rerun if the compute node is rebooted while Job Preparation task is still running. The default value is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rerunOnNodeRebootAfterSuccess")
    public Boolean rerunOnNodeRebootAfterSuccess;
    public JobPreparationTask withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess) {
        this.rerunOnNodeRebootAfterSuccess = rerunOnNodeRebootAfterSuccess;
        return this;
    }
    
    /**
     * A list of files that the Batch service will download to the compute node before running the command line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceFiles")
    public ResourceFile[] resourceFiles;
    public JobPreparationTask withResourceFiles(ResourceFile[] resourceFiles) {
        this.resourceFiles = resourceFiles;
        return this;
    }
    
    /**
     * Whether to run the Job Preparation task in elevated mode. The default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runElevated")
    public Boolean runElevated;
    public JobPreparationTask withRunElevated(Boolean runElevated) {
        this.runElevated = runElevated;
        return this;
    }
    
    /**
     * Whether the Batch service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitForSuccess")
    public Boolean waitForSuccess;
    public JobPreparationTask withWaitForSuccess(Boolean waitForSuccess) {
        this.waitForSuccess = waitForSuccess;
        return this;
    }
    
}
