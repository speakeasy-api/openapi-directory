/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * The AWS Mobile multi-region endpoint
   */
  "http://mobile.{region}.amazonaws.com",
  /**
   * The AWS Mobile multi-region endpoint
   */
  "https://mobile.{region}.amazonaws.com",
  /**
   * The AWS Mobile endpoint for China (Beijing) and China (Ningxia)
   */
  "http://mobile.{region}.amazonaws.com.cn",
  /**
   * The AWS Mobile endpoint for China (Beijing) and China (Ningxia)
   */
  "https://mobile.{region}.amazonaws.com.cn",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 *  AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources.
 *
 * @see {@link https://docs.aws.amazon.com/mobile/} - Amazon Web Services documentation
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   *  Creates an AWS Mobile Hub project.
   */
  createProject(
    req: operations.CreateProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/projects";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateProjectResponse =
        new operations.CreateProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createProjectResult = utils.objectToClass(
              httpRes?.data,
              shared.CreateProjectResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundException = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Delets a project in AWS Mobile Hub.
   */
  deleteProject(
    req: operations.DeleteProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteProjectResponse =
        new operations.DeleteProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProjectResult = utils.objectToClass(
              httpRes?.data,
              shared.DeleteProjectResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundException = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Get the bundle details for the requested bundle id.
   */
  describeBundle(
    req: operations.DescribeBundleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DescribeBundleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DescribeBundleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/bundles/{bundleId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DescribeBundleResponse =
        new operations.DescribeBundleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.describeBundleResult = utils.objectToClass(
              httpRes?.data,
              shared.DescribeBundleResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundException = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Gets details about a project in AWS Mobile Hub.
   */
  describeProject(
    req: operations.DescribeProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DescribeProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DescribeProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/project#projectId";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DescribeProjectResponse =
        new operations.DescribeProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.describeProjectResult = utils.objectToClass(
              httpRes?.data,
              shared.DescribeProjectResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundException = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Generates customized software development kit (SDK) and or tool packages used to integrate mobile web or mobile app clients with backend AWS resources.
   */
  exportBundle(
    req: operations.ExportBundleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportBundleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportBundleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/bundles/{bundleId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportBundleResponse =
        new operations.ExportBundleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportBundleResult = utils.objectToClass(
              httpRes?.data,
              shared.ExportBundleResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundException = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Exports project configuration to a snapshot which can be downloaded and shared. Note that mobile app push credentials are encrypted in exported projects, so they can only be shared successfully within the same AWS account.
   */
  exportProject(
    req: operations.ExportProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExportProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/exports/{projectId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportProjectResponse =
        new operations.ExportProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportProjectResult = utils.objectToClass(
              httpRes?.data,
              shared.ExportProjectResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundException = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  List all available bundles.
   */
  listBundles(
    req: operations.ListBundlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListBundlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListBundlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/bundles";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListBundlesResponse =
        new operations.ListBundlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listBundlesResult = utils.objectToClass(
              httpRes?.data,
              shared.ListBundlesResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Lists projects in AWS Mobile Hub.
   */
  listProjects(
    req: operations.ListProjectsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListProjectsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListProjectsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/projects";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListProjectsResponse =
        new operations.ListProjectsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listProjectsResult = utils.objectToClass(
              httpRes?.data,
              shared.ListProjectsResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *  Update an existing project.
   */
  updateProject(
    req: operations.UpdateProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/update#projectId";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateProjectResponse =
        new operations.UpdateProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateProjectResult = utils.objectToClass(
              httpRes?.data,
              shared.UpdateProjectResult
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalFailureException = utils.objectToClass(
              httpRes?.data,
              shared.InternalFailureException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceUnavailableException = utils.objectToClass(
              httpRes?.data,
              shared.ServiceUnavailableException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedException = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tooManyRequestsException = utils.objectToClass(
              httpRes?.data,
              shared.TooManyRequestsException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestException = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundException = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountActionRequiredException = utils.objectToClass(
              httpRes?.data,
              shared.AccountActionRequiredException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
      }

      return res;
    });
  }
}
