"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class DestinyEntitiesItemsDestinyItemComponentMetricObjective:
    r"""Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes."""
    
    activity_hash: Optional[int] = dataclasses.field(default=None)
    r"""If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved."""  
    complete: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the Objective is completed."""  
    completion_value: Optional[int] = dataclasses.field(default=None)
    r"""As of Forsaken, objectives' completion value is determined dynamically at runtime.
    This value represents the threshold of progress you need to surpass in order for this objective to be considered \"complete\".
    If you were using objective data, switch from using the DestinyObjectiveDefinition's \"completionValue\" to this value.
    """  
    destination_hash: Optional[int] = dataclasses.field(default=None)
    r"""If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved."""  
    objective_hash: Optional[int] = dataclasses.field(default=None)
    r"""The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data."""  
    progress: Optional[int] = dataclasses.field(default=None)
    r"""If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle before rendering progress."""  
    visible: Optional[bool] = dataclasses.field(default=None)
    r"""If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property."""  
    

@dataclasses.dataclass
class DestinyEntitiesItemsDestinyItemComponent:
    r"""The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component."""
    
    bind_status: Optional[int] = dataclasses.field(default=None)
    r"""If the item is bound to a location, it will be specified in this enum."""  
    bucket_hash: Optional[int] = dataclasses.field(default=None)
    r"""The hash identifier for the specific inventory bucket in which the item is located."""  
    expiration_date: Optional[datetime] = dataclasses.field(default=None)
    r"""If the item can expire, this is the date at which it will/did expire."""  
    is_wrapper: Optional[bool] = dataclasses.field(default=None)
    r"""If this is true, the object is actually a \\"wrapper\\" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be \\"opened\\" in game before you have and can use the item.
     Wrappers are an evolution of \"bundles\", which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you \"open\" it.
    """  
    item_hash: Optional[int] = dataclasses.field(default=None)
    r"""The identifier for the item's definition, which is where most of the useful static information for the item can be found."""  
    item_instance_id: Optional[int] = dataclasses.field(default=None)
    r"""If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size."""  
    item_value_visibility: Optional[list[bool]] = dataclasses.field(default=None)
    r"""If available, a list that describes which item values (rewards) should be shown (true) or hidden (false)."""  
    location: Optional[int] = dataclasses.field(default=None)
    r"""An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items."""  
    lockable: Optional[bool] = dataclasses.field(default=None)
    r"""If the item can be locked, this will indicate that state."""  
    metric_hash: Optional[int] = dataclasses.field(default=None)
    r"""The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate."""  
    metric_objective: Optional[DestinyEntitiesItemsDestinyItemComponentMetricObjective] = dataclasses.field(default=None)
    r"""The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate."""  
    override_style_item_hash: Optional[int] = dataclasses.field(default=None)
    r"""If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
    If you don't do this, certain items whose styles are being overridden by socketed items - such as the \"Recycle Shader\" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
    """  
    quantity: Optional[int] = dataclasses.field(default=None)
    r"""The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)"""  
    state: Optional[int] = dataclasses.field(default=None)
    r"""A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted."""  
    tooltip_notification_indexes: Optional[list[int]] = dataclasses.field(default=None)
    r"""If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item."""  
    transfer_status: Optional[int] = dataclasses.field(default=None)
    r"""If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer)."""  
    version_number: Optional[int] = dataclasses.field(default=None)
    r"""The version of this item, used to index into the versions list in the item definition quality block."""  
    