/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A sampling rule that services use to decide whether to instrument a request. Rule fields can match properties of the service, or properties of a request. The service can ignore rules that don't match its properties.
 */
export class CreateSamplingRuleRequestBodySamplingRule extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Attributes" })
  attributes?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "FixedRate" })
  fixedRate?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "HTTPMethod" })
  httpMethod?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Host" })
  host?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Priority" })
  priority?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ReservoirSize" })
  reservoirSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceARN" })
  resourceARN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleARN" })
  ruleARN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleName" })
  ruleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceName" })
  serviceName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceType" })
  serviceType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "URLPath" })
  urlPath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Version" })
  version?: number;
}

export class CreateSamplingRuleRequestBody extends SpeakeasyBase {
  /**
   * A sampling rule that services use to decide whether to instrument a request. Rule fields can match properties of the service, or properties of a request. The service can ignore rules that don't match its properties.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SamplingRule" })
  @Type(() => CreateSamplingRuleRequestBodySamplingRule)
  samplingRule: CreateSamplingRuleRequestBodySamplingRule;

  /**
   * <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>The following restrictions apply to tags:</p> <ul> <li> <p>Maximum number of user-applied tags per resource: 50</p> </li> <li> <p>Maximum tag key length: 128 Unicode characters</p> </li> <li> <p>Maximum tag value length: 256 Unicode characters</p> </li> <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li> </ul>
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "Tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];
}

export class CreateSamplingRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSamplingRuleRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateSamplingRuleResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSamplingRuleResult?: shared.CreateSamplingRuleResult;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * RuleLimitExceededException
   */
  @SpeakeasyMetadata()
  ruleLimitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottledException
   */
  @SpeakeasyMetadata()
  throttledException?: any;
}
