// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeNetworkInterfacesResultNetworkInterfacesAssociation - The association information for an Elastic IP address (IPv4) associated with the network interface.
type DescribeNetworkInterfacesResultNetworkInterfacesAssociation struct {
	AllocationID    *string
	AssociationID   *string
	CarrierIP       *string
	CustomerOwnedIP *string
	IPOwnerID       *string
	PublicDNSName   *string
	PublicIP        *string
}

// DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecificationEnaSrdUDPSpecification - ENA Express configuration for UDP network traffic.
type DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecificationEnaSrdUDPSpecification struct {
	EnaSrdUDPEnabled *bool
}

// DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecification - Configures ENA Express for the network interface that this action attaches to the instance.
type DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecification struct {
	EnaSrdEnabled          *bool
	EnaSrdUDPSpecification *DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecificationEnaSrdUDPSpecification
}

// DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum - The attachment state.
type DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum string

const (
	DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnumAttaching DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum = "attaching"
	DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnumAttached  DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum = "attached"
	DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnumDetaching DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum = "detaching"
	DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnumDetached  DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum = "detached"
)

func (e DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum) ToPointer() *DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum {
	return &e
}

func (e *DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "attaching":
		fallthrough
	case "attached":
		fallthrough
	case "detaching":
		fallthrough
	case "detached":
		*e = DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum: %v", v)
	}
}

// DescribeNetworkInterfacesResultNetworkInterfacesAttachment - The network interface attachment.
type DescribeNetworkInterfacesResultNetworkInterfacesAttachment struct {
	AttachTime          *time.Time
	AttachmentID        *string
	DeleteOnTermination *bool
	DeviceIndex         *int64
	EnaSrdSpecification *DescribeNetworkInterfacesResultNetworkInterfacesAttachmentEnaSrdSpecification
	InstanceID          *string
	InstanceOwnerID     *string
	NetworkCardIndex    *int64
	Status              *DescribeNetworkInterfacesResultNetworkInterfacesAttachmentStatusEnum
}

// DescribeNetworkInterfacesResultNetworkInterfacesGroups - Describes a security group.
type DescribeNetworkInterfacesResultNetworkInterfacesGroups struct {
	GroupID   *string
	GroupName *string
}

// DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum - The type of network interface.
type DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum string

const (
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumInterface                     DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "interface"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumNatGateway                    DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "natGateway"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumEfa                           DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "efa"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumTrunk                         DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "trunk"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumLoadBalancer                  DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "load_balancer"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumNetworkLoadBalancer           DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "network_load_balancer"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumVpcEndpoint                   DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "vpc_endpoint"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumBranch                        DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "branch"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumTransitGateway                DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "transit_gateway"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumLambda                        DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "lambda"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumQuicksight                    DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "quicksight"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumGlobalAcceleratorManaged      DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "global_accelerator_managed"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumAPIGatewayManaged             DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "api_gateway_managed"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumGatewayLoadBalancer           DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "gateway_load_balancer"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumGatewayLoadBalancerEndpoint   DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "gateway_load_balancer_endpoint"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumIotRulesManaged               DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "iot_rules_managed"
	DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnumAwsCodestarConnectionsManaged DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum = "aws_codestar_connections_managed"
)

func (e DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum) ToPointer() *DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum {
	return &e
}

func (e *DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "interface":
		fallthrough
	case "natGateway":
		fallthrough
	case "efa":
		fallthrough
	case "trunk":
		fallthrough
	case "load_balancer":
		fallthrough
	case "network_load_balancer":
		fallthrough
	case "vpc_endpoint":
		fallthrough
	case "branch":
		fallthrough
	case "transit_gateway":
		fallthrough
	case "lambda":
		fallthrough
	case "quicksight":
		fallthrough
	case "global_accelerator_managed":
		fallthrough
	case "api_gateway_managed":
		fallthrough
	case "gateway_load_balancer":
		fallthrough
	case "gateway_load_balancer_endpoint":
		fallthrough
	case "iot_rules_managed":
		fallthrough
	case "aws_codestar_connections_managed":
		*e = DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum: %v", v)
	}
}

// DescribeNetworkInterfacesResultNetworkInterfacesIpv4Prefixes - Describes an IPv4 prefix.
type DescribeNetworkInterfacesResultNetworkInterfacesIpv4Prefixes struct {
	Ipv4Prefix *string
}

// DescribeNetworkInterfacesResultNetworkInterfacesIpv6Addresses - Describes an IPv6 address associated with a network interface.
type DescribeNetworkInterfacesResultNetworkInterfacesIpv6Addresses struct {
	Ipv6Address *string
}

// DescribeNetworkInterfacesResultNetworkInterfacesIpv6Prefixes - Describes the IPv6 prefix.
type DescribeNetworkInterfacesResultNetworkInterfacesIpv6Prefixes struct {
	Ipv6Prefix *string
}

// DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddressesAssociation - The association information for an Elastic IP address (IPv4) associated with the network interface.
type DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddressesAssociation struct {
	AllocationID    *string
	AssociationID   *string
	CarrierIP       *string
	CustomerOwnedIP *string
	IPOwnerID       *string
	PublicDNSName   *string
	PublicIP        *string
}

// DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddresses - Describes the private IPv4 address of a network interface.
type DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddresses struct {
	Association      *DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddressesAssociation
	Primary          *bool
	PrivateDNSName   *string
	PrivateIPAddress *string
}

// DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum - The status of the network interface.
type DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum string

const (
	DescribeNetworkInterfacesResultNetworkInterfacesStatusEnumAvailable  DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum = "available"
	DescribeNetworkInterfacesResultNetworkInterfacesStatusEnumAssociated DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum = "associated"
	DescribeNetworkInterfacesResultNetworkInterfacesStatusEnumAttaching  DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum = "attaching"
	DescribeNetworkInterfacesResultNetworkInterfacesStatusEnumInUse      DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum = "in-use"
	DescribeNetworkInterfacesResultNetworkInterfacesStatusEnumDetaching  DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum = "detaching"
)

func (e DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum) ToPointer() *DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum {
	return &e
}

func (e *DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "associated":
		fallthrough
	case "attaching":
		fallthrough
	case "in-use":
		fallthrough
	case "detaching":
		*e = DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum: %v", v)
	}
}

// DescribeNetworkInterfacesResultNetworkInterfacesTagSet - Describes a tag.
type DescribeNetworkInterfacesResultNetworkInterfacesTagSet struct {
	Key   *string
	Value *string
}

// DescribeNetworkInterfacesResultNetworkInterfaces - Describes a network interface.
type DescribeNetworkInterfacesResultNetworkInterfaces struct {
	Association        *DescribeNetworkInterfacesResultNetworkInterfacesAssociation
	Attachment         *DescribeNetworkInterfacesResultNetworkInterfacesAttachment
	AvailabilityZone   *string
	DenyAllIgwTraffic  *bool
	Description        *string
	Groups             []DescribeNetworkInterfacesResultNetworkInterfacesGroups
	InterfaceType      *DescribeNetworkInterfacesResultNetworkInterfacesInterfaceTypeEnum
	Ipv4Prefixes       []DescribeNetworkInterfacesResultNetworkInterfacesIpv4Prefixes
	Ipv6Address        *string
	Ipv6Addresses      []DescribeNetworkInterfacesResultNetworkInterfacesIpv6Addresses
	Ipv6Native         *bool
	Ipv6Prefixes       []DescribeNetworkInterfacesResultNetworkInterfacesIpv6Prefixes
	MacAddress         *string
	NetworkInterfaceID *string
	OutpostArn         *string
	OwnerID            *string
	PrivateDNSName     *string
	PrivateIPAddress   *string
	PrivateIPAddresses []DescribeNetworkInterfacesResultNetworkInterfacesPrivateIPAddresses
	RequesterID        *string
	RequesterManaged   *bool
	SourceDestCheck    *bool
	Status             *DescribeNetworkInterfacesResultNetworkInterfacesStatusEnum
	SubnetID           *string
	TagSet             []DescribeNetworkInterfacesResultNetworkInterfacesTagSet
	VpcID              *string
}

// DescribeNetworkInterfacesResult - Success
type DescribeNetworkInterfacesResult struct {
	NetworkInterfaces []DescribeNetworkInterfacesResultNetworkInterfaces
	NextToken         *string
}
