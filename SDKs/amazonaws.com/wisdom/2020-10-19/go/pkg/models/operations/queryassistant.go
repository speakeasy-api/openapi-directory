// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type QueryAssistantPathParams struct {
	// The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
	AssistantID string `pathParam:"style=simple,explode=false,name=assistantId"`
}

type QueryAssistantQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type QueryAssistantHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type QueryAssistantRequestBody struct {
	// The maximum number of results to return per page.
	MaxResults *int64 `json:"maxResults,omitempty"`
	// The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
	NextToken *string `json:"nextToken,omitempty"`
	// The text to search for.
	QueryText string `json:"queryText"`
}

type QueryAssistantRequest struct {
	PathParams  QueryAssistantPathParams
	QueryParams QueryAssistantQueryParams
	Headers     QueryAssistantHeaders
	Request     QueryAssistantRequestBody `request:"mediaType=application/json"`
}

type QueryAssistantResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	QueryAssistantResponse *shared.QueryAssistantResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
