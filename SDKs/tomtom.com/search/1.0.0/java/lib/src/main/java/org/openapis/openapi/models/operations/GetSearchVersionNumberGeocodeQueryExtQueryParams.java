/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetSearchVersionNumberGeocodeQueryExtQueryParams {
    /**
     * Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=btmRight")
    public String btmRight;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withBtmRight(String btmRight) {
        this.btmRight = btmRight;
        return this;
    }
    
    /**
     * Comma separated string of country codes. This will limit the search to the specified countries.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=countrySet")
    public String countrySet;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withCountrySet(String countrySet) {
        this.countrySet = countrySet;
        return this;
    }
    
    /**
     * Indexes for which extended postal codes should be included in the results. Available indexes are:
     *   - &lt;b&gt;Addr&lt;/b&gt; = Address ranges
     *   - &lt;b&gt;Geo&lt;/b&gt; = Geographies
     *   - &lt;b&gt;PAD&lt;/b&gt; = Point Addresses
     *   - &lt;b&gt;POI&lt;/b&gt; = Points of Interest
     *   - &lt;b&gt;Str&lt;/b&gt; = Streets
     *   - &lt;b&gt;XStr&lt;/b&gt; = Cross Streets (intersections)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=extendedPostalCodesFor")
    public String extendedPostalCodesFor;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withExtendedPostalCodesFor(String extendedPostalCodesFor) {
        this.extendedPostalCodesFor = extendedPostalCodesFor;
        return this;
    }
    
    /**
     * Language in which search results should be returned. Should be one of &lt;a href="/search-api/search-api-documentation/supported-languages"&gt;supported IETF language tags&lt;/a&gt;, case insensitive.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=language")
    public String language;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * Latitude where results should be biased.
     * NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=lat")
    public Float lat;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withLat(Float lat) {
        this.lat = lat;
        return this;
    }
    
    /**
     * Maximum number of search results that will be returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Longitude where results should be biased
     * NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=lon")
    public Float lon;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withLon(Float lon) {
        this.lon = lon;
        return this;
    }
    
    /**
     * Starting offset of the returned results within the full result set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ofs")
    public Long ofs;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withOfs(Long ofs) {
        this.ofs = ofs;
        return this;
    }
    
    /**
     * If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=radius")
    public Long radius;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withRadius(Long radius) {
        this.radius = radius;
        return this;
    }
    
    /**
     * If the "storeResult" flag is set, the query will be interpreted as a stored geocode and will be billed according to the terms of use.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=storeResult")
    public Boolean storeResult;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withStoreResult(Boolean storeResult) {
        this.storeResult = storeResult;
        return this;
    }
    
    /**
     * Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=topLeft")
    public String topLeft;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withTopLeft(String topLeft) {
        this.topLeft = topLeft;
        return this;
    }
    
    /**
     * If the "typeahead" flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=typeahead")
    public Boolean typeahead;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withTypeahead(Boolean typeahead) {
        this.typeahead = typeahead;
        return this;
    }
    
    /**
     * Geopolitical View.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=view")
    public org.openapis.openapi.models.shared.ViewEnum view;
    public GetSearchVersionNumberGeocodeQueryExtQueryParams withView(org.openapis.openapi.models.shared.ViewEnum view) {
        this.view = view;
        return this;
    }
    
}
