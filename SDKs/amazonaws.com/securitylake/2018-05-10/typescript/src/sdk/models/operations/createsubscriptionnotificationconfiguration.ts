/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The HTTPS method used for the notification subscription.
 */
export enum CreateSubscriptionNotificationConfigurationRequestBodyHttpsMethodEnum {
  Post = "POST",
  Put = "PUT",
}

export class CreateSubscriptionNotificationConfigurationRequestBody extends SpeakeasyBase {
  /**
   * Create an Amazon Simple Queue Service queue.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createSqs" })
  createSqs?: boolean;

  /**
   * The key name for the notification subscription.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpsApiKeyName" })
  httpsApiKeyName?: string;

  /**
   * The key value for the notification subscription.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpsApiKeyValue" })
  httpsApiKeyValue?: string;

  /**
   * The HTTPS method used for the notification subscription.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpsMethod" })
  httpsMethod?: CreateSubscriptionNotificationConfigurationRequestBodyHttpsMethodEnum;

  /**
   * The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html">Managing data access</a> and <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html">Amazon Web Services Managed Policies</a> in the Amazon Security Lake User Guide.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;

  /**
   * The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionEndpoint" })
  subscriptionEndpoint?: string;
}

export class CreateSubscriptionNotificationConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSubscriptionNotificationConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The subscription ID for the notification subscription.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=subscriptionId",
  })
  subscriptionId: string;
}

export class CreateSubscriptionNotificationConfigurationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * AccountNotFoundException
   */
  @SpeakeasyMetadata()
  accountNotFoundException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSubscriptionNotificationConfigurationResponse?: shared.CreateSubscriptionNotificationConfigurationResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
