/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Most Docker Hub API endpoints require you to authenticate using your
 * Docker credentials before using them.
 * 
 * Additionally, similar to the Docker Hub UI features, API endpoint responses may vary depending 
 * on your plan (Free, Pro, or Team) and your account's permissions.
 * 
 * To learn more about the features available in each plan and to upgrade your existing plan, see [Docker Pricing](https://www.docker.com/pricing).
 * 
 */
public class Authentication {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Authentication(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Second factor authentication.
     * When user has 2FA enabled, this is the second call to perform after
     * `/v2/users/login` call.
     * 
     * Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.
     * 
     * The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.
     * 
     * Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostUsers2FALoginResponse postUsers2FALogin(org.openapis.openapi.models.shared.Users2FALoginRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/users/2fa-login");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostUsers2FALoginResponse res = new org.openapis.openapi.models.operations.PostUsers2FALoginResponse() {{
            postUsersLoginSuccessResponse = null;
            postUsers2FALoginErrorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PostUsersLoginSuccessResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PostUsersLoginSuccessResponse.class);
                res.postUsersLoginSuccessResponse = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PostUsers2FALoginErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PostUsers2FALoginErrorResponse.class);
                res.postUsers2FALoginErrorResponse = out;
            }
        }

        return res;
    }

    /**
     * Create an authentication token
     * Creates and returns a bearer token in JWT format that you can use to
     * authenticate with Docker Hub APIs.
     * 
     * The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.
     * 
     * Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostUsersLoginResponse postUsersLogin(org.openapis.openapi.models.shared.UsersLoginRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/users/login");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostUsersLoginResponse res = new org.openapis.openapi.models.operations.PostUsersLoginResponse() {{
            postUsersLoginSuccessResponse = null;
            postUsersLoginErrorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PostUsersLoginSuccessResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PostUsersLoginSuccessResponse.class);
                res.postUsersLoginSuccessResponse = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PostUsersLoginErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PostUsersLoginErrorResponse.class);
                res.postUsersLoginErrorResponse = out;
            }
        }

        return res;
    }
}