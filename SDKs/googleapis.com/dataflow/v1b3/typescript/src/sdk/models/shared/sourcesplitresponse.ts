/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DerivedSource } from "./derivedsource";
import { SourceSplitShard } from "./sourcesplitshard";
import { Expose, Type } from "class-transformer";

/**
 * Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed "as is" without splitting. "bundles" is ignored in this case. If this is SPLITTING_HAPPENED, then "bundles" contains a list of bundles into which the source was split.
 */
export enum SourceSplitResponseOutcomeEnum {
  SourceSplitOutcomeUnknown = "SOURCE_SPLIT_OUTCOME_UNKNOWN",
  SourceSplitOutcomeUseCurrent = "SOURCE_SPLIT_OUTCOME_USE_CURRENT",
  SourceSplitOutcomeSplittingHappened = "SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED",
}

/**
 * The response to a SourceSplitRequest.
 */
export class SourceSplitResponse extends SpeakeasyBase {
  /**
   * If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.
   */
  @SpeakeasyMetadata({ elemType: DerivedSource })
  @Expose({ name: "bundles" })
  @Type(() => DerivedSource)
  bundles?: DerivedSource[];

  /**
   * Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed "as is" without splitting. "bundles" is ignored in this case. If this is SPLITTING_HAPPENED, then "bundles" contains a list of bundles into which the source was split.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outcome" })
  outcome?: SourceSplitResponseOutcomeEnum;

  /**
   * DEPRECATED in favor of bundles.
   */
  @SpeakeasyMetadata({ elemType: SourceSplitShard })
  @Expose({ name: "shards" })
  @Type(() => SourceSplitShard)
  shards?: SourceSplitShard[];
}
