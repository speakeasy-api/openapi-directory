/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworkApplianceVpnSiteToSiteVpnRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs extends SpeakeasyBase {
  /**
   * The network ID of the hub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hubId" })
  hubId?: string;

  /**
   * Indicates whether default route traffic should be sent to this hub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useDefaultRoute" })
  useDefaultRoute?: boolean;
}

export class GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets extends SpeakeasyBase {
  /**
   * The CIDR notation subnet used within the VPN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localSubnet" })
  localSubnet?: string;

  /**
   * Indicates the presence of the subnet in the VPN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useVpn" })
  useVpn?: boolean;
}

/**
 * Successful operation
 */
export class GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON extends SpeakeasyBase {
  /**
   * The list of VPN hubs, in order of preference.
   */
  @SpeakeasyMetadata({
    elemType: GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs,
  })
  @Expose({ name: "hubs" })
  @Type(() => GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs)
  hubs?: GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs[];

  /**
   * The site-to-site VPN mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: string;

  /**
   * The list of subnets and their VPN presence.
   */
  @SpeakeasyMetadata({
    elemType: GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets,
  })
  @Expose({ name: "subnets" })
  @Type(() => GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets)
  subnets?: GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets[];
}

export class GetNetworkApplianceVpnSiteToSiteVpnResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject?: GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON;
}
