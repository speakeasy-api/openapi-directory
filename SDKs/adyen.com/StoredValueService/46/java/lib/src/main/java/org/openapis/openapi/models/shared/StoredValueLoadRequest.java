/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class StoredValueLoadRequest {
    @JsonProperty("amount")
    public Amount amount;

    public StoredValueLoadRequest withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The type of load you are trying to do, when absent we default to 'Load'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loadType")
    public StoredValueLoadRequestLoadTypeEnum loadType;

    public StoredValueLoadRequest withLoadType(StoredValueLoadRequestLoadTypeEnum loadType) {
        this.loadType = loadType;
        return this;
    }
    
    /**
     * The merchant account identifier, with which you want to process the transaction.
     */
    @JsonProperty("merchantAccount")
    public String merchantAccount;

    public StoredValueLoadRequest withMerchantAccount(String merchantAccount) {
        this.merchantAccount = merchantAccount;
        return this;
    }
    
    /**
     * The collection that contains the type of the payment method and its specific information if available
     */
    @JsonProperty("paymentMethod")
    public java.util.Map<String, String> paymentMethod;

    public StoredValueLoadRequest withPaymentMethod(java.util.Map<String, String> paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringDetailReference")
    public String recurringDetailReference;

    public StoredValueLoadRequest withRecurringDetailReference(String recurringDetailReference) {
        this.recurringDetailReference = recurringDetailReference;
        return this;
    }
    
    /**
     * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
     * If you need to provide multiple references for a transaction, separate them with hyphens ("-").
     * Maximum length: 80 characters.
     */
    @JsonProperty("reference")
    public String reference;

    public StoredValueLoadRequest withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
     * For the web service API, Adyen assumes Ecommerce shopper interaction by default.
     * 
     * This field has the following possible values:
     * * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
     * * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
     * * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
     * * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperInteraction")
    public StoredValueLoadRequestShopperInteractionEnum shopperInteraction;

    public StoredValueLoadRequest withShopperInteraction(StoredValueLoadRequestShopperInteractionEnum shopperInteraction) {
        this.shopperInteraction = shopperInteraction;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperReference")
    public String shopperReference;

    public StoredValueLoadRequest withShopperReference(String shopperReference) {
        this.shopperReference = shopperReference;
        return this;
    }
    
    /**
     * The physical store, for which this payment is processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("store")
    public String store;

    public StoredValueLoadRequest withStore(String store) {
        this.store = store;
        return this;
    }
    
    public StoredValueLoadRequest(@JsonProperty("amount") Amount amount, @JsonProperty("merchantAccount") String merchantAccount, @JsonProperty("paymentMethod") java.util.Map<String, String> paymentMethod, @JsonProperty("reference") String reference) {
        this.amount = amount;
        this.merchantAccount = merchantAccount;
        this.paymentMethod = paymentMethod;
        this.reference = reference;
  }
}
