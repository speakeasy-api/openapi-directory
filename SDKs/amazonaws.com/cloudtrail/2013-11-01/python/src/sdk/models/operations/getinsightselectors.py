"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getinsightselectorsrequest as shared_getinsightselectorsrequest
from ..shared import getinsightselectorsresponse as shared_getinsightselectorsresponse
from enum import Enum
from typing import Any, Optional

class GetInsightSelectorsXAmzTargetEnum(str, Enum):
    COM_AMAZONAWS_CLOUDTRAIL_V20131101_CLOUD_TRAIL_20131101_GET_INSIGHT_SELECTORS = 'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetInsightSelectors'


@dataclasses.dataclass
class GetInsightSelectorsRequest:
    
    get_insight_selectors_request: shared_getinsightselectorsrequest.GetInsightSelectorsRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: GetInsightSelectorsXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetInsightSelectorsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    cloud_trail_arn_invalid_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CloudTrailARNInvalidException"""  
    get_insight_selectors_response: Optional[shared_getinsightselectorsresponse.GetInsightSelectorsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    insight_not_enabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InsightNotEnabledException"""  
    invalid_trail_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTrailNameException"""  
    no_management_account_slr_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NoManagementAccountSLRExistsException"""  
    operation_not_permitted_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OperationNotPermittedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    trail_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TrailNotFoundException"""  
    unsupported_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedOperationException"""  
    