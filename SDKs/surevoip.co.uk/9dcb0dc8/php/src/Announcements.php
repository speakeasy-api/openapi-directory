<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Announcements 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an announcement audio file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomersAccountAnnouncementsAnnouncementIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomersAccountAnnouncementsAnnouncementIdResponse
     */
	public function deleteCustomersAccountAnnouncementsAnnouncementId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomersAccountAnnouncementsAnnouncementIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomersAccountAnnouncementsAnnouncementIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{account}/announcements/{announcement_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomersAccountAnnouncementsAnnouncementIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomersAccountAnnouncementsAnnouncementIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneannouncementsPostResponses403ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneannouncementsPostResponses403ContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List global announcements
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnnouncementsResponse
     */
	public function getAnnouncements(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnnouncementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/announcements');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnnouncementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneGetResponses200ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneGetResponses200ContentApplication1jsonSchema', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List of announcement audio files
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsResponse
     */
	public function getCustomersAccountAnnouncements(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{account}/announcements', \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCustomersAccountAnnouncements200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncements200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneannouncementsPostResponses403ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneannouncementsPostResponses403ContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Represents an announcement audio file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsAnnouncementIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsAnnouncementIdResponse
     */
	public function getCustomersAccountAnnouncementsAnnouncementId(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsAnnouncementIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsAnnouncementIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{account}/announcements/{announcement_id}', \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsAnnouncementIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsAnnouncementIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneannouncementsPostResponses201ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneannouncementsPostResponses201ContentApplication1jsonSchema', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCustomersAccountAnnouncementsAnnouncementId404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCustomersAccountAnnouncementsAnnouncementId404ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new announcement audio file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAnnouncementsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAnnouncementsResponse
     */
	public function postAnnouncements(
        \OpenAPI\OpenAPI\Models\Operations\PostAnnouncementsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAnnouncementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/announcements');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAnnouncementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAnnouncements201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAnnouncements201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAnnouncements400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAnnouncements400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAnnouncements403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAnnouncements403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneannouncementsPostResponses403ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneannouncementsPostResponses403ContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
}