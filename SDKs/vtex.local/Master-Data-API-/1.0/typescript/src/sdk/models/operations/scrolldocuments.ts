/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class ScrolldocumentsRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Type of the content being sent.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;

  /**
   * Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=REST-Range",
  })
  restRange: string;

  /**
   * Fields that should be returned by document. Separate fields' names with commas. For example `_fields=email,firstName,document`. You can also use `_all` to fetch all fields.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_fields",
  })
  fields?: string;

  /**
   * String to search. Use quotes for a partial query. For example, `_keyword=Maria` or `_keyword="Maria"`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_keyword",
  })
  keyword?: string;

  /**
   * Name of the schema the document to be created needs to be compliant with.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_schema",
  })
  schema?: string;

  /**
   * Sets sorting mode in two parts. The first part is the name of the field you want to sort by. In the second part, use `ASC` for ascending or `DESC` for descending.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=_sort" })
  sort?: string;

  /**
   * Value of the header `X-VTEX-MD-TOKEN` returned in your first request. Send its value in this query string in the subsequent requests. The token has a timeout of 10 minutes, which refreshes after each new request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_token",
  })
  token?: string;

  /**
   * Filter specification.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_where",
  })
  where?: string;

  /**
   * Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=dataEntityName",
  })
  dataEntityName: string;
}

export class ScrolldocumentsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Too Many Requests
   */
  @SpeakeasyMetadata()
  scrolldocuments429ApplicationJSONAny?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
