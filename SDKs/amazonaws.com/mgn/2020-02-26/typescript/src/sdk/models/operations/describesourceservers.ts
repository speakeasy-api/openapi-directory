/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Request to filter Source Servers list.
 */
export class DescribeSourceServersRequestBodyFilters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "applicationIDs" })
  applicationIDs?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "isArchived" })
  isArchived?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "lifeCycleStates" })
  lifeCycleStates?: shared.LifeCycleStateEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "replicationTypes" })
  replicationTypes?: shared.ReplicationTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "sourceServerIDs" })
  sourceServerIDs?: string[];
}

export class DescribeSourceServersRequestBody extends SpeakeasyBase {
  /**
   * Request to filter Source Servers list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filters" })
  @Type(() => DescribeSourceServersRequestBodyFilters)
  filters?: DescribeSourceServersRequestBodyFilters;

  /**
   * Request to filter Source Servers list by maximum results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * Request to filter Source Servers list by next token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}

export class DescribeSourceServersRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: DescribeSourceServersRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class DescribeSourceServersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  describeSourceServersResponse?: shared.DescribeSourceServersResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UninitializedAccountException
   */
  @SpeakeasyMetadata()
  uninitializedAccountException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
