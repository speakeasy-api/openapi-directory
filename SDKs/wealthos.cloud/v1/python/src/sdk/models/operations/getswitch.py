"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetSwitchSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetSwitchRequest:
    
    switch_transaction_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'switch_transaction_id', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the switch instruction"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    include_details: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_details', 'style': 'form', 'explode': True }})
    r"""If set to `true` details of individual buy and sell (child) transactions will be included"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetSwitch409ApplicationJSONStatusEnum(str, Enum):
    r"""Current status of the original request"""
    PROCESSING = 'PROCESSING'
    COMPLETE = 'COMPLETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch409ApplicationJSON:
    r"""Duplicate request"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    status: GetSwitch409ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the original request"""  
    response: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""Stringified original response body if status is `COMPLETE`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum(str, Enum):
    r"""Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`"""
    PERCENTAGE = 'percentage'
    UNIT = 'unit'
    VALUE = 'value'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest:
    r"""Each individual buy side and sell side instruction of the Switch request"""
    
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})
    r"""Identifier of the investment product sold or bought. If the instruction is to use a cash holding (relevant only for sell instruction) this must be `cash`"""  
    mode: GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode') }})
    r"""Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`"""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""value according to the mode. e.g. mode `percentage` and value `10` implies 10%"""  
    
class GetSwitch200ApplicationJSONOriginEnum(str, Enum):
    r"""Describe the origin from where the switch transaction is triggered"""
    API = 'api'
    REBALANCE = 'rebalance'

class GetSwitch200ApplicationJSONStatusEnum(str, Enum):
    r"""Status of the Switch instruction"""
    INITIATED = 'initiated'
    SELL_IN_PROGRESS = 'sell_in_progress'
    BUY_IN_PROGRESS = 'buy_in_progress'
    COMPLETED = 'completed'
    FAILED = 'failed'

class GetSwitch200ApplicationJSONTransactionsSideEnum(str, Enum):
    r"""Side of the transaction"""
    BUY = 'buy'
    SELL = 'sell'

class GetSwitch200ApplicationJSONTransactionsStatusEnum(str, Enum):
    INSTRUCTED = 'instructed'
    PRICED = 'priced'
    SETTLED = 'settled'
    REJECTED = 'rejected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch200ApplicationJSONTransactions:
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time of transaction creation"""  
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})
    r"""Identifier of investment product that is bought or sold."""  
    side: GetSwitch200ApplicationJSONTransactionsSideEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('side') }})
    r"""Side of the transaction"""  
    status: GetSwitch200ApplicationJSONTransactionsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""Unique identifier of the transaction"""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Executed price of the transaction"""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""quantity (in units)"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Monetary value of the transaction"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSwitch200ApplicationJSON:
    r"""success"""
    
    buy_instructions: list[GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy_instructions') }})  
    origin: GetSwitch200ApplicationJSONOriginEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin') }})
    r"""Describe the origin from where the switch transaction is triggered"""  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})
    r"""Identifier of the pot the instruction is sent to"""  
    sell_instructions: list[GetSwitch200ApplicationJSONEachBuyOrSellInstructionOfTheSwitchRequest] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sell_instructions') }})  
    status: GetSwitch200ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Switch instruction"""  
    switch_transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switch_transaction_id') }})
    r"""Unique identifier of the switch instruction"""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""Will indicate the date where this record was created"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Failure reason (shown only for switch transactions in `failed` state)"""  
    transactions: Optional[list[GetSwitch200ApplicationJSONTransactions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactions'), 'exclude': lambda f: f is None }})
    r"""Array with status of all buy and sell transactions. Will be sent only if `include_details` = true."""  
    

@dataclasses.dataclass
class GetSwitchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_switch_200_application_json_object: Optional[GetSwitch200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    get_switch_400_application_json_object: Optional[GetSwitch400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    get_switch_401_application_json_object: Optional[GetSwitch401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_switch_403_application_json_object: Optional[GetSwitch403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_switch_404_application_json_object: Optional[GetSwitch404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_switch_409_application_json_object: Optional[GetSwitch409ApplicationJSON] = dataclasses.field(default=None)
    r"""Duplicate request"""  
    get_switch_429_application_json_object: Optional[GetSwitch429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_switch_500_application_json_object: Optional[GetSwitch500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    