// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TypeaheadSafeModeEnum - Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **show_podcasts** is *1*.
type TypeaheadSafeModeEnum string

const (
	TypeaheadSafeModeEnumZero TypeaheadSafeModeEnum = "0"
	TypeaheadSafeModeEnumOne  TypeaheadSafeModeEnum = "1"
)

func (e *TypeaheadSafeModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = TypeaheadSafeModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeaheadSafeModeEnum: %s", s)
	}
}

// TypeaheadShowGenresEnum - Whether or not to autosuggest genres. 1 is yes, 0 is no.
type TypeaheadShowGenresEnum string

const (
	TypeaheadShowGenresEnumZero TypeaheadShowGenresEnum = "0"
	TypeaheadShowGenresEnumOne  TypeaheadShowGenresEnum = "1"
)

func (e *TypeaheadShowGenresEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = TypeaheadShowGenresEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeaheadShowGenresEnum: %s", s)
	}
}

// TypeaheadShowPodcastsEnum - Autosuggest podcasts. This only searches podcast title and publisher and returns very limited info of 5 podcasts. 1 is yes, 0 is no. It's a bit slow to autosuggest podcasts, so we turn it off by default. If show_podcasts=1, you can also pass iTunes id (e.g., 474722933) to the q parameter to fetch podcast meta data.
type TypeaheadShowPodcastsEnum string

const (
	TypeaheadShowPodcastsEnumZero TypeaheadShowPodcastsEnum = "0"
	TypeaheadShowPodcastsEnumOne  TypeaheadShowPodcastsEnum = "1"
)

func (e *TypeaheadShowPodcastsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = TypeaheadShowPodcastsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeaheadShowPodcastsEnum: %s", s)
	}
}

type TypeaheadRequest struct {
	// Get API Key on listennotes.com/api
	XListenAPIKey string `header:"style=simple,explode=false,name=X-ListenAPI-Key"`
	// Search term, e.g., person, place, topic... You can use double quotes to do verbatim match, e.g., "game of thrones". Otherwise, it's fuzzy search.
	//
	Q string `queryParam:"style=form,explode=true,name=q"`
	// Whether or not to exclude podcasts/episodes with explicit language. 1 is yes and 0 is no. It works only when **show_podcasts** is *1*.
	//
	SafeMode *TypeaheadSafeModeEnum `queryParam:"style=form,explode=true,name=safe_mode"`
	// Whether or not to autosuggest genres. 1 is yes, 0 is no.
	//
	ShowGenres *TypeaheadShowGenresEnum `queryParam:"style=form,explode=true,name=show_genres"`
	// Autosuggest podcasts. This only searches podcast title and publisher and returns very limited info of 5 podcasts. 1 is yes, 0 is no. It's a bit slow to autosuggest podcasts, so we turn it off by default. If show_podcasts=1, you can also pass iTunes id (e.g., 474722933) to the q parameter to fetch podcast meta data.
	//
	ShowPodcasts *TypeaheadShowPodcastsEnum `queryParam:"style=form,explode=true,name=show_podcasts"`
}

type TypeaheadResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TypeaheadResponse *shared.TypeaheadResponse
}
