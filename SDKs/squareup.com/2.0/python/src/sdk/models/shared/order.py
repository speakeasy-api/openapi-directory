"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from ..shared import orderfulfillment as shared_orderfulfillment
from ..shared import orderlineitem as shared_orderlineitem
from ..shared import orderlineitemdiscount as shared_orderlineitemdiscount
from ..shared import orderlineitemtax as shared_orderlineitemtax
from ..shared import ordermoneyamounts as shared_ordermoneyamounts
from ..shared import orderpricingoptions as shared_orderpricingoptions
from ..shared import orderreturn as shared_orderreturn
from ..shared import orderreward as shared_orderreward
from ..shared import orderroundingadjustment as shared_orderroundingadjustment
from ..shared import orderservicecharge as shared_orderservicecharge
from ..shared import ordersource as shared_ordersource
from ..shared import refund as shared_refund
from ..shared import tender as shared_tender
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Order:
    r"""Contains all information related to a single order to process with Square,
    including line items that specify the products to purchase. `Order` objects also
    include information about any associated tenders, refunds, and returns.
    
    All Connect V2 Transactions have all been converted to Orders including all associated
    itemization data.
    """
    
    location_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id') }})
    r"""The ID of the seller location that this order is associated with."""  
    closed_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example \\"2016-09-04T23:59:33.123Z\\")."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp for when the order was created, in RFC 3339 format (for example, \\"2016-09-04T23:59:33.123Z\\")."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
    
    __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
    to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the 
    `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the 
    creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
    """  
    discounts: Optional[list[shared_orderlineitemdiscount.OrderLineItemDiscount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discounts'), 'exclude': lambda f: f is None }})
    r"""The list of all discounts associated with the order.
    
    Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
    an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
    For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
    for every line item.
    
    __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
    `line_items.discounts` field results in an error. Use `line_items.applied_discounts`
    instead.
    """  
    fulfillments: Optional[list[shared_orderfulfillment.OrderFulfillment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfillments'), 'exclude': lambda f: f is None }})
    r"""Details about order fulfillment.
    
    Orders can only be created with at most one fulfillment. However, orders returned
    by the API might contain multiple fulfillments.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The order's unique ID."""  
    line_items: Optional[list[shared_orderlineitem.OrderLineItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_items'), 'exclude': lambda f: f is None }})
    r"""The line items included in the order."""  
    metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Application-defined data attached to this order. Metadata fields are intended
    to store descriptive references or associations with an entity in another system or store brief
    information about the object. Square does not process this field; it only stores and returns it
    in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    identifiable information or card details).
    
    Keys written by applications must be 60 characters or less and must be in the character set
    `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    with a namespace, separated from the key with a ':' character.
    
    Values have a maximum length of 255 characters.
    
    An application can have up to 10 entries per metadata field.
    
    Entries written by applications are private and can only be read or modified by the same
    application.
    
    For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    """  
    net_amounts: Optional[shared_ordermoneyamounts.OrderMoneyAmounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_amounts'), 'exclude': lambda f: f is None }})
    r"""A collection of various money amounts."""  
    pricing_options: Optional[shared_orderpricingoptions.OrderPricingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing_options'), 'exclude': lambda f: f is None }})
    r"""Pricing options for an order. The options affect how the order's price is calculated.
    They can be used, for example, to apply automatic price adjustments that are based on preconfigured
    [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
    """  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""A client-specified ID to associate an entity in another system
    with this order.
    """  
    refunds: Optional[list[shared_refund.Refund]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunds'), 'exclude': lambda f: f is None }})
    r"""The refunds that are part of this order."""  
    return_amounts: Optional[shared_ordermoneyamounts.OrderMoneyAmounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_amounts'), 'exclude': lambda f: f is None }})
    r"""A collection of various money amounts."""  
    returns: Optional[list[shared_orderreturn.OrderReturn]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returns'), 'exclude': lambda f: f is None }})
    r"""A collection of items from sale orders being returned in this one. Normally part of an
    itemized return or exchange. There is exactly one `Return` object per sale `Order` being
    referenced.
    """  
    rewards: Optional[list[shared_orderreward.OrderReward]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rewards'), 'exclude': lambda f: f is None }})
    r"""A set-like list of Rewards that have been added to the Order."""  
    rounding_adjustment: Optional[shared_orderroundingadjustment.OrderRoundingAdjustment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rounding_adjustment'), 'exclude': lambda f: f is None }})
    r"""A rounding adjustment of the money being returned. Commonly used to apply cash rounding
    when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
    """  
    service_charges: Optional[list[shared_orderservicecharge.OrderServiceCharge]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_charges'), 'exclude': lambda f: f is None }})
    r"""A list of service charges applied to the order."""  
    source: Optional[shared_ordersource.OrderSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Represents the origination details of an order."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`."""  
    taxes: Optional[list[shared_orderlineitemtax.OrderLineItemTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxes'), 'exclude': lambda f: f is None }})
    r"""The list of all taxes associated with the order.
    
    Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
    `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
    with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
    
    On reads, each tax in the list includes the total amount of that tax applied to the order.
    
    __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
    `line_items.taxes` field results in an error. Use `line_items.applied_taxes`
    instead.
    """  
    tenders: Optional[list[shared_tender.Tender]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenders'), 'exclude': lambda f: f is None }})
    r"""The tenders that were used to pay for the order."""  
    total_discount_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_discount_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    total_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    total_service_charge_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_service_charge_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    total_tax_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_tax_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    total_tip_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_tip_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp for when the order was last updated, in RFC 3339 format (for example, \\"2016-09-04T23:59:33.123Z\\")."""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version number, which is incremented each time an update is committed to the order.
    Orders not created through the API do not include a version number and
    therefore cannot be updated.
    
    [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
    """  
    