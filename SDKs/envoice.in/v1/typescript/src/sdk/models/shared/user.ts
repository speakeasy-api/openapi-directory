/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ExternalConnection } from "./externalconnection";
import { SubscriptionPlan } from "./subscriptionplan";
import { UserSettings } from "./usersettings";
import { Expose, Transform, Type } from "class-transformer";

export enum UserStatusEnum {
  Normal = "Normal",
  Fraudlent = "Fraudlent",
  Locked = "Locked",
}

export enum UserTypeEnum {
  Anonymous = "Anonymous",
  Customer = "Customer",
  SystemAdministrator = "SystemAdministrator",
  Collaborator = "Collaborator",
}

export enum UserYearsOfExperienceEnum {
  One = "One",
  OneToThree = "OneToThree",
  ThreeToFive = "ThreeToFive",
  SixPlus = "SixPlus",
}

export class User extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ActionNotificationsLastReadOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  actionNotificationsLastReadOn?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Email" })
  email?: string;

  @SpeakeasyMetadata({ elemType: ExternalConnection })
  @Expose({ name: "ExternalConnections" })
  @Type(() => ExternalConnection)
  externalConnections?: ExternalConnection[];

  @SpeakeasyMetadata()
  @Expose({ name: "HasBeenOnboarded" })
  hasBeenOnboarded?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "IsLocked" })
  isLocked?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "IsVerified" })
  isVerified?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "KnowledgeNotificationsLastReadOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  knowledgeNotificationsLastReadOn?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastSeenOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastSeenOn?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Password" })
  password?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PasswordSalt" })
  passwordSalt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ReferralPath" })
  referralPath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ReferredUsers" })
  referredUsers?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ReferrerKey" })
  referrerKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Settings" })
  @Type(() => UserSettings)
  settings?: UserSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: UserStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "SubscriptionPlan" })
  @Type(() => SubscriptionPlan)
  subscriptionPlan?: SubscriptionPlan;

  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type?: UserTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Username" })
  username?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "VerifiedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  verifiedOn?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "YearsOfExperience" })
  yearsOfExperience?: UserYearsOfExperienceEnum;
}
