<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GETModifySubnetAttributeRequest
{
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Action')]
    public GETModifySubnetAttributeActionEnum $action;
    
    /**
     * <p>Specify <code>true</code> to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address). </p> <p>If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version <code>2016-11-15</code> or later of the Amazon EC2 API.</p>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeAssignIpv6AddressOnCreation $assignIpv6AddressOnCreation
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=AssignIpv6AddressOnCreation')]
    public ?GETModifySubnetAttributeAssignIpv6AddressOnCreation $assignIpv6AddressOnCreation = null;
    
    /**
     * <p>The customer-owned IPv4 address pool associated with the subnet.</p> <p>You must set this value when you specify <code>true</code> for <code>MapCustomerOwnedIpOnLaunch</code>.</p>
     * 
     * @var ?string $customerOwnedIpv4Pool
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=CustomerOwnedIpv4Pool')]
    public ?string $customerOwnedIpv4Pool = null;
    
    /**
     *  Specify <code>true</code> to indicate that local network interfaces at the current position should be disabled. 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeDisableLniAtDeviceIndex $disableLniAtDeviceIndex
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=DisableLniAtDeviceIndex')]
    public ?GETModifySubnetAttributeDisableLniAtDeviceIndex $disableLniAtDeviceIndex = null;
    
    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeEnableDns64 $enableDns64
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=EnableDns64')]
    public ?GETModifySubnetAttributeEnableDns64 $enableDns64 = null;
    
    /**
     *  Indicates the device position for local network interfaces in this subnet. For example, <code>1</code> indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0). 
     * 
     * @var ?int $enableLniAtDeviceIndex
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=EnableLniAtDeviceIndex')]
    public ?int $enableLniAtDeviceIndex = null;
    
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch $enableResourceNameDnsAAAARecordOnLaunch
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=EnableResourceNameDnsAAAARecordOnLaunch')]
    public ?GETModifySubnetAttributeEnableResourceNameDNSAaaaRecordOnLaunch $enableResourceNameDnsAAAARecordOnLaunch = null;
    
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch $enableResourceNameDnsARecordOnLaunch
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=EnableResourceNameDnsARecordOnLaunch')]
    public ?GETModifySubnetAttributeEnableResourceNameDNSARecordOnLaunch $enableResourceNameDnsARecordOnLaunch = null;
    
    /**
     * <p>Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address.</p> <p>When this value is <code>true</code>, you must specify the customer-owned IP pool using <code>CustomerOwnedIpv4Pool</code>.</p>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch $mapCustomerOwnedIpOnLaunch
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=MapCustomerOwnedIpOnLaunch')]
    public ?GETModifySubnetAttributeMapCustomerOwnedIPOnLaunch $mapCustomerOwnedIpOnLaunch = null;
    
    /**
     * Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeMapPublicIPOnLaunch $mapPublicIpOnLaunch
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=MapPublicIpOnLaunch')]
    public ?GETModifySubnetAttributeMapPublicIPOnLaunch $mapPublicIpOnLaunch = null;
    
    /**
     * The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum $privateDnsHostnameTypeOnLaunch
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=PrivateDnsHostnameTypeOnLaunch')]
    public ?GETModifySubnetAttributePrivateDNSHostnameTypeOnLaunchEnum $privateDnsHostnameTypeOnLaunch = null;
    
    /**
     * The ID of the subnet.
     * 
     * @var string $subnetId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=SubnetId')]
    public string $subnetId;
    
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Version')]
    public GETModifySubnetAttributeVersionEnum $version;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Algorithm')]
    public ?string $xAmzAlgorithm = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Content-Sha256')]
    public ?string $xAmzContentSha256 = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Credential')]
    public ?string $xAmzCredential = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Date')]
    public ?string $xAmzDate = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Security-Token')]
    public ?string $xAmzSecurityToken = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Signature')]
    public ?string $xAmzSignature = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-SignedHeaders')]
    public ?string $xAmzSignedHeaders = null;
    
	public function __construct()
	{
		$this->action = \OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeActionEnum::MODIFY_SUBNET_ATTRIBUTE;
		$this->assignIpv6AddressOnCreation = null;
		$this->customerOwnedIpv4Pool = null;
		$this->disableLniAtDeviceIndex = null;
		$this->enableDns64 = null;
		$this->enableLniAtDeviceIndex = null;
		$this->enableResourceNameDnsAAAARecordOnLaunch = null;
		$this->enableResourceNameDnsARecordOnLaunch = null;
		$this->mapCustomerOwnedIpOnLaunch = null;
		$this->mapPublicIpOnLaunch = null;
		$this->privateDnsHostnameTypeOnLaunch = null;
		$this->subnetId = "";
		$this->version = \OpenAPI\OpenAPI\Models\Operations\GETModifySubnetAttributeVersionEnum::TWO_THOUSAND_AND_SIXTEEN1115;
		$this->xAmzAlgorithm = null;
		$this->xAmzContentSha256 = null;
		$this->xAmzCredential = null;
		$this->xAmzDate = null;
		$this->xAmzSecurityToken = null;
		$this->xAmzSignature = null;
		$this->xAmzSignedHeaders = null;
	}
}
