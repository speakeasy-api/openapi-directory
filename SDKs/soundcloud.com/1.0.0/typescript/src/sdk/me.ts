/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Own User Endpoints.
 */
export class Me {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a user who is followed by the authenticated user.
   */
  deleteMeFollowingsUserId(
    req: operations.DeleteMeFollowingsUserIdRequest,
    security: operations.DeleteMeFollowingsUserIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteMeFollowingsUserIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteMeFollowingsUserIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/followings/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteMeFollowingsUserIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteMeFollowingsUserIdResponse =
        new operations.DeleteMeFollowingsUserIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case [404, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the authenticated userâ€™s information.
   */
  getMe(config?: AxiosRequestConfig): Promise<operations.GetMeResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeResponse = new operations.GetMeResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.completeUser = utils.objectToClass(
              httpRes?.data,
              shared.CompleteUser
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the authenticated user's activities.
   */
  getMeActivities(
    req: operations.GetMeActivitiesRequest,
    security: operations.GetMeActivitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeActivitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeActivitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/activities";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeActivitiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeActivitiesResponse =
        new operations.GetMeActivitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.activities = utils.objectToClass(
              httpRes?.data,
              shared.Activities
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Recent the authenticated user's activities.
   */
  getMeActivitiesAllOwn(
    req: operations.GetMeActivitiesAllOwnRequest,
    security: operations.GetMeActivitiesAllOwnSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeActivitiesAllOwnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeActivitiesAllOwnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/activities/all/own";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeActivitiesAllOwnSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeActivitiesAllOwnResponse =
        new operations.GetMeActivitiesAllOwnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.activities = utils.objectToClass(
              httpRes?.data,
              shared.Activities
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the authenticated user's recent track related activities.
   */
  getMeActivitiesTracks(
    req: operations.GetMeActivitiesTracksRequest,
    security: operations.GetMeActivitiesTracksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeActivitiesTracksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeActivitiesTracksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/activities/tracks";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeActivitiesTracksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeActivitiesTracksResponse =
        new operations.GetMeActivitiesTracksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.activities = utils.objectToClass(
              httpRes?.data,
              shared.Activities
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of the authenticated user's connected social accounts.
   */
  getMeConnections(
    req: operations.GetMeConnectionsRequest,
    security: operations.GetMeConnectionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeConnectionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeConnectionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/connections";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeConnectionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeConnectionsResponse =
        new operations.GetMeConnectionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.connections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.connections = utils.objectToClass(
              httpRes?.data,
              shared.Connection,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the authenticated user's connected social account.
   */
  getMeConnectionsConnectionId(
    req: operations.GetMeConnectionsConnectionIdRequest,
    security: operations.GetMeConnectionsConnectionIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeConnectionsConnectionIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeConnectionsConnectionIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/connections/{connection_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeConnectionsConnectionIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeConnectionsConnectionIdResponse =
        new operations.GetMeConnectionsConnectionIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.connection = utils.objectToClass(
              httpRes?.data,
              shared.Connection
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns userâ€™s favorites ids. (use /me/likes/tracks instead to fetch the authenticated user's likes)
   */
  getMeFavoritesIds(
    req: operations.GetMeFavoritesIdsRequest,
    security: operations.GetMeFavoritesIdsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeFavoritesIdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeFavoritesIdsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/favorites/ids";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeFavoritesIdsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeFavoritesIdsResponse =
        new operations.GetMeFavoritesIdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of users who are following the authenticated user.
   */
  getMeFollowers(
    req: operations.GetMeFollowersRequest,
    security: operations.GetMeFollowersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeFollowersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeFollowersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/followers";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeFollowersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeFollowersResponse =
        new operations.GetMeFollowersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getMeFollowers200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a user who is following the authenticated user. (use /users/{user_id} instead, to fetch the user details)
   */
  getMeFollowersFollowerId(
    req: operations.GetMeFollowersFollowerIdRequest,
    security: operations.GetMeFollowersFollowerIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeFollowersFollowerIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeFollowersFollowerIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/followers/{follower_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeFollowersFollowerIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeFollowersFollowerIdResponse =
        new operations.GetMeFollowersFollowerIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of users who are followed by the authenticated user.
   */
  getMeFollowings(
    req: operations.GetMeFollowingsRequest,
    security: operations.GetMeFollowingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeFollowingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeFollowingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/followings";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeFollowingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeFollowingsResponse =
        new operations.GetMeFollowingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getMeFollowings200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of recent tracks from users followed by the authenticated user.
   */
  getMeFollowingsTracks(
    req: operations.GetMeFollowingsTracksRequest,
    security: operations.GetMeFollowingsTracksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeFollowingsTracksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeFollowingsTracksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/followings/tracks";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeFollowingsTracksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeFollowingsTracksResponse =
        new operations.GetMeFollowingsTracksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.tracksList = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tracksList = utils.objectToClass(
              httpRes?.data,
              shared.Track,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a user who is followed by the authenticated user. (use /users/{user_id} instead, to fetch the user details)
   */
  getMeFollowingsUserId(
    req: operations.GetMeFollowingsUserIdRequest,
    security: operations.GetMeFollowingsUserIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeFollowingsUserIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeFollowingsUserIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/followings/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeFollowingsUserIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeFollowingsUserIdResponse =
        new operations.GetMeFollowingsUserIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of favorited or liked tracks of the authenticated user.
   */
  getMeLikesTracks(
    req: operations.GetMeLikesTracksRequest,
    security: operations.GetMeLikesTracksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeLikesTracksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeLikesTracksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/likes/tracks";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeLikesTracksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeLikesTracksResponse =
        new operations.GetMeLikesTracksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getMeLikesTracks200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns userâ€™s playlists (sets).
   *
   * @remarks
   * Returns playlist info, playlist tracks and tracks owner info.
   */
  getMePlaylists(
    req: operations.GetMePlaylistsRequest,
    security: operations.GetMePlaylistsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMePlaylistsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMePlaylistsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/playlists";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMePlaylistsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMePlaylistsResponse =
        new operations.GetMePlaylistsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.playlistsArray = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playlistsArray = utils.objectToClass(
              httpRes?.data,
              shared.Playlist,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns playlist. (use /playlists/{playlist_id} instead, to fetch the playlist details)
   */
  getMePlaylistsPlaylistId(
    req: operations.GetMePlaylistsPlaylistIdRequest,
    security: operations.GetMePlaylistsPlaylistIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMePlaylistsPlaylistIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMePlaylistsPlaylistIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/playlists/{playlist_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMePlaylistsPlaylistIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMePlaylistsPlaylistIdResponse =
        new operations.GetMePlaylistsPlaylistIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.playlist = utils.objectToClass(httpRes?.data, shared.Playlist);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of user's tracks.
   */
  getMeTracks(
    req: operations.GetMeTracksRequest,
    security: operations.GetMeTracksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeTracksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeTracksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/tracks";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeTracksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeTracksResponse =
        new operations.GetMeTracksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getMeTracks200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a specified track. (use /tracks/{track_id} instead, to fetch the track details)
   */
  getMeTracksTrackId(
    req: operations.GetMeTracksTrackIdRequest,
    security: operations.GetMeTracksTrackIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMeTracksTrackIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMeTracksTrackIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/tracks/{track_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMeTracksTrackIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeTracksTrackIdResponse =
        new operations.GetMeTracksTrackIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.track = utils.objectToClass(httpRes?.data, shared.Track);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Follows a user.
   */
  putMeFollowingsUserId(
    req: operations.PutMeFollowingsUserIdRequest,
    security: operations.PutMeFollowingsUserIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutMeFollowingsUserIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutMeFollowingsUserIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/followings/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutMeFollowingsUserIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutMeFollowingsUserIdResponse =
        new operations.PutMeFollowingsUserIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
