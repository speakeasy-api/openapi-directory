/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Form } from "./form";
import { OutdatedLibrary } from "./outdatedlibrary";
import { ViolatingResource } from "./violatingresource";
import { VulnerableHeaders } from "./vulnerableheaders";
import { VulnerableParameters } from "./vulnerableparameters";
import { Xss } from "./xss";
import { Xxe } from "./xxe";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The severity level of the reported vulnerability.
 */
export enum FindingSeverityEnum {
  SeverityUnspecified = "SEVERITY_UNSPECIFIED",
  Critical = "CRITICAL",
  High = "HIGH",
  Medium = "MEDIUM",
  Low = "LOW",
}

/**
 * A Finding resource represents a vulnerability instance identified during a ScanRun.
 */
export class Finding extends SpeakeasyBase {
  /**
   * Output only. The body of the request that triggered the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * Output only. The description of the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Output only. The URL where the browser lands when the vulnerability is detected.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finalUrl" })
  finalUrl?: string;

  /**
   * Output only. The type of the Finding. Detailed and up-to-date information on findings can be found here: https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner-findings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "findingType" })
  findingType?: string;

  /**
   * ! Information about a vulnerability with an HTML.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form" })
  @Type(() => Form)
  form?: Form;

  /**
   * Output only. If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frameUrl" })
  frameUrl?: string;

  /**
   * Output only. The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fuzzedUrl" })
  fuzzedUrl?: string;

  /**
   * Output only. The http method of the request that triggered the vulnerability, in uppercase.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpMethod" })
  httpMethod?: string;

  /**
   * Output only. The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Information reported for an outdated library.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outdatedLibrary" })
  @Type(() => OutdatedLibrary)
  outdatedLibrary?: OutdatedLibrary;

  /**
   * Output only. The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reproductionUrl" })
  reproductionUrl?: string;

  /**
   * Output only. The severity level of the reported vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: FindingSeverityEnum;

  /**
   * Output only. The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trackingId" })
  trackingId?: string;

  /**
   * Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "violatingResource" })
  @Type(() => ViolatingResource)
  violatingResource?: ViolatingResource;

  /**
   * Information about vulnerable or missing HTTP Headers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vulnerableHeaders" })
  @Type(() => VulnerableHeaders)
  vulnerableHeaders?: VulnerableHeaders;

  /**
   * Information about vulnerable request parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vulnerableParameters" })
  @Type(() => VulnerableParameters)
  vulnerableParameters?: VulnerableParameters;

  /**
   * Information reported for an XSS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xss" })
  @Type(() => Xss)
  xss?: Xss;

  /**
   * Information reported for an XXE.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xxe" })
  @Type(() => Xxe)
  xxe?: Xxe;
}
