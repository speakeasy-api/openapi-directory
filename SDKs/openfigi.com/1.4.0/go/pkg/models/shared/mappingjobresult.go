// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type MappingJobResultType string

const (
	MappingJobResultTypeMappingJobResultFigiList     MappingJobResultType = "MappingJobResultFigiList"
	MappingJobResultTypeMappingJobResultFigiNotFound MappingJobResultType = "MappingJobResultFigiNotFound"
)

type MappingJobResult struct {
	MappingJobResultFigiList     *MappingJobResultFigiList
	MappingJobResultFigiNotFound *MappingJobResultFigiNotFound

	Type MappingJobResultType
}

func CreateMappingJobResultMappingJobResultFigiList(mappingJobResultFigiList MappingJobResultFigiList) MappingJobResult {
	typ := MappingJobResultTypeMappingJobResultFigiList

	return MappingJobResult{
		MappingJobResultFigiList: &mappingJobResultFigiList,
		Type:                     typ,
	}
}

func CreateMappingJobResultMappingJobResultFigiNotFound(mappingJobResultFigiNotFound MappingJobResultFigiNotFound) MappingJobResult {
	typ := MappingJobResultTypeMappingJobResultFigiNotFound

	return MappingJobResult{
		MappingJobResultFigiNotFound: &mappingJobResultFigiNotFound,
		Type:                         typ,
	}
}

func (u *MappingJobResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	mappingJobResultFigiList := new(MappingJobResultFigiList)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mappingJobResultFigiList); err == nil {
		u.MappingJobResultFigiList = mappingJobResultFigiList
		u.Type = MappingJobResultTypeMappingJobResultFigiList
		return nil
	}

	mappingJobResultFigiNotFound := new(MappingJobResultFigiNotFound)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mappingJobResultFigiNotFound); err == nil {
		u.MappingJobResultFigiNotFound = mappingJobResultFigiNotFound
		u.Type = MappingJobResultTypeMappingJobResultFigiNotFound
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MappingJobResult) MarshalJSON() ([]byte, error) {
	if u.MappingJobResultFigiList != nil {
		return json.Marshal(u.MappingJobResultFigiList)
	}

	if u.MappingJobResultFigiNotFound != nil {
		return json.Marshal(u.MappingJobResultFigiNotFound)
	}

	return nil, nil
}
