// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PrepareTransactionRequestBodyVariationEnum string

const (
	PrepareTransactionRequestBodyVariationEnumGsb        PrepareTransactionRequestBodyVariationEnum = "gsb"
	PrepareTransactionRequestBodyVariationEnumErzeugung  PrepareTransactionRequestBodyVariationEnum = "erzeugung"
	PrepareTransactionRequestBodyVariationEnumEigenstrom PrepareTransactionRequestBodyVariationEnum = "eigenstrom"
	PrepareTransactionRequestBodyVariationEnumCo2        PrepareTransactionRequestBodyVariationEnum = "co2"
	PrepareTransactionRequestBodyVariationEnumBaeume     PrepareTransactionRequestBodyVariationEnum = "baeume"
)

func (e PrepareTransactionRequestBodyVariationEnum) ToPointer() *PrepareTransactionRequestBodyVariationEnum {
	return &e
}

func (e *PrepareTransactionRequestBodyVariationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gsb":
		fallthrough
	case "erzeugung":
		fallthrough
	case "eigenstrom":
		fallthrough
	case "co2":
		fallthrough
	case "baeume":
		*e = PrepareTransactionRequestBodyVariationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrepareTransactionRequestBodyVariationEnum: %v", v)
	}
}

type PrepareTransactionRequestBody struct {
	// Stromkonto account address of sender
	Account *string `json:"account,omitempty"`
	// Signature per Stromkonto setting (might be simple email confirmation link)
	Signature *string `json:"signature,omitempty"`
	// Stromkonto account address of reciever
	To *string `json:"to,omitempty"`
	// Amount to transfer (in Watthours for electricity, or pcs for trees)
	Value     *int64                                      `json:"value,omitempty"`
	Variation *PrepareTransactionRequestBodyVariationEnum `json:"variation,omitempty"`
}

type PrepareTransactionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
