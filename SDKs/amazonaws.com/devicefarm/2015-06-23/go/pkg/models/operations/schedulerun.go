// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ScheduleRunXAmzTargetEnum
type ScheduleRunXAmzTargetEnum string

const (
	ScheduleRunXAmzTargetEnumDeviceFarm20150623ScheduleRun ScheduleRunXAmzTargetEnum = "DeviceFarm_20150623.ScheduleRun"
)

func (e *ScheduleRunXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeviceFarm_20150623.ScheduleRun":
		*e = ScheduleRunXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleRunXAmzTargetEnum: %s", s)
	}
}

type ScheduleRunHeaders struct {
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ScheduleRunXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ScheduleRunRequest struct {
	Headers ScheduleRunHeaders
	Request shared.ScheduleRunRequest `request:"mediaType=application/json"`
}

type ScheduleRunResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// IdempotencyException
	IdempotencyException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	// Success
	ScheduleRunResult *shared.ScheduleRunResult
	// ServiceAccountException
	ServiceAccountException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
