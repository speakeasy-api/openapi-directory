"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTopicTimerRequestBody:
    
    based_on_last_post: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('based_on_last_post'), 'exclude': lambda f: f is None }})  
    category_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id'), 'exclude': lambda f: f is None }})  
    status_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_type'), 'exclude': lambda f: f is None }})  
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateTopicTimerRequest:
    
    api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Key', 'style': 'simple', 'explode': False }})  
    api_username: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Username', 'style': 'simple', 'explode': False }})  
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    request_body: Optional[CreateTopicTimerRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTopicTimer200ApplicationJSON:
    r"""topic updated"""
    
    based_on_last_post: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('based_on_last_post'), 'exclude': lambda f: f is None }})  
    category_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id'), 'exclude': lambda f: f is None }})  
    closed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed'), 'exclude': lambda f: f is None }})  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})  
    execute_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execute_at'), 'exclude': lambda f: f is None }})  
    success: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateTopicTimerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_topic_timer_200_application_json_object: Optional[CreateTopicTimer200ApplicationJSON] = dataclasses.field(default=None)
    r"""topic updated"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    