"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import itemlist as shared_itemlist
from ..shared import itemsummary as shared_itemsummary
from ..shared import person as shared_person
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PageEntryTypeEnum(str, Enum):
    r"""The type of PageEntry. Used to help identify what type of content will be presented."""
    ITEM_ENTRY = 'ItemEntry'
    ITEM_DETAIL_ENTRY = 'ItemDetailEntry'
    LIST_ENTRY = 'ListEntry'
    LIST_DETAIL_ENTRY = 'ListDetailEntry'
    USER_ENTRY = 'UserEntry'
    TEXT_ENTRY = 'TextEntry'
    IMAGE_ENTRY = 'ImageEntry'
    CUSTOM_ENTRY = 'CustomEntry'
    PEOPLE_ENTRY = 'PeopleEntry'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PageEntry:
    r"""Represents an entry of a Page.
    Defines what specific piece of content should be presented e.g. an Item or ItemList.
    Also defines what visual template should be used to render that content.
    """
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier for a page entry."""  
    template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template') }})
    r"""Template type used to present the content of the PageEntry."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The name of the Page Entry."""  
    type: PageEntryTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of PageEntry. Used to help identify what type of content will be presented."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""A map of custom fields defined by a curator for a page entry."""  
    images: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})
    r"""The images for the page entry if any.
    
    For example the images of an `ImageEntry`.
    """  
    item: Optional[shared_itemsummary.ItemSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item'), 'exclude': lambda f: f is None }})  
    list_: Optional[shared_itemlist.ItemList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list'), 'exclude': lambda f: f is None }})
    r"""A pageable list of items."""  
    people: Optional[list[shared_person.Person]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people'), 'exclude': lambda f: f is None }})
    r"""If 'type' is 'PeopleEntry' then this is the array of people to present."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""If 'type' is 'TextEntry' then this is the text to be represented."""  
    