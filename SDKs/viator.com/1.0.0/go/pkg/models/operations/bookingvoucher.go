// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type BookingVoucherQueryParams struct {
	// ignore (Viator only)
	EmbeddedResources *bool `queryParam:"style=form,explode=true,name=embeddedResources"`
	// **specifier**:
	// - set to `true` if you wish to retrieve the full HTML-formatted voucher
	// - set to `false` if you want the div fragment (optional)
	//
	FullHTML *bool `queryParam:"style=form,explode=true,name=fullHTML"`
	// Booking-reference number generated by Viator
	//
	//   - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
	//
	ItemID *int64 `queryParam:"style=form,explode=true,name=itemId"`
	// **surname** of *this* lead traveler
	LeadLastName *string `queryParam:"style=form,explode=true,name=leadLastName"`
	// **specifier**:
	// - if set to `true`, the service returns the mobile (cut down) HTML-formatted voucher
	// - if `false` the full voucher HTML is returned (ignoring `fullHTML`)
	// - default: `true`
	// - this field should only be enabled for products that have a `voucherOption` of `'VOUCHER_E'`
	// - do not enable `mobileVouchers` for paper vouchers (`voucherOption` of `'VOUCHER_PAPER_ONLY'`) as no barcode is returned
	// - the voucher information is available in the response from [/product](#operation/product), [/booking/book](#operation/bookingBook), [/booking/pastbooking](#operation/bookingPastbooking), [/booking/mybookings](#operation/bookingMybookings) (it is also displayed under the 'Redemption Info' heading in this service)
	//
	MobileVoucher *bool `queryParam:"style=form,explode=true,name=mobileVoucher"`
	// **identifier** for the voucher
	// - **note**: use &lt;u&gt;either&lt;/u&gt; `voucherKey` &lt;u&gt;or&lt;/u&gt; the three separate parameters
	// - if `voucherKey` is provided as well as the other parameters, then `voucherKey` overrides the other paramaters
	// - `voucherKey` is obtained from [/booking/mybookings](#operation/bookingMybookings) or in the response from [/booking/book](#operation/bookingBook) when you make a booking
	//
	VoucherKey *string `queryParam:"style=form,explode=true,name=voucherKey"`
}

type BookingVoucherHeaders struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
}

type BookingVoucherRequest struct {
	QueryParams BookingVoucherQueryParams
	Headers     BookingVoucherHeaders
}

// BookingVoucher200ApplicationJSON - Success
type BookingVoucher200ApplicationJSON struct {
	// **HTML-formatted** voucher content
	Data *string `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type BookingVoucherResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BookingVoucher200ApplicationJSONObject *BookingVoucher200ApplicationJSON
}
