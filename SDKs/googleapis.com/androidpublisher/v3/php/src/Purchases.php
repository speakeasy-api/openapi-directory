<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Purchases 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Acknowledges a purchase of an inapp item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeResponse
     */
	public function androidpublisherPurchasesProductsAcknowledge(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "productPurchasesAcknowledgeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsAcknowledgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Consumes a purchase for an inapp item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeResponse
     */
	public function androidpublisherPurchasesProductsConsume(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:consume', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsConsumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Checks the purchase and consumption status of an inapp item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetResponse
     */
	public function androidpublisherPurchasesProductsGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesProductsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productPurchase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductPurchase', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Acknowledges a subscription purchase.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeResponse
     */
	public function androidpublisherPurchasesSubscriptionsAcknowledge(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionPurchasesAcknowledgeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsAcknowledgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Cancels a user's subscription purchase. The subscription remains valid until its expiration time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelResponse
     */
	public function androidpublisherPurchasesSubscriptionsCancel(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Defers a user's subscription purchase until a specified future expiration time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferResponse
     */
	public function androidpublisherPurchasesSubscriptionsDefer(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionPurchasesDeferRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsDeferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionPurchasesDeferResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionPurchasesDeferResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks whether a user's subscription purchase is valid and returns its expiry time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetResponse
     */
	public function androidpublisherPurchasesSubscriptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionPurchase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionPurchase', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundResponse
     */
	public function androidpublisherPurchasesSubscriptionsRefund(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeResponse
     */
	public function androidpublisherPurchasesSubscriptionsRevoke(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsRevokeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get metadata about a subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetResponse
     */
	public function androidpublisherPurchasesSubscriptionsv2Get(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/subscriptionsv2/tokens/{token}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesSubscriptionsv2GetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionPurchaseV2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionPurchaseV2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the purchases that were canceled, refunded or charged-back.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListResponse
     */
	public function androidpublisherPurchasesVoidedpurchasesList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherPurchasesVoidedpurchasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voidedPurchasesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoidedPurchasesListResponse', 'json');
            }
        }

        return $response;
    }
}