// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type YoutubeCommentsSetModerationStatusSecurity struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

// YoutubeCommentsSetModerationStatusModerationStatusEnum - Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: MODERATION_STATUS_PUBLISHED, MODERATION_STATUS_HELD_FOR_REVIEW, MODERATION_STATUS_REJECTED.
type YoutubeCommentsSetModerationStatusModerationStatusEnum string

const (
	YoutubeCommentsSetModerationStatusModerationStatusEnumPublished     YoutubeCommentsSetModerationStatusModerationStatusEnum = "published"
	YoutubeCommentsSetModerationStatusModerationStatusEnumHeldForReview YoutubeCommentsSetModerationStatusModerationStatusEnum = "heldForReview"
	YoutubeCommentsSetModerationStatusModerationStatusEnumLikelySpam    YoutubeCommentsSetModerationStatusModerationStatusEnum = "likelySpam"
	YoutubeCommentsSetModerationStatusModerationStatusEnumRejected      YoutubeCommentsSetModerationStatusModerationStatusEnum = "rejected"
)

func (e *YoutubeCommentsSetModerationStatusModerationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "published":
		fallthrough
	case "heldForReview":
		fallthrough
	case "likelySpam":
		fallthrough
	case "rejected":
		*e = YoutubeCommentsSetModerationStatusModerationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeCommentsSetModerationStatusModerationStatusEnum: %s", s)
	}
}

type YoutubeCommentsSetModerationStatusQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// If set to true the author of the comment gets added to the ban list. This means all future comments of the author will autmomatically be rejected. Only valid in combination with STATUS_REJECTED.
	BanAuthor *bool `queryParam:"style=form,explode=true,name=banAuthor"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Modifies the moderation status of the comments with the given IDs
	ID []string `queryParam:"style=form,explode=true,name=id"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: MODERATION_STATUS_PUBLISHED, MODERATION_STATUS_HELD_FOR_REVIEW, MODERATION_STATUS_REJECTED.
	ModerationStatus YoutubeCommentsSetModerationStatusModerationStatusEnum `queryParam:"style=form,explode=true,name=moderationStatus"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type YoutubeCommentsSetModerationStatusRequest struct {
	QueryParams YoutubeCommentsSetModerationStatusQueryParams
	Security    YoutubeCommentsSetModerationStatusSecurity
}

type YoutubeCommentsSetModerationStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
