// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETReplaceNetworkACLEntryActionEnum
type GETReplaceNetworkACLEntryActionEnum string

const (
	GETReplaceNetworkACLEntryActionEnumReplaceNetworkACLEntry GETReplaceNetworkACLEntryActionEnum = "ReplaceNetworkAclEntry"
)

func (e *GETReplaceNetworkACLEntryActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ReplaceNetworkAclEntry":
		*e = GETReplaceNetworkACLEntryActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceNetworkACLEntryActionEnum: %s", s)
	}
}

// GETReplaceNetworkACLEntryIcmp - Describes the ICMP type and code.
type GETReplaceNetworkACLEntryIcmp struct {
	Code *int64 `queryParam:"name=Code"`
	Type *int64 `queryParam:"name=Type"`
}

// GETReplaceNetworkACLEntryPortRange - Describes a range of ports.
type GETReplaceNetworkACLEntryPortRange struct {
	From *int64 `queryParam:"name=From"`
	To   *int64 `queryParam:"name=To"`
}

// GETReplaceNetworkACLEntryRuleActionEnum - Indicates whether to allow or deny the traffic that matches the rule.
type GETReplaceNetworkACLEntryRuleActionEnum string

const (
	GETReplaceNetworkACLEntryRuleActionEnumAllow GETReplaceNetworkACLEntryRuleActionEnum = "allow"
	GETReplaceNetworkACLEntryRuleActionEnumDeny  GETReplaceNetworkACLEntryRuleActionEnum = "deny"
)

func (e *GETReplaceNetworkACLEntryRuleActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "deny":
		*e = GETReplaceNetworkACLEntryRuleActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceNetworkACLEntryRuleActionEnum: %s", s)
	}
}

// GETReplaceNetworkACLEntryVersionEnum
type GETReplaceNetworkACLEntryVersionEnum string

const (
	GETReplaceNetworkACLEntryVersionEnumTwoThousandAndSixteen1115 GETReplaceNetworkACLEntryVersionEnum = "2016-11-15"
)

func (e *GETReplaceNetworkACLEntryVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETReplaceNetworkACLEntryVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceNetworkACLEntryVersionEnum: %s", s)
	}
}

type GETReplaceNetworkACLEntryRequest struct {
	Action GETReplaceNetworkACLEntryActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).
	CidrBlock *string `queryParam:"style=form,explode=true,name=CidrBlock"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>Indicates whether to replace the egress rule.</p> <p>Default: If no value is specified, we replace the ingress rule.</p>
	Egress bool `queryParam:"style=form,explode=true,name=Egress"`
	// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
	Icmp *GETReplaceNetworkACLEntryIcmp `queryParam:"style=form,explode=true,name=Icmp"`
	// The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:bd8:1234:1a00::/64</code>).
	Ipv6CidrBlock *string `queryParam:"style=form,explode=true,name=Ipv6CidrBlock"`
	// The ID of the ACL.
	NetworkACLID string `queryParam:"style=form,explode=true,name=NetworkAclId"`
	// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
	PortRange *GETReplaceNetworkACLEntryPortRange `queryParam:"style=form,explode=true,name=PortRange"`
	// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
	Protocol string `queryParam:"style=form,explode=true,name=Protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule.
	RuleAction GETReplaceNetworkACLEntryRuleActionEnum `queryParam:"style=form,explode=true,name=RuleAction"`
	// The rule number of the entry to replace.
	RuleNumber        int64                                `queryParam:"style=form,explode=true,name=RuleNumber"`
	Version           GETReplaceNetworkACLEntryVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETReplaceNetworkACLEntryResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
