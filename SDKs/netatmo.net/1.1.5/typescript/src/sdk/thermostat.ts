/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Thermostat specific methods
 */
export class Thermostat {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * The method createnewschedule creates a new schedule stored in the backup list.
   */
  createnewschedule(
    req: operations.CreatenewscheduleRequest,
    security: operations.CreatenewscheduleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatenewscheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatenewscheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createnewschedule";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreatenewscheduleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatenewscheduleResponse =
        new operations.CreatenewscheduleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naNewScheduleResponse = utils.objectToClass(
              httpRes?.data,
              shared.NANewScheduleResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The method getmeasure returns the measurements of a device or a module.
   *
   */
  getmeasure(
    req: operations.GetmeasureRequest,
    security: operations.GetmeasureSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetmeasureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetmeasureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getmeasure";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetmeasureSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetmeasureResponse =
        new operations.GetmeasureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naMeasureResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAMeasureResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The method getthermostatsdata returns information about user's thermostats such as their last measurements.
   */
  getthermostatsdata(
    req: operations.GetthermostatsdataRequest,
    security: operations.GetthermostatsdataSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetthermostatsdataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetthermostatsdataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getthermostatsdata";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetthermostatsdataSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetthermostatsdataResponse =
        new operations.GetthermostatsdataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naThermostatDataResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAThermostatDataResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The method setthermpoint changes the Thermostat manual temperature setpoint.
   */
  setthermpoint(
    req: operations.SetthermpointRequest,
    security: operations.SetthermpointSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SetthermpointResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetthermpointRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/setthermpoint";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SetthermpointSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetthermpointResponse =
        new operations.SetthermpointResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naOkResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAOkResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The method switchschedule switches the Thermostat's schedule to another existing schedule.
   */
  switchschedule(
    req: operations.SwitchscheduleRequest,
    security: operations.SwitchscheduleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SwitchscheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SwitchscheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/switchschedule";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SwitchscheduleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SwitchscheduleResponse =
        new operations.SwitchscheduleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naOkResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAOkResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The method syncschedule changes the Thermostat weekly schedule.
   */
  syncschedule(
    req: operations.SyncscheduleRequest,
    security: operations.SyncscheduleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SyncscheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SyncscheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/syncschedule";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SyncscheduleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SyncscheduleResponse =
        new operations.SyncscheduleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naOkResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAOkResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
