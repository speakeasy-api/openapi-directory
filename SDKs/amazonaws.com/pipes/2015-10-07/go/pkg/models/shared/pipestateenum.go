// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PipeStateEnum string

const (
	PipeStateEnumRunning      PipeStateEnum = "RUNNING"
	PipeStateEnumStopped      PipeStateEnum = "STOPPED"
	PipeStateEnumCreating     PipeStateEnum = "CREATING"
	PipeStateEnumUpdating     PipeStateEnum = "UPDATING"
	PipeStateEnumDeleting     PipeStateEnum = "DELETING"
	PipeStateEnumStarting     PipeStateEnum = "STARTING"
	PipeStateEnumStopping     PipeStateEnum = "STOPPING"
	PipeStateEnumCreateFailed PipeStateEnum = "CREATE_FAILED"
	PipeStateEnumUpdateFailed PipeStateEnum = "UPDATE_FAILED"
	PipeStateEnumStartFailed  PipeStateEnum = "START_FAILED"
	PipeStateEnumStopFailed   PipeStateEnum = "STOP_FAILED"
)

func (e PipeStateEnum) ToPointer() *PipeStateEnum {
	return &e
}

func (e *PipeStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RUNNING":
		fallthrough
	case "STOPPED":
		fallthrough
	case "CREATING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "STARTING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "CREATE_FAILED":
		fallthrough
	case "UPDATE_FAILED":
		fallthrough
	case "START_FAILED":
		fallthrough
	case "STOP_FAILED":
		*e = PipeStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PipeStateEnum: %v", v)
	}
}
