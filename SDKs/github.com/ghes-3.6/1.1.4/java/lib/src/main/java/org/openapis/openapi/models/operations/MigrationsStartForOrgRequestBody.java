/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class MigrationsStartForOrgRequestBody {
    /**
     * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude")
    public MigrationsStartForOrgRequestBodyExcludeEnum[] exclude;
    public MigrationsStartForOrgRequestBody withExclude(MigrationsStartForOrgRequestBodyExcludeEnum[] exclude) {
        this.exclude = exclude;
        return this;
    }
    
    /**
     * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_attachments")
    public Boolean excludeAttachments;
    public MigrationsStartForOrgRequestBody withExcludeAttachments(Boolean excludeAttachments) {
        this.excludeAttachments = excludeAttachments;
        return this;
    }
    
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_git_data")
    public Boolean excludeGitData;
    public MigrationsStartForOrgRequestBody withExcludeGitData(Boolean excludeGitData) {
        this.excludeGitData = excludeGitData;
        return this;
    }
    
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_metadata")
    public Boolean excludeMetadata;
    public MigrationsStartForOrgRequestBody withExcludeMetadata(Boolean excludeMetadata) {
        this.excludeMetadata = excludeMetadata;
        return this;
    }
    
    /**
     * Indicates whether projects owned by the organization or users should be excluded. from the migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_owner_projects")
    public Boolean excludeOwnerProjects;
    public MigrationsStartForOrgRequestBody withExcludeOwnerProjects(Boolean excludeOwnerProjects) {
        this.excludeOwnerProjects = excludeOwnerProjects;
        return this;
    }
    
    /**
     * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_releases")
    public Boolean excludeReleases;
    public MigrationsStartForOrgRequestBody withExcludeReleases(Boolean excludeReleases) {
        this.excludeReleases = excludeReleases;
        return this;
    }
    
    /**
     * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lock_repositories")
    public Boolean lockRepositories;
    public MigrationsStartForOrgRequestBody withLockRepositories(Boolean lockRepositories) {
        this.lockRepositories = lockRepositories;
        return this;
    }
    
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org_metadata_only")
    public Boolean orgMetadataOnly;
    public MigrationsStartForOrgRequestBody withOrgMetadataOnly(Boolean orgMetadataOnly) {
        this.orgMetadataOnly = orgMetadataOnly;
        return this;
    }
    
    /**
     * A list of arrays indicating which repositories should be migrated.
     */
    @JsonProperty("repositories")
    public String[] repositories;
    public MigrationsStartForOrgRequestBody withRepositories(String[] repositories) {
        this.repositories = repositories;
        return this;
    }
    
}
