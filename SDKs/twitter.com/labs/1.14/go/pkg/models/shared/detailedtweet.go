// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DetailedTweetAttachments - Specifies the type of attachments (if any) present in this Tweet.
type DetailedTweetAttachments struct {
	// A list of Media Keys for each one of the media attachments (if media are attached).
	MediaKeys []string `json:"media_keys,omitempty"`
	// A list of poll IDs (if polls are attached).
	PollIds []string `json:"poll_ids,omitempty"`
}

// DetailedTweetGeo - The location tagged on the Tweet, if the user provided one.
type DetailedTweetGeo struct {
	// A [GeoJson Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) geometry object.
	Coordinates *Point `json:"coordinates,omitempty"`
	// The identifier for this place
	PlaceID *string `json:"place_id,omitempty"`
}

type DetailedTweetReferencedTweetsTypeEnum string

const (
	DetailedTweetReferencedTweetsTypeEnumRetweeted DetailedTweetReferencedTweetsTypeEnum = "retweeted"
	DetailedTweetReferencedTweetsTypeEnumQuoted    DetailedTweetReferencedTweetsTypeEnum = "quoted"
	DetailedTweetReferencedTweetsTypeEnumRepliedTo DetailedTweetReferencedTweetsTypeEnum = "replied_to"
)

func (e *DetailedTweetReferencedTweetsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "retweeted":
		fallthrough
	case "quoted":
		fallthrough
	case "replied_to":
		*e = DetailedTweetReferencedTweetsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DetailedTweetReferencedTweetsTypeEnum: %s", s)
	}
}

type DetailedTweetReferencedTweets struct {
	// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	ID   string                                `json:"id"`
	Type DetailedTweetReferencedTweetsTypeEnum `json:"type"`
}

// DetailedTweetStats - Engagement metrics for the Tweet at the time of the request.
type DetailedTweetStats struct {
	// Number of times this Tweet has been liked.
	LikeCount int64 `json:"like_count"`
	// Number of times this Tweet has been quoted.
	QuoteCount *int64 `json:"quote_count,omitempty"`
	// Number of times this Tweet has been replied to.
	ReplyCount int64 `json:"reply_count"`
	// Number of times this Tweet has been Retweeted.
	RetweetCount int64 `json:"retweet_count"`
}

// DetailedTweet - This is the list of fields for a Tweet object when `format` or `tweet.format` are set to `detailed`.
type DetailedTweet struct {
	// Specifies the type of attachments (if any) present in this Tweet.
	Attachments *DetailedTweetAttachments `json:"attachments,omitempty"`
	// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	AuthorID           string              `json:"author_id"`
	ContextAnnotations []ContextAnnotation `json:"context_annotations,omitempty"`
	// Creation time of the Tweet.
	CreatedAt time.Time         `json:"created_at"`
	Entities  *FullTextEntities `json:"entities,omitempty"`
	Format    string            `json:"format"`
	// The location tagged on the Tweet, if the user provided one.
	Geo *DetailedTweetGeo `json:"geo,omitempty"`
	// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	ID string `json:"id"`
	// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
	InReplyToUserID *string `json:"in_reply_to_user_id,omitempty"`
	// Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.
	Lang *string `json:"lang,omitempty"`
	// Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.
	PossiblySensitive bool `json:"possibly_sensitive"`
	// A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
	ReferencedTweets []DetailedTweetReferencedTweets `json:"referenced_tweets,omitempty"`
	// The name of the app the user Tweeted from.
	Source *string `json:"source,omitempty"`
	// Engagement metrics for the Tweet at the time of the request.
	Stats DetailedTweetStats `json:"stats"`
	// The content of the Tweet.
	Text string `json:"text"`
	// Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
	Withheld *TweetWithheld `json:"withheld,omitempty"`
}
