"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceAttributes:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of this category as seen in the Up application."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceLinks:
    
    self_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})
    r"""The canonical link to this resource within the API."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceRelationshipsChildrenData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the resource within its type."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `categories`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceRelationshipsChildrenLinks:
    
    related: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""The link to retrieve the related resource(s) in this relationship."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceRelationshipsChildren:
    
    data: list[CategoryResourceRelationshipsChildrenData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: Optional[CategoryResourceRelationshipsChildrenLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceRelationshipsParentData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the resource within its type."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `categories`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceRelationshipsParentLinks:
    
    related: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""The link to retrieve the related resource(s) in this relationship."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceRelationshipsParent:
    
    data: CategoryResourceRelationshipsParentData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: Optional[CategoryResourceRelationshipsParentLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResourceRelationships:
    
    children: CategoryResourceRelationshipsChildren = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children') }})  
    parent: CategoryResourceRelationshipsParent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CategoryResource:
    r"""Provides information about a category and its ancestry."""
    
    attributes: CategoryResourceAttributes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier for this category. This is a human-readable but
    URL-safe value.
    """  
    relationships: CategoryResourceRelationships = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `categories`"""  
    links: Optional[CategoryResourceLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    