// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetOrganizationUplinksStatusesRequest struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs.
	Iccids []string `queryParam:"style=form,explode=false,name=iccids"`
	// A list of network IDs. The returned devices will be filtered to only include these networks.
	NetworkIds     []string `queryParam:"style=form,explode=false,name=networkIds"`
	OrganizationID string   `pathParam:"style=simple,explode=false,name=organizationId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A list of serial numbers. The returned devices will be filtered to only include these serials.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
}

// GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum - Uplink interface
type GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum string

const (
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnumCellular GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum = "cellular"
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnumWan1     GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum = "wan1"
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnumWan2     GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum = "wan2"
)

func (e GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum) ToPointer() *GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum {
	return &e
}

func (e *GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cellular":
		fallthrough
	case "wan1":
		fallthrough
	case "wan2":
		*e = GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum: %v", v)
	}
}

// GetOrganizationUplinksStatuses200ApplicationJSONUplinksSignalStat - Tower Signal Status
type GetOrganizationUplinksStatuses200ApplicationJSONUplinksSignalStat struct {
	// Reference Signal Received Power
	Rsrp *string `json:"rsrp,omitempty"`
	// Reference Signal Received Quality
	Rsrq *string `json:"rsrq,omitempty"`
}

// GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum - Uplink status
type GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum string

const (
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnumActive       GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum = "active"
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnumConnecting   GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum = "connecting"
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnumFailed       GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum = "failed"
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnumNotConnected GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum = "not connected"
	GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnumReady        GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum = "ready"
)

func (e GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum) ToPointer() *GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum {
	return &e
}

func (e *GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "connecting":
		fallthrough
	case "failed":
		fallthrough
	case "not connected":
		fallthrough
	case "ready":
		*e = GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum: %v", v)
	}
}

type GetOrganizationUplinksStatuses200ApplicationJSONUplinks struct {
	// Access Point Name
	Apn *string `json:"apn,omitempty"`
	// Connection Type
	ConnectionType *string `json:"connectionType,omitempty"`
	// Primary DNS IP
	Dns1 *string `json:"dns1,omitempty"`
	// Secondary DNS IP
	Dns2 *string `json:"dns2,omitempty"`
	// Gateway IP
	Gateway *string `json:"gateway,omitempty"`
	// Integrated Circuit Card Identification Number
	Iccid *string `json:"iccid,omitempty"`
	// Uplink interface
	Interface *GetOrganizationUplinksStatuses200ApplicationJSONUplinksInterfaceEnum `json:"interface,omitempty"`
	// Uplink IP
	IP *string `json:"ip,omitempty"`
	// The way in which the IP is assigned
	IPAssignedBy *string `json:"ipAssignedBy,omitempty"`
	// Primary DNS IP
	PrimaryDNS *string `json:"primaryDns,omitempty"`
	// Network Provider
	Provider *string `json:"provider,omitempty"`
	// Public IP
	PublicIP *string `json:"publicIp,omitempty"`
	// Secondary DNS IP
	SecondaryDNS *string `json:"secondaryDns,omitempty"`
	// Tower Signal Status
	SignalStat *GetOrganizationUplinksStatuses200ApplicationJSONUplinksSignalStat `json:"signalStat,omitempty"`
	// Signal Type
	SignalType *string `json:"signalType,omitempty"`
	// Uplink status
	Status *GetOrganizationUplinksStatuses200ApplicationJSONUplinksStatusEnum `json:"status,omitempty"`
}

type GetOrganizationUplinksStatuses200ApplicationJSON struct {
	// Last reported time for the device
	LastReportedAt *time.Time `json:"lastReportedAt,omitempty"`
	// The uplink model
	Model *string `json:"model,omitempty"`
	// Network identifier
	NetworkID *string `json:"networkId,omitempty"`
	// The uplink serial
	Serial *string `json:"serial,omitempty"`
	// Uplinks
	Uplinks []GetOrganizationUplinksStatuses200ApplicationJSONUplinks `json:"uplinks,omitempty"`
}

type GetOrganizationUplinksStatusesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationUplinksStatuses200ApplicationJSONObjects []GetOrganizationUplinksStatuses200ApplicationJSON
}
