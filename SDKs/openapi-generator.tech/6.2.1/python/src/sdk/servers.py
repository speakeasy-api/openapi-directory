"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Servers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def download_file(self, request: operations.DownloadFileRequest) -> operations.DownloadFileResponse:
        r"""Downloads a pre-generated file
        A valid `fileId` is generated by the `/clients/{language}` or `/servers/{language}` POST operations.  The fileId code can be used just once, after which a new `fileId` will need to be requested.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadFileRequest, base_url, '/api/gen/download/{fileId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.download_file_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def generate_server_for_language(self, request: operations.GenerateServerForLanguageRequest) -> operations.GenerateServerForLanguageResponse:
        r"""Generates a server library
        Accepts a `GeneratorInput` options map for spec location and generation options.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GenerateServerForLanguageRequest, base_url, '/api/gen/servers/{framework}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generator_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenerateServerForLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_server_options(self, request: operations.GetServerOptionsRequest) -> operations.GetServerOptionsResponse:
        r"""Returns options for a server framework"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetServerOptionsRequest, base_url, '/api/gen/servers/{framework}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetServerOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, shared.CliOption]])
                res.get_server_options_200_application_json_object = out
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def server_options(self) -> operations.ServerOptionsResponse:
        r"""Gets languages supported by the server generator"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/gen/servers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServerOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    