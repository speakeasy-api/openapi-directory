/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Storelayoutpages {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a store page.
   */
  androidenterpriseStorelayoutpagesDelete(
    req: operations.AndroidenterpriseStorelayoutpagesDeleteRequest,
    security: operations.AndroidenterpriseStorelayoutpagesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseStorelayoutpagesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidenterpriseStorelayoutpagesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidenterpriseStorelayoutpagesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseStorelayoutpagesDeleteResponse =
        new operations.AndroidenterpriseStorelayoutpagesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves details of a store page.
   */
  androidenterpriseStorelayoutpagesGet(
    req: operations.AndroidenterpriseStorelayoutpagesGetRequest,
    security: operations.AndroidenterpriseStorelayoutpagesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseStorelayoutpagesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidenterpriseStorelayoutpagesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidenterpriseStorelayoutpagesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseStorelayoutpagesGetResponse =
        new operations.AndroidenterpriseStorelayoutpagesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storePage = utils.objectToClass(
              httpRes?.data,
              shared.StorePage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a new store page.
   */
  androidenterpriseStorelayoutpagesInsert(
    req: operations.AndroidenterpriseStorelayoutpagesInsertRequest,
    security: operations.AndroidenterpriseStorelayoutpagesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseStorelayoutpagesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidenterpriseStorelayoutpagesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "storePage",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidenterpriseStorelayoutpagesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseStorelayoutpagesInsertResponse =
        new operations.AndroidenterpriseStorelayoutpagesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storePage = utils.objectToClass(
              httpRes?.data,
              shared.StorePage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the details of all pages in the store.
   */
  androidenterpriseStorelayoutpagesList(
    req: operations.AndroidenterpriseStorelayoutpagesListRequest,
    security: operations.AndroidenterpriseStorelayoutpagesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseStorelayoutpagesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidenterpriseStorelayoutpagesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidenterpriseStorelayoutpagesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseStorelayoutpagesListResponse =
        new operations.AndroidenterpriseStorelayoutpagesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storeLayoutPagesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.StoreLayoutPagesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the content of a store page.
   */
  androidenterpriseStorelayoutpagesUpdate(
    req: operations.AndroidenterpriseStorelayoutpagesUpdateRequest,
    security: operations.AndroidenterpriseStorelayoutpagesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseStorelayoutpagesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidenterpriseStorelayoutpagesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "storePage",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidenterpriseStorelayoutpagesUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseStorelayoutpagesUpdateResponse =
        new operations.AndroidenterpriseStorelayoutpagesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storePage = utils.objectToClass(
              httpRes?.data,
              shared.StorePage
            );
          }
          break;
      }

      return res;
    });
  }
}
