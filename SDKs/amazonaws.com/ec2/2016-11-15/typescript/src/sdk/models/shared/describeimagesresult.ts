/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The architecture of the image.
 */
export enum DescribeImagesResultImagesArchitectureEnum {
  I386 = "i386",
  X8664 = "x86_64",
  Arm64 = "arm64",
  X8664Mac = "x86_64_mac",
  Arm64Mac = "arm64_mac",
}

/**
 * The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports.
 */
export enum DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum {
  Standard = "standard",
  Io1 = "io1",
  Io2 = "io2",
  Gp2 = "gp2",
  Sc1 = "sc1",
  St1 = "st1",
  Gp3 = "gp3",
}

/**
 * Parameters used to automatically set up EBS volumes when the instance is launched.
 */
export class DescribeImagesResultImagesBlockDeviceMappingsEbs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  deleteOnTermination?: boolean;

  @SpeakeasyMetadata()
  encrypted?: boolean;

  @SpeakeasyMetadata()
  iops?: number;

  @SpeakeasyMetadata()
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  outpostArn?: string;

  @SpeakeasyMetadata()
  snapshotId?: string;

  @SpeakeasyMetadata()
  throughput?: number;

  @SpeakeasyMetadata()
  volumeSize?: number;

  @SpeakeasyMetadata()
  volumeType?: DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum;
}

/**
 * Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
 */
export class DescribeImagesResultImagesBlockDeviceMappings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  deviceName?: string;

  @SpeakeasyMetadata()
  ebs?: DescribeImagesResultImagesBlockDeviceMappingsEbs;

  @SpeakeasyMetadata()
  noDevice?: string;

  @SpeakeasyMetadata()
  virtualName?: string;
}

/**
 * The boot mode of the image. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot modes</a> in the <i>Amazon EC2 User Guide</i>.
 */
export enum DescribeImagesResultImagesBootModeEnum {
  LegacyBios = "legacy-bios",
  Uefi = "uefi",
  UefiPreferred = "uefi-preferred",
}

/**
 * The hypervisor type of the image.
 */
export enum DescribeImagesResultImagesHypervisorEnum {
  Ovm = "ovm",
  Xen = "xen",
}

/**
 * The type of image.
 */
export enum DescribeImagesResultImagesImageTypeEnum {
  Machine = "machine",
  Kernel = "kernel",
  Ramdisk = "ramdisk",
}

/**
 * If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.
 */
export enum DescribeImagesResultImagesImdsSupportEnum {
  V20 = "v2.0",
}

/**
 * This value is set to <code>windows</code> for Windows AMIs; otherwise, it is blank.
 */
export enum DescribeImagesResultImagesPlatformEnum {
  Windows = "Windows",
}

/**
 * The type of product code.
 */
export enum DescribeImagesResultImagesProductCodesProductCodeTypeEnum {
  Devpay = "devpay",
  Marketplace = "marketplace",
}

/**
 * Describes a product code.
 */
export class DescribeImagesResultImagesProductCodes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  productCodeId?: string;

  @SpeakeasyMetadata()
  productCodeType?: DescribeImagesResultImagesProductCodesProductCodeTypeEnum;
}

/**
 * The type of root device used by the AMI. The AMI can use an Amazon EBS volume or an instance store volume.
 */
export enum DescribeImagesResultImagesRootDeviceTypeEnum {
  Ebs = "ebs",
  InstanceStore = "instance-store",
}

/**
 * The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and can be used to launch an instance.
 */
export enum DescribeImagesResultImagesStateEnum {
  Pending = "pending",
  Available = "available",
  Invalid = "invalid",
  Deregistered = "deregistered",
  Transient = "transient",
  Failed = "failed",
  Error = "error",
}

/**
 * The reason for the state change.
 */
export class DescribeImagesResultImagesStateReason extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: string;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * Describes a tag.
 */
export class DescribeImagesResultImagesTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * If the image is configured for NitroTPM support, the value is <code>v2.0</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html">NitroTPM</a> in the <i>Amazon EC2 User Guide</i>.
 */
export enum DescribeImagesResultImagesTpmSupportEnum {
  V20 = "v2.0",
}

/**
 * The type of virtualization of the AMI.
 */
export enum DescribeImagesResultImagesVirtualizationTypeEnum {
  Hvm = "hvm",
  Paravirtual = "paravirtual",
}

/**
 * Describes an image.
 */
export class DescribeImagesResultImages extends SpeakeasyBase {
  @SpeakeasyMetadata()
  architecture?: DescribeImagesResultImagesArchitectureEnum;

  @SpeakeasyMetadata({
    elemType: DescribeImagesResultImagesBlockDeviceMappings,
  })
  blockDeviceMappings?: DescribeImagesResultImagesBlockDeviceMappings[];

  @SpeakeasyMetadata()
  bootMode?: DescribeImagesResultImagesBootModeEnum;

  @SpeakeasyMetadata()
  creationDate?: string;

  @SpeakeasyMetadata()
  deprecationTime?: string;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  enaSupport?: boolean;

  @SpeakeasyMetadata()
  hypervisor?: DescribeImagesResultImagesHypervisorEnum;

  @SpeakeasyMetadata()
  imageId?: string;

  @SpeakeasyMetadata()
  imageLocation?: string;

  @SpeakeasyMetadata()
  imageOwnerAlias?: string;

  @SpeakeasyMetadata()
  imageType?: DescribeImagesResultImagesImageTypeEnum;

  @SpeakeasyMetadata()
  imdsSupport?: DescribeImagesResultImagesImdsSupportEnum;

  @SpeakeasyMetadata()
  kernelId?: string;

  @SpeakeasyMetadata()
  name?: string;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  platform?: DescribeImagesResultImagesPlatformEnum;

  @SpeakeasyMetadata()
  platformDetails?: string;

  @SpeakeasyMetadata({ elemType: DescribeImagesResultImagesProductCodes })
  productCodes?: DescribeImagesResultImagesProductCodes[];

  @SpeakeasyMetadata()
  public?: boolean;

  @SpeakeasyMetadata()
  ramdiskId?: string;

  @SpeakeasyMetadata()
  rootDeviceName?: string;

  @SpeakeasyMetadata()
  rootDeviceType?: DescribeImagesResultImagesRootDeviceTypeEnum;

  @SpeakeasyMetadata()
  sriovNetSupport?: string;

  @SpeakeasyMetadata()
  state?: DescribeImagesResultImagesStateEnum;

  @SpeakeasyMetadata()
  stateReason?: DescribeImagesResultImagesStateReason;

  @SpeakeasyMetadata({ elemType: DescribeImagesResultImagesTags })
  tags?: DescribeImagesResultImagesTags[];

  @SpeakeasyMetadata()
  tpmSupport?: DescribeImagesResultImagesTpmSupportEnum;

  @SpeakeasyMetadata()
  usageOperation?: string;

  @SpeakeasyMetadata()
  virtualizationType?: DescribeImagesResultImagesVirtualizationTypeEnum;
}

/**
 * Success
 */
export class DescribeImagesResult extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: DescribeImagesResultImages })
  images?: DescribeImagesResultImages[];

  @SpeakeasyMetadata()
  nextToken?: string;
}
