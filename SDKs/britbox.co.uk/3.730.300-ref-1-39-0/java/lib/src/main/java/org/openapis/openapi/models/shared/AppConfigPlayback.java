/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class AppConfigPlayback {
    /**
     * The number of seconds before autoplay of next video.
     * 
     * If set to 0 there will be no autoplay.
     * 
     */
    @JsonProperty("chainPlayCountdown")
    public Integer chainPlayCountdown;
    public AppConfigPlayback withChainPlayCountdown(Integer chainPlayCountdown) {
        this.chainPlayCountdown = chainPlayCountdown;
        return this;
    }
    
    /**
     * The number of seconds before the end of playback when the current video
     * should be minimized and user options are presented within the video player.
     * 
     * If set to 0 there will be no squeezeback.
     * 
     */
    @JsonProperty("chainPlaySqueezeback")
    public Integer chainPlaySqueezeback;
    public AppConfigPlayback withChainPlaySqueezeback(Integer chainPlaySqueezeback) {
        this.chainPlaySqueezeback = chainPlaySqueezeback;
        return this;
    }
    
    /**
     * The number of minutes of user inactivity before autoplay is paused.
     * 
     * If set to 0 there will be no autoplay timeout.
     * 
     */
    @JsonProperty("chainPlayTimeout")
    public Integer chainPlayTimeout;
    public AppConfigPlayback withChainPlayTimeout(Integer chainPlayTimeout) {
        this.chainPlayTimeout = chainPlayTimeout;
        return this;
    }
    
    /**
     * How often a heartbeat should be renewed during playback.
     */
    @JsonProperty("heartbeatFrequency")
    public Integer heartbeatFrequency;
    public AppConfigPlayback withHeartbeatFrequency(Integer heartbeatFrequency) {
        this.heartbeatFrequency = heartbeatFrequency;
        return this;
    }
    
    /**
     * An array of percentage points in which to fire off plabyack view events.
     * For example a value of 0.5 would indicate that an event should be
     * fired when the user is half way through the video.
     * Often known as quartiles when four equaly spread event points.
     * 
     */
    @JsonProperty("viewEventPoints")
    public Double[] viewEventPoints;
    public AppConfigPlayback withViewEventPoints(Double[] viewEventPoints) {
        this.viewEventPoints = viewEventPoints;
        return this;
    }
    
}
