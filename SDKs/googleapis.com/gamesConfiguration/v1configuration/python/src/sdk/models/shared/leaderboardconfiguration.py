"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import leaderboardconfigurationdetail as shared_leaderboardconfigurationdetail
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LeaderboardConfigurationScoreOrderEnum(str, Enum):
    SCORE_ORDER_UNSPECIFIED = 'SCORE_ORDER_UNSPECIFIED'
    LARGER_IS_BETTER = 'LARGER_IS_BETTER'
    SMALLER_IS_BETTER = 'SMALLER_IS_BETTER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LeaderboardConfiguration:
    r"""An leaderboard configuration resource."""
    
    draft: Optional[shared_leaderboardconfigurationdetail.LeaderboardConfigurationDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft'), 'exclude': lambda f: f is None }})
    r"""A leaderboard configuration detail."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the leaderboard."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfiguration`."""  
    published: Optional[shared_leaderboardconfigurationdetail.LeaderboardConfigurationDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published'), 'exclude': lambda f: f is None }})
    r"""A leaderboard configuration detail."""  
    score_max: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoreMax'), 'exclude': lambda f: f is None }})
    r"""Maximum score that can be posted to this leaderboard."""  
    score_min: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoreMin'), 'exclude': lambda f: f is None }})
    r"""Minimum score that can be posted to this leaderboard."""  
    score_order: Optional[LeaderboardConfigurationScoreOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoreOrder'), 'exclude': lambda f: f is None }})  
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})
    r"""The token for this resource."""  
    