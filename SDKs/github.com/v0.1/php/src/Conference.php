<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Conference 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * /v0.1/ConferenceDeaf/
     * 
     * Blocks audio to one or more conference members
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceDeafParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceDeafSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceDeafResponse
     */
	public function postV01ConferenceDeaf(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceDeafParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceDeafSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceDeafResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceDeaf/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceDeafResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceDeafResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceDeafResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceHangup/
     * 
     * Kicks one or more conference members, without playing the kick sound
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceHangupParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceHangupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceHangupResponse
     */
	public function postV01ConferenceHangup(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceHangupParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceHangupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceHangupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceHangup/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceHangupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceHangupResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceHangupResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceKick/
     * 
     * Kicks one or more conference members
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceKickParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceKickSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceKickResponse
     */
	public function postV01ConferenceKick(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceKickParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceKickSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceKickResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceKick/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceKickResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceKickResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceKickResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceList/
     * 
     * Returns a list of all established conferences
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceListParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListResponse
     */
	public function postV01ConferenceList(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceListParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceList/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceListMembers/
     * 
     * Retrieves the member list for a given conference
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceListMembersParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListMembersResponse
     */
	public function postV01ConferenceListMembers(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceListMembersParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceListMembers/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceListMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceListMembersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceListMembersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceMute/
     * 
     * Blocks audio from one or more conference members
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceMuteParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceMuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceMuteResponse
     */
	public function postV01ConferenceMute(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceMuteParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceMuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceMuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceMute/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceMuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceMuteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceMuteResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferencePlay/
     * 
     * Plays media to one or more conference members
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferencePlayParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferencePlaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferencePlayResponse
     */
	public function postV01ConferencePlay(
        \OpenAPI\OpenAPI\Models\Shared\ConferencePlayParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferencePlaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferencePlayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferencePlay/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferencePlayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferencePlayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferencePlayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceRecordStart/
     * 
     * Initiates a conference recording
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceRecordStartParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStartResponse
     */
	public function postV01ConferenceRecordStart(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceRecordStartParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceRecordStart/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceRecordStartResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceRecordStartResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceRecordStop/
     * 
     * Stops a conference recording
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceRecordStopParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStopResponse
     */
	public function postV01ConferenceRecordStop(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceRecordStopParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceRecordStop/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceRecordStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceRecordStopResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceRecordStopResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceSpeak/
     * 
     * Plays synthesized speech into a conference
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceSpeakParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceSpeakSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceSpeakResponse
     */
	public function postV01ConferenceSpeak(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceSpeakParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceSpeakSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceSpeakResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceSpeak/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceSpeakResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceSpeakResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceSpeakResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceUndeaf/
     * 
     * Restores audio to one or more conference members
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceUndeafParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUndeafSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUndeafResponse
     */
	public function postV01ConferenceUndeaf(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceUndeafParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUndeafSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUndeafResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceUndeaf/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUndeafResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceUndeafResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceUndeafResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /v0.1/ConferenceUnmute/
     * 
     * Restores audio from one or more conference members
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConferenceUnmuteParameters $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUnmuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUnmuteResponse
     */
	public function postV01ConferenceUnmute(
        \OpenAPI\OpenAPI\Models\Shared\ConferenceUnmuteParameters $request,
        \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUnmuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUnmuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/ConferenceUnmute/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV01ConferenceUnmuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conferenceUnmuteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConferenceUnmuteResponse', 'json');
            }
        }

        return $response;
    }
}