"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Preview:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def destiny2_get_clan_aggregate_stats(self, request: operations.Destiny2GetClanAggregateStatsRequest) -> operations.Destiny2GetClanAggregateStatsResponse:
        r"""Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetClanAggregateStatsRequest, base_url, '/Destiny2/Stats/AggregateClanStats/{groupId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetClanAggregateStatsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetClanAggregateStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_clan_leaderboards(self, request: operations.Destiny2GetClanLeaderboardsRequest) -> operations.Destiny2GetClanLeaderboardsResponse:
        r"""Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetClanLeaderboardsRequest, base_url, '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetClanLeaderboardsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetClanLeaderboardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_leaderboards(self, request: operations.Destiny2GetLeaderboardsRequest) -> operations.Destiny2GetLeaderboardsResponse:
        r"""Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetLeaderboardsRequest, base_url, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetLeaderboardsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetLeaderboardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_leaderboards_for_character(self, request: operations.Destiny2GetLeaderboardsForCharacterRequest) -> operations.Destiny2GetLeaderboardsForCharacterResponse:
        r"""Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Destiny2GetLeaderboardsForCharacterRequest, base_url, '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', request)
        
        query_params = utils.get_query_params(operations.Destiny2GetLeaderboardsForCharacterRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetLeaderboardsForCharacterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_get_public_vendors(self, request: operations.Destiny2GetPublicVendorsRequest) -> operations.Destiny2GetPublicVendorsResponse:
        r"""Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Vendors/'
        
        query_params = utils.get_query_params(operations.Destiny2GetPublicVendorsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2GetPublicVendorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_insert_socket_plug(self) -> operations.Destiny2InsertSocketPlugResponse:
        r"""Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/InsertSocketPlug/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2InsertSocketPlugResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def destiny2_insert_socket_plug_free(self) -> operations.Destiny2InsertSocketPlugFreeResponse:
        r"""Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Destiny2/Actions/Items/InsertSocketPlugFree/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Destiny2InsertSocketPlugFreeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    