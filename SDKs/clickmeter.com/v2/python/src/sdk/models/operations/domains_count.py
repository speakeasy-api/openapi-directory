"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_core_responses_countresponce as shared_api_core_responses_countresponce
from enum import Enum
from typing import Optional

class DomainsCountTypeEnum(str, Enum):
    r"""Type of domain (\\"system\\"/\\"go\\"/\\"personal\\"/\\"dedicated\\"). If not specified default is \\"system\\" """
    SYSTEM = 'system'
    GO = 'go'
    PERSONAL = 'personal'
    DEDICATED = 'dedicated'


@dataclasses.dataclass
class DomainsCountRequest:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Filter domains with this anmen"""  
    type: Optional[DomainsCountTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Type of domain (\\"system\\"/\\"go\\"/\\"personal\\"/\\"dedicated\\"). If not specified default is \\"system\\" """  
    

@dataclasses.dataclass
class DomainsCountResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_core_responses_count_responce: Optional[shared_api_core_responses_countresponce.APICoreResponsesCountResponce] = dataclasses.field(default=None)  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    