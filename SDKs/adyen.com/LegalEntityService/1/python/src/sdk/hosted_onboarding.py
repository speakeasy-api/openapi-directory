"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class HostedOnboarding:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_themes(self) -> operations.GetThemesResponse:
        r"""Get a list of hosted onboarding page themes
        Returns a list of hosted onboarding page themes.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/themes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetThemesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnboardingThemes])
                res.onboarding_themes = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_themes_id(self, request: operations.GetThemesIDRequest, security: operations.GetThemesIDSecurity) -> operations.GetThemesIDResponse:
        r"""Get an onboarding link theme
        Returns the details of the theme identified in the path.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetThemesIDRequest, base_url, '/themes/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetThemesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnboardingTheme])
                res.onboarding_theme = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def post_legal_entities_id_onboarding_links(self, request: operations.PostLegalEntitiesIDOnboardingLinksRequest, security: operations.PostLegalEntitiesIDOnboardingLinksSecurity) -> operations.PostLegalEntitiesIDOnboardingLinksResponse:
        r"""Get a link to an Adyen-hosted onboarding page
        Returns a link to an Adyen-hosted onboarding page where you need to redirect your user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostLegalEntitiesIDOnboardingLinksRequest, base_url, '/legalEntities/{id}/onboardingLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "onboarding_link_info", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostLegalEntitiesIDOnboardingLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnboardingLink])
                res.onboarding_link = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    