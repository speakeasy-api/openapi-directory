// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaymentReadRequestPaymentProductEnum - * `T2P` - target-2-payments
// * `SCT` - sepa-credit-transfers
// * `ISCT` - instant-sepa-credit-transfer
// * `CBCT` - cross-border-credit-transfers
// * `BACS` - Back Payment Scheme
// * `CHAPS` - CHAPS Payment Scheme
// * `FPS` - Faster Payment Scheme
// * `SWIFT` - Swift Payment Service
// * `BT` - Balance Transfer
// * `MT` - Money Transfer
type PaymentReadRequestPaymentProductEnum string

const (
	PaymentReadRequestPaymentProductEnumT2P   PaymentReadRequestPaymentProductEnum = "T2P"
	PaymentReadRequestPaymentProductEnumSct   PaymentReadRequestPaymentProductEnum = "SCT"
	PaymentReadRequestPaymentProductEnumIsct  PaymentReadRequestPaymentProductEnum = "ISCT"
	PaymentReadRequestPaymentProductEnumCbct  PaymentReadRequestPaymentProductEnum = "CBCT"
	PaymentReadRequestPaymentProductEnumBacs  PaymentReadRequestPaymentProductEnum = "BACS"
	PaymentReadRequestPaymentProductEnumChaps PaymentReadRequestPaymentProductEnum = "CHAPS"
	PaymentReadRequestPaymentProductEnumFps   PaymentReadRequestPaymentProductEnum = "FPS"
	PaymentReadRequestPaymentProductEnumSwift PaymentReadRequestPaymentProductEnum = "SWIFT"
	PaymentReadRequestPaymentProductEnumBt    PaymentReadRequestPaymentProductEnum = "BT"
	PaymentReadRequestPaymentProductEnumMt    PaymentReadRequestPaymentProductEnum = "MT"
)

func (e PaymentReadRequestPaymentProductEnum) ToPointer() *PaymentReadRequestPaymentProductEnum {
	return &e
}

func (e *PaymentReadRequestPaymentProductEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "T2P":
		fallthrough
	case "SCT":
		fallthrough
	case "ISCT":
		fallthrough
	case "CBCT":
		fallthrough
	case "BACS":
		fallthrough
	case "CHAPS":
		fallthrough
	case "FPS":
		fallthrough
	case "SWIFT":
		fallthrough
	case "BT":
		fallthrough
	case "MT":
		*e = PaymentReadRequestPaymentProductEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentReadRequestPaymentProductEnum: %v", v)
	}
}

// PaymentReadRequest - PaymentReadSerializer.
type PaymentReadRequest struct {
	// Registered creditor account
	CreditorAccount *string `json:"creditor_account,omitempty"`
	// Creditor account
	CreditorObject *CreditorAccountWriteRequest `json:"creditor_object,omitempty"`
	// Payment Custom Payment ID
	CustomPaymentID *string `json:"custom_payment_id,omitempty"`
	// Debtor account write serializer.
	DebtorAccount DebtorAccountWriteRequest `json:"debtor_account"`
	// Payment description
	Description *string `json:"description,omitempty"`
	// Institution ID for Payment
	InstitutionID *string `json:"institution_id,omitempty"`
	// Instructed amount
	InstructedAmount InstructedAmountRequest `json:"instructed_amount"`
	// Payment product
	//
	// * `T2P` - target-2-payments
	// * `SCT` - sepa-credit-transfers
	// * `ISCT` - instant-sepa-credit-transfer
	// * `CBCT` - cross-border-credit-transfers
	// * `BACS` - Back Payment Scheme
	// * `CHAPS` - CHAPS Payment Scheme
	// * `FPS` - Faster Payment Scheme
	// * `SWIFT` - Swift Payment Service
	// * `BT` - Balance Transfer
	// * `MT` - Money Transfer
	PaymentProduct *PaymentReadRequestPaymentProductEnum `json:"payment_product,omitempty"`
	// Redirect URL to your application after payment is done
	Redirect string `json:"redirect"`
}
