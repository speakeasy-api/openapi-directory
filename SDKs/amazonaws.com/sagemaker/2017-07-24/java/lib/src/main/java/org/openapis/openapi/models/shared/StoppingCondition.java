/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StoppingCondition - &lt;p&gt;Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.&lt;/p&gt; &lt;p&gt;To stop a training job, SageMaker sends the algorithm the &lt;code&gt;SIGTERM&lt;/code&gt; signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. &lt;/p&gt; &lt;p&gt;The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with &lt;code&gt;CreateModel&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.&lt;/p&gt; &lt;/note&gt;
 */
public class StoppingCondition {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxRuntimeInSeconds")
    public Long maxRuntimeInSeconds;
    public StoppingCondition withMaxRuntimeInSeconds(Long maxRuntimeInSeconds) {
        this.maxRuntimeInSeconds = maxRuntimeInSeconds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxWaitTimeInSeconds")
    public Long maxWaitTimeInSeconds;
    public StoppingCondition withMaxWaitTimeInSeconds(Long maxWaitTimeInSeconds) {
        this.maxWaitTimeInSeconds = maxWaitTimeInSeconds;
        return this;
    }
    
}
