<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Categories 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCategoryRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCategoryResponse
     */
	public function createCategory(
        \OpenAPI\OpenAPI\Models\Operations\CreateCategoryRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/categories.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCategory200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateCategory200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCategoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCategoryResponse
     */
	public function getCategory(
        \OpenAPI\OpenAPI\Models\Operations\GetCategoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/c/{id}/show.json', \OpenAPI\OpenAPI\Models\Operations\GetCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCategory200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCategory200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get site info
     * 
     * Can be used to fetch all categories and subcategories
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse
     */
	public function getSite(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSite200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSite200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCategoriesResponse
     */
	public function listCategories(
        \OpenAPI\OpenAPI\Models\Operations\ListCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/categories.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCategoriesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCategories200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCategories200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List topics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCategoryTopicsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCategoryTopicsResponse
     */
	public function listCategoryTopics(
        \OpenAPI\OpenAPI\Models\Operations\ListCategoryTopicsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCategoryTopicsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/c/{slug}/{id}.json', \OpenAPI\OpenAPI\Models\Operations\ListCategoryTopicsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCategoryTopicsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCategoryTopics200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCategoryTopics200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCategoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCategoryResponse
     */
	public function updateCategory(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCategoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/categories/{id}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCategory200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateCategory200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}