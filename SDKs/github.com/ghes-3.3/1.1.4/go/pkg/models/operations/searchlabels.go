// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchLabelsSortEnum - Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.3/rest/reference/search#ranking-search-results)
type SearchLabelsSortEnum string

const (
	SearchLabelsSortEnumCreated SearchLabelsSortEnum = "created"
	SearchLabelsSortEnumUpdated SearchLabelsSortEnum = "updated"
)

func (e *SearchLabelsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "updated":
		*e = SearchLabelsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchLabelsSortEnum: %s", s)
	}
}

type SearchLabelsQueryParams struct {
	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *shared.OrderEnum `queryParam:"style=form,explode=true,name=order"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.3/rest/reference/search#constructing-a-search-query).
	Q string `queryParam:"style=form,explode=true,name=q"`
	// The id of the repository.
	RepositoryID int64 `queryParam:"style=form,explode=true,name=repository_id"`
	// Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.3/rest/reference/search#ranking-search-results)
	Sort *SearchLabelsSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type SearchLabelsRequest struct {
	QueryParams SearchLabelsQueryParams
}

// SearchLabels200ApplicationJSON - Response
type SearchLabels200ApplicationJSON struct {
	IncompleteResults bool                           `json:"incomplete_results"`
	Items             []shared.LabelSearchResultItem `json:"items"`
	TotalCount        int64                          `json:"total_count"`
}

type SearchLabelsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	SearchLabels200ApplicationJSONObject *SearchLabels200ApplicationJSON
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
