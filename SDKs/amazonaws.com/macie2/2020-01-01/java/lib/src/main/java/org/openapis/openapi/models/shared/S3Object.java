/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * S3Object - Provides information about the S3 object that a finding applies to.
 */
public class S3Object {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucketArn")
    public String bucketArn;

    public S3Object withBucketArn(String bucketArn) {
        this.bucketArn = bucketArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eTag")
    public String eTag;

    public S3Object withETag(String eTag) {
        this.eTag = eTag;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extension")
    public String extension;

    public S3Object withExtension(String extension) {
        this.extension = extension;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public S3Object withKey(String key) {
        this.key = key;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastModified")
    public OffsetDateTime lastModified;

    public S3Object withLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public S3Object withPath(String path) {
        this.path = path;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicAccess")
    public Boolean publicAccess;

    public S3Object withPublicAccess(Boolean publicAccess) {
        this.publicAccess = publicAccess;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverSideEncryption")
    public ServerSideEncryption serverSideEncryption;

    public S3Object withServerSideEncryption(ServerSideEncryption serverSideEncryption) {
        this.serverSideEncryption = serverSideEncryption;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;

    public S3Object withSize(Long size) {
        this.size = size;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageClass")
    public StorageClassEnum storageClass;

    public S3Object withStorageClass(StorageClassEnum storageClass) {
        this.storageClass = storageClass;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public KeyValuePair[] tags;

    public S3Object withTags(KeyValuePair[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versionId")
    public String versionId;

    public S3Object withVersionId(String versionId) {
        this.versionId = versionId;
        return this;
    }
    
    public S3Object(){}
}
