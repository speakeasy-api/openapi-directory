"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "http://api.opendatanetwork.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Socrata OpenDataNetwork (ODN) REST API exposes public data, often continuosly updated and enhanced, from many thousands of public
    government and non profit agencies.
    
    Much of this data originating from independent sources is fused together to create new, and often
    powerful, entity level data. The API, in addition to search and autosuggest capabilities for finding datasets,
    enables data based comparisons across geographical regions such as states, counties, metropolitan areas,
    cities and zip codes using highly vetted data providers such as US Census, BEA, HUD and others. Comparison data
    is preformatted for easy and efficient display on a chart, graph or interactive map.
    
    The API also exposes data organized by narrative style questions a human might ask. The questions can
    be rapidly found using an autosuggest style index, and then used to directly access all data needed to
    thoroughly and authoritatively answer the question. Retrieved data includes time series (temporally aligned),
    tabular, map heavy (includes spatial boundaries), and auto generated unstructured descriptive text.
    
    The ODN API does not duplicate API endpoints or services provided by public sector agencies, but rather,
    returns context relevant pre-populated REST URLs, when appropriate, so the caller can access data
    directly from the source.
    
    The [open source](http://github.com/socrata/odn-backend) API powers [OpenDataNetwork.com](http://OpenDataNetwork.com), an [open source](http://github.com/socrata/opendatanetwork.com)
    site; the site highlights myriad uses and provides API badges with contextually relevant API example
    REST endpoints and documentation pointers.
    
    Finally, we continuously add new dat sources which appear automatically in the API, so if your favorite data
    source is not available, check back soon. You can also join us [HERE](http://www.opendatanetwork.com/join-open-data-network)
    and receive updates or let us know which data sources you are most interested in.
    
    ## App Tokens
    
    Registering for and including a [Socrata application token](https://dev.socrata.com/docs/app-tokens.html)
    is _required_ for the ODN API. They can be passed either using the `app_token` parameter
    or the `X-App-Token` HTTP header.
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_a_map(self, request: operations.CreateAMapRequest) -> operations.CreateAMapResponse:
        r"""Create a map"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data/v1/map/new'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.CreateAMapRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAMapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def find_all_available_data_for_some_entities(self, request: operations.FindAllAvailableDataForSomeEntitiesRequest) -> operations.FindAllAvailableDataForSomeEntitiesResponse:
        r"""Find all available data for some entities"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data/v1/availability/'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.FindAllAvailableDataForSomeEntitiesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAllAvailableDataForSomeEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def find_the_relatives_of_an_entity(self, request: operations.FindTheRelativesOfAnEntityRequest) -> operations.FindTheRelativesOfAnEntityResponse:
        r"""Find the relatives of an entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FindTheRelativesOfAnEntityRequest, base_url, '/entity/v1/{relation}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.FindTheRelativesOfAnEntityRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindTheRelativesOfAnEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_entities(self, request: operations.GetEntitiesRequest) -> operations.GetEntitiesResponse:
        r"""Get Entities"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/entity/v1'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetEntitiesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_constraint_permutations_for_entities(self, request: operations.GetConstraintPermutationsForEntitiesRequest) -> operations.GetConstraintPermutationsForEntitiesResponse:
        r"""Get constraint permutations for entities"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConstraintPermutationsForEntitiesRequest, base_url, '/data/v1/constraint/{variable}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetConstraintPermutationsForEntitiesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConstraintPermutationsForEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_datasets(self, request: operations.GetDatasetsRequest) -> operations.GetDatasetsResponse:
        r"""Get datasets"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/search/v1/dataset'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetDatasetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatasetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_questions(self, request: operations.GetQuestionsRequest) -> operations.GetQuestionsResponse:
        r"""Get questions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/search/v1/question'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetQuestionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetQuestionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_suggestions(self, request: operations.GetSuggestionsRequest) -> operations.GetSuggestionsResponse:
        r"""Get suggestions"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSuggestionsRequest, base_url, '/suggest/v1/{type}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetSuggestionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSuggestionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_values_for_variables(self, request: operations.GetValuesForVariablesRequest) -> operations.GetValuesForVariablesResponse:
        r"""Get values for variables"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/data/v1/values'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetValuesForVariablesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetValuesForVariablesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    