/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The object that contains the Docker image URI for either your robot or simulation applications.
 */
export class UpdateSimulationApplicationRequestBodyEnvironment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information about a rendering engine.
 */
export class UpdateSimulationApplicationRequestBodyRenderingEngine extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: shared.RenderingEngineTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

/**
 * Information about a robot software suite (ROS distribution).
 */
export class UpdateSimulationApplicationRequestBodyRobotSoftwareSuite extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: shared.RobotSoftwareSuiteTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: shared.RobotSoftwareSuiteVersionTypeEnum;
}

/**
 * Information about a simulation software suite.
 */
export class UpdateSimulationApplicationRequestBodySimulationSoftwareSuite extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: shared.SimulationSoftwareSuiteTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

export class UpdateSimulationApplicationRequestBody extends SpeakeasyBase {
  /**
   * The application information for the simulation application.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "application" })
  application: string;

  /**
   * The revision id for the robot application.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentRevisionId" })
  currentRevisionId?: string;

  /**
   * The object that contains the Docker image URI for either your robot or simulation applications.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environment" })
  @Type(() => UpdateSimulationApplicationRequestBodyEnvironment)
  environment?: UpdateSimulationApplicationRequestBodyEnvironment;

  /**
   * Information about a rendering engine.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renderingEngine" })
  @Type(() => UpdateSimulationApplicationRequestBodyRenderingEngine)
  renderingEngine?: UpdateSimulationApplicationRequestBodyRenderingEngine;

  /**
   * Information about a robot software suite (ROS distribution).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "robotSoftwareSuite" })
  @Type(() => UpdateSimulationApplicationRequestBodyRobotSoftwareSuite)
  robotSoftwareSuite: UpdateSimulationApplicationRequestBodyRobotSoftwareSuite;

  /**
   * Information about a simulation software suite.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "simulationSoftwareSuite" })
  @Type(() => UpdateSimulationApplicationRequestBodySimulationSoftwareSuite)
  simulationSoftwareSuite: UpdateSimulationApplicationRequestBodySimulationSoftwareSuite;

  /**
   * The sources of the simulation application.
   */
  @SpeakeasyMetadata({ elemType: shared.SourceConfig })
  @Expose({ name: "sources" })
  @Type(() => shared.SourceConfig)
  sources?: shared.SourceConfig[];
}

export class UpdateSimulationApplicationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateSimulationApplicationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateSimulationApplicationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateSimulationApplicationResponse?: shared.UpdateSimulationApplicationResponse;
}
