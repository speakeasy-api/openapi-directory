<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class CreateWorkspaceCreateWorkspaceRequest
{
    /**
     * The URL we should call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
     * 
     * @var ?string $eventCallbackUrl
     */
	#[SpeakeasyMetadata('form:name=EventCallbackUrl')]
    public ?string $eventCallbackUrl = null;
    
    /**
     * The list of Workspace events for which to call event_callback_url. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
     * 
     * @var ?string $eventsFilter
     */
	#[SpeakeasyMetadata('form:name=EventsFilter')]
    public ?string $eventsFilter = null;
    
    /**
     * A descriptive string that you create to describe the Workspace resource. It can be up to 64 characters long. For example: `Customer Support` or `2014 Election Campaign`.
     * 
     * @var string $friendlyName
     */
	#[SpeakeasyMetadata('form:name=FriendlyName')]
    public string $friendlyName;
    
    /**
     * Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be created as multi-tasking. The default is `true`. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
     * 
     * @var ?bool $multiTaskEnabled
     */
	#[SpeakeasyMetadata('form:name=MultiTaskEnabled')]
    public ?bool $multiTaskEnabled = null;
    
	#[SpeakeasyMetadata('form:name=PrioritizeQueueOrder')]
    public ?\OpenAPI\OpenAPI\Models\Shared\WorkspaceEnumQueueOrderEnum $prioritizeQueueOrder = null;
    
    /**
     * An available template name. Can be: `NONE` or `FIFO` and the default is `NONE`. Pre-configures the Workspace with the Workflow and Activities specified in the template. `NONE` will create a Workspace with only a set of default activities. `FIFO` will configure TaskRouter with a set of default activities and a single TaskQueue for first-in, first-out distribution, which can be useful when you are getting started with TaskRouter.
     * 
     * @var ?string $template
     */
	#[SpeakeasyMetadata('form:name=Template')]
    public ?string $template = null;
    
	public function __construct()
	{
		$this->eventCallbackUrl = null;
		$this->eventsFilter = null;
		$this->friendlyName = "";
		$this->multiTaskEnabled = null;
		$this->prioritizeQueueOrder = null;
		$this->template = null;
	}
}
