/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Report - The complex type that defines that defines the report.
 */
public class Report {
    /**
     * A complex type containing the header of the report and the type of data containted in the rows of the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensionMetadata")
    public Metadata[] dimensionMetadata;

    public Report withDimensionMetadata(Metadata[] dimensionMetadata) {
        this.dimensionMetadata = dimensionMetadata;
        return this;
    }
    
    /**
     * The time stamp is formatted as an ISO 8601 string, which is based on the 24-hour Universal Coordinated Time (UTC) clock. If you specify an end date that is beyond the lastUpdatedDate value, eBay returns a report that contains data only up to the lastUpdateDate date. Format: [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z Example: 2018-08-20T07:09:00.000Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    public String endDate;

    public Report withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Type that defines the headers for the dimension keys and metrics returned in the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header")
    public Header header;

    public Report withHeader(Header header) {
        this.header = header;
        return this;
    }
    
    /**
     * The date and time, in ISO 8601 format, that indicates the last time the data returned in the report was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdatedDate")
    public String lastUpdatedDate;

    public Report withLastUpdatedDate(String lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
        return this;
    }
    
    /**
     * A complex type containing the individual data records for the traffic report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("records")
    public Record[] records;

    public Report withRecords(Record[] records) {
        this.records = records;
        return this;
    }
    
    /**
     * The start date of the date range used to calculate the report, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    public String startDate;

    public Report withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * An array of any process errors or warnings that were generated during the processing of the call processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warnings")
    public Error[] warnings;

    public Report withWarnings(Error[] warnings) {
        this.warnings = warnings;
        return this;
    }
    
    public Report(){}
}
