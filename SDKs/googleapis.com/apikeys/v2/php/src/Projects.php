<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateResponse
     */
	public function apikeysProjectsLocationsKeysCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/keys', \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "v2KeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an API key. Deleted key can be retrieved within 30 days of deletion. Afterward, key will be purged from the project. NOTE: Key is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteResponse
     */
	public function apikeysProjectsLocationsKeysDelete(
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the metadata for an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetResponse
     */
	public function apikeysProjectsLocationsKeysGet(
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v2Key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V2Key', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the key string for an API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringResponse
     */
	public function apikeysProjectsLocationsKeysGetKeyString(
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/keyString', \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysGetKeyStringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v2GetKeyStringResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V2GetKeyStringResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the API keys owned by a project. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListResponse
     */
	public function apikeysProjectsLocationsKeysList(
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/keys', \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->v2ListKeysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\V2ListKeysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the modifiable fields of an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchResponse
     */
	public function apikeysProjectsLocationsKeysPatch(
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "v2KeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undeletes an API key which was deleted within 30 days. NOTE: Key is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteResponse
     */
	public function apikeysProjectsLocationsKeysUndelete(
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:undelete', \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApikeysProjectsLocationsKeysUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}