/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChangedBy } from "./changedby";
import { CreatedBy } from "./createdby";
import { ScanProfileEnum } from "./scanprofileenum";
import { ScanStatusEnum } from "./scanstatusenum";
import { TargetSimple } from "./targetsimple";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The current state of the crawler
 */
export enum ScanCrawlerStateEnum {
  Started = "started",
  Ended = "ended",
}

/**
 * The number of crawled URLs and total number of URLs in the queue
 */
export class ScanCrawlerStatus extends SpeakeasyBase {
  /**
   * Number of crawled URLs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "0" })
  zero?: number;

  /**
   * Total number of URLs in the queue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "1" })
  one?: number;
}

/**
 * Information on the status of the crawling step of the scanning process
 */
export class ScanCrawler extends SpeakeasyBase {
  /**
   * List of possible errors from the crawler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string[];

  /**
   * The current state of the crawler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: ScanCrawlerStateEnum;

  /**
   * The number of crawled URLs and total number of URLs in the queue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => ScanCrawlerStatus)
  status?: ScanCrawlerStatus;

  /**
   * List of possible warnings from the crawler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warning" })
  warning?: string[];
}

/**
 * The current state of the fingerprinter
 */
export enum ScanFingerprinterStateEnum {
  Started = "started",
  Ended = "ended",
}

/**
 * Information on the status of the crawling step of the scanning process
 */
export class ScanFingerprinter extends SpeakeasyBase {
  /**
   * The number of detected frameworks/software on the target
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * List of possible errors from the fingerprinter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string[];

  /**
   * The current state of the fingerprinter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: ScanFingerprinterStateEnum;

  /**
   * List of possible warnings from the fingerprinter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warning" })
  warning?: string[];
}

/**
 * The current state of the scanner
 */
export enum ScanScannerStateEnum {
  Started = "started",
  Ended = "ended",
}

/**
 * The number of scanner tasks completed and total number of tasks in the queue
 */
export class ScanScannerStatus extends SpeakeasyBase {
  /**
   * Number of completed tasks
   */
  @SpeakeasyMetadata()
  @Expose({ name: "0" })
  zero?: number;

  /**
   * Total number of tasks in the queue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "1" })
  one?: number;
}

/**
 * Information on the status of the search for vulnerabilities of the scanning process
 */
export class ScanScanner extends SpeakeasyBase {
  /**
   * List of possible errors from the scanner
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string[];

  /**
   * The current state of the scanner
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: ScanScannerStateEnum;

  /**
   * The number of scanner tasks completed and total number of tasks in the queue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => ScanScannerStatus)
  status?: ScanScannerStatus;

  /**
   * List of possible warnings from the scanner
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warning" })
  warning?: string[];
}

/**
 * Event object.
 */
export class Scan extends SpeakeasyBase {
  /**
   * Date time of the last change
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  changed?: Date;

  /**
   * User that last modified the object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed_by" })
  @Type(() => ChangedBy)
  changedBy?: ChangedBy;

  /**
   * Date time of scan completion
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completed" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completed?: Date;

  /**
   * Information on the status of the crawling step of the scanning process
   */
  @SpeakeasyMetadata()
  @Expose({ name: "crawler" })
  @Type(() => ScanCrawler)
  crawler?: ScanCrawler;

  /**
   * Date time of creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  /**
   * User that created the object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  @Type(() => CreatedBy)
  createdBy?: CreatedBy;

  /**
   * Information on the status of the crawling step of the scanning process
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprinter" })
  @Type(() => ScanFingerprinter)
  fingerprinter?: ScanFingerprinter;

  /**
   * Number of high severity findings in this scan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "highs" })
  highs?: number;

  /**
   * Object id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Number of low severity findings in this scan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lows" })
  lows?: number;

  /**
   * Number of medium severity findings in this scan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mediums" })
  mediums?: number;

  /**
   * * lightning - fast simple scan
   *
   * @remarks
   * * normal - default profile
   * * full - does everything the default profile does and adds boolean based
   * SQL injection tests
   * * safe - doesn't use any content changing methods (no POST, DELETE, etc)
   * and tries fewer payloads for SQL injection tests
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scan_profile" })
  scanProfile?: ScanProfileEnum;

  /**
   * Information on the status of the search for vulnerabilities of the scanning process
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scanner" })
  @Type(() => ScanScanner)
  scanner?: ScanScanner;

  /**
   * Date time of scan start
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  started?: Date;

  /**
   * Current scan status:
   *
   * @remarks
   *   * queued - Scan queued to start
   *   * started - Scan currently running
   *   * under_review - Scan is complete but we need to verify some findings
   *   * completed - Scan complete
   *   * completed_with_errors - Scan complete with error(s) in non essential modules
   *   * failed - Something went seriously wrong during the scan
   *   * canceled - Scan was canceled
   *   * canceling - Stopping scan
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ScanStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => TargetSimple)
  target?: TargetSimple;
}
