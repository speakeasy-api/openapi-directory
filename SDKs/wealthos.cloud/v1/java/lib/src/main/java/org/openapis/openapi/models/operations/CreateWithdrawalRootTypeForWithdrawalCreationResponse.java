/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateWithdrawalRootTypeForWithdrawalCreationResponse - JSON for the Withdrawal creation response
 */
public class CreateWithdrawalRootTypeForWithdrawalCreationResponse {
    /**
     * Will indicate the date where this record was created
     */
    @JsonProperty("created_at")
    public String createdAt;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Currency of the Withdrawal
     */
    @JsonProperty("currency")
    public String currency;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
     */
    @JsonProperty("direction")
    public CreateWithdrawalRootTypeForWithdrawalCreationResponseDirectionEnum direction;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withDirection(CreateWithdrawalRootTypeForWithdrawalCreationResponseDirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * External Transaction Reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_transaction_reference")
    public String externalTransactionReference;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withExternalTransactionReference(String externalTransactionReference) {
        this.externalTransactionReference = externalTransactionReference;
        return this;
    }
    
    /**
     * investment_product_id
     */
    @JsonProperty("investment_product_id")
    public String investmentProductId;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withInvestmentProductId(String investmentProductId) {
        this.investmentProductId = investmentProductId;
        return this;
    }
    
    /**
     * Origin of the transaction
     */
    @JsonProperty("origin")
    public CreateWithdrawalRootTypeForWithdrawalCreationResponseOriginEnum origin;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withOrigin(CreateWithdrawalRootTypeForWithdrawalCreationResponseOriginEnum origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * Pot ID
     */
    @JsonProperty("pot_id")
    public String potId;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withPotId(String potId) {
        this.potId = potId;
        return this;
    }
    
    @JsonProperty("primary_transaction_type")
    public CreateWithdrawalRootTypeForWithdrawalCreationResponsePrimaryTransactionTypeEnum primaryTransactionType;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withPrimaryTransactionType(CreateWithdrawalRootTypeForWithdrawalCreationResponsePrimaryTransactionTypeEnum primaryTransactionType) {
        this.primaryTransactionType = primaryTransactionType;
        return this;
    }
    
    /**
     * Intended settlement date of the pending transaction or actual the settled day of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement_date")
    public String settlementDate;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withSettlementDate(String settlementDate) {
        this.settlementDate = settlementDate;
        return this;
    }
    
    /**
     * Withdrawal sub transaction type
     */
    @JsonProperty("sub_transaction_type")
    public CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTransactionTypeEnum subTransactionType;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withSubTransactionType(CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTransactionTypeEnum subTransactionType) {
        this.subTransactionType = subTransactionType;
        return this;
    }
    
    /**
     * Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
     */
    @JsonProperty("sub_type")
    public CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTypeEnum subType;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withSubType(CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTypeEnum subType) {
        this.subType = subType;
        return this;
    }
    
    /**
     * Date the transaction was effected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trade_date")
    public String tradeDate;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withTradeDate(String tradeDate) {
        this.tradeDate = tradeDate;
        return this;
    }
    
    /**
     * Unique ID of the withdrawal transaction
     */
    @JsonProperty("transaction_id")
    public String transactionId;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    /**
     * Withdrawal Amount upto 2 decimal places
     */
    @JsonProperty("transaction_value")
    public String transactionValue;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withTransactionValue(String transactionValue) {
        this.transactionValue = transactionValue;
        return this;
    }
    
    /**
     * State of the transaction
     */
    @JsonProperty("type")
    public CreateWithdrawalRootTypeForWithdrawalCreationResponseTypeEnum type;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withType(CreateWithdrawalRootTypeForWithdrawalCreationResponseTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Will indicate the date where this record was last changed
     */
    @JsonProperty("updated_at")
    public String updatedAt;

    public CreateWithdrawalRootTypeForWithdrawalCreationResponse withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public CreateWithdrawalRootTypeForWithdrawalCreationResponse(@JsonProperty("created_at") String createdAt, @JsonProperty("currency") String currency, @JsonProperty("direction") CreateWithdrawalRootTypeForWithdrawalCreationResponseDirectionEnum direction, @JsonProperty("investment_product_id") String investmentProductId, @JsonProperty("origin") CreateWithdrawalRootTypeForWithdrawalCreationResponseOriginEnum origin, @JsonProperty("pot_id") String potId, @JsonProperty("primary_transaction_type") CreateWithdrawalRootTypeForWithdrawalCreationResponsePrimaryTransactionTypeEnum primaryTransactionType, @JsonProperty("sub_transaction_type") CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTransactionTypeEnum subTransactionType, @JsonProperty("sub_type") CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTypeEnum subType, @JsonProperty("transaction_id") String transactionId, @JsonProperty("transaction_value") String transactionValue, @JsonProperty("type") CreateWithdrawalRootTypeForWithdrawalCreationResponseTypeEnum type, @JsonProperty("updated_at") String updatedAt) {
        this.createdAt = createdAt;
        this.currency = currency;
        this.direction = direction;
        this.investmentProductId = investmentProductId;
        this.origin = origin;
        this.potId = potId;
        this.primaryTransactionType = primaryTransactionType;
        this.subTransactionType = subTransactionType;
        this.subType = subType;
        this.transactionId = transactionId;
        this.transactionValue = transactionValue;
        this.type = type;
        this.updatedAt = updatedAt;
  }
}
