"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import automljobcompletioncriteria as shared_automljobcompletioncriteria
from ..shared import automljobobjective as shared_automljobobjective
from ..shared import problemtype_enum as shared_problemtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResolvedAttributes:
    r"""The resolved attributes."""
    
    auto_ml_job_objective: Optional[shared_automljobobjective.AutoMLJobObjective] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobObjective'), 'exclude': lambda f: f is None }})
    r"""Specifies a metric to minimize or maximize as the objective of a job. V2 API jobs (for example jobs created by calling <code>CreateAutoMLJobV2</code>), support <code>Accuracy</code> only."""  
    completion_criteria: Optional[shared_automljobcompletioncriteria.AutoMLJobCompletionCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionCriteria'), 'exclude': lambda f: f is None }})
    r"""How long a job is allowed to run, or how many candidates a job is allowed to generate."""  
    problem_type: Optional[shared_problemtype_enum.ProblemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProblemType'), 'exclude': lambda f: f is None }})  
    