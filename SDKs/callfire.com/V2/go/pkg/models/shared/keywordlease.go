// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// KeywordLeaseStatusEnum - A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
type KeywordLeaseStatusEnum string

const (
	KeywordLeaseStatusEnumPending     KeywordLeaseStatusEnum = "PENDING"
	KeywordLeaseStatusEnumActive      KeywordLeaseStatusEnum = "ACTIVE"
	KeywordLeaseStatusEnumReleased    KeywordLeaseStatusEnum = "RELEASED"
	KeywordLeaseStatusEnumUnavailable KeywordLeaseStatusEnum = "UNAVAILABLE"
)

func (e KeywordLeaseStatusEnum) ToPointer() *KeywordLeaseStatusEnum {
	return &e
}

func (e *KeywordLeaseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "RELEASED":
		fallthrough
	case "UNAVAILABLE":
		*e = KeywordLeaseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeywordLeaseStatusEnum: %v", v)
	}
}

// KeywordLeaseTypeEnum - ~
type KeywordLeaseTypeEnum string

const (
	KeywordLeaseTypeEnumPlan  KeywordLeaseTypeEnum = "PLAN"
	KeywordLeaseTypeEnumExtra KeywordLeaseTypeEnum = "EXTRA"
)

func (e KeywordLeaseTypeEnum) ToPointer() *KeywordLeaseTypeEnum {
	return &e
}

func (e *KeywordLeaseTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLAN":
		fallthrough
	case "EXTRA":
		*e = KeywordLeaseTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeywordLeaseTypeEnum: %v", v)
	}
}

// KeywordLease - Represents a lease object for a given keyword
type KeywordLease struct {
	// Enables the auto renewal of a keyword lease at the end of each billing cycle
	AutoRenew *bool `json:"autoRenew,omitempty"`
	// Existing contact list ID
	ContactListID *int64 `json:"contactListId,omitempty"`
	// Enable/disable double opt in feature
	DoubleOptInEnabled *bool `json:"doubleOptInEnabled,omitempty"`
	// A text used as a keyword
	Keyword *string `json:"keyword,omitempty"`
	// ~
	Labels []string `json:"labels,omitempty"`
	// A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	LeaseBegin *int64 `json:"leaseBegin,omitempty"`
	// A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
	LeaseEnd *int64 `json:"leaseEnd,omitempty"`
	// A number assigned to keyword. Example: 12132212344
	Number *string `json:"number,omitempty"`
	// Opt in confirmation message
	OptInConfirmationMessage *string `json:"optInConfirmationMessage,omitempty"`
	// A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)
	ShortCode *string `json:"shortCode,omitempty"`
	// A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
	Status *KeywordLeaseStatusEnum `json:"status,omitempty"`
	// ~
	Type *KeywordLeaseTypeEnum `json:"type,omitempty"`
}
