"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPRequest:
    r"""A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message."""
    
    cache_fill_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheFillBytes'), 'exclude': lambda f: f is None }})
    r"""The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted."""  
    cache_hit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheHit'), 'exclude': lambda f: f is None }})
    r"""Whether or not an entity was served from cache (with or without validation)."""  
    cache_lookup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheLookup'), 'exclude': lambda f: f is None }})
    r"""Whether or not a cache lookup was attempted."""  
    cache_validated_with_origin_server: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheValidatedWithOriginServer'), 'exclude': lambda f: f is None }})
    r"""Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if `cache_hit` is True."""  
    latency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latency'), 'exclude': lambda f: f is None }})
    r"""The request processing latency on the server, from the time the request was received until the response was sent."""  
    protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""Protocol used for the request. Examples: \\"HTTP/1.1\\", \\"HTTP/2\\", \\"websocket\\" """  
    referer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referer'), 'exclude': lambda f: f is None }})
    r"""The referer URL of the request, as defined in [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)."""  
    remote_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteIp'), 'exclude': lambda f: f is None }})
    r"""The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: `\\"192.168.1.1\\"`, `\\"FE80::0202:B3FF:FE1E:8329\\"`."""  
    request_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestMethod'), 'exclude': lambda f: f is None }})
    r"""The request method. Examples: `\\"GET\\"`, `\\"HEAD\\"`, `\\"PUT\\"`, `\\"POST\\"`."""  
    request_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestSize'), 'exclude': lambda f: f is None }})
    r"""The size of the HTTP request message in bytes, including the request headers and the request body."""  
    request_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestUrl'), 'exclude': lambda f: f is None }})
    r"""The scheme (http, https), the host name, the path, and the query portion of the URL that was requested. Example: `\\"http://example.com/some/info?color=red\\"`."""  
    response_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseSize'), 'exclude': lambda f: f is None }})
    r"""The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body."""  
    server_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverIp'), 'exclude': lambda f: f is None }})
    r"""The IP address (IPv4 or IPv6) of the origin server that the request was sent to."""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The response code indicating the status of the response. Examples: 200, 404."""  
    user_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userAgent'), 'exclude': lambda f: f is None }})
    r"""The user agent sent by the client. Example: `\\"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)\\"`."""  
    