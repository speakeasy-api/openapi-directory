// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UsageRecordEnumGroupEnum - Dimension over which to aggregate usage records. Can be: `sim`, `fleet`, `network`, `isoCountry`. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the `Granularity` parameter.
type UsageRecordEnumGroupEnum string

const (
	UsageRecordEnumGroupEnumSim        UsageRecordEnumGroupEnum = "sim"
	UsageRecordEnumGroupEnumFleet      UsageRecordEnumGroupEnum = "fleet"
	UsageRecordEnumGroupEnumNetwork    UsageRecordEnumGroupEnum = "network"
	UsageRecordEnumGroupEnumIsoCountry UsageRecordEnumGroupEnum = "isoCountry"
)

func (e *UsageRecordEnumGroupEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sim":
		fallthrough
	case "fleet":
		fallthrough
	case "network":
		fallthrough
	case "isoCountry":
		*e = UsageRecordEnumGroupEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageRecordEnumGroupEnum: %s", s)
	}
}
