/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateSubscriptionServerList = [
  "https://events.twilio.com",
] as const;

export class CreateSubscriptionSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateSubscriptionCreateSubscriptionRequest extends SpeakeasyBase {
  /**
   * A human readable description for the Subscription **This value should not contain PII.**
   */
  @SpeakeasyMetadata({ data: "form, name=Description" })
  description: string;

  /**
   * The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.
   */
  @SpeakeasyMetadata({ data: "form, name=SinkSid" })
  sinkSid: string;

  /**
   * An array of objects containing the subscribed Event Types
   */
  @SpeakeasyMetadata({ data: "form, name=Types" })
  types: any[];
}

export class CreateSubscriptionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  eventsV1Subscription?: shared.EventsV1Subscription;
}
