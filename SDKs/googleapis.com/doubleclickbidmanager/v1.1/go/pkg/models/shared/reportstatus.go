// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReportStatusFormatEnum - The file type of the report.
type ReportStatusFormatEnum string

const (
	ReportStatusFormatEnumCsv      ReportStatusFormatEnum = "CSV"
	ReportStatusFormatEnumExcelCsv ReportStatusFormatEnum = "EXCEL_CSV"
	ReportStatusFormatEnumXlsx     ReportStatusFormatEnum = "XLSX"
)

func (e *ReportStatusFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CSV":
		fallthrough
	case "EXCEL_CSV":
		fallthrough
	case "XLSX":
		*e = ReportStatusFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportStatusFormatEnum: %s", s)
	}
}

// ReportStatusStateEnum - The state of the report.
type ReportStatusStateEnum string

const (
	ReportStatusStateEnumRunning ReportStatusStateEnum = "RUNNING"
	ReportStatusStateEnumDone    ReportStatusStateEnum = "DONE"
	ReportStatusStateEnumFailed  ReportStatusStateEnum = "FAILED"
)

func (e *ReportStatusStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RUNNING":
		fallthrough
	case "DONE":
		fallthrough
	case "FAILED":
		*e = ReportStatusStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportStatusStateEnum: %s", s)
	}
}

// ReportStatus - Report status.
type ReportStatus struct {
	// An explanation of a report failure.
	Failure *ReportFailure `json:"failure,omitempty"`
	// The time when this report either completed successfully or failed.
	FinishTimeMs *string `json:"finishTimeMs,omitempty"`
	// The file type of the report.
	Format *ReportStatusFormatEnum `json:"format,omitempty"`
	// The state of the report.
	State *ReportStatusStateEnum `json:"state,omitempty"`
}
