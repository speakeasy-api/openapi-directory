"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def networksecurity_projects_locations_address_groups_add_items(self, request: operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsRequest, security: operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsSecurity) -> operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsResponse:
        r"""Adds items to an address group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsRequest, base_url, '/v1beta1/{addressGroup}:addItems', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_address_group_items_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAddressGroupsAddItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_address_groups_clone_items(self, request: operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsRequest, security: operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsSecurity) -> operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsResponse:
        r"""Clones items from one address group to another."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsRequest, base_url, '/v1beta1/{addressGroup}:cloneItems', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "clone_address_group_items_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAddressGroupsCloneItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_address_groups_create(self, request: operations.NetworksecurityProjectsLocationsAddressGroupsCreateRequest, security: operations.NetworksecurityProjectsLocationsAddressGroupsCreateSecurity) -> operations.NetworksecurityProjectsLocationsAddressGroupsCreateResponse:
        r"""Creates a new address group in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAddressGroupsCreateRequest, base_url, '/v1beta1/{parent}/addressGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "address_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAddressGroupsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAddressGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_address_groups_list(self, request: operations.NetworksecurityProjectsLocationsAddressGroupsListRequest, security: operations.NetworksecurityProjectsLocationsAddressGroupsListSecurity) -> operations.NetworksecurityProjectsLocationsAddressGroupsListResponse:
        r"""Lists address groups in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAddressGroupsListRequest, base_url, '/v1beta1/{parent}/addressGroups', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAddressGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAddressGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAddressGroupsResponse])
                res.list_address_groups_response = out

        return res

    def networksecurity_projects_locations_address_groups_list_references(self, request: operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesRequest, security: operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesSecurity) -> operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesResponse:
        r"""Lists references of an address group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesRequest, base_url, '/v1beta1/{addressGroup}:listReferences', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAddressGroupsListReferencesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAddressGroupReferencesResponse])
                res.list_address_group_references_response = out

        return res

    def networksecurity_projects_locations_address_groups_remove_items(self, request: operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsRequest, security: operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsSecurity) -> operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsResponse:
        r"""Removes items from an address group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsRequest, base_url, '/v1beta1/{addressGroup}:removeItems', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "remove_address_group_items_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAddressGroupsRemoveItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_authorization_policies_create(self, request: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse:
        r"""Creates a new AuthorizationPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest, base_url, '/v1beta1/{parent}/authorizationPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authorization_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_authorization_policies_list(self, request: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse:
        r"""Lists AuthorizationPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest, base_url, '/v1beta1/{parent}/authorizationPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAuthorizationPoliciesResponse])
                res.list_authorization_policies_response = out

        return res

    def networksecurity_projects_locations_client_tls_policies_create(self, request: operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateResponse:
        r"""Creates a new ClientTlsPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateRequest, base_url, '/v1beta1/{parent}/clientTlsPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client_tls_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_client_tls_policies_list(self, request: operations.NetworksecurityProjectsLocationsClientTLSPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsClientTLSPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsClientTLSPoliciesListResponse:
        r"""Lists ClientTlsPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsClientTLSPoliciesListRequest, base_url, '/v1beta1/{parent}/clientTlsPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsClientTLSPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsClientTLSPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListClientTLSPoliciesResponse])
                res.list_client_tls_policies_response = out

        return res

    def networksecurity_projects_locations_gateway_security_policies_create(self, request: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse:
        r"""Creates a new GatewaySecurityPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest, base_url, '/v1beta1/{parent}/gatewaySecurityPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "gateway_security_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_gateway_security_policies_list(self, request: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse:
        r"""Lists GatewaySecurityPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest, base_url, '/v1beta1/{parent}/gatewaySecurityPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGatewaySecurityPoliciesResponse])
                res.list_gateway_security_policies_response = out

        return res

    def networksecurity_projects_locations_gateway_security_policies_rules_create(self, request: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest, security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateSecurity) -> operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse:
        r"""Creates a new GatewaySecurityPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest, base_url, '/v1beta1/{parent}/rules', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "gateway_security_policy_rule_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_gateway_security_policies_rules_list(self, request: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest, security: operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListSecurity) -> operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse:
        r"""Lists GatewaySecurityPolicyRules in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest, base_url, '/v1beta1/{parent}/rules', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsGatewaySecurityPoliciesRulesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGatewaySecurityPolicyRulesResponse])
                res.list_gateway_security_policy_rules_response = out

        return res

    def networksecurity_projects_locations_list(self, request: operations.NetworksecurityProjectsLocationsListRequest, security: operations.NetworksecurityProjectsLocationsListSecurity) -> operations.NetworksecurityProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsListRequest, base_url, '/v1beta1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def networksecurity_projects_locations_operations_cancel(self, request: operations.NetworksecurityProjectsLocationsOperationsCancelRequest, security: operations.NetworksecurityProjectsLocationsOperationsCancelSecurity) -> operations.NetworksecurityProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsOperationsCancelRequest, base_url, '/v1beta1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def networksecurity_projects_locations_operations_list(self, request: operations.NetworksecurityProjectsLocationsOperationsListRequest, security: operations.NetworksecurityProjectsLocationsOperationsListSecurity) -> operations.NetworksecurityProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsOperationsListRequest, base_url, '/v1beta1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def networksecurity_projects_locations_server_tls_policies_create(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateResponse:
        r"""Creates a new ServerTlsPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateRequest, base_url, '/v1beta1/{parent}/serverTlsPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "server_tls_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_server_tls_policies_get_iam_policy(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicySecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyRequest, base_url, '/v1beta1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def networksecurity_projects_locations_server_tls_policies_list(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesListResponse:
        r"""Lists ServerTlsPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesListRequest, base_url, '/v1beta1/{parent}/serverTlsPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListServerTLSPoliciesResponse])
                res.list_server_tls_policies_response = out

        return res

    def networksecurity_projects_locations_server_tls_policies_set_iam_policy(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicySecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyRequest, base_url, '/v1beta1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def networksecurity_projects_locations_server_tls_policies_test_iam_permissions(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsRequest, base_url, '/v1beta1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1TestIamPermissionsResponse])
                res.google_iam_v1_test_iam_permissions_response = out

        return res

    def networksecurity_projects_locations_tls_inspection_policies_create(self, request: operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesCreateResponse:
        r"""Creates a new TlsInspectionPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesCreateRequest, base_url, '/v1beta1/{parent}/tlsInspectionPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tls_inspection_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_tls_inspection_policies_list(self, request: operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesListResponse:
        r"""Lists TlsInspectionPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesListRequest, base_url, '/v1beta1/{parent}/tlsInspectionPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsTLSInspectionPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTLSInspectionPoliciesResponse])
                res.list_tls_inspection_policies_response = out

        return res

    def networksecurity_projects_locations_url_lists_create(self, request: operations.NetworksecurityProjectsLocationsURLListsCreateRequest, security: operations.NetworksecurityProjectsLocationsURLListsCreateSecurity) -> operations.NetworksecurityProjectsLocationsURLListsCreateResponse:
        r"""Creates a new UrlList in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsURLListsCreateRequest, base_url, '/v1beta1/{parent}/urlLists', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "url_list_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsURLListsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsURLListsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_url_lists_delete(self, request: operations.NetworksecurityProjectsLocationsURLListsDeleteRequest, security: operations.NetworksecurityProjectsLocationsURLListsDeleteSecurity) -> operations.NetworksecurityProjectsLocationsURLListsDeleteResponse:
        r"""Deletes a single UrlList."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsURLListsDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsURLListsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsURLListsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_url_lists_get(self, request: operations.NetworksecurityProjectsLocationsURLListsGetRequest, security: operations.NetworksecurityProjectsLocationsURLListsGetSecurity) -> operations.NetworksecurityProjectsLocationsURLListsGetResponse:
        r"""Gets details of a single UrlList."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsURLListsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsURLListsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsURLListsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.URLList])
                res.url_list = out

        return res

    def networksecurity_projects_locations_url_lists_list(self, request: operations.NetworksecurityProjectsLocationsURLListsListRequest, security: operations.NetworksecurityProjectsLocationsURLListsListSecurity) -> operations.NetworksecurityProjectsLocationsURLListsListResponse:
        r"""Lists UrlLists in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsURLListsListRequest, base_url, '/v1beta1/{parent}/urlLists', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsURLListsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsURLListsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListURLListsResponse])
                res.list_url_lists_response = out

        return res

    def networksecurity_projects_locations_url_lists_patch(self, request: operations.NetworksecurityProjectsLocationsURLListsPatchRequest, security: operations.NetworksecurityProjectsLocationsURLListsPatchSecurity) -> operations.NetworksecurityProjectsLocationsURLListsPatchResponse:
        r"""Updates the parameters of a single UrlList."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsURLListsPatchRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "url_list_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsURLListsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsURLListsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    