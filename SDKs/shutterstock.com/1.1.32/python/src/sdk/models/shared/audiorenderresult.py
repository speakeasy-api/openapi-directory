"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import audiorendersfileslist as shared_audiorendersfileslist
from ..shared import audiorendertimeline as shared_audiorendertimeline
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AudioRenderResultPresetEnum(str, Enum):
    r"""The file format preset"""
    MASTER_MP3 = 'MASTER_MP3'
    MASTER_WAV = 'MASTER_WAV'
    STEMS_WAV = 'STEMS_WAV'

class AudioRenderResultStatusEnum(str, Enum):
    r"""A coarse progress indicator"""
    WAITING_COMPOSE = 'WAITING_COMPOSE'
    RUNNING_COMPOSE = 'RUNNING_COMPOSE'
    WAITING_RENDER = 'WAITING_RENDER'
    RUNNING_RENDER = 'RUNNING_RENDER'
    CREATED = 'CREATED'
    FAILED_CREATE = 'FAILED_CREATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AudioRenderResult:
    r"""The output of an audio render in WAV or MP3 format"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The alphanumeric ID of the simple render"""  
    status: AudioRenderResultStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""A coarse progress indicator"""  
    timeline: shared_audiorendertimeline.AudioRenderTimeline = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeline') }})
    r"""A timeline object that represents either a request for music to be created or an entire music composition"""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time the render was submitted to the API"""  
    files: Optional[list[shared_audiorendersfileslist.AudioRendersFilesList]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files'), 'exclude': lambda f: f is None }})
    r"""The files associated with the render"""  
    preset: Optional[AudioRenderResultPresetEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preset'), 'exclude': lambda f: f is None }})
    r"""The file format preset"""  
    progress_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress_percent'), 'exclude': lambda f: f is None }})
    r"""The current progress of the render as a percentage"""  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that the audio output was uploaded"""  
    