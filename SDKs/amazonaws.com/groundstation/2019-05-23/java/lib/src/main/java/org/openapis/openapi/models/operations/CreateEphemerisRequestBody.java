/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class CreateEphemerisRequestBody {
    /**
     * &lt;p&gt;Whether to set the ephemeris status to &lt;code&gt;ENABLED&lt;/code&gt; after validation.&lt;/p&gt; &lt;p&gt;Setting this to false will set the ephemeris status to &lt;code&gt;DISABLED&lt;/code&gt; after validation.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;
    public CreateEphemerisRequestBody withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Ephemeris data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ephemeris")
    public CreateEphemerisRequestBodyEphemeris ephemeris;
    public CreateEphemerisRequestBody withEphemeris(CreateEphemerisRequestBodyEphemeris ephemeris) {
        this.ephemeris = ephemeris;
        return this;
    }
    
    /**
     * An overall expiration time for the ephemeris in UTC, after which it will become &lt;code&gt;EXPIRED&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expirationTime")
    public OffsetDateTime expirationTime;
    public CreateEphemerisRequestBody withExpirationTime(OffsetDateTime expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    /**
     * The ARN of a KMS key used to encrypt the ephemeris in Ground Station.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyArn")
    public String kmsKeyArn;
    public CreateEphemerisRequestBody withKmsKeyArn(String kmsKeyArn) {
        this.kmsKeyArn = kmsKeyArn;
        return this;
    }
    
    /**
     * A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.
     */
    @JsonProperty("name")
    public String name;
    public CreateEphemerisRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * &lt;p&gt;Customer-provided priority score to establish the order in which overlapping ephemerides should be used.&lt;/p&gt; &lt;p&gt;The default for customer-provided ephemeris priority is 1, and higher numbers take precedence.&lt;/p&gt; &lt;p&gt;Priority must be 1 or greater&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Long priority;
    public CreateEphemerisRequestBody withPriority(Long priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * AWS Ground Station satellite ID for this ephemeris.
     */
    @JsonProperty("satelliteId")
    public String satelliteId;
    public CreateEphemerisRequestBody withSatelliteId(String satelliteId) {
        this.satelliteId = satelliteId;
        return this;
    }
    
    /**
     * Tags assigned to an ephemeris.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;
    public CreateEphemerisRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
}
