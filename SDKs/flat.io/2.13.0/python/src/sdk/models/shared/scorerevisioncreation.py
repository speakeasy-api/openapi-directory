"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ScoreRevisionCreationDataEncodingEnum(str, Enum):
    r"""The optional encoding of the score data. This property must match the encoding used for the `data` property."""
    BASE64 = 'base64'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScoreRevisionCreation:
    r"""A new created revision"""
    
    data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})
    r"""The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.
    Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.
    """  
    autosave: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autosave'), 'exclude': lambda f: f is None }})
    r"""Must be set to `true` if the revision was created automatically."""  
    data_encoding: Optional[ScoreRevisionCreationDataEncodingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataEncoding'), 'exclude': lambda f: f is None }})
    r"""The optional encoding of the score data. This property must match the encoding used for the `data` property."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description associated to the revision"""  
    