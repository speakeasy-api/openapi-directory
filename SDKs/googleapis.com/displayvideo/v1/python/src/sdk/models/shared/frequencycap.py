"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FrequencyCapTimeUnitEnum(str, Enum):
    r"""The time unit in which the frequency cap will be applied. Required when unlimited is `false`."""
    TIME_UNIT_UNSPECIFIED = 'TIME_UNIT_UNSPECIFIED'
    TIME_UNIT_LIFETIME = 'TIME_UNIT_LIFETIME'
    TIME_UNIT_MONTHS = 'TIME_UNIT_MONTHS'
    TIME_UNIT_WEEKS = 'TIME_UNIT_WEEKS'
    TIME_UNIT_DAYS = 'TIME_UNIT_DAYS'
    TIME_UNIT_HOURS = 'TIME_UNIT_HOURS'
    TIME_UNIT_MINUTES = 'TIME_UNIT_MINUTES'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FrequencyCap:
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""
    
    max_impressions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxImpressions'), 'exclude': lambda f: f is None }})
    r"""The maximum number of times a user may be shown the same ad during this period. Must be greater than 0. Required when unlimited is `false` and max_views is not set."""  
    time_unit: Optional[FrequencyCapTimeUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeUnit'), 'exclude': lambda f: f is None }})
    r"""The time unit in which the frequency cap will be applied. Required when unlimited is `false`."""  
    time_unit_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeUnitCount'), 'exclude': lambda f: f is None }})
    r"""The number of time_unit the frequency cap will last. Required when unlimited is `false`. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_LIFETIME` - this field is output only and will default to 1 * `TIME_UNIT_MONTHS` - must be between 1 and 2 * `TIME_UNIT_WEEKS` - must be between 1 and 4 * `TIME_UNIT_DAYS` - must be between 1 and 6 * `TIME_UNIT_HOURS` - must be between 1 and 23 * `TIME_UNIT_MINUTES` - must be between 1 and 59"""  
    unlimited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlimited'), 'exclude': lambda f: f is None }})
    r"""Whether unlimited frequency capping is applied. When this field is set to `true`, the remaining frequency cap fields are not applicable."""  
    