"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulationRequestBodyItems:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The SKU ID."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The quantity of items of this specific SKU in the cart to be simulated."""  
    seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulationRequestBody:
    
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    items: Optional[list[CartSimulationRequestBodyItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Array containing information about the SKUs inside the cart to be simulated."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code."""  
    

@dataclasses.dataclass
class CartSimulationRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    request_body: Optional[CartSimulationRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    rnb_behavior: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RnbBehavior', 'style': 'form', 'explode': True }})
    r"""This parameter defines which promotions apply to the simulation. Use `0` for simulations at cart stage, which means all promotions apply. In case of window simulation use `1`, which indicates promotions that apply nominal discounts over the total purchase value shouldn't be considered on the simulation.
    
    
    Note that if this not sent, the parameter is `1`.
    """  
    sc: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sc', 'style': 'form', 'explode': True }})
    r"""Trade Policy (Sales Channel) identification."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONItemsPriceDefinitionSellingPrices:
    
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Rounding quantity, meaning how many items are rounded to this value."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value in cents for that specific rounding."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONItemsPriceDefinition:
    r"""Price information for all units of a specific item."""
    
    calculated_selling_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calculatedSellingPrice'), 'exclude': lambda f: f is None }})
    r"""Item's calculated unitary selling price in cents."""  
    selling_prices: Optional[list[CartSimulation200ApplicationJSONItemsPriceDefinitionSellingPrices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrices'), 'exclude': lambda f: f is None }})
    r"""Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total."""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total value for all units of the item in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONItemsPriceTags:
    
    identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""Price tag identifier."""  
    is_percentual: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPercentual'), 'exclude': lambda f: f is None }})
    r"""Indicates whether price tag value is applied through a percentage."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Price tag name."""  
    owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""Identification of the responsible for the price tag."""  
    raw_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawValue'), 'exclude': lambda f: f is None }})
    r"""Price tag raw value."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Price tag value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONItems:
    
    availability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Availability."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the item."""  
    list_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""List price in cents."""  
    measurement_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementUnit'), 'exclude': lambda f: f is None }})
    r"""Measurement unit."""  
    offerings: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerings'), 'exclude': lambda f: f is None }})
    r"""Array containing offering information."""  
    parent_assembly_binding: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentAssemblyBinding'), 'exclude': lambda f: f is None }})
    r"""Parent assembly binding."""  
    parent_item_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentItemIndex'), 'exclude': lambda f: f is None }})
    r"""Parent item index."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    price_definition: Optional[CartSimulation200ApplicationJSONItemsPriceDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDefinition'), 'exclude': lambda f: f is None }})
    r"""Price information for all units of a specific item."""  
    price_tags: Optional[list[CartSimulation200ApplicationJSONItemsPriceTags]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceTags'), 'exclude': lambda f: f is None }})
    r"""Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order."""  
    price_valid_until: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceValidUntil'), 'exclude': lambda f: f is None }})
    r"""Price expiration date and time."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The quantity of the item the cart."""  
    request_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestIndex'), 'exclude': lambda f: f is None }})
    r"""Request index information."""  
    reward_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rewardValue'), 'exclude': lambda f: f is None }})
    r"""Reward value in cents."""  
    seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""The seller responsible for the SKU."""  
    seller_chain: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerChain'), 'exclude': lambda f: f is None }})
    r"""Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order."""  
    selling_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrice'), 'exclude': lambda f: f is None }})
    r"""Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Tax value in cents."""  
    unit_multiplier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitMultiplier'), 'exclude': lambda f: f is None }})
    r"""Unit multiplier."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoDeliveryChannels:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Delivery channel ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoItemMetadataItems:
    
    assembly_options: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assemblyOptions'), 'exclude': lambda f: f is None }})
    r"""Assembly options information."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Item ID."""  
    seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""Seller."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoItemMetadata:
    r"""Item metadata."""
    
    items: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoItemMetadataItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""List of objects containing metadata on each item in the order."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows:
    r"""This object contains information about the delivery window available to the shopper."""
    
    end_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window ending day and time in UTC."""  
    lis_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lisPrice'), 'exclude': lambda f: f is None }})
    r"""Delivery window list price."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Delivery window price."""  
    start_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window starting day and time in UTC."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Delivery window tax."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds:
    
    courier_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courierId'), 'exclude': lambda f: f is None }})
    r"""Courier ID."""  
    courier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courierName'), 'exclude': lambda f: f is None }})
    r"""Courier name."""  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})
    r"""Warehouse ID."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    warehouse_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouseId'), 'exclude': lambda f: f is None }})
    r"""Warehouse ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow:
    r"""In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper."""
    
    end_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window ending day and time in UTC."""  
    lis_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lisPrice'), 'exclude': lambda f: f is None }})
    r"""Delivery window list price."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Delivery window price."""  
    start_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window starting day and time in UTC."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Delivery window tax."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo:
    r"""Information on the pickup store."""
    
    additional_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo'), 'exclude': lambda f: f is None }})
    r"""Additional information."""  
    address: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address information."""  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})
    r"""Corresponding dock ID."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendlyName'), 'exclude': lambda f: f is None }})
    r"""Friendly name."""  
    is_pickup_store: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPickupStore'), 'exclude': lambda f: f is None }})
    r"""Indicates whether it is the pickup store."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas:
    
    available_delivery_windows: Optional[CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasAvailableDeliveryWindows] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableDeliveryWindows'), 'exclude': lambda f: f is None }})
    r"""This object contains information about the delivery window available to the shopper."""  
    delivery_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryChannel'), 'exclude': lambda f: f is None }})
    r"""Delivery channel."""  
    delivery_ids: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryIds]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryIds'), 'exclude': lambda f: f is None }})
    r"""Information on each delivery ID."""  
    delivery_window: Optional[CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasDeliveryWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryWindow'), 'exclude': lambda f: f is None }})
    r"""In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""SLA ID."""  
    list_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""List price in cents."""  
    lock_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockTTL'), 'exclude': lambda f: f is None }})
    r"""Estimate date of delivery."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""SLA name."""  
    pickup_distance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupDistance'), 'exclude': lambda f: f is None }})
    r"""Pickup point distance."""  
    pickup_point_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupPointId'), 'exclude': lambda f: f is None }})
    r"""Pickup point ID."""  
    pickup_store_info: Optional[CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlasPickupStoreInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupStoreInfo'), 'exclude': lambda f: f is None }})
    r"""Information on the pickup store."""  
    polygon_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polygonName'), 'exclude': lambda f: f is None }})
    r"""Polygon name."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    shipping_estimate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingEstimate'), 'exclude': lambda f: f is None }})
    r"""Shipping estimate. For instance, \\"three business days\\" will be represented as `3bd`."""  
    shipping_estimate_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingEstimateDate'), 'exclude': lambda f: f is None }})
    r"""Shipping estimate date."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Tax in cents."""  
    transit_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transitTime'), 'exclude': lambda f: f is None }})
    r"""Transit time. For instance, \\"three business days\\" is represented as `3bd`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditions:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Item ID."""  
    list_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""List price in cents."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""Seller."""  
    seller_chain: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerChain'), 'exclude': lambda f: f is None }})
    r"""Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order."""  
    slas: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditionsSlas]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slas'), 'exclude': lambda f: f is None }})
    r"""Information on available SLAs."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditions:
    r"""Purchase conditions information."""
    
    item_purchase_conditions: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditionsItemPurchaseConditions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemPurchaseConditions'), 'exclude': lambda f: f is None }})
    r"""List of objects containing purchase condition information on each item in the order."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoSlasAvailableDeliveryWindows:
    r"""This object contains information about the delivery window available to the shopper."""
    
    end_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window ending day and time in UTC."""  
    lis_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lisPrice'), 'exclude': lambda f: f is None }})
    r"""Delivery window list price."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Delivery window price."""  
    start_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window starting day and time in UTC."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Delivery window tax."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryIds:
    
    courier_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courierId'), 'exclude': lambda f: f is None }})
    r"""Courier ID."""  
    courier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courierName'), 'exclude': lambda f: f is None }})
    r"""Courier name."""  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})
    r"""Warehouse ID."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    warehouse_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouseId'), 'exclude': lambda f: f is None }})
    r"""Warehouse ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryWindow:
    r"""In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper."""
    
    end_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window ending day and time in UTC."""  
    lis_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lisPrice'), 'exclude': lambda f: f is None }})
    r"""Delivery window list price."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Delivery window price."""  
    start_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDateUtc'), 'exclude': lambda f: f is None }})
    r"""Delivery window starting day and time in UTC."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Delivery window tax."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoSlasPickupStoreInfo:
    r"""Information on the pickup store."""
    
    additional_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo'), 'exclude': lambda f: f is None }})
    r"""Additional information."""  
    address: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address information."""  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})
    r"""Corresponding dock ID."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendlyName'), 'exclude': lambda f: f is None }})
    r"""Friendly name."""  
    is_pickup_store: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPickupStore'), 'exclude': lambda f: f is None }})
    r"""Indicates whether it is the pickup store."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoSlas:
    
    available_delivery_windows: Optional[CartSimulation200ApplicationJSONLogisticsInfoSlasAvailableDeliveryWindows] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableDeliveryWindows'), 'exclude': lambda f: f is None }})
    r"""This object contains information about the delivery window available to the shopper."""  
    delivery_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryChannel'), 'exclude': lambda f: f is None }})
    r"""Delivery channel."""  
    delivery_ids: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryIds]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryIds'), 'exclude': lambda f: f is None }})
    r"""Information on each delivery ID."""  
    delivery_window: Optional[CartSimulation200ApplicationJSONLogisticsInfoSlasDeliveryWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryWindow'), 'exclude': lambda f: f is None }})
    r"""In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""SLA ID."""  
    list_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""List price in cents."""  
    lock_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockTTL'), 'exclude': lambda f: f is None }})
    r"""Estimate date of delivery."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""SLA name."""  
    pickup_distance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupDistance'), 'exclude': lambda f: f is None }})
    r"""Pickup point distance."""  
    pickup_point_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupPointId'), 'exclude': lambda f: f is None }})
    r"""Pickup point ID."""  
    pickup_store_info: Optional[CartSimulation200ApplicationJSONLogisticsInfoSlasPickupStoreInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupStoreInfo'), 'exclude': lambda f: f is None }})
    r"""Information on the pickup store."""  
    polygon_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polygonName'), 'exclude': lambda f: f is None }})
    r"""Polygon name."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    shipping_estimate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingEstimate'), 'exclude': lambda f: f is None }})
    r"""Shipping estimate. For instance, \\"three business days\\" will be represented as `3bd`."""  
    shipping_estimate_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingEstimateDate'), 'exclude': lambda f: f is None }})
    r"""Shipping estimate date."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Tax in cents."""  
    transit_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transitTime'), 'exclude': lambda f: f is None }})
    r"""Transit time. For instance, \\"three business days\\" is represented as `3bd`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfoTotals:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Total ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Total name."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Total value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONLogisticsInfo:
    
    address_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressId'), 'exclude': lambda f: f is None }})
    r"""Address ID."""  
    delivery_channels: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoDeliveryChannels]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryChannels'), 'exclude': lambda f: f is None }})
    r"""List of available delivery channels."""  
    item_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemIndex'), 'exclude': lambda f: f is None }})
    r"""Index of item in items array."""  
    item_metadata: Optional[CartSimulation200ApplicationJSONLogisticsInfoItemMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemMetadata'), 'exclude': lambda f: f is None }})
    r"""Item metadata."""  
    messages: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""Array containing an object for each message generated by our servers while processing the request."""  
    pickup_points: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupPoints'), 'exclude': lambda f: f is None }})
    r"""Array containing pickup points information."""  
    purchase_conditions: Optional[CartSimulation200ApplicationJSONLogisticsInfoPurchaseConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseConditions'), 'exclude': lambda f: f is None }})
    r"""Purchase conditions information."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    selected_delivery_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedDeliveryChannel'), 'exclude': lambda f: f is None }})
    r"""Delivery channel selected by the customer. For example, `\\"delivery\\"` or `\\"pickup-in-point\\"`."""  
    selected_sla: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedSla'), 'exclude': lambda f: f is None }})
    r"""Selected SLA. For example, `\\"normal\\"` or `\\"express\\"`."""  
    ships_to: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipsTo'), 'exclude': lambda f: f is None }})
    r"""List of countries that the item may be shipped to."""  
    slas: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoSlas]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slas'), 'exclude': lambda f: f is None }})
    r"""Information on available SLAs."""  
    subscription_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionData'), 'exclude': lambda f: f is None }})
    r"""Subscription information."""  
    totals: Optional[list[CartSimulation200ApplicationJSONLogisticsInfoTotals]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totals'), 'exclude': lambda f: f is None }})
    r"""Information on order totals."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONPaymentDataPaymentSystems:
    
    available_payments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availablePayments'), 'exclude': lambda f: f is None }})
    r"""Availability of payment."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description."""  
    display_document: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayDocument'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a document is shown."""  
    due_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dueDate'), 'exclude': lambda f: f is None }})
    r"""Payment due date."""  
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName'), 'exclude': lambda f: f is None }})
    r"""Payment group name."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Payment system ID."""  
    is_custom: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCustom'), 'exclude': lambda f: f is None }})
    r"""Indicates whether it is custom."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Payment system name."""  
    requires_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresAuthentication'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a authentication is required."""  
    requires_document: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiresDocument'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a document is required."""  
    string_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringId'), 'exclude': lambda f: f is None }})
    r"""String ID."""  
    template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template'), 'exclude': lambda f: f is None }})
    r"""Template."""  
    validator: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validator'), 'exclude': lambda f: f is None }})
    r"""Payment system validator."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONPaymentData:
    r"""Payment data information."""
    
    available_accounts: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAccounts'), 'exclude': lambda f: f is None }})
    r"""Available accounts."""  
    available_associations: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAssociations'), 'exclude': lambda f: f is None }})
    r"""Available associations."""  
    available_tokens: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableTokens'), 'exclude': lambda f: f is None }})
    r"""Available tokens."""  
    gift_card_messages: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftCardMessages'), 'exclude': lambda f: f is None }})
    r"""Array of gift card messages."""  
    gift_cards: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftCards'), 'exclude': lambda f: f is None }})
    r"""Gift card information, if it applies to the order."""  
    installment_options: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installmentOptions'), 'exclude': lambda f: f is None }})
    r"""Installment options information."""  
    payments: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payments'), 'exclude': lambda f: f is None }})
    r"""Information on each payment."""  
    payment_systems: Optional[list[CartSimulation200ApplicationJSONPaymentDataPaymentSystems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentSystems'), 'exclude': lambda f: f is None }})
    r"""Information on payment systems."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSONRatesAndBenefitsData:
    r"""Information on rates and benefits that apply to the order."""
    
    rate_and_benefits_identifiers: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateAndBenefitsIdentifiers'), 'exclude': lambda f: f is None }})
    r"""List with rates and benefits identifiers."""  
    teaser: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teaser'), 'exclude': lambda f: f is None }})
    r"""List with rates and benefits teasers."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartSimulation200ApplicationJSON:
    r"""OK"""
    
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Three letter ISO code of the country of the shipping address."""  
    items: Optional[list[CartSimulation200ApplicationJSONItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Information on each item in the cart."""  
    logistics_info: Optional[list[CartSimulation200ApplicationJSONLogisticsInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logisticsInfo'), 'exclude': lambda f: f is None }})
    r"""Array with logistics information on each item of the `items` array in the `orderForm`."""  
    marketing_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingData'), 'exclude': lambda f: f is None }})
    r"""Object containing promotion data such as coupon tracking information and internal or external UTMs."""  
    payment_data: Optional[CartSimulation200ApplicationJSONPaymentData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentData'), 'exclude': lambda f: f is None }})
    r"""Payment data information."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal Code."""  
    rates_and_benefits_data: Optional[CartSimulation200ApplicationJSONRatesAndBenefitsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratesAndBenefitsData'), 'exclude': lambda f: f is None }})
    r"""Information on rates and benefits that apply to the order."""  
    selectable_gifts: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectableGifts'), 'exclude': lambda f: f is None }})
    r"""Array containing the data of the item selected as a gift."""  
    

@dataclasses.dataclass
class CartSimulationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    cart_simulation_200_application_json_object: Optional[CartSimulation200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    