// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateZoomRoomAccSettingsSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type UpdateZoomRoomAccSettingsQueryParams struct {
	// The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Rooms Account.<br>
	// `meeting`: Meeting settings of the Zoom Rooms Account.<br>
	// `signage`: View digital signage settings of the Zoom Rooms Account.
	SettingType string `queryParam:"style=form,explode=true,name=setting_type"`
}

// UpdateZoomRoomAccSettingsApplicationJSON2ClientAlert - The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
type UpdateZoomRoomAccSettingsApplicationJSON2ClientAlert struct {
	// Display an alert message when an issue is detected with a bluetooth microphone.
	DetectBluetoothMicrophoneErrorAlert *bool `json:"detect_bluetooth_microphone_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a bluetooth speaker.
	DetectBluetoothSpeakerErrorAlert *bool `json:"detect_bluetooth_speaker_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a camera.
	DetectCameraErrorAlert *bool `json:"detect_camera_error_alert,omitempty"`
	// Display an alert message when an issue is detected with microphone.
	DetectMicrophoneErrorAlert *bool `json:"detect_microphone_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a speaker.
	DetectSpeakerErrorAlert *bool `json:"detect_speaker_error_alert,omitempty"`
}

type UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignageBanner struct {
	BannerRoomName   *bool `json:"banner_room_name,omitempty"`
	BannerSharingKey *bool `json:"banner_sharing_key,omitempty"`
	BannerTime       *bool `json:"banner_time,omitempty"`
}

// UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignageDisplayPeriod - Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
type UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignageDisplayPeriod struct {
	// Start displaying digital signage content after certain duration after the meeting ends. Specify the value of the duration in minutes in this field.
	StartDisplayingContent *int64 `json:"start_displaying_content,omitempty"`
	// Stop displaying content {certain_duration} before a meeting is scheduled to begin. Specify the value of duration in minutes in this field.
	StopDisplayingContent *int64 `json:"stop_displaying_content,omitempty"`
}

// UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum - Specify an action for the content list. The value can be one of the following:<br>
// `add`: Add another content list.<br>
// `update`: Update existing content list.<br>
// `delete`: Delete content list.
type UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum string

const (
	UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnumAdd    UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum = "add"
	UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnumUpdate UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum = "update"
	UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnumDelete UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum = "delete"
)

func (e *UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "add":
		fallthrough
	case "update":
		fallthrough
	case "delete":
		*e = UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum: %s", s)
	}
}

// UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListContents - Content list.
type UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListContents struct {
	// Specify an action for the content in the content list. The value can be one of the following:<br>
	// `add`: Add another content to the content list.<br>
	// `update`: Update existing content's information in the content list.<br>
	// `delete`: Delete content from the content list.
	//
	//
	Action *string `json:"action,omitempty"`
	// Content Id.
	ContentID *string `json:"content_id,omitempty"`
	// By default each content is display for 5 seconds. Using this field, specify how long you would like to display the content.
	Duration *int64 `json:"duration,omitempty"`
	// Unique identifier of the content. This field is only required if you would like to remove or update the content information.
	ID *string `json:"id,omitempty"`
	// Name of the content.
	Name *string `json:"name,omitempty"`
	// Order of the content in the display.
	Order *int64 `json:"order,omitempty"`
}

type UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayList struct {
	// Specify an action for the content list. The value can be one of the following:<br>
	// `add`: Add another content list.<br>
	// `update`: Update existing content list.<br>
	// `delete`: Delete content list.
	//
	Action   *UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListActionEnum `json:"action,omitempty"`
	Contents []UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayListContents  `json:"contents,omitempty"`
	// Specify the display end time for the content list in GMT.
	EndTime *string `json:"end_time,omitempty"`
	// Unique identifier of the content list. This field is only required if you would like to remove or update the content list.
	ID *string `json:"id,omitempty"`
	// Name of the content list.
	Name *string `json:"name,omitempty"`
	// Specify the display start time for the content list in GMT.
	StartTime *string `json:"start_time,omitempty"`
}

type UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignage struct {
	Banner *UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignageBanner `json:"banner,omitempty"`
	// Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
	DisplayPeriod *UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignageDisplayPeriod `json:"display_period,omitempty"`
	// [Enable or disable digital signage](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_767fbb33-82a8-45a8-8392-a1bfa9687edd). <br>
	// `true`: enable<br> `false`: disable
	EnableDigitalSignage *bool `json:"enable_digital_signage,omitempty"`
	// Set the [layout](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_4e25ddf3-8f97-4957-8f8b-99725f940fa7). The value of this field can be either `standard` or `video_content`.
	//
	// `standard`: Standard Center<br>
	// `video_content`: Video + Content
	Layout *string `json:"layout,omitempty"`
	// Sound of all contents will be muted if the value of this field is set to `true`.
	Mute *bool `json:"mute,omitempty"`
	// Content list.
	PlayList []UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignagePlayList `json:"play_list,omitempty"`
}

// UpdateZoomRoomAccSettingsApplicationJSON2Notification - [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
type UpdateZoomRoomAccSettingsApplicationJSON2Notification struct {
	// Send an alert when the audio echo test result meets usability threshold.
	AudioMeetUsabilityThreshold *bool `json:"audio_meet_usability_threshold,omitempty"`
	// Send an alert when the audio echo test result does not meet usability threshold.
	AudioNotMeetUsabilityThreshold *bool `json:"audio_not_meet_usability_threshold,omitempty"`
	// Send an alert when the battery starts charging.
	BatteryIsCharging *bool `json:"battery_is_charging,omitempty"`
	// Send an alert when the battery of the controller or the scheduling display is low (at 20%) and is not being charged.
	BatteryLowAndNotCharging *bool `json:"battery_low_and_not_charging,omitempty"`
	// Specify a percentage so that an alert is sent when the battery is less than the {battery_percentage} that you specified.
	BatteryPercentage *string `json:"battery_percentage,omitempty"`
	// Send an alert when the connection to the Controller or Scheduling Display cannot be detected.
	ControllerSchedulingDisconnected *bool `json:"controller_scheduling_disconnected,omitempty"`
	// Send an alert when the Controller or Scheduling Display can be detected again.
	ControllerSchedulingReconnected *bool `json:"controller_scheduling_reconnected,omitempty"`
	// Send an alert when CPU usage is above 90%.
	CPUUsageHighDetected *bool `json:"cpu_usage_high_detected,omitempty"`
	// Send an alert when the mic, speaker or camera is disconnected in the Zoom Room.
	MicSpeakerCameraDisconnected *bool `json:"mic_speaker_camera_disconnected,omitempty"`
	// Send an alert when the mic, speaker or camera is reconnected.
	MicSpeakerCameraReconnected *bool `json:"mic_speaker_camera_reconnected,omitempty"`
	// Send an alert when the network is stable.
	NetworkStableDetected *bool `json:"network_stable_detected,omitempty"`
	// Send an alert when low bandwidth network is detected
	NetworkUnstableDetected *bool `json:"network_unstable_detected,omitempty"`
	// Send an alert when SIP registration stops working.
	SipRegistrationFailed *bool `json:"sip_registration_failed,omitempty"`
	// Send an alert after the SIP registration is re-enabled.
	SipRegistrationReEnabled *bool `json:"sip_registration_re_enabled,omitempty"`
	// Send an alert when the Zoom Room is online after previously being offline.
	ZoomRoomComeBackOnline *bool `json:"zoom_room_come_back_online,omitempty"`
	// Send an alert when the TV display is disconnected
	ZoomRoomDisplayDisconnected *bool `json:"zoom_room_display_disconnected,omitempty"`
	// Send an alert when the machine hosting the Zoom Room application has a network issue or cannot connect with the Controller.
	ZoomRoomOffline *bool `json:"zoom_room_offline,omitempty"`
}

type UpdateZoomRoomAccSettingsApplicationJSON2 struct {
	// The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
	ClientAlert    *UpdateZoomRoomAccSettingsApplicationJSON2ClientAlert    `json:"client_alert,omitempty"`
	DigitalSignage *UpdateZoomRoomAccSettingsApplicationJSON2DigitalSignage `json:"digital_signage,omitempty"`
	// [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
	Notification *UpdateZoomRoomAccSettingsApplicationJSON2Notification `json:"notification,omitempty"`
}

type UpdateZoomRoomAccSettingsApplicationJSON1ZoomRooms struct {
	// Enable multiple participants to [share content simultaneously](https://support.zoom.us/hc/en-us/articles/360017767812-Sharing-Multiple-Screens-in-a-Zoom-Room) by default.
	AllowMultipleContentSharing *bool `json:"allow_multiple_content_sharing,omitempty"`
	// Enable [automated audio test](https://support.zoom.us/hc/en-us/articles/360000319683-Zoom-Rooms-Daily-Audio-Testing) to ensure high quality audio.
	AudioDeviceDailyAutoTest *bool `json:"audio_device_daily_auto_test,omitempty"`
	// Enable participants in a Zoom Room to share their laptop screen on the Zoom Room TV without entering a meeting ID or sharing code.
	AutoDirectSharing *bool `json:"auto_direct_sharing,omitempty"`
	// Automatically start scheduled meetings according to the start time listed on the calendar associated with the room. A meeting alert will appear 10 minutes prior to the scheduled time on the TV.
	AutoStartScheduledMeeting *bool `json:"auto_start_scheduled_meeting,omitempty"`
	// Automatically stop the meeting at the end time as scheduled and listed in the calendar associated with the room.
	AutoStopScheduledMeeting *bool `json:"auto_stop_scheduled_meeting,omitempty"`
	// Use facial detection technology to [determine and display the attendees count](https://support.zoom.us/hc/en-us/articles/360031027111-Count-Attendees-in-Zoom-Rooms) after meetings on Dashboard.
	//
	CountAttendeesNumberInRoom *bool `json:"count_attendees_number_in_room,omitempty"`
	// Display a [survey](https://support.zoom.us/hc/en-us/articles/214193146-End-of-Meeting-Attendee-Feedback) at the end of each meeting regarding the audio and video quality on the Zoom Rooms Controller.
	DisplayFeedbackSurvey *bool `json:"display_feedback_survey,omitempty"`
	//  Show the same information on the TV that is shown on the controller.
	DisplayMeetingList *bool `json:"display_meeting_list,omitempty"`
	// Allow to display room name, time and sharing key on the top portion of TV.
	DisplayTopBanner *bool `json:"display_top_banner,omitempty"`
	// Allow in-room participants to input email address where they can recieve the recording before starting a recording if the meeting was created on the Scheduling Display or if it was started using the "Meet Now" option.
	EmailAddressPromptBeforeRecording *bool `json:"email_address_prompt_before_recording,omitempty"`
	// Encrypt screen and content shared in meetings.
	EncryptSharedScreenContent *bool `json:"encrypt_shared_screen_content,omitempty"`
	// If enabled, the meeting host and meeting ID (in addition to the meeting topic) are hidden from the Zoom Rooms display for private meetings. This affects meetings that were originally scheduled as private, as well as public meetings that were transformed to private.
	HideIDForPrivateMeeting *bool `json:"hide_id_for_private_meeting,omitempty"`
	// Set [Zoom Rooms as the alternative host](https://support.zoom.us/hc/en-us/articles/203614149-Zoom-Rooms-as-Alternative-Host).
	//
	MakeRoomAlternativeHost *bool `json:"make_room_alternative_host,omitempty"`
	// Enable secure connection between Zoom Rooms computer and controller.
	SecureConnectionChannel *bool `json:"secure_connection_channel,omitempty"`
	// Restrict[ sending Whiteboard sessions](https://support.zoom.us/hc/en-us/articles/115004797286-Using-the-Whiteboard-in-Zoom-Rooms-for-Touch#h_781274b3-5237-4320-8826-be2120b00e21) to contacts or internal users only.
	SendWhiteboardToInternalContactOnly *bool `json:"send_whiteboard_to_internal_contact_only,omitempty"`
	// If enabled, the upcoming meeting alert message will be shown on the TV display. The value of the `upcoming_meeting_alert` field should be set to `true` to use this field.
	ShowAlertBeforeMeeting *bool `json:"show_alert_before_meeting,omitempty"`
	// Allow users to see call history of joined meetings and phone calls from the Zoom Rooms controller.
	//
	ShowCallHistoryInRoom *bool `json:"show_call_history_in_room,omitempty"`
	// If enabled, you can invite participants from the contact list during a meeting or when starting a meeting
	ShowContactListOnController *bool `json:"show_contact_list_on_controller,omitempty"`
	// When enabled, meeting participants that are audio only or have their video turned off will also be shown on the Zoom Rooms display by default.
	ShowNonVideoParticipants *bool `json:"show_non_video_participants,omitempty"`
	// Require the AirPlay service to be [started by an administrator](https://support.zoom.us/hc/en-us/articles/204726885-Screen-Share-Using-Airplay-Mirroring#h_a342ad38-4e46-47a8-a1d9-cded3b144b39) rather than always being available.
	StartAirplayManually *bool `json:"start_airplay_manually,omitempty"`
	// Integrate with Skype for Business, GoToMeeting, or WebEx and show the meeting dial-in button on the meeting list tab for Zoom Rooms Controllers.
	SupportJoin3rdPartyMeeting *bool `json:"support_join_3rd_party_meeting,omitempty"`
	// If enabled, all meetings in this room will be treated as [private meetings](https://support.zoom.us/hc/en-us/articles/115001051063-Zoom-Rooms-Private-Meetings), and the Zoom Room will display "Your Name's Meeting" instead of the real meeting topic.
	TransformMeetingToPrivate *bool `json:"transform_meeting_to_private,omitempty"`
	// If enabled, a reminder will display 10 minutes prior to the next scheduled meeting on the controller.
	UpcomingMeetingAlert *bool `json:"upcoming_meeting_alert,omitempty"`
	// [Restart](https://support.zoom.us/hc/en-us/articles/205418949-Zoom-Rooms-Weekly-System-Restart) the Zoom Rooms computer and controller once a week.
	WeeklySystemRestart *bool `json:"weekly_system_restart,omitempty"`
}

type UpdateZoomRoomAccSettingsApplicationJSON1 struct {
	ZoomRooms *UpdateZoomRoomAccSettingsApplicationJSON1ZoomRooms `json:"zoom_rooms,omitempty"`
}

type UpdateZoomRoomAccSettingsApplicationJSONType string

const (
	UpdateZoomRoomAccSettingsApplicationJSONTypeUpdateZoomRoomAccSettingsApplicationJSON1 UpdateZoomRoomAccSettingsApplicationJSONType = "updateZoomRoomAccSettings_ApplicationJSON_1"
	UpdateZoomRoomAccSettingsApplicationJSONTypeUpdateZoomRoomAccSettingsApplicationJSON2 UpdateZoomRoomAccSettingsApplicationJSONType = "updateZoomRoomAccSettings_ApplicationJSON_2"
)

type UpdateZoomRoomAccSettingsApplicationJSON struct {
	UpdateZoomRoomAccSettingsApplicationJSON1 *UpdateZoomRoomAccSettingsApplicationJSON1
	UpdateZoomRoomAccSettingsApplicationJSON2 *UpdateZoomRoomAccSettingsApplicationJSON2

	Type UpdateZoomRoomAccSettingsApplicationJSONType
}

func CreateUpdateZoomRoomAccSettingsApplicationJSONUpdateZoomRoomAccSettingsApplicationJSON1(updateZoomRoomAccSettingsApplicationJSON1 UpdateZoomRoomAccSettingsApplicationJSON1) UpdateZoomRoomAccSettingsApplicationJSON {
	typ := UpdateZoomRoomAccSettingsApplicationJSONTypeUpdateZoomRoomAccSettingsApplicationJSON1

	return UpdateZoomRoomAccSettingsApplicationJSON{
		UpdateZoomRoomAccSettingsApplicationJSON1: &updateZoomRoomAccSettingsApplicationJSON1,
		Type: typ,
	}
}

func CreateUpdateZoomRoomAccSettingsApplicationJSONUpdateZoomRoomAccSettingsApplicationJSON2(updateZoomRoomAccSettingsApplicationJSON2 UpdateZoomRoomAccSettingsApplicationJSON2) UpdateZoomRoomAccSettingsApplicationJSON {
	typ := UpdateZoomRoomAccSettingsApplicationJSONTypeUpdateZoomRoomAccSettingsApplicationJSON2

	return UpdateZoomRoomAccSettingsApplicationJSON{
		UpdateZoomRoomAccSettingsApplicationJSON2: &updateZoomRoomAccSettingsApplicationJSON2,
		Type: typ,
	}
}

func (u *UpdateZoomRoomAccSettingsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateZoomRoomAccSettingsApplicationJSON1 := new(UpdateZoomRoomAccSettingsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateZoomRoomAccSettingsApplicationJSON1); err == nil {
		u.UpdateZoomRoomAccSettingsApplicationJSON1 = updateZoomRoomAccSettingsApplicationJSON1
		u.Type = UpdateZoomRoomAccSettingsApplicationJSONTypeUpdateZoomRoomAccSettingsApplicationJSON1
		return nil
	}

	updateZoomRoomAccSettingsApplicationJSON2 := new(UpdateZoomRoomAccSettingsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateZoomRoomAccSettingsApplicationJSON2); err == nil {
		u.UpdateZoomRoomAccSettingsApplicationJSON2 = updateZoomRoomAccSettingsApplicationJSON2
		u.Type = UpdateZoomRoomAccSettingsApplicationJSONTypeUpdateZoomRoomAccSettingsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateZoomRoomAccSettingsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.UpdateZoomRoomAccSettingsApplicationJSON1 != nil {
		return json.Marshal(u.UpdateZoomRoomAccSettingsApplicationJSON1)
	}

	if u.UpdateZoomRoomAccSettingsApplicationJSON2 != nil {
		return json.Marshal(u.UpdateZoomRoomAccSettingsApplicationJSON2)
	}

	return nil, nil
}

type UpdateZoomRoomAccSettingsRequest struct {
	QueryParams UpdateZoomRoomAccSettingsQueryParams
	Request     *UpdateZoomRoomAccSettingsApplicationJSON `request:"mediaType=application/json"`
	Security    UpdateZoomRoomAccSettingsSecurity
}

type UpdateZoomRoomAccSettingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `204` **No Content**<br>
	// Settings updated successfully.
	//
	UpdateZoomRoomAccSettings204ApplicationJSONObject map[string]interface{}
}
