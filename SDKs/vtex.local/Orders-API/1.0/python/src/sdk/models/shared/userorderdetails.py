"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import changesattachment as shared_changesattachment
from ..shared import clientprofiledata as shared_clientprofiledata
from ..shared import item as shared_item
from ..shared import marketplace as shared_marketplace
from ..shared import packageattachment as shared_packageattachment
from ..shared import paymentdata as shared_paymentdata
from ..shared import ratesandbenefitsdata as shared_ratesandbenefitsdata
from ..shared import seller as shared_seller
from ..shared import shippingdata as shared_shippingdata
from ..shared import storepreferencesdata as shared_storepreferencesdata
from ..shared import total as shared_total
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsCancellationData:
    r"""Information about order cancellation, when it applies."""
    
    cancellation_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CancellationDate') }})
    r"""The date when the order was cancelled."""  
    reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reason') }})
    r"""The reason why the order was cancelled."""  
    requested_by_payment_notification: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedByPaymentNotification') }})
    r"""If the order cancellation was requested by the payment gateway (`true`) or not (`false`)."""  
    requested_by_seller_notification: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedBySellerNotification') }})
    r"""If the order cancellation was requested by the seller (`true`) or not (`false`)."""  
    requested_by_system: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedBySystem') }})
    r"""If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example."""  
    requested_by_user: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedByUser') }})
    r"""If the order cancellation was requested by the costumer (`true`) or not (`false`)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsClientPreferencesData:
    r"""Information about customer's preferences."""
    
    locale: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale') }})
    r"""Customer's prefered language while accessing the store."""  
    optin_news_letter: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optinNewsLetter') }})
    r"""When set as `true`, this field indicates customers opted to receive the newsletters, and when set as `false`, it means they did not."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsItemMetadataItemsAssemblyOptions:
    
    composition: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Composition') }})
    r"""Displays the attachment's composition."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})
    r"""ID of the attachment related to the order."""  
    input_values: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputValues') }})
    r"""Displays the attachment's content."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Name of the attachment related to the order."""  
    required: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Required') }})
    r"""If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsItemMetadataItems:
    
    assembly_options: list[UserorderdetailsItemMetadataItemsAssemblyOptions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssemblyOptions') }})
    r"""Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any."""  
    detail_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetailUrl') }})
    r"""URL slug of the item."""  
    ean: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ean') }})
    r"""EAN of the item."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})
    r"""Item's SKU ID, which is a unique numerical identifier."""  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageUrl') }})
    r"""Item's SKU image URL."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Name of the item as displayed to customers in the storefront."""  
    product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductId') }})
    r"""ID of the Product associated with the item."""  
    ref_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefId') }})
    r"""Item's reference ID."""  
    seller: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Seller') }})
    r"""Seller ID that identifies the seller the item belongs to."""  
    sku_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkuName') }})
    r"""Name of the SKU corresponding to the item."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsItemMetadata:
    r"""Metadata information about the order's items."""
    
    items: list[UserorderdetailsItemMetadataItems] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Items') }})
    r"""Metadata items."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsMarketingData:
    r"""Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs."""
    
    coupon: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coupon') }})
    r"""Coupon's code information."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Object ID which expected value is `marketingData`."""  
    marketing_tags: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingTags') }})
    r"""Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions."""  
    utm_campaign: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmCampaign') }})
    r"""Value of the `utm_campaign` parameter of the URL that led to the request."""  
    utmi_campaign: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiCampaign') }})
    r"""Internal UTM value `utmi_cp`."""  
    utmipage: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmipage') }})
    r"""Internal UTM value `utmi_p`."""  
    utmi_part: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiPart') }})
    r"""Internal UTM value `utmi_pc`."""  
    utm_medium: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmMedium') }})
    r"""Value of the `utm_medium` parameter of the URL that led to the request."""  
    utm_partner: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmPartner') }})
    r"""UTM Source Parameters."""  
    utm_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmSource') }})
    r"""Value of the `utm_source` parameter of the URL that led to the request."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency:
    r"""Information about subscriptions' recurrence."""
    
    interval: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval') }})
    r"""Number of the time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the field's value will correspond to days, for `MONTHLY` to months, and so on."""  
    periodicity: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodicity') }})
    r"""Defines the subscriptions recurrence period. The possible values are `DAILY`,`WEEKLY`, `MONTHLY` and `YEARLY`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsSubscriptionDataSubscriptionsPlanValidity:
    r"""Information about the period during which the subscription will be valid."""
    
    begin: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('begin') }})
    r"""Subscriptions' beginning date with the format `yyyy-mm-ddThh:mm:ss`."""  
    end: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end') }})
    r"""Subscriptions' ending date with the format `yyyy-mm-ddThh:mm:ss`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsSubscriptionDataSubscriptionsPlan:
    r"""Information about the subscription's validility and frequency."""
    
    frequency: UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency') }})
    r"""Information about subscriptions' recurrence."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of plan."""  
    validity: UserorderdetailsSubscriptionDataSubscriptionsPlanValidity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validity') }})
    r"""Information about the period during which the subscription will be valid."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsSubscriptionDataSubscriptions:
    
    execution_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionCount') }})
    r"""Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on."""  
    item_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ItemIndex') }})
    r"""Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on."""  
    plan: UserorderdetailsSubscriptionDataSubscriptionsPlan = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Plan') }})
    r"""Information about the subscription's validility and frequency."""  
    price_at_subscription_date: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceAtSubscriptionDate') }})
    r"""Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsSubscriptionData:
    r"""Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453)."""
    
    subscription_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionGroupId') }})
    r"""ID of the subscription's group. If this field returns `null` and the `executionCount` is `0`, the order is the first one with subscriptions."""  
    subscriptions: list[UserorderdetailsSubscriptionDataSubscriptions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subscriptions') }})
    r"""List with subscriptions and their details."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsTaxDataTaxInfoCollectionPriceTags:
    
    is_percentual: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPercentual') }})
    r"""If the tax is a percentage (`true`) or note (`false`)."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name that identifies the tax."""  
    raw_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawValue') }})
    r"""The amount that corresponds to the tax."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsTaxDataTaxInfoCollection:
    
    item_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemIndex') }})
    r"""Item's indexing number."""  
    price_tags: list[UserorderdetailsTaxDataTaxInfoCollectionPriceTags] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceTags') }})
    r"""Price tag information."""  
    sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku') }})
    r"""Alphanumeric sequence that identifies an SKU."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserorderdetailsTaxData:
    r"""Order's tax information."""
    
    are_taxes_designated_by_marketplace: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areTaxesDesignatedByMarketplace') }})
    r"""If the taxes were designated by the marketplace (`true`), or not (`false`)."""  
    tax_info_collection: list[UserorderdetailsTaxDataTaxInfoCollection] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxInfoCollection') }})
    r"""Array with taxes' details."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Userorderdetails:
    r"""OK"""
    
    affiliate_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliateId') }})
    r"""Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order."""  
    allow_cancellation: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowCancellation') }})
    r"""When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order."""  
    allow_edition: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowEdition') }})
    r"""When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order."""  
    authorized_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedDate') }})
    r"""Authorized order date."""  
    call_center_operator_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callCenterOperatorData') }})
    r"""Call center operator responsible for the order."""  
    cancellation_data: UserorderdetailsCancellationData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellationData') }})
    r"""Information about order cancellation, when it applies."""  
    cancel_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelReason') }})
    r"""Reason for order cancellation."""  
    changes_attachment: shared_changesattachment.ChangesAttachment = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changesAttachment') }})
    r"""Information about changes in the order."""  
    checked_in_pickup_point_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkedInPickupPointId') }})
    r"""If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made."""  
    client_preferences_data: UserorderdetailsClientPreferencesData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientPreferencesData') }})
    r"""Information about customer's preferences."""  
    client_profile_data: shared_clientprofiledata.ClientProfileData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientProfileData') }})
    r"""Object with information on the client's profile."""  
    commercial_condition_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commercialConditionData') }})
    r"""Information about commercial conditions."""  
    creation_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate') }})
    r"""Order's creation date."""  
    custom_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customData') }})
    r"""Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt."""  
    follow_up_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followUpEmail') }})
    r"""Email of the store's employee responsible for managing the order."""  
    gift_registry_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftRegistryData') }})
    r"""Information about gift list, when it applies."""  
    hostname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostname') }})
    r"""Account Hostname registered in License Manager."""  
    invoice_data: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceData') }})
    r"""Information pertinent to the order's invoice."""  
    invoiced_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoicedDate') }})
    r"""Order's invoice date."""  
    is_checked_in: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCheckedIn') }})
    r"""This field is set `true` when the order was made via inStore and `false` when it was not."""  
    is_completed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCompleted') }})
    r"""When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet."""  
    item_metadata: UserorderdetailsItemMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemMetadata') }})
    r"""Metadata information about the order's items."""  
    items: list[shared_item.Item] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})
    r"""Information about order's items."""  
    last_change: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastChange') }})
    r"""Order's last change date."""  
    last_message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastMessage') }})
    r"""Last sent transactional message."""  
    marketing_data: UserorderdetailsMarketingData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingData') }})
    r"""Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs."""  
    marketplace: shared_marketplace.Marketplace = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplace') }})
    r"""Details about the marketplace related to the order."""  
    marketplace_items: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceItems') }})
    r"""Marketplace details object."""  
    marketplace_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceOrderId') }})
    r"""Marketplace order ID."""  
    marketplace_services_endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceServicesEndpoint') }})
    r"""Marketplace services endpoint."""  
    merchant_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantName') }})
    r"""Name of the merchant."""  
    open_text_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openTextField') }})
    r"""Optional field with order's additional information. This field must be filled in using the following format:
    
    ```
    
    {
        \"fieldExample\": \"ValueExample\"
      }
    
    ```
    """  
    order_form_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderFormId') }})
    r"""[Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID."""  
    order_group: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderGroup') }})
    r"""Order's group ID."""  
    order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderId') }})
    r"""Order ID is a unique code that identifies an order."""  
    origin: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin') }})
    r"""Order Origin, if `Marketplace` or `Fulfillment`."""  
    package_attachment: shared_packageattachment.PackageAttachment = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageAttachment') }})
    r"""Package object populated after order invoiced."""  
    payment_data: shared_paymentdata.PaymentData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentData') }})
    r"""Object with information about the payment."""  
    rates_and_benefits_data: shared_ratesandbenefitsdata.RatesAndBenefitsData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratesAndBenefitsData') }})
    r"""Information on promotions and taxes that apply to the order."""  
    rounding_error: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roundingError') }})
    r"""Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field."""  
    sales_channel: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel') }})
    r"""Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order."""  
    seller_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerOrderId') }})
    r"""ID of the seller related to the order. It can be a VTEX seller or an external seller."""  
    sellers: list[shared_seller.Seller] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellers') }})
    r"""List of all sellers associated with the order."""  
    sequence: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequence') }})
    r"""Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`."""  
    shipping_data: shared_shippingdata.ShippingData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingData') }})
    r"""Object containing shipping data."""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196)."""  
    status_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusDescription') }})
    r"""`Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value."""  
    store_preferences_data: shared_storepreferencesdata.StorePreferencesData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storePreferencesData') }})
    r"""Object with data from the store's configuration - stored in VTEX's License Manager."""  
    subscription_data: UserorderdetailsSubscriptionData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionData') }})
    r"""Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453)."""  
    tax_data: UserorderdetailsTaxData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxData') }})
    r"""Order's tax information."""  
    totals: list[shared_total.Total] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totals') }})
    r"""List with details about orders' totals."""  
    value: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Order's total amount."""  
    