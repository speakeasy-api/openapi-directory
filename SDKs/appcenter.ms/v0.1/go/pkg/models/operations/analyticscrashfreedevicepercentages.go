// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsCrashFreeDevicePercentagesSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsCrashFreeDevicePercentagesRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start   time.Time `queryParam:"style=form,explode=true,name=start"`
	Version string    `queryParam:"style=form,explode=true,name=version"`
}

// AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSON - Error
type AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSON struct {
	Error *AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsCrashFreeDevicePercentages200ApplicationJSONDailyPercentages struct {
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
	// Percentage of the object.
	Percentage *float64 `json:"percentage,omitempty"`
}

// AnalyticsCrashFreeDevicePercentages200ApplicationJSON - Percentage of crash-free devices by day in the time range and overall percentage of the time range.
type AnalyticsCrashFreeDevicePercentages200ApplicationJSON struct {
	// Average percentage.
	AveragePercentage *float64 `json:"average_percentage,omitempty"`
	// The crash-free percentage per day.
	DailyPercentages []AnalyticsCrashFreeDevicePercentages200ApplicationJSONDailyPercentages `json:"daily_percentages,omitempty"`
}

type AnalyticsCrashFreeDevicePercentagesResponse struct {
	// Percentage of crash-free devices by day in the time range and overall percentage of the time range.
	AnalyticsCrashFreeDevicePercentages200ApplicationJSONObject *AnalyticsCrashFreeDevicePercentages200ApplicationJSON
	// Error code with reason.
	AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSONObject *AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSON
	ContentType                                                     string
	StatusCode                                                      int
	RawResponse                                                     *http.Response
}
