<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LandlordController 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Post tenancy maintenance preferences:-
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerCreateMaintenancePreferenceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerCreateMaintenancePreferenceResponse
     */
	public function landlordControllerCreateMaintenancePreference(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerCreateMaintenancePreferenceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerCreateMaintenancePreferenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/tenancy/maintenance/preference', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerCreateMaintenancePreferenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerCreateMaintenancePreferenceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerCreateMaintenancePreferenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->landlordControllerCreateMaintenancePreference200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->landlordControllerCreateMaintenancePreference200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->landlordControllerCreateMaintenancePreference200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->landlordControllerCreateMaintenancePreference200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the accounting details for the landlord.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetAccountsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetAccountsResponse
     */
	public function landlordControllerGetAccounts(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetAccountsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/accounting', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetAccountsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordAccountingModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordAccountingModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordAccountingModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordAccountingModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download a Document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetDocumentResponse
     */
	public function landlordControllerGetDocument(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/document', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetDocumentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Generate a Inventory PDF for a tenancy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvetoryReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvetoryReportResponse
     */
	public function landlordControllerGetInvetoryReport(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvetoryReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvetoryReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/inventory', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvetoryReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvetoryReportRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvetoryReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get an invoice pdf belonging to the landlord.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvoiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvoiceResponse
     */
	public function landlordControllerGetInvoice(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvoiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvoiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/invoice', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvoiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvoiceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetInvoiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve landlord's CRM ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetLandlordCrmEntriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetLandlordCrmEntriesResponse
     */
	public function landlordControllerGetLandlordCrmEntries(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetLandlordCrmEntriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetLandlordCrmEntriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/landlordcrmentries', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetLandlordCrmEntriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetLandlordCrmEntriesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetLandlordCrmEntriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordCrmEntries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\LandlordCrmEntry>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordCrmEntries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\LandlordCrmEntry>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Active maintenance jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetMaintenanceJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetMaintenanceJobsResponse
     */
	public function landlordControllerGetMaintenanceJobs(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetMaintenanceJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetMaintenanceJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/maintenance', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetMaintenanceJobsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetMaintenanceJobsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetMaintenanceJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordMaintenanceModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordMaintenanceModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordMaintenanceModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordMaintenanceModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a Profit and Loss Report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetProfitLossReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetProfitLossReportResponse
     */
	public function landlordControllerGetProfitLossReport(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetProfitLossReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetProfitLossReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/profitloss', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetProfitLossReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetProfitLossReportRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetProfitLossReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordProfitLossModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordProfitLossModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordProfitLossModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordProfitLossModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rent Arrears
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetRentArrearsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetRentArrearsResponse
     */
	public function landlordControllerGetRentArrears(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetRentArrearsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetRentArrearsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/rentarrears', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetRentArrearsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetRentArrearsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetRentArrearsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordRentArrearsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordRentArrearsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordRentArrearsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordRentArrearsModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a Self Assessment Tax Report
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSASReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSASReportResponse
     */
	public function landlordControllerGetSASReport(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSASReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSASReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/sas', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSASReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSASReportRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSASReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get contact details of all linked landlords.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSettingsResponse
     */
	public function landlordControllerGetSettings(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/settings', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSettingsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordSettingsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordSettingsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordSettingsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordSettingsModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the summary details for the landlord.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSummaryDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSummaryDetailsResponse
     */
	public function landlordControllerGetSummaryDetails(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSummaryDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSummaryDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/summary', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSummaryDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSummaryDetailsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetSummaryDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordSummaryModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordSummaryModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordSummaryModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordSummaryModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get tenancy details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyResponse
     */
	public function landlordControllerGetTenancy(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/tenancy', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordTenancyModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordTenancyModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->landlordTenancyModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LandlordTenancyModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a Tenancy Agreement Copy (PDF)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyAgreementReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyAgreementReportResponse
     */
	public function landlordControllerGetTenancyAgreementReport(
        \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyAgreementReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyAgreementReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customer/{shortName}/landlord/tenancyagreement', \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyAgreementReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyAgreementReportRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LandlordControllerGetTenancyAgreementReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}