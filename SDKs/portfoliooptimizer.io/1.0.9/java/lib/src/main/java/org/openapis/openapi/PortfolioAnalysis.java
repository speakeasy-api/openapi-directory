/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class PortfolioAnalysis {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PortfolioAnalysis(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Alpha
     * Compute the Jensen\u2019s alpha of one or several portfolio(s) in the Capital Asset Pricing Model (CAPM).
     * 
     * References
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution  
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisAlphaResponse postPortfolioAnalysisAlpha(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/alpha");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisAlphaResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisAlphaResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisAlpha200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisAlpha200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisAlpha200ApplicationJSON.class);
                res.postPortfolioAnalysisAlpha200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Beta
     * Compute the beta of one or several portfolio(s) in the Capital Asset Pricing Model (CAPM).
     * 
     * References
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution  
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisBetaResponse postPortfolioAnalysisBeta(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/beta");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisBetaResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisBetaResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisBeta200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisBeta200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisBeta200ApplicationJSON.class);
                res.postPortfolioAnalysisBeta200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return Contributions
     * Perform a return contribution analysis of one or several portfolio(s), optionally using groups of assets.
     * 
     * References
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsReturnResponse postPortfolioAnalysisContributionsReturn(org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsReturnRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/contributions/return");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsReturnResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsReturnResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisContributionsReturn200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsReturn200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsReturn200ApplicationJSON.class);
                res.postPortfolioAnalysisContributionsReturn200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Risk Contributions
     * Perform a risk contribution analysis of one or several portfolio(s), optionally using groups of assets.
     * 
     * References
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsRiskResponse postPortfolioAnalysisContributionsRisk(org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsRiskRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/contributions/risk");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsRiskResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsRiskResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisContributionsRisk200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsRisk200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisContributionsRisk200ApplicationJSON.class);
                res.postPortfolioAnalysisContributionsRisk200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Correlation Spectrum
     * Compute the correlation spectrum of one or several portfolio(s).
     * 
     * References
     * * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisCorrelationSpectrumResponse postPortfolioAnalysisCorrelationSpectrum(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/correlation-spectrum");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisCorrelationSpectrumResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisCorrelationSpectrumResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisCorrelationSpectrum200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisCorrelationSpectrum200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisCorrelationSpectrum200ApplicationJSON.class);
                res.postPortfolioAnalysisCorrelationSpectrum200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Diversification Ratio
     * Compute the diversification ratio of one or several portfolio(s).
     * 
     * References
     * * [Yves Choueifaty and Yves Coignard, Toward Maximum Diversification, The Journal of Portfolio Management Fall 2008, 35 (1) 40-51](https://doi.org/10.3905/JPM.2008.35.1.40)
     * * [Tristan Froidure, Khalid Jalalzai and Yves Choueifaty, Portfolio Rho-Representativity, International Journal of Theoretical and Applied FinanceVol. 22, No. 07, 1950034 (2019)](https://www.worldscientific.com/doi/10.1142/S0219024919500341)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisDiversificationRatioResponse postPortfolioAnalysisDiversificationRatio(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/diversification-ratio");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisDiversificationRatioResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisDiversificationRatioResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisDiversificationRatio200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisDiversificationRatio200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisDiversificationRatio200ApplicationJSON.class);
                res.postPortfolioAnalysisDiversificationRatio200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Drawdowns
     * Compute the drawdown function - also called the underwater equity curve -, as well as the worst 10 drawdowns of one or several portfolio(s).
     * 
     * References
     * * [Wikipedia, Drawdown](https://en.wikipedia.org/wiki/Drawdown_(economics))        
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisDrawdownsResponse postPortfolioAnalysisDrawdowns(org.openapis.openapi.models.operations.PostPortfolioAnalysisDrawdownsRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/drawdowns");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisDrawdownsResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisDrawdownsResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisDrawdowns200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisDrawdowns200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisDrawdowns200ApplicationJSON.class);
                res.postPortfolioAnalysisDrawdowns200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Effective Number of Bets
     * Compute the effective number of bets of one or several portfolio(s).
     * 
     * References
     * * [Meucci, Attilio and Santangelo, Alberto and Deguest, Romain, Risk Budgeting and Diversification Based on Optimized Uncorrelated Factors (November 10, 2015)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2276632)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisEffectiveNumberOfBetsResponse postPortfolioAnalysisEffectiveNumberOfBets(org.openapis.openapi.models.operations.PostPortfolioAnalysisEffectiveNumberOfBetsRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/effective-number-of-bets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisEffectiveNumberOfBetsResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisEffectiveNumberOfBetsResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSON.class);
                res.postPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Factor Exposures
     * Compute the exposures of one or several portfolio(s) to a set of factors, using a returns-based linear regression analysis.
     * 
     * References
     * * [Measuring Factor Exposures: Uses and Abuses, Ronen Israel and Adrienne Ross, The Journal of Alternative Investments Summer 2017, 20 (1) 10-25](https://jai.pm-research.com/content/20/1/10.short) 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisFactorsExposuresResponse postPortfolioAnalysisFactorsExposures(org.openapis.openapi.models.operations.PostPortfolioAnalysisFactorsExposuresRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/factors/exposures");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisFactorsExposuresResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisFactorsExposuresResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisFactorsExposures200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisFactorsExposures200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisFactorsExposures200ApplicationJSON.class);
                res.postPortfolioAnalysisFactorsExposures200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Mean-Variance Efficient Frontier
     * Compute the discretized mean-variance efficient frontier associated to a list of assets, optionally subject to:
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraint
     * 
     * References
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceEfficientFrontierResponse postPortfolioAnalysisMeanVarianceEfficientFrontier(org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceEfficientFrontierRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/mean-variance/efficient-frontier");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceEfficientFrontierResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceEfficientFrontierResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisMeanVarianceEfficientFrontier200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceEfficientFrontier200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceEfficientFrontier200ApplicationJSON.class);
                res.postPortfolioAnalysisMeanVarianceEfficientFrontier200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Mean-Variance Minimum Variance Frontier
     * Compute the discretized mean-variance minimum variance frontier associated to a list of assets, optionally subject to:
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraint
     * 
     * &gt; This endpoint is similar to the endpoint [`/portfolio/analysis/mean-variance/efficient-frontier`](#post-/portfolio/analysis/mean-variance/efficient-frontier), because the mean-variance efficient frontier is the "top" portion of the mean-variance minimum variance frontier.
     * 
     * References
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontierResponse postPortfolioAnalysisMeanVarianceMinimumVarianceFrontier(org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontierRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/mean-variance/minimum-variance-frontier");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontierResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontierResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisMeanVarianceMinimumVarianceFrontier200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontier200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisMeanVarianceMinimumVarianceFrontier200ApplicationJSON.class);
                res.postPortfolioAnalysisMeanVarianceMinimumVarianceFrontier200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Arithmetic Return
     * Compute the arithmetic return of one or several portfolio(s) from either:  
     * * Portfolio assets arithmetic returns
     * * Portfolio values
     * 
     * References
     * * [Wikipedia, Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Return)
     * * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnResponse postPortfolioAnalysisReturn(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/return");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisReturn200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisReturn200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisReturn200ApplicationJSON.class);
                res.postPortfolioAnalysisReturn200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Arithmetic Average Return
     * Compute the arithmetic average of the arithmetic return(s) of one or several portfolio(s).
     * 
     * References
     * * [Wikipedia, Arithmetic Average Rate of Return](https://en.wikipedia.org/wiki/Rate_of_return#Arithmetic_average_rate_of_return)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnsAverageResponse postPortfolioAnalysisReturnsAverage(org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnsAverageRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/returns/average");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnsAverageResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnsAverageResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisReturnsAverage200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnsAverage200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisReturnsAverage200ApplicationJSON.class);
                res.postPortfolioAnalysisReturnsAverage200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Tracking Error
     * Compute the tracking error between a benchmark and one or several portfolio(s).
     * 
     * References
     * * [Wikipedia, Tracking error](https://en.wikipedia.org/wiki/Tracking_error) 
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisTrackingErrorResponse postPortfolioAnalysisTrackingError(org.openapis.openapi.models.operations.PostPortfolioAnalysisTrackingErrorRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/tracking-error");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisTrackingErrorResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisTrackingErrorResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisTrackingError200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisTrackingError200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisTrackingError200ApplicationJSON.class);
                res.postPortfolioAnalysisTrackingError200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Ulcer Index
     * Compute the Ulcer Index of one or several portfolio(s).
     * 
     * References
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
     * * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk &amp; Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerIndexResponse postPortfolioAnalysisUlcerIndex(org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerIndexRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/ulcer-index");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerIndexResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerIndexResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisUlcerIndex200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerIndex200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerIndex200ApplicationJSON.class);
                res.postPortfolioAnalysisUlcerIndex200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Ulcer Performance Index
     * Compute the Ulcer Performance Index of one or several portfolio(s).
     * 
     * References
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
     * * [Peter G. Martin, Ulcer Index, An Alternative Approach to the Measurement of Investment Risk &amp; Risk-Adjusted Performance](http://www.tangotools.com/ui/ui.htm)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerPerformanceIndexResponse postPortfolioAnalysisUlcerPerformanceIndex(org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerPerformanceIndexRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/ulcer-performance-index");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerPerformanceIndexResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerPerformanceIndexResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisUlcerPerformanceIndex200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerPerformanceIndex200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisUlcerPerformanceIndex200ApplicationJSON.class);
                res.postPortfolioAnalysisUlcerPerformanceIndex200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Volatility
     * Compute the volatility (i.e., standard deviation) of one or several portfolio(s) from either:  
     * * Portfolio assets covariance matrix
     * * Portfolio values
     * 
     * References
     * * [Wikipedia, Standard Deviation](https://en.wikipedia.org/wiki/Standard_deviation#Finance)
     * * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
     * * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisVolatilityResponse postPortfolioAnalysisVolatility(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/volatility");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisVolatilityResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisVolatilityResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisVolatility200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisVolatility200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisVolatility200ApplicationJSON.class);
                res.postPortfolioAnalysisVolatility200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}