/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RunAggregationQueryResponse - The response for Firestore.RunAggregationQuery.
 */
public class RunAggregationQueryResponse {
    /**
     * The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readTime")
    public String readTime;
    public RunAggregationQueryResponse withReadTime(String readTime) {
        this.readTime = readTime;
        return this;
    }
    
    /**
     * The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    public AggregationResult result;
    public RunAggregationQueryResponse withResult(AggregationResult result) {
        this.result = result;
        return this;
    }
    
    /**
     * The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction")
    public String transaction;
    public RunAggregationQueryResponse withTransaction(String transaction) {
        this.transaction = transaction;
        return this;
    }
    
}
