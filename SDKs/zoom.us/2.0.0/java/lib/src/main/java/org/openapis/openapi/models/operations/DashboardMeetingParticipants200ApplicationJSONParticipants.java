/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class DashboardMeetingParticipants200ApplicationJSONParticipants {
    /**
     * Audio quality of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_quality")
    public DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum audioQuality;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withAudioQuality(DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum audioQuality) {
        this.audioQuality = audioQuality;
        return this;
    }
    
    /**
     * The type of camera used by participant during the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("camera")
    public String camera;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withCamera(String camera) {
        this.camera = camera;
        return this;
    }
    
    /**
     * Participant connection type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_type")
    public String connectionType;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withConnectionType(String connectionType) {
        this.connectionType = connectionType;
        return this;
    }
    
    /**
     * Another identifier for the participant. Can be a number or characters, maximum length of 15 characters. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_key")
    public String customerKey;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withCustomerKey(String customerKey) {
        this.customerKey = customerKey;
        return this;
    }
    
    /**
     * Data Center where participant's meeting data is stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_center")
    public String dataCenter;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withDataCenter(String dataCenter) {
        this.dataCenter = dataCenter;
        return this;
    }
    
    /**
     * The type of device using which the participant joined the meeting. The possible values for this field are:
     * * `Phone`: Participant joined via PSTN.
     * * `H.323/SIP`: Participant joined via an H.323 or SIP device.
     * * `Windows`: Participant joined via VoIP using a Windows device.
     * * `Mac`: Participant joined via VoIP using a Mac device.
     * * `iOS`: Participant joined via VoIP using an iOS device.
     * * `Android`: Participant joined via VoIP using an Android device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device")
    public String device;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withDevice(String device) {
        this.device = device;
        return this;
    }
    
    /**
     * Participant's PC domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Email address of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Participant's hard disk ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("harddisk_id")
    public String harddiskId;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withHarddiskId(String harddiskId) {
        this.harddiskId = harddiskId;
        return this;
    }
    
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The number of participants who joined via Zoom Room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("in_room_participants")
    public Long inRoomParticipants;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withInRoomParticipants(Long inRoomParticipants) {
        this.inRoomParticipants = inRoomParticipants;
        return this;
    }
    
    /**
     * Participant's IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_address")
    public String ipAddress;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * The time at which participant joined the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("join_time")
    public OffsetDateTime joinTime;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withJoinTime(OffsetDateTime joinTime) {
        this.joinTime = joinTime;
        return this;
    }
    
    /**
     * Possible reasons for why participant left the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leave_reason")
    public String leaveReason;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withLeaveReason(String leaveReason) {
        this.leaveReason = leaveReason;
        return this;
    }
    
    /**
     * The time at which a participant left the meeting. For live meetings, this field will only be returned if a participant has left the ongoing meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("leave_time")
    public OffsetDateTime leaveTime;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withLeaveTime(OffsetDateTime leaveTime) {
        this.leaveTime = leaveTime;
        return this;
    }
    
    /**
     * Participant's location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Participant's MAC address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mac_addr")
    public String macAddr;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withMacAddr(String macAddr) {
        this.macAddr = macAddr;
        return this;
    }
    
    /**
     * The type of Microphone that participant used during the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("microphone")
    public String microphone;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withMicrophone(String microphone) {
        this.microphone = microphone;
        return this;
    }
    
    /**
     * Participant's network type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_type")
    public DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum networkType;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withNetworkType(DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum networkType) {
        this.networkType = networkType;
        return this;
    }
    
    /**
     * Name of Participant's PC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pc_name")
    public String pcName;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withPcName(String pcName) {
        this.pcName = pcName;
        return this;
    }
    
    /**
     * Indicates whether or not recording was used during the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording")
    public Boolean recording;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withRecording(Boolean recording) {
        this.recording = recording;
        return this;
    }
    
    /**
     * Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter. This is not supported for `live` meeting types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrant_id")
    public String registrantId;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withRegistrantId(String registrantId) {
        this.registrantId = registrantId;
        return this;
    }
    
    /**
     * Screen share quality of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screen_share_quality")
    public DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum screenShareQuality;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withScreenShareQuality(DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum screenShareQuality) {
        this.screenShareQuality = screenShareQuality;
        return this;
    }
    
    /**
     * Indicates whether or not a user selected to share an iPhone/iPad app during the screenshare. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_application")
    public Boolean shareApplication;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withShareApplication(Boolean shareApplication) {
        this.shareApplication = shareApplication;
        return this;
    }
    
    /**
     * Indicates whether or not a user selected to share their desktop during the screenshare. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_desktop")
    public Boolean shareDesktop;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withShareDesktop(Boolean shareDesktop) {
        this.shareDesktop = shareDesktop;
        return this;
    }
    
    /**
     * Indicates whether or not a user selected to share their whiteboard during the screenshare. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_whiteboard")
    public Boolean shareWhiteboard;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withShareWhiteboard(Boolean shareWhiteboard) {
        this.shareWhiteboard = shareWhiteboard;
        return this;
    }
    
    /**
     * The type of speaker participant used during the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speaker")
    public String speaker;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withSpeaker(String speaker) {
        this.speaker = speaker;
        return this;
    }
    
    /**
     * Indicates whether the participant is in the waiting room or in the meeting. 
     * 
     * The value of this field can be `in_meeting` or `in_waiting_room`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum status;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withStatus(DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Participant display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_name")
    public String userName;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * Participant's Zoom Client version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * Video quality of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video_quality")
    public DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum videoQuality;
    public DashboardMeetingParticipants200ApplicationJSONParticipants withVideoQuality(DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum videoQuality) {
        this.videoQuality = videoQuality;
        return this;
    }
    
}
