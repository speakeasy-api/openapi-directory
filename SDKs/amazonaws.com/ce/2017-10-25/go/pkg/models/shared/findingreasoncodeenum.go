// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FindingReasonCodeEnum string

const (
	FindingReasonCodeEnumCPUOverProvisioned               FindingReasonCodeEnum = "CPU_OVER_PROVISIONED"
	FindingReasonCodeEnumCPUUnderProvisioned              FindingReasonCodeEnum = "CPU_UNDER_PROVISIONED"
	FindingReasonCodeEnumMemoryOverProvisioned            FindingReasonCodeEnum = "MEMORY_OVER_PROVISIONED"
	FindingReasonCodeEnumMemoryUnderProvisioned           FindingReasonCodeEnum = "MEMORY_UNDER_PROVISIONED"
	FindingReasonCodeEnumEbsThroughputOverProvisioned     FindingReasonCodeEnum = "EBS_THROUGHPUT_OVER_PROVISIONED"
	FindingReasonCodeEnumEbsThroughputUnderProvisioned    FindingReasonCodeEnum = "EBS_THROUGHPUT_UNDER_PROVISIONED"
	FindingReasonCodeEnumEbsIopsOverProvisioned           FindingReasonCodeEnum = "EBS_IOPS_OVER_PROVISIONED"
	FindingReasonCodeEnumEbsIopsUnderProvisioned          FindingReasonCodeEnum = "EBS_IOPS_UNDER_PROVISIONED"
	FindingReasonCodeEnumNetworkBandwidthOverProvisioned  FindingReasonCodeEnum = "NETWORK_BANDWIDTH_OVER_PROVISIONED"
	FindingReasonCodeEnumNetworkBandwidthUnderProvisioned FindingReasonCodeEnum = "NETWORK_BANDWIDTH_UNDER_PROVISIONED"
	FindingReasonCodeEnumNetworkPpsOverProvisioned        FindingReasonCodeEnum = "NETWORK_PPS_OVER_PROVISIONED"
	FindingReasonCodeEnumNetworkPpsUnderProvisioned       FindingReasonCodeEnum = "NETWORK_PPS_UNDER_PROVISIONED"
	FindingReasonCodeEnumDiskIopsOverProvisioned          FindingReasonCodeEnum = "DISK_IOPS_OVER_PROVISIONED"
	FindingReasonCodeEnumDiskIopsUnderProvisioned         FindingReasonCodeEnum = "DISK_IOPS_UNDER_PROVISIONED"
	FindingReasonCodeEnumDiskThroughputOverProvisioned    FindingReasonCodeEnum = "DISK_THROUGHPUT_OVER_PROVISIONED"
	FindingReasonCodeEnumDiskThroughputUnderProvisioned   FindingReasonCodeEnum = "DISK_THROUGHPUT_UNDER_PROVISIONED"
)

func (e FindingReasonCodeEnum) ToPointer() *FindingReasonCodeEnum {
	return &e
}

func (e *FindingReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CPU_OVER_PROVISIONED":
		fallthrough
	case "CPU_UNDER_PROVISIONED":
		fallthrough
	case "MEMORY_OVER_PROVISIONED":
		fallthrough
	case "MEMORY_UNDER_PROVISIONED":
		fallthrough
	case "EBS_THROUGHPUT_OVER_PROVISIONED":
		fallthrough
	case "EBS_THROUGHPUT_UNDER_PROVISIONED":
		fallthrough
	case "EBS_IOPS_OVER_PROVISIONED":
		fallthrough
	case "EBS_IOPS_UNDER_PROVISIONED":
		fallthrough
	case "NETWORK_BANDWIDTH_OVER_PROVISIONED":
		fallthrough
	case "NETWORK_BANDWIDTH_UNDER_PROVISIONED":
		fallthrough
	case "NETWORK_PPS_OVER_PROVISIONED":
		fallthrough
	case "NETWORK_PPS_UNDER_PROVISIONED":
		fallthrough
	case "DISK_IOPS_OVER_PROVISIONED":
		fallthrough
	case "DISK_IOPS_UNDER_PROVISIONED":
		fallthrough
	case "DISK_THROUGHPUT_OVER_PROVISIONED":
		fallthrough
	case "DISK_THROUGHPUT_UNDER_PROVISIONED":
		*e = FindingReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindingReasonCodeEnum: %v", v)
	}
}
