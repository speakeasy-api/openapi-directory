"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupRun = exports.BackupRunTypeEnum = exports.BackupRunStatusEnum = exports.BackupRunBackupKindEnum = void 0;
var utils_1 = require("../../../internal/utils");
var diskencryptionconfiguration_1 = require("./diskencryptionconfiguration");
var diskencryptionstatus_1 = require("./diskencryptionstatus");
var operationerror_1 = require("./operationerror");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
 */
var BackupRunBackupKindEnum;
(function (BackupRunBackupKindEnum) {
    BackupRunBackupKindEnum["SqlBackupKindUnspecified"] = "SQL_BACKUP_KIND_UNSPECIFIED";
    BackupRunBackupKindEnum["Snapshot"] = "SNAPSHOT";
    BackupRunBackupKindEnum["Physical"] = "PHYSICAL";
})(BackupRunBackupKindEnum = exports.BackupRunBackupKindEnum || (exports.BackupRunBackupKindEnum = {}));
/**
 * The status of this run.
 */
var BackupRunStatusEnum;
(function (BackupRunStatusEnum) {
    BackupRunStatusEnum["SqlBackupRunStatusUnspecified"] = "SQL_BACKUP_RUN_STATUS_UNSPECIFIED";
    BackupRunStatusEnum["Enqueued"] = "ENQUEUED";
    BackupRunStatusEnum["Overdue"] = "OVERDUE";
    BackupRunStatusEnum["Running"] = "RUNNING";
    BackupRunStatusEnum["Failed"] = "FAILED";
    BackupRunStatusEnum["Successful"] = "SUCCESSFUL";
    BackupRunStatusEnum["Skipped"] = "SKIPPED";
    BackupRunStatusEnum["DeletionPending"] = "DELETION_PENDING";
    BackupRunStatusEnum["DeletionFailed"] = "DELETION_FAILED";
    BackupRunStatusEnum["Deleted"] = "DELETED";
})(BackupRunStatusEnum = exports.BackupRunStatusEnum || (exports.BackupRunStatusEnum = {}));
/**
 * The type of this run; can be either "AUTOMATED" or "ON_DEMAND" or "FINAL". This field defaults to "ON_DEMAND" and is ignored, when specified for insert requests.
 */
var BackupRunTypeEnum;
(function (BackupRunTypeEnum) {
    BackupRunTypeEnum["SqlBackupRunTypeUnspecified"] = "SQL_BACKUP_RUN_TYPE_UNSPECIFIED";
    BackupRunTypeEnum["Automated"] = "AUTOMATED";
    BackupRunTypeEnum["OnDemand"] = "ON_DEMAND";
})(BackupRunTypeEnum = exports.BackupRunTypeEnum || (exports.BackupRunTypeEnum = {}));
/**
 * A BackupRun resource.
 */
var BackupRun = /** @class */ (function (_super) {
    __extends(BackupRun, _super);
    function BackupRun() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "backupKind" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "backupKind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskEncryptionConfiguration" }),
        (0, class_transformer_1.Type)(function () { return diskencryptionconfiguration_1.DiskEncryptionConfiguration; }),
        __metadata("design:type", diskencryptionconfiguration_1.DiskEncryptionConfiguration)
    ], BackupRun.prototype, "diskEncryptionConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskEncryptionStatus" }),
        (0, class_transformer_1.Type)(function () { return diskencryptionstatus_1.DiskEncryptionStatus; }),
        __metadata("design:type", diskencryptionstatus_1.DiskEncryptionStatus)
    ], BackupRun.prototype, "diskEncryptionStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "endTime" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "endTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enqueuedTime" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "enqueuedTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "error" }),
        (0, class_transformer_1.Type)(function () { return operationerror_1.OperationError; }),
        __metadata("design:type", operationerror_1.OperationError)
    ], BackupRun.prototype, "error", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instance" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "instance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "location" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "location", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startTime" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "startTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timeZone" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "timeZone", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "windowStartTime" }),
        __metadata("design:type", String)
    ], BackupRun.prototype, "windowStartTime", void 0);
    return BackupRun;
}(utils_1.SpeakeasyBase));
exports.BackupRun = BackupRun;
