"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import userinfo as shared_userinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IdentitytoolkitRelyingpartyUploadAccountRequest:
    r"""Request to upload user account in batch."""
    
    allow_overwrite: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowOverwrite'), 'exclude': lambda f: f is None }})
    r"""Whether allow overwrite existing account when user local_id exists."""  
    block_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockSize'), 'exclude': lambda f: f is None }})  
    cpu_mem_cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuMemCost'), 'exclude': lambda f: f is None }})
    r"""The following 4 fields are for standard scrypt algorithm."""  
    delegated_project_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delegatedProjectNumber'), 'exclude': lambda f: f is None }})
    r"""GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."""  
    dk_len: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dkLen'), 'exclude': lambda f: f is None }})  
    hash_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashAlgorithm'), 'exclude': lambda f: f is None }})
    r"""The password hash algorithm."""  
    memory_cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryCost'), 'exclude': lambda f: f is None }})
    r"""Memory cost for hash calculation. Used by scrypt similar algorithms."""  
    parallelization: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parallelization'), 'exclude': lambda f: f is None }})  
    rounds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rounds'), 'exclude': lambda f: f is None }})
    r"""Rounds for hash calculation. Used by scrypt and similar algorithms."""  
    salt_separator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saltSeparator'), 'exclude': lambda f: f is None }})
    r"""The salt separator."""  
    sanity_check: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sanityCheck'), 'exclude': lambda f: f is None }})
    r"""If true, backend will do sanity check(including duplicate email and federated id) when uploading account."""  
    signer_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signerKey'), 'exclude': lambda f: f is None }})
    r"""The key for to hash the password."""  
    target_project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetProjectId'), 'exclude': lambda f: f is None }})
    r"""Specify which project (field value is actually project id) to operate. Only used when provided credential."""  
    users: Optional[list[shared_userinfo.UserInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""The account info to be stored."""  
    