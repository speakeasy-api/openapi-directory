/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IdentitytoolkitRelyingpartyCreateAuthUriRequest - Request to get the IDP authentication URL.
 */
public class IdentitytoolkitRelyingpartyCreateAuthUriRequest {
    /**
     * The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appId")
    public String appId;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withAppId(String appId) {
        this.appId = appId;
        return this;
    }
    
    /**
     * Explicitly specify the auth flow type. Currently only support "CODE_FLOW" type. The field is only used for Google provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authFlowType")
    public String authFlowType;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withAuthFlowType(String authFlowType) {
        this.authFlowType = authFlowType;
        return this;
    }
    
    /**
     * The relying party OAuth client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    public String clientId;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public String context;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withContext(String context) {
        this.context = context;
        return this;
    }
    
    /**
     * The URI to which the IDP redirects the user after the federated login flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continueUri")
    public String continueUri;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withContinueUri(String continueUri) {
        this.continueUri = continueUri;
        return this;
    }
    
    /**
     * The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customParameter")
    public java.util.Map<String, String> customParameter;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withCustomParameter(java.util.Map<String, String> customParameter) {
        this.customParameter = customParameter;
        return this;
    }
    
    /**
     * The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostedDomain")
    public String hostedDomain;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withHostedDomain(String hostedDomain) {
        this.hostedDomain = hostedDomain;
        return this;
    }
    
    /**
     * The email or federated ID of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifier")
    public String identifier;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }
    
    /**
     * The developer's consumer key for OpenId OAuth Extension
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthConsumerKey")
    public String oauthConsumerKey;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withOauthConsumerKey(String oauthConsumerKey) {
        this.oauthConsumerKey = oauthConsumerKey;
        return this;
    }
    
    /**
     * Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauthScope")
    public String oauthScope;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withOauthScope(String oauthScope) {
        this.oauthScope = oauthScope;
        return this;
    }
    
    /**
     * Optional realm for OpenID protocol. The sub string "scheme://domain:port" of the param "continueUri" is used if this is not set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("openidRealm")
    public String openidRealm;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withOpenidRealm(String openidRealm) {
        this.openidRealm = openidRealm;
        return this;
    }
    
    /**
     * The native app package for OTA installation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otaApp")
    public String otaApp;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withOtaApp(String otaApp) {
        this.otaApp = otaApp;
        return this;
    }
    
    /**
     * The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("providerId")
    public String providerId;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withProviderId(String providerId) {
        this.providerId = providerId;
        return this;
    }
    
    /**
     * The session_id passed by client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionId")
    public String sessionId;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }
    
    /**
     * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantId")
    public String tenantId;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }
    
    /**
     * Tenant project number to be used for idp discovery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantProjectNumber")
    public String tenantProjectNumber;

    public IdentitytoolkitRelyingpartyCreateAuthUriRequest withTenantProjectNumber(String tenantProjectNumber) {
        this.tenantProjectNumber = tenantProjectNumber;
        return this;
    }
    
    public IdentitytoolkitRelyingpartyCreateAuthUriRequest(){}
}
