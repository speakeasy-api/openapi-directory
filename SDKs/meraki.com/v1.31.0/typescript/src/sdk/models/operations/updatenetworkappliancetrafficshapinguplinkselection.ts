/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The default uplink. Must be one of: 'wan1' or 'wan2'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyDefaultUplinkEnum {
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Immediate WAN transition terminates all flows (new and existing) on current WAN when it is deemed unreliable.
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyFailoverAndFailbackImmediate extends SpeakeasyBase {
  /**
   * Toggle for enabling or disabling immediate WAN failover and failback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;
}

/**
 * WAN failover and failback behavior
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyFailoverAndFailback extends SpeakeasyBase {
  /**
   * Immediate WAN transition terminates all flows (new and existing) on current WAN when it is deemed unreliable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "immediate" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyFailoverAndFailbackImmediate
  )
  immediate?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyFailoverAndFailbackImmediate;
}

/**
 * Fail over criterion for this uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesFailOverCriterionEnum {
  PoorPerformance = "poorPerformance",
  UplinkDown = "uplinkDown",
}

/**
 * Name of builtin performance class, must be present when performanceClass type is 'builtin', and value must be one of: 'VoIP'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPerformanceClassBuiltinPerformanceClassNameEnum {
  VoIP = "VoIP",
}

/**
 * Type of this performance class. Must be one of: 'builtin' or 'custom'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPerformanceClassTypeEnum {
  Builtin = "builtin",
  Custom = "custom",
}

/**
 * Performance class setting for this uplink preference rule
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPerformanceClass extends SpeakeasyBase {
  /**
   * Name of builtin performance class, must be present when performanceClass type is 'builtin', and value must be one of: 'VoIP'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "builtinPerformanceClassName" })
  builtinPerformanceClassName?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPerformanceClassBuiltinPerformanceClassNameEnum;

  /**
   * ID of created custom performance class, must be present when performanceClass type is 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customPerformanceClassId" })
  customPerformanceClassId?: string;

  /**
   * Type of this performance class. Must be one of: 'builtin' or 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPerformanceClassTypeEnum;
}

/**
 * Preferred uplink for this uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPreferredUplinkEnum {
  BestForVoIP = "bestForVoIP",
  DefaultUplink = "defaultUplink",
  LoadBalancing = "loadBalancing",
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Type of this traffic filter. Must be one of: 'applicationCategory', 'application' or 'custom'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersTypeEnum {
  Application = "application",
  ApplicationCategory = "applicationCategory",
  Custom = "custom",
}

/**
 * Destination of this custom type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueDestination extends SpeakeasyBase {
  /**
   * CIDR format address, or "any". E.g.: "192.168.10.0/24",  "192.168.10.1" (same as "192.168.10.1/32"), "0.0.0.0/0" (same as "any")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * FQDN format address. Currently only availabe in 'destination' of 'vpnTrafficUplinkPreference' object. E.g.: 'www.google.com'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fqdn" })
  fqdn?: string;

  /**
   * Host ID in the VLAN, should be used along with 'vlan', and not exceed the vlan subnet capacity. Currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: "L_12345678".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Protocol of this custom type traffic filter. Must be one of: 'tcp', 'udp', 'icmp', 'icmp6' or 'any'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum {
  Any = "any",
  Icmp = "icmp",
  Icmp6 = "icmp6",
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * Source of this custom type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueSource extends SpeakeasyBase {
  /**
   * CIDR format address, or "any". E.g.: "192.168.10.0/24",  "192.168.10.1" (same as "192.168.10.1/32"), "0.0.0.0/0" (same as "any")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Host ID in the VLAN, should be used along with 'vlan', and not exceed the vlan subnet capacity. Currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: "L_12345678".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Value object of this traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValue extends SpeakeasyBase {
  /**
   * Destination of this custom type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueDestination
  )
  destination?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueDestination;

  /**
   * ID of this applicationCategory or application type traffic filter. E.g.: "meraki:layer7/category/1", "meraki:layer7/application/4"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Protocol of this custom type traffic filter. Must be one of: 'tcp', 'udp', 'icmp', 'icmp6' or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum;

  /**
   * Source of this custom type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueSource
  )
  source?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValueSource;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFilters extends SpeakeasyBase {
  /**
   * Type of this traffic filter. Must be one of: 'applicationCategory', 'application' or 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersTypeEnum;

  /**
   * Value object of this traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValue
  )
  value: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFiltersValue;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferences extends SpeakeasyBase {
  /**
   * Fail over criterion for this uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failOverCriterion" })
  failOverCriterion?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesFailOverCriterionEnum;

  /**
   * Performance class setting for this uplink preference rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "performanceClass" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPerformanceClass
  )
  performanceClass?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPerformanceClass;

  /**
   * Preferred uplink for this uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredUplink" })
  preferredUplink: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesPreferredUplinkEnum;

  /**
   * Array of traffic filters for this uplink preference rule
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFilters,
  })
  @Expose({ name: "trafficFilters" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFilters
  )
  trafficFilters: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferencesTrafficFilters[];
}

/**
 * Preferred uplink for this uplink preference rule. Must be one of: 'wan1' or 'wan2'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesPreferredUplinkEnum {
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Type of this traffic filter. Must be one of: 'custom'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersTypeEnum {
  Custom = "custom",
}

/**
 * Destination of this custom type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueDestination extends SpeakeasyBase {
  /**
   * CIDR format address, or "any". E.g.: "192.168.10.0/24",  "192.168.10.1" (same as "192.168.10.1/32"), "0.0.0.0/0" (same as "any")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;
}

/**
 * Protocol of this custom type traffic filter. Must be one of: 'tcp', 'udp', 'icmp6' or 'any'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum {
  Any = "any",
  Icmp6 = "icmp6",
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * Source of this custom type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueSource extends SpeakeasyBase {
  /**
   * CIDR format address, or "any". E.g.: "192.168.10.0/24",  "192.168.10.1" (same as "192.168.10.1/32"), "0.0.0.0/0" (same as "any")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Host ID in the VLAN, should be used along with 'vlan', and not exceed the vlan subnet capacity. Currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Value object of this traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValue extends SpeakeasyBase {
  /**
   * Destination of this custom type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueDestination
  )
  destination: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueDestination;

  /**
   * Protocol of this custom type traffic filter. Must be one of: 'tcp', 'udp', 'icmp6' or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum;

  /**
   * Source of this custom type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueSource
  )
  source: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValueSource;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFilters extends SpeakeasyBase {
  /**
   * Type of this traffic filter. Must be one of: 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersTypeEnum;

  /**
   * Value object of this traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValue
  )
  value: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFiltersValue;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferences extends SpeakeasyBase {
  /**
   * Preferred uplink for this uplink preference rule. Must be one of: 'wan1' or 'wan2'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredUplink" })
  preferredUplink: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesPreferredUplinkEnum;

  /**
   * Array of traffic filters for this uplink preference rule
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFilters,
  })
  @Expose({ name: "trafficFilters" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFilters
  )
  trafficFilters: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferencesTrafficFilters[];
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBody extends SpeakeasyBase {
  /**
   * Toggle for enabling or disabling active-active AutoVPN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activeActiveAutoVpnEnabled" })
  activeActiveAutoVpnEnabled?: boolean;

  /**
   * The default uplink. Must be one of: 'wan1' or 'wan2'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultUplink" })
  defaultUplink?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyDefaultUplinkEnum;

  /**
   * WAN failover and failback behavior
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failoverAndFailback" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyFailoverAndFailback
  )
  failoverAndFailback?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyFailoverAndFailback;

  /**
   * Toggle for enabling or disabling load balancing
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loadBalancingEnabled" })
  loadBalancingEnabled?: boolean;

  /**
   * Array of uplink preference rules for VPN traffic
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferences,
  })
  @Expose({ name: "vpnTrafficUplinkPreferences" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferences
  )
  vpnTrafficUplinkPreferences?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyVpnTrafficUplinkPreferences[];

  /**
   * Array of uplink preference rules for WAN traffic
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferences,
  })
  @Expose({ name: "wanTrafficUplinkPreferences" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferences
  )
  wanTrafficUplinkPreferences?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBodyWanTrafficUplinkPreferences[];
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkApplianceTrafficShapingUplinkSelectionRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * The default uplink. Must be one of: 'wan1' or 'wan2'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONDefaultUplinkEnum {
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Immediate WAN failover and failback
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailbackImmediate extends SpeakeasyBase {
  /**
   * Whether immediate WAN failover and failback is enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;
}

/**
 * WAN failover and failback
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailback extends SpeakeasyBase {
  /**
   * Immediate WAN failover and failback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "immediate" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailbackImmediate
  )
  immediate?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailbackImmediate;
}

/**
 * Fail over criterion for uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesFailOverCriterionEnum {
  PoorPerformance = "poorPerformance",
  UplinkDown = "uplinkDown",
}

/**
 * Name of builtin performance class. Must be present when performanceClass type is 'builtin' and value must be one of: 'VoIP'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassBuiltinPerformanceClassNameEnum {
  VoIP = "VoIP",
}

/**
 * Type of this performance class. Must be one of: 'builtin' or 'custom'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassTypeEnum {
  Builtin = "builtin",
  Custom = "custom",
}

/**
 * Performance class setting for uplink preference rule
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClass extends SpeakeasyBase {
  /**
   * Name of builtin performance class. Must be present when performanceClass type is 'builtin' and value must be one of: 'VoIP'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "builtinPerformanceClassName" })
  builtinPerformanceClassName?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassBuiltinPerformanceClassNameEnum;

  /**
   * ID of created custom performance class, must be present when performanceClass type is "custom"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customPerformanceClassId" })
  customPerformanceClassId?: string;

  /**
   * Type of this performance class. Must be one of: 'builtin' or 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClassTypeEnum;
}

/**
 * Preferred uplink for uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPreferredUplinkEnum {
  BestForVoIP = "bestForVoIP",
  DefaultUplink = "defaultUplink",
  LoadBalancing = "loadBalancing",
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Traffic filter type. Must be one of: 'applicationCategory', 'application' or 'custom'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersTypeEnum {
  Application = "application",
  ApplicationCategory = "applicationCategory",
  Custom = "custom",
}

/**
 * Destination of 'custom' type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueDestination extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any". Cannot be used in combination with the "vlan" or "fqdn" property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * FQDN format address. Cannot be used in combination with the "cidr" or "fqdn" property and is currently only available in the "destination" object of the "vpnTrafficUplinkPreference" object. E.g.: "www.google.com"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fqdn" })
  fqdn?: string;

  /**
   * Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the "vlan" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: "L_12345678".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the "cidr" or "fqdn" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp', 'icmp6' or 'any'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum {
  Any = "any",
  Icmp = "icmp",
  Icmp6 = "icmp6",
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * Source of 'custom' type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueSource extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any". Cannot be used in combination with the "vlan" property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the "vlan" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: "L_12345678".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the "cidr" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Value of traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValue extends SpeakeasyBase {
  /**
   * Destination of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueDestination
  )
  destination?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueDestination;

  /**
   * ID of 'applicationCategory' or 'application' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp', 'icmp6' or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum;

  /**
   * Source of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueSource
  )
  source?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValueSource;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters extends SpeakeasyBase {
  /**
   * Traffic filter type. Must be one of: 'applicationCategory', 'application' or 'custom'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersTypeEnum;

  /**
   * Value of traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValue
  )
  value: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFiltersValue;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences extends SpeakeasyBase {
  /**
   * Fail over criterion for uplink preference rule. Must be one of: 'poorPerformance' or 'uplinkDown'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failOverCriterion" })
  failOverCriterion?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesFailOverCriterionEnum;

  /**
   * Performance class setting for uplink preference rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "performanceClass" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClass
  )
  performanceClass?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPerformanceClass;

  /**
   * Preferred uplink for uplink preference rule. Must be one of: 'wan1', 'wan2', 'bestForVoIP', 'loadBalancing' or 'defaultUplink'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredUplink" })
  preferredUplink: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesPreferredUplinkEnum;

  /**
   * Traffic filters
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters,
  })
  @Expose({ name: "trafficFilters" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters
  )
  trafficFilters: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferencesTrafficFilters[];
}

/**
 * Preferred uplink for uplink preference rule. Must be one of: 'wan1' or 'wan2'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesPreferredUplinkEnum {
  Wan1 = "wan1",
  Wan2 = "wan2",
}

/**
 * Traffic filter type. Must be "custom"
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersTypeEnum {
  Custom = "custom",
}

/**
 * Destination of 'custom' type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueDestination extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;
}

/**
 * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp6' or 'any'
 */
export enum UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum {
  Any = "any",
  Icmp6 = "icmp6",
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * Source of 'custom' type traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueSource extends SpeakeasyBase {
  /**
   * CIDR format address (e.g."192.168.10.1", which is the same as "192.168.10.1/32"), or "any". Cannot be used in combination with the "vlan" property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the "vlan" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: number;

  /**
   * E.g.: "any", "0" (also means "any"), "8080", "1-1024"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the "cidr" property and is currently only available under a template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

/**
 * Value of traffic filter
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValue extends SpeakeasyBase {
  /**
   * Destination of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueDestination
  )
  destination: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueDestination;

  /**
   * Protocol of 'custom' type traffic filter. Must be one of: 'tcp', 'udp', 'icmp6' or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueProtocolEnum;

  /**
   * Source of 'custom' type traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueSource
  )
  source: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValueSource;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters extends SpeakeasyBase {
  /**
   * Traffic filter type. Must be "custom"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersTypeEnum;

  /**
   * Value of traffic filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValue
  )
  value: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFiltersValue;
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences extends SpeakeasyBase {
  /**
   * Preferred uplink for uplink preference rule. Must be one of: 'wan1' or 'wan2'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredUplink" })
  preferredUplink: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesPreferredUplinkEnum;

  /**
   * Traffic filters
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters,
  })
  @Expose({ name: "trafficFilters" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters
  )
  trafficFilters: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferencesTrafficFilters[];
}

/**
 * Successful operation
 */
export class UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON extends SpeakeasyBase {
  /**
   * Whether active-active AutoVPN is enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activeActiveAutoVpnEnabled" })
  activeActiveAutoVpnEnabled?: boolean;

  /**
   * The default uplink. Must be one of: 'wan1' or 'wan2'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultUplink" })
  defaultUplink?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONDefaultUplinkEnum;

  /**
   * WAN failover and failback
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failoverAndFailback" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailback
  )
  failoverAndFailback?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONFailoverAndFailback;

  /**
   * Whether load balancing is enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loadBalancingEnabled" })
  loadBalancingEnabled?: boolean;

  /**
   * Uplink preference rules for VPN traffic
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences,
  })
  @Expose({ name: "vpnTrafficUplinkPreferences" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences
  )
  vpnTrafficUplinkPreferences?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONVpnTrafficUplinkPreferences[];

  /**
   * Uplink preference rules for WAN traffic
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences,
  })
  @Expose({ name: "wanTrafficUplinkPreferences" })
  @Type(
    () =>
      UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences
  )
  wanTrafficUplinkPreferences?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONWanTrafficUplinkPreferences[];
}

export class UpdateNetworkApplianceTrafficShapingUplinkSelectionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject?: UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON;
}
