<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UpdateDeveloperMetadataRequest - A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UpdateDeveloperMetadataRequest
{
    /**
     * The filters matching the developer metadata entries to update.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DataFilter> $dataFilters
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataFilters')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\DataFilter>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $dataFilters = null;
    
    /**
     * Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeveloperMetadata $developerMetadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('developerMetadata')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DeveloperMetadata')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeveloperMetadata $developerMetadata = null;
    
    /**
     * The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
     * 
     * @var ?string $fields
     */
	#[\JMS\Serializer\Annotation\SerializedName('fields')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fields = null;
    
	public function __construct()
	{
		$this->dataFilters = null;
		$this->developerMetadata = null;
		$this->fields = null;
	}
}
