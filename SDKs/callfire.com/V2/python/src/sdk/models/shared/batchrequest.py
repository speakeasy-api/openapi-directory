"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recipient as shared_recipient
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchRequest:
    r"""Request object is used for adding new batch to an existing broadcast"""
    
    contact_list_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactListId'), 'exclude': lambda f: f is None }})
    r"""An id of existing contact list"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name of batch"""  
    recipients: Optional[list[shared_recipient.Recipient]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""A list of Recipient objects. For each recipient you can set its phone number or existing contact id to use contact which already exists in account"""  
    scrub_duplicates: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scrubDuplicates'), 'exclude': lambda f: f is None }})
    r"""Removes duplicate recipients from batch if true"""  
    