"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import activity as shared_activity
from ..shared import routepoint as shared_routepoint
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Route:
    
    activities: Optional[list[shared_activity.Activity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activities'), 'exclude': lambda f: f is None }})
    r"""Array of activities"""  
    completion_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completion_time'), 'exclude': lambda f: f is None }})
    r"""Completion time of route in seconds"""  
    distance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    r"""Distance of route in meter"""  
    points: Optional[list[shared_routepoint.RoutePoint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('points'), 'exclude': lambda f: f is None }})
    r"""Array of route planning points"""  
    preparation_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preparation_time'), 'exclude': lambda f: f is None }})
    r"""Preparation time of route in seconds"""  
    service_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_duration'), 'exclude': lambda f: f is None }})
    r"""Service duration of route in seconds"""  
    transport_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_time'), 'exclude': lambda f: f is None }})
    r"""Transport time of route in seconds"""  
    vehicle_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicle_id'), 'exclude': lambda f: f is None }})
    r"""Id of vehicle that operates route"""  
    waiting_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_time'), 'exclude': lambda f: f is None }})
    r"""Waiting time of route in seconds"""  
    