/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SearchAvailabilityFilter - A query filter to search for availabilities by.
 */
public class SearchAvailabilityFilter {
    /**
     * The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value.
     * This is commonly used to reschedule an appointment.
     * If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("booking_id")
    public String bookingId;
    public SearchAvailabilityFilter withBookingId(String bookingId) {
        this.bookingId = bookingId;
        return this;
    }
    
    /**
     * The query expression to search for availabilities matching the specified seller location IDs.
     * This query expression is not applicable when `booking_id` is present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;
    public SearchAvailabilityFilter withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per
     * availability. It is not applicable when `booking_id` is present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segment_filters")
    public SegmentFilter[] segmentFilters;
    public SearchAvailabilityFilter withSegmentFilters(SegmentFilter[] segmentFilters) {
        this.segmentFilters = segmentFilters;
        return this;
    }
    
    /**
     * Represents a generic time range. The start and end values are
     * represented in RFC 3339 format. Time ranges are customized to be
     * inclusive or exclusive based on the needs of a particular endpoint.
     * Refer to the relevant endpoint-specific documentation to determine
     * how time ranges are handled.
     */
    @JsonProperty("start_at_range")
    public TimeRange startAtRange;
    public SearchAvailabilityFilter withStartAtRange(TimeRange startAtRange) {
        this.startAtRange = startAtRange;
        return this;
    }
    
}
