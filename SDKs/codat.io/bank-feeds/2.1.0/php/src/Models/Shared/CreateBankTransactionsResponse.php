<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CreateBankTransactionsResponse - Success
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CreateBankTransactionsResponse
{
    /**
     * $changes
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\PushOperationChange> $changes
     */
	#[\JMS\Serializer\Annotation\SerializedName('changes')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\PushOperationChange>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $changes = null;
    
    /**
     * Unique identifier for your SMB in Codat.
     * 
     * @var string $companyId
     */
	#[\JMS\Serializer\Annotation\SerializedName('companyId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $companyId;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $completedOnUtc
     */
	#[\JMS\Serializer\Annotation\SerializedName('completedOnUtc')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $completedOnUtc = null;
    
    /**
     * > **Accessing Bank Accounts through Banking API**
     * 
     * > 
     * > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators. 
     * >
     * > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/banking-api#/operations/list-all-banking-transactions)
     * 
     * > View the coverage for bank transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions" target="_blank">Data coverage explorer</a>.
     * 
     * ## Overview
     * 
     * Transactional banking data for a specific company and account.
     * 
     * Bank transactions include the:
     * * Amount of the transaction.
     * * Current account balance.
     * * Transaction type, for example, credit, debit, or transfer.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BankTransactions $data
     */
	#[\JMS\Serializer\Annotation\SerializedName('data')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BankTransactions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BankTransactions $data = null;
    
    /**
     * Unique identifier for a company's data connection.
     * 
     * @var string $dataConnectionKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataConnectionKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $dataConnectionKey;
    
    /**
     * Available Data types
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DataTypeEnum $dataType
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DataTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DataTypeEnum $dataType = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('errorMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $errorMessage = null;
    
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     * 
     * @var string $pushOperationKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('pushOperationKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $pushOperationKey;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var string $requestedOnUtc
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestedOnUtc')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $requestedOnUtc;
    
    /**
     * The status of the push operation.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\PushOperationStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PushOperationStatusEnum>')]
    public PushOperationStatusEnum $status;
    
	#[\JMS\Serializer\Annotation\SerializedName('statusCode')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $statusCode;
    
	#[\JMS\Serializer\Annotation\SerializedName('timeoutInMinutes')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $timeoutInMinutes = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('timeoutInSeconds')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $timeoutInSeconds = null;
    
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Validation $validation
     */
	#[\JMS\Serializer\Annotation\SerializedName('validation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Validation')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Validation $validation = null;
    
	public function __construct()
	{
		$this->changes = null;
		$this->companyId = "";
		$this->completedOnUtc = null;
		$this->data = null;
		$this->dataConnectionKey = "";
		$this->dataType = null;
		$this->errorMessage = null;
		$this->pushOperationKey = "";
		$this->requestedOnUtc = "";
		$this->status = \OpenAPI\OpenAPI\Models\Shared\PushOperationStatusEnum::PENDING;
		$this->statusCode = 0;
		$this->timeoutInMinutes = null;
		$this->timeoutInSeconds = null;
		$this->validation = null;
	}
}
