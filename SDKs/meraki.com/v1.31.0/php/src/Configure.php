<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Configure 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a switch to a stack
     * 
     * Add a switch to a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackResponse
     */
	public function addNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/add', \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addNetworkSwitchStack200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign SM seats to a network
     * 
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse
     */
	public function assignOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/assignSeats', \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AssignOrganizationLicensesSeats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bind a network to a template.
     * 
     * Bind a network to a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BindNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BindNetworkResponse
     */
	public function bindNetwork(
        \OpenAPI\OpenAPI\Models\Operations\BindNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BindNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/bind', \OpenAPI\OpenAPI\Models\Operations\BindNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BindNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bindNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Force check-in a set of devices
     * 
     * Force check-in a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
     */
	public function checkinNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/checkin', \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkinNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     * 
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse
     */
	public function claimIntoOrganization(
        \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimIntoOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     * 
     * Claim a list of devices, licenses, and/or orders into an organization inventory. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryResponse
     */
	public function claimIntoOrganizationInventory(
        \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimIntoOrganizationInventory200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * 
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse
     */
	public function claimNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create a new organization by cloning the addressed organization
     * 
     * Create a new organization by cloning the addressed organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse
     */
	public function cloneOrganization(
        \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clone', \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloneOrganization201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CloneOrganization201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * 
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse
     */
	public function cloneOrganizationSwitchDevices(
        \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/switch/devices/clone', \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloneOrganizationSwitchDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Combine multiple networks into a single network
     * 
     * Combine multiple networks into a single network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse
     */
	public function combineOrganizationNetworks(
        \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks/combine', \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->combineOrganizationNetworks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworks200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a new vMX authentication token
     * 
     * Generate a new vMX authentication token
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceApplianceVmxAuthenticationTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceApplianceVmxAuthenticationTokenResponse
     */
	public function createDeviceApplianceVmxAuthenticationToken(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceApplianceVmxAuthenticationTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceApplianceVmxAuthenticationTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/vmx/authenticationToken', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceApplianceVmxAuthenticationTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceApplianceVmxAuthenticationTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceApplianceVmxAuthenticationToken201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateDeviceApplianceVmxAuthenticationToken201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 interface for a switch
     * 
     * Create a layer 3 interface for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceResponse
     */
	public function createDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceSwitchRoutingInterface201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterface201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 static route for a switch
     * 
     * Create a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteResponse
     */
	public function createDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceSwitchRoutingStaticRoute201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a static delegated prefix from a network
     * 
     * Add a static delegated prefix from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAppliancePrefixesDelegatedStaticRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAppliancePrefixesDelegatedStaticResponse
     */
	public function createNetworkAppliancePrefixesDelegatedStatic(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAppliancePrefixesDelegatedStaticRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAppliancePrefixesDelegatedStaticResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/prefixes/delegated/statics', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAppliancePrefixesDelegatedStaticRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAppliancePrefixesDelegatedStaticResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkAppliancePrefixesDelegatedStatic201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a static route for an MX or teleworker network
     * 
     * Add a static route for an MX or teleworker network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceStaticRouteResponse
     */
	public function createNetworkApplianceStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkApplianceStaticRoute201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a custom performance class for an MX network
     * 
     * Add a custom performance class for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceTrafficShapingCustomPerformanceClassResponse
     */
	public function createNetworkApplianceTrafficShapingCustomPerformanceClass(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceTrafficShapingCustomPerformanceClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceTrafficShapingCustomPerformanceClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkApplianceTrafficShapingCustomPerformanceClass201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a VLAN
     * 
     * Add a VLAN
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceVlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceVlanResponse
     */
	public function createNetworkApplianceVlan(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceVlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceVlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceVlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceVlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkApplianceVlan201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkApplianceVlan201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new quality retention profile for this network.
     * 
     * Creates new quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse
     */
	public function createNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new camera wireless profile for this network.
     * 
     * Creates a new camera wireless profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse
     */
	public function createNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rollback a Firmware Upgrade For A Network
     * 
     * Rollback a Firmware Upgrade For A Network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesRollbackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesRollbackResponse
     */
	public function createNetworkFirmwareUpgradesRollback(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesRollbackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/rollbacks', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkFirmwareUpgradesRollback200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesRollback200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Staged Upgrade Event for a network
     * 
     * Create a Staged Upgrade Event for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedEventRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedEventResponse
     */
	public function createNetworkFirmwareUpgradesStagedEvent(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedEventRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/events', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkFirmwareUpgradesStagedEvent200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Staged Upgrade Group for a network
     * 
     * Create a Staged Upgrade Group for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedGroupResponse
     */
	public function createNetworkFirmwareUpgradesStagedGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/groups', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFirmwareUpgradesStagedGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload a floor plan
     * 
     * Upload a floor plan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFloorPlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFloorPlanResponse
     */
	public function createNetworkFloorPlan(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFloorPlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFloorPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/floorPlans', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFloorPlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkFloorPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkFloorPlan201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a group policy
     * 
     * Create a group policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkGroupPolicyResponse
     */
	public function createNetworkGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/groupPolicies', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkGroupPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkGroupPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * 
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserResponse
     */
	public function createNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkMerakiAuthUser201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkMerakiAuthUser201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an MQTT broker
     * 
     * Add an MQTT broker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMqttBrokerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMqttBrokerResponse
     */
	public function createNetworkMqttBroker(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMqttBrokerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMqttBrokerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/mqttBrokers', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMqttBrokerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkMqttBrokerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkMqttBroker201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submit a new delete or restrict processing PII request
     * 
     * Submit a new delete or restrict processing PII request
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestResponse
     */
	public function createNetworkPiiRequest(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkPiiRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkPiiRequest201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a sensor alert profile for a network.
     * 
     * Creates a sensor alert profile for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileResponse
     */
	public function createNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSensorAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bypass activation lock attempt
     * 
     * Bypass activation lock attempt
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse
     */
	public function createNetworkSmBypassActivationLockAttempt(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/bypassActivationLockAttempts', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSmBypassActivationLockAttempt201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a target group
     * 
     * Add a target group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupResponse
     */
	public function createNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSmTargetGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an access policy for a switch network
     * 
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyResponse
     */
	public function createNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchAccessPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicy201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * 
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
     */
	public function createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a link aggregation group
     * 
     * Create a link aggregation group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationResponse
     */
	public function createNetworkSwitchLinkAggregation(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchLinkAggregation201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a switch port schedule
     * 
     * Add a switch port schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleResponse
     */
	public function createNetworkSwitchPortSchedule(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchPortSchedule201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a quality of service rule
     * 
     * Add a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse
     */
	public function createNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchQosRule201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a multicast rendezvous point
     * 
     * Create a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function createNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchRoutingMulticastRendezvousPoint201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a stack
     * 
     * Create a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackResponse
     */
	public function createNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchStack201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 interface for a switch stack
     * 
     * Create a layer 3 interface for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceResponse
     */
	public function createNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchStackRoutingInterface201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 static route for a switch stack
     * 
     * Create a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function createNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchStackRoutingStaticRoute201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an HTTP server to a network
     * 
     * Add an HTTP server to a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerResponse
     */
	public function createNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWebhooksHttpServer201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksHttpServer201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a webhook payload template for a network
     * 
     * Create a webhook payload template for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateResponse
     */
	public function createNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWebhooksPayloadTemplate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksPayloadTemplate201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a test webhook for a network
     * 
     * Send a test webhook for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestResponse
     */
	public function createNetworkWebhooksWebhookTest(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/webhookTests', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWebhooksWebhookTest201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWebhooksWebhookTest201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new RF profile for this network
     * 
     * Creates new RF profile for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileResponse
     */
	public function createNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWirelessRfProfile201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfile201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an Identity PSK
     * 
     * Create an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskResponse
     */
	public function createNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWirelessSsidIdentityPsk201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new organization
     * 
     * Create a new organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationResponse
     */
	public function createOrganization(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganization201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganization201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an action batch
     * 
     * Create an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchResponse
     */
	public function createOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationActionBatch201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganizationActionBatch201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new adaptive policy ACL
     * 
     * Creates new adaptive policy ACL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse
     */
	public function createOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new adaptive policy group
     * 
     * Creates a new adaptive policy group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse
     */
	public function createOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an Adaptive Policy
     * 
     * Add an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse
     */
	public function createOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdaptivePolicyPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new dashboard administrator
     * 
     * Create a new dashboard administrator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminResponse
     */
	public function createOrganizationAdmin(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAdmin201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an organization-wide alert configuration
     * 
     * Create an organization-wide alert configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse
     */
	public function createOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAlertsProfile201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new branding policy to an organization
     * 
     * Add a new branding policy to an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyResponse
     */
	public function createOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationBrandingPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganizationBrandingPolicy201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create custom analytics artifact
     * 
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactResponse
     */
	public function createOrganizationCameraCustomAnalyticsArtifact(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationCameraCustomAnalyticsArtifact201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new configuration template
     * 
     * Create a new configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateResponse
     */
	public function createOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationConfigTemplate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new early access feature opt-in for an organization
     * 
     * Create a new early access feature opt-in for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function createOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationEarlyAccessFeaturesOptIn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a media server to be monitored for this organization
     * 
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInsightMonitoredMediaServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInsightMonitoredMediaServerResponse
     */
	public function createOrganizationInsightMonitoredMediaServer(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInsightMonitoredMediaServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInsightMonitoredMediaServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/insight/monitoredMediaServers', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInsightMonitoredMediaServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInsightMonitoredMediaServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationInsightMonitoredMediaServer201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports event logs related to the onboarding app into elastisearch
     * 
     * Imports event logs related to the onboarding app into elastisearch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse
     */
	public function createOrganizationInventoryOnboardingCloudMonitoringExportEvent(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationInventoryOnboardingCloudMonitoringExportEvent202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * 
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse
     */
	public function createOrganizationInventoryOnboardingCloudMonitoringImport(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a network
     * 
     * Create a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse
     */
	public function createOrganizationNetwork(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationNetwork201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetwork201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Policy Object.
     * 
     * Creates a new Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse
     */
	public function createOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationPolicyObject201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Policy Object Group.
     * 
     * Creates a new Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse
     */
	public function createOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationPolicyObjectsGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a SAML IdP for your organization.
     * 
     * Create a SAML IdP for your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpResponse
     */
	public function createOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationSamlIdp201ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlIdp201ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a SAML role
     * 
     * Create a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleResponse
     */
	public function createOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationSamlRole201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * 
     * Postpone by 1 week all pending staged upgrade stages for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeferNetworkFirmwareUpgradesStagedEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeferNetworkFirmwareUpgradesStagedEventsResponse
     */
	public function deferNetworkFirmwareUpgradesStagedEvents(
        \OpenAPI\OpenAPI\Models\Operations\DeferNetworkFirmwareUpgradesStagedEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeferNetworkFirmwareUpgradesStagedEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/events/defer', \OpenAPI\OpenAPI\Models\Operations\DeferNetworkFirmwareUpgradesStagedEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeferNetworkFirmwareUpgradesStagedEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deferNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeferNetworkFirmwareUpgradesStagedEvents200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 interface from the switch
     * 
     * Delete a layer 3 interface from the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceResponse
     */
	public function deleteDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 static route for a switch
     * 
     * Delete a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteResponse
     */
	public function deleteDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a network
     * 
     * Delete a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkResponse
     */
	public function deleteNetwork(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a static delegated prefix from a network
     * 
     * Delete a static delegated prefix from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAppliancePrefixesDelegatedStaticRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAppliancePrefixesDelegatedStaticResponse
     */
	public function deleteNetworkAppliancePrefixesDelegatedStatic(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAppliancePrefixesDelegatedStaticRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAppliancePrefixesDelegatedStaticResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAppliancePrefixesDelegatedStaticRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAppliancePrefixesDelegatedStaticResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a static route from an MX or teleworker network
     * 
     * Delete a static route from an MX or teleworker network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceStaticRouteResponse
     */
	public function deleteNetworkApplianceStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a custom performance class from an MX network
     * 
     * Delete a custom performance class from an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceTrafficShapingCustomPerformanceClassResponse
     */
	public function deleteNetworkApplianceTrafficShapingCustomPerformanceClass(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceTrafficShapingCustomPerformanceClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceTrafficShapingCustomPerformanceClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a VLAN from a network
     * 
     * Delete a VLAN from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceVlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceVlanResponse
     */
	public function deleteNetworkApplianceVlan(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceVlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceVlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans/{vlanId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceVlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkApplianceVlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an existing quality retention profile for this network.
     * 
     * Delete an existing quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse
     */
	public function deleteNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an existing camera wireless profile for this network.
     * 
     * Delete an existing camera wireless profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse
     */
	public function deleteNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Staged Upgrade Group
     * 
     * Delete a Staged Upgrade Group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFirmwareUpgradesStagedGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFirmwareUpgradesStagedGroupResponse
     */
	public function deleteNetworkFirmwareUpgradesStagedGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFirmwareUpgradesStagedGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFirmwareUpgradesStagedGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFirmwareUpgradesStagedGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFirmwareUpgradesStagedGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Destroy a floor plan
     * 
     * Destroy a floor plan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFloorPlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFloorPlanResponse
     */
	public function deleteNetworkFloorPlan(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFloorPlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFloorPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/floorPlans/{floorPlanId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFloorPlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkFloorPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a group policy
     * 
     * Delete a group policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkGroupPolicyResponse
     */
	public function deleteNetworkGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/groupPolicies/{groupPolicyId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkGroupPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deauthorize a user
     * 
     * Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserResponse
     */
	public function deleteNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an MQTT broker
     * 
     * Delete an MQTT broker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMqttBrokerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMqttBrokerResponse
     */
	public function deleteNetworkMqttBroker(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMqttBrokerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMqttBrokerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMqttBrokerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkMqttBrokerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a restrict processing PII request
     * 
     * Delete a restrict processing PII request
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests/{requestId}
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestResponse
     */
	public function deleteNetworkPiiRequest(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests/{requestId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkPiiRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a sensor alert profile from a network.
     * 
     * Deletes a sensor alert profile from a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileResponse
     */
	public function deleteNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a target group from a network
     * 
     * Delete a target group from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupResponse
     */
	public function deleteNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups/{targetGroupId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a User Access Device
     * 
     * Delete a User Access Device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceResponse
     */
	public function deleteNetworkSmUserAccessDevice(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/userAccessDevices/{userAccessDeviceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an access policy for a switch network
     * 
     * Delete an access policy for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyResponse
     */
	public function deleteNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * 
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
     */
	public function deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Split a link aggregation group into separate ports
     * 
     * Split a link aggregation group into separate ports
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationResponse
     */
	public function deleteNetworkSwitchLinkAggregation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a switch port schedule
     * 
     * Delete a switch port schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleResponse
     */
	public function deleteNetworkSwitchPortSchedule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules/{portScheduleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a quality of service rule
     * 
     * Delete a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse
     */
	public function deleteNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a multicast rendezvous point
     * 
     * Delete a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function deleteNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a stack
     * 
     * Delete a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackResponse
     */
	public function deleteNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 interface from a switch stack
     * 
     * Delete a layer 3 interface from a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceResponse
     */
	public function deleteNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 static route for a switch stack
     * 
     * Delete a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function deleteNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an HTTP server from a network
     * 
     * Delete an HTTP server from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerResponse
     */
	public function deleteNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers/{httpServerId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Destroy a webhook payload template for a network
     * 
     * Destroy a webhook payload template for a network. Does not work for included templates ('wpt_00001', 'wpt_00002', 'wpt_00003', 'wpt_00004', 'wpt_00005' or 'wpt_00006')
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateResponse
     */
	public function deleteNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a RF Profile
     * 
     * Delete a RF Profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileResponse
     */
	public function deleteNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an Identity PSK
     * 
     * Delete an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskResponse
     */
	public function deleteNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an organization
     * 
     * Delete an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationResponse
     */
	public function deleteOrganization(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an action batch
     * 
     * Delete an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchResponse
     */
	public function deleteOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches/{actionBatchId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified adaptive policy ACL
     * 
     * Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse
     */
	public function deleteOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified adaptive policy group and any associated policies and references
     * 
     * Deletes the specified adaptive policy group and any associated policies and references
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse
     */
	public function deleteOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an Adaptive Policy
     * 
     * Delete an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse
     */
	public function deleteOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Revoke all access for a dashboard administrator within this organization
     * 
     * Revoke all access for a dashboard administrator within this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminResponse
     */
	public function deleteOrganizationAdmin(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins/{adminId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes an organization-wide alert config
     * 
     * Removes an organization-wide alert config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse
     */
	public function deleteOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a branding policy
     * 
     * Delete a branding policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyResponse
     */
	public function deleteOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete Custom Analytics Artifact
     * 
     * Delete Custom Analytics Artifact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactResponse
     */
	public function deleteOrganizationCameraCustomAnalyticsArtifact(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a configuration template
     * 
     * Remove a configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateResponse
     */
	public function deleteOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an early access feature opt-in
     * 
     * Delete an early access feature opt-in
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function deleteOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a monitored media server from this organization
     * 
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationInsightMonitoredMediaServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationInsightMonitoredMediaServerResponse
     */
	public function deleteOrganizationInsightMonitoredMediaServer(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationInsightMonitoredMediaServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationInsightMonitoredMediaServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationInsightMonitoredMediaServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationInsightMonitoredMediaServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a Policy Object.
     * 
     * Deletes a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse
     */
	public function deleteOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a Policy Object Group.
     * 
     * Deletes a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse
     */
	public function deleteOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a SAML IdP in your organization.
     * 
     * Remove a SAML IdP in your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpResponse
     */
	public function deleteOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps/{idpId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a SAML role
     * 
     * Remove a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleResponse
     */
	public function deleteOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles/{samlRoleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a user and all of its authentication methods.
     * 
     * Delete a user and all of its authentication methods.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserResponse
     */
	public function deleteOrganizationUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return a single device
     * 
     * Return a single device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse
     */
	public function getDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the uplink settings for an MX appliance
     * 
     * Return the uplink settings for an MX appliance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsResponse
     */
	public function getDeviceApplianceUplinksSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/uplinks/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceApplianceUplinksSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceApplianceUplinksSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return custom analytics settings for a camera
     * 
     * Return custom analytics settings for a camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsResponse
     */
	public function getDeviceCameraCustomAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/customAnalytics', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraCustomAnalytics200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns quality and retention settings for the given camera
     * 
     * Returns quality and retention settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse
     */
	public function getDeviceCameraQualityAndRetention(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/qualityAndRetention', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraQualityAndRetention200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns sense settings for a given camera
     * 
     * Returns sense settings for a given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseResponse
     */
	public function getDeviceCameraSense(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/sense', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraSense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the MV Sense object detection model list for the given camera
     * 
     * Returns the MV Sense object detection model list for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsResponse
     */
	public function getDeviceCameraSenseObjectDetectionModels(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/sense/objectDetectionModels', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraSenseObjectDetectionModels200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns video link to the specified camera
     * 
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkResponse
     */
	public function getDeviceCameraVideoLink(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/videoLink', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraVideoLink200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns video settings for the given camera
     * 
     * Returns video settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse
     */
	public function getDeviceCameraVideoSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/video/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraVideoSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns wireless profile assigned to the given camera
     * 
     * Returns wireless profile assigned to the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse
     */
	public function getDeviceCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraWirelessProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show the LAN Settings of a MG
     * 
     * Show the LAN Settings of a MG
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayLanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayLanResponse
     */
	public function getDeviceCellularGatewayLan(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayLanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayLanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellularGateway/lan', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayLanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayLanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCellularGatewayLan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the port forwarding rules for a single MG.
     * 
     * Returns the port forwarding rules for a single MG.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayPortForwardingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayPortForwardingRulesResponse
     */
	public function getDeviceCellularGatewayPortForwardingRules(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayPortForwardingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayPortForwardingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellularGateway/portForwardingRules', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayPortForwardingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularGatewayPortForwardingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCellularGatewayPortForwardingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the SIM and APN configurations for a cellular device.
     * 
     * Return the SIM and APN configurations for a cellular device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsResponse
     */
	public function getDeviceCellularSims(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellular/sims', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCellularSimsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCellularSims200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the management interface settings for a device
     * 
     * Return the management interface settings for a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceResponse
     */
	public function getDeviceManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/managementInterface', \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the sensor roles for a given sensor or camera device.
     * 
     * List the sensor roles for a given sensor or camera device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSensorRelationshipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSensorRelationshipsResponse
     */
	public function getDeviceSensorRelationships(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSensorRelationshipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSensorRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/sensor/relationships', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSensorRelationshipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSensorRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSensorRelationships200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSensorRelationships200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a switch port
     * 
     * Return a switch port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortResponse
     */
	public function getDeviceSwitchPort(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switch ports for a switch
     * 
     * List the switch ports for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsResponse
     */
	public function getDeviceSwitchPorts(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPorts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPorts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface for a switch
     * 
     * Return a layer 3 interface for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceResponse
     */
	public function getDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterface200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * 
     * Return a layer 3 interface DHCP configuration for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpResponse
     */
	public function getDeviceSwitchRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 interfaces for a switch
     * 
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesResponse
     */
	public function getDeviceSwitchRoutingInterfaces(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingInterfaces200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaces200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 static route for a switch
     * 
     * Return a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteResponse
     */
	public function getDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 static routes for a switch
     * 
     * List layer 3 static routes for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesResponse
     */
	public function getDeviceSwitchRoutingStaticRoutes(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingStaticRoutes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return warm spare configuration for a switch
     * 
     * Return warm spare configuration for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse
     */
	public function getDeviceSwitchWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/warmSpare', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the bluetooth settings for a wireless device
     * 
     * Return the bluetooth settings for a wireless device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse
     */
	public function getDeviceWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the radio settings of a device
     * 
     * Return the radio settings of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse
     */
	public function getDeviceWirelessRadioSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/radio/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessRadioSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a network
     * 
     * Return a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkResponse
     */
	public function getNetwork(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetwork200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the alert configuration for this network
     * 
     * Return the alert configuration for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsResponse
     */
	public function getNetworkAlertsSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/alerts/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAlertsSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAlertsSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the connectivity testing destinations for an MX network
     * 
     * Return the connectivity testing destinations for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceConnectivityMonitoringDestinationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceConnectivityMonitoringDestinationsResponse
     */
	public function getNetworkApplianceConnectivityMonitoringDestinations(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceConnectivityMonitoringDestinationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceConnectivityMonitoringDestinationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/connectivityMonitoringDestinations', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceConnectivityMonitoringDestinationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceConnectivityMonitoringDestinationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceConnectivityMonitoringDestinations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the content filtering settings for an MX network
     * 
     * Return the content filtering settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringResponse
     */
	public function getNetworkApplianceContentFiltering(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/contentFiltering', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceContentFiltering200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all available content filtering categories for an MX network
     * 
     * List all available content filtering categories for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringCategoriesResponse
     */
	public function getNetworkApplianceContentFilteringCategories(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/contentFiltering/categories', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceContentFilteringCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceContentFilteringCategories200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the cellular firewall rules for an MX network
     * 
     * Return the cellular firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesResponse
     */
	public function getNetworkApplianceFirewallCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/cellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * 
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceResponse
     */
	public function getNetworkApplianceFirewallFirewalledService(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the appliance services and their accessibility rules
     * 
     * List the appliance services and their accessibility rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesResponse
     */
	public function getNetworkApplianceFirewallFirewalledServices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/firewalledServices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallFirewalledServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallFirewalledServices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the inbound cellular firewall rules for an MX network
     * 
     * Return the inbound cellular firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse
     */
	public function getNetworkApplianceFirewallInboundCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the inbound firewall rules for an MX network
     * 
     * Return the inbound firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesResponse
     */
	public function getNetworkApplianceFirewallInboundFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundFirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallInboundFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L3 firewall rules for an MX network
     * 
     * Return the L3 firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesResponse
     */
	public function getNetworkApplianceFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the MX L7 firewall rules for an MX network
     * 
     * List the MX L7 firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesResponse
     */
	public function getNetworkApplianceFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * 
     * Return the L7 firewall application categories and their associated applications for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse
     */
	public function getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallL7FirewallRulesApplicationCategories200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * 
     * Return the 1:Many NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesResponse
     */
	public function getNetworkApplianceFirewallOneToManyNatRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToManyNatRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToManyNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * 
     * Return the 1:1 NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesResponse
     */
	public function getNetworkApplianceFirewallOneToOneNatRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToOneNatRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallOneToOneNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the port forwarding rules for an MX network
     * 
     * Return the port forwarding rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesResponse
     */
	public function getNetworkApplianceFirewallPortForwardingRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/portForwardingRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallPortForwardingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the firewall settings for this network
     * 
     * Return the firewall settings for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse
     */
	public function getNetworkApplianceFirewallSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceFirewallSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceFirewallSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return per-port VLAN settings for a single MX port.
     * 
     * Return per-port VLAN settings for a single MX port.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortResponse
     */
	public function getNetworkAppliancePort(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAppliancePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List per-port VLAN settings for all ports of a MX.
     * 
     * List per-port VLAN settings for all ports of a MX.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortsResponse
     */
	public function getNetworkAppliancePorts(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/ports', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAppliancePorts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePorts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a static delegated prefix from a network
     * 
     * Return a static delegated prefix from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticResponse
     */
	public function getNetworkAppliancePrefixesDelegatedStatic(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStatic200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List static delegated prefixes for a network
     * 
     * List static delegated prefixes for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticsResponse
     */
	public function getNetworkAppliancePrefixesDelegatedStatics(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/prefixes/delegated/statics', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStaticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAppliancePrefixesDelegatedStatics200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkAppliancePrefixesDelegatedStatics200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all supported intrusion settings for an MX network
     * 
     * Returns all supported intrusion settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityIntrusionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityIntrusionResponse
     */
	public function getNetworkApplianceSecurityIntrusion(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityIntrusionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityIntrusionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/security/intrusion', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityIntrusionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityIntrusionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSecurityIntrusion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all supported malware settings for an MX network
     * 
     * Returns all supported malware settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityMalwareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityMalwareResponse
     */
	public function getNetworkApplianceSecurityMalware(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityMalwareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityMalwareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/security/malware', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityMalwareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSecurityMalwareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSecurityMalware200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the appliance settings for a network
     * 
     * Return the appliance settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsResponse
     */
	public function getNetworkApplianceSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return single LAN configuration
     * 
     * Return single LAN configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSingleLanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSingleLanResponse
     */
	public function getNetworkApplianceSingleLan(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSingleLanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSingleLanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/singleLan', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSingleLanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSingleLanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSingleLan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSingleLan200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single MX SSID
     * 
     * Return a single MX SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidResponse
     */
	public function getNetworkApplianceSsid(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/ssids/{number}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSsid200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsid200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the MX SSIDs in a network
     * 
     * List the MX SSIDs in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidsResponse
     */
	public function getNetworkApplianceSsids(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/ssids', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsidsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceSsids200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceSsids200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a static route for an MX or teleworker network
     * 
     * Return a static route for an MX or teleworker network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRouteResponse
     */
	public function getNetworkApplianceStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the static routes for an MX or teleworker network
     * 
     * List the static routes for an MX or teleworker network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRoutesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRoutesResponse
     */
	public function getNetworkApplianceStaticRoutes(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRoutesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRoutesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRoutesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceStaticRoutesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceStaticRoutes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display the traffic shaping settings for an MX network
     * 
     * Display the traffic shaping settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingResponse
     */
	public function getNetworkApplianceTrafficShaping(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceTrafficShaping200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a custom performance class for an MX network
     * 
     * Return a custom performance class for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassResponse
     */
	public function getNetworkApplianceTrafficShapingCustomPerformanceClass(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceTrafficShapingCustomPerformanceClass200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all custom performance classes for an MX network
     * 
     * List all custom performance classes for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse
     */
	public function getNetworkApplianceTrafficShapingCustomPerformanceClasses(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceTrafficShapingCustomPerformanceClasses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display the traffic shaping settings rules for an MX network
     * 
     * Display the traffic shaping settings rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRulesResponse
     */
	public function getNetworkApplianceTrafficShapingRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/rules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceTrafficShapingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the uplink bandwidth settings for your MX network.
     * 
     * Returns the uplink bandwidth settings for your MX network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkBandwidthRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkBandwidthResponse
     */
	public function getNetworkApplianceTrafficShapingUplinkBandwidth(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkBandwidthRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkBandwidthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkBandwidthRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkBandwidthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show uplink selection settings for an MX network
     * 
     * Show uplink selection settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkSelectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkSelectionResponse
     */
	public function getNetworkApplianceTrafficShapingUplinkSelection(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkSelectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkSelectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/uplinkSelection', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkSelectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkSelectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a VLAN
     * 
     * Return a VLAN
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlanResponse
     */
	public function getNetworkApplianceVlan(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans/{vlanId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceVlan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlan200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the VLANs for an MX network
     * 
     * List the VLANs for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansResponse
     */
	public function getNetworkApplianceVlans(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceVlans200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlans200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the enabled status of VLANs for the network
     * 
     * Returns the enabled status of VLANs for the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsResponse
     */
	public function getNetworkApplianceVlansSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVlansSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceVlansSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a Hub BGP Configuration
     * 
     * Return a Hub BGP Configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnBgpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnBgpResponse
     */
	public function getNetworkApplianceVpnBgp(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnBgpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnBgpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vpn/bgp', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnBgpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnBgpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceVpnBgp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the site-to-site VPN settings of a network
     * 
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnSiteToSiteVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnSiteToSiteVpnResponse
     */
	public function getNetworkApplianceVpnSiteToSiteVpn(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnSiteToSiteVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnSiteToSiteVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vpn/siteToSiteVpn', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnSiteToSiteVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnSiteToSiteVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return MX warm spare settings
     * 
     * Return MX warm spare settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareResponse
     */
	public function getNetworkApplianceWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/warmSpare', \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkApplianceWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkApplianceWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single quality retention profile
     * 
     * Retrieve a single quality retention profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse
     */
	public function getNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the quality retention profiles for this network
     * 
     * List the quality retention profiles for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse
     */
	public function getNetworkCameraQualityRetentionProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraQualityRetentionProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all camera recording schedules.
     * 
     * Returns a list of all camera recording schedules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesResponse
     */
	public function getNetworkCameraSchedules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/schedules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraSchedules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single camera wireless profile.
     * 
     * Retrieve a single camera wireless profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse
     */
	public function getNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the camera wireless profiles for this network.
     * 
     * List the camera wireless profiles for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse
     */
	public function getNetworkCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraWirelessProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the connectivity testing destinations for an MG network
     * 
     * Return the connectivity testing destinations for an MG network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayConnectivityMonitoringDestinationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayConnectivityMonitoringDestinationsResponse
     */
	public function getNetworkCellularGatewayConnectivityMonitoringDestinations(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayConnectivityMonitoringDestinationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayConnectivityMonitoringDestinationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayConnectivityMonitoringDestinationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayConnectivityMonitoringDestinationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCellularGatewayConnectivityMonitoringDestinations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List common DHCP settings of MGs
     * 
     * List common DHCP settings of MGs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayDhcpResponse
     */
	public function getNetworkCellularGatewayDhcp(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/dhcp', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCellularGatewayDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayDhcp200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the subnet pool and mask configured for MGs in the network.
     * 
     * Return the subnet pool and mask configured for MGs in the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewaySubnetPoolRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewaySubnetPoolResponse
     */
	public function getNetworkCellularGatewaySubnetPool(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewaySubnetPoolRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewaySubnetPoolResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/subnetPool', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewaySubnetPoolRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewaySubnetPoolResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCellularGatewaySubnetPool200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the uplink settings for your MG network.
     * 
     * Returns the uplink settings for your MG network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayUplinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayUplinkResponse
     */
	public function getNetworkCellularGatewayUplink(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayUplinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayUplinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/uplink', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayUplinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCellularGatewayUplinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCellularGatewayUplink200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the policy assigned to a client on the network
     * 
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientPolicyResponse
     */
	public function getNetworkClientPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/policy', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the splash authorization for a client, for each SSID they've associated with through splash
     * 
     * Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientSplashAuthorizationStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientSplashAuthorizationStatusResponse
     */
	public function getNetworkClientSplashAuthorizationStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientSplashAuthorizationStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientSplashAuthorizationStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientSplashAuthorizationStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientSplashAuthorizationStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientSplashAuthorizationStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices in a network
     * 
     * List the devices in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse
     */
	public function getNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get firmware upgrade information for a network
     * 
     * Get firmware upgrade information for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesResponse
     */
	public function getNetworkFirmwareUpgrades(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFirmwareUpgrades200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgrades200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Staged Upgrade Event from a network
     * 
     * Get the Staged Upgrade Event from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedEventsResponse
     */
	public function getNetworkFirmwareUpgradesStagedEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/events', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedEvents200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Staged Upgrade Group from a network
     * 
     * Get a Staged Upgrade Group from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupResponse
     */
	public function getNetworkFirmwareUpgradesStagedGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of Staged Upgrade Groups in a network
     * 
     * List of Staged Upgrade Groups in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupsResponse
     */
	public function getNetworkFirmwareUpgradesStagedGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/groups', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFirmwareUpgradesStagedGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedGroups200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Order of Staged Upgrade Groups in a network
     * 
     * Order of Staged Upgrade Groups in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedStagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedStagesResponse
     */
	public function getNetworkFirmwareUpgradesStagedStages(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedStagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedStagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/stages', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedStagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedStagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFirmwareUpgradesStagedStages200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkFirmwareUpgradesStagedStages200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a floor plan by ID
     * 
     * Find a floor plan by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlanResponse
     */
	public function getNetworkFloorPlan(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/floorPlans/{floorPlanId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFloorPlan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the floor plans that belong to your network
     * 
     * List the floor plans that belong to your network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlansResponse
     */
	public function getNetworkFloorPlans(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/floorPlans', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlansRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFloorPlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFloorPlans200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the group policies in a network
     * 
     * List the group policies in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPoliciesResponse
     */
	public function getNetworkGroupPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/groupPolicies', \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkGroupPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display a group policy
     * 
     * Display a group policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPolicyResponse
     */
	public function getNetworkGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/groupPolicies/{groupPolicyId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkGroupPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return all global alerts on this network
     * 
     * Return all global alerts on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkHealthAlertsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkHealthAlertsResponse
     */
	public function getNetworkHealthAlerts(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkHealthAlertsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkHealthAlertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/health/alerts', \OpenAPI\OpenAPI\Models\Operations\GetNetworkHealthAlertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkHealthAlertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkHealthAlerts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkHealthAlerts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * 
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserResponse
     */
	public function getNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkMerakiAuthUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * 
     * List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersResponse
     */
	public function getNetworkMerakiAuthUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkMerakiAuthUsers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkMerakiAuthUsers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an MQTT broker
     * 
     * Return an MQTT broker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokerResponse
     */
	public function getNetworkMqttBroker(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkMqttBroker200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the MQTT brokers for this network
     * 
     * List the MQTT brokers for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokersResponse
     */
	public function getNetworkMqttBrokers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/mqttBrokers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkMqttBrokersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkMqttBrokers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the NetFlow traffic reporting settings for a network
     * 
     * Return the NetFlow traffic reporting settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetflowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetflowResponse
     */
	public function getNetworkNetflow(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetflowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetflowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/netflow', \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkNetflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkNetflow200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier
     * 
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key "0" containing the applicable keys.
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/piiKeys
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysResponse
     */
	public function getNetworkPiiPiiKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/piiKeys', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiPiiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiPiiKeys200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a PII request
     * 
     * Return a PII request
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests/{requestId}
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestResponse
     */
	public function getNetworkPiiRequest(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests/{requestId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiRequest200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the PII requests for this network or organization
     * 
     * List the PII requests for this network or organization
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/requests
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsResponse
     */
	public function getNetworkPiiRequests(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/requests', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiRequests200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
     * 
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/smDevicesForKey
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyResponse
     */
	public function getNetworkPiiSmDevicesForKey(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/smDevicesForKey', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmDevicesForKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiSmDevicesForKey200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
     * 
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.
     * 
     * ## ALTERNATE PATH
     * 
     * ```
     * /organizations/{organizationId}/pii/smOwnersForKey
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyResponse
     */
	public function getNetworkPiiSmOwnersForKey(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/pii/smOwnersForKey', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPiiSmOwnersForKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPiiSmOwnersForKey200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get policies for all clients with policies
     * 
     * Get policies for all clients with policies
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClientRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClientResponse
     */
	public function getNetworkPoliciesByClient(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClientRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/policies/byClient', \OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClientRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkPoliciesByClient200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkPoliciesByClient200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show details of a sensor alert profile for a network.
     * 
     * Show details of a sensor alert profile for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileResponse
     */
	public function getNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSensorAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all sensor alert profiles for a network.
     * 
     * Lists all sensor alert profiles for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesResponse
     */
	public function getNetworkSensorAlertsProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSensorAlertsProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the sensor roles for devices in a given network
     * 
     * List the sensor roles for devices in a given network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorRelationshipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorRelationshipsResponse
     */
	public function getNetworkSensorRelationships(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorRelationshipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/relationships', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorRelationshipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSensorRelationships200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorRelationships200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the settings for a network
     * 
     * Return the settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsResponse
     */
	public function getNetworkSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bypass activation lock attempt status
     * 
     * Bypass activation lock attempt status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse
     */
	public function getNetworkSmBypassActivationLockAttempt(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmBypassActivationLockAttempt200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the certs on a device
     * 
     * List the certs on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse
     */
	public function getNetworkSmDeviceCerts(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/certs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceCerts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCerts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the installed profiles associated with a device
     * 
     * Get the installed profiles associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse
     */
	public function getNetworkSmDeviceDeviceProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDeviceProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the network adapters of a device
     * 
     * List the network adapters of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse
     */
	public function getNetworkSmDeviceNetworkAdapters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/networkAdapters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceNetworkAdapters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdapters200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the restrictions on a device
     * 
     * List the restrictions on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse
     */
	public function getNetworkSmDeviceRestrictions(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/restrictions', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceRestrictions200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the security centers on a device
     * 
     * List the security centers on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse
     */
	public function getNetworkSmDeviceSecurityCenters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/securityCenters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceSecurityCenters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCenters200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of softwares associated with a device
     * 
     * Get a list of softwares associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse
     */
	public function getNetworkSmDeviceSoftwares(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/softwares', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceSoftwares200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwares200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the saved SSID names on a device
     * 
     * List the saved SSID names on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse
     */
	public function getNetworkSmDeviceWlanLists(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/wlanLists', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceWlanLists200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanLists200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
     */
	public function getNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all profiles in a network
     * 
     * List all profiles in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
     */
	public function getNetworkSmProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/profiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a target group
     * 
     * Return a target group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupResponse
     */
	public function getNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups/{targetGroupId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmTargetGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the target groups in this network
     * 
     * List the target groups in this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsResponse
     */
	public function getNetworkSmTargetGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmTargetGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Trusted Access Configs
     * 
     * List Trusted Access Configs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsResponse
     */
	public function getNetworkSmTrustedAccessConfigs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/trustedAccessConfigs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmTrustedAccessConfigs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List User Access Devices and its Trusted Access Connections
     * 
     * List User Access Devices and its Trusted Access Connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesResponse
     */
	public function getNetworkSmUserAccessDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/userAccessDevices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserAccessDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the profiles associated with a user
     * 
     * Get the profiles associated with a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse
     */
	public function getNetworkSmUserDeviceProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/users/{userId}/deviceProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserDeviceProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of softwares associated with a user
     * 
     * Get a list of softwares associated with a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse
     */
	public function getNetworkSmUserSoftwares(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/users/{userId}/softwares', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserSoftwares200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwares200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the owners in an SM network with various specified fields and filters
     * 
     * List the owners in an SM network with various specified fields and filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse
     */
	public function getNetworkSmUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/users', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUsers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the SNMP settings for a network
     * 
     * Return the SNMP settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSnmpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSnmpResponse
     */
	public function getNetworkSnmp(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSnmpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSnmpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/snmp', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSnmpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSnmpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSnmp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the access control lists for a MS network
     * 
     * Return the access control lists for a MS network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsResponse
     */
	public function getNetworkSwitchAccessControlLists(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessControlLists', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAccessControlLists200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlLists200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the access policies for a switch network
     * 
     * List the access policies for a switch network. Only returns access policies with 'my RADIUS server' as authentication method
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesResponse
     */
	public function getNetworkSwitchAccessPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAccessPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicies200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a specific access policy for a switch network
     * 
     * Return a specific access policy for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyResponse
     */
	public function getNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAccessPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the switch alternate management interface for the network
     * 
     * Return the switch alternate management interface for the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceResponse
     */
	public function getNetworkSwitchAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the DHCP server settings
     * 
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyResponse
     */
	public function getNetworkSwitchDhcpServerPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpServerPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * 
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse
     */
	public function getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * 
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse
     */
	public function getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * 
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenResponse
     */
	public function getNetworkSwitchDhcpV4ServersSeen(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcp/v4/servers/seen', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpV4ServersSeen200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the DSCP to CoS mappings
     * 
     * Return the DSCP to CoS mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsResponse
     */
	public function getNetworkSwitchDscpToCosMappings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dscpToCosMappings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDscpToCosMappings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List link aggregation groups
     * 
     * List link aggregation groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsResponse
     */
	public function getNetworkSwitchLinkAggregations(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchLinkAggregations200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the MTU configuration
     * 
     * Return the MTU configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuResponse
     */
	public function getNetworkSwitchMtu(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/mtu', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchMtu200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List switch port schedules
     * 
     * List switch port schedules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesResponse
     */
	public function getNetworkSwitchPortSchedules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchPortSchedules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a quality of service rule
     * 
     * Return a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse
     */
	public function getNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List quality of service rules
     * 
     * List quality of service rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse
     */
	public function getNetworkSwitchQosRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse
     */
	public function getNetworkSwitchQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return multicast settings for a network
     * 
     * Return multicast settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastResponse
     */
	public function getNetworkSwitchRoutingMulticast(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingMulticast200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a multicast rendezvous point
     * 
     * Return a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function getNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingMulticastRendezvousPoint200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List multicast rendezvous points
     * 
     * List multicast rendezvous points
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsResponse
     */
	public function getNetworkSwitchRoutingMulticastRendezvousPoints(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingMulticastRendezvousPoints200ApplicationJSONArrays = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<array<string, mixed>>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return layer 3 OSPF routing configuration
     * 
     * Return layer 3 OSPF routing configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfResponse
     */
	public function getNetworkSwitchRoutingOspf(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/ospf', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingOspf200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the switch network settings
     * 
     * Returns the switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
     */
	public function getNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show a switch stack
     * 
     * Show a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackResponse
     */
	public function getNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStack200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStack200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface from a switch stack
     * 
     * Return a layer 3 interface from a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceResponse
     */
	public function getNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * 
     * Return a layer 3 interface DHCP configuration for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpResponse
     */
	public function getNetworkSwitchStackRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 interfaces for a switch stack
     * 
     * List layer 3 interfaces for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesResponse
     */
	public function getNetworkSwitchStackRoutingInterfaces(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingInterfaces200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 static route for a switch stack
     * 
     * Return a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function getNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 static routes for a switch stack
     * 
     * List layer 3 static routes for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesResponse
     */
	public function getNetworkSwitchStackRoutingStaticRoutes(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingStaticRoutes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switch stacks in a network
     * 
     * List the switch stacks in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksResponse
     */
	public function getNetworkSwitchStacks(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStacks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the storm control configuration for a switch network
     * 
     * Return the storm control configuration for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlResponse
     */
	public function getNetworkSwitchStormControl(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stormControl', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStormControl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControl200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns STP settings
     * 
     * Returns STP settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpResponse
     */
	public function getNetworkSwitchStp(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stp', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the syslog servers for a network
     * 
     * List the syslog servers for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSyslogServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSyslogServersResponse
     */
	public function getNetworkSyslogServers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSyslogServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSyslogServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/syslogServers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSyslogServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSyslogServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSyslogServers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSyslogServers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the traffic analysis settings for a network
     * 
     * Return the traffic analysis settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficAnalysisRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficAnalysisResponse
     */
	public function getNetworkTrafficAnalysis(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficAnalysisRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficAnalysisResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/trafficAnalysis', \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficAnalysisRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficAnalysisResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkTrafficAnalysis200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the application categories for traffic shaping rules.
     * 
     * Returns the application categories for traffic shaping rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingApplicationCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingApplicationCategoriesResponse
     */
	public function getNetworkTrafficShapingApplicationCategories(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingApplicationCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingApplicationCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/trafficShaping/applicationCategories', \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingApplicationCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingApplicationCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkTrafficShapingApplicationCategories200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * 
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingDscpTaggingOptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingDscpTaggingOptionsResponse
     */
	public function getNetworkTrafficShapingDscpTaggingOptions(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingDscpTaggingOptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingDscpTaggingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/trafficShaping/dscpTaggingOptions', \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingDscpTaggingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficShapingDscpTaggingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkTrafficShapingDscpTaggingOptions200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an HTTP server for a network
     * 
     * Return an HTTP server for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerResponse
     */
	public function getNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers/{httpServerId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksHttpServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the HTTP servers for a network
     * 
     * List the HTTP servers for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersResponse
     */
	public function getNetworkWebhooksHttpServers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksHttpServers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksHttpServers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the webhook payload template for a network
     * 
     * Get the webhook payload template for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateResponse
     */
	public function getNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksPayloadTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the webhook payload templates for a network
     * 
     * List the webhook payload templates for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesResponse
     */
	public function getNetworkWebhooksPayloadTemplates(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksPayloadTemplates200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksPayloadTemplates200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the status of a webhook test for a network
     * 
     * Return the status of a webhook test for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestResponse
     */
	public function getNetworkWebhooksWebhookTest(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/webhookTests/{webhookTestId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWebhooksWebhookTest200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWebhooksWebhookTest200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return alternate management interface and devices with IP assigned
     * 
     * Return alternate management interface and devices with IP assigned
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceResponse
     */
	public function getNetworkWirelessAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the billing settings of this network
     * 
     * Return the billing settings of this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingResponse
     */
	public function getNetworkWirelessBilling(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/billing', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessBilling200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
     * 
     * Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse
     */
	public function getNetworkWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a RF profile
     * 
     * Return a RF profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileResponse
     */
	public function getNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessRfProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the non-basic RF profiles for this network
     * 
     * List the non-basic RF profiles for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesResponse
     */
	public function getNetworkWirelessRfProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessRfProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the wireless settings for a network
     * 
     * Return the wireless settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse
     */
	public function getNetworkWirelessSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single MR SSID
     * 
     * Return a single MR SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidResponse
     */
	public function getNetworkWirelessSsid(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsid200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the Bonjour forwarding setting and rules for the SSID
     * 
     * List the Bonjour forwarding setting and rules for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingResponse
     */
	public function getNetworkWirelessSsidBonjourForwarding(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidBonjourForwarding200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the device type group policies for the SSID
     * 
     * List the device type group policies for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
     */
	public function getNetworkWirelessSsidDeviceTypeGroupPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidDeviceTypeGroupPolicies200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the EAP overridden parameters for an SSID
     * 
     * Return the EAP overridden parameters for an SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideResponse
     */
	public function getNetworkWirelessSsidEapOverride(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/eapOverride', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidEapOverride200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverride200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * 
     * Return the L3 firewall rules for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse
     */
	public function getNetworkWirelessSsidFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * 
     * Return the L7 firewall rules for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse
     */
	public function getNetworkWirelessSsidFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Hotspot 2.0 settings for an SSID
     * 
     * Return the Hotspot 2.0 settings for an SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Response
     */
	public function getNetworkWirelessSsidHotspot20(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/hotspot20', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidHotspot20200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an Identity PSK
     * 
     * Return an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskResponse
     */
	public function getNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidIdentityPsk200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsk200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Identity PSKs in a wireless network
     * 
     * List all Identity PSKs in a wireless network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksResponse
     */
	public function getNetworkWirelessSsidIdentityPsks(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidIdentityPsks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsks200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the outage schedule for the SSID
     * 
     * List the outage schedule for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesResponse
     */
	public function getNetworkWirelessSsidSchedules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/schedules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidSchedules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display the splash page settings for the given SSID
     * 
     * Display the splash page settings for the given SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse
     */
	public function getNetworkWirelessSsidSplashSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/splash/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidSplashSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display the traffic shaping settings for a SSID on an MR network
     * 
     * Display the traffic shaping settings for a SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesResponse
     */
	public function getNetworkWirelessSsidTrafficShapingRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidTrafficShapingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the VPN settings for the SSID.
     * 
     * List the VPN settings for the SSID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnResponse
     */
	public function getNetworkWirelessSsidVpn(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/vpn', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the MR SSIDs in a network
     * 
     * List the MR SSIDs in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsResponse
     */
	public function getNetworkWirelessSsids(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsids200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an organization
     * 
     * Return an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
     */
	public function getOrganization(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganization200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an action batch
     * 
     * Return an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchResponse
     */
	public function getOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches/{actionBatchId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationActionBatch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatch200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the list of action batches in the organization
     * 
     * Return the list of action batches in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesResponse
     */
	public function getOrganizationActionBatches(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationActionBatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationActionBatches200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the adaptive policy ACL information
     * 
     * Returns the adaptive policy ACL information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse
     */
	public function getOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policy ACLs in a organization
     * 
     * List adaptive policy ACLs in a organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse
     */
	public function getOrganizationAdaptivePolicyAcls(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyAclsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyAcls200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns an adaptive policy group
     * 
     * Returns an adaptive policy group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse
     */
	public function getOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policy groups in a organization
     * 
     * List adaptive policy groups in a organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse
     */
	public function getOrganizationAdaptivePolicyGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List adaptive policies in an organization
     * 
     * List adaptive policies in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse
     */
	public function getOrganizationAdaptivePolicyPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an adaptive policy
     * 
     * Return an adaptive policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse
     */
	public function getOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicyPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns global adaptive policy settings in an organization
     * 
     * Returns global adaptive policy settings in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
     */
	public function getOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the dashboard administrators in this organization
     * 
     * List the dashboard administrators in this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsResponse
     */
	public function getOrganizationAdmins(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAdminsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAdmins200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all organization-wide alert configurations
     * 
     * List all organization-wide alert configurations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse
     */
	public function getOrganizationAlertsProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAlertsProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all supported intrusion settings for an organization
     * 
     * Returns all supported intrusion settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityIntrusionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityIntrusionResponse
     */
	public function getOrganizationApplianceSecurityIntrusion(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityIntrusionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityIntrusionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/security/intrusion', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityIntrusionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceSecurityIntrusionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceSecurityIntrusion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the third party VPN peers for an organization
     * 
     * Return the third party VPN peers for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVPNThirdPartyVPNPeersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVPNThirdPartyVPNPeersResponse
     */
	public function getOrganizationApplianceVPNThirdPartyVPNPeers(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVPNThirdPartyVPNPeersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVPNThirdPartyVPNPeersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVPNThirdPartyVPNPeersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVPNThirdPartyVPNPeersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the firewall rules for an organization's site-to-site VPN
     * 
     * Return the firewall rules for an organization's site-to-site VPN
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnVpnFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnVpnFirewallRulesResponse
     */
	public function getOrganizationApplianceVpnVpnFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnVpnFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnVpnFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnVpnFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationApplianceVpnVpnFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationApplianceVpnVpnFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the branding policies of an organization
     * 
     * List the branding policies of an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesResponse
     */
	public function getOrganizationBrandingPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationBrandingPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicies200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the branding policy IDs of an organization in priority order
     * 
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesResponse
     */
	public function getOrganizationBrandingPoliciesPriorities(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/priorities', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPrioritiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPoliciesPriorities200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a branding policy
     * 
     * Return a branding policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyResponse
     */
	public function getOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationBrandingPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationBrandingPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Custom Analytics Artifact
     * 
     * Get Custom Analytics Artifact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactResponse
     */
	public function getOrganizationCameraCustomAnalyticsArtifact(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCameraCustomAnalyticsArtifact200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Custom Analytics Artifacts
     * 
     * List Custom Analytics Artifacts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsResponse
     */
	public function getOrganizationCameraCustomAnalyticsArtifacts(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCameraCustomAnalyticsArtifacts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch onboarding status of cameras
     * 
     * Fetch onboarding status of cameras
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse
     */
	public function getOrganizationCameraOnboardingStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/onboarding/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCameraOnboardingStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client details in an organization
     * 
     * Return the client details in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchResponse
     */
	public function getOrganizationClientsSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clients/search', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationClientsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationClientsSearch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single configuration template
     * 
     * Return a single configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateResponse
     */
	public function getOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a switch profile port
     * 
     * Return a switch profile port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse
     */
	public function getOrganizationConfigTemplateSwitchProfilePort(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return all the ports of a switch profile
     * 
     * Return all the ports of a switch profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse
     */
	public function getOrganizationConfigTemplateSwitchProfilePorts(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switch profiles for your switch template configuration
     * 
     * List the switch profiles for your switch template configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse
     */
	public function getOrganizationConfigTemplateSwitchProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfiles200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the configuration templates for this organization
     * 
     * List the configuration templates for this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesResponse
     */
	public function getOrganizationConfigTemplates(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplates200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices in an organization
     * 
     * List the devices in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
     */
	public function getOrganizationDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the available early access features for organization
     * 
     * List the available early access features for organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesResponse
     */
	public function getOrganizationEarlyAccessFeatures(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationEarlyAccessFeatures200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show an early access feature opt-in for an organization
     * 
     * Show an early access feature opt-in for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function getOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationEarlyAccessFeaturesOptIn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the early access feature opt-ins for an organization
     * 
     * List the early access feature opt-ins for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsResponse
     */
	public function getOrganizationEarlyAccessFeaturesOptIns(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationEarlyAccessFeaturesOptInsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationEarlyAccessFeaturesOptIns200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get firmware upgrade information for an organization
     * 
     * Get firmware upgrade information for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesResponse
     */
	public function getOrganizationFirmwareUpgrades(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/firmware/upgrades', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationFirmwareUpgrades200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgrades200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get firmware upgrade status for the filtered devices
     * 
     * Get firmware upgrade status for the filtered devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceResponse
     */
	public function getOrganizationFirmwareUpgradesByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/firmware/upgrades/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationFirmwareUpgradesByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationFirmwareUpgradesByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Insight tracked applications
     * 
     * List all Insight tracked applications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightApplicationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightApplicationsResponse
     */
	public function getOrganizationInsightApplications(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightApplicationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightApplicationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/insight/applications', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightApplicationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightApplicationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInsightApplications200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightApplications200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a monitored media server for this organization
     * 
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServerResponse
     */
	public function getOrganizationInsightMonitoredMediaServer(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInsightMonitoredMediaServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the monitored media servers for this organization
     * 
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServersResponse
     */
	public function getOrganizationInsightMonitoredMediaServers(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/insight/monitoredMediaServers', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInsightMonitoredMediaServers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInsightMonitoredMediaServers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single device from the inventory of an organization
     * 
     * Return a single device from the inventory of an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse
     */
	public function getOrganizationInventoryDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevice200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the device inventory for an organization
     * 
     * Return the device inventory for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse
     */
	public function getOrganizationInventoryDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/devices', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check the status of a committed Import operation
     * 
     * Check the status of a committed Import operation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse
     */
	public function getOrganizationInventoryOnboardingCloudMonitoringImports(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of networks eligible for adding cloud monitored device
     * 
     * Returns list of networks eligible for adding cloud monitored device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse
     */
	public function getOrganizationInventoryOnboardingCloudMonitoringNetworks(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display a license
     * 
     * Display a license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse
     */
	public function getOrganizationLicense(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/{licenseId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicense200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the licenses for an organization
     * 
     * List the licenses for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse
     */
	public function getOrganizationLicenses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicenses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicenses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the licenses in a coterm organization
     * 
     * List the licenses in a coterm organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicensesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicensesResponse
     */
	public function getOrganizationLicensingCotermLicenses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicensesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicensesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licensing/coterm/licenses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicensesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicensesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicensesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLicensingCotermLicenses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicenses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the login security settings for an organization.
     * 
     * Returns the login security settings for an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityResponse
     */
	public function getOrganizationLoginSecurity(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/loginSecurity', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationLoginSecurity200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationLoginSecurity200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the networks that the user has privileges on in an organization
     * 
     * List the networks that the user has privileges on in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse
     */
	public function getOrganizationNetworks(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationNetworks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworks200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows details of a Policy Object.
     * 
     * Shows details of a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse
     */
	public function getOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObject200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Policy Objects belonging to the organization.
     * 
     * Lists Policy Objects belonging to the organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse
     */
	public function getOrganizationPolicyObjects(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjects200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows details of a Policy Object Group.
     * 
     * Shows details of a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse
     */
	public function getOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjectsGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Policy Object Groups belonging to the organization.
     * 
     * Lists Policy Object Groups belonging to the organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse
     */
	public function getOrganizationPolicyObjectsGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationPolicyObjectsGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationPolicyObjectsGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the SAML SSO enabled settings for an organization.
     * 
     * Returns the SAML SSO enabled settings for an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlResponse
     */
	public function getOrganizationSaml(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSaml200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSaml200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a SAML IdP from your organization.
     * 
     * Get a SAML IdP from your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpResponse
     */
	public function getOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps/{idpId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlIdp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdp200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the SAML IdPs in your organization.
     * 
     * List the SAML IdPs in your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsResponse
     */
	public function getOrganizationSamlIdps(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdpsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlIdps200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlIdps200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a SAML role
     * 
     * Return a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleResponse
     */
	public function getOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles/{samlRoleId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlRole200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the SAML roles for this organization
     * 
     * List the SAML roles for this organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesResponse
     */
	public function getOrganizationSamlRoles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSamlRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSamlRoles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the organization's APNS certificate
     * 
     * Get the organization's APNS certificate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertResponse
     */
	public function getOrganizationSmApnsCert(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sm/apnsCert', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSmApnsCert200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCert200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * 
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountResponse
     */
	public function getOrganizationSmVppAccount(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sm/vppAccounts/{vppAccountId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSmVppAccount200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccount200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the VPP accounts in the organization
     * 
     * List the VPP accounts in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsResponse
     */
	public function getOrganizationSmVppAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sm/vppAccounts', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSmVppAccounts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccounts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the SNMP settings for an organization
     * 
     * Return the SNMP settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpResponse
     */
	public function getOrganizationSnmp(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/snmp', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSnmpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSnmp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switchports in an organization by switch
     * 
     * List the switchports in an organization by switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchResponse
     */
	public function getOrganizationSwitchPortsBySwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/switch/ports/bySwitch', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSwitchPortsBySwitch200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitch200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Endpoint to see power status for wireless devices
     * 
     * Endpoint to see power status for wireless devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
     */
	public function getOrganizationWirelessDevicesEthernetStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/wireless/devices/ethernet/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the organizations that the user has privileges on
     * 
     * List the organizations that the user has privileges on
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse
     */
	public function getOrganizations(
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizations200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizations200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lock a set of devices
     * 
     * Lock a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
     */
	public function lockNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/lock', \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lockNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add, delete, or update the tags of a set of devices
     * 
     * Add, delete, or update the tags of a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse
     */
	public function modifyNetworkSmDevicesTags(
        \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/modifyTags', \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->modifyNetworkSmDevicesTags200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTags200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move a set of devices to a new network
     * 
     * Move a set of devices to a new network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse
     */
	public function moveNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/move', \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move licenses to another organization
     * 
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesResponse
     */
	public function moveOrganizationLicenses(
        \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/move', \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveOrganizationLicenses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicenses200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move SM seats to another organization
     * 
     * Move SM seats to another organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse
     */
	public function moveOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/moveSeats', \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensesSeats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a license to a different organization (coterm only)
     * 
     * Moves a license to a different organization (coterm only)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensingCotermLicensesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensingCotermLicensesResponse
     */
	public function moveOrganizationLicensingCotermLicenses(
        \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensingCotermLicensesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensingCotermLicensesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licensing/coterm/licenses/move', \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensingCotermLicensesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensingCotermLicensesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveOrganizationLicensingCotermLicenses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveOrganizationLicensingCotermLicenses200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provisions a client with a name and policy
     * 
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProvisionNetworkClientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProvisionNetworkClientsResponse
     */
	public function provisionNetworkClients(
        \OpenAPI\OpenAPI\Models\Operations\ProvisionNetworkClientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProvisionNetworkClientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/provision', \OpenAPI\OpenAPI\Models\Operations\ProvisionNetworkClientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProvisionNetworkClientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->provisionNetworkClients201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh the details of a device
     * 
     * Refresh the details of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
     */
	public function refreshNetworkSmDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/refreshDetails', \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Release a list of claimed devices from an organization.
     * 
     * Release a list of claimed devices from an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryResponse
     */
	public function releaseFromOrganizationInventory(
        \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory/release', \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReleaseFromOrganizationInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->releaseFromOrganizationInventory200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a single device
     * 
     * Remove a single device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesResponse
     */
	public function removeNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/remove', \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a switch from a stack
     * 
     * Remove a switch from a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackResponse
     */
	public function removeNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/remove', \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeNetworkSwitchStack200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renew SM seats of a license
     * 
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse
     */
	public function renewOrganizationLicensesSeats(
        \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/renewSeats', \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->renewOrganizationLicensesSeats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RenewOrganizationLicensesSeats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rollback a Staged Upgrade Event for a network
     * 
     * Rollback a Staged Upgrade Event for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RollbacksNetworkFirmwareUpgradesStagedEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RollbacksNetworkFirmwareUpgradesStagedEventsResponse
     */
	public function rollbacksNetworkFirmwareUpgradesStagedEvents(
        \OpenAPI\OpenAPI\Models\Operations\RollbacksNetworkFirmwareUpgradesStagedEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RollbacksNetworkFirmwareUpgradesStagedEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks', \OpenAPI\OpenAPI\Models\Operations\RollbacksNetworkFirmwareUpgradesStagedEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RollbacksNetworkFirmwareUpgradesStagedEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Split a combined network into individual networks for each type of device
     * 
     * Split a combined network into individual networks for each type of device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SplitNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SplitNetworkResponse
     */
	public function splitNetwork(
        \OpenAPI\OpenAPI\Models\Operations\SplitNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SplitNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/split', \OpenAPI\OpenAPI\Models\Operations\SplitNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SplitNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->splitNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SplitNetwork200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Swap MX primary and warm spare appliances
     * 
     * Swap MX primary and warm spare appliances
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareResponse
     */
	public function swapNetworkApplianceWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/warmSpare/swap', \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SwapNetworkApplianceWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->swapNetworkApplianceWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unbind a network from a template.
     * 
     * Unbind a network from a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkResponse
     */
	public function unbindNetwork(
        \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/unbind', \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unbindNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UnbindNetwork200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unenroll a device
     * 
     * Unenroll a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
     */
	public function unenrollNetworkSmDevice(
        \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/unenroll', \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unenrollNetworkSmDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the attributes of a device
     * 
     * Update the attributes of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse
     */
	public function updateDevice(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the uplink settings for an MX appliance
     * 
     * Update the uplink settings for an MX appliance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsResponse
     */
	public function updateDeviceApplianceUplinksSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/appliance/uplinks/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceApplianceUplinksSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceApplianceUplinksSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update custom analytics settings for a camera
     * 
     * Update custom analytics settings for a camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsResponse
     */
	public function updateDeviceCameraCustomAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/customAnalytics', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraCustomAnalytics200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update quality and retention settings for the given camera
     * 
     * Update quality and retention settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse
     */
	public function updateDeviceCameraQualityAndRetention(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/qualityAndRetention', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraQualityAndRetention200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update sense settings for the given camera
     * 
     * Update sense settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseResponse
     */
	public function updateDeviceCameraSense(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/sense', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraSense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update video settings for the given camera
     * 
     * Update video settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse
     */
	public function updateDeviceCameraVideoSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/video/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraVideoSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign wireless profiles to the given camera
     * 
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse
     */
	public function updateDeviceCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraWirelessProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the LAN Settings for a single MG.
     * 
     * Update the LAN Settings for a single MG.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayLanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayLanResponse
     */
	public function updateDeviceCellularGatewayLan(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayLanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayLanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellularGateway/lan', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayLanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayLanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCellularGatewayLan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the port forwarding rules for a single MG.
     * 
     * Updates the port forwarding rules for a single MG.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayPortForwardingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayPortForwardingRulesResponse
     */
	public function updateDeviceCellularGatewayPortForwardingRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayPortForwardingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayPortForwardingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellularGateway/portForwardingRules', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayPortForwardingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularGatewayPortForwardingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCellularGatewayPortForwardingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the SIM and APN configurations for a cellular device.
     * 
     * Updates the SIM and APN configurations for a cellular device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsResponse
     */
	public function updateDeviceCellularSims(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/cellular/sims', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCellularSimsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCellularSims200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the management interface settings for a device
     * 
     * Update the management interface settings for a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceResponse
     */
	public function updateDeviceManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/managementInterface', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign one or more sensor roles to a given sensor or camera device.
     * 
     * Assign one or more sensor roles to a given sensor or camera device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSensorRelationshipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSensorRelationshipsResponse
     */
	public function updateDeviceSensorRelationships(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSensorRelationshipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSensorRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/sensor/relationships', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSensorRelationshipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSensorRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSensorRelationships200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSensorRelationships200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a switch port
     * 
     * Update a switch port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortResponse
     */
	public function updateDeviceSwitchPort(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchPort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface for a switch
     * 
     * Update a layer 3 interface for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceResponse
     */
	public function updateDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterface200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * 
     * Update a layer 3 interface DHCP configuration for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpResponse
     */
	public function updateDeviceSwitchRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 static route for a switch
     * 
     * Update a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteResponse
     */
	public function updateDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update warm spare configuration for a switch
     * 
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse
     */
	public function updateDeviceSwitchWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/warmSpare', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the bluetooth settings for a wireless device
     * 
     * Update the bluetooth settings for a wireless device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse
     */
	public function updateDeviceWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the radio settings of a device
     * 
     * Update the radio settings of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse
     */
	public function updateDeviceWirelessRadioSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/radio/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceWirelessRadioSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a network
     * 
     * Update a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkResponse
     */
	public function updateNetwork(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetwork200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the alert configuration for this network
     * 
     * Update the alert configuration for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsResponse
     */
	public function updateNetworkAlertsSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/alerts/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAlertsSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkAlertsSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the connectivity testing destinations for an MX network
     * 
     * Update the connectivity testing destinations for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceConnectivityMonitoringDestinationsResponse
     */
	public function updateNetworkApplianceConnectivityMonitoringDestinations(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceConnectivityMonitoringDestinationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/connectivityMonitoringDestinations', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceConnectivityMonitoringDestinationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceConnectivityMonitoringDestinations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the content filtering settings for an MX network
     * 
     * Update the content filtering settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceContentFilteringRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceContentFilteringResponse
     */
	public function updateNetworkApplianceContentFiltering(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceContentFilteringRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceContentFilteringResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/contentFiltering', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceContentFilteringRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceContentFilteringResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceContentFiltering200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the cellular firewall rules of an MX network
     * 
     * Update the cellular firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/cellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * 
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceResponse
     */
	public function updateNetworkApplianceFirewallFirewalledService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallFirewalledServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the inbound cellular firewall rules of an MX network
     * 
     * Update the inbound cellular firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallInboundCellularFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the inbound firewall rules of an MX network
     * 
     * Update the inbound firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallInboundFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/inboundFirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallInboundFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L3 firewall rules of an MX network
     * 
     * Update the L3 firewall rules of an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the MX L7 firewall rules for an MX network
     * 
     * Update the MX L7 firewall rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesResponse
     */
	public function updateNetworkApplianceFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * 
     * Set the 1:Many NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesResponse
     */
	public function updateNetworkApplianceFirewallOneToManyNatRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToManyNatRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToManyNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * 
     * Set the 1:1 NAT mapping rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesResponse
     */
	public function updateNetworkApplianceFirewallOneToOneNatRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/oneToOneNatRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallOneToOneNatRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the port forwarding rules for an MX network
     * 
     * Update the port forwarding rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesResponse
     */
	public function updateNetworkApplianceFirewallPortForwardingRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/portForwardingRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallPortForwardingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the firewall settings for this network
     * 
     * Update the firewall settings for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse
     */
	public function updateNetworkApplianceFirewallSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/firewall/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceFirewallSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceFirewallSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the per-port VLAN settings for a single MX port.
     * 
     * Update the per-port VLAN settings for a single MX port.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePortResponse
     */
	public function updateNetworkAppliancePort(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkAppliancePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a static delegated prefix from a network
     * 
     * Update a static delegated prefix from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePrefixesDelegatedStaticRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePrefixesDelegatedStaticResponse
     */
	public function updateNetworkAppliancePrefixesDelegatedStatic(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePrefixesDelegatedStaticRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePrefixesDelegatedStaticResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePrefixesDelegatedStaticRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAppliancePrefixesDelegatedStaticResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the supported intrusion settings for an MX network
     * 
     * Set the supported intrusion settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityIntrusionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityIntrusionResponse
     */
	public function updateNetworkApplianceSecurityIntrusion(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityIntrusionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityIntrusionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/security/intrusion', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityIntrusionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityIntrusionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceSecurityIntrusion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set the supported malware settings for an MX network
     * 
     * Set the supported malware settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityMalwareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityMalwareResponse
     */
	public function updateNetworkApplianceSecurityMalware(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityMalwareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityMalwareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/security/malware', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityMalwareRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSecurityMalwareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceSecurityMalware200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the appliance settings for a network
     * 
     * Update the appliance settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsResponse
     */
	public function updateNetworkApplianceSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update single LAN configuration
     * 
     * Update single LAN configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSingleLanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSingleLanResponse
     */
	public function updateNetworkApplianceSingleLan(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSingleLanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSingleLanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/singleLan', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSingleLanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSingleLanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceSingleLan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSingleLan200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the attributes of an MX SSID
     * 
     * Update the attributes of an MX SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSsidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSsidResponse
     */
	public function updateNetworkApplianceSsid(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSsidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSsidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/ssids/{number}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSsidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSsidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceSsid200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceSsid200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a static route for an MX or teleworker network
     * 
     * Update a static route for an MX or teleworker network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceStaticRouteResponse
     */
	public function updateNetworkApplianceStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the traffic shaping settings for an MX network
     * 
     * Update the traffic shaping settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingResponse
     */
	public function updateNetworkApplianceTrafficShaping(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceTrafficShaping200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a custom performance class for an MX network
     * 
     * Update a custom performance class for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingCustomPerformanceClassResponse
     */
	public function updateNetworkApplianceTrafficShapingCustomPerformanceClass(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingCustomPerformanceClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingCustomPerformanceClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceTrafficShapingCustomPerformanceClass200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the traffic shaping settings rules for an MX network
     * 
     * Update the traffic shaping settings rules for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRulesResponse
     */
	public function updateNetworkApplianceTrafficShapingRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/rules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceTrafficShapingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the uplink bandwidth settings for your MX network.
     * 
     * Updates the uplink bandwidth settings for your MX network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkBandwidthResponse
     */
	public function updateNetworkApplianceTrafficShapingUplinkBandwidth(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkBandwidthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkBandwidthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update uplink selection settings for an MX network
     * 
     * Update uplink selection settings for an MX network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkSelectionResponse
     */
	public function updateNetworkApplianceTrafficShapingUplinkSelection(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkSelectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/trafficShaping/uplinkSelection', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkSelectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a VLAN
     * 
     * Update a VLAN
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlanResponse
     */
	public function updateNetworkApplianceVlan(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans/{vlanId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceVlan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlan200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable/Disable VLANs for the given network
     * 
     * Enable/Disable VLANs for the given network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsResponse
     */
	public function updateNetworkApplianceVlansSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vlans/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVlansSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceVlansSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Hub BGP Configuration
     * 
     * Update a Hub BGP Configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnBgpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnBgpResponse
     */
	public function updateNetworkApplianceVpnBgp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnBgpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnBgpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vpn/bgp', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnBgpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnBgpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceVpnBgp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the site-to-site VPN settings of a network
     * 
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnSiteToSiteVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnSiteToSiteVpnResponse
     */
	public function updateNetworkApplianceVpnSiteToSiteVpn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnSiteToSiteVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnSiteToSiteVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/vpn/siteToSiteVpn', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnSiteToSiteVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnSiteToSiteVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update MX warm spare settings
     * 
     * Update MX warm spare settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareResponse
     */
	public function updateNetworkApplianceWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/appliance/warmSpare', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkApplianceWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkApplianceWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing quality retention profile for this network.
     * 
     * Update an existing quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse
     */
	public function updateNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing camera wireless profile in this network.
     * 
     * Update an existing camera wireless profile in this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse
     */
	public function updateNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the connectivity testing destinations for an MG network
     * 
     * Update the connectivity testing destinations for an MG network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsResponse
     */
	public function updateNetworkCellularGatewayConnectivityMonitoringDestinations(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCellularGatewayConnectivityMonitoringDestinations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update common DHCP settings of MGs
     * 
     * Update common DHCP settings of MGs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayDhcpResponse
     */
	public function updateNetworkCellularGatewayDhcp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/dhcp', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCellularGatewayDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayDhcp200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the subnet pool and mask configuration for MGs in the network.
     * 
     * Update the subnet pool and mask configuration for MGs in the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewaySubnetPoolRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewaySubnetPoolResponse
     */
	public function updateNetworkCellularGatewaySubnetPool(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewaySubnetPoolRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewaySubnetPoolResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/subnetPool', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewaySubnetPoolRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewaySubnetPoolResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCellularGatewaySubnetPool200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the uplink settings for your MG network.
     * 
     * Updates the uplink settings for your MG network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayUplinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayUplinkResponse
     */
	public function updateNetworkCellularGatewayUplink(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayUplinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayUplinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/cellularGateway/uplink', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayUplinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCellularGatewayUplinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCellularGatewayUplink200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the policy assigned to a client on the network
     * 
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientPolicyResponse
     */
	public function updateNetworkClientPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/policy', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkClientPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a client's splash authorization
     * 
     * Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientSplashAuthorizationStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientSplashAuthorizationStatusResponse
     */
	public function updateNetworkClientSplashAuthorizationStatus(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientSplashAuthorizationStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientSplashAuthorizationStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientSplashAuthorizationStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkClientSplashAuthorizationStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkClientSplashAuthorizationStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update firmware upgrade information for a network
     * 
     * Update firmware upgrade information for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesResponse
     */
	public function updateNetworkFirmwareUpgrades(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkFirmwareUpgrades200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgrades200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Staged Upgrade Event for a network
     * 
     * Update the Staged Upgrade Event for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedEventsResponse
     */
	public function updateNetworkFirmwareUpgradesStagedEvents(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/events', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedEvents200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Staged Upgrade Group for a network
     * 
     * Update a Staged Upgrade Group for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedGroupResponse
     */
	public function updateNetworkFirmwareUpgradesStagedGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign Staged Upgrade Group order in the sequence.
     * 
     * Assign Staged Upgrade Group order in the sequence.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedStagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedStagesResponse
     */
	public function updateNetworkFirmwareUpgradesStagedStages(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedStagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedStagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/firmwareUpgrades/staged/stages', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedStagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedStagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkFirmwareUpgradesStagedStages200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFirmwareUpgradesStagedStages200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a floor plan's geolocation and other meta data
     * 
     * Update a floor plan's geolocation and other meta data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFloorPlanRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFloorPlanResponse
     */
	public function updateNetworkFloorPlan(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFloorPlanRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFloorPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/floorPlans/{floorPlanId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFloorPlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkFloorPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkFloorPlan200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a group policy
     * 
     * Update a group policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkGroupPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkGroupPolicyResponse
     */
	public function updateNetworkGroupPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkGroupPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkGroupPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/groupPolicies/{groupPolicyId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkGroupPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkGroupPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkGroupPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * 
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserResponse
     */
	public function updateNetworkMerakiAuthUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkMerakiAuthUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMerakiAuthUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an MQTT broker
     * 
     * Update an MQTT broker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMqttBrokerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMqttBrokerResponse
     */
	public function updateNetworkMqttBroker(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMqttBrokerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMqttBrokerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMqttBrokerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkMqttBrokerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkMqttBroker200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the NetFlow traffic reporting settings for a network
     * 
     * Update the NetFlow traffic reporting settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkNetflowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkNetflowResponse
     */
	public function updateNetworkNetflow(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkNetflowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkNetflowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/netflow', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkNetflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkNetflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkNetflow200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a sensor alert profile for a network.
     * 
     * Updates a sensor alert profile for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileResponse
     */
	public function updateNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSensorAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the settings for a network
     * 
     * Update the settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsResponse
     */
	public function updateNetworkSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the fields of a device
     * 
     * Modify the fields of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse
     */
	public function updateNetworkSmDevicesFields(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/fields', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSmDevicesFields200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFields200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a target group
     * 
     * Update a target group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupResponse
     */
	public function updateNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups/{targetGroupId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSmTargetGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the SNMP settings for a network
     * 
     * Update the SNMP settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSnmpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSnmpResponse
     */
	public function updateNetworkSnmp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSnmpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSnmpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/snmp', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSnmpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSnmpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSnmp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the access control lists for a MS network
     * 
     * Update the access control lists for a MS network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsResponse
     */
	public function updateNetworkSwitchAccessControlLists(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessControlLists', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchAccessControlLists200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlLists200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an access policy for a switch network
     * 
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyResponse
     */
	public function updateNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchAccessPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the switch alternate management interface for the network
     * 
     * Update the switch alternate management interface for the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceResponse
     */
	public function updateNetworkSwitchAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the DHCP server settings
     * 
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyResponse
     */
	public function updateNetworkSwitchDhcpServerPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchDhcpServerPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * 
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
     */
	public function updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the DSCP to CoS mappings
     * 
     * Update the DSCP to CoS mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsResponse
     */
	public function updateNetworkSwitchDscpToCosMappings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dscpToCosMappings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchDscpToCosMappings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a link aggregation group
     * 
     * Update a link aggregation group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationResponse
     */
	public function updateNetworkSwitchLinkAggregation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchLinkAggregation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the MTU configuration
     * 
     * Update the MTU configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuResponse
     */
	public function updateNetworkSwitchMtu(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/mtu', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchMtu200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a switch port schedule
     * 
     * Update a switch port schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleResponse
     */
	public function updateNetworkSwitchPortSchedule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules/{portScheduleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchPortSchedule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a quality of service rule
     * 
     * Update a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse
     */
	public function updateNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the order in which the rules should be processed by the switch
     * 
     * Update the order in which the rules should be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse
     */
	public function updateNetworkSwitchQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update multicast settings for a network
     * 
     * Update multicast settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastResponse
     */
	public function updateNetworkSwitchRoutingMulticast(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchRoutingMulticast200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a multicast rendezvous point
     * 
     * Update a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function updateNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchRoutingMulticastRendezvousPoint200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update layer 3 OSPF routing configuration
     * 
     * Update layer 3 OSPF routing configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfResponse
     */
	public function updateNetworkSwitchRoutingOspf(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/ospf', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchRoutingOspf200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update switch network settings
     * 
     * Update switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
     */
	public function updateNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface for a switch stack
     * 
     * Update a layer 3 interface for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceResponse
     */
	public function updateNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStackRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * 
     * Update a layer 3 interface DHCP configuration for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse
     */
	public function updateNetworkSwitchStackRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStackRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 static route for a switch stack
     * 
     * Update a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function updateNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStackRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the storm control configuration for a switch network
     * 
     * Update the storm control configuration for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlResponse
     */
	public function updateNetworkSwitchStormControl(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stormControl', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStormControl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates STP settings
     * 
     * Updates STP settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpResponse
     */
	public function updateNetworkSwitchStp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stp', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the syslog servers for a network
     * 
     * Update the syslog servers for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSyslogServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSyslogServersResponse
     */
	public function updateNetworkSyslogServers(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSyslogServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSyslogServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/syslogServers', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSyslogServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSyslogServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSyslogServers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSyslogServers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the traffic analysis settings for a network
     * 
     * Update the traffic analysis settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkTrafficAnalysisRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkTrafficAnalysisResponse
     */
	public function updateNetworkTrafficAnalysis(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkTrafficAnalysisRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkTrafficAnalysisResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/trafficAnalysis', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkTrafficAnalysisRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkTrafficAnalysisResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkTrafficAnalysis200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an HTTP server
     * 
     * Update an HTTP server. To change a URL, create a new HTTP server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerResponse
     */
	public function updateNetworkWebhooksHttpServer(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/httpServers/{httpServerId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWebhooksHttpServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksHttpServer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook payload template for a network
     * 
     * Update a webhook payload template for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateResponse
     */
	public function updateNetworkWebhooksPayloadTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWebhooksPayloadTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWebhooksPayloadTemplate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update alternate management interface and device static IP
     * 
     * Update alternate management interface and device static IP
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceResponse
     */
	public function updateNetworkWirelessAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the billing settings
     * 
     * Update the billing settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingResponse
     */
	public function updateNetworkWirelessBilling(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/billing', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessBilling200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Bluetooth settings for a network
     * 
     * Update the Bluetooth settings for a network. See the docs page for <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse
     */
	public function updateNetworkWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates specified RF profile for this network
     * 
     * Updates specified RF profile for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileResponse
     */
	public function updateNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessRfProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the wireless settings for a network
     * 
     * Update the wireless settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse
     */
	public function updateNetworkWirelessSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the attributes of an MR SSID
     * 
     * Update the attributes of an MR SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidResponse
     */
	public function updateNetworkWirelessSsid(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsid200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the bonjour forwarding setting and rules for the SSID
     * 
     * Update the bonjour forwarding setting and rules for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingResponse
     */
	public function updateNetworkWirelessSsidBonjourForwarding(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidBonjourForwarding200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the device type group policies for the SSID
     * 
     * Update the device type group policies for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
     */
	public function updateNetworkWirelessSsidDeviceTypeGroupPolicies(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidDeviceTypeGroupPolicies200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the EAP overridden parameters for an SSID.
     * 
     * Update the EAP overridden parameters for an SSID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideResponse
     */
	public function updateNetworkWirelessSsidEapOverride(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/eapOverride', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidEapOverride200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * 
     * Update the L3 firewall rules of an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse
     */
	public function updateNetworkWirelessSsidFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * 
     * Update the L7 firewall rules of an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse
     */
	public function updateNetworkWirelessSsidFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Hotspot 2.0 settings of an SSID
     * 
     * Update the Hotspot 2.0 settings of an SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Response
     */
	public function updateNetworkWirelessSsidHotspot20(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/hotspot20', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidHotspot20200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Identity PSK
     * 
     * Update an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskResponse
     */
	public function updateNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidIdentityPsk200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the outage schedule for the SSID
     * 
     * Update the outage schedule for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesResponse
     */
	public function updateNetworkWirelessSsidSchedules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/schedules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidSchedules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the splash page settings for the given SSID
     * 
     * Modify the splash page settings for the given SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse
     */
	public function updateNetworkWirelessSsidSplashSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/splash/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidSplashSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the traffic shaping settings for an SSID on an MR network
     * 
     * Update the traffic shaping settings for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesResponse
     */
	public function updateNetworkWirelessSsidTrafficShapingRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidTrafficShapingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the VPN settings for the SSID
     * 
     * Update the VPN settings for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnResponse
     */
	public function updateNetworkWirelessSsidVpn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/vpn', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an organization
     * 
     * Update an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse
     */
	public function updateOrganization(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganization200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an action batch
     * 
     * Update an action batch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchResponse
     */
	public function updateOrganizationActionBatch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/actionBatches/{actionBatchId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationActionBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationActionBatch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an adaptive policy ACL
     * 
     * Updates an adaptive policy ACL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse
     */
	public function updateOrganizationAdaptivePolicyAcl(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/acls/{aclId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyAclResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyAcl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an adaptive policy group
     * 
     * Updates an adaptive policy group. If updating "Infrastructure", only the SGT is allowed. Cannot update "Unknown".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse
     */
	public function updateOrganizationAdaptivePolicyGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Adaptive Policy
     * 
     * Update an Adaptive Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse
     */
	public function updateOrganizationAdaptivePolicyPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/policies/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicyPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicyPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update global adaptive policy settings
     * 
     * Update global adaptive policy settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
     */
	public function updateOrganizationAdaptivePolicySettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/adaptivePolicy/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdaptivePolicySettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdaptivePolicySettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an administrator
     * 
     * Update an administrator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminResponse
     */
	public function updateOrganizationAdmin(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/admins/{adminId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAdmin200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an organization-wide alert config
     * 
     * Update an organization-wide alert config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse
     */
	public function updateOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets supported intrusion settings for an organization
     * 
     * Sets supported intrusion settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceSecurityIntrusionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceSecurityIntrusionResponse
     */
	public function updateOrganizationApplianceSecurityIntrusion(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceSecurityIntrusionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceSecurityIntrusionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/security/intrusion', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceSecurityIntrusionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceSecurityIntrusionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationApplianceSecurityIntrusion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the third party VPN peers for an organization
     * 
     * Update the third party VPN peers for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse
     */
	public function updateOrganizationApplianceVPNThirdPartyVPNPeers(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the firewall rules of an organization's site-to-site VPN
     * 
     * Update the firewall rules of an organization's site-to-site VPN
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVpnVpnFirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVpnVpnFirewallRulesResponse
     */
	public function updateOrganizationApplianceVpnVpnFirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVpnVpnFirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVpnVpnFirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/appliance/vpn/vpnFirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVpnVpnFirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationApplianceVpnVpnFirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationApplianceVpnVpnFirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the priority ordering of an organization's branding policies.
     * 
     * Update the priority ordering of an organization's branding policies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesResponse
     */
	public function updateOrganizationBrandingPoliciesPriorities(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/priorities', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPrioritiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPoliciesPriorities200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a branding policy
     * 
     * Update a branding policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyResponse
     */
	public function updateOrganizationBrandingPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationBrandingPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationBrandingPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Notify that credential handoff to camera has completed
     * 
     * Notify that credential handoff to camera has completed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse
     */
	public function updateOrganizationCameraOnboardingStatuses(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/onboarding/statuses', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationCameraOnboardingStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a configuration template
     * 
     * Update a configuration template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateResponse
     */
	public function updateOrganizationConfigTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationConfigTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a switch profile port
     * 
     * Update a switch profile port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse
     */
	public function updateOrganizationConfigTemplateSwitchProfilePort(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an early access feature opt-in for an organization
     * 
     * Update an early access feature opt-in for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInResponse
     */
	public function updateOrganizationEarlyAccessFeaturesOptIn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/earlyAccess/features/optIns/{optInId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationEarlyAccessFeaturesOptInResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationEarlyAccessFeaturesOptIn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a monitored media server for this organization
     * 
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationInsightMonitoredMediaServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationInsightMonitoredMediaServerResponse
     */
	public function updateOrganizationInsightMonitoredMediaServer(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationInsightMonitoredMediaServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationInsightMonitoredMediaServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationInsightMonitoredMediaServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationInsightMonitoredMediaServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationInsightMonitoredMediaServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a license
     * 
     * Update a license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseResponse
     */
	public function updateOrganizationLicense(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/licenses/{licenseId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationLicense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLicense200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the login security settings for an organization
     * 
     * Update the login security settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityResponse
     */
	public function updateOrganizationLoginSecurity(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/loginSecurity', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationLoginSecurity200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationLoginSecurity200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Policy Object.
     * 
     * Updates a Policy Object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse
     */
	public function updateOrganizationPolicyObject(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/{policyObjectId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationPolicyObject200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Policy Object Group.
     * 
     * Updates a Policy Object Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse
     */
	public function updateOrganizationPolicyObjectsGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/policyObjects/groups/{policyObjectGroupId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationPolicyObjectsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationPolicyObjectsGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the SAML SSO enabled settings for an organization.
     * 
     * Updates the SAML SSO enabled settings for an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlResponse
     */
	public function updateOrganizationSaml(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSaml200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSaml200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a SAML IdP in your organization
     * 
     * Update a SAML IdP in your organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpResponse
     */
	public function updateOrganizationSamlIdp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/saml/idps/{idpId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSamlIdp200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlIdp200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a SAML role
     * 
     * Update a SAML role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleResponse
     */
	public function updateOrganizationSamlRole(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/samlRoles/{samlRoleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSamlRole200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSamlRole200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the SNMP settings for an organization
     * 
     * Update the SNMP settings for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpResponse
     */
	public function updateOrganizationSnmp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/snmp', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSnmpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationSnmp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claim a vMX into a network
     * 
     * Claim a vMX into a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimResponse
     */
	public function vmxNetworkDevicesClaim(
        \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/claim/vmx', \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmxNetworkDevicesClaimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vmxNetworkDevicesClaim200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Wipe a device
     * 
     * Wipe a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse
     */
	public function wipeNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/wipe', \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wipeNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}