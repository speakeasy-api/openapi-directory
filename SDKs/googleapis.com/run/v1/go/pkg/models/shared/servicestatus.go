// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ServiceStatusInput - The current state of the Service. Output only.
type ServiceStatusInput struct {
	// Information for connecting over HTTP(s).
	Address *Addressable `json:"address,omitempty"`
	// Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
	Conditions []GoogleCloudRunV1Condition `json:"conditions,omitempty"`
	// Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
	LatestCreatedRevisionName *string `json:"latestCreatedRevisionName,omitempty"`
	// Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
	LatestReadyRevisionName *string `json:"latestReadyRevisionName,omitempty"`
	// Returns the generation last fully processed by the system. This will only match metadata.generation when reconciliation is complete. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
	ObservedGeneration *int `json:"observedGeneration,omitempty"`
	// Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
	Traffic []TrafficTargetInput `json:"traffic,omitempty"`
	// URL that will distribute traffic over the provided traffic targets. It generally has the form https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app
	URL *string `json:"url,omitempty"`
}

// ServiceStatus - The current state of the Service. Output only.
type ServiceStatus struct {
	// Information for connecting over HTTP(s).
	Address *Addressable `json:"address,omitempty"`
	// Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
	Conditions []GoogleCloudRunV1Condition `json:"conditions,omitempty"`
	// Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
	LatestCreatedRevisionName *string `json:"latestCreatedRevisionName,omitempty"`
	// Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
	LatestReadyRevisionName *string `json:"latestReadyRevisionName,omitempty"`
	// Returns the generation last fully processed by the system. This will only match metadata.generation when reconciliation is complete. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
	ObservedGeneration *int `json:"observedGeneration,omitempty"`
	// Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
	Traffic []TrafficTarget `json:"traffic,omitempty"`
	// URL that will distribute traffic over the provided traffic targets. It generally has the form https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app
	URL *string `json:"url,omitempty"`
}
