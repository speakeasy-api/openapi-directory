// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// PostOrderLineItemUpdateTypeItemStateEnum - The state of the Order Line Item (OLI). See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
//
// To generate invoice for an OLI, you must set this field to `SentToBilling` and set the `billTargetDate` field .
//
// You can update this field for an OLI only when the OLI is in the `Executing` or `SentToBilling`state (when the `itemState` field is set as `Executing` or `SentToBilling`).
type PostOrderLineItemUpdateTypeItemStateEnum string

const (
	PostOrderLineItemUpdateTypeItemStateEnumExecuting     PostOrderLineItemUpdateTypeItemStateEnum = "Executing"
	PostOrderLineItemUpdateTypeItemStateEnumSentToBilling PostOrderLineItemUpdateTypeItemStateEnum = "SentToBilling"
	PostOrderLineItemUpdateTypeItemStateEnumComplete      PostOrderLineItemUpdateTypeItemStateEnum = "Complete"
	PostOrderLineItemUpdateTypeItemStateEnumCancelled     PostOrderLineItemUpdateTypeItemStateEnum = "Cancelled"
)

func (e *PostOrderLineItemUpdateTypeItemStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Executing":
		fallthrough
	case "SentToBilling":
		fallthrough
	case "Complete":
		fallthrough
	case "Cancelled":
		*e = PostOrderLineItemUpdateTypeItemStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostOrderLineItemUpdateTypeItemStateEnum: %s", s)
	}
}

// PostOrderLineItemUpdateTypeItemTypeEnum - The type of the Order Line Item (OLI).
//
// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
type PostOrderLineItemUpdateTypeItemTypeEnum string

const (
	PostOrderLineItemUpdateTypeItemTypeEnumProduct  PostOrderLineItemUpdateTypeItemTypeEnum = "Product"
	PostOrderLineItemUpdateTypeItemTypeEnumFee      PostOrderLineItemUpdateTypeItemTypeEnum = "Fee"
	PostOrderLineItemUpdateTypeItemTypeEnumServices PostOrderLineItemUpdateTypeItemTypeEnum = "Services"
)

func (e *PostOrderLineItemUpdateTypeItemTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Product":
		fallthrough
	case "Fee":
		fallthrough
	case "Services":
		*e = PostOrderLineItemUpdateTypeItemTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostOrderLineItemUpdateTypeItemTypeEnum: %s", s)
	}
}

// PostOrderLineItemUpdateTypeTaxModeEnum - The tax mode for the Order Line Item (OLI).
//
// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
type PostOrderLineItemUpdateTypeTaxModeEnum string

const (
	PostOrderLineItemUpdateTypeTaxModeEnumTaxInclusive PostOrderLineItemUpdateTypeTaxModeEnum = "TaxInclusive"
	PostOrderLineItemUpdateTypeTaxModeEnumTaxExclusive PostOrderLineItemUpdateTypeTaxModeEnum = "TaxExclusive"
)

func (e *PostOrderLineItemUpdateTypeTaxModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TaxInclusive":
		fallthrough
	case "TaxExclusive":
		*e = PostOrderLineItemUpdateTypeTaxModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostOrderLineItemUpdateTypeTaxModeEnum: %s", s)
	}
}

type PostOrderLineItemUpdateType struct {
	// Specifies the units to measure usage.
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	Uom *string `json:"UOM,omitempty"`
	// The accountingCode for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	AccountingCode *string `json:"accountingCode,omitempty"`
	// The actual charged amount per unit for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	AmountPerUnit *float64 `json:"amountPerUnit,omitempty"`
	// The target date for the Order Line Item (OLI) to be picked up by bill run for generating invoice.
	//
	// To generate invoice for an OLI, you must set this field and set the `itemState` field to `SentToBilling`.
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	BillTargetDate *types.Date `json:"billTargetDate,omitempty"`
	// Container for custom fields of an Order Line Item object.
	//
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	// The deferred revenue accounting code for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	DeferredRevenueAccountingCode *string `json:"deferredRevenueAccountingCode,omitempty"`
	// The description of the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	Description *string `json:"description,omitempty"`
	// The sytem generated Id for the Order Line Item(OLI). Use this field to specify which OLI to update.
	//
	ID string `json:"id"`
	// The name of the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	ItemName *string `json:"itemName,omitempty"`
	// The number for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	ItemNumber *string `json:"itemNumber,omitempty"`
	// The state of the Order Line Item (OLI). See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
	//
	// To generate invoice for an OLI, you must set this field to `SentToBilling` and set the `billTargetDate` field .
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` or `SentToBilling`state (when the `itemState` field is set as `Executing` or `SentToBilling`).
	//
	ItemState *PostOrderLineItemUpdateTypeItemStateEnum `json:"itemState,omitempty"`
	// The type of the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	ItemType *PostOrderLineItemUpdateTypeItemTypeEnum `json:"itemType,omitempty"`
	// The list price per unit for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	ListPricePerUnit *float64 `json:"listPricePerUnit,omitempty"`
	// The product code for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	ProductCode *string `json:"productCode,omitempty"`
	// Used by customers to specify the Purchase Order Number provided by the buyer.
	//
	// You can update this field for an Order Line Item (OLI) only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
	// The quantity of units, such as the number of authors in a hosted wiki service.
	//
	// You can update this field for an Order Line Item (OLI) only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	Quantity *float64 `json:"quantity,omitempty"`
	// The recognized revenue accounting code for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	RecognizedRevenueAccountingCode *string `json:"recognizedRevenueAccountingCode,omitempty"`
	// The Revenue Recognition rule for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	RevenueRecognitionRule *string `json:"revenueRecognitionRule,omitempty"`
	// The tax code for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	TaxCode *string `json:"taxCode,omitempty"`
	// The tax mode for the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	TaxMode *PostOrderLineItemUpdateTypeTaxModeEnum `json:"taxMode,omitempty"`
	// The transaction date of the Order Line Item (OLI).
	//
	// You can update this field for an OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
	//
	TransactionDate *types.Date `json:"transactionDate,omitempty"`
}
