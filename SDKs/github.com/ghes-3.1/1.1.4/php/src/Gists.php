<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Gists 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Check if a gist is starred
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#check-if-a-gist-is-starred - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsCheckIsStarredRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsCheckIsStarredResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#check-if-a-gist-is-starred
     */
	public function gistsCheckIsStarred(
        \OpenAPI\OpenAPI\Models\Operations\GistsCheckIsStarredRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsCheckIsStarredResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/star', \OpenAPI\OpenAPI\Models\Operations\GistsCheckIsStarredRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsCheckIsStarredResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistsCheckIsStarred404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a gist
     * 
     * Allows you to add a new gist with one or more files.
     * 
     * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#create-a-gist - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsCreateRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsCreateResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#create-a-gist
     */
	public function gistsCreate(
        \OpenAPI\OpenAPI\Models\Operations\GistsCreateRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GistSimple', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a gist comment
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#create-a-gist-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsCreateCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsCreateCommentResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#create-a-gist-comment
     */
	public function gistsCreateComment(
        \OpenAPI\OpenAPI\Models\Operations\GistsCreateCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsCreateCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/comments', \OpenAPI\OpenAPI\Models\Operations\GistsCreateCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsCreateCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GistComment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a gist
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#delete-a-gist - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsDeleteResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#delete-a-gist
     */
	public function gistsDelete(
        \OpenAPI\OpenAPI\Models\Operations\GistsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}', \OpenAPI\OpenAPI\Models\Operations\GistsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a gist comment
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#delete-a-gist-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsDeleteCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsDeleteCommentResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#delete-a-gist-comment
     */
	public function gistsDeleteComment(
        \OpenAPI\OpenAPI\Models\Operations\GistsDeleteCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsDeleteCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/comments/{comment_id}', \OpenAPI\OpenAPI\Models\Operations\GistsDeleteCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsDeleteCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fork a gist
     * 
     * **Note**: This was previously `/gists/:gist_id/fork`.
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#fork-a-gist - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsForkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsForkResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#fork-a-gist
     */
	public function gistsFork(
        \OpenAPI\OpenAPI\Models\Operations\GistsForkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsForkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/forks', \OpenAPI\OpenAPI\Models\Operations\GistsForkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsForkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseGist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BaseGist', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a gist
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#get-a-gist - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsGetResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#get-a-gist
     */
	public function gistsGet(
        \OpenAPI\OpenAPI\Models\Operations\GistsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}', \OpenAPI\OpenAPI\Models\Operations\GistsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GistSimple', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistsGet403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GistsGet403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a gist comment
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#get-a-gist-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsGetCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsGetCommentResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#get-a-gist-comment
     */
	public function gistsGetComment(
        \OpenAPI\OpenAPI\Models\Operations\GistsGetCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsGetCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/comments/{comment_id}', \OpenAPI\OpenAPI\Models\Operations\GistsGetCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsGetCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GistComment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistsGetComment403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GistsGetComment403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a gist revision
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#get-a-gist-revision - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsGetRevisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsGetRevisionResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#get-a-gist-revision
     */
	public function gistsGetRevision(
        \OpenAPI\OpenAPI\Models\Operations\GistsGetRevisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsGetRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/{sha}', \OpenAPI\OpenAPI\Models\Operations\GistsGetRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsGetRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GistSimple', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List gists for the authenticated user
     * 
     * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gists-for-the-authenticated-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsListResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gists-for-the-authenticated-user
     */
	public function gistsList(
        \OpenAPI\OpenAPI\Models\Operations\GistsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GistsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseGists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BaseGist>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List gist comments
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gist-comments - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsListCommentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsListCommentsResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gist-comments
     */
	public function gistsListComments(
        \OpenAPI\OpenAPI\Models\Operations\GistsListCommentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsListCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/comments', \OpenAPI\OpenAPI\Models\Operations\GistsListCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GistsListCommentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsListCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistComments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GistComment>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List gist commits
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gist-commits - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsListCommitsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsListCommitsResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gist-commits
     */
	public function gistsListCommits(
        \OpenAPI\OpenAPI\Models\Operations\GistsListCommitsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsListCommitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/commits', \OpenAPI\OpenAPI\Models\Operations\GistsListCommitsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GistsListCommitsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsListCommitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistCommits = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GistCommit>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List gists for a user
     * 
     * Lists public gists for the specified user:
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gists-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsListForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsListForUserResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gists-for-a-user
     */
	public function gistsListForUser(
        \OpenAPI\OpenAPI\Models\Operations\GistsListForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsListForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/gists', \OpenAPI\OpenAPI\Models\Operations\GistsListForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GistsListForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsListForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseGists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BaseGist>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List gist forks
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gist-forks - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsListForksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsListForksResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-gist-forks
     */
	public function gistsListForks(
        \OpenAPI\OpenAPI\Models\Operations\GistsListForksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsListForksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/forks', \OpenAPI\OpenAPI\Models\Operations\GistsListForksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GistsListForksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsListForksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GistSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List public gists
     * 
     * List public gists sorted by most recently updated to least recently updated.
     * 
     * Note: With [pagination](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-public-gists - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsListPublicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsListPublicResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-public-gists
     */
	public function gistsListPublic(
        \OpenAPI\OpenAPI\Models\Operations\GistsListPublicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsListPublicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/public');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GistsListPublicRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsListPublicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseGists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BaseGist>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List starred gists
     * 
     * List the authenticated user's starred gists:
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-starred-gists - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsListStarredRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsListStarredResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#list-starred-gists
     */
	public function gistsListStarred(
        \OpenAPI\OpenAPI\Models\Operations\GistsListStarredRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsListStarredResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/starred');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GistsListStarredRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsListStarredResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->baseGists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BaseGist>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Star a gist
     * 
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs)."
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#star-a-gist - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsStarRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsStarResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#star-a-gist
     */
	public function gistsStar(
        \OpenAPI\OpenAPI\Models\Operations\GistsStarRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsStarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/star', \OpenAPI\OpenAPI\Models\Operations\GistsStarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsStarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unstar a gist
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#unstar-a-gist - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsUnstarRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsUnstarResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#unstar-a-gist
     */
	public function gistsUnstar(
        \OpenAPI\OpenAPI\Models\Operations\GistsUnstarRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsUnstarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/star', \OpenAPI\OpenAPI\Models\Operations\GistsUnstarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsUnstarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a gist
     * 
     * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists/#update-a-gist - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsUpdateResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists/#update-a-gist
     */
	public function gistsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\GistsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}', \OpenAPI\OpenAPI\Models\Operations\GistsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GistSimple', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a gist comment
     * 
     * https://docs.github.com/enterprise-server@3.1/rest/reference/gists#update-a-gist-comment - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GistsUpdateCommentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GistsUpdateCommentResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/gists#update-a-gist-comment
     */
	public function gistsUpdateComment(
        \OpenAPI\OpenAPI\Models\Operations\GistsUpdateCommentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GistsUpdateCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/gists/{gist_id}/comments/{comment_id}', \OpenAPI\OpenAPI\Models\Operations\GistsUpdateCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GistsUpdateCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gistComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GistComment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
}