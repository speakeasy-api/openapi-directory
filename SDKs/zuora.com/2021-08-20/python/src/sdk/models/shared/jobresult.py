"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobResultOrderLineItems:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The sytem generated Id for the Order Line Item."""  
    item_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemNumber'), 'exclude': lambda f: f is None }})
    r"""The number for the Order Line Item."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobResultRamps:
    
    ramp_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rampNumber'), 'exclude': lambda f: f is None }})
    r"""The number of the ramp definition."""  
    subscription_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionNumber'), 'exclude': lambda f: f is None }})
    r"""The number of the subscription that this ramp deal definition is applied to."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobResultReasons:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The error code of response."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The detail information of the error response"""  
    
class JobResultStatusEnum(str, Enum):
    r"""Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action."""
    COMPLETED = 'Completed'
    PENDING = 'Pending'

class JobResultSubscriptionsStatusEnum(str, Enum):
    r"""Status of the subscription. `Pending Activation` and `Pending Acceptance` are only applicable for an order that contains a `CreateSubscription` order action."""
    ACTIVE = 'Active'
    PENDING_ACTIVATION = 'Pending Activation'
    PENDING_ACCEPTANCE = 'Pending Acceptance'
    CANCELLED = 'Cancelled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobResultSubscriptions:
    
    status: Optional[JobResultSubscriptionsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the subscription. `Pending Activation` and `Pending Acceptance` are only applicable for an order that contains a `CreateSubscription` order action."""  
    subscription_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionNumber'), 'exclude': lambda f: f is None }})
    r"""Subscription number of the subscription included in this order."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobResult:
    r"""**Note:** The schema of the `result` nested field is the same as the response body schema of either the [\\"Create an order\\"](https://www.zuora.com/developer/api-reference/#operation/POST_Order) or the [\\"Preview an order\\"](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrder) operation, depending on the purpose of the job.
    
    The following schema for the nested `result` field is defined as the response body schema of \"Create an order\". See [Preview an Order](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrder) for the response body schema of \"Preview an order\".
    """
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""The account ID for the order. This field is returned only when the `returnIds` query parameter in the \\"Create an order asynchronously\\" operation is set to `true`."""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""The account number for the order."""  
    credit_memo_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditMemoIds'), 'exclude': lambda f: f is None }})
    r"""An array of the credit memo IDs that are generated in the \\"Create an order asynchronously\\" operation. This field is returned only when the `returnIds` query parameter in the \\"Create an order asynchronously\\" operation is set to `true`."""  
    credit_memo_numbers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditMemoNumbers'), 'exclude': lambda f: f is None }})
    r"""An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled."""  
    invoice_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceId'), 'exclude': lambda f: f is None }})
    r"""An array of the invoice IDs that are generated in the \\"Create an order asynchronously\\" operation. This field is returned only when the `returnIds` query parameter in the \\"Create an order asynchronously\\" operation is set to `true`."""  
    invoice_numbers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceNumbers'), 'exclude': lambda f: f is None }})
    r"""An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately."""  
    order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderId'), 'exclude': lambda f: f is None }})
    r"""The ID of the order created. This field is returned only when the `returnIds` query parameter in the \\"Create an order asynchronously\\" operation is set to `true`."""  
    order_line_items: Optional[list[JobResultOrderLineItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderLineItems'), 'exclude': lambda f: f is None }})  
    order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderNumber'), 'exclude': lambda f: f is None }})
    r"""The order number of the order created."""  
    paid_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paidAmount'), 'exclude': lambda f: f is None }})
    r"""The total amount collected in this order request."""  
    payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentId'), 'exclude': lambda f: f is None }})
    r"""The ID of the payment that is collected in the \\"Create an order asynchronously\\" operation. This field is returned only when the `returnIds` query parameter in the \\"Create an order asynchronously\\" operation is set to `true`."""  
    payment_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentNumber'), 'exclude': lambda f: f is None }})
    r"""The payment number that collected in this order request."""  
    process_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processId'), 'exclude': lambda f: f is None }})
    r"""The Id of the process that handle the operation."""  
    ramps: Optional[list[JobResultRamps]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ramps'), 'exclude': lambda f: f is None }})
    r"""**Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
    
    The ramp definitions created by this order request.
    """  
    reasons: Optional[list[JobResultReasons]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasons'), 'exclude': lambda f: f is None }})  
    status: Optional[JobResultStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action."""  
    subscription_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionIds'), 'exclude': lambda f: f is None }})
    r"""Container for the IDs of the subscriptions in the order. This field is returned only when the `returnIds` query parameter in the \\"Create an order asynchronously\\" operation is set to `true`."""  
    subscription_numbers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionNumbers'), 'exclude': lambda f: f is None }})
    r"""**Note:** This field is in Zuora REST API version control. Supported minor versions are 222.4 or earlier. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.
    
    Container for the subscription numbers of the subscriptions in an order.
    """  
    subscriptions: Optional[list[JobResultSubscriptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptions'), 'exclude': lambda f: f is None }})
    r"""**Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.
    
    Container for the subscription numbers and statuses in an order.
    """  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the call succeeded."""  
    