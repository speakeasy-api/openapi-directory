"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETCreateConfigurationSetActionEnum(str, Enum):
    CREATE_CONFIGURATION_SET = 'CreateConfigurationSet'


@dataclasses.dataclass
class GETCreateConfigurationSetConfigurationSet:
    r"""<p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a href=\\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html\\">Using Amazon SES Configuration Sets</a> in the <a href=\\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\\">Amazon SES Developer Guide</a>.</p>"""
    
    name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Name' }})  
    
class GETCreateConfigurationSetVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_12_01 = '2010-12-01'


@dataclasses.dataclass
class GETCreateConfigurationSetRequest:
    
    action: GETCreateConfigurationSetActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    configuration_set: GETCreateConfigurationSetConfigurationSet = dataclasses.field(metadata={'query_param': { 'field_name': 'ConfigurationSet', 'style': 'form', 'explode': True }})
    r"""A data structure that contains the name of the configuration set."""  
    version: GETCreateConfigurationSetVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETCreateConfigurationSetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    