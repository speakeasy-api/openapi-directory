// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCandidatesTotalsAggregatesAggregateByEnum - Candidate totals aggregate_by (Chose one of dropdown options):
//   - ' ' grouped by election year
//   - office grouped by election year, by office
//   - office-state grouped by election year, by office, by state
//   - office-state-district grouped by election year, by office, by state, by district
//   - office-party grouped by election year, by office, by party
type GetCandidatesTotalsAggregatesAggregateByEnum string

const (
	GetCandidatesTotalsAggregatesAggregateByEnumOffice              GetCandidatesTotalsAggregatesAggregateByEnum = "office"
	GetCandidatesTotalsAggregatesAggregateByEnumOfficeState         GetCandidatesTotalsAggregatesAggregateByEnum = "office-state"
	GetCandidatesTotalsAggregatesAggregateByEnumOfficeStateDistrict GetCandidatesTotalsAggregatesAggregateByEnum = "office-state-district"
	GetCandidatesTotalsAggregatesAggregateByEnumOfficeParty         GetCandidatesTotalsAggregatesAggregateByEnum = "office-party"
)

func (e *GetCandidatesTotalsAggregatesAggregateByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "office":
		fallthrough
	case "office-state":
		fallthrough
	case "office-state-district":
		fallthrough
	case "office-party":
		*e = GetCandidatesTotalsAggregatesAggregateByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidatesTotalsAggregatesAggregateByEnum: %s", s)
	}
}

// GetCandidatesTotalsAggregatesOfficeEnum - Federal office candidate runs for: H, S or P
type GetCandidatesTotalsAggregatesOfficeEnum string

const (
	GetCandidatesTotalsAggregatesOfficeEnumUnknown GetCandidatesTotalsAggregatesOfficeEnum = ""
	GetCandidatesTotalsAggregatesOfficeEnumH       GetCandidatesTotalsAggregatesOfficeEnum = "H"
	GetCandidatesTotalsAggregatesOfficeEnumS       GetCandidatesTotalsAggregatesOfficeEnum = "S"
	GetCandidatesTotalsAggregatesOfficeEnumP       GetCandidatesTotalsAggregatesOfficeEnum = "P"
)

func (e *GetCandidatesTotalsAggregatesOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "H":
		fallthrough
	case "S":
		fallthrough
	case "P":
		*e = GetCandidatesTotalsAggregatesOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidatesTotalsAggregatesOfficeEnum: %s", s)
	}
}

// GetCandidatesTotalsAggregatesPartyEnum - Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
type GetCandidatesTotalsAggregatesPartyEnum string

const (
	GetCandidatesTotalsAggregatesPartyEnumUnknown GetCandidatesTotalsAggregatesPartyEnum = ""
	GetCandidatesTotalsAggregatesPartyEnumDem     GetCandidatesTotalsAggregatesPartyEnum = "DEM"
	GetCandidatesTotalsAggregatesPartyEnumRep     GetCandidatesTotalsAggregatesPartyEnum = "REP"
	GetCandidatesTotalsAggregatesPartyEnumOther   GetCandidatesTotalsAggregatesPartyEnum = "OTHER"
)

func (e *GetCandidatesTotalsAggregatesPartyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "DEM":
		fallthrough
	case "REP":
		fallthrough
	case "OTHER":
		*e = GetCandidatesTotalsAggregatesPartyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidatesTotalsAggregatesPartyEnum: %s", s)
	}
}

type GetCandidatesTotalsAggregatesQueryParams struct {
	// Candidate totals aggregate_by (Chose one of dropdown options):
	//         - ' ' grouped by election year
	//         - office grouped by election year, by office
	//         - office-state grouped by election year, by office, by state
	//         - office-state-district grouped by election year, by office, by state, by district
	//         - office-party grouped by election year, by office, by party
	//
	AggregateBy *GetCandidatesTotalsAggregatesAggregateByEnum `queryParam:"style=form,explode=true,name=aggregate_by"`
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District []string `queryParam:"style=form,explode=true,name=district"`
	// `True` indicates that full election period of a candidate.
	// `False` indicates that two year election cycle.
	ElectionFull *bool `queryParam:"style=form,explode=true,name=election_full"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	ElectionYear []int `queryParam:"style=form,explode=true,name=election_year"`
	//  Candidates who are actively seeking office. If no value is specified, all candidates
	// are returned. When True is specified, only active candidates are returned. When False is
	// specified, only inactive candidates are returned.
	//
	IsActiveCandidate *bool `queryParam:"style=form,explode=true,name=is_active_candidate"`
	// Filter records to only those that are applicable to a given two-year
	// period. This cycle follows the traditional House election cycle and
	// subdivides the presidential and Senate elections into comparable
	// two-year blocks. The cycle begins with an odd year and is named for its
	// ending, even year.
	//
	MaxElectionCycle *int `queryParam:"style=form,explode=true,name=max_election_cycle"`
	// Filter records to only those that are applicable to a given two-year
	// period. This cycle follows the traditional House election cycle and
	// subdivides the presidential and Senate elections into comparable
	// two-year blocks. The cycle begins with an odd year and is named for its
	// ending, even year.
	//
	MinElectionCycle *int `queryParam:"style=form,explode=true,name=min_election_cycle"`
	// Federal office candidate runs for: H, S or P
	Office *GetCandidatesTotalsAggregatesOfficeEnum `queryParam:"style=form,explode=true,name=office"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party *GetCandidatesTotalsAggregatesPartyEnum `queryParam:"style=form,explode=true,name=party"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
	//
	Sort []string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// US state or territory where a candidate runs for office
	State []string `queryParam:"style=form,explode=true,name=state"`
}

type GetCandidatesTotalsAggregatesRequest struct {
	QueryParams GetCandidatesTotalsAggregatesQueryParams
}

type GetCandidatesTotalsAggregatesResponse struct {
	CandidateTotalAggregatePage *shared.CandidateTotalAggregatePage
	ContentType                 string
	StatusCode                  int
	RawResponse                 *http.Response
}
