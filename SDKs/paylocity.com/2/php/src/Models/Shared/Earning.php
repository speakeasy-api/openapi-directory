<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Earning - The employee earning model
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Earning
{
    /**
     * Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10
     * 
     * @var ?string $agency
     */
	#[\JMS\Serializer\Annotation\SerializedName('agency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $agency = null;
    
    /**
     * Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2)
     * 
     * @var ?float $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $amount = null;
    
    /**
     * Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2)
     * 
     * @var ?float $annualMaximum
     */
	#[\JMS\Serializer\Annotation\SerializedName('annualMaximum')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $annualMaximum = null;
    
    /**
     * Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20
     * 
     * @var ?string $calculationCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('calculationCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $calculationCode = null;
    
    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
     * 
     * @var ?string $costCenter1
     */
	#[\JMS\Serializer\Annotation\SerializedName('costCenter1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $costCenter1 = null;
    
    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
     * 
     * @var ?string $costCenter2
     */
	#[\JMS\Serializer\Annotation\SerializedName('costCenter2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $costCenter2 = null;
    
    /**
     * Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
     * 
     * @var ?string $costCenter3
     */
	#[\JMS\Serializer\Annotation\SerializedName('costCenter3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $costCenter3 = null;
    
    /**
     * Earning code. Must match Company setup. <br  />Max length: 10
     * 
     * @var string $earningCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('earningCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $earningCode;
    
    /**
     * Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     * 
     * @var ?string $effectiveDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('effectiveDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $effectiveDate = null;
    
    /**
     * Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     * 
     * @var ?string $endDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('endDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $endDate = null;
    
    /**
     * Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5
     * 
     * @var ?string $frequency
     */
	#[\JMS\Serializer\Annotation\SerializedName('frequency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $frequency = null;
    
    /**
     * Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2)
     * 
     * @var ?float $goal
     */
	#[\JMS\Serializer\Annotation\SerializedName('goal')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $goal = null;
    
    /**
     * The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2)
     * 
     * @var ?float $hoursOrUnits
     */
	#[\JMS\Serializer\Annotation\SerializedName('hoursOrUnits')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $hoursOrUnits = null;
    
    /**
     * Used for ACA. If not entered, defaulted to Company earning setup.
     * 
     * @var ?bool $isSelfInsured
     */
	#[\JMS\Serializer\Annotation\SerializedName('isSelfInsured')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isSelfInsured = null;
    
    /**
     * Job code associated with earnings. Must match Company setup.<br  /> Max length: 20
     * 
     * @var ?string $jobCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('jobCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $jobCode = null;
    
    /**
     * Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50
     * 
     * @var ?string $miscellaneousInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('miscellaneousInfo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $miscellaneousInfo = null;
    
    /**
     * Amount already paid to employee toward goal. <br  /> Decimal(12,2)
     * 
     * @var ?float $paidTowardsGoal
     */
	#[\JMS\Serializer\Annotation\SerializedName('paidTowardsGoal')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $paidTowardsGoal = null;
    
    /**
     * Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2)
     * 
     * @var ?float $payPeriodMaximum
     */
	#[\JMS\Serializer\Annotation\SerializedName('payPeriodMaximum')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $payPeriodMaximum = null;
    
    /**
     * Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2)
     * 
     * @var ?float $payPeriodMinimum
     */
	#[\JMS\Serializer\Annotation\SerializedName('payPeriodMinimum')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $payPeriodMinimum = null;
    
    /**
     * Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2)
     * 
     * @var ?float $rate
     */
	#[\JMS\Serializer\Annotation\SerializedName('rate')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $rate = null;
    
    /**
     * Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10
     * 
     * @var ?string $rateCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('rateCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $rateCode = null;
    
    /**
     * Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     * 
     * @var string $startDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('startDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $startDate;
    
	public function __construct()
	{
		$this->agency = null;
		$this->amount = null;
		$this->annualMaximum = null;
		$this->calculationCode = null;
		$this->costCenter1 = null;
		$this->costCenter2 = null;
		$this->costCenter3 = null;
		$this->earningCode = "";
		$this->effectiveDate = null;
		$this->endDate = null;
		$this->frequency = null;
		$this->goal = null;
		$this->hoursOrUnits = null;
		$this->isSelfInsured = null;
		$this->jobCode = null;
		$this->miscellaneousInfo = null;
		$this->paidTowardsGoal = null;
		$this->payPeriodMaximum = null;
		$this->payPeriodMinimum = null;
		$this->rate = null;
		$this->rateCode = null;
		$this->startDate = "";
	}
}
