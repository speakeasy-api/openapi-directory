// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListTechniqueVersionDirectivesPathParams struct {
	// Technique name
	TechniqueName string `pathParam:"style=simple,explode=false,name=techniqueName"`
	// Technique version
	TechniqueVersion string `pathParam:"style=simple,explode=false,name=techniqueVersion"`
}

type ListTechniqueVersionDirectivesRequest struct {
	PathParams ListTechniqueVersionDirectivesPathParams
}

// ListTechniqueVersionDirectives200ApplicationJSONActionEnum - The id of the action
type ListTechniqueVersionDirectives200ApplicationJSONActionEnum string

const (
	ListTechniqueVersionDirectives200ApplicationJSONActionEnumListTechniqueDirectives ListTechniqueVersionDirectives200ApplicationJSONActionEnum = "listTechniqueDirectives"
)

func (e *ListTechniqueVersionDirectives200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "listTechniqueDirectives":
		*e = ListTechniqueVersionDirectives200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTechniqueVersionDirectives200ApplicationJSONActionEnum: %s", s)
	}
}

type ListTechniqueVersionDirectives200ApplicationJSONData struct {
	Directives []shared.Directive `json:"directives"`
}

// ListTechniqueVersionDirectives200ApplicationJSONResultEnum - Result of the request
type ListTechniqueVersionDirectives200ApplicationJSONResultEnum string

const (
	ListTechniqueVersionDirectives200ApplicationJSONResultEnumSuccess ListTechniqueVersionDirectives200ApplicationJSONResultEnum = "success"
	ListTechniqueVersionDirectives200ApplicationJSONResultEnumError   ListTechniqueVersionDirectives200ApplicationJSONResultEnum = "error"
)

func (e *ListTechniqueVersionDirectives200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ListTechniqueVersionDirectives200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTechniqueVersionDirectives200ApplicationJSONResultEnum: %s", s)
	}
}

// ListTechniqueVersionDirectives200ApplicationJSON - Techniques information
type ListTechniqueVersionDirectives200ApplicationJSON struct {
	// The id of the action
	Action ListTechniqueVersionDirectives200ApplicationJSONActionEnum `json:"action"`
	Data   ListTechniqueVersionDirectives200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ListTechniqueVersionDirectives200ApplicationJSONResultEnum `json:"result"`
}

type ListTechniqueVersionDirectivesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Techniques information
	ListTechniqueVersionDirectives200ApplicationJSONObject *ListTechniqueVersionDirectives200ApplicationJSON
}
