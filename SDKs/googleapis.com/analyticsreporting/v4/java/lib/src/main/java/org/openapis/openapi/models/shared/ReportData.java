/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReportData - The data part of the report.
 */
public class ReportData {
    /**
     * The last time the data in the report was refreshed. All the hits received before this timestamp are included in the calculation of the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataLastRefreshed")
    public String dataLastRefreshed;

    public ReportData withDataLastRefreshed(String dataLastRefreshed) {
        this.dataLastRefreshed = dataLastRefreshed;
        return this;
    }
    
    /**
     * If empty reason is specified, the report is empty for this reason.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emptyReason")
    public String emptyReason;

    public ReportData withEmptyReason(String emptyReason) {
        this.emptyReason = emptyReason;
        return this;
    }
    
    /**
     * Indicates if response to this request is golden or not. Data is golden when the exact same request will not produce any new results if asked at a later point in time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDataGolden")
    public Boolean isDataGolden;

    public ReportData withIsDataGolden(Boolean isDataGolden) {
        this.isDataGolden = isDataGolden;
        return this;
    }
    
    /**
     * Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximums")
    public DateRangeValues[] maximums;

    public ReportData withMaximums(DateRangeValues[] maximums) {
        this.maximums = maximums;
        return this;
    }
    
    /**
     * Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimums")
    public DateRangeValues[] minimums;

    public ReportData withMinimums(DateRangeValues[] minimums) {
        this.minimums = minimums;
        return this;
    }
    
    /**
     * Total number of matching rows for this query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowCount")
    public Integer rowCount;

    public ReportData withRowCount(Integer rowCount) {
        this.rowCount = rowCount;
        return this;
    }
    
    /**
     * There's one ReportRow for every unique combination of dimensions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rows")
    public ReportRow[] rows;

    public ReportData withRows(ReportRow[] rows) {
        this.rows = rows;
        return this;
    }
    
    /**
     * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples read, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samplesReadCounts")
    public String[] samplesReadCounts;

    public ReportData withSamplesReadCounts(String[] samplesReadCounts) {
        this.samplesReadCounts = samplesReadCounts;
        return this;
    }
    
    /**
     * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples present, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samplingSpaceSizes")
    public String[] samplingSpaceSizes;

    public ReportData withSamplingSpaceSizes(String[] samplingSpaceSizes) {
        this.samplingSpaceSizes = samplingSpaceSizes;
        return this;
    }
    
    /**
     * For each requested date range, for the set of all rows that match the query, every requested value format gets a total. The total for a value format is computed by first totaling the metrics mentioned in the value format and then evaluating the value format as a scalar expression. E.g., The "totals" for `3 / (ga:sessions + 2)` we compute `3 / ((sum of all relevant ga:sessions) + 2)`. Totals are computed before pagination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totals")
    public DateRangeValues[] totals;

    public ReportData withTotals(DateRangeValues[] totals) {
        this.totals = totals;
        return this;
    }
    
    public ReportData(){}
}
