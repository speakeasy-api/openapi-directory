/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * A business name is a name or title under which an organisation conducts a business.
 *
 * @remarks
 *
 */
export class OrganisationsBusinessNames {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a business name
   *
   * @remarks
   * Delete a business name
   *
   */
  deleteOrganisationsPartyIdBusinessNamesProductId(
    req: operations.DeleteOrganisationsPartyIdBusinessNamesProductIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOrganisationsPartyIdBusinessNamesProductIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteOrganisationsPartyIdBusinessNamesProductIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/business-names/{productId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOrganisationsPartyIdBusinessNamesProductIdResponse =
        new operations.DeleteOrganisationsPartyIdBusinessNamesProductIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of business names
   */
  getOrganisationsPartyIdBusinessNames(
    req: operations.GetOrganisationsPartyIdBusinessNamesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganisationsPartyIdBusinessNamesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganisationsPartyIdBusinessNamesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/business-names",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganisationsPartyIdBusinessNamesResponse =
        new operations.GetOrganisationsPartyIdBusinessNamesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.businessNames = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.businessNames = utils.objectToClass(
              httpRes?.data,
              shared.BusinessName,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a business name
   *
   * @remarks
   * Retrieve a business name
   *
   */
  getOrganisationsPartyIdBusinessNamesProductId(
    req: operations.GetOrganisationsPartyIdBusinessNamesProductIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganisationsPartyIdBusinessNamesProductIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganisationsPartyIdBusinessNamesProductIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/business-names/{productId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganisationsPartyIdBusinessNamesProductIdResponse =
        new operations.GetOrganisationsPartyIdBusinessNamesProductIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.businessName = utils.objectToClass(
              httpRes?.data,
              shared.BusinessName
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a business name
   *
   * @remarks
   * Create a business name
   *
   */
  postOrganisationsPartyIdBusinessNames(
    req: operations.PostOrganisationsPartyIdBusinessNamesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOrganisationsPartyIdBusinessNamesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOrganisationsPartyIdBusinessNamesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/business-names",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "businessNameInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOrganisationsPartyIdBusinessNamesResponse =
        new operations.PostOrganisationsPartyIdBusinessNamesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.businessName = utils.objectToClass(
              httpRes?.data,
              shared.BusinessName
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArgument = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArgument
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a business name
   *
   * @remarks
   * Update a business name
   *
   */
  putOrganisationsPartyIdBusinessNamesProductId(
    req: operations.PutOrganisationsPartyIdBusinessNamesProductIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutOrganisationsPartyIdBusinessNamesProductIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutOrganisationsPartyIdBusinessNamesProductIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/business-names/{productId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "businessNameInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutOrganisationsPartyIdBusinessNamesProductIdResponse =
        new operations.PutOrganisationsPartyIdBusinessNamesProductIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.businessName = utils.objectToClass(
              httpRes?.data,
              shared.BusinessName
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArgument = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArgument
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }
}
