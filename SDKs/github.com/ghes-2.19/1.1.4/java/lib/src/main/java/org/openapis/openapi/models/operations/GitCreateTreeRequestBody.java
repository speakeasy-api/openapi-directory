/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GitCreateTreeRequestBody {
    /**
     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
     * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_tree")
    public String baseTree;
    public GitCreateTreeRequestBody withBaseTree(String baseTree) {
        this.baseTree = baseTree;
        return this;
    }
    
    /**
     * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
     */
    @JsonProperty("tree")
    public GitCreateTreeRequestBodyTree[] tree;
    public GitCreateTreeRequestBody withTree(GitCreateTreeRequestBodyTree[] tree) {
        this.tree = tree;
        return this;
    }
    
}
