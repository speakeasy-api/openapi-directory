// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExtensionConfigIntentAddMediaOptEnum string

const (
	ExtensionConfigIntentAddMediaOptEnumResolveMediaDestination ExtensionConfigIntentAddMediaOptEnum = "resolveMediaDestination"
	ExtensionConfigIntentAddMediaOptEnumConfirm                 ExtensionConfigIntentAddMediaOptEnum = "confirm"
)

func (e *ExtensionConfigIntentAddMediaOptEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resolveMediaDestination":
		fallthrough
	case "confirm":
		*e = ExtensionConfigIntentAddMediaOptEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExtensionConfigIntentAddMediaOptEnum: %s", s)
	}
}

type ExtensionConfigIntentAddMedia struct {
	Hdr map[string]interface{}
	Opt []ExtensionConfigIntentAddMediaOptEnum
	URL *string
}

type ExtensionConfigIntentPlayMediaOptEnum string

const (
	ExtensionConfigIntentPlayMediaOptEnumResolvePlayShuffled          ExtensionConfigIntentPlayMediaOptEnum = "resolvePlayShuffled"
	ExtensionConfigIntentPlayMediaOptEnumResolvePlaybackRepeatMode    ExtensionConfigIntentPlayMediaOptEnum = "resolvePlaybackRepeatMode"
	ExtensionConfigIntentPlayMediaOptEnumResolvePlaybackQueueLocation ExtensionConfigIntentPlayMediaOptEnum = "resolvePlaybackQueueLocation"
	ExtensionConfigIntentPlayMediaOptEnumResolveResumePlayback        ExtensionConfigIntentPlayMediaOptEnum = "resolveResumePlayback"
)

func (e *ExtensionConfigIntentPlayMediaOptEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resolvePlayShuffled":
		fallthrough
	case "resolvePlaybackRepeatMode":
		fallthrough
	case "resolvePlaybackQueueLocation":
		fallthrough
	case "resolveResumePlayback":
		*e = ExtensionConfigIntentPlayMediaOptEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExtensionConfigIntentPlayMediaOptEnum: %s", s)
	}
}

type ExtensionConfigIntentPlayMedia struct {
	Hdr map[string]interface{}
	Opt []ExtensionConfigIntentPlayMediaOptEnum
	URL *string
}

type ExtensionConfigIntentUpdateMediaAffinityOptEnum string

const (
	ExtensionConfigIntentUpdateMediaAffinityOptEnumResolveAffinityType ExtensionConfigIntentUpdateMediaAffinityOptEnum = "resolveAffinityType"
)

func (e *ExtensionConfigIntentUpdateMediaAffinityOptEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resolveAffinityType":
		*e = ExtensionConfigIntentUpdateMediaAffinityOptEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExtensionConfigIntentUpdateMediaAffinityOptEnum: %s", s)
	}
}

type ExtensionConfigIntentUpdateMediaAffinity struct {
	Hdr map[string]interface{}
	Opt []ExtensionConfigIntentUpdateMediaAffinityOptEnum
	URL *string
}

type ExtensionConfigIntent struct {
	AddMedia            *ExtensionConfigIntentAddMedia
	Hdr                 map[string]interface{}
	PlayMedia           ExtensionConfigIntentPlayMedia
	UpdateMediaAffinity *ExtensionConfigIntentUpdateMediaAffinity
}

type ExtensionConfigMediaQueuesPlayMedia struct {
	Hdr map[string]interface{}
	URL *string
}

type ExtensionConfigMediaQueuesUpdateActivity struct {
	Hdr map[string]interface{}
	URL *string
}

type ExtensionConfigMediaQueues struct {
	Hdr            map[string]interface{}
	PlayMedia      *ExtensionConfigMediaQueuesPlayMedia
	UpdateActivity *ExtensionConfigMediaQueuesUpdateActivity
}

type ExtensionConfigMedia struct {
	Queues *ExtensionConfigMediaQueues
}

type ExtensionConfig struct {
	Hdr     map[string]interface{}
	Intent  ExtensionConfigIntent
	Media   ExtensionConfigMedia
	URL     *string
	Version string
}
