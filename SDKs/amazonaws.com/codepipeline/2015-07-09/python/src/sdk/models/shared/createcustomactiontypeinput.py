"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import actioncategory_enum as shared_actioncategory_enum
from ..shared import actionconfigurationproperty as shared_actionconfigurationproperty
from ..shared import actiontypesettings as shared_actiontypesettings
from ..shared import artifactdetails as shared_artifactdetails
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCustomActionTypeInput:
    r"""Represents the input of a CreateCustomActionType operation."""
    
    category: shared_actioncategory_enum.ActionCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})  
    input_artifact_details: shared_artifactdetails.ArtifactDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputArtifactDetails') }})  
    output_artifact_details: shared_artifactdetails.ArtifactDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputArtifactDetails') }})  
    provider: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})  
    configuration_properties: Optional[list[shared_actionconfigurationproperty.ActionConfigurationProperty]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurationProperties'), 'exclude': lambda f: f is None }})  
    settings: Optional[shared_actiontypesettings.ActionTypeSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    