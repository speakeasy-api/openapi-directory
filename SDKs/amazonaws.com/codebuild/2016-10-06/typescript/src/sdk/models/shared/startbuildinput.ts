/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BuildStatusConfig } from "./buildstatusconfig";
import { ComputeTypeEnum } from "./computetypeenum";
import { EnvironmentTypeEnum } from "./environmenttypeenum";
import { EnvironmentVariable } from "./environmentvariable";
import { GitSubmodulesConfig } from "./gitsubmodulesconfig";
import { ImagePullCredentialsTypeEnum } from "./imagepullcredentialstypeenum";
import { LogsConfig } from "./logsconfig";
import { ProjectArtifacts } from "./projectartifacts";
import { ProjectCache } from "./projectcache";
import { ProjectSource } from "./projectsource";
import { ProjectSourceVersion } from "./projectsourceversion";
import { RegistryCredential } from "./registrycredential";
import { SourceAuth } from "./sourceauth";
import { SourceTypeEnum } from "./sourcetypeenum";
import { Expose, Type } from "class-transformer";

export class StartBuildInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "artifactsOverride" })
  @Type(() => ProjectArtifacts)
  artifactsOverride?: ProjectArtifacts;

  @SpeakeasyMetadata()
  @Expose({ name: "buildStatusConfigOverride" })
  @Type(() => BuildStatusConfig)
  buildStatusConfigOverride?: BuildStatusConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "buildspecOverride" })
  buildspecOverride?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "cacheOverride" })
  @Type(() => ProjectCache)
  cacheOverride?: ProjectCache;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateOverride" })
  certificateOverride?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "computeTypeOverride" })
  computeTypeOverride?: ComputeTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "debugSessionEnabled" })
  debugSessionEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "encryptionKeyOverride" })
  encryptionKeyOverride?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "environmentTypeOverride" })
  environmentTypeOverride?: EnvironmentTypeEnum;

  @SpeakeasyMetadata({ elemType: EnvironmentVariable })
  @Expose({ name: "environmentVariablesOverride" })
  @Type(() => EnvironmentVariable)
  environmentVariablesOverride?: EnvironmentVariable[];

  @SpeakeasyMetadata()
  @Expose({ name: "gitCloneDepthOverride" })
  gitCloneDepthOverride?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "gitSubmodulesConfigOverride" })
  @Type(() => GitSubmodulesConfig)
  gitSubmodulesConfigOverride?: GitSubmodulesConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "imageOverride" })
  imageOverride?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "imagePullCredentialsTypeOverride" })
  imagePullCredentialsTypeOverride?: ImagePullCredentialsTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "insecureSslOverride" })
  insecureSslOverride?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "logsConfigOverride" })
  @Type(() => LogsConfig)
  logsConfigOverride?: LogsConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "privilegedModeOverride" })
  privilegedModeOverride?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "projectName" })
  projectName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "queuedTimeoutInMinutesOverride" })
  queuedTimeoutInMinutesOverride?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "registryCredentialOverride" })
  @Type(() => RegistryCredential)
  registryCredentialOverride?: RegistryCredential;

  @SpeakeasyMetadata()
  @Expose({ name: "reportBuildStatusOverride" })
  reportBuildStatusOverride?: boolean;

  @SpeakeasyMetadata({ elemType: ProjectArtifacts })
  @Expose({ name: "secondaryArtifactsOverride" })
  @Type(() => ProjectArtifacts)
  secondaryArtifactsOverride?: ProjectArtifacts[];

  @SpeakeasyMetadata({ elemType: ProjectSource })
  @Expose({ name: "secondarySourcesOverride" })
  @Type(() => ProjectSource)
  secondarySourcesOverride?: ProjectSource[];

  @SpeakeasyMetadata({ elemType: ProjectSourceVersion })
  @Expose({ name: "secondarySourcesVersionOverride" })
  @Type(() => ProjectSourceVersion)
  secondarySourcesVersionOverride?: ProjectSourceVersion[];

  @SpeakeasyMetadata()
  @Expose({ name: "serviceRoleOverride" })
  serviceRoleOverride?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceAuthOverride" })
  @Type(() => SourceAuth)
  sourceAuthOverride?: SourceAuth;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceLocationOverride" })
  sourceLocationOverride?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceTypeOverride" })
  sourceTypeOverride?: SourceTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceVersion" })
  sourceVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "timeoutInMinutesOverride" })
  timeoutInMinutesOverride?: number;
}
