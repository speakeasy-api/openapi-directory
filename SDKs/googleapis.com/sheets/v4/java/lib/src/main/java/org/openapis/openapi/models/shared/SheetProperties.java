/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SheetProperties - Properties of a sheet.
 */
public class SheetProperties {
    /**
     * Additional properties of a DATA_SOURCE sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceSheetProperties")
    public DataSourceSheetProperties dataSourceSheetProperties;

    public SheetProperties withDataSourceSheetProperties(DataSourceSheetProperties dataSourceSheetProperties) {
        this.dataSourceSheetProperties = dataSourceSheetProperties;
        return this;
    }
    
    /**
     * Properties of a grid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gridProperties")
    public GridProperties gridProperties;

    public SheetProperties withGridProperties(GridProperties gridProperties) {
        this.gridProperties = gridProperties;
        return this;
    }
    
    /**
     * True if the sheet is hidden in the UI, false if it's visible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    public Boolean hidden;

    public SheetProperties withHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }
    
    /**
     * The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in "before the move" indexes. For example, if there were 3 sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    public Integer index;

    public SheetProperties withIndex(Integer index) {
        this.index = index;
        return this;
    }
    
    /**
     * True if the sheet is an RTL sheet instead of an LTR sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rightToLeft")
    public Boolean rightToLeft;

    public SheetProperties withRightToLeft(Boolean rightToLeft) {
        this.rightToLeft = rightToLeft;
        return this;
    }
    
    /**
     * The ID of the sheet. Must be non-negative. This field cannot be changed once set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sheetId")
    public Integer sheetId;

    public SheetProperties withSheetId(Integer sheetId) {
        this.sheetId = sheetId;
        return this;
    }
    
    /**
     * The type of sheet. Defaults to GRID. This field cannot be changed once set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sheetType")
    public SheetPropertiesSheetTypeEnum sheetType;

    public SheetProperties withSheetType(SheetPropertiesSheetTypeEnum sheetType) {
        this.sheetType = sheetType;
        return this;
    }
    
    /**
     * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha &lt;= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i &lt; missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tabColor")
    public Color tabColor;

    public SheetProperties withTabColor(Color tabColor) {
        this.tabColor = tabColor;
        return this;
    }
    
    /**
     * A color value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tabColorStyle")
    public ColorStyle tabColorStyle;

    public SheetProperties withTabColorStyle(ColorStyle tabColorStyle) {
        this.tabColorStyle = tabColorStyle;
        return this;
    }
    
    /**
     * The name of the sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public SheetProperties withTitle(String title) {
        this.title = title;
        return this;
    }
    
    public SheetProperties(){}
}
