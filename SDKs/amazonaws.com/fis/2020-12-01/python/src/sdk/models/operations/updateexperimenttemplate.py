"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import experimenttemplatecloudwatchlogslogconfigurationinput as shared_experimenttemplatecloudwatchlogslogconfigurationinput
from ..shared import experimenttemplates3logconfigurationinput as shared_experimenttemplates3logconfigurationinput
from ..shared import updateexperimenttemplateactioninputitem as shared_updateexperimenttemplateactioninputitem
from ..shared import updateexperimenttemplateresponse as shared_updateexperimenttemplateresponse
from ..shared import updateexperimenttemplatestopconditioninput as shared_updateexperimenttemplatestopconditioninput
from ..shared import updateexperimenttemplatetargetinput as shared_updateexperimenttemplatetargetinput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateExperimentTemplateRequestBodyLogConfiguration:
    r"""Specifies the configuration for experiment logging."""
    
    cloud_watch_logs_configuration: Optional[shared_experimenttemplatecloudwatchlogslogconfigurationinput.ExperimentTemplateCloudWatchLogsLogConfigurationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudWatchLogsConfiguration'), 'exclude': lambda f: f is None }})  
    log_schema_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logSchemaVersion'), 'exclude': lambda f: f is None }})  
    s3_configuration: Optional[shared_experimenttemplates3logconfigurationinput.ExperimentTemplateS3LogConfigurationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3Configuration'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateExperimentTemplateRequestBody:
    
    actions: Optional[dict[str, shared_updateexperimenttemplateactioninputitem.UpdateExperimentTemplateActionInputItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions'), 'exclude': lambda f: f is None }})
    r"""The actions for the experiment."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description for the template."""  
    log_configuration: Optional[UpdateExperimentTemplateRequestBodyLogConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logConfiguration'), 'exclude': lambda f: f is None }})
    r"""Specifies the configuration for experiment logging."""  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf."""  
    stop_conditions: Optional[list[shared_updateexperimenttemplatestopconditioninput.UpdateExperimentTemplateStopConditionInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopConditions'), 'exclude': lambda f: f is None }})
    r"""The stop conditions for the experiment."""  
    targets: Optional[dict[str, shared_updateexperimenttemplatetargetinput.UpdateExperimentTemplateTargetInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets'), 'exclude': lambda f: f is None }})
    r"""The targets for the experiment."""  
    

@dataclasses.dataclass
class UpdateExperimentTemplateRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The ID of the experiment template."""  
    request_body: UpdateExperimentTemplateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateExperimentTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    update_experiment_template_response: Optional[shared_updateexperimenttemplateresponse.UpdateExperimentTemplateResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    