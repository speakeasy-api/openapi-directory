<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Camera 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates new quality retention profile for this network.
     * 
     * Creates new quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse
     */
	public function createNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new camera wireless profile for this network.
     * 
     * Creates a new camera wireless profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse
     */
	public function createNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create custom analytics artifact
     * 
     * Create custom analytics artifact. Returns an artifact upload URL with expiry time. Upload the artifact file with a put request to the returned upload URL before its expiry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactResponse
     */
	public function createOrganizationCameraCustomAnalyticsArtifact(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationCameraCustomAnalyticsArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationCameraCustomAnalyticsArtifact201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing quality retention profile for this network.
     * 
     * Delete an existing quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse
     */
	public function deleteNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an existing camera wireless profile for this network.
     * 
     * Delete an existing camera wireless profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse
     */
	public function deleteNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete Custom Analytics Artifact
     * 
     * Delete Custom Analytics Artifact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactResponse
     */
	public function deleteOrganizationCameraCustomAnalyticsArtifact(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationCameraCustomAnalyticsArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     * 
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotResponse
     */
	public function generateDeviceCameraSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/generateSnapshot', \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateDeviceCameraSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateDeviceCameraSnapshot202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns live state from camera of analytics zones
     * 
     * Returns live state from camera of analytics zones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveResponse
     */
	public function getDeviceCameraAnalyticsLive(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/live', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsLiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsLive200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns an overview of aggregate analytics data for a timespan
     * 
     * Returns an overview of aggregate analytics data for a timespan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewResponse
     */
	public function getDeviceCameraAnalyticsOverview(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/overview', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsOverviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsOverview200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns most recent record for analytics zones
     * 
     * Returns most recent record for analytics zones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentResponse
     */
	public function getDeviceCameraAnalyticsRecent(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/recent', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsRecentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsRecent200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records for analytic zones
     * 
     * Return historical records for analytic zones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryResponse
     */
	public function getDeviceCameraAnalyticsZoneHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/zones/{zoneId}/history', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZoneHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsZoneHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all configured analytic zones for this camera
     * 
     * Returns all configured analytic zones for this camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesResponse
     */
	public function getDeviceCameraAnalyticsZones(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/analytics/zones', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraAnalyticsZonesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraAnalyticsZones200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return custom analytics settings for a camera
     * 
     * Return custom analytics settings for a camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsResponse
     */
	public function getDeviceCameraCustomAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/customAnalytics', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraCustomAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraCustomAnalytics200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns quality and retention settings for the given camera
     * 
     * Returns quality and retention settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse
     */
	public function getDeviceCameraQualityAndRetention(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/qualityAndRetention', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraQualityAndRetentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraQualityAndRetention200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns sense settings for a given camera
     * 
     * Returns sense settings for a given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseResponse
     */
	public function getDeviceCameraSense(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/sense', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraSense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the MV Sense object detection model list for the given camera
     * 
     * Returns the MV Sense object detection model list for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsResponse
     */
	public function getDeviceCameraSenseObjectDetectionModels(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/sense/objectDetectionModels', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraSenseObjectDetectionModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraSenseObjectDetectionModels200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns video link to the specified camera
     * 
     * Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkResponse
     */
	public function getDeviceCameraVideoLink(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/videoLink', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraVideoLink200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns video settings for the given camera
     * 
     * Returns video settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse
     */
	public function getDeviceCameraVideoSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/video/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraVideoSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraVideoSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns wireless profile assigned to the given camera
     * 
     * Returns wireless profile assigned to the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse
     */
	public function getDeviceCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceCameraWirelessProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single quality retention profile
     * 
     * Retrieve a single quality retention profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse
     */
	public function getNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the quality retention profiles for this network
     * 
     * List the quality retention profiles for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse
     */
	public function getNetworkCameraQualityRetentionProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraQualityRetentionProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all camera recording schedules.
     * 
     * Returns a list of all camera recording schedules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesResponse
     */
	public function getNetworkCameraSchedules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/schedules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraSchedules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single camera wireless profile.
     * 
     * Retrieve a single camera wireless profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse
     */
	public function getNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the camera wireless profiles for this network.
     * 
     * List the camera wireless profiles for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse
     */
	public function getNetworkCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraWirelessProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Custom Analytics Artifact
     * 
     * Get Custom Analytics Artifact
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactResponse
     */
	public function getOrganizationCameraCustomAnalyticsArtifact(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCameraCustomAnalyticsArtifact200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Custom Analytics Artifacts
     * 
     * List Custom Analytics Artifacts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsResponse
     */
	public function getOrganizationCameraCustomAnalyticsArtifacts(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/customAnalytics/artifacts', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraCustomAnalyticsArtifactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCameraCustomAnalyticsArtifacts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch onboarding status of cameras
     * 
     * Fetch onboarding status of cameras
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse
     */
	public function getOrganizationCameraOnboardingStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/onboarding/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationCameraOnboardingStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationCameraOnboardingStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update custom analytics settings for a camera
     * 
     * Update custom analytics settings for a camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsResponse
     */
	public function updateDeviceCameraCustomAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/customAnalytics', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraCustomAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraCustomAnalytics200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update quality and retention settings for the given camera
     * 
     * Update quality and retention settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse
     */
	public function updateDeviceCameraQualityAndRetention(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/qualityAndRetention', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraQualityAndRetentionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraQualityAndRetention200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update sense settings for the given camera
     * 
     * Update sense settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseResponse
     */
	public function updateDeviceCameraSense(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/sense', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraSenseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraSense200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update video settings for the given camera
     * 
     * Update video settings for the given camera
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse
     */
	public function updateDeviceCameraVideoSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/video/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraVideoSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraVideoSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign wireless profiles to the given camera
     * 
     * Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse
     */
	public function updateDeviceCameraWirelessProfiles(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/camera/wirelessProfiles', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceCameraWirelessProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceCameraWirelessProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing quality retention profile for this network.
     * 
     * Update an existing quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse
     */
	public function updateNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing camera wireless profile in this network.
     * 
     * Update an existing camera wireless profile in this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse
     */
	public function updateNetworkCameraWirelessProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraWirelessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCameraWirelessProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Notify that credential handoff to camera has completed
     * 
     * Notify that credential handoff to camera has completed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse
     */
	public function updateOrganizationCameraOnboardingStatuses(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/camera/onboarding/statuses', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationCameraOnboardingStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationCameraOnboardingStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}