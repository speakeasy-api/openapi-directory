"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import operatingsystem_enum as shared_operatingsystem_enum
from ..shared import patchaction_enum as shared_patchaction_enum
from ..shared import patchcompliancelevel_enum as shared_patchcompliancelevel_enum
from ..shared import patchfiltergroup as shared_patchfiltergroup
from ..shared import patchrulegroup as shared_patchrulegroup
from ..shared import patchsource as shared_patchsource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BaselineOverride:
    r"""Defines the basic information about a patch baseline override."""
    
    approval_rules: Optional[shared_patchrulegroup.PatchRuleGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovalRules'), 'exclude': lambda f: f is None }})
    r"""A set of rules defining the approval rules for a patch baseline."""  
    approved_patches: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovedPatches'), 'exclude': lambda f: f is None }})  
    approved_patches_compliance_level: Optional[shared_patchcompliancelevel_enum.PatchComplianceLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovedPatchesComplianceLevel'), 'exclude': lambda f: f is None }})  
    approved_patches_enable_non_security: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovedPatchesEnableNonSecurity'), 'exclude': lambda f: f is None }})  
    global_filters: Optional[shared_patchfiltergroup.PatchFilterGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalFilters'), 'exclude': lambda f: f is None }})
    r"""A set of patch filters, typically used for approval rules."""  
    operating_system: Optional[shared_operatingsystem_enum.OperatingSystemEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OperatingSystem'), 'exclude': lambda f: f is None }})  
    rejected_patches: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RejectedPatches'), 'exclude': lambda f: f is None }})  
    rejected_patches_action: Optional[shared_patchaction_enum.PatchActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RejectedPatchesAction'), 'exclude': lambda f: f is None }})  
    sources: Optional[list[shared_patchsource.PatchSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sources'), 'exclude': lambda f: f is None }})  
    