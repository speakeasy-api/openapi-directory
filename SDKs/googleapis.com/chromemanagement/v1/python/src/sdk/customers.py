"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def chromemanagement_customers_apps_count_chrome_app_requests(self, request: operations.ChromemanagementCustomersAppsCountChromeAppRequestsRequest, security: operations.ChromemanagementCustomersAppsCountChromeAppRequestsSecurity) -> operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse:
        r"""Generate summary of app installation requests."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersAppsCountChromeAppRequestsRequest, base_url, '/v1/{customer}/apps:countChromeAppRequests', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersAppsCountChromeAppRequestsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountChromeAppRequestsResponse])
                res.google_chrome_management_v1_count_chrome_app_requests_response = out

        return res

    def chromemanagement_customers_reports_count_chrome_browsers_needing_attention(self, request: operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest, security: operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionSecurity) -> operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse:
        r"""Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest, base_url, '/v1/{customer}/reports:countChromeBrowsersNeedingAttention', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse])
                res.google_chrome_management_v1_count_chrome_browsers_needing_attention_response = out

        return res

    def chromemanagement_customers_reports_count_chrome_devices_reaching_auto_expiration_date(self, request: operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest, security: operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateSecurity) -> operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse:
        r"""Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest, base_url, '/v1/{customer}/reports:countChromeDevicesReachingAutoExpirationDate', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse])
                res.google_chrome_management_v1_count_chrome_devices_reaching_auto_expiration_date_response = out

        return res

    def chromemanagement_customers_reports_count_chrome_devices_that_need_attention(self, request: operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest, security: operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionSecurity) -> operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse:
        r"""Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest, base_url, '/v1/{customer}/reports:countChromeDevicesThatNeedAttention', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse])
                res.google_chrome_management_v1_count_chrome_devices_that_need_attention_response = out

        return res

    def chromemanagement_customers_reports_count_chrome_hardware_fleet_devices(self, request: operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest, security: operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesSecurity) -> operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse:
        r"""Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest, base_url, '/v1/{customer}/reports:countChromeHardwareFleetDevices', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse])
                res.google_chrome_management_v1_count_chrome_hardware_fleet_devices_response = out

        return res

    def chromemanagement_customers_reports_count_chrome_versions(self, request: operations.ChromemanagementCustomersReportsCountChromeVersionsRequest, security: operations.ChromemanagementCustomersReportsCountChromeVersionsSecurity) -> operations.ChromemanagementCustomersReportsCountChromeVersionsResponse:
        r"""Generate report of installed Chrome versions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountChromeVersionsRequest, base_url, '/v1/{customer}/reports:countChromeVersions', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountChromeVersionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountChromeVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountChromeVersionsResponse])
                res.google_chrome_management_v1_count_chrome_versions_response = out

        return res

    def chromemanagement_customers_reports_count_installed_apps(self, request: operations.ChromemanagementCustomersReportsCountInstalledAppsRequest, security: operations.ChromemanagementCustomersReportsCountInstalledAppsSecurity) -> operations.ChromemanagementCustomersReportsCountInstalledAppsResponse:
        r"""Generate report of app installations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountInstalledAppsRequest, base_url, '/v1/{customer}/reports:countInstalledApps', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountInstalledAppsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountInstalledAppsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountInstalledAppsResponse])
                res.google_chrome_management_v1_count_installed_apps_response = out

        return res

    def chromemanagement_customers_reports_count_print_jobs_by_printer(self, request: operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterRequest, security: operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterSecurity) -> operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse:
        r"""Get a summary of printing done by each printer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterRequest, base_url, '/v1/{customer}/reports:countPrintJobsByPrinter', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountPrintJobsByPrinterResponse])
                res.google_chrome_management_v1_count_print_jobs_by_printer_response = out

        return res

    def chromemanagement_customers_reports_count_print_jobs_by_user(self, request: operations.ChromemanagementCustomersReportsCountPrintJobsByUserRequest, security: operations.ChromemanagementCustomersReportsCountPrintJobsByUserSecurity) -> operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse:
        r"""Get a summary of printing done by each user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsCountPrintJobsByUserRequest, base_url, '/v1/{customer}/reports:countPrintJobsByUser', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsCountPrintJobsByUserRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1CountPrintJobsByUserResponse])
                res.google_chrome_management_v1_count_print_jobs_by_user_response = out

        return res

    def chromemanagement_customers_reports_find_installed_app_devices(self, request: operations.ChromemanagementCustomersReportsFindInstalledAppDevicesRequest, security: operations.ChromemanagementCustomersReportsFindInstalledAppDevicesSecurity) -> operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse:
        r"""Generate report of managed Chrome browser devices that have a specified app installed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersReportsFindInstalledAppDevicesRequest, base_url, '/v1/{customer}/reports:findInstalledAppDevices', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersReportsFindInstalledAppDevicesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1FindInstalledAppDevicesResponse])
                res.google_chrome_management_v1_find_installed_app_devices_response = out

        return res

    def chromemanagement_customers_telemetry_devices_list(self, request: operations.ChromemanagementCustomersTelemetryDevicesListRequest, security: operations.ChromemanagementCustomersTelemetryDevicesListSecurity) -> operations.ChromemanagementCustomersTelemetryDevicesListResponse:
        r"""List all telemetry devices."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersTelemetryDevicesListRequest, base_url, '/v1/{parent}/telemetry/devices', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersTelemetryDevicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersTelemetryDevicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1ListTelemetryDevicesResponse])
                res.google_chrome_management_v1_list_telemetry_devices_response = out

        return res

    def chromemanagement_customers_telemetry_events_list(self, request: operations.ChromemanagementCustomersTelemetryEventsListRequest, security: operations.ChromemanagementCustomersTelemetryEventsListSecurity) -> operations.ChromemanagementCustomersTelemetryEventsListResponse:
        r"""List telemetry events."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersTelemetryEventsListRequest, base_url, '/v1/{parent}/telemetry/events', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersTelemetryEventsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersTelemetryEventsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1ListTelemetryEventsResponse])
                res.google_chrome_management_v1_list_telemetry_events_response = out

        return res

    def chromemanagement_customers_telemetry_users_get(self, request: operations.ChromemanagementCustomersTelemetryUsersGetRequest, security: operations.ChromemanagementCustomersTelemetryUsersGetSecurity) -> operations.ChromemanagementCustomersTelemetryUsersGetResponse:
        r"""Get telemetry user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersTelemetryUsersGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersTelemetryUsersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersTelemetryUsersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1TelemetryUser])
                res.google_chrome_management_v1_telemetry_user = out

        return res

    def chromemanagement_customers_telemetry_users_list(self, request: operations.ChromemanagementCustomersTelemetryUsersListRequest, security: operations.ChromemanagementCustomersTelemetryUsersListSecurity) -> operations.ChromemanagementCustomersTelemetryUsersListResponse:
        r"""List all telemetry users."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChromemanagementCustomersTelemetryUsersListRequest, base_url, '/v1/{parent}/telemetry/users', request)
        
        query_params = utils.get_query_params(operations.ChromemanagementCustomersTelemetryUsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromemanagementCustomersTelemetryUsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleChromeManagementV1ListTelemetryUsersResponse])
                res.google_chrome_management_v1_list_telemetry_users_response = out

        return res

    