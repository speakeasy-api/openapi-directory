/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * TLS/SSL Certificates prove the identity of a Server and are used to encrypt client traffic.
 */
export class Certificates {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a Certificate
   *
   * @remarks
   * Deletes a Certificate.
   */
  deleteCertificatesId(
    req: operations.DeleteCertificatesIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCertificatesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCertificatesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/certificates/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCertificatesIdResponse =
        new operations.DeleteCertificatesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get all Certificates
   *
   * @remarks
   * Returns all Certificate objects.
   */
  getCertificates(
    req: operations.GetCertificatesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCertificatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCertificatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/certificates";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCertificatesResponse =
        new operations.GetCertificatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.certificatesResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetCertificatesCertificatesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a Certificate
   *
   * @remarks
   * Gets a specific Certificate object.
   */
  getCertificatesId(
    req: operations.GetCertificatesIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCertificatesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCertificatesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/certificates/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCertificatesIdResponse =
        new operations.GetCertificatesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.certificateResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetCertificatesIdCertificateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Certificate
   *
   * @remarks
   * Creates a new Certificate.
   *
   * The default type **uploaded** allows for uploading your existing `certificate` and `private_key` in PEM format. You have to monitor its expiration date and handle renewal yourself.
   *
   * In contrast, type **managed** requests a new Certificate from *Let's Encrypt* for the specified `domain_names`. Only domains managed by *Hetzner DNS* are supported. We handle renewal and timely alert the project owner via email if problems occur.
   *
   * For type `managed` Certificates the `action` key of the response contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.
   *
   */
  postCertificates(
    req: operations.PostCertificatesCreateCertificateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCertificatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostCertificatesCreateCertificateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/certificates";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCertificatesResponse =
        new operations.PostCertificatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createCertificateResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostCertificatesCreateCertificateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a Certificate
   *
   * @remarks
   * Updates the Certificate properties.
   *
   * Note that when updating labels, the Certificate’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
   *
   * Note: if the Certificate object changes during the request, the response will be a “conflict” error.
   *
   */
  putCertificatesId(
    req: operations.PutCertificatesIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutCertificatesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutCertificatesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/certificates/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutCertificatesIdResponse =
        new operations.PutCertificatesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.certificateResponse = utils.objectToClass(
              httpRes?.data,
              operations.PutCertificatesIdCertificateResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
