"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Announcement:
    r"""Represents an announcement set by an administrator.
    https://docs.joinmastodon.org/entities/announcement/
    """
    
    all_day: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_day') }})
    r"""Whether the announcement has a start/end time."""  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""When the announcement was created."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The announcement id. Cast from an integer, but not guaranteed to be a number."""  
    published: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published') }})
    r"""Whether the announcement is currently active."""  
    read: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read') }})
    r"""Whether the announcement has been read by the user."""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The content of the announcement."""  
    updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at') }})
    r"""When the announcement was last updated. ISO 8601 Datetime."""  
    ends_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ends_at'), 'exclude': lambda f: f is None }})
    r"""When the future announcement will end. ISO 8601 Datetime."""  
    scheduled_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduled_at'), 'exclude': lambda f: f is None }})
    r"""When the future announcement was scheduled. ISO 8601 Datetime."""  
    starts_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starts_at'), 'exclude': lambda f: f is None }})
    r"""When the future announcement will start. ISO 8601 Datetime."""  
    