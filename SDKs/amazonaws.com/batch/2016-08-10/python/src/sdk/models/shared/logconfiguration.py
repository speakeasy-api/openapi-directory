"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import logdriver_enum as shared_logdriver_enum
from ..shared import secret as shared_secret
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogConfiguration:
    r"""Log configuration options to send to a custom log driver for the container."""
    
    log_driver: shared_logdriver_enum.LogDriverEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logDriver') }})  
    options: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})  
    secret_options: Optional[list[shared_secret.Secret]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretOptions'), 'exclude': lambda f: f is None }})  
    