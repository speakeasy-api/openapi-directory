/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OrganizationSecurityPolicies {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Inserts an association for the specified security policy.
   */
  computeOrganizationSecurityPoliciesAddAssociation(
    req: operations.ComputeOrganizationSecurityPoliciesAddAssociationRequest,
    security: operations.ComputeOrganizationSecurityPoliciesAddAssociationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesAddAssociationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeOrganizationSecurityPoliciesAddAssociationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/addAssociation",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "securityPolicyAssociation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesAddAssociationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesAddAssociationResponse =
        new operations.ComputeOrganizationSecurityPoliciesAddAssociationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a rule into a security policy.
   */
  computeOrganizationSecurityPoliciesAddRule(
    req: operations.ComputeOrganizationSecurityPoliciesAddRuleRequest,
    security: operations.ComputeOrganizationSecurityPoliciesAddRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesAddRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesAddRuleRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/addRule",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "securityPolicyRule",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesAddRuleSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesAddRuleResponse =
        new operations.ComputeOrganizationSecurityPoliciesAddRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Copies rules to the specified security policy.
   */
  computeOrganizationSecurityPoliciesCopyRules(
    req: operations.ComputeOrganizationSecurityPoliciesCopyRulesRequest,
    security: operations.ComputeOrganizationSecurityPoliciesCopyRulesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesCopyRulesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesCopyRulesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/copyRules",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesCopyRulesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesCopyRulesResponse =
        new operations.ComputeOrganizationSecurityPoliciesCopyRulesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified policy.
   */
  computeOrganizationSecurityPoliciesDelete(
    req: operations.ComputeOrganizationSecurityPoliciesDeleteRequest,
    security: operations.ComputeOrganizationSecurityPoliciesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesDeleteResponse =
        new operations.ComputeOrganizationSecurityPoliciesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all of the ordered rules present in a single specified policy.
   */
  computeOrganizationSecurityPoliciesGet(
    req: operations.ComputeOrganizationSecurityPoliciesGetRequest,
    security: operations.ComputeOrganizationSecurityPoliciesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeOrganizationSecurityPoliciesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesGetResponse =
        new operations.ComputeOrganizationSecurityPoliciesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.securityPolicy = utils.objectToClass(
              httpRes?.data,
              shared.SecurityPolicy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets an association with the specified name.
   */
  computeOrganizationSecurityPoliciesGetAssociation(
    req: operations.ComputeOrganizationSecurityPoliciesGetAssociationRequest,
    security: operations.ComputeOrganizationSecurityPoliciesGetAssociationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesGetAssociationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeOrganizationSecurityPoliciesGetAssociationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/getAssociation",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesGetAssociationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesGetAssociationResponse =
        new operations.ComputeOrganizationSecurityPoliciesGetAssociationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.securityPolicyAssociation = utils.objectToClass(
              httpRes?.data,
              shared.SecurityPolicyAssociation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a rule at the specified priority.
   */
  computeOrganizationSecurityPoliciesGetRule(
    req: operations.ComputeOrganizationSecurityPoliciesGetRuleRequest,
    security: operations.ComputeOrganizationSecurityPoliciesGetRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesGetRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesGetRuleRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/getRule",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesGetRuleSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesGetRuleResponse =
        new operations.ComputeOrganizationSecurityPoliciesGetRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.securityPolicyRule = utils.objectToClass(
              httpRes?.data,
              shared.SecurityPolicyRule
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new policy in the specified project using the data included in the request.
   */
  computeOrganizationSecurityPoliciesInsert(
    req: operations.ComputeOrganizationSecurityPoliciesInsertRequest,
    security: operations.ComputeOrganizationSecurityPoliciesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesInsertRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/locations/global/securityPolicies";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "securityPolicy",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesInsertResponse =
        new operations.ComputeOrganizationSecurityPoliciesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all the policies that have been configured for the specified project.
   */
  computeOrganizationSecurityPoliciesList(
    req: operations.ComputeOrganizationSecurityPoliciesListRequest,
    security: operations.ComputeOrganizationSecurityPoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/locations/global/securityPolicies";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeOrganizationSecurityPoliciesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesListResponse =
        new operations.ComputeOrganizationSecurityPoliciesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.securityPolicyList = utils.objectToClass(
              httpRes?.data,
              shared.SecurityPolicyList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists associations of a specified target, i.e., organization or folder.
   */
  computeOrganizationSecurityPoliciesListAssociations(
    req: operations.ComputeOrganizationSecurityPoliciesListAssociationsRequest,
    security: operations.ComputeOrganizationSecurityPoliciesListAssociationsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesListAssociationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeOrganizationSecurityPoliciesListAssociationsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/locations/global/securityPolicies/listAssociations";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesListAssociationsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesListAssociationsResponse =
        new operations.ComputeOrganizationSecurityPoliciesListAssociationsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organizationSecurityPoliciesListAssociationsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.OrganizationSecurityPoliciesListAssociationsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Moves the specified security policy.
   */
  computeOrganizationSecurityPoliciesMove(
    req: operations.ComputeOrganizationSecurityPoliciesMoveRequest,
    security: operations.ComputeOrganizationSecurityPoliciesMoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesMoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesMoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/move",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeOrganizationSecurityPoliciesMoveSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesMoveResponse =
        new operations.ComputeOrganizationSecurityPoliciesMoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches the specified policy with the data included in the request.
   */
  computeOrganizationSecurityPoliciesPatch(
    req: operations.ComputeOrganizationSecurityPoliciesPatchRequest,
    security: operations.ComputeOrganizationSecurityPoliciesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "securityPolicy1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesPatchResponse =
        new operations.ComputeOrganizationSecurityPoliciesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a rule at the specified priority.
   */
  computeOrganizationSecurityPoliciesPatchRule(
    req: operations.ComputeOrganizationSecurityPoliciesPatchRuleRequest,
    security: operations.ComputeOrganizationSecurityPoliciesPatchRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesPatchRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesPatchRuleRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/patchRule",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "securityPolicyRule",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesPatchRuleSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesPatchRuleResponse =
        new operations.ComputeOrganizationSecurityPoliciesPatchRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes an association for the specified security policy.
   */
  computeOrganizationSecurityPoliciesRemoveAssociation(
    req: operations.ComputeOrganizationSecurityPoliciesRemoveAssociationRequest,
    security: operations.ComputeOrganizationSecurityPoliciesRemoveAssociationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesRemoveAssociationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeOrganizationSecurityPoliciesRemoveAssociationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/removeAssociation",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesRemoveAssociationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesRemoveAssociationResponse =
        new operations.ComputeOrganizationSecurityPoliciesRemoveAssociationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a rule at the specified priority.
   */
  computeOrganizationSecurityPoliciesRemoveRule(
    req: operations.ComputeOrganizationSecurityPoliciesRemoveRuleRequest,
    security: operations.ComputeOrganizationSecurityPoliciesRemoveRuleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeOrganizationSecurityPoliciesRemoveRuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeOrganizationSecurityPoliciesRemoveRuleRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/locations/global/securityPolicies/{securityPolicy}/removeRule",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeOrganizationSecurityPoliciesRemoveRuleSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeOrganizationSecurityPoliciesRemoveRuleResponse =
        new operations.ComputeOrganizationSecurityPoliciesRemoveRuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
