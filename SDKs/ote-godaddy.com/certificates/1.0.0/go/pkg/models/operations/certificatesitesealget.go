// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CertificateSitesealGetThemeEnum - This value represents the visual theme of the seal. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present.
type CertificateSitesealGetThemeEnum string

const (
	CertificateSitesealGetThemeEnumDark  CertificateSitesealGetThemeEnum = "DARK"
	CertificateSitesealGetThemeEnumLight CertificateSitesealGetThemeEnum = "LIGHT"
)

func (e *CertificateSitesealGetThemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DARK":
		fallthrough
	case "LIGHT":
		*e = CertificateSitesealGetThemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateSitesealGetThemeEnum: %s", s)
	}
}

type CertificateSitesealGetRequest struct {
	// Certificate id
	CertificateID string `pathParam:"style=simple,explode=false,name=certificateId"`
	// Determine locale for text displayed in seal image and verification page. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present.
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// This value represents the visual theme of the seal. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present.
	Theme *CertificateSitesealGetThemeEnum `queryParam:"style=form,explode=true,name=theme"`
}

type CertificateSitesealGetResponse struct {
	// Site seal retrieved
	CertificateSiteSeal *shared.CertificateSiteSeal
	ContentType         string
	// Request was malformed
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
}
