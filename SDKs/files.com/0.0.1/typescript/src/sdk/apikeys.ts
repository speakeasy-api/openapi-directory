/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations about api_keys
 */
export class ApiKeys {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Api Key
   *
   * @remarks
   * Delete Api Key
   */
  deleteApiKeysId(
    req: operations.DeleteApiKeysIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiKeysIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiKeysIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api_keys/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiKeysIdResponse =
        new operations.DeleteApiKeysIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Api Keys
   *
   * @remarks
   * List Api Keys
   */
  getApiKeys(
    req: operations.GetApiKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api_keys";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiKeysResponse =
        new operations.GetApiKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeyEntities = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Show Api Key
   *
   * @remarks
   * Show Api Key
   */
  getApiKeysId(
    req: operations.GetApiKeysIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiKeysIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiKeysIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api_keys/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiKeysIdResponse =
        new operations.GetApiKeysIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntity = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Update Api Key
   *
   * @remarks
   * Update Api Key
   */
  patchApiKeysId(
    req: operations.PatchApiKeysIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchApiKeysIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchApiKeysIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api_keys/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchApiKeysIdResponse =
        new operations.PatchApiKeysIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntity = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Create Api Key
   *
   * @remarks
   * Create Api Key
   */
  postApiKeys(
    req: operations.PostApiKeysRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiKeysRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api_keys";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiKeysResponse =
        new operations.PostApiKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntity = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }
}
