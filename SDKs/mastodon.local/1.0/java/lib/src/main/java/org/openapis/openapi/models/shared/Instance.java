/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Instance - Represents the software instance of Mastodon running on this domain.
 * https://docs.joinmastodon.org/entities/instance/
 */
public class Instance {
    /**
     * Whether registrations require moderator approval.
     */
    @JsonProperty("approval_required")
    public Boolean approvalRequired;
    public Instance withApprovalRequired(Boolean approvalRequired) {
        this.approvalRequired = approvalRequired;
        return this;
    }
    
    /**
     * Represents a user of Mastodon and their associated profile.
     * https://docs.joinmastodon.org/entities/account/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_account")
    public Account contactAccount;
    public Instance withContactAccount(Account contactAccount) {
        this.contactAccount = contactAccount;
        return this;
    }
    
    /**
     * Admin-defined description of the Mastodon site.
     */
    @JsonProperty("description")
    public String description;
    public Instance withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * An email that may be contacted for any inquiries.
     */
    @JsonProperty("email")
    public String email;
    public Instance withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Whether invites are enabled.
     */
    @JsonProperty("invites_enabled")
    public Boolean invitesEnabled;
    public Instance withInvitesEnabled(Boolean invitesEnabled) {
        this.invitesEnabled = invitesEnabled;
        return this;
    }
    
    /**
     * Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.
     */
    @JsonProperty("languages")
    public String[] languages;
    public Instance withLanguages(String[] languages) {
        this.languages = languages;
        return this;
    }
    
    /**
     * Whether registrations are enabled.
     */
    @JsonProperty("registrations")
    public Boolean registrations;
    public Instance withRegistrations(Boolean registrations) {
        this.registrations = registrations;
        return this;
    }
    
    /**
     * A shorter description defined by the admin.
     */
    @JsonProperty("short_description")
    public String shortDescription;
    public Instance withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    /**
     * Statistics about how much information the instance contains.
     */
    @JsonProperty("stats")
    public java.util.Map<String, Object> stats;
    public Instance withStats(java.util.Map<String, Object> stats) {
        this.stats = stats;
        return this;
    }
    
    /**
     * Banner image for the website.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    public String thumbnail;
    public Instance withThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
        return this;
    }
    
    /**
     * The title of the website.
     */
    @JsonProperty("title")
    public String title;
    public Instance withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The domain name of the instance.
     */
    @JsonProperty("uri")
    public String uri;
    public Instance withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
    /**
     * URLs of interest for clients apps.
     */
    @JsonProperty("urls")
    public java.util.Map<String, Object> urls;
    public Instance withUrls(java.util.Map<String, Object> urls) {
        this.urls = urls;
        return this;
    }
    
    /**
     * The version of Mastodon installed on the instance.
     */
    @JsonProperty("version")
    public String version;
    public Instance withVersion(String version) {
        this.version = version;
        return this;
    }
    
}
