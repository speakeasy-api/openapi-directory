// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SegmentSequenceStepMatchTypeEnum - Specifies if the step immediately precedes or can be any time before the next step.
type SegmentSequenceStepMatchTypeEnum string

const (
	SegmentSequenceStepMatchTypeEnumUnspecifiedMatchType SegmentSequenceStepMatchTypeEnum = "UNSPECIFIED_MATCH_TYPE"
	SegmentSequenceStepMatchTypeEnumPrecedes             SegmentSequenceStepMatchTypeEnum = "PRECEDES"
	SegmentSequenceStepMatchTypeEnumImmediatelyPrecedes  SegmentSequenceStepMatchTypeEnum = "IMMEDIATELY_PRECEDES"
)

func (e *SegmentSequenceStepMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNSPECIFIED_MATCH_TYPE":
		fallthrough
	case "PRECEDES":
		fallthrough
	case "IMMEDIATELY_PRECEDES":
		*e = SegmentSequenceStepMatchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SegmentSequenceStepMatchTypeEnum: %s", s)
	}
}

// SegmentSequenceStep - A segment sequence definition.
type SegmentSequenceStep struct {
	// Specifies if the step immediately precedes or can be any time before the next step.
	MatchType *SegmentSequenceStepMatchTypeEnum `json:"matchType,omitempty"`
	// A sequence is specified with a list of Or grouped filters which are combined with `AND` operator.
	OrFiltersForSegment []OrFiltersForSegment `json:"orFiltersForSegment,omitempty"`
}
