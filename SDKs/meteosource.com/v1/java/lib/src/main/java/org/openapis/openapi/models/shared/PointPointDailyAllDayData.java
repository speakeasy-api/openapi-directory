/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PointPointDailyAllDayData {
    @JsonProperty("cloud_cover")
    public PointPointDailyAllDayCloudCoverData cloudCover;

    public PointPointDailyAllDayData withCloudCover(PointPointDailyAllDayCloudCoverData cloudCover) {
        this.cloudCover = cloudCover;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dew_point")
    public Double dewPoint;

    public PointPointDailyAllDayData withDewPoint(Double dewPoint) {
        this.dewPoint = dewPoint;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dew_point_max")
    public Double dewPointMax;

    public PointPointDailyAllDayData withDewPointMax(Double dewPointMax) {
        this.dewPointMax = dewPointMax;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dew_point_min")
    public Double dewPointMin;

    public PointPointDailyAllDayData withDewPointMin(Double dewPointMin) {
        this.dewPointMin = dewPointMin;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feels_like")
    public Double feelsLike;

    public PointPointDailyAllDayData withFeelsLike(Double feelsLike) {
        this.feelsLike = feelsLike;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feels_like_max")
    public Double feelsLikeMax;

    public PointPointDailyAllDayData withFeelsLikeMax(Double feelsLikeMax) {
        this.feelsLikeMax = feelsLikeMax;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feels_like_min")
    public Double feelsLikeMin;

    public PointPointDailyAllDayData withFeelsLikeMin(Double feelsLikeMin) {
        this.feelsLikeMin = feelsLikeMin;
        return this;
    }
    
    /**
     * Relative humidity. (allday avg)
     * Unit: \%
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("humidity")
    public Long humidity;

    public PointPointDailyAllDayData withHumidity(Long humidity) {
        this.humidity = humidity;
        return this;
    }
    
    /**
     * Numeric identifier of the weather icon. The following values can appear:
     * 
     * * 1 - Not available
     * * 2 - Sunny
     * * 3 - Mostly sunny
     * * 4 - Partly sunny
     * * 5 - Mostly cloudy
     * * 6 - Cloudy
     * * 7 - Overcast
     * * 8 - Overcast with low clouds
     * * 9 - Fog
     * * 10 - Light rain
     * * 11 - Rain
     * * 12 - Possible rain
     * * 13 - Rain shower
     * * 14 - Thunderstorm
     * * 15 - Local thunderstorms
     * * 16 - Light snow
     * * 17 - Snow
     * * 18 - Possible snow
     * * 19 - Snow shower
     * * 20 - Rain and snow
     * * 21 - Possible rain and snow
     * * 22 - Rain and snow
     * * 23 - Freezing rain
     * * 24 - Possible freezing rain
     * * 25 - Hail
     * * 26 - Clear (night)
     * * 27 - Mostly clear (night)
     * * 28 - Partly clear (night)
     * * 29 - Mostly cloudy (night)
     * * 30 - Cloudy (night)
     * * 31 - Overcast with low clouds (night)
     * * 32 - Rain shower (night)
     * * 33 - Local thunderstorms (night)
     * * 34 - Snow shower (night)
     * * 35 - Rain and snow (night)
     * * 36 - Possible freezing rain (night)
     * 
     * Unit: icon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    public Long icon;

    public PointPointDailyAllDayData withIcon(Long icon) {
        this.icon = icon;
        return this;
    }
    
    /**
     * Total column of ozone. (allday avg)
     * Unit: Dobson
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ozone")
    public Double ozone;

    public PointPointDailyAllDayData withOzone(Double ozone) {
        this.ozone = ozone;
        return this;
    }
    
    @JsonProperty("precipitation")
    public PointPointDailyAllDayPrecipitationData precipitation;

    public PointPointDailyAllDayData withPrecipitation(PointPointDailyAllDayPrecipitationData precipitation) {
        this.precipitation = precipitation;
        return this;
    }
    
    /**
     * Atmospheric pressure at mean sea level. (allday avg)
     * Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pressure")
    public Double pressure;

    public PointPointDailyAllDayData withPressure(Double pressure) {
        this.pressure = pressure;
        return this;
    }
    
    @JsonProperty("probability")
    public PointPointDailyAllDayProbData probability;

    public PointPointDailyAllDayData withProbability(PointPointDailyAllDayProbData probability) {
        this.probability = probability;
        return this;
    }
    
    /**
     * Snow depth. (allday avg)
     * Units: metric = cm, us = inch, uk = cm, ca = cm
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snow_depth")
    public Double snowDepth;

    public PointPointDailyAllDayData withSnowDepth(Double snowDepth) {
        this.snowDepth = snowDepth;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("soil_temperature")
    public Double soilTemperature;

    public PointPointDailyAllDayData withSoilTemperature(Double soilTemperature) {
        this.soilTemperature = soilTemperature;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("soil_temperature_max")
    public Double soilTemperatureMax;

    public PointPointDailyAllDayData withSoilTemperatureMax(Double soilTemperatureMax) {
        this.soilTemperatureMax = soilTemperatureMax;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("soil_temperature_min")
    public Double soilTemperatureMin;

    public PointPointDailyAllDayData withSoilTemperatureMin(Double soilTemperatureMin) {
        this.soilTemperatureMin = soilTemperatureMin;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("surface_temperature")
    public Double surfaceTemperature;

    public PointPointDailyAllDayData withSurfaceTemperature(Double surfaceTemperature) {
        this.surfaceTemperature = surfaceTemperature;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("surface_temperature_max")
    public Double surfaceTemperatureMax;

    public PointPointDailyAllDayData withSurfaceTemperatureMax(Double surfaceTemperatureMax) {
        this.surfaceTemperatureMax = surfaceTemperatureMax;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("surface_temperature_min")
    public Double surfaceTemperatureMin;

    public PointPointDailyAllDayData withSurfaceTemperatureMin(Double surfaceTemperatureMin) {
        this.surfaceTemperatureMin = surfaceTemperatureMin;
        return this;
    }
    
    /**
     * Temperature 2 metres above ground. (allday avg)
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public Double temperature;

    public PointPointDailyAllDayData withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature_max")
    public Double temperatureMax;

    public PointPointDailyAllDayData withTemperatureMax(Double temperatureMax) {
        this.temperatureMax = temperatureMax;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature_min")
    public Double temperatureMin;

    public PointPointDailyAllDayData withTemperatureMin(Double temperatureMin) {
        this.temperatureMin = temperatureMin;
        return this;
    }
    
    /**
     * Visibility. (allday avg)
     * Units: metric = km, us = mi, uk = mi, ca = km
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public Double visibility;

    public PointPointDailyAllDayData withVisibility(Double visibility) {
        this.visibility = visibility;
        return this;
    }
    
    /**
     * All day string identifier of the weather icon, e.g. `light_rain`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weather")
    public String weather;

    public PointPointDailyAllDayData withWeather(String weather) {
        this.weather = weather;
        return this;
    }
    
    @JsonProperty("wind")
    public PointPointDailyAllDayWindData wind;

    public PointPointDailyAllDayData withWind(PointPointDailyAllDayWindData wind) {
        this.wind = wind;
        return this;
    }
    
    /**
     * Temperature 2 metres above ground. (allday avg)
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wind_chill")
    public Double windChill;

    public PointPointDailyAllDayData withWindChill(Double windChill) {
        this.windChill = windChill;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wind_chill_max")
    public Double windChillMax;

    public PointPointDailyAllDayData withWindChillMax(Double windChillMax) {
        this.windChillMax = windChillMax;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wind_chill_min")
    public Double windChillMin;

    public PointPointDailyAllDayData withWindChillMin(Double windChillMin) {
        this.windChillMin = windChillMin;
        return this;
    }
    
    public PointPointDailyAllDayData(@JsonProperty("cloud_cover") PointPointDailyAllDayCloudCoverData cloudCover, @JsonProperty("precipitation") PointPointDailyAllDayPrecipitationData precipitation, @JsonProperty("probability") PointPointDailyAllDayProbData probability, @JsonProperty("wind") PointPointDailyAllDayWindData wind) {
        this.cloudCover = cloudCover;
        this.precipitation = precipitation;
        this.probability = probability;
        this.wind = wind;
  }
}
