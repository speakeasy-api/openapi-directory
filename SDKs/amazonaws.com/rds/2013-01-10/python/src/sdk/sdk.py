"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

SERVERS = [
    "http://rds.{region}.amazonaws.com",
    r"""The Amazon RDS multi-region endpoint"""
    "https://rds.{region}.amazonaws.com",
    r"""The Amazon RDS multi-region endpoint"""
    "http://rds.amazonaws.com",
    r"""The general Amazon RDS multi-region endpoint"""
    "https://rds.amazonaws.com",
    r"""The general Amazon RDS multi-region endpoint"""
    "http://rds.{region}.amazonaws.com.cn",
    r"""The Amazon RDS endpoint for China (Beijing) and China (Ningxia)"""
    "https://rds.{region}.amazonaws.com.cn",
    r"""The Amazon RDS endpoint for China (Beijing) and China (Ningxia)"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""https://docs.aws.amazon.com/rds/ - Amazon Web Services documentation"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def get_add_source_identifier_to_subscription(self, request: operations.GETAddSourceIdentifierToSubscriptionRequest) -> operations.GETAddSourceIdentifierToSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=AddSourceIdentifierToSubscription'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETAddSourceIdentifierToSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAddSourceIdentifierToSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_authorize_db_security_group_ingress(self, request: operations.GETAuthorizeDBSecurityGroupIngressRequest) -> operations.GETAuthorizeDBSecurityGroupIngressResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=AuthorizeDBSecurityGroupIngress'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETAuthorizeDBSecurityGroupIngressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAuthorizeDBSecurityGroupIngressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_copy_db_snapshot(self, request: operations.GETCopyDBSnapshotRequest) -> operations.GETCopyDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CopyDBSnapshot'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCopyDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCopyDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_db_instance(self, request: operations.GETCreateDBInstanceRequest) -> operations.GETCreateDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBInstance'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_db_instance_read_replica(self, request: operations.GETCreateDBInstanceReadReplicaRequest) -> operations.GETCreateDBInstanceReadReplicaResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBInstanceReadReplica'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateDBInstanceReadReplicaRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateDBInstanceReadReplicaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_db_parameter_group(self, request: operations.GETCreateDBParameterGroupRequest) -> operations.GETCreateDBParameterGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBParameterGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateDBParameterGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateDBParameterGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_db_security_group(self, request: operations.GETCreateDBSecurityGroupRequest) -> operations.GETCreateDBSecurityGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBSecurityGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateDBSecurityGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateDBSecurityGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_db_snapshot(self, request: operations.GETCreateDBSnapshotRequest) -> operations.GETCreateDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBSnapshot'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_db_subnet_group(self, request: operations.GETCreateDBSubnetGroupRequest) -> operations.GETCreateDBSubnetGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBSubnetGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateDBSubnetGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateDBSubnetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_event_subscription(self, request: operations.GETCreateEventSubscriptionRequest) -> operations.GETCreateEventSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateEventSubscription'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateEventSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateEventSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_create_option_group(self, request: operations.GETCreateOptionGroupRequest) -> operations.GETCreateOptionGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateOptionGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETCreateOptionGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCreateOptionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_delete_db_instance(self, request: operations.GETDeleteDBInstanceRequest) -> operations.GETDeleteDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBInstance'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDeleteDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDeleteDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_delete_db_parameter_group(self, request: operations.GETDeleteDBParameterGroupRequest) -> operations.GETDeleteDBParameterGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBParameterGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDeleteDBParameterGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDeleteDBParameterGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_delete_db_security_group(self, request: operations.GETDeleteDBSecurityGroupRequest) -> operations.GETDeleteDBSecurityGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBSecurityGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDeleteDBSecurityGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDeleteDBSecurityGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_delete_db_snapshot(self, request: operations.GETDeleteDBSnapshotRequest) -> operations.GETDeleteDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBSnapshot'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDeleteDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDeleteDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_delete_db_subnet_group(self, request: operations.GETDeleteDBSubnetGroupRequest) -> operations.GETDeleteDBSubnetGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBSubnetGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDeleteDBSubnetGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDeleteDBSubnetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_delete_event_subscription(self, request: operations.GETDeleteEventSubscriptionRequest) -> operations.GETDeleteEventSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteEventSubscription'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDeleteEventSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDeleteEventSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_delete_option_group(self, request: operations.GETDeleteOptionGroupRequest) -> operations.GETDeleteOptionGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteOptionGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDeleteOptionGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDeleteOptionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_db_engine_versions(self, request: operations.GETDescribeDBEngineVersionsRequest) -> operations.GETDescribeDBEngineVersionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBEngineVersions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeDBEngineVersionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeDBEngineVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_db_instances(self, request: operations.GETDescribeDBInstancesRequest) -> operations.GETDescribeDBInstancesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBInstances'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeDBInstancesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeDBInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_db_parameter_groups(self, request: operations.GETDescribeDBParameterGroupsRequest) -> operations.GETDescribeDBParameterGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBParameterGroups'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeDBParameterGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeDBParameterGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_db_parameters(self, request: operations.GETDescribeDBParametersRequest) -> operations.GETDescribeDBParametersResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBParameters'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeDBParametersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeDBParametersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_db_security_groups(self, request: operations.GETDescribeDBSecurityGroupsRequest) -> operations.GETDescribeDBSecurityGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBSecurityGroups'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeDBSecurityGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeDBSecurityGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_db_snapshots(self, request: operations.GETDescribeDBSnapshotsRequest) -> operations.GETDescribeDBSnapshotsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBSnapshots'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeDBSnapshotsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeDBSnapshotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_db_subnet_groups(self, request: operations.GETDescribeDBSubnetGroupsRequest) -> operations.GETDescribeDBSubnetGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBSubnetGroups'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeDBSubnetGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeDBSubnetGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_engine_default_parameters(self, request: operations.GETDescribeEngineDefaultParametersRequest) -> operations.GETDescribeEngineDefaultParametersResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEngineDefaultParameters'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeEngineDefaultParametersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeEngineDefaultParametersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_event_categories(self, request: operations.GETDescribeEventCategoriesRequest) -> operations.GETDescribeEventCategoriesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEventCategories'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeEventCategoriesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeEventCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_event_subscriptions(self, request: operations.GETDescribeEventSubscriptionsRequest) -> operations.GETDescribeEventSubscriptionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEventSubscriptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeEventSubscriptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeEventSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_events(self, request: operations.GETDescribeEventsRequest) -> operations.GETDescribeEventsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEvents'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_option_group_options(self, request: operations.GETDescribeOptionGroupOptionsRequest) -> operations.GETDescribeOptionGroupOptionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeOptionGroupOptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeOptionGroupOptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeOptionGroupOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_option_groups(self, request: operations.GETDescribeOptionGroupsRequest) -> operations.GETDescribeOptionGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeOptionGroups'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeOptionGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeOptionGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_orderable_db_instance_options(self, request: operations.GETDescribeOrderableDBInstanceOptionsRequest) -> operations.GETDescribeOrderableDBInstanceOptionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeOrderableDBInstanceOptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeOrderableDBInstanceOptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeOrderableDBInstanceOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_reserved_db_instances(self, request: operations.GETDescribeReservedDBInstancesRequest) -> operations.GETDescribeReservedDBInstancesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeReservedDBInstances'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeReservedDBInstancesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeReservedDBInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_describe_reserved_db_instances_offerings(self, request: operations.GETDescribeReservedDBInstancesOfferingsRequest) -> operations.GETDescribeReservedDBInstancesOfferingsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeReservedDBInstancesOfferings'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETDescribeReservedDBInstancesOfferingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETDescribeReservedDBInstancesOfferingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_list_tags_for_resource(self, request: operations.GETListTagsForResourceRequest) -> operations.GETListTagsForResourceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ListTagsForResource'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETListTagsForResourceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETListTagsForResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_modify_db_instance(self, request: operations.GETModifyDBInstanceRequest) -> operations.GETModifyDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyDBInstance'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETModifyDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETModifyDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_modify_db_subnet_group(self, request: operations.GETModifyDBSubnetGroupRequest) -> operations.GETModifyDBSubnetGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyDBSubnetGroup'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETModifyDBSubnetGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETModifyDBSubnetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_modify_event_subscription(self, request: operations.GETModifyEventSubscriptionRequest) -> operations.GETModifyEventSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyEventSubscription'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETModifyEventSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETModifyEventSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_promote_read_replica(self, request: operations.GETPromoteReadReplicaRequest) -> operations.GETPromoteReadReplicaResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=PromoteReadReplica'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETPromoteReadReplicaRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETPromoteReadReplicaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_purchase_reserved_db_instances_offering(self, request: operations.GETPurchaseReservedDBInstancesOfferingRequest) -> operations.GETPurchaseReservedDBInstancesOfferingResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=PurchaseReservedDBInstancesOffering'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETPurchaseReservedDBInstancesOfferingRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETPurchaseReservedDBInstancesOfferingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_reboot_db_instance(self, request: operations.GETRebootDBInstanceRequest) -> operations.GETRebootDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RebootDBInstance'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETRebootDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRebootDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_remove_source_identifier_from_subscription(self, request: operations.GETRemoveSourceIdentifierFromSubscriptionRequest) -> operations.GETRemoveSourceIdentifierFromSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RemoveSourceIdentifierFromSubscription'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETRemoveSourceIdentifierFromSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRemoveSourceIdentifierFromSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_remove_tags_from_resource(self, request: operations.GETRemoveTagsFromResourceRequest) -> operations.GETRemoveTagsFromResourceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RemoveTagsFromResource'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETRemoveTagsFromResourceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRemoveTagsFromResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_restore_db_instance_from_db_snapshot(self, request: operations.GETRestoreDBInstanceFromDBSnapshotRequest) -> operations.GETRestoreDBInstanceFromDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RestoreDBInstanceFromDBSnapshot'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETRestoreDBInstanceFromDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRestoreDBInstanceFromDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_restore_db_instance_to_point_in_time(self, request: operations.GETRestoreDBInstanceToPointInTimeRequest) -> operations.GETRestoreDBInstanceToPointInTimeResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RestoreDBInstanceToPointInTime'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETRestoreDBInstanceToPointInTimeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRestoreDBInstanceToPointInTimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_revoke_db_security_group_ingress(self, request: operations.GETRevokeDBSecurityGroupIngressRequest) -> operations.GETRevokeDBSecurityGroupIngressResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RevokeDBSecurityGroupIngress'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETRevokeDBSecurityGroupIngressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRevokeDBSecurityGroupIngressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_add_source_identifier_to_subscription(self, request: operations.POSTAddSourceIdentifierToSubscriptionRequest) -> operations.POSTAddSourceIdentifierToSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=AddSourceIdentifierToSubscription'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTAddSourceIdentifierToSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTAddSourceIdentifierToSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_add_tags_to_resource(self, request: operations.POSTAddTagsToResourceRequest) -> operations.POSTAddTagsToResourceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=AddTagsToResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTAddTagsToResourceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTAddTagsToResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_authorize_db_security_group_ingress(self, request: operations.POSTAuthorizeDBSecurityGroupIngressRequest) -> operations.POSTAuthorizeDBSecurityGroupIngressResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=AuthorizeDBSecurityGroupIngress'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTAuthorizeDBSecurityGroupIngressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTAuthorizeDBSecurityGroupIngressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_copy_db_snapshot(self, request: operations.POSTCopyDBSnapshotRequest) -> operations.POSTCopyDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CopyDBSnapshot'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCopyDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCopyDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_db_instance(self, request: operations.POSTCreateDBInstanceRequest) -> operations.POSTCreateDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBInstance'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_db_instance_read_replica(self, request: operations.POSTCreateDBInstanceReadReplicaRequest) -> operations.POSTCreateDBInstanceReadReplicaResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBInstanceReadReplica'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateDBInstanceReadReplicaRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateDBInstanceReadReplicaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_db_parameter_group(self, request: operations.POSTCreateDBParameterGroupRequest) -> operations.POSTCreateDBParameterGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBParameterGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateDBParameterGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateDBParameterGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_db_security_group(self, request: operations.POSTCreateDBSecurityGroupRequest) -> operations.POSTCreateDBSecurityGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBSecurityGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateDBSecurityGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateDBSecurityGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_db_snapshot(self, request: operations.POSTCreateDBSnapshotRequest) -> operations.POSTCreateDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBSnapshot'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_db_subnet_group(self, request: operations.POSTCreateDBSubnetGroupRequest) -> operations.POSTCreateDBSubnetGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateDBSubnetGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateDBSubnetGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateDBSubnetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_event_subscription(self, request: operations.POSTCreateEventSubscriptionRequest) -> operations.POSTCreateEventSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateEventSubscription'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateEventSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateEventSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_create_option_group(self, request: operations.POSTCreateOptionGroupRequest) -> operations.POSTCreateOptionGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=CreateOptionGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTCreateOptionGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCreateOptionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_delete_db_instance(self, request: operations.POSTDeleteDBInstanceRequest) -> operations.POSTDeleteDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBInstance'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDeleteDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDeleteDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_delete_db_parameter_group(self, request: operations.POSTDeleteDBParameterGroupRequest) -> operations.POSTDeleteDBParameterGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBParameterGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDeleteDBParameterGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDeleteDBParameterGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_delete_db_security_group(self, request: operations.POSTDeleteDBSecurityGroupRequest) -> operations.POSTDeleteDBSecurityGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBSecurityGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDeleteDBSecurityGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDeleteDBSecurityGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_delete_db_snapshot(self, request: operations.POSTDeleteDBSnapshotRequest) -> operations.POSTDeleteDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBSnapshot'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDeleteDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDeleteDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_delete_db_subnet_group(self, request: operations.POSTDeleteDBSubnetGroupRequest) -> operations.POSTDeleteDBSubnetGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteDBSubnetGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDeleteDBSubnetGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDeleteDBSubnetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_delete_event_subscription(self, request: operations.POSTDeleteEventSubscriptionRequest) -> operations.POSTDeleteEventSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteEventSubscription'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDeleteEventSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDeleteEventSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_delete_option_group(self, request: operations.POSTDeleteOptionGroupRequest) -> operations.POSTDeleteOptionGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DeleteOptionGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDeleteOptionGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDeleteOptionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_db_engine_versions(self, request: operations.POSTDescribeDBEngineVersionsRequest) -> operations.POSTDescribeDBEngineVersionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBEngineVersions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeDBEngineVersionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeDBEngineVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_db_instances(self, request: operations.POSTDescribeDBInstancesRequest) -> operations.POSTDescribeDBInstancesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBInstances'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeDBInstancesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeDBInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_db_parameter_groups(self, request: operations.POSTDescribeDBParameterGroupsRequest) -> operations.POSTDescribeDBParameterGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBParameterGroups'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeDBParameterGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeDBParameterGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_db_parameters(self, request: operations.POSTDescribeDBParametersRequest) -> operations.POSTDescribeDBParametersResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBParameters'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeDBParametersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeDBParametersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_db_security_groups(self, request: operations.POSTDescribeDBSecurityGroupsRequest) -> operations.POSTDescribeDBSecurityGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBSecurityGroups'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeDBSecurityGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeDBSecurityGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_db_snapshots(self, request: operations.POSTDescribeDBSnapshotsRequest) -> operations.POSTDescribeDBSnapshotsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBSnapshots'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeDBSnapshotsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeDBSnapshotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_db_subnet_groups(self, request: operations.POSTDescribeDBSubnetGroupsRequest) -> operations.POSTDescribeDBSubnetGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeDBSubnetGroups'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeDBSubnetGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeDBSubnetGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_engine_default_parameters(self, request: operations.POSTDescribeEngineDefaultParametersRequest) -> operations.POSTDescribeEngineDefaultParametersResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEngineDefaultParameters'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeEngineDefaultParametersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeEngineDefaultParametersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_event_categories(self, request: operations.POSTDescribeEventCategoriesRequest) -> operations.POSTDescribeEventCategoriesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEventCategories'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeEventCategoriesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeEventCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_event_subscriptions(self, request: operations.POSTDescribeEventSubscriptionsRequest) -> operations.POSTDescribeEventSubscriptionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEventSubscriptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeEventSubscriptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeEventSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_events(self, request: operations.POSTDescribeEventsRequest) -> operations.POSTDescribeEventsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeEvents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeEventsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_option_group_options(self, request: operations.POSTDescribeOptionGroupOptionsRequest) -> operations.POSTDescribeOptionGroupOptionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeOptionGroupOptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeOptionGroupOptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeOptionGroupOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_option_groups(self, request: operations.POSTDescribeOptionGroupsRequest) -> operations.POSTDescribeOptionGroupsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeOptionGroups'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeOptionGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeOptionGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_orderable_db_instance_options(self, request: operations.POSTDescribeOrderableDBInstanceOptionsRequest) -> operations.POSTDescribeOrderableDBInstanceOptionsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeOrderableDBInstanceOptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeOrderableDBInstanceOptionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeOrderableDBInstanceOptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_reserved_db_instances(self, request: operations.POSTDescribeReservedDBInstancesRequest) -> operations.POSTDescribeReservedDBInstancesResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeReservedDBInstances'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeReservedDBInstancesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeReservedDBInstancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_describe_reserved_db_instances_offerings(self, request: operations.POSTDescribeReservedDBInstancesOfferingsRequest) -> operations.POSTDescribeReservedDBInstancesOfferingsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=DescribeReservedDBInstancesOfferings'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTDescribeReservedDBInstancesOfferingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTDescribeReservedDBInstancesOfferingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_list_tags_for_resource(self, request: operations.POSTListTagsForResourceRequest) -> operations.POSTListTagsForResourceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ListTagsForResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTListTagsForResourceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTListTagsForResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_modify_db_instance(self, request: operations.POSTModifyDBInstanceRequest) -> operations.POSTModifyDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyDBInstance'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTModifyDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTModifyDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_modify_db_parameter_group(self, request: operations.POSTModifyDBParameterGroupRequest) -> operations.POSTModifyDBParameterGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyDBParameterGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTModifyDBParameterGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTModifyDBParameterGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_modify_db_subnet_group(self, request: operations.POSTModifyDBSubnetGroupRequest) -> operations.POSTModifyDBSubnetGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyDBSubnetGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTModifyDBSubnetGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTModifyDBSubnetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_modify_event_subscription(self, request: operations.POSTModifyEventSubscriptionRequest) -> operations.POSTModifyEventSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyEventSubscription'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTModifyEventSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTModifyEventSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_modify_option_group(self, request: operations.POSTModifyOptionGroupRequest) -> operations.POSTModifyOptionGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ModifyOptionGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTModifyOptionGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTModifyOptionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_promote_read_replica(self, request: operations.POSTPromoteReadReplicaRequest) -> operations.POSTPromoteReadReplicaResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=PromoteReadReplica'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTPromoteReadReplicaRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTPromoteReadReplicaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_purchase_reserved_db_instances_offering(self, request: operations.POSTPurchaseReservedDBInstancesOfferingRequest) -> operations.POSTPurchaseReservedDBInstancesOfferingResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=PurchaseReservedDBInstancesOffering'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTPurchaseReservedDBInstancesOfferingRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTPurchaseReservedDBInstancesOfferingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_reboot_db_instance(self, request: operations.POSTRebootDBInstanceRequest) -> operations.POSTRebootDBInstanceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RebootDBInstance'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTRebootDBInstanceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTRebootDBInstanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_remove_source_identifier_from_subscription(self, request: operations.POSTRemoveSourceIdentifierFromSubscriptionRequest) -> operations.POSTRemoveSourceIdentifierFromSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RemoveSourceIdentifierFromSubscription'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTRemoveSourceIdentifierFromSubscriptionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTRemoveSourceIdentifierFromSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_remove_tags_from_resource(self, request: operations.POSTRemoveTagsFromResourceRequest) -> operations.POSTRemoveTagsFromResourceResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RemoveTagsFromResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTRemoveTagsFromResourceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTRemoveTagsFromResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_reset_db_parameter_group(self, request: operations.POSTResetDBParameterGroupRequest) -> operations.POSTResetDBParameterGroupResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=ResetDBParameterGroup'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTResetDBParameterGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTResetDBParameterGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_restore_db_instance_from_db_snapshot(self, request: operations.POSTRestoreDBInstanceFromDBSnapshotRequest) -> operations.POSTRestoreDBInstanceFromDBSnapshotResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RestoreDBInstanceFromDBSnapshot'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTRestoreDBInstanceFromDBSnapshotRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTRestoreDBInstanceFromDBSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_restore_db_instance_to_point_in_time(self, request: operations.POSTRestoreDBInstanceToPointInTimeRequest) -> operations.POSTRestoreDBInstanceToPointInTimeResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RestoreDBInstanceToPointInTime'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTRestoreDBInstanceToPointInTimeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTRestoreDBInstanceToPointInTimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_revoke_db_security_group_ingress(self, request: operations.POSTRevokeDBSecurityGroupIngressRequest) -> operations.POSTRevokeDBSecurityGroupIngressResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#Action=RevokeDBSecurityGroupIngress'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.POSTRevokeDBSecurityGroupIngressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTRevokeDBSecurityGroupIngressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 480, 481, 482]:
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    