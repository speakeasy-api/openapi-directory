"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Tables:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def area120tables_tables_list(self, request: operations.Area120tablesTablesListRequest, security: operations.Area120tablesTablesListSecurity) -> operations.Area120tablesTablesListResponse:
        r"""Lists tables for the user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1alpha1/tables'
        
        query_params = utils.get_query_params(operations.Area120tablesTablesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTablesResponse])
                res.list_tables_response = out

        return res

    def area120tables_tables_rows_batch_create(self, request: operations.Area120tablesTablesRowsBatchCreateRequest, security: operations.Area120tablesTablesRowsBatchCreateSecurity) -> operations.Area120tablesTablesRowsBatchCreateResponse:
        r"""Creates multiple rows."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Area120tablesTablesRowsBatchCreateRequest, base_url, '/v1alpha1/{parent}/rows:batchCreate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_create_rows_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Area120tablesTablesRowsBatchCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesRowsBatchCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchCreateRowsResponse])
                res.batch_create_rows_response = out

        return res

    def area120tables_tables_rows_batch_delete(self, request: operations.Area120tablesTablesRowsBatchDeleteRequest, security: operations.Area120tablesTablesRowsBatchDeleteSecurity) -> operations.Area120tablesTablesRowsBatchDeleteResponse:
        r"""Deletes multiple rows."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Area120tablesTablesRowsBatchDeleteRequest, base_url, '/v1alpha1/{parent}/rows:batchDelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_delete_rows_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Area120tablesTablesRowsBatchDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesRowsBatchDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def area120tables_tables_rows_batch_update(self, request: operations.Area120tablesTablesRowsBatchUpdateRequest, security: operations.Area120tablesTablesRowsBatchUpdateSecurity) -> operations.Area120tablesTablesRowsBatchUpdateResponse:
        r"""Updates multiple rows."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Area120tablesTablesRowsBatchUpdateRequest, base_url, '/v1alpha1/{parent}/rows:batchUpdate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_update_rows_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Area120tablesTablesRowsBatchUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesRowsBatchUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchUpdateRowsResponse])
                res.batch_update_rows_response = out

        return res

    def area120tables_tables_rows_create(self, request: operations.Area120tablesTablesRowsCreateRequest, security: operations.Area120tablesTablesRowsCreateSecurity) -> operations.Area120tablesTablesRowsCreateResponse:
        r"""Creates a row."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Area120tablesTablesRowsCreateRequest, base_url, '/v1alpha1/{parent}/rows', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "row", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Area120tablesTablesRowsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesRowsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Row])
                res.row = out

        return res

    def area120tables_tables_rows_delete(self, request: operations.Area120tablesTablesRowsDeleteRequest, security: operations.Area120tablesTablesRowsDeleteSecurity) -> operations.Area120tablesTablesRowsDeleteResponse:
        r"""Deletes a row."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Area120tablesTablesRowsDeleteRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.Area120tablesTablesRowsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesRowsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def area120tables_tables_rows_list(self, request: operations.Area120tablesTablesRowsListRequest, security: operations.Area120tablesTablesRowsListSecurity) -> operations.Area120tablesTablesRowsListResponse:
        r"""Lists rows in a table. Returns NOT_FOUND if the table does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Area120tablesTablesRowsListRequest, base_url, '/v1alpha1/{parent}/rows', request)
        
        query_params = utils.get_query_params(operations.Area120tablesTablesRowsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesRowsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRowsResponse])
                res.list_rows_response = out

        return res

    def area120tables_tables_rows_patch(self, request: operations.Area120tablesTablesRowsPatchRequest, security: operations.Area120tablesTablesRowsPatchSecurity) -> operations.Area120tablesTablesRowsPatchResponse:
        r"""Updates a row."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Area120tablesTablesRowsPatchRequest, base_url, '/v1alpha1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "row", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Area120tablesTablesRowsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Area120tablesTablesRowsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Row])
                res.row = out

        return res

    