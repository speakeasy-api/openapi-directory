"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import cognitoconfig as shared_cognitoconfig
from ..shared import oidcconfigforresponse as shared_oidcconfigforresponse
from ..shared import sourceipconfig as shared_sourceipconfig
from ..shared import workforcestatus_enum as shared_workforcestatus_enum
from ..shared import workforcevpcconfigresponse as shared_workforcevpcconfigresponse
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Workforce:
    r"""A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see <a href=\\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html\\">Create a Private Workforce</a>."""
    
    workforce_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkforceArn') }})  
    workforce_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkforceName') }})  
    cognito_config: Optional[shared_cognitoconfig.CognitoConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CognitoConfig'), 'exclude': lambda f: f is None }})  
    create_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    last_updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    oidc_config: Optional[shared_oidcconfigforresponse.OidcConfigForResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OidcConfig'), 'exclude': lambda f: f is None }})  
    source_ip_config: Optional[shared_sourceipconfig.SourceIPConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceIpConfig'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_workforcestatus_enum.WorkforceStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    sub_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubDomain'), 'exclude': lambda f: f is None }})  
    workforce_vpc_config: Optional[shared_workforcevpcconfigresponse.WorkforceVpcConfigResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkforceVpcConfig'), 'exclude': lambda f: f is None }})  
    