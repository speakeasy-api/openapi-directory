"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNetworkSsidResponse = exports.UpdateNetworkSsidRequest = exports.UpdateNetworkSsidRequestBody = exports.UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = exports.UpdateNetworkSsidRequestBodySplashPageEnum = exports.UpdateNetworkSsidRequestBodyRadiusServers = exports.UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum = exports.UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum = exports.UpdateNetworkSsidRequestBodyRadiusAccountingServers = exports.UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum = exports.UpdateNetworkSsidRequestBodyEncryptionModeEnum = exports.UpdateNetworkSsidRequestBodyAuthModeEnum = exports.UpdateNetworkSsidRequestBodyApTagsAndVlanIds = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var UpdateNetworkSsidRequestBodyApTagsAndVlanIds = /** @class */ (function (_super) {
    __extends(UpdateNetworkSsidRequestBodyApTagsAndVlanIds, _super);
    function UpdateNetworkSsidRequestBodyApTagsAndVlanIds() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tags" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBodyApTagsAndVlanIds.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBodyApTagsAndVlanIds.prototype, "vlanId", void 0);
    return UpdateNetworkSsidRequestBodyApTagsAndVlanIds;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSsidRequestBodyApTagsAndVlanIds = UpdateNetworkSsidRequestBodyApTagsAndVlanIds;
/**
 * The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')
 */
var UpdateNetworkSsidRequestBodyAuthModeEnum;
(function (UpdateNetworkSsidRequestBodyAuthModeEnum) {
    UpdateNetworkSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexGoogle"] = "8021x-google";
    UpdateNetworkSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexLocalradius"] = "8021x-localradius";
    UpdateNetworkSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexMeraki"] = "8021x-meraki";
    UpdateNetworkSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexNac"] = "8021x-nac";
    UpdateNetworkSsidRequestBodyAuthModeEnum["EightThousandAndTwentyOnexRadius"] = "8021x-radius";
    UpdateNetworkSsidRequestBodyAuthModeEnum["IpskWithRadius"] = "ipsk-with-radius";
    UpdateNetworkSsidRequestBodyAuthModeEnum["IpskWithoutRadius"] = "ipsk-without-radius";
    UpdateNetworkSsidRequestBodyAuthModeEnum["Open"] = "open";
    UpdateNetworkSsidRequestBodyAuthModeEnum["OpenEnhanced"] = "open-enhanced";
    UpdateNetworkSsidRequestBodyAuthModeEnum["OpenWithNac"] = "open-with-nac";
    UpdateNetworkSsidRequestBodyAuthModeEnum["OpenWithRadius"] = "open-with-radius";
    UpdateNetworkSsidRequestBodyAuthModeEnum["Psk"] = "psk";
})(UpdateNetworkSsidRequestBodyAuthModeEnum = exports.UpdateNetworkSsidRequestBodyAuthModeEnum || (exports.UpdateNetworkSsidRequestBodyAuthModeEnum = {}));
/**
 * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'
 */
var UpdateNetworkSsidRequestBodyEncryptionModeEnum;
(function (UpdateNetworkSsidRequestBodyEncryptionModeEnum) {
    UpdateNetworkSsidRequestBodyEncryptionModeEnum["Wep"] = "wep";
    UpdateNetworkSsidRequestBodyEncryptionModeEnum["Wpa"] = "wpa";
})(UpdateNetworkSsidRequestBodyEncryptionModeEnum = exports.UpdateNetworkSsidRequestBodyEncryptionModeEnum || (exports.UpdateNetworkSsidRequestBodyEncryptionModeEnum = {}));
/**
 * Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
 */
var UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum;
(function (UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum) {
    UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum["AccessDisabled"] = "access disabled";
    UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum["AccessEnabled"] = "access enabled";
})(UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum = exports.UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum || (exports.UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum = {}));
var UpdateNetworkSsidRequestBodyRadiusAccountingServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkSsidRequestBodyRadiusAccountingServers, _super);
    function UpdateNetworkSsidRequestBodyRadiusAccountingServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBodyRadiusAccountingServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBodyRadiusAccountingServers.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secret" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBodyRadiusAccountingServers.prototype, "secret", void 0);
    return UpdateNetworkSsidRequestBodyRadiusAccountingServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSsidRequestBodyRadiusAccountingServers = UpdateNetworkSsidRequestBodyRadiusAccountingServers;
/**
 * This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
 */
var UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum;
(function (UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum) {
    UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum["AllowAccess"] = "Allow access";
    UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum["DenyAccess"] = "Deny access";
})(UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum = exports.UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum || (exports.UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum = {}));
/**
 * This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')
 */
var UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum;
(function (UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum) {
    UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum["RoundRobin"] = "Round robin";
    UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum["StrictPriorityOrder"] = "Strict priority order";
})(UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum = exports.UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum || (exports.UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum = {}));
var UpdateNetworkSsidRequestBodyRadiusServers = /** @class */ (function (_super) {
    __extends(UpdateNetworkSsidRequestBodyRadiusServers, _super);
    function UpdateNetworkSsidRequestBodyRadiusServers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBodyRadiusServers.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBodyRadiusServers.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secret" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBodyRadiusServers.prototype, "secret", void 0);
    return UpdateNetworkSsidRequestBodyRadiusServers;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSsidRequestBodyRadiusServers = UpdateNetworkSsidRequestBodyRadiusServers;
/**
 * The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.
 */
var UpdateNetworkSsidRequestBodySplashPageEnum;
(function (UpdateNetworkSsidRequestBodySplashPageEnum) {
    UpdateNetworkSsidRequestBodySplashPageEnum["Billing"] = "Billing";
    UpdateNetworkSsidRequestBodySplashPageEnum["CiscoISE"] = "Cisco ISE";
    UpdateNetworkSsidRequestBodySplashPageEnum["ClickThroughSplashPage"] = "Click-through splash page";
    UpdateNetworkSsidRequestBodySplashPageEnum["FacebookWiFi"] = "Facebook Wi-Fi";
    UpdateNetworkSsidRequestBodySplashPageEnum["GoogleAppsDomain"] = "Google Apps domain";
    UpdateNetworkSsidRequestBodySplashPageEnum["GoogleOAuth"] = "Google OAuth";
    UpdateNetworkSsidRequestBodySplashPageEnum["None"] = "None";
    UpdateNetworkSsidRequestBodySplashPageEnum["PasswordProtectedWithActiveDirectory"] = "Password-protected with Active Directory";
    UpdateNetworkSsidRequestBodySplashPageEnum["PasswordProtectedWithLDAP"] = "Password-protected with LDAP";
    UpdateNetworkSsidRequestBodySplashPageEnum["PasswordProtectedWithMerakiRADIUS"] = "Password-protected with Meraki RADIUS";
    UpdateNetworkSsidRequestBodySplashPageEnum["PasswordProtectedWithCustomRADIUS"] = "Password-protected with custom RADIUS";
    UpdateNetworkSsidRequestBodySplashPageEnum["SMSAuthentication"] = "SMS authentication";
    UpdateNetworkSsidRequestBodySplashPageEnum["SponsoredGuest"] = "Sponsored guest";
    UpdateNetworkSsidRequestBodySplashPageEnum["SystemsManagerSentry"] = "Systems Manager Sentry";
})(UpdateNetworkSsidRequestBodySplashPageEnum = exports.UpdateNetworkSsidRequestBodySplashPageEnum || (exports.UpdateNetworkSsidRequestBodySplashPageEnum = {}));
/**
 * The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only')
 */
var UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum;
(function (UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum) {
    UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum["Wpa1AndWpa2"] = "WPA1 and WPA2";
    UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum["Wpa1Only"] = "WPA1 only";
    UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum["Wpa2Only"] = "WPA2 only";
    UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum["Wpa3TransitionMode"] = "WPA3 Transition Mode";
    UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum["Wpa3Only"] = "WPA3 only";
})(UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = exports.UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum || (exports.UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = {}));
var UpdateNetworkSsidRequestBody = /** @class */ (function (_super) {
    __extends(UpdateNetworkSsidRequestBody, _super);
    function UpdateNetworkSsidRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: UpdateNetworkSsidRequestBodyApTagsAndVlanIds }),
        (0, class_transformer_1.Expose)({ name: "apTagsAndVlanIds" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSsidRequestBodyApTagsAndVlanIds; }),
        __metadata("design:type", Array)
    ], UpdateNetworkSsidRequestBody.prototype, "apTagsAndVlanIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "authMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availabilityTags" }),
        __metadata("design:type", Array)
    ], UpdateNetworkSsidRequestBody.prototype, "availabilityTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availableOnAllAps" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "availableOnAllAps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bandSelection" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "bandSelection", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentratorNetworkId" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "concentratorNetworkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "defaultVlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBody.prototype, "defaultVlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "disassociateClientsOnVpnFailover" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "disassociateClientsOnVpnFailover", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "encryptionMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enterpriseAdminAccess" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "enterpriseAdminAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipAssignmentMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "ipAssignmentMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lanIsolationEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "lanIsolationEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minBitrate" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBody.prototype, "minBitrate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "perClientBandwidthLimitDown" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBody.prototype, "perClientBandwidthLimitDown", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "perClientBandwidthLimitUp" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBody.prototype, "perClientBandwidthLimitUp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "psk" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "psk", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusAccountingEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusAccountingEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: UpdateNetworkSsidRequestBodyRadiusAccountingServers,
        }),
        (0, class_transformer_1.Expose)({ name: "radiusAccountingServers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSsidRequestBodyRadiusAccountingServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusAccountingServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusAttributeForGroupPolicies" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusAttributeForGroupPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusCoaEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusCoaEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusFailoverPolicy" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusFailoverPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusLoadBalancingPolicy" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusLoadBalancingPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "radiusOverride" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusOverride", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: UpdateNetworkSsidRequestBodyRadiusServers }),
        (0, class_transformer_1.Expose)({ name: "radiusServers" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkSsidRequestBodyRadiusServers; }),
        __metadata("design:type", Array)
    ], UpdateNetworkSsidRequestBody.prototype, "radiusServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secondaryConcentratorNetworkId" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "secondaryConcentratorNetworkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "splashPage" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "splashPage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useVlanTagging" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "useVlanTagging", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "visible" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "visible", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vlanId" }),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidRequestBody.prototype, "vlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "walledGardenEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkSsidRequestBody.prototype, "walledGardenEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "walledGardenRanges" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "walledGardenRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "wpaEncryptionMode" }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequestBody.prototype, "wpaEncryptionMode", void 0);
    return UpdateNetworkSsidRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSsidRequestBody = UpdateNetworkSsidRequestBody;
var UpdateNetworkSsidRequest = /** @class */ (function (_super) {
    __extends(UpdateNetworkSsidRequest, _super);
    function UpdateNetworkSsidRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateNetworkSsidRequestBody)
    ], UpdateNetworkSsidRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequest.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=number",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkSsidRequest.prototype, "number", void 0);
    return UpdateNetworkSsidRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSsidRequest = UpdateNetworkSsidRequest;
var UpdateNetworkSsidResponse = /** @class */ (function (_super) {
    __extends(UpdateNetworkSsidResponse, _super);
    function UpdateNetworkSsidResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateNetworkSsidResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateNetworkSsidResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkSsidResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkSsidResponse.prototype, "updateNetworkSsid200ApplicationJSONObject", void 0);
    return UpdateNetworkSsidResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkSsidResponse = UpdateNetworkSsidResponse;
