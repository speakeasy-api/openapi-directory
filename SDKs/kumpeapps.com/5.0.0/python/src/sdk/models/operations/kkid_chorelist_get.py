"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import chorelist as shared_chorelist
from ..shared import four_hundred_and_five as shared_four_hundred_and_five
from ..shared import four_hundred_and_twelve as shared_four_hundred_and_twelve
from ..shared import nodata as shared_nodata
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class KkidChorelistGetSecurity:
    
    auth_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Auth' }})  
    
class KkidChorelistGetDayEnum(str, Enum):
    r"""Day of week for chores (Weekly for weekly chores)"""
    SUNDAY = 'Sunday'
    MONDAY = 'Monday'
    TUESDAY = 'Tuesday'
    WEDNESDAY = 'Wednesday'
    THURSDAY = 'Thursday'
    FRIDAY = 'Friday'
    SATURDAY = 'Saturday'
    WEEKLY = 'Weekly'


@dataclasses.dataclass
class KkidChorelistGetRequest:
    
    block_dash: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'blockDash', 'style': 'form', 'explode': True }})
    r"""Filter results by blockDash parameter"""  
    can_steal: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'canSteal', 'style': 'form', 'explode': True }})
    r"""Filter results by canSteal parameter"""  
    day: Optional[KkidChorelistGetDayEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'day', 'style': 'form', 'explode': True }})
    r"""Day of week for chores (Weekly for weekly chores)"""  
    include_calendar: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeCalendar', 'style': 'form', 'explode': True }})
    r"""include calendar notations (default is false)"""  
    kid_username: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'kidUsername', 'style': 'form', 'explode': True }})
    r"""Username of kid you wish to search"""  
    optional: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'optional', 'style': 'form', 'explode': True }})
    r"""Filter results by optional parameter"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Status of Chore to search"""  
    

@dataclasses.dataclass
class KkidChorelistGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_and_five: Optional[shared_four_hundred_and_five.FourHundredAndFive] = dataclasses.field(default=None)
    r"""Method Not Allowed- API user does not have access to use this method"""  
    four_hundred_and_twelve: Optional[shared_four_hundred_and_twelve.FourHundredAndTwelve] = dataclasses.field(default=None)
    r"""API Access Denied! Your API key is invalid, expired, or not supplied!"""  
    chorelist: Optional[shared_chorelist.Chorelist] = dataclasses.field(default=None)
    r"""search results matching criteria"""  
    nodata: Optional[shared_nodata.Nodata] = dataclasses.field(default=None)
    r"""No Data Found."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    