<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Scripts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Compile a script
     * 
     * Compile a script
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Script $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompileScriptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompileScriptResponse
     */
	public function compileScript(
        \OpenAPI\OpenAPI\Models\Shared\Script $request,
        \OpenAPI\OpenAPI\Models\Operations\CompileScriptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompileScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/scripts/_compile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompileScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scriptCompilationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScriptCompilationResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new script
     * 
     * Create a new script
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Script $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateScriptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateScriptResponse
     */
	public function createScript(
        \OpenAPI\OpenAPI\Models\Shared\Script $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateScriptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/scripts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->script = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Script', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a script
     * 
     * Delete a script
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScriptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScriptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteScriptResponse
     */
	public function deleteScript(
        \OpenAPI\OpenAPI\Models\Operations\DeleteScriptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteScriptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/scripts/{scriptId}', \OpenAPI\OpenAPI\Models\Operations\DeleteScriptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleted = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deleted', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all scripts
     * 
     * Get all scripts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindAllScriptsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindAllScriptsResponse
     */
	public function findAllScripts(
        \OpenAPI\OpenAPI\Models\Operations\FindAllScriptsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindAllScriptsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/scripts');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindAllScriptsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scripts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Script>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a script
     * 
     * Get a script
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdResponse
     */
	public function findScriptById(
        \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/scripts/{scriptId}', \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindScriptByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->script = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Script', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a script with a diff
     * 
     * Update a script with a diff
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchScriptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchScriptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchScriptResponse
     */
	public function patchScript(
        \OpenAPI\OpenAPI\Models\Operations\PatchScriptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchScriptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/scripts/{scriptId}', \OpenAPI\OpenAPI\Models\Operations\PatchScriptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->script = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Script', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a script
     * 
     * Update a script
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateScriptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateScriptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateScriptResponse
     */
	public function updateScript(
        \OpenAPI\OpenAPI\Models\Operations\UpdateScriptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateScriptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/scripts/{scriptId}', \OpenAPI\OpenAPI\Models\Operations\UpdateScriptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "script", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->script = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Script', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}