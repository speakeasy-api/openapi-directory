/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Job - A Dataproc job resource.
 */
public class Job {
    /**
     * Output only. Indicates whether the job is completed. If the value is false, the job is still in progress. If true, the job is completed, and status.state field will indicate if it was successful, failed, or cancelled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("done")
    public Boolean done;

    public Job withDone(Boolean done) {
        this.done = done;
        return this;
    }
    
    /**
     * Output only. If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("driverControlFilesUri")
    public String driverControlFilesUri;

    public Job withDriverControlFilesUri(String driverControlFilesUri) {
        this.driverControlFilesUri = driverControlFilesUri;
        return this;
    }
    
    /**
     * Output only. A URI pointing to the location of the stdout of the job's driver program.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("driverOutputResourceUri")
    public String driverOutputResourceUri;

    public Job withDriverOutputResourceUri(String driverOutputResourceUri) {
        this.driverOutputResourceUri = driverOutputResourceUri;
        return this;
    }
    
    /**
     * Driver scheduling configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("driverSchedulingConfig")
    public DriverSchedulingConfig driverSchedulingConfig;

    public Job withDriverSchedulingConfig(DriverSchedulingConfig driverSchedulingConfig) {
        this.driverSchedulingConfig = driverSchedulingConfig;
        return this;
    }
    
    /**
     * A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hadoopJob")
    public HadoopJob hadoopJob;

    public Job withHadoopJob(HadoopJob hadoopJob) {
        this.hadoopJob = hadoopJob;
        return this;
    }
    
    /**
     * A Dataproc job for running Apache Hive (https://hive.apache.org/) queries on YARN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiveJob")
    public HiveJob hiveJob;

    public Job withHiveJob(HiveJob hiveJob) {
        this.hiveJob = hiveJob;
        return this;
    }
    
    /**
     * Output only. A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that may be reused over time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobUuid")
    public String jobUuid;

    public Job withJobUuid(String jobUuid) {
        this.jobUuid = jobUuid;
        return this;
    }
    
    /**
     * Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Job withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pigJob")
    public PigJob pigJob;

    public Job withPigJob(PigJob pigJob) {
        this.pigJob = pigJob;
        return this;
    }
    
    /**
     * Dataproc job config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placement")
    public JobPlacement placement;

    public Job withPlacement(JobPlacement placement) {
        this.placement = placement;
        return this;
    }
    
    /**
     * A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prestoJob")
    public PrestoJob prestoJob;

    public Job withPrestoJob(PrestoJob prestoJob) {
        this.prestoJob = prestoJob;
        return this;
    }
    
    /**
     * A Dataproc job for running Apache PySpark (https://spark.apache.org/docs/0.9.0/python-programming-guide.html) applications on YARN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pysparkJob")
    public PySparkJob pysparkJob;

    public Job withPysparkJob(PySparkJob pysparkJob) {
        this.pysparkJob = pysparkJob;
        return this;
    }
    
    /**
     * Encapsulates the full scoping used to reference a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public JobReference reference;

    public Job withReference(JobReference reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Job scheduling options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduling")
    public JobScheduling scheduling;

    public Job withScheduling(JobScheduling scheduling) {
        this.scheduling = scheduling;
        return this;
    }
    
    /**
     * A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkJob")
    public SparkJob sparkJob;

    public Job withSparkJob(SparkJob sparkJob) {
        this.sparkJob = sparkJob;
        return this;
    }
    
    /**
     * A Dataproc job for running Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) applications on YARN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkRJob")
    public SparkRJob sparkRJob;

    public Job withSparkRJob(SparkRJob sparkRJob) {
        this.sparkRJob = sparkRJob;
        return this;
    }
    
    /**
     * A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkSqlJob")
    public SparkSqlJob sparkSqlJob;

    public Job withSparkSqlJob(SparkSqlJob sparkSqlJob) {
        this.sparkSqlJob = sparkSqlJob;
        return this;
    }
    
    /**
     * Dataproc job status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public JobStatus status;

    public Job withStatus(JobStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Output only. The previous job status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusHistory")
    public JobStatus[] statusHistory;

    public Job withStatusHistory(JobStatus[] statusHistory) {
        this.statusHistory = statusHistory;
        return this;
    }
    
    /**
     * A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trinoJob")
    public TrinoJob trinoJob;

    public Job withTrinoJob(TrinoJob trinoJob) {
        this.trinoJob = trinoJob;
        return this;
    }
    
    /**
     * Output only. The collection of YARN applications spun up by this job.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yarnApplications")
    public YarnApplication[] yarnApplications;

    public Job withYarnApplications(YarnApplication[] yarnApplications) {
        this.yarnApplications = yarnApplications;
        return this;
    }
    
    public Job(){}
}
