// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ErrorsGroupListSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type ErrorsGroupListPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// ErrorsGroupListErrorTypeEnum - Type of error (handled vs unhandled), including All
type ErrorsGroupListErrorTypeEnum string

const (
	ErrorsGroupListErrorTypeEnumAll            ErrorsGroupListErrorTypeEnum = "all"
	ErrorsGroupListErrorTypeEnumUnhandledError ErrorsGroupListErrorTypeEnum = "unhandledError"
	ErrorsGroupListErrorTypeEnumHandledError   ErrorsGroupListErrorTypeEnum = "handledError"
)

func (e *ErrorsGroupListErrorTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "unhandledError":
		fallthrough
	case "handledError":
		*e = ErrorsGroupListErrorTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupListErrorTypeEnum: %s", s)
	}
}

type ErrorsGroupListQueryParams struct {
	// controls the sorting order and sorting based on which column
	DollarOrderby *string `queryParam:"style=form,explode=true,name=$orderby"`
	// The maximum number of results to return. (0 will fetch all results till the max number.)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// app build
	AppBuild *string `queryParam:"style=form,explode=true,name=app_build"`
	// Last date time in data in ISO 8601 date time format
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// Type of error (handled vs unhandled), including All
	ErrorType  *ErrorsGroupListErrorTypeEnum `queryParam:"style=form,explode=true,name=errorType"`
	GroupState *string                       `queryParam:"style=form,explode=true,name=groupState"`
	// Start date time in data in ISO 8601 date time format
	Start   time.Time `queryParam:"style=form,explode=true,name=start"`
	Version *string   `queryParam:"style=form,explode=true,name=version"`
}

type ErrorsGroupListRequest struct {
	PathParams  ErrorsGroupListPathParams
	QueryParams ErrorsGroupListQueryParams
	Security    ErrorsGroupListSecurity
}

type ErrorsGroupListDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsGroupListDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsGroupListDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsGroupListDefaultApplicationJSONErrorCodeEnumConflict            ErrorsGroupListDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsGroupListDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsGroupListDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsGroupListDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsGroupListDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsGroupListDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsGroupListDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsGroupListDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsGroupListDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsGroupListDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsGroupListDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsGroupListDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsGroupListDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupListDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsGroupListDefaultApplicationJSONError struct {
	Code    ErrorsGroupListDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                             `json:"message"`
}

// ErrorsGroupListDefaultApplicationJSON - Error code with reason
type ErrorsGroupListDefaultApplicationJSON struct {
	Error ErrorsGroupListDefaultApplicationJSONError `json:"error"`
}

// ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum - programming language of the frame
type ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum string

const (
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumJavaScript   ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "JavaScript"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumCSharp       ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "CSharp"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumObjectiveC   ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Objective-C"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumObjectiveCpp ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Objective-Cpp"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumCpp          ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Cpp"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumC            ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "C"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumSwift        ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Swift"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumJava         ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Java"
	ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnumUnknown      ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Unknown"
)

func (e *ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum: %s", s)
	}
}

type ErrorsGroupList200ApplicationJSONErrorGroupsReasonFrames struct {
	// this line isn't from any framework
	AppCode *bool `json:"appCode,omitempty"`
	// is a class method
	ClassMethod *bool `json:"classMethod,omitempty"`
	// name of the class
	ClassName *string `json:"className,omitempty"`
	// Formatted frame string
	CodeFormatted *string `json:"codeFormatted,omitempty"`
	// Unformatted Frame string
	CodeRaw *string `json:"codeRaw,omitempty"`
	// Exception type.
	ExceptionType *string `json:"exceptionType,omitempty"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"frameworkName,omitempty"`
	// programming language of the frame
	Language *ErrorsGroupList200ApplicationJSONErrorGroupsReasonFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"methodParams,omitempty"`
	// OS exception type. (aka. SIGNAL)
	OsExceptionType *string `json:"osExceptionType,omitempty"`
}

type ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum string

const (
	ErrorsGroupList200ApplicationJSONErrorGroupsStateEnumOpen    ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum = "open"
	ErrorsGroupList200ApplicationJSONErrorGroupsStateEnumClosed  ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum = "closed"
	ErrorsGroupList200ApplicationJSONErrorGroupsStateEnumIgnored ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum = "ignored"
)

func (e *ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum: %s", s)
	}
}

type ErrorsGroupList200ApplicationJSONErrorGroups struct {
	Annotation           *string                                                    `json:"annotation,omitempty"`
	AppBuild             *string                                                    `json:"appBuild,omitempty"`
	AppVersion           string                                                     `json:"appVersion"`
	CodeRaw              *string                                                    `json:"codeRaw,omitempty"`
	Count                int64                                                      `json:"count"`
	DeviceCount          int64                                                      `json:"deviceCount"`
	ErrorGroupID         string                                                     `json:"errorGroupId"`
	ExceptionAppCode     *bool                                                      `json:"exceptionAppCode,omitempty"`
	ExceptionClassMethod *bool                                                      `json:"exceptionClassMethod,omitempty"`
	ExceptionClassName   *string                                                    `json:"exceptionClassName,omitempty"`
	ExceptionFile        *string                                                    `json:"exceptionFile,omitempty"`
	ExceptionLine        *string                                                    `json:"exceptionLine,omitempty"`
	ExceptionMessage     *string                                                    `json:"exceptionMessage,omitempty"`
	ExceptionMethod      *string                                                    `json:"exceptionMethod,omitempty"`
	ExceptionType        *string                                                    `json:"exceptionType,omitempty"`
	FirstOccurrence      time.Time                                                  `json:"firstOccurrence"`
	Hidden               *bool                                                      `json:"hidden,omitempty"`
	LastOccurrence       time.Time                                                  `json:"lastOccurrence"`
	ReasonFrames         []ErrorsGroupList200ApplicationJSONErrorGroupsReasonFrames `json:"reasonFrames,omitempty"`
	State                ErrorsGroupList200ApplicationJSONErrorGroupsStateEnum      `json:"state"`
}

// ErrorsGroupList200ApplicationJSON - List of error groups
type ErrorsGroupList200ApplicationJSON struct {
	ErrorGroups []ErrorsGroupList200ApplicationJSONErrorGroups `json:"errorGroups,omitempty"`
	NextLink    *string                                        `json:"nextLink,omitempty"`
}

type ErrorsGroupListResponse struct {
	ContentType string
	// List of error groups
	ErrorsGroupList200ApplicationJSONObject *ErrorsGroupList200ApplicationJSON
	// Error code with reason
	ErrorsGroupListDefaultApplicationJSONObject *ErrorsGroupListDefaultApplicationJSON
	StatusCode                                  int
	RawResponse                                 *http.Response
}
