// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetWFSInventoryQueryParams struct {
	// last inventory modified date - starting range.
	FromModifiedDate *string `queryParam:"style=form,explode=true,name=fromModifiedDate"`
	// Number of Sku to be returned. Cannot be larger than 300.
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Offset is the number of records you wish to skip before selecting records.
	Offset *string `queryParam:"style=form,explode=true,name=offset"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
	Sku *string `queryParam:"style=form,explode=true,name=sku"`
	// last inventory modified date - starting range.
	ToModifiedDate *string `queryParam:"style=form,explode=true,name=toModifiedDate"`
}

type GetWFSInventoryHeaders struct {
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

type GetWFSInventoryRequest struct {
	QueryParams GetWFSInventoryQueryParams
	Headers     GetWFSInventoryHeaders
}

type GetWFSInventory200ApplicationJSONHeaders struct {
	// Information about the quantity in inventory
	Limit *int `json:"limit,omitempty"`
	// Offset is the number of records you wish to skip before selecting results.
	Offset *int `json:"offset,omitempty"`
	// Total number of results for query.
	TotalCount *int `json:"totalCount,omitempty"`
}

type GetWFSInventory200ApplicationJSONPayloadInventoryShipNodes struct {
	// The available quantity is the quantity of an item that is available to be allocated to orders.
	AvailToSellQty *int `json:"availToSellQty,omitempty"`
	// Last changes date for the item.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
	OnHandQty *int `json:"onHandQty,omitempty"`
	// Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.
	ShipNodeType *string `json:"shipNodeType,omitempty"`
}

type GetWFSInventory200ApplicationJSONPayloadInventory struct {
	ShipNodes []GetWFSInventory200ApplicationJSONPayloadInventoryShipNodes `json:"shipNodes,omitempty"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
	Sku *string `json:"sku,omitempty"`
}

type GetWFSInventory200ApplicationJSONPayload struct {
	Inventory []GetWFSInventory200ApplicationJSONPayloadInventory `json:"inventory,omitempty"`
}

// GetWFSInventory200ApplicationJSON - Successful Operation
type GetWFSInventory200ApplicationJSON struct {
	Headers *GetWFSInventory200ApplicationJSONHeaders `json:"headers,omitempty"`
	Payload *GetWFSInventory200ApplicationJSONPayload `json:"payload,omitempty"`
}

type GetWFSInventoryResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	GetWFSInventory200ApplicationJSONObject *GetWFSInventory200ApplicationJSON
}
