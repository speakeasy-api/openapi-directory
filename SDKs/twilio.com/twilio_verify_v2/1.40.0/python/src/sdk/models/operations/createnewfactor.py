"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import new_factor_enum_factor_types_enum as shared_new_factor_enum_factor_types_enum
from ..shared import new_factor_enum_notification_platforms_enum as shared_new_factor_enum_notification_platforms_enum
from ..shared import new_factor_enum_totp_algorithms_enum as shared_new_factor_enum_totp_algorithms_enum
from ..shared import verify_v2_service_entity_new_factor as shared_verify_v2_service_entity_new_factor
from typing import Any, Optional

CREATE_NEW_FACTOR_SERVERS = [
	"https://verify.twilio.com",
]


@dataclasses.dataclass
class CreateNewFactorSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateNewFactorCreateNewFactorRequest:
    
    factor_type: shared_new_factor_enum_factor_types_enum.NewFactorEnumFactorTypesEnum = dataclasses.field(metadata={'form': { 'field_name': 'FactorType' }})  
    friendly_name: str = dataclasses.field(metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors.
    For `factor_type` `push`, this could be a device name.
    For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property.
    At the same time, we recommend avoiding providing PII.
    """  
    binding_alg: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Binding.Alg' }})
    r"""The algorithm used when `factor_type` is `push`. Algorithm supported: `ES256`"""  
    binding_public_key: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Binding.PublicKey' }})
    r"""The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.
    
    Required when `factor_type` is `push`
    """  
    binding_secret: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Binding.Secret' }})
    r"""The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.
    
    Used when `factor_type` is `totp`
    """  
    config_alg: Optional[shared_new_factor_enum_totp_algorithms_enum.NewFactorEnumTotpAlgorithmsEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.Alg' }})  
    config_app_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.AppId' }})
    r"""The ID that uniquely identifies your app in the Google or Apple store, such as `com.example.myapp`. It can be up to 100 characters long.
    
    Required when `factor_type` is `push`.
    """  
    config_code_length: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.CodeLength' }})
    r"""Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property `totp.code_length`. If not configured defaults to 6.
    
    Used when `factor_type` is `totp`
    """  
    config_notification_platform: Optional[shared_new_factor_enum_notification_platforms_enum.NewFactorEnumNotificationPlatformsEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.NotificationPlatform' }})  
    config_notification_token: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.NotificationToken' }})
    r"""For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.
    
    Required when `factor_type` is `push`.
    """  
    config_sdk_version: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.SdkVersion' }})
    r"""The Verify Push SDK version used to configure the factor
    
    Required when `factor_type` is `push`
    """  
    config_skew: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.Skew' }})
    r"""The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property `totp.skew`. If not configured defaults to 1.
    
    Used when `factor_type` is `totp`
    """  
    config_time_step: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Config.TimeStep' }})
    r"""Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property `totp.time_step`. Defaults to 30 seconds if not configured.
    
    Used when `factor_type` is `totp`
    """  
    metadata: Optional[Any] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Metadata' }})
    r"""Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\\"os\\": \\"Android\\"}`. Can be up to 1024 characters in length."""  
    

@dataclasses.dataclass
class CreateNewFactorRequest:
    
    identity: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Identity', 'style': 'simple', 'explode': False }})
    r"""Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters."""  
    service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ServiceSid', 'style': 'simple', 'explode': False }})
    r"""The unique SID identifier of the Service."""  
    request_body: Optional[CreateNewFactorCreateNewFactorRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateNewFactorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    verify_v2_service_entity_new_factor: Optional[shared_verify_v2_service_entity_new_factor.VerifyV2ServiceEntityNewFactor] = dataclasses.field(default=None)
    r"""Created"""  
    