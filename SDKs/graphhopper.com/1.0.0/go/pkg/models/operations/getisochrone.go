// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetIsochroneWeightingEnum - Use `"shortest"` to get an isodistance line instead of an isochrone.
type GetIsochroneWeightingEnum string

const (
	GetIsochroneWeightingEnumFastest  GetIsochroneWeightingEnum = "fastest"
	GetIsochroneWeightingEnumShortest GetIsochroneWeightingEnum = "shortest"
)

func (e *GetIsochroneWeightingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fastest":
		fallthrough
	case "shortest":
		*e = GetIsochroneWeightingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIsochroneWeightingEnum: %s", s)
	}
}

type GetIsochroneRequest struct {
	// Number by which to divide the given `time_limit` to create `buckets` nested isochrones of time intervals `time_limit-n*time_limit/buckets`. Applies analogously to `distance_limit`.
	Buckets *int `queryParam:"style=form,explode=true,name=buckets"`
	// Specify which distance the vehicle should travel. In meters.
	DistanceLimit *int `queryParam:"style=form,explode=true,name=distance_limit"`
	// Specify the start coordinate
	Point string `queryParam:"style=form,explode=true,name=point"`
	// If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon "inside" to the point.
	// Example use case for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*
	//
	ReverseFlow *bool `queryParam:"style=form,explode=true,name=reverse_flow"`
	// Specify which time the vehicle should travel. In seconds.
	TimeLimit *int `queryParam:"style=form,explode=true,name=time_limit"`
	// The vehicle profile for which the route should be calculated.
	//
	Vehicle *shared.VehicleProfileIDEnum `queryParam:"style=form,explode=true,name=vehicle"`
	// Use `"shortest"` to get an isodistance line instead of an isochrone.
	Weighting *GetIsochroneWeightingEnum `queryParam:"style=form,explode=true,name=weighting"`
}

type GetIsochroneResponse struct {
	ContentType string
	// Unexpected Error
	GHError *shared.GHError
	// Isochrone Result
	IsochroneResponse *shared.IsochroneResponse
	StatusCode        int
	RawResponse       *http.Response
}
