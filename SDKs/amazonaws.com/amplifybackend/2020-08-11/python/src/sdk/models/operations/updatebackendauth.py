"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import additionalconstraintselement_enum as shared_additionalconstraintselement_enum
from ..shared import backendauthappleproviderconfig as shared_backendauthappleproviderconfig
from ..shared import backendauthsocialproviderconfig as shared_backendauthsocialproviderconfig
from ..shared import mfamode_enum as shared_mfamode_enum
from ..shared import mfatypeselement_enum as shared_mfatypeselement_enum
from ..shared import oauthscopeselement_enum as shared_oauthscopeselement_enum
from ..shared import updatebackendauthresponse as shared_updatebackendauthresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateBackendAuthRequestBodyResourceConfigAuthResourcesEnum(str, Enum):
    r"""Defines the service name to use when configuring an authentication resource in your Amplify project."""
    USER_POOL_ONLY = 'USER_POOL_ONLY'
    IDENTITY_POOL_AND_USER_POOL = 'IDENTITY_POOL_AND_USER_POOL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigIdentityPoolConfigs:
    r"""Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project."""
    
    unauthenticated_login: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnauthenticatedLogin'), 'exclude': lambda f: f is None }})  
    
class UpdateBackendAuthRequestBodyResourceConfigServiceEnum(str, Enum):
    r"""Defines the service name to use when configuring an authentication resource in your Amplify project."""
    COGNITO = 'COGNITO'

class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum(str, Enum):
    r"""<b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users that want to recover their password."""
    EMAIL = 'EMAIL'
    SMS = 'SMS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordEmailSettings:
    r"""<b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password."""
    
    email_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailMessage'), 'exclude': lambda f: f is None }})  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSubject'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordSmsSettings:
    r"""<b>(DEPRECATED)</b> The configuration for the SMS message sent when an Amplify app user forgets their password."""
    
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPassword:
    r"""<b>(DEPRECATED)</b> Describes the forgot password policy for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    delivery_method: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryMethod'), 'exclude': lambda f: f is None }})  
    email_settings: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordEmailSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSettings'), 'exclude': lambda f: f is None }})  
    sms_settings: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordSmsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfaSettings:
    r"""The settings of your MFA configuration for the backend of your Amplify project."""
    
    mfa_types: Optional[list[shared_mfatypeselement_enum.MfaTypesElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MfaTypes'), 'exclude': lambda f: f is None }})  
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfa:
    r"""Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project."""
    
    mfa_mode: Optional[shared_mfamode_enum.MFAModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MFAMode'), 'exclude': lambda f: f is None }})  
    settings: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfaSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum(str, Enum):
    r"""The OAuth grant type to allow app users to authenticate from your Amplify app."""
    CODE = 'CODE'
    IMPLICIT = 'IMPLICIT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthSocialProviderSettings:
    r"""Describes third-party social federation configurations for allowing your users to sign in with OAuth."""
    
    facebook: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Facebook'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    google: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Google'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    login_with_amazon: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoginWithAmazon'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    sign_in_with_apple: Optional[shared_backendauthappleproviderconfig.BackendAuthAppleProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SignInWithApple'), 'exclude': lambda f: f is None }})
    r"""Describes Apple social federation configurations for allowing your app users to sign in using OAuth."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuth:
    r"""Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    domain_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainPrefix'), 'exclude': lambda f: f is None }})  
    o_auth_grant_type: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuthGrantType'), 'exclude': lambda f: f is None }})  
    o_auth_scopes: Optional[list[shared_oauthscopeselement_enum.OAuthScopesElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuthScopes'), 'exclude': lambda f: f is None }})  
    redirect_sign_in_ur_is: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedirectSignInURIs'), 'exclude': lambda f: f is None }})  
    redirect_sign_out_ur_is: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedirectSignOutURIs'), 'exclude': lambda f: f is None }})  
    social_provider_settings: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthSocialProviderSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SocialProviderSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsPasswordPolicy:
    r"""Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    additional_constraints: Optional[list[shared_additionalconstraintselement_enum.AdditionalConstraintsElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalConstraints'), 'exclude': lambda f: f is None }})  
    minimum_length: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumLength'), 'exclude': lambda f: f is None }})  
    
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum(str, Enum):
    r"""The type of verification message to send."""
    EMAIL = 'EMAIL'
    SMS = 'SMS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageEmailSettings:
    r"""The settings for the email message."""
    
    email_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailMessage'), 'exclude': lambda f: f is None }})  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSubject'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageSmsSettings:
    r"""The settings for the SMS message."""
    
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessage:
    r"""Describes the email or SMS verification message for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    delivery_method: UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryMethod') }})  
    email_settings: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageEmailSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSettings'), 'exclude': lambda f: f is None }})  
    sms_settings: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageSmsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigs:
    r"""Describes the authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project."""
    
    forgot_password: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPassword] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForgotPassword'), 'exclude': lambda f: f is None }})  
    mfa: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfa] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mfa'), 'exclude': lambda f: f is None }})  
    o_auth: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuth'), 'exclude': lambda f: f is None }})  
    password_policy: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsPasswordPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PasswordPolicy'), 'exclude': lambda f: f is None }})  
    verification_message: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerificationMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBodyResourceConfig:
    r"""Defines the resource configuration when updating an authentication resource in your Amplify project."""
    
    auth_resources: Optional[UpdateBackendAuthRequestBodyResourceConfigAuthResourcesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthResources'), 'exclude': lambda f: f is None }})  
    identity_pool_configs: Optional[UpdateBackendAuthRequestBodyResourceConfigIdentityPoolConfigs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolConfigs'), 'exclude': lambda f: f is None }})  
    service: Optional[UpdateBackendAuthRequestBodyResourceConfigServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Service'), 'exclude': lambda f: f is None }})  
    user_pool_configs: Optional[UpdateBackendAuthRequestBodyResourceConfigUserPoolConfigs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolConfigs'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBackendAuthRequestBody:
    
    resource_config: UpdateBackendAuthRequestBodyResourceConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceConfig') }})
    r"""Defines the resource configuration when updating an authentication resource in your Amplify project."""  
    resource_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName') }})
    r"""The name of this resource."""  
    

@dataclasses.dataclass
class UpdateBackendAuthRequest:
    
    app_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'appId', 'style': 'simple', 'explode': False }})
    r"""The app ID."""  
    backend_environment_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'backendEnvironmentName', 'style': 'simple', 'explode': False }})
    r"""The name of the backend environment."""  
    request_body: UpdateBackendAuthRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateBackendAuthResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    gateway_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""GatewayTimeoutException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    update_backend_auth_response: Optional[shared_updatebackendauthresponse.UpdateBackendAuthResponse] = dataclasses.field(default=None)
    r"""Success"""  
    