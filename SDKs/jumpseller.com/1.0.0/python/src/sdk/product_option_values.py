"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProductOptionValues:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_products_id_options_option_id_values_value_id_json(self, request: operations.DeleteProductsIDOptionsOptionIDValuesValueIDJSONRequest) -> operations.DeleteProductsIDOptionsOptionIDValuesValueIDJSONResponse:
        r"""Delete a Product Option Value."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductsIDOptionsOptionIDValuesValueIDJSONRequest, base_url, '/products/{id}/options/{option_id}/values/{value_id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteProductsIDOptionsOptionIDValuesValueIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductsIDOptionsOptionIDValuesValueIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_products_id_options_option_id_values_value_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_id_options_option_id_values_json(self, request: operations.GetProductsIDOptionsOptionIDValuesJSONRequest) -> operations.GetProductsIDOptionsOptionIDValuesJSONResponse:
        r"""Retrieve all Product Option Values."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsIDOptionsOptionIDValuesJSONRequest, base_url, '/products/{id}/options/{option_id}/values.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsIDOptionsOptionIDValuesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsIDOptionsOptionIDValuesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProductOptionValue]])
                res.product_option_values = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_id_options_option_id_values_count_json(self, request: operations.GetProductsIDOptionsOptionIDValuesCountJSONRequest) -> operations.GetProductsIDOptionsOptionIDValuesCountJSONResponse:
        r"""Count all Product Option Values."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsIDOptionsOptionIDValuesCountJSONRequest, base_url, '/products/{id}/options/{option_id}/values/count.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsIDOptionsOptionIDValuesCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsIDOptionsOptionIDValuesCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_id_options_option_id_values_value_id_json(self, request: operations.GetProductsIDOptionsOptionIDValuesValueIDJSONRequest) -> operations.GetProductsIDOptionsOptionIDValuesValueIDJSONResponse:
        r"""Retrieve a single Product Option Value."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsIDOptionsOptionIDValuesValueIDJSONRequest, base_url, '/products/{id}/options/{option_id}/values/{value_id}.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsIDOptionsOptionIDValuesValueIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsIDOptionsOptionIDValuesValueIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductOptionValue])
                res.product_option_value = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_products_id_options_option_id_values_json(self, request: operations.PostProductsIDOptionsOptionIDValuesJSONRequest) -> operations.PostProductsIDOptionsOptionIDValuesJSONResponse:
        r"""Create a new Product Option Value."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostProductsIDOptionsOptionIDValuesJSONRequest, base_url, '/products/{id}/options/{option_id}/values.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "product_option_value_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostProductsIDOptionsOptionIDValuesJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostProductsIDOptionsOptionIDValuesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductOptionValue])
                res.product_option_value = out

        return res

    def put_products_id_options_option_id_values_value_id_json(self, request: operations.PutProductsIDOptionsOptionIDValuesValueIDJSONRequest) -> operations.PutProductsIDOptionsOptionIDValuesValueIDJSONResponse:
        r"""Modify an existing Product Option Value."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutProductsIDOptionsOptionIDValuesValueIDJSONRequest, base_url, '/products/{id}/options/{option_id}/values/{value_id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "product_option_value_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutProductsIDOptionsOptionIDValuesValueIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutProductsIDOptionsOptionIDValuesValueIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductOptionValue])
                res.product_option_value = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    