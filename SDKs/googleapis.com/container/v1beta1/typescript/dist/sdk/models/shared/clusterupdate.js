"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterUpdate = exports.ClusterUpdateDesiredStackTypeEnum = exports.ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum = exports.ClusterUpdateDesiredDatapathProviderEnum = void 0;
var utils_1 = require("../../../internal/utils");
var addonsconfig_1 = require("./addonsconfig");
var authenticatorgroupsconfig_1 = require("./authenticatorgroupsconfig");
var binaryauthorization_1 = require("./binaryauthorization");
var clusterautoscaling_1 = require("./clusterautoscaling");
var clustertelemetry_1 = require("./clustertelemetry");
var costmanagementconfig_1 = require("./costmanagementconfig");
var databaseencryption_1 = require("./databaseencryption");
var defaultsnatstatus_1 = require("./defaultsnatstatus");
var dnsconfig_1 = require("./dnsconfig");
var gatewayapiconfig_1 = require("./gatewayapiconfig");
var gcfsconfig_1 = require("./gcfsconfig");
var identityserviceconfig_1 = require("./identityserviceconfig");
var ilbsubsettingconfig_1 = require("./ilbsubsettingconfig");
var intranodevisibilityconfig_1 = require("./intranodevisibilityconfig");
var loggingconfig_1 = require("./loggingconfig");
var masterauthorizednetworksconfig_1 = require("./masterauthorizednetworksconfig");
var meshcertificates_1 = require("./meshcertificates");
var monitoringconfig_1 = require("./monitoringconfig");
var networktags_1 = require("./networktags");
var nodepoolautoscaling_1 = require("./nodepoolautoscaling");
var nodepoolloggingconfig_1 = require("./nodepoolloggingconfig");
var notificationconfig_1 = require("./notificationconfig");
var podsecuritypolicyconfig_1 = require("./podsecuritypolicyconfig");
var privateclusterconfig_1 = require("./privateclusterconfig");
var protectconfig_1 = require("./protectconfig");
var releasechannel_1 = require("./releasechannel");
var resourceusageexportconfig_1 = require("./resourceusageexportconfig");
var serviceexternalipsconfig_1 = require("./serviceexternalipsconfig");
var shieldednodes_1 = require("./shieldednodes");
var tpuconfig_1 = require("./tpuconfig");
var verticalpodautoscaling_1 = require("./verticalpodautoscaling");
var workloadaltsconfig_1 = require("./workloadaltsconfig");
var workloadcertificates_1 = require("./workloadcertificates");
var workloadidentityconfig_1 = require("./workloadidentityconfig");
var class_transformer_1 = require("class-transformer");
/**
 * The desired datapath provider for the cluster.
 */
var ClusterUpdateDesiredDatapathProviderEnum;
(function (ClusterUpdateDesiredDatapathProviderEnum) {
    ClusterUpdateDesiredDatapathProviderEnum["DatapathProviderUnspecified"] = "DATAPATH_PROVIDER_UNSPECIFIED";
    ClusterUpdateDesiredDatapathProviderEnum["LegacyDatapath"] = "LEGACY_DATAPATH";
    ClusterUpdateDesiredDatapathProviderEnum["AdvancedDatapath"] = "ADVANCED_DATAPATH";
})(ClusterUpdateDesiredDatapathProviderEnum = exports.ClusterUpdateDesiredDatapathProviderEnum || (exports.ClusterUpdateDesiredDatapathProviderEnum = {}));
/**
 * The desired state of IPv6 connectivity to Google Services.
 */
var ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum;
(function (ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum) {
    ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum["PrivateIpv6GoogleAccessUnspecified"] = "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED";
    ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum["PrivateIpv6GoogleAccessDisabled"] = "PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED";
    ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum["PrivateIpv6GoogleAccessToGoogle"] = "PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE";
    ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum["PrivateIpv6GoogleAccessBidirectional"] = "PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL";
})(ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum = exports.ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum || (exports.ClusterUpdateDesiredPrivateIpv6GoogleAccessEnum = {}));
/**
 * The desired stack type of the cluster. If a stack type is provided and does not match the current stack type of the cluster, update will attempt to change the stack type to the new type.
 */
var ClusterUpdateDesiredStackTypeEnum;
(function (ClusterUpdateDesiredStackTypeEnum) {
    ClusterUpdateDesiredStackTypeEnum["StackTypeUnspecified"] = "STACK_TYPE_UNSPECIFIED";
    ClusterUpdateDesiredStackTypeEnum["Ipv4"] = "IPV4";
    ClusterUpdateDesiredStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
})(ClusterUpdateDesiredStackTypeEnum = exports.ClusterUpdateDesiredStackTypeEnum || (exports.ClusterUpdateDesiredStackTypeEnum = {}));
/**
 * ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
 */
var ClusterUpdate = /** @class */ (function (_super) {
    __extends(ClusterUpdate, _super);
    function ClusterUpdate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredAddonsConfig" }),
        (0, class_transformer_1.Type)(function () { return addonsconfig_1.AddonsConfig; }),
        __metadata("design:type", addonsconfig_1.AddonsConfig)
    ], ClusterUpdate.prototype, "desiredAddonsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredAuthenticatorGroupsConfig" }),
        (0, class_transformer_1.Type)(function () { return authenticatorgroupsconfig_1.AuthenticatorGroupsConfig; }),
        __metadata("design:type", authenticatorgroupsconfig_1.AuthenticatorGroupsConfig)
    ], ClusterUpdate.prototype, "desiredAuthenticatorGroupsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredBinaryAuthorization" }),
        (0, class_transformer_1.Type)(function () { return binaryauthorization_1.BinaryAuthorization; }),
        __metadata("design:type", binaryauthorization_1.BinaryAuthorization)
    ], ClusterUpdate.prototype, "desiredBinaryAuthorization", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredClusterAutoscaling" }),
        (0, class_transformer_1.Type)(function () { return clusterautoscaling_1.ClusterAutoscaling; }),
        __metadata("design:type", clusterautoscaling_1.ClusterAutoscaling)
    ], ClusterUpdate.prototype, "desiredClusterAutoscaling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredClusterTelemetry" }),
        (0, class_transformer_1.Type)(function () { return clustertelemetry_1.ClusterTelemetry; }),
        __metadata("design:type", clustertelemetry_1.ClusterTelemetry)
    ], ClusterUpdate.prototype, "desiredClusterTelemetry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredCostManagementConfig" }),
        (0, class_transformer_1.Type)(function () { return costmanagementconfig_1.CostManagementConfig; }),
        __metadata("design:type", costmanagementconfig_1.CostManagementConfig)
    ], ClusterUpdate.prototype, "desiredCostManagementConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredDatabaseEncryption" }),
        (0, class_transformer_1.Type)(function () { return databaseencryption_1.DatabaseEncryption; }),
        __metadata("design:type", databaseencryption_1.DatabaseEncryption)
    ], ClusterUpdate.prototype, "desiredDatabaseEncryption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredDatapathProvider" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredDatapathProvider", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredDefaultSnatStatus" }),
        (0, class_transformer_1.Type)(function () { return defaultsnatstatus_1.DefaultSnatStatus; }),
        __metadata("design:type", defaultsnatstatus_1.DefaultSnatStatus)
    ], ClusterUpdate.prototype, "desiredDefaultSnatStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredDnsConfig" }),
        (0, class_transformer_1.Type)(function () { return dnsconfig_1.DNSConfig; }),
        __metadata("design:type", dnsconfig_1.DNSConfig)
    ], ClusterUpdate.prototype, "desiredDnsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredEnablePrivateEndpoint" }),
        __metadata("design:type", Boolean)
    ], ClusterUpdate.prototype, "desiredEnablePrivateEndpoint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredGatewayApiConfig" }),
        (0, class_transformer_1.Type)(function () { return gatewayapiconfig_1.GatewayAPIConfig; }),
        __metadata("design:type", gatewayapiconfig_1.GatewayAPIConfig)
    ], ClusterUpdate.prototype, "desiredGatewayApiConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredGcfsConfig" }),
        (0, class_transformer_1.Type)(function () { return gcfsconfig_1.GcfsConfig; }),
        __metadata("design:type", gcfsconfig_1.GcfsConfig)
    ], ClusterUpdate.prototype, "desiredGcfsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredIdentityServiceConfig" }),
        (0, class_transformer_1.Type)(function () { return identityserviceconfig_1.IdentityServiceConfig; }),
        __metadata("design:type", identityserviceconfig_1.IdentityServiceConfig)
    ], ClusterUpdate.prototype, "desiredIdentityServiceConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredImageType" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredImageType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredIntraNodeVisibilityConfig" }),
        (0, class_transformer_1.Type)(function () { return intranodevisibilityconfig_1.IntraNodeVisibilityConfig; }),
        __metadata("design:type", intranodevisibilityconfig_1.IntraNodeVisibilityConfig)
    ], ClusterUpdate.prototype, "desiredIntraNodeVisibilityConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredL4ilbSubsettingConfig" }),
        (0, class_transformer_1.Type)(function () { return ilbsubsettingconfig_1.ILBSubsettingConfig; }),
        __metadata("design:type", ilbsubsettingconfig_1.ILBSubsettingConfig)
    ], ClusterUpdate.prototype, "desiredL4ilbSubsettingConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredLocations" }),
        __metadata("design:type", Array)
    ], ClusterUpdate.prototype, "desiredLocations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredLoggingConfig" }),
        (0, class_transformer_1.Type)(function () { return loggingconfig_1.LoggingConfig; }),
        __metadata("design:type", loggingconfig_1.LoggingConfig)
    ], ClusterUpdate.prototype, "desiredLoggingConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredLoggingService" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredLoggingService", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredMaster" }),
        __metadata("design:type", Object)
    ], ClusterUpdate.prototype, "desiredMaster", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredMasterAuthorizedNetworksConfig" }),
        (0, class_transformer_1.Type)(function () { return masterauthorizednetworksconfig_1.MasterAuthorizedNetworksConfig; }),
        __metadata("design:type", masterauthorizednetworksconfig_1.MasterAuthorizedNetworksConfig)
    ], ClusterUpdate.prototype, "desiredMasterAuthorizedNetworksConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredMasterVersion" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredMasterVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredMeshCertificates" }),
        (0, class_transformer_1.Type)(function () { return meshcertificates_1.MeshCertificates; }),
        __metadata("design:type", meshcertificates_1.MeshCertificates)
    ], ClusterUpdate.prototype, "desiredMeshCertificates", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredMonitoringConfig" }),
        (0, class_transformer_1.Type)(function () { return monitoringconfig_1.MonitoringConfig; }),
        __metadata("design:type", monitoringconfig_1.MonitoringConfig)
    ], ClusterUpdate.prototype, "desiredMonitoringConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredMonitoringService" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredMonitoringService", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredNodePoolAutoConfigNetworkTags" }),
        (0, class_transformer_1.Type)(function () { return networktags_1.NetworkTags; }),
        __metadata("design:type", networktags_1.NetworkTags)
    ], ClusterUpdate.prototype, "desiredNodePoolAutoConfigNetworkTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredNodePoolAutoscaling" }),
        (0, class_transformer_1.Type)(function () { return nodepoolautoscaling_1.NodePoolAutoscaling; }),
        __metadata("design:type", nodepoolautoscaling_1.NodePoolAutoscaling)
    ], ClusterUpdate.prototype, "desiredNodePoolAutoscaling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredNodePoolId" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredNodePoolId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredNodePoolLoggingConfig" }),
        (0, class_transformer_1.Type)(function () { return nodepoolloggingconfig_1.NodePoolLoggingConfig; }),
        __metadata("design:type", nodepoolloggingconfig_1.NodePoolLoggingConfig)
    ], ClusterUpdate.prototype, "desiredNodePoolLoggingConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredNodeVersion" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredNodeVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredNotificationConfig" }),
        (0, class_transformer_1.Type)(function () { return notificationconfig_1.NotificationConfig; }),
        __metadata("design:type", notificationconfig_1.NotificationConfig)
    ], ClusterUpdate.prototype, "desiredNotificationConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredPodSecurityPolicyConfig" }),
        (0, class_transformer_1.Type)(function () { return podsecuritypolicyconfig_1.PodSecurityPolicyConfig; }),
        __metadata("design:type", podsecuritypolicyconfig_1.PodSecurityPolicyConfig)
    ], ClusterUpdate.prototype, "desiredPodSecurityPolicyConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredPrivateClusterConfig" }),
        (0, class_transformer_1.Type)(function () { return privateclusterconfig_1.PrivateClusterConfig; }),
        __metadata("design:type", privateclusterconfig_1.PrivateClusterConfig)
    ], ClusterUpdate.prototype, "desiredPrivateClusterConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredPrivateIpv6GoogleAccess" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredPrivateIpv6GoogleAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredProtectConfig" }),
        (0, class_transformer_1.Type)(function () { return protectconfig_1.ProtectConfig; }),
        __metadata("design:type", protectconfig_1.ProtectConfig)
    ], ClusterUpdate.prototype, "desiredProtectConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredReleaseChannel" }),
        (0, class_transformer_1.Type)(function () { return releasechannel_1.ReleaseChannel; }),
        __metadata("design:type", releasechannel_1.ReleaseChannel)
    ], ClusterUpdate.prototype, "desiredReleaseChannel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredResourceUsageExportConfig" }),
        (0, class_transformer_1.Type)(function () { return resourceusageexportconfig_1.ResourceUsageExportConfig; }),
        __metadata("design:type", resourceusageexportconfig_1.ResourceUsageExportConfig)
    ], ClusterUpdate.prototype, "desiredResourceUsageExportConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredServiceExternalIpsConfig" }),
        (0, class_transformer_1.Type)(function () { return serviceexternalipsconfig_1.ServiceExternalIPsConfig; }),
        __metadata("design:type", serviceexternalipsconfig_1.ServiceExternalIPsConfig)
    ], ClusterUpdate.prototype, "desiredServiceExternalIpsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredShieldedNodes" }),
        (0, class_transformer_1.Type)(function () { return shieldednodes_1.ShieldedNodes; }),
        __metadata("design:type", shieldednodes_1.ShieldedNodes)
    ], ClusterUpdate.prototype, "desiredShieldedNodes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredStackType" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "desiredStackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredTpuConfig" }),
        (0, class_transformer_1.Type)(function () { return tpuconfig_1.TpuConfig; }),
        __metadata("design:type", tpuconfig_1.TpuConfig)
    ], ClusterUpdate.prototype, "desiredTpuConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredVerticalPodAutoscaling" }),
        (0, class_transformer_1.Type)(function () { return verticalpodautoscaling_1.VerticalPodAutoscaling; }),
        __metadata("design:type", verticalpodautoscaling_1.VerticalPodAutoscaling)
    ], ClusterUpdate.prototype, "desiredVerticalPodAutoscaling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredWorkloadAltsConfig" }),
        (0, class_transformer_1.Type)(function () { return workloadaltsconfig_1.WorkloadALTSConfig; }),
        __metadata("design:type", workloadaltsconfig_1.WorkloadALTSConfig)
    ], ClusterUpdate.prototype, "desiredWorkloadAltsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredWorkloadCertificates" }),
        (0, class_transformer_1.Type)(function () { return workloadcertificates_1.WorkloadCertificates; }),
        __metadata("design:type", workloadcertificates_1.WorkloadCertificates)
    ], ClusterUpdate.prototype, "desiredWorkloadCertificates", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "desiredWorkloadIdentityConfig" }),
        (0, class_transformer_1.Type)(function () { return workloadidentityconfig_1.WorkloadIdentityConfig; }),
        __metadata("design:type", workloadidentityconfig_1.WorkloadIdentityConfig)
    ], ClusterUpdate.prototype, "desiredWorkloadIdentityConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "etag" }),
        __metadata("design:type", String)
    ], ClusterUpdate.prototype, "etag", void 0);
    return ClusterUpdate;
}(utils_1.SpeakeasyBase));
exports.ClusterUpdate = ClusterUpdate;
