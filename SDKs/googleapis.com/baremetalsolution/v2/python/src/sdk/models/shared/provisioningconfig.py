"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instanceconfig as shared_instanceconfig
from ..shared import networkconfig as shared_networkconfig
from ..shared import volumeconfig as shared_volumeconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisioningConfigInput:
    r"""A provisioning configuration."""
    
    custom_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customId'), 'exclude': lambda f: f is None }})
    r"""Optional. The user-defined identifier of the provisioning config."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages."""  
    handover_service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('handoverServiceAccount'), 'exclude': lambda f: f is None }})
    r"""A service account to enable customers to access instance credentials upon handover."""  
    instances: Optional[list[shared_instanceconfig.InstanceConfigInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instances'), 'exclude': lambda f: f is None }})
    r"""Instances to be created."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period."""  
    networks: Optional[list[shared_networkconfig.NetworkConfigInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networks'), 'exclude': lambda f: f is None }})
    r"""Networks to be created."""  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})
    r"""Optional status messages associated with the FAILED state."""  
    ticket_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ticketId'), 'exclude': lambda f: f is None }})
    r"""A generated ticket id to track provisioning request."""  
    volumes: Optional[list[shared_volumeconfig.VolumeConfigInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumes'), 'exclude': lambda f: f is None }})
    r"""Volumes to be created."""  
    vpc_sc_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcScEnabled'), 'exclude': lambda f: f is None }})
    r"""If true, VPC SC is enabled for the cluster."""  
    
class ProvisioningConfigStateEnum(str, Enum):
    r"""Output only. State of ProvisioningConfig."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    SUBMITTED = 'SUBMITTED'
    PROVISIONING = 'PROVISIONING'
    PROVISIONED = 'PROVISIONED'
    VALIDATED = 'VALIDATED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisioningConfig:
    r"""A provisioning configuration."""
    
    cloud_console_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudConsoleUri'), 'exclude': lambda f: f is None }})
    r"""Output only. URI to Cloud Console UI view of this provisioning config."""  
    custom_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customId'), 'exclude': lambda f: f is None }})
    r"""Optional. The user-defined identifier of the provisioning config."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages."""  
    handover_service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('handoverServiceAccount'), 'exclude': lambda f: f is None }})
    r"""A service account to enable customers to access instance credentials upon handover."""  
    instances: Optional[list[shared_instanceconfig.InstanceConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instances'), 'exclude': lambda f: f is None }})
    r"""Instances to be created."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The system-generated name of the provisioning config. This follows the UUID format."""  
    networks: Optional[list[shared_networkconfig.NetworkConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networks'), 'exclude': lambda f: f is None }})
    r"""Networks to be created."""  
    state: Optional[ProvisioningConfigStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of ProvisioningConfig."""  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})
    r"""Optional status messages associated with the FAILED state."""  
    ticket_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ticketId'), 'exclude': lambda f: f is None }})
    r"""A generated ticket id to track provisioning request."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Last update timestamp."""  
    volumes: Optional[list[shared_volumeconfig.VolumeConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumes'), 'exclude': lambda f: f is None }})
    r"""Volumes to be created."""  
    vpc_sc_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcScEnabled'), 'exclude': lambda f: f is None }})
    r"""If true, VPC SC is enabled for the cluster."""  
    