/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class BanRequest {
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banned_by")
    public java.util.Map<String, Object> bannedBy;
    public BanRequest withBannedBy(java.util.Map<String, Object> bannedBy) {
        this.bannedBy = bannedBy;
        return this;
    }
    
    /**
     * User ID who issued a ban
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banned_by_id")
    public String bannedById;
    public BanRequest withBannedById(String bannedById) {
        this.bannedById = bannedById;
        return this;
    }
    
    /**
     * Channel ID to ban user in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public BanRequest withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether to perform IP ban or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_ban")
    public Boolean ipBan;
    public BanRequest withIpBan(Boolean ipBan) {
        this.ipBan = ipBan;
        return this;
    }
    
    /**
     * Ban reason
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    public String reason;
    public BanRequest withReason(String reason) {
        this.reason = reason;
        return this;
    }
    
    /**
     * Whether to perform shadow ban or not
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shadow")
    public Boolean shadow;
    public BanRequest withShadow(Boolean shadow) {
        this.shadow = shadow;
        return this;
    }
    
    /**
     * ID of user to ban
     */
    @JsonProperty("target_user_id")
    public String targetUserId;
    public BanRequest withTargetUserId(String targetUserId) {
        this.targetUserId = targetUserId;
        return this;
    }
    
    /**
     * Timeout of ban in minutes. User will be unbanned after this period of time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public Double timeout;
    public BanRequest withTimeout(Double timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * Channel type to ban user in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public BanRequest withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public BanRequest withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public BanRequest withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
}
