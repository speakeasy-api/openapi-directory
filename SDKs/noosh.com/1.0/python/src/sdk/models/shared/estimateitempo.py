"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import paperitempo as shared_paperitempo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EstimateItemPO:
    r"""Java type: com.noosh.domain.nooshapi.persist.po.EstimateItemPO"""
    
    paper_items: Optional[list[shared_paperitempo.PaperItemPO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paper_items'), 'exclude': lambda f: f is None }})  
    quantity_1_price: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_1_price'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_1_shipping: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_1_shipping'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_1_tax: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_1_tax'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_2_price: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_2_price'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_2_shipping: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_2_shipping'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_2_tax: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_2_tax'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_3_price: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_3_price'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_3_shipping: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_3_shipping'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_3_tax: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_3_tax'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_4_price: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_4_price'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_4_shipping: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_4_shipping'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_4_tax: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_4_tax'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_5_price: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_5_price'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_5_shipping: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_5_shipping'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    quantity_5_tax: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_5_tax'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    rfe_item_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rfe_item_id'), 'exclude': lambda f: f is None }})  
    