"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nfsexportoptions as shared_nfsexportoptions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ShareStateEnum(str, Enum):
    r"""Output only. The share state."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    READY = 'READY'
    DELETING = 'DELETING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Share:
    r"""A Filestore share."""
    
    capacity_gb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacityGb'), 'exclude': lambda f: f is None }})
    r"""File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the share was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Resource labels to represent user provided metadata."""  
    mount_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mountName'), 'exclude': lambda f: f is None }})
    r"""The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the share, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`."""  
    nfs_export_options: Optional[list[shared_nfsexportoptions.NfsExportOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nfsExportOptions'), 'exclude': lambda f: f is None }})
    r"""Nfs Export Options. There is a limit of 10 export options per file share."""  
    state: Optional[ShareStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The share state."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareInput:
    r"""A Filestore share."""
    
    capacity_gb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacityGb'), 'exclude': lambda f: f is None }})
    r"""File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Resource labels to represent user provided metadata."""  
    mount_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mountName'), 'exclude': lambda f: f is None }})
    r"""The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores."""  
    nfs_export_options: Optional[list[shared_nfsexportoptions.NfsExportOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nfsExportOptions'), 'exclude': lambda f: f is None }})
    r"""Nfs Export Options. There is a limit of 10 export options per file share."""  
    