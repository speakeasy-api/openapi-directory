/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class NotificationConfigurationDetails {
    /**
     * Indicates whether the notification subscription is active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;

    public NotificationConfigurationDetails withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * The version of the notification to which you are subscribing. To make sure that your integration can properly process the notification, subscribe to the same version as the API that you're using.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public Integer apiVersion;

    public NotificationConfigurationDetails withApiVersion(Integer apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * A description of the notification subscription configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public NotificationConfigurationDetails withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Contains objects that define event types and their subscription settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventConfigs")
    public NotificationEventConfigurationWrapper[] eventConfigs;

    public NotificationConfigurationDetails withEventConfigs(NotificationEventConfigurationWrapper[] eventConfigs) {
        this.eventConfigs = eventConfigs;
        return this;
    }
    
    /**
     * The data format of the notification to be sent.
     * &gt;Permitted values: `JSON`, `SOAP`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageFormat")
    public NotificationConfigurationDetailsMessageFormatEnum messageFormat;

    public NotificationConfigurationDetails withMessageFormat(NotificationConfigurationDetailsMessageFormatEnum messageFormat) {
        this.messageFormat = messageFormat;
        return this;
    }
    
    /**
     * Adyen-generated ID for the entry, returned in the response when you create a notification configuration. Required when updating an existing configuration using [`/updateNotificationConfiguration`](https://docs.adyen.com/api-explorer/#/NotificationConfigurationService/latest/post/updateNotificationConfiguration).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationId")
    public Long notificationId;

    public NotificationConfigurationDetails withNotificationId(Long notificationId) {
        this.notificationId = notificationId;
        return this;
    }
    
    /**
     * The password to use when accessing the notifyURL with the specified username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifyPassword")
    public String notifyPassword;

    public NotificationConfigurationDetails withNotifyPassword(String notifyPassword) {
        this.notifyPassword = notifyPassword;
        return this;
    }
    
    /**
     * The URL to which the notifications are to be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifyURL")
    public String notifyURL;

    public NotificationConfigurationDetails withNotifyURL(String notifyURL) {
        this.notifyURL = notifyURL;
        return this;
    }
    
    /**
     * The username to use when accessing the notifyURL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifyUsername")
    public String notifyUsername;

    public NotificationConfigurationDetails withNotifyUsername(String notifyUsername) {
        this.notifyUsername = notifyUsername;
        return this;
    }
    
    /**
     * Indicates whether an action header should be included.
     * &gt;Only applies to SOAP messages (as specified in messageFormat).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sendActionHeader")
    public Boolean sendActionHeader;

    public NotificationConfigurationDetails withSendActionHeader(Boolean sendActionHeader) {
        this.sendActionHeader = sendActionHeader;
        return this;
    }
    
    /**
     * The SSL protocol employed by the endpoint.
     * &gt;Permitted values: `TLSv12`, `TLSv13`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslProtocol")
    public NotificationConfigurationDetailsSslProtocolEnum sslProtocol;

    public NotificationConfigurationDetails withSslProtocol(NotificationConfigurationDetailsSslProtocolEnum sslProtocol) {
        this.sslProtocol = sslProtocol;
        return this;
    }
    
    public NotificationConfigurationDetails(){}
}
