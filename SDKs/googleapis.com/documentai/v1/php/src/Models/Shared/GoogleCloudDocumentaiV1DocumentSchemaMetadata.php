<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudDocumentaiV1DocumentSchemaMetadata - Metadata for global schema behavior.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudDocumentaiV1DocumentSchemaMetadata
{
    /**
     * If true, on a given page, there can be multiple `document` annotations covering it.
     * 
     * @var ?bool $documentAllowMultipleLabels
     */
	#[\JMS\Serializer\Annotation\SerializedName('documentAllowMultipleLabels')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $documentAllowMultipleLabels = null;
    
    /**
     * If true, a `document` entity type can be applied to subdocument ( splitting). Otherwise, it can only be applied to the entire document (classification).
     * 
     * @var ?bool $documentSplitter
     */
	#[\JMS\Serializer\Annotation\SerializedName('documentSplitter')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $documentSplitter = null;
    
    /**
     * If set, all the nested entities must be prefixed with the parents.
     * 
     * @var ?bool $prefixedNamingOnProperties
     */
	#[\JMS\Serializer\Annotation\SerializedName('prefixedNamingOnProperties')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $prefixedNamingOnProperties = null;
    
    /**
     * If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.
     * 
     * @var ?bool $skipNamingValidation
     */
	#[\JMS\Serializer\Annotation\SerializedName('skipNamingValidation')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $skipNamingValidation = null;
    
	public function __construct()
	{
		$this->documentAllowMultipleLabels = null;
		$this->documentSplitter = null;
		$this->prefixedNamingOnProperties = null;
		$this->skipNamingValidation = null;
	}
}
