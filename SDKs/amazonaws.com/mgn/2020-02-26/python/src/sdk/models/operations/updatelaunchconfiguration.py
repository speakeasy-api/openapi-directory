"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import launchconfiguration as shared_launchconfiguration
from ..shared import postlaunchactionsdeploymenttype_enum as shared_postlaunchactionsdeploymenttype_enum
from ..shared import ssmdocument as shared_ssmdocument
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateLaunchConfigurationRequestBodyBootModeEnum(str, Enum):
    r"""Update Launch configuration boot mode request."""
    LEGACY_BIOS = 'LEGACY_BIOS'
    UEFI = 'UEFI'

class UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum(str, Enum):
    r"""Update Launch configuration launch disposition request."""
    STOPPED = 'STOPPED'
    STARTED = 'STARTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationRequestBodyLicensing:
    r"""Configure Licensing."""
    
    os_byol: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osByol'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationRequestBodyPostLaunchActions:
    r"""Post Launch Actions to executed on the Test or Cutover instance."""
    
    cloud_watch_log_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudWatchLogGroupName'), 'exclude': lambda f: f is None }})  
    deployment: Optional[shared_postlaunchactionsdeploymenttype_enum.PostLaunchActionsDeploymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployment'), 'exclude': lambda f: f is None }})  
    s3_log_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3LogBucket'), 'exclude': lambda f: f is None }})  
    s3_output_key_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3OutputKeyPrefix'), 'exclude': lambda f: f is None }})  
    ssm_documents: Optional[list[shared_ssmdocument.SsmDocument]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssmDocuments'), 'exclude': lambda f: f is None }})  
    
class UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum(str, Enum):
    r"""Update Launch configuration Target instance right sizing request."""
    NONE = 'NONE'
    BASIC = 'BASIC'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLaunchConfigurationRequestBody:
    
    source_server_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceServerID') }})
    r"""Update Launch configuration by Source Server ID request."""  
    boot_mode: Optional[UpdateLaunchConfigurationRequestBodyBootModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootMode'), 'exclude': lambda f: f is None }})
    r"""Update Launch configuration boot mode request."""  
    copy_private_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyPrivateIp'), 'exclude': lambda f: f is None }})
    r"""Update Launch configuration copy Private IP request."""  
    copy_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyTags'), 'exclude': lambda f: f is None }})
    r"""Update Launch configuration copy Tags request."""  
    enable_map_auto_tagging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableMapAutoTagging'), 'exclude': lambda f: f is None }})
    r"""Enable map auto tagging."""  
    launch_disposition: Optional[UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchDisposition'), 'exclude': lambda f: f is None }})
    r"""Update Launch configuration launch disposition request."""  
    licensing: Optional[UpdateLaunchConfigurationRequestBodyLicensing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licensing'), 'exclude': lambda f: f is None }})
    r"""Configure Licensing."""  
    map_auto_tagging_mpe_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapAutoTaggingMpeID'), 'exclude': lambda f: f is None }})
    r"""Launch configuration map auto tagging MPE ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Update Launch configuration name request."""  
    post_launch_actions: Optional[UpdateLaunchConfigurationRequestBodyPostLaunchActions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postLaunchActions'), 'exclude': lambda f: f is None }})
    r"""Post Launch Actions to executed on the Test or Cutover instance."""  
    target_instance_type_right_sizing_method: Optional[UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetInstanceTypeRightSizingMethod'), 'exclude': lambda f: f is None }})
    r"""Update Launch configuration Target instance right sizing request."""  
    

@dataclasses.dataclass
class UpdateLaunchConfigurationRequest:
    
    request_body: UpdateLaunchConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateLaunchConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    launch_configuration: Optional[shared_launchconfiguration.LaunchConfiguration] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    uninitialized_account_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UninitializedAccountException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    