// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SubscriptionProductRenewalPeriodUnitEnum - The unit of time that `renewalPeriod` is measured in
type SubscriptionProductRenewalPeriodUnitEnum string

const (
	SubscriptionProductRenewalPeriodUnitEnumMonth      SubscriptionProductRenewalPeriodUnitEnum = "MONTH"
	SubscriptionProductRenewalPeriodUnitEnumQuarter    SubscriptionProductRenewalPeriodUnitEnum = "QUARTER"
	SubscriptionProductRenewalPeriodUnitEnumSemiAnnual SubscriptionProductRenewalPeriodUnitEnum = "SEMI_ANNUAL"
	SubscriptionProductRenewalPeriodUnitEnumYear       SubscriptionProductRenewalPeriodUnitEnum = "YEAR"
)

func (e *SubscriptionProductRenewalPeriodUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MONTH":
		fallthrough
	case "QUARTER":
		fallthrough
	case "SEMI_ANNUAL":
		fallthrough
	case "YEAR":
		*e = SubscriptionProductRenewalPeriodUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionProductRenewalPeriodUnitEnum: %s", s)
	}
}

type SubscriptionProduct struct {
	// A human readable description of the Product that is subscribed
	Label string `json:"label"`
	// Grouping of related Subscriptions
	Namespace string `json:"namespace"`
	// Unique identifier of the Product that is subscribed
	Pfid int64 `json:"pfid"`
	// Primary key of a grouping of related Subscriptions
	ProductGroupKey string `json:"productGroupKey"`
	// The number of `renewalPeriodUnits` that will be added by the `renewalPfid`
	RenewalPeriod int64 `json:"renewalPeriod"`
	// The unit of time that `renewalPeriod` is measured in
	RenewalPeriodUnit SubscriptionProductRenewalPeriodUnitEnum `json:"renewalPeriodUnit"`
	// Unique identifier of the renewal Product
	RenewalPfid int64 `json:"renewalPfid"`
	// Whether the product supports the `billOn` option on the renewal endpoint
	SupportBillOn bool `json:"supportBillOn"`
}
