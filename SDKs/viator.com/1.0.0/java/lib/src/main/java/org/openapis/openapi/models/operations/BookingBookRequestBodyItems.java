/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class BookingBookRequestBodyItems {
    /**
     * **array** of objects containing booking questions and the answers provided for them for *this* product
     * - If a booking question is available in the `bookingQuestions` array in the response from [/product](#operation/product) for *this* product, the matching `bookingQuestionAnswers` must be passed to *this* service. 
     * - If a product does not have any booking questions, you can omit the `bookingQuestionAnswers` array in your request. 
     * - Any invalid or unrequired booking-question answers that are passed to *this* service will be ignored (and, no exceptions will be raised) 
     * - You will need to include this array if [/product](#operation/product) returns any questions in the `bookingQuestions` array.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingQuestionAnswers")
    public BookingBookRequestBodyItemsBookingQuestionAnswers[] bookingQuestionAnswers;
    public BookingBookRequestBodyItems withBookingQuestionAnswers(BookingBookRequestBodyItemsBookingQuestionAnswers[] bookingQuestionAnswers) {
        this.bookingQuestionAnswers = bookingQuestionAnswers;
        return this;
    }
    
    /**
     * **specifer** of the hotel
     * If [/product](#operation/product) returns `hotelPickup`: `true` and a list of hotels is available for *this* product in [/booking/hotels](#operation/bookingHotels), a `hotelId` must be captured (as per the hotel service id field); or, use an alternative `hotelId`, such as:
     *  
     *  - `"notBooked"`: the customer has not yet booked their hotel
     *  - `"notListed"`: the customer's hotel is not listed
     * 
     *  If the customer chooses one of these options, the product supplier may need to correspond with the user to find out their pick-up location. The best way to do this is by enabling [Closed-Loop-Communication (CLC)](#section/Merchant-APIs/Supplier-communications).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hotelId")
    public String hotelId;
    public BookingBookRequestBodyItems withHotelId(String hotelId) {
        this.hotelId = hotelId;
        return this;
    }
    
    /**
     * **specifier** of language service provided for this product that has been chosen for this booking (usually in the format langcode/Service eg en/SERVICE_GUIDE. If the product details service [/product](#operation/product) for the product returns a langService, this must be provided.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageOptionCode")
    public String languageOptionCode;
    public BookingBookRequestBodyItems withLanguageOptionCode(String languageOptionCode) {
        this.languageOptionCode = languageOptionCode;
        return this;
    }
    
    /**
     * **object** containing partner details at a per-item level
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerItemDetail")
    public BookingBookRequestBodyItemsPartnerItemDetail partnerItemDetail;
    public BookingBookRequestBodyItems withPartnerItemDetail(BookingBookRequestBodyItemsPartnerItemDetail partnerItemDetail) {
        this.partnerItemDetail = partnerItemDetail;
        return this;
    }
    
    /**
     * **details** about the hotel pick-up point (must be provided if the `hotelId` selected by the user is `'notListed'` or if no hotels are returned for *this* product in [/booking/hotels](#operation/bookingHotels) where `hotelPickup` is `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickupPoint")
    public String pickupPoint;
    public BookingBookRequestBodyItems withPickupPoint(String pickupPoint) {
        this.pickupPoint = pickupPoint;
        return this;
    }
    
    /**
     * **unique alphanumeric identifier** of the product to be booked
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productCode")
    public String productCode;
    public BookingBookRequestBodyItems withProductCode(String productCode) {
        this.productCode = productCode;
        return this;
    }
    
    /**
     * **text field** to capture any additional requirements for the booking, such as dietary requirements or if a wheelchair is required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialRequirements")
    public String specialRequirements;
    public BookingBookRequestBodyItems withSpecialRequirements(String specialRequirements) {
        this.specialRequirements = specialRequirements;
        return this;
    }
    
    /**
     * **specifier** of the tour grade to be booked (if tour grades are supplied in [/product](#operation/product), you must allow the customer to select a tour grade code. If no tour grades are available for *this* product, set this to `'DEFAULT'`.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tourGradeCode")
    public String tourGradeCode;
    public BookingBookRequestBodyItems withTourGradeCode(String tourGradeCode) {
        this.tourGradeCode = tourGradeCode;
        return this;
    }
    
    /**
     * **date** of travel for the item in format yyyy-mm-dd
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travelDate")
    public String travelDate;
    public BookingBookRequestBodyItems withTravelDate(String travelDate) {
        this.travelDate = travelDate;
        return this;
    }
    
    /**
     * **array** of traveler names, details and whether they are the lead traveller
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travellers")
    public BookingBookRequestBodyItemsTravellers[] travellers;
    public BookingBookRequestBodyItems withTravellers(BookingBookRequestBodyItemsTravellers[] travellers) {
        this.travellers = travellers;
        return this;
    }
    
}
