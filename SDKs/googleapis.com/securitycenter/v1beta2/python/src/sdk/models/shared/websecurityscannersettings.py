"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import config as shared_config
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WebSecurityScannerSettingsServiceEnablementStateEnum(str, Enum):
    r"""The state of enablement for the service at its level of the resource hierarchy. A DISABLED state will override all module enablement_states to DISABLED."""
    ENABLEMENT_STATE_UNSPECIFIED = 'ENABLEMENT_STATE_UNSPECIFIED'
    INHERITED = 'INHERITED'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebSecurityScannerSettings:
    r"""Resource capturing the settings for the Web Security Scanner service."""
    
    modules: Optional[dict[str, shared_config.Config]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modules'), 'exclude': lambda f: f is None }})
    r"""The configurations including the state of enablement for the service's different modules. The absence of a module in the map implies its configuration is inherited from its parent's."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name of the WebSecurityScannerSettings. Formats: * organizations/{organization}/webSecurityScannerSettings * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings"""  
    service_enablement_state: Optional[WebSecurityScannerSettingsServiceEnablementStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEnablementState'), 'exclude': lambda f: f is None }})
    r"""The state of enablement for the service at its level of the resource hierarchy. A DISABLED state will override all module enablement_states to DISABLED."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time the settings were last updated."""  
    