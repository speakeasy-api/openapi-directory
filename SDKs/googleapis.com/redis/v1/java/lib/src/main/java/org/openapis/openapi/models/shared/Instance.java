/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Instance - A Memorystore for Redis instance.
 */
public class Instance {
    /**
     * Optional. If specified, at least one node will be provisioned in this zone in addition to the zone specified in location_id. Only applicable to standard tier. If provided, it must be a different zone from the one provided in [location_id]. Additional nodes beyond the first 2 will be placed in zones selected by the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternativeLocationId")
    public String alternativeLocationId;

    public Instance withAlternativeLocationId(String alternativeLocationId) {
        this.alternativeLocationId = alternativeLocationId;
        return this;
    }
    
    /**
     * Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to "true" AUTH is enabled on the instance. Default value is "false" meaning AUTH is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authEnabled")
    public Boolean authEnabled;

    public Instance withAuthEnabled(Boolean authEnabled) {
        this.authEnabled = authEnabled;
        return this;
    }
    
    /**
     * Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizedNetwork")
    public String authorizedNetwork;

    public Instance withAuthorizedNetwork(String authorizedNetwork) {
        this.authorizedNetwork = authorizedNetwork;
        return this;
    }
    
    /**
     * Optional. The available maintenance versions that an instance could update to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableMaintenanceVersions")
    public String[] availableMaintenanceVersions;

    public Instance withAvailableMaintenanceVersions(String[] availableMaintenanceVersions) {
        this.availableMaintenanceVersions = availableMaintenanceVersions;
        return this;
    }
    
    /**
     * Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectMode")
    public InstanceConnectModeEnum connectMode;

    public Instance withConnectMode(InstanceConnectModeEnum connectMode) {
        this.connectMode = connectMode;
        return this;
    }
    
    /**
     * Output only. The time the instance was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Instance withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The current zone where the Redis primary node is located. In basic tier, this will always be the same as [location_id]. In standard tier, this can be the zone of any node in the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentLocationId")
    public String currentLocationId;

    public Instance withCurrentLocationId(String currentLocationId) {
        this.currentLocationId = currentLocationId;
        return this;
    }
    
    /**
     * Optional. The KMS key reference that the customer provides when trying to create the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerManagedKey")
    public String customerManagedKey;

    public Instance withCustomerManagedKey(String customerManagedKey) {
        this.customerManagedKey = customerManagedKey;
        return this;
    }
    
    /**
     * An arbitrary and optional user-provided name for the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Instance withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Output only. Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;

    public Instance withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * Resource labels to represent user provided metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Instance withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone from the specified region for the instance. For standard tier, additional nodes will be added across multiple zones for protection against zonal failures. If specified, at least one node will be provisioned in this zone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationId")
    public String locationId;

    public Instance withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Maintenance policy for an instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenancePolicy")
    public MaintenancePolicy maintenancePolicy;

    public Instance withMaintenancePolicy(MaintenancePolicy maintenancePolicy) {
        this.maintenancePolicy = maintenancePolicy;
        return this;
    }
    
    /**
     * Upcoming maintenance schedule. If no maintenance is scheduled, fields are not populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenanceSchedule")
    public MaintenanceSchedule maintenanceSchedule;

    public Instance withMaintenanceSchedule(MaintenanceSchedule maintenanceSchedule) {
        this.maintenanceSchedule = maintenanceSchedule;
        return this;
    }
    
    /**
     * Optional. The self service update maintenance version. The version is date based such as "20210712_00_00".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenanceVersion")
    public String maintenanceVersion;

    public Instance withMaintenanceVersion(String maintenanceVersion) {
        this.maintenanceVersion = maintenanceVersion;
        return this;
    }
    
    /**
     * Required. Redis memory size in GiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memorySizeGb")
    public Integer memorySizeGb;

    public Instance withMemorySizeGb(Integer memorySizeGb) {
        this.memorySizeGb = memorySizeGb;
        return this;
    }
    
    /**
     * Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Instance withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Info per node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodes")
    public NodeInfo[] nodes;

    public Instance withNodes(NodeInfo[] nodes) {
        this.nodes = nodes;
        return this;
    }
    
    /**
     * Configuration of the persistence functionality.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("persistenceConfig")
    public PersistenceConfig persistenceConfig;

    public Instance withPersistenceConfig(PersistenceConfig persistenceConfig) {
        this.persistenceConfig = persistenceConfig;
        return this;
    }
    
    /**
     * Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is "serviceAccount:". The value may change over time for a given instance so should be checked before each import/export operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("persistenceIamIdentity")
    public String persistenceIamIdentity;

    public Instance withPersistenceIamIdentity(String persistenceIamIdentity) {
        this.persistenceIamIdentity = persistenceIamIdentity;
        return this;
    }
    
    /**
     * Output only. The port number of the exposed Redis endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    public Integer port;

    public Instance withPort(Integer port) {
        this.port = port;
        return this;
    }
    
    /**
     * Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write requests must target 'host'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readEndpoint")
    public String readEndpoint;

    public Instance withReadEndpoint(String readEndpoint) {
        this.readEndpoint = readEndpoint;
        return this;
    }
    
    /**
     * Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target 'port'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readEndpointPort")
    public Integer readEndpointPort;

    public Instance withReadEndpointPort(Integer readEndpointPort) {
        this.readEndpointPort = readEndpointPort;
        return this;
    }
    
    /**
     * Optional. Read replicas mode for the instance. Defaults to READ_REPLICAS_DISABLED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readReplicasMode")
    public InstanceReadReplicasModeEnum readReplicasMode;

    public Instance withReadReplicasMode(InstanceReadReplicasModeEnum readReplicasMode) {
        this.readReplicasMode = readReplicasMode;
        return this;
    }
    
    /**
     * Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redisConfigs")
    public java.util.Map<String, String> redisConfigs;

    public Instance withRedisConfigs(java.util.Map<String, String> redisConfigs) {
        this.redisConfigs = redisConfigs;
        return this;
    }
    
    /**
     * Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x compatibility
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redisVersion")
    public String redisVersion;

    public Instance withRedisVersion(String redisVersion) {
        this.redisVersion = redisVersion;
        return this;
    }
    
    /**
     * Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default is 1. The valid value for basic tier is 0 and the default is also 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicaCount")
    public Integer replicaCount;

    public Instance withReplicaCount(Integer replicaCount) {
        this.replicaCount = replicaCount;
        return this;
    }
    
    /**
     * Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. For READ_REPLICAS_ENABLED the default block size is /28.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservedIpRange")
    public String reservedIpRange;

    public Instance withReservedIpRange(String reservedIpRange) {
        this.reservedIpRange = reservedIpRange;
        return this;
    }
    
    /**
     * Optional. Additional IP range for node placement. Required when enabling read replicas on an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address range associated with the private service access connection, or "auto".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryIpRange")
    public String secondaryIpRange;

    public Instance withSecondaryIpRange(String secondaryIpRange) {
        this.secondaryIpRange = secondaryIpRange;
        return this;
    }
    
    /**
     * Output only. List of server CA certificates for the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverCaCerts")
    public TlsCertificate[] serverCaCerts;

    public Instance withServerCaCerts(TlsCertificate[] serverCaCerts) {
        this.serverCaCerts = serverCaCerts;
        return this;
    }
    
    /**
     * Output only. The current state of this instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public InstanceStateEnum state;

    public Instance withState(InstanceStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Additional information about the current status of this instance, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;

    public Instance withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    /**
     * Optional. reasons that causes instance in "SUSPENDED" state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspensionReasons")
    public InstanceSuspensionReasonsEnum[] suspensionReasons;

    public Instance withSuspensionReasons(InstanceSuspensionReasonsEnum[] suspensionReasons) {
        this.suspensionReasons = suspensionReasons;
        return this;
    }
    
    /**
     * Required. The service tier of the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tier")
    public InstanceTierEnum tier;

    public Instance withTier(InstanceTierEnum tier) {
        this.tier = tier;
        return this;
    }
    
    /**
     * Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transitEncryptionMode")
    public InstanceTransitEncryptionModeEnum transitEncryptionMode;

    public Instance withTransitEncryptionMode(InstanceTransitEncryptionModeEnum transitEncryptionMode) {
        this.transitEncryptionMode = transitEncryptionMode;
        return this;
    }
    
    public Instance(){}
}
