"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class DownloadFileViaTokenRequest:
    
    token: str = dataclasses.field(metadata={'path_param': { 'field_name': 'token', 'style': 'simple', 'explode': False }})
    r"""Download token"""  
    generic_mimetype: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'generic_mimetype', 'style': 'form', 'explode': True }})
    r"""Always return `application/octet-stream` instead of specific mimetype"""  
    inline: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'inline', 'style': 'form', 'explode': True }})
    r"""Use Content-Disposition: `inline` instead of `attachment`"""  
    range: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Range', 'style': 'simple', 'explode': False }})
    r"""Range
    
    e.g. `bytes=0-999`
    """  
    

@dataclasses.dataclass
class DownloadFileViaTokenResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    