<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UpdateShareByIdUpdateShareRequestBody
{
    /**
     * An object defining what a not-logged-in visitor can do with the share contents
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AccessMode $accessMode
     */
	#[\JMS\Serializer\Annotation\SerializedName('accessMode')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccessMode')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\OpenAPI\OpenAPI\Models\Shared\AccessMode $accessMode = null;
    
    /**
     * Whether the share can be embedded in another web page.
     * 
     * @var ?bool $embed
     */
	#[\JMS\Serializer\Annotation\SerializedName('embed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $embed = null;
    
    /**
     * New expiration date and time for the share
     * 
     * @var ?\DateTime $expiration
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiration')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $expiration = null;
    
    /**
     * Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)
     * 
     * @var ?bool $fileDropCreateFolders
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileDropCreateFolders')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $fileDropCreateFolders = null;
    
    /**
     * Whether delivery receipts should be sent for this share.
     * 
     * @var ?bool $hasNotification
     */
	#[\JMS\Serializer\Annotation\SerializedName('hasNotification')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasNotification = null;
    
    /**
     * Whether people can visit the share without following a link from an invitation email
     * 
     * @var ?bool $isPublic
     */
	#[\JMS\Serializer\Annotation\SerializedName('isPublic')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isPublic = null;
    
    /**
     * Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`
     * 
     * @var ?string $messageBody
     */
	#[\JMS\Serializer\Annotation\SerializedName('messageBody')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $messageBody = null;
    
    /**
     * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`
     * 
     * @var ?string $messageSubject
     */
	#[\JMS\Serializer\Annotation\SerializedName('messageSubject')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $messageSubject = null;
    
    /**
     * Name of the share.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false. 
     * 
     * @var ?array<string> $notificationEmails
     */
	#[\JMS\Serializer\Annotation\SerializedName('notificationEmails')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $notificationEmails = null;
    
    /**
     * New password for the share. To leave the password unchanged, do not send this parameter.
     * 
     * @var ?string $password
     */
	#[\JMS\Serializer\Annotation\SerializedName('password')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $password = null;
    
    /**
     * People you want to invite to the share. 
     * 
     * 
     * **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.
     * 
     * **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\UpdateShareByIdUpdateShareRequestBodyRecipients> $recipients
     */
	#[\JMS\Serializer\Annotation\SerializedName('recipients')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\UpdateShareByIdUpdateShareRequestBodyRecipients>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $recipients = null;
    
    /**
     * Whether visitors to the share will be required to enter their email in order to access the share.
     * 
     * @var ?bool $requireEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('requireEmail')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requireEmail = null;
    
    /**
     * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.
     * 
     * 
     * **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.
     * 
     * **send** shares may have multiple `resource` parameters. 
     * 
     * **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
     * 
     * @var ?array<string> $resources
     */
	#[\JMS\Serializer\Annotation\SerializedName('resources')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $resources = null;
    
    /**
     * New status for the share. You can set an active share to inactive by setting the status to **0**
     * 
     * @var ?int $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $status = null;
    
	public function __construct()
	{
		$this->accessMode = null;
		$this->embed = null;
		$this->expiration = null;
		$this->fileDropCreateFolders = null;
		$this->hasNotification = null;
		$this->isPublic = null;
		$this->messageBody = null;
		$this->messageSubject = null;
		$this->name = null;
		$this->notificationEmails = null;
		$this->password = null;
		$this->recipients = null;
		$this->requireEmail = null;
		$this->resources = null;
		$this->status = null;
	}
}
