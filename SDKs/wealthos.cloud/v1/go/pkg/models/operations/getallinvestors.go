// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetAllInvestorsSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

// GetAllInvestorsSortEnum - Sorting order; results are sorted by creation time.
type GetAllInvestorsSortEnum string

const (
	GetAllInvestorsSortEnumAsc  GetAllInvestorsSortEnum = "asc"
	GetAllInvestorsSortEnumDesc GetAllInvestorsSortEnum = "desc"
)

func (e GetAllInvestorsSortEnum) ToPointer() *GetAllInvestorsSortEnum {
	return &e
}

func (e *GetAllInvestorsSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAllInvestorsSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllInvestorsSortEnum: %v", v)
	}
}

type GetAllInvestorsRequest struct {
	// Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
	PageNumber *string `queryParam:"style=form,explode=true,name=page_number"`
	// Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
	PageSize *string `queryParam:"style=form,explode=true,name=page_size"`
	// Sorting order; results are sorted by creation time.
	Sort *GetAllInvestorsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// GetAllInvestors500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetAllInvestors500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllInvestors429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetAllInvestors429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllInvestors403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetAllInvestors403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllInvestors401ApplicationJSON - You do not have permissions to access this resource.
type GetAllInvestors401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllInvestors400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type GetAllInvestors400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorAddress struct {
	AddressLine *string `json:"address_line,omitempty"`
	City        *string `json:"city,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Country    string  `json:"country"`
	PostalCode string  `json:"postal_code"`
	State      *string `json:"state,omitempty"`
	StreetName *string `json:"street_name,omitempty"`
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorDateOfBirth struct {
	// two digit string `DD`
	Day *string `json:"day,omitempty"`
	// two digit string `MM`
	Month *string `json:"month,omitempty"`
	// four digit string `YYYY`
	Year *string `json:"year,omitempty"`
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum string

const (
	GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnumInactive GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum = "inactive"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnumActive   GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum = "active"
)

func (e GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum) ToPointer() *GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum {
	return &e
}

func (e *GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inactive":
		fallthrough
	case "active":
		*e = GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum: %v", v)
	}
}

// GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum - Status of an investor best describes their personal circumstances.
type GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum string

const (
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumEmployed                GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "employed"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumSelfEmployed            GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "self_employed"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumPensioner               GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "pensioner"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumChildUnder16            GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "child_under_16"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumInFullTimeEducation     GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "in_full_time_education"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumUnemployed              GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "unemployed"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumCaringForAPersonOver16  GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "caring_for_a_person_over_16"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumCaringForAPersonUnder16 GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "caring_for_a_person_under_16"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnumOther                   GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum = "other"
)

func (e GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum) ToPointer() *GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum {
	return &e
}

func (e *GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "employed":
		fallthrough
	case "self_employed":
		fallthrough
	case "pensioner":
		fallthrough
	case "child_under_16":
		fallthrough
	case "in_full_time_education":
		fallthrough
	case "unemployed":
		fallthrough
	case "caring_for_a_person_over_16":
		fallthrough
	case "caring_for_a_person_under_16":
		fallthrough
	case "other":
		*e = GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum: %v", v)
	}
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippBeneficiaries struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippNominees struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWish - Beneficiary and nominee list of the expression of wish.
type GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWish struct {
	SippBeneficiaries []GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippBeneficiaries `json:"sipp_beneficiaries,omitempty"`
	SippNominees      []GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippNominees      `json:"sipp_nominees,omitempty"`
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorIDNumbers struct {
	IDNumber string `json:"id_number"`
	IDType   string `json:"id_type"`
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum string

const (
	GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnumSubmitted      GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum = "submitted"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnumKycFailedError GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum = "kyc_failed_error"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnumPending        GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum = "pending"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnumClear          GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum = "clear"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnumNotStarted     GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum = "not_started"
)

func (e GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum) ToPointer() *GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum {
	return &e
}

func (e *GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "kyc_failed_error":
		fallthrough
	case "pending":
		fallthrough
	case "clear":
		fallthrough
	case "not_started":
		*e = GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum: %v", v)
	}
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum string

const (
	GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumPrimary  GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "primary"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumEnhanced GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "enhanced"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp12     GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp12"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp14     GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp14"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp14     GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip14"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp16     GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp16"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp16     GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip16"
)

func (e GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) ToPointer() *GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum {
	return &e
}

func (e *GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "enhanced":
		fallthrough
	case "fp12":
		fallthrough
	case "fp14":
		fallthrough
	case "ip14":
		fallthrough
	case "fp16":
		fallthrough
	case "ip16":
		*e = GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum: %v", v)
	}
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetails struct {
	// Required when the lta_protection_type is ip14 or ip16.
	LtaIndividualProtectionAmount *string `json:"lta_individual_protection_amount,omitempty"`
	// Required only when the lta_protection_type is primary
	LtaPrimaryProtectionFactor *string `json:"lta_primary_protection_factor,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionNotificationNumber *string `json:"lta_protection_notification_number,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionSchemeAdministratorReference *string                                                                                       `json:"lta_protection_scheme_administrator_reference,omitempty"`
	LtaProtectionType                         GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum `json:"lta_protection_type"`
}

type GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum string

const (
	GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnumKycPending GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum = "kyc_pending"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnumKycFailed  GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum = "kyc_failed"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnumInactive   GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum = "inactive"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnumActive     GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum = "active"
)

func (e GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum) ToPointer() *GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum {
	return &e
}

func (e *GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kyc_pending":
		fallthrough
	case "kyc_failed":
		fallthrough
	case "inactive":
		fallthrough
	case "active":
		*e = GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum: %v", v)
	}
}

// GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum - Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
type GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum string

const (
	GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnumGbEng GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum = "GB-ENG"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnumGbNir GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum = "GB-NIR"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnumGbSct GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum = "GB-SCT"
	GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnumGbWls GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum = "GB-WLS"
)

func (e GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum) ToPointer() *GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum {
	return &e
}

func (e *GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GB-ENG":
		fallthrough
	case "GB-NIR":
		fallthrough
	case "GB-SCT":
		fallthrough
	case "GB-WLS":
		*e = GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum: %v", v)
	}
}

// GetAllInvestors200ApplicationJSONRootTypeForInvestor - JSON for the Investor resource type
type GetAllInvestors200ApplicationJSONRootTypeForInvestor struct {
	Address GetAllInvestors200ApplicationJSONRootTypeForInvestorAddress `json:"address"`
	// Array of bank account IDs
	BankAccounts  []string                                                               `json:"bank_accounts,omitempty"`
	CreatedAt     *time.Time                                                             `json:"created_at,omitempty"`
	DateOfBirth   GetAllInvestors200ApplicationJSONRootTypeForInvestorDateOfBirth        `json:"date_of_birth"`
	DealingStatus *GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum `json:"dealing_status,omitempty"`
	Email         *string                                                                `json:"email,omitempty"`
	// Status of an investor best describes their personal circumstances.
	EmploymentStatus *GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum `json:"employment_status,omitempty"`
	// Beneficiary and nominee list of the expression of wish.
	ExpressionOfWish        *GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWish `json:"expression_of_wish,omitempty"`
	FirstName               string                                                                `json:"first_name"`
	Gender                  *string                                                               `json:"gender,omitempty"`
	HomeNumber              *string                                                               `json:"home_number,omitempty"`
	IDNumbers               []GetAllInvestors200ApplicationJSONRootTypeForInvestorIDNumbers       `json:"id_numbers,omitempty"`
	InvestorID              string                                                                `json:"investor_id"`
	KycAmlStatus            *GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum `json:"kyc_aml_status,omitempty"`
	KycAmlStatusLastUpdated *time.Time                                                            `json:"kyc_aml_status_last_updated,omitempty"`
	LastName                string                                                                `json:"last_name"`
	// Additional details of the lifetime allowance protections of the investor
	LtaProtectionDetails []GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetails `json:"lta_protection_details,omitempty"`
	MifidTaxID           *string                                                                    `json:"mifid_tax_id,omitempty"`
	MobileNumber         *string                                                                    `json:"mobile_number,omitempty"`
	// Whether the investor has triggered the Money Purchase Annual Allowance.
	MpaaTriggered *bool `json:"mpaa_triggered,omitempty"`
	// Date of triggering the Money Purchase Annual Allowance. It is required if mpaa_triggered is true.
	MpaaTriggeredDate *string `json:"mpaa_triggered_date,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Nationality      string  `json:"nationality"`
	OfficeNumber     *string `json:"office_number,omitempty"`
	ReferenceVersion *int64  `json:"reference_version,omitempty"`
	// Intended retirement age of the investor
	RetirementAge *float64                                                        `json:"retirement_age,omitempty"`
	Status        *GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum `json:"status,omitempty"`
	TaxID         string                                                          `json:"tax_id"`
	// Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
	TaxResidence          *GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum `json:"tax_residence,omitempty"`
	TaxResidencyCompliant bool                                                                  `json:"tax_residency_compliant"`
	Title                 *string                                                               `json:"title,omitempty"`
	UpdatedAt             *time.Time                                                            `json:"updated_at,omitempty"`
}

// GetAllInvestors200ApplicationJSON - Array of investors
type GetAllInvestors200ApplicationJSON struct {
	Investors []GetAllInvestors200ApplicationJSONRootTypeForInvestor `json:"investors"`
	// This indicates the availability of the next page
	NextPageAvailable bool `json:"next_page_available"`
}

type GetAllInvestorsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	GetAllInvestors200ApplicationJSONObject *GetAllInvestors200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	GetAllInvestors400ApplicationJSONObject *GetAllInvestors400ApplicationJSON
	// You do not have permissions to access this resource.
	GetAllInvestors401ApplicationJSONObject *GetAllInvestors401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetAllInvestors403ApplicationJSONObject *GetAllInvestors403ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetAllInvestors429ApplicationJSONObject *GetAllInvestors429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetAllInvestors500ApplicationJSONObject *GetAllInvestors500ApplicationJSON
}
