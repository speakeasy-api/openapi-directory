// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyVpnConnectionOptionsActionEnum
type GETModifyVpnConnectionOptionsActionEnum string

const (
	GETModifyVpnConnectionOptionsActionEnumModifyVpnConnectionOptions GETModifyVpnConnectionOptionsActionEnum = "ModifyVpnConnectionOptions"
)

func (e *GETModifyVpnConnectionOptionsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyVpnConnectionOptions":
		*e = GETModifyVpnConnectionOptionsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyVpnConnectionOptionsActionEnum: %s", s)
	}
}

// GETModifyVpnConnectionOptionsVersionEnum
type GETModifyVpnConnectionOptionsVersionEnum string

const (
	GETModifyVpnConnectionOptionsVersionEnumTwoThousandAndSixteen1115 GETModifyVpnConnectionOptionsVersionEnum = "2016-11-15"
)

func (e *GETModifyVpnConnectionOptionsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyVpnConnectionOptionsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyVpnConnectionOptionsVersionEnum: %s", s)
	}
}

type GETModifyVpnConnectionOptionsQueryParams struct {
	Action GETModifyVpnConnectionOptionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p> <p>Default: <code>0.0.0.0/0</code> </p>
	LocalIpv4NetworkCidr *string `queryParam:"style=form,explode=true,name=LocalIpv4NetworkCidr"`
	// <p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p> <p>Default: <code>::/0</code> </p>
	LocalIpv6NetworkCidr *string `queryParam:"style=form,explode=true,name=LocalIpv6NetworkCidr"`
	// <p>The IPv4 CIDR on the Amazon Web Services side of the VPN connection.</p> <p>Default: <code>0.0.0.0/0</code> </p>
	RemoteIpv4NetworkCidr *string `queryParam:"style=form,explode=true,name=RemoteIpv4NetworkCidr"`
	// <p>The IPv6 CIDR on the Amazon Web Services side of the VPN connection.</p> <p>Default: <code>::/0</code> </p>
	RemoteIpv6NetworkCidr *string                                  `queryParam:"style=form,explode=true,name=RemoteIpv6NetworkCidr"`
	Version               GETModifyVpnConnectionOptionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the Site-to-Site VPN connection.
	VpnConnectionID string `queryParam:"style=form,explode=true,name=VpnConnectionId"`
}

type GETModifyVpnConnectionOptionsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyVpnConnectionOptionsRequest struct {
	QueryParams GETModifyVpnConnectionOptionsQueryParams
	Headers     GETModifyVpnConnectionOptionsHeaders
}

type GETModifyVpnConnectionOptionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
